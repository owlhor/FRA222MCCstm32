
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eb68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b104  0801ed08  0801ed08  0002ed08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029e0c  08029e0c  00040254  2**0
                  CONTENTS
  4 .ARM          00000008  08029e0c  08029e0c  00039e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029e14  08029e14  00040254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08029e14  08029e14  00039e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029e1c  08029e1c  00039e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08029e20  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000258  0802a074  00040258  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  0802a074  00040810  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040254  2**0
                  CONTENTS, READONLY
 12 .debug_info   001052db  00000000  00000000  00040284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da4  00000000  00000000  0014555f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004a30  00000000  00000000  00148308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004980  00000000  00000000  0014cd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb84  00000000  00000000  001516b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002224e  00000000  00000000  0016e23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00478642  00000000  00000000  0019048a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00608acc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000163f4  00000000  00000000  00608b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801ecf0 	.word	0x0801ecf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0801ecf0 	.word	0x0801ecf0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f0a:	eef0 7ae7 	vabs.f32	s15, s15
 8000f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 0 */

///////////////////// [UART UI Base System] /////////////////////

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a4a      	ldr	r2, [pc, #296]	; (8001088 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	f040 808d 	bne.w	800107e <HAL_UARTEx_RxEventCallback+0x132>
	{
		oldPos_uart = newPos_uart;  // Update the last position before copying new data
 8000f64:	4b49      	ldr	r3, [pc, #292]	; (800108c <HAL_UARTEx_RxEventCallback+0x140>)
 8000f66:	881a      	ldrh	r2, [r3, #0]
 8000f68:	4b49      	ldr	r3, [pc, #292]	; (8001090 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f6a:	801a      	strh	r2, [r3, #0]
		datasize_uart = Size;
 8000f6c:	4a49      	ldr	r2, [pc, #292]	; (8001094 <HAL_UARTEx_RxEventCallback+0x148>)
 8000f6e:	887b      	ldrh	r3, [r7, #2]
 8000f70:	8013      	strh	r3, [r2, #0]
		// If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		// This is to maintain the circular buffer
		// The old data in the main buffer will be overlapped

		if (oldPos_uart+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8000f72:	4b47      	ldr	r3, [pc, #284]	; (8001090 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	2b20      	cmp	r3, #32
 8000f7e:	dd14      	ble.n	8000faa <HAL_UARTEx_RxEventCallback+0x5e>
		{
			oldPos_uart = 0;  // point to the start of the buffer
 8000f80:	4b43      	ldr	r3, [pc, #268]	; (8001090 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000f86:	4b42      	ldr	r3, [pc, #264]	; (8001090 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b42      	ldr	r3, [pc, #264]	; (8001098 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000f8e:	4413      	add	r3, r2
 8000f90:	887a      	ldrh	r2, [r7, #2]
 8000f92:	4942      	ldr	r1, [pc, #264]	; (800109c <HAL_UARTEx_RxEventCallback+0x150>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f01c fed3 	bl	801dd40 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <HAL_UARTEx_RxEventCallback+0x144>)
 8000f9c:	881a      	ldrh	r2, [r3, #0]
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	4b39      	ldr	r3, [pc, #228]	; (800108c <HAL_UARTEx_RxEventCallback+0x140>)
 8000fa6:	801a      	strh	r2, [r3, #0]
 8000fa8:	e010      	b.n	8000fcc <HAL_UARTEx_RxEventCallback+0x80>
		}
		else
		{
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000faa:	4b39      	ldr	r3, [pc, #228]	; (8001090 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b39      	ldr	r3, [pc, #228]	; (8001098 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000fb2:	4413      	add	r3, r2
 8000fb4:	887a      	ldrh	r2, [r7, #2]
 8000fb6:	4939      	ldr	r1, [pc, #228]	; (800109c <HAL_UARTEx_RxEventCallback+0x150>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f01c fec1 	bl	801dd40 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000fbe:	4b34      	ldr	r3, [pc, #208]	; (8001090 <HAL_UARTEx_RxEventCallback+0x144>)
 8000fc0:	881a      	ldrh	r2, [r3, #0]
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b30      	ldr	r3, [pc, #192]	; (800108c <HAL_UARTEx_RxEventCallback+0x140>)
 8000fca:	801a      	strh	r2, [r3, #0]
		}
		StartM = MainBuf[newPos_uart - datasize_uart]; // 0b1001xxxx for check start & mode
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <HAL_UARTEx_RxEventCallback+0x140>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b30      	ldr	r3, [pc, #192]	; (8001094 <HAL_UARTEx_RxEventCallback+0x148>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	4a2f      	ldr	r2, [pc, #188]	; (8001098 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000fda:	5cd2      	ldrb	r2, [r2, r3]
 8000fdc:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <HAL_UARTEx_RxEventCallback+0x154>)
 8000fde:	701a      	strb	r2, [r3, #0]
		chkStart = StartM >> 4; // for check "start" or nor
 8000fe0:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <HAL_UARTEx_RxEventCallback+0x154>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <HAL_UARTEx_RxEventCallback+0x158>)
 8000fea:	701a      	strb	r2, [r3, #0]
		NameM = (StartM & 15); // Check mode
 8000fec:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <HAL_UARTEx_RxEventCallback+0x154>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8000ff8:	701a      	strb	r2, [r3, #0]
		if (chkStart == 9){ // 0b1001
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <HAL_UARTEx_RxEventCallback+0x158>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b09      	cmp	r3, #9
 8001000:	d10a      	bne.n	8001018 <HAL_UARTEx_RxEventCallback+0xcc>
			if (NameM >= 1 && NameM <= 14){ // 15 work state or not
 8001002:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d02c      	beq.n	8001064 <HAL_UARTEx_RxEventCallback+0x118>
 800100a:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <HAL_UARTEx_RxEventCallback+0x15c>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b0e      	cmp	r3, #14
 8001010:	d828      	bhi.n	8001064 <HAL_UARTEx_RxEventCallback+0x118>
				All_mode_UARTUI();
 8001012:	f000 f851 	bl	80010b8 <_Z15All_mode_UARTUIv>
 8001016:	e025      	b.n	8001064 <HAL_UARTEx_RxEventCallback+0x118>
			}
		}
		else if (StartM == 88) {
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <HAL_UARTEx_RxEventCallback+0x154>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b58      	cmp	r3, #88	; 0x58
 800101e:	d121      	bne.n	8001064 <HAL_UARTEx_RxEventCallback+0x118>
			StartM = MainBuf[newPos_uart-2];
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_UARTEx_RxEventCallback+0x140>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	3b02      	subs	r3, #2
 8001026:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001028:	5cd2      	ldrb	r2, [r2, r3]
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_UARTEx_RxEventCallback+0x154>)
 800102c:	701a      	strb	r2, [r3, #0]
		    chkStart = StartM >> 4;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_UARTEx_RxEventCallback+0x154>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_UARTEx_RxEventCallback+0x158>)
 8001038:	701a      	strb	r2, [r3, #0]
		    NameM = (StartM & 15);
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_UARTEx_RxEventCallback+0x154>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001046:	701a      	strb	r2, [r3, #0]
		    if (chkStart == 9){
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_UARTEx_RxEventCallback+0x158>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b09      	cmp	r3, #9
 800104e:	d109      	bne.n	8001064 <HAL_UARTEx_RxEventCallback+0x118>
		    	if (NameM >= 1 && NameM <= 14){
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <HAL_UARTEx_RxEventCallback+0x118>
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <HAL_UARTEx_RxEventCallback+0x15c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b0e      	cmp	r3, #14
 800105e:	d801      	bhi.n	8001064 <HAL_UARTEx_RxEventCallback+0x118>
		    		All_mode_UARTUI();
 8001060:	f000 f82a 	bl	80010b8 <_Z15All_mode_UARTUIv>
		        }
		    }
		}

		// start the DMA again
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001064:	2220      	movs	r2, #32
 8001066:	490d      	ldr	r1, [pc, #52]	; (800109c <HAL_UARTEx_RxEventCallback+0x150>)
 8001068:	4810      	ldr	r0, [pc, #64]	; (80010ac <HAL_UARTEx_RxEventCallback+0x160>)
 800106a:	f01a fd9e 	bl	801bbaa <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x164>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_UARTEx_RxEventCallback+0x164>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0208 	bic.w	r2, r2, #8
 800107c:	601a      	str	r2, [r3, #0]

	} //huart USART2
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40004400 	.word	0x40004400
 800108c:	200007a2 	.word	0x200007a2
 8001090:	200007a0 	.word	0x200007a0
 8001094:	200007e0 	.word	0x200007e0
 8001098:	20000780 	.word	0x20000780
 800109c:	20000760 	.word	0x20000760
 80010a0:	200007e4 	.word	0x200007e4
 80010a4:	200007e2 	.word	0x200007e2
 80010a8:	200007e3 	.word	0x200007e3
 80010ac:	200003fc 	.word	0x200003fc
 80010b0:	20000440 	.word	0x20000440
 80010b4:	00000000 	.word	0x00000000

080010b8 <_Z15All_mode_UARTUIv>:

void All_mode_UARTUI()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
	int yur;
	int zur;
	int kur; // counter

	// NameM => 15 mode
		switch (NameM){
 80010be:	4ba8      	ldr	r3, [pc, #672]	; (8001360 <_Z15All_mode_UARTUIv+0x2a8>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	2b0d      	cmp	r3, #13
 80010c6:	f200 83fe 	bhi.w	80018c6 <_Z15All_mode_UARTUIv+0x80e>
 80010ca:	a201      	add	r2, pc, #4	; (adr r2, 80010d0 <_Z15All_mode_UARTUIv+0x18>)
 80010cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d0:	08001109 	.word	0x08001109
 80010d4:	08001169 	.word	0x08001169
 80010d8:	080011a3 	.word	0x080011a3
 80010dc:	080011ed 	.word	0x080011ed
 80010e0:	080012a9 	.word	0x080012a9
 80010e4:	080013b5 	.word	0x080013b5
 80010e8:	0800143f 	.word	0x0800143f
 80010ec:	080015a3 	.word	0x080015a3
 80010f0:	080015dd 	.word	0x080015dd
 80010f4:	08001679 	.word	0x08001679
 80010f8:	08001715 	.word	0x08001715
 80010fc:	080017d7 	.word	0x080017d7
 8001100:	0800180f 	.word	0x0800180f
 8001104:	08001859 	.word	0x08001859
		////==============[Test Command]===========
			case 1: // 10010001 01000000 00000000 00101110
				chksum = MainBuf[newPos_uart-1];
 8001108:	4b96      	ldr	r3, [pc, #600]	; (8001364 <_Z15All_mode_UARTUIv+0x2ac>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	3b01      	subs	r3, #1
 800110e:	4a96      	ldr	r2, [pc, #600]	; (8001368 <_Z15All_mode_UARTUIv+0x2b0>)
 8001110:	5cd2      	ldrb	r2, [r2, r3]
 8001112:	4b96      	ldr	r3, [pc, #600]	; (800136c <_Z15All_mode_UARTUIv+0x2b4>)
 8001114:	701a      	strb	r2, [r3, #0]
				dataF2 = MainBuf[newPos_uart-2];
 8001116:	4b93      	ldr	r3, [pc, #588]	; (8001364 <_Z15All_mode_UARTUIv+0x2ac>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	3b02      	subs	r3, #2
 800111c:	4a92      	ldr	r2, [pc, #584]	; (8001368 <_Z15All_mode_UARTUIv+0x2b0>)
 800111e:	5cd2      	ldrb	r2, [r2, r3]
 8001120:	4b93      	ldr	r3, [pc, #588]	; (8001370 <_Z15All_mode_UARTUIv+0x2b8>)
 8001122:	701a      	strb	r2, [r3, #0]
				dataF1 = MainBuf[newPos_uart-3];
 8001124:	4b8f      	ldr	r3, [pc, #572]	; (8001364 <_Z15All_mode_UARTUIv+0x2ac>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	3b03      	subs	r3, #3
 800112a:	4a8f      	ldr	r2, [pc, #572]	; (8001368 <_Z15All_mode_UARTUIv+0x2b0>)
 800112c:	5cd2      	ldrb	r2, [r2, r3]
 800112e:	4b91      	ldr	r3, [pc, #580]	; (8001374 <_Z15All_mode_UARTUIv+0x2bc>)
 8001130:	701a      	strb	r2, [r3, #0]
				chksum2 = ~(StartM + dataF1 + dataF2);
 8001132:	4b91      	ldr	r3, [pc, #580]	; (8001378 <_Z15All_mode_UARTUIv+0x2c0>)
 8001134:	781a      	ldrb	r2, [r3, #0]
 8001136:	4b8f      	ldr	r3, [pc, #572]	; (8001374 <_Z15All_mode_UARTUIv+0x2bc>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b8c      	ldr	r3, [pc, #560]	; (8001370 <_Z15All_mode_UARTUIv+0x2b8>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	b2db      	uxtb	r3, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b8c      	ldr	r3, [pc, #560]	; (800137c <_Z15All_mode_UARTUIv+0x2c4>)
 800114c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800114e:	4b87      	ldr	r3, [pc, #540]	; (800136c <_Z15All_mode_UARTUIv+0x2b4>)
 8001150:	781a      	ldrb	r2, [r3, #0]
 8001152:	4b8a      	ldr	r3, [pc, #552]	; (800137c <_Z15All_mode_UARTUIv+0x2c4>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	f040 839a 	bne.w	8001890 <_Z15All_mode_UARTUIv+0x7d8>
					M_state = 1;
 800115c:	4b88      	ldr	r3, [pc, #544]	; (8001380 <_Z15All_mode_UARTUIv+0x2c8>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001162:	f000 fbe3 	bl	800192c <_Z7xu_Uartv>
				}
				break;
 8001166:	e393      	b.n	8001890 <_Z15All_mode_UARTUIv+0x7d8>
		////==============[Connect MCU]===========
			case 2: //10010010 01101101
				chksum = MainBuf[newPos_uart-1];
 8001168:	4b7e      	ldr	r3, [pc, #504]	; (8001364 <_Z15All_mode_UARTUIv+0x2ac>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	3b01      	subs	r3, #1
 800116e:	4a7e      	ldr	r2, [pc, #504]	; (8001368 <_Z15All_mode_UARTUIv+0x2b0>)
 8001170:	5cd2      	ldrb	r2, [r2, r3]
 8001172:	4b7e      	ldr	r3, [pc, #504]	; (800136c <_Z15All_mode_UARTUIv+0x2b4>)
 8001174:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001176:	4b80      	ldr	r3, [pc, #512]	; (8001378 <_Z15All_mode_UARTUIv+0x2c0>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	43db      	mvns	r3, r3
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b81      	ldr	r3, [pc, #516]	; (8001384 <_Z15All_mode_UARTUIv+0x2cc>)
 8001180:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001182:	4b7a      	ldr	r3, [pc, #488]	; (800136c <_Z15All_mode_UARTUIv+0x2b4>)
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	4b7f      	ldr	r3, [pc, #508]	; (8001384 <_Z15All_mode_UARTUIv+0x2cc>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	f040 8382 	bne.w	8001894 <_Z15All_mode_UARTUIv+0x7dc>
					M_state = 2;
 8001190:	4b7b      	ldr	r3, [pc, #492]	; (8001380 <_Z15All_mode_UARTUIv+0x2c8>)
 8001192:	2202      	movs	r2, #2
 8001194:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					// check efft
					flag_efftActi = 1;
 8001196:	4b7c      	ldr	r3, [pc, #496]	; (8001388 <_Z15All_mode_UARTUIv+0x2d0>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 800119c:	f000 fbc6 	bl	800192c <_Z7xu_Uartv>
				}
				break;
 80011a0:	e378      	b.n	8001894 <_Z15All_mode_UARTUIv+0x7dc>
		////==============[Disconnect MCU]===========
			case 3: //10010011 01101100
					chksum = MainBuf[newPos_uart-1];
 80011a2:	4b70      	ldr	r3, [pc, #448]	; (8001364 <_Z15All_mode_UARTUIv+0x2ac>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	4a6f      	ldr	r2, [pc, #444]	; (8001368 <_Z15All_mode_UARTUIv+0x2b0>)
 80011aa:	5cd2      	ldrb	r2, [r2, r3]
 80011ac:	4b6f      	ldr	r3, [pc, #444]	; (800136c <_Z15All_mode_UARTUIv+0x2b4>)
 80011ae:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80011b0:	4b71      	ldr	r3, [pc, #452]	; (8001378 <_Z15All_mode_UARTUIv+0x2c0>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b72      	ldr	r3, [pc, #456]	; (8001384 <_Z15All_mode_UARTUIv+0x2cc>)
 80011ba:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80011bc:	4b6b      	ldr	r3, [pc, #428]	; (800136c <_Z15All_mode_UARTUIv+0x2b4>)
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	4b70      	ldr	r3, [pc, #448]	; (8001384 <_Z15All_mode_UARTUIv+0x2cc>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8367 	bne.w	8001898 <_Z15All_mode_UARTUIv+0x7e0>
					M_state = 3;
 80011ca:	4b6d      	ldr	r3, [pc, #436]	; (8001380 <_Z15All_mode_UARTUIv+0x2c8>)
 80011cc:	2203      	movs	r2, #3
 80011ce:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					ResetParam();
 80011d0:	f001 fea2 	bl	8002f18 <_Z10ResetParamv>
					grandState = Ready;
 80011d4:	4b6d      	ldr	r3, [pc, #436]	; (800138c <_Z15All_mode_UARTUIv+0x2d4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
 80011da:	2364      	movs	r3, #100	; 0x64
 80011dc:	2202      	movs	r2, #2
 80011de:	496c      	ldr	r1, [pc, #432]	; (8001390 <_Z15All_mode_UARTUIv+0x2d8>)
 80011e0:	486c      	ldr	r0, [pc, #432]	; (8001394 <_Z15All_mode_UARTUIv+0x2dc>)
 80011e2:	f01a fc50 	bl	801ba86 <HAL_UART_Transmit>

					xu_Uart();
 80011e6:	f000 fba1 	bl	800192c <_Z7xu_Uartv>

				}
				break;
 80011ea:	e355      	b.n	8001898 <_Z15All_mode_UARTUIv+0x7e0>
		////==============[Angular Velo Set]===========
			case 4:
					chksum = MainBuf[newPos_uart-1];
 80011ec:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <_Z15All_mode_UARTUIv+0x2ac>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	4a5d      	ldr	r2, [pc, #372]	; (8001368 <_Z15All_mode_UARTUIv+0x2b0>)
 80011f4:	5cd2      	ldrb	r2, [r2, r3]
 80011f6:	4b5d      	ldr	r3, [pc, #372]	; (800136c <_Z15All_mode_UARTUIv+0x2b4>)
 80011f8:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80011fa:	4b5a      	ldr	r3, [pc, #360]	; (8001364 <_Z15All_mode_UARTUIv+0x2ac>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	3b02      	subs	r3, #2
 8001200:	4a59      	ldr	r2, [pc, #356]	; (8001368 <_Z15All_mode_UARTUIv+0x2b0>)
 8001202:	5cd2      	ldrb	r2, [r2, r3]
 8001204:	4b5a      	ldr	r3, [pc, #360]	; (8001370 <_Z15All_mode_UARTUIv+0x2b8>)
 8001206:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 8001208:	4b56      	ldr	r3, [pc, #344]	; (8001364 <_Z15All_mode_UARTUIv+0x2ac>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	3b03      	subs	r3, #3
 800120e:	4a56      	ldr	r2, [pc, #344]	; (8001368 <_Z15All_mode_UARTUIv+0x2b0>)
 8001210:	5cd2      	ldrb	r2, [r2, r3]
 8001212:	4b58      	ldr	r3, [pc, #352]	; (8001374 <_Z15All_mode_UARTUIv+0x2bc>)
 8001214:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[0] = dataF1;
 8001216:	4b57      	ldr	r3, [pc, #348]	; (8001374 <_Z15All_mode_UARTUIv+0x2bc>)
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	4b5f      	ldr	r3, [pc, #380]	; (8001398 <_Z15All_mode_UARTUIv+0x2e0>)
 800121c:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[1] = dataF2;
 800121e:	4b54      	ldr	r3, [pc, #336]	; (8001370 <_Z15All_mode_UARTUIv+0x2b8>)
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	4b5d      	ldr	r3, [pc, #372]	; (8001398 <_Z15All_mode_UARTUIv+0x2e0>)
 8001224:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8001226:	4b54      	ldr	r3, [pc, #336]	; (8001378 <_Z15All_mode_UARTUIv+0x2c0>)
 8001228:	781a      	ldrb	r2, [r3, #0]
 800122a:	4b52      	ldr	r3, [pc, #328]	; (8001374 <_Z15All_mode_UARTUIv+0x2bc>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4b4f      	ldr	r3, [pc, #316]	; (8001370 <_Z15All_mode_UARTUIv+0x2b8>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	b2db      	uxtb	r3, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b4f      	ldr	r3, [pc, #316]	; (800137c <_Z15All_mode_UARTUIv+0x2c4>)
 8001240:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 8001242:	4b4a      	ldr	r3, [pc, #296]	; (800136c <_Z15All_mode_UARTUIv+0x2b4>)
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	4b4d      	ldr	r3, [pc, #308]	; (800137c <_Z15All_mode_UARTUIv+0x2c4>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	f040 8326 	bne.w	800189c <_Z15All_mode_UARTUIv+0x7e4>
					M_state = 4;
 8001250:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <_Z15All_mode_UARTUIv+0x2c8>)
 8001252:	2204      	movs	r2, #4
 8001254:	701a      	strb	r2, [r3, #0]
					DataProtocol_SetVelo = Set_AngVelo[1];
 8001256:	4b50      	ldr	r3, [pc, #320]	; (8001398 <_Z15All_mode_UARTUIv+0x2e0>)
 8001258:	785b      	ldrb	r3, [r3, #1]
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001262:	4b4e      	ldr	r3, [pc, #312]	; (800139c <_Z15All_mode_UARTUIv+0x2e4>)
 8001264:	edc3 7a00 	vstr	s15, [r3]
					//////// RPM to Rad/s => 2PI/60
					Velocity =((DataProtocol_SetVelo * 10)/255) * (2 * M_PI / 60);
 8001268:	4b4c      	ldr	r3, [pc, #304]	; (800139c <_Z15All_mode_UARTUIv+0x2e4>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001276:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80013a0 <_Z15All_mode_UARTUIv+0x2e8>
 800127a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800127e:	ee16 0a90 	vmov	r0, s13
 8001282:	f7ff f961 	bl	8000548 <__aeabi_f2d>
 8001286:	a332      	add	r3, pc, #200	; (adr r3, 8001350 <_Z15All_mode_UARTUIv+0x298>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7ff f9b4 	bl	80005f8 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fc5e 	bl	8000b58 <__aeabi_d2f>
 800129c:	4603      	mov	r3, r0
 800129e:	4a41      	ldr	r2, [pc, #260]	; (80013a4 <_Z15All_mode_UARTUIv+0x2ec>)
 80012a0:	6013      	str	r3, [r2, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80012a2:	f000 fb43 	bl	800192c <_Z7xu_Uartv>
				}
				break;
 80012a6:	e2f9      	b.n	800189c <_Z15All_mode_UARTUIv+0x7e4>
		////==============[Angular Position Set]===========
			case 5:
					chksum = MainBuf[newPos_uart-1];
 80012a8:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <_Z15All_mode_UARTUIv+0x2ac>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	4a2e      	ldr	r2, [pc, #184]	; (8001368 <_Z15All_mode_UARTUIv+0x2b0>)
 80012b0:	5cd2      	ldrb	r2, [r2, r3]
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <_Z15All_mode_UARTUIv+0x2b4>)
 80012b4:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80012b6:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <_Z15All_mode_UARTUIv+0x2ac>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	3b02      	subs	r3, #2
 80012bc:	4a2a      	ldr	r2, [pc, #168]	; (8001368 <_Z15All_mode_UARTUIv+0x2b0>)
 80012be:	5cd2      	ldrb	r2, [r2, r3]
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <_Z15All_mode_UARTUIv+0x2b8>)
 80012c2:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <_Z15All_mode_UARTUIv+0x2ac>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	4a27      	ldr	r2, [pc, #156]	; (8001368 <_Z15All_mode_UARTUIv+0x2b0>)
 80012cc:	5cd2      	ldrb	r2, [r2, r3]
 80012ce:	4b29      	ldr	r3, [pc, #164]	; (8001374 <_Z15All_mode_UARTUIv+0x2bc>)
 80012d0:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[0] = dataF1;
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <_Z15All_mode_UARTUIv+0x2bc>)
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <_Z15All_mode_UARTUIv+0x2f0>)
 80012d8:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[1] = dataF2;
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <_Z15All_mode_UARTUIv+0x2b8>)
 80012dc:	781a      	ldrb	r2, [r3, #0]
 80012de:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <_Z15All_mode_UARTUIv+0x2f0>)
 80012e0:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <_Z15All_mode_UARTUIv+0x2c0>)
 80012e4:	781a      	ldrb	r2, [r3, #0]
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <_Z15All_mode_UARTUIv+0x2bc>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <_Z15All_mode_UARTUIv+0x2b8>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <_Z15All_mode_UARTUIv+0x2c4>)
 80012fc:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <_Z15All_mode_UARTUIv+0x2b4>)
 8001300:	781a      	ldrb	r2, [r3, #0]
 8001302:	4b1e      	ldr	r3, [pc, #120]	; (800137c <_Z15All_mode_UARTUIv+0x2c4>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	f040 82ca 	bne.w	80018a0 <_Z15All_mode_UARTUIv+0x7e8>
					M_state = 5;
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <_Z15All_mode_UARTUIv+0x2c8>)
 800130e:	2205      	movs	r2, #5
 8001310:	701a      	strb	r2, [r3, #0]

					DataProtocol_SetAngPosi = (Set_AngPosi[0]*256) + Set_AngPosi[1];
 8001312:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <_Z15All_mode_UARTUIv+0x2f0>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	4a23      	ldr	r2, [pc, #140]	; (80013a8 <_Z15All_mode_UARTUIv+0x2f0>)
 800131a:	7852      	ldrb	r2, [r2, #1]
 800131c:	4413      	add	r3, r2
 800131e:	4a23      	ldr	r2, [pc, #140]	; (80013ac <_Z15All_mode_UARTUIv+0x2f4>)
 8001320:	6013      	str	r3, [r2, #0]
					//positionlog[0] = (DataProtocol_SetAngPosi / (3.14 * 10000) * 180);
					positionlog[0] = (float)(DataProtocol_SetAngPosi / 10000.0);
 8001322:	4b22      	ldr	r3, [pc, #136]	; (80013ac <_Z15All_mode_UARTUIv+0x2f4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f8fc 	bl	8000524 <__aeabi_i2d>
 800132c:	a30a      	add	r3, pc, #40	; (adr r3, 8001358 <_Z15All_mode_UARTUIv+0x2a0>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff fa8b 	bl	800084c <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fc0b 	bl	8000b58 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a1a      	ldr	r2, [pc, #104]	; (80013b0 <_Z15All_mode_UARTUIv+0x2f8>)
 8001346:	6013      	str	r3, [r2, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001348:	f000 faf0 	bl	800192c <_Z7xu_Uartv>
				}
				break;
 800134c:	e2a8      	b.n	80018a0 <_Z15All_mode_UARTUIv+0x7e8>
 800134e:	bf00      	nop
 8001350:	f37bebd5 	.word	0xf37bebd5
 8001354:	3fbacee9 	.word	0x3fbacee9
 8001358:	00000000 	.word	0x00000000
 800135c:	40c38800 	.word	0x40c38800
 8001360:	200007e3 	.word	0x200007e3
 8001364:	200007a2 	.word	0x200007a2
 8001368:	20000780 	.word	0x20000780
 800136c:	200007e5 	.word	0x200007e5
 8001370:	200007ea 	.word	0x200007ea
 8001374:	200007e9 	.word	0x200007e9
 8001378:	200007e4 	.word	0x200007e4
 800137c:	200007e7 	.word	0x200007e7
 8001380:	200007eb 	.word	0x200007eb
 8001384:	200007e6 	.word	0x200007e6
 8001388:	20000747 	.word	0x20000747
 800138c:	20000502 	.word	0x20000502
 8001390:	200001b8 	.word	0x200001b8
 8001394:	200003fc 	.word	0x200003fc
 8001398:	200007ac 	.word	0x200007ac
 800139c:	200007b0 	.word	0x200007b0
 80013a0:	437f0000 	.word	0x437f0000
 80013a4:	20000590 	.word	0x20000590
 80013a8:	200007b4 	.word	0x200007b4
 80013ac:	200007b8 	.word	0x200007b8
 80013b0:	20000144 	.word	0x20000144
		////==============[Goal 1 station]===========
			case 6:
					chksum = MainBuf[newPos_uart-1];
 80013b4:	4b99      	ldr	r3, [pc, #612]	; (800161c <_Z15All_mode_UARTUIv+0x564>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	4a99      	ldr	r2, [pc, #612]	; (8001620 <_Z15All_mode_UARTUIv+0x568>)
 80013bc:	5cd2      	ldrb	r2, [r2, r3]
 80013be:	4b99      	ldr	r3, [pc, #612]	; (8001624 <_Z15All_mode_UARTUIv+0x56c>)
 80013c0:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80013c2:	4b96      	ldr	r3, [pc, #600]	; (800161c <_Z15All_mode_UARTUIv+0x564>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	3b02      	subs	r3, #2
 80013c8:	4a95      	ldr	r2, [pc, #596]	; (8001620 <_Z15All_mode_UARTUIv+0x568>)
 80013ca:	5cd2      	ldrb	r2, [r2, r3]
 80013cc:	4b96      	ldr	r3, [pc, #600]	; (8001628 <_Z15All_mode_UARTUIv+0x570>)
 80013ce:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80013d0:	4b92      	ldr	r3, [pc, #584]	; (800161c <_Z15All_mode_UARTUIv+0x564>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	4a92      	ldr	r2, [pc, #584]	; (8001620 <_Z15All_mode_UARTUIv+0x568>)
 80013d8:	5cd2      	ldrb	r2, [r2, r3]
 80013da:	4b94      	ldr	r3, [pc, #592]	; (800162c <_Z15All_mode_UARTUIv+0x574>)
 80013dc:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[0] = dataF1;
 80013de:	4b93      	ldr	r3, [pc, #588]	; (800162c <_Z15All_mode_UARTUIv+0x574>)
 80013e0:	781a      	ldrb	r2, [r3, #0]
 80013e2:	4b93      	ldr	r3, [pc, #588]	; (8001630 <_Z15All_mode_UARTUIv+0x578>)
 80013e4:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[1] = dataF2;
 80013e6:	4b90      	ldr	r3, [pc, #576]	; (8001628 <_Z15All_mode_UARTUIv+0x570>)
 80013e8:	781a      	ldrb	r2, [r3, #0]
 80013ea:	4b91      	ldr	r3, [pc, #580]	; (8001630 <_Z15All_mode_UARTUIv+0x578>)
 80013ec:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80013ee:	4b91      	ldr	r3, [pc, #580]	; (8001634 <_Z15All_mode_UARTUIv+0x57c>)
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	4b8e      	ldr	r3, [pc, #568]	; (800162c <_Z15All_mode_UARTUIv+0x574>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b8b      	ldr	r3, [pc, #556]	; (8001628 <_Z15All_mode_UARTUIv+0x570>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	b2db      	uxtb	r3, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b8c      	ldr	r3, [pc, #560]	; (8001638 <_Z15All_mode_UARTUIv+0x580>)
 8001408:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800140a:	4b86      	ldr	r3, [pc, #536]	; (8001624 <_Z15All_mode_UARTUIv+0x56c>)
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	4b8a      	ldr	r3, [pc, #552]	; (8001638 <_Z15All_mode_UARTUIv+0x580>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	f040 8246 	bne.w	80018a4 <_Z15All_mode_UARTUIv+0x7ec>
					M_state = 6;
 8001418:	4b88      	ldr	r3, [pc, #544]	; (800163c <_Z15All_mode_UARTUIv+0x584>)
 800141a:	2206      	movs	r2, #6
 800141c:	701a      	strb	r2, [r3, #0]

					///////// Load 1 station Data /////////////
					positionlog[0] = PosDataSet[Set_Goal_1Sta[1]];
 800141e:	4b84      	ldr	r3, [pc, #528]	; (8001630 <_Z15All_mode_UARTUIv+0x578>)
 8001420:	785b      	ldrb	r3, [r3, #1]
 8001422:	4a87      	ldr	r2, [pc, #540]	; (8001640 <_Z15All_mode_UARTUIv+0x588>)
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a86      	ldr	r2, [pc, #536]	; (8001644 <_Z15All_mode_UARTUIv+0x58c>)
 800142c:	6013      	str	r3, [r2, #0]
					Set1_Sta = Set_Goal_1Sta[1];
 800142e:	4b80      	ldr	r3, [pc, #512]	; (8001630 <_Z15All_mode_UARTUIv+0x578>)
 8001430:	785b      	ldrb	r3, [r3, #1]
 8001432:	461a      	mov	r2, r3
 8001434:	4b84      	ldr	r3, [pc, #528]	; (8001648 <_Z15All_mode_UARTUIv+0x590>)
 8001436:	601a      	str	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					xu_Uart();
 8001438:	f000 fa78 	bl	800192c <_Z7xu_Uartv>
				}
				break;
 800143c:	e232      	b.n	80018a4 <_Z15All_mode_UARTUIv+0x7ec>
		////==============[Goal n station]===========
			case 7:
				Nstation = MainBuf[(newPos_uart - datasize_uart)+1];
 800143e:	4b77      	ldr	r3, [pc, #476]	; (800161c <_Z15All_mode_UARTUIv+0x564>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	4b81      	ldr	r3, [pc, #516]	; (800164c <_Z15All_mode_UARTUIv+0x594>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	3301      	adds	r3, #1
 800144c:	4a74      	ldr	r2, [pc, #464]	; (8001620 <_Z15All_mode_UARTUIv+0x568>)
 800144e:	5cd2      	ldrb	r2, [r2, r3]
 8001450:	4b7f      	ldr	r3, [pc, #508]	; (8001650 <_Z15All_mode_UARTUIv+0x598>)
 8001452:	701a      	strb	r2, [r3, #0]
				yur = Nstation;
 8001454:	4b7e      	ldr	r3, [pc, #504]	; (8001650 <_Z15All_mode_UARTUIv+0x598>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]
				zur = ( yur / 2 ) + yur % 2;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	0fda      	lsrs	r2, r3, #31
 800145e:	4413      	add	r3, r2
 8001460:	105b      	asrs	r3, r3, #1
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	bfb8      	it	lt
 800146e:	425b      	neglt	r3, r3
 8001470:	4413      	add	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
				kur = 0; // counter
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]

				for(int i = 0; i < zur; i++ ){
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	429a      	cmp	r2, r3
 8001482:	da1e      	bge.n	80014c2 <_Z15All_mode_UARTUIv+0x40a>
					dataFSum += MainBuf[oldPos_uart + (i+2)];
 8001484:	4b73      	ldr	r3, [pc, #460]	; (8001654 <_Z15All_mode_UARTUIv+0x59c>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	3302      	adds	r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	4a63      	ldr	r2, [pc, #396]	; (8001620 <_Z15All_mode_UARTUIv+0x568>)
 8001492:	5cd2      	ldrb	r2, [r2, r3]
 8001494:	4b70      	ldr	r3, [pc, #448]	; (8001658 <_Z15All_mode_UARTUIv+0x5a0>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4413      	add	r3, r2
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b6e      	ldr	r3, [pc, #440]	; (8001658 <_Z15All_mode_UARTUIv+0x5a0>)
 800149e:	701a      	strb	r2, [r3, #0]
					Goal_nSta[i] = MainBuf[oldPos_uart + (i+2)];
 80014a0:	4b6c      	ldr	r3, [pc, #432]	; (8001654 <_Z15All_mode_UARTUIv+0x59c>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	3302      	adds	r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	4a5c      	ldr	r2, [pc, #368]	; (8001620 <_Z15All_mode_UARTUIv+0x568>)
 80014ae:	5cd1      	ldrb	r1, [r2, r3]
 80014b0:	4a6a      	ldr	r2, [pc, #424]	; (800165c <_Z15All_mode_UARTUIv+0x5a4>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4413      	add	r3, r2
 80014b6:	460a      	mov	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < zur; i++ ){
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	3301      	adds	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	e7dc      	b.n	800147c <_Z15All_mode_UARTUIv+0x3c4>
				}
				for(int x = 1; x < Nstation+1; x++){
 80014c2:	2301      	movs	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	4b62      	ldr	r3, [pc, #392]	; (8001650 <_Z15All_mode_UARTUIv+0x598>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	4293      	cmp	r3, r2
 80014d0:	dc29      	bgt.n	8001526 <_Z15All_mode_UARTUIv+0x46e>
                    if(x % 2 == 1){
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	bfb8      	it	lt
 80014dc:	425b      	neglt	r3, r3
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d10b      	bne.n	80014fa <_Z15All_mode_UARTUIv+0x442>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] % 16);
 80014e2:	4a5e      	ldr	r2, [pc, #376]	; (800165c <_Z15All_mode_UARTUIv+0x5a4>)
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	4413      	add	r3, r2
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	f002 020f 	and.w	r2, r2, #15
 80014f2:	b2d1      	uxtb	r1, r2
 80014f4:	4a5a      	ldr	r2, [pc, #360]	; (8001660 <_Z15All_mode_UARTUIv+0x5a8>)
 80014f6:	54d1      	strb	r1, [r2, r3]
 80014f8:	e011      	b.n	800151e <_Z15All_mode_UARTUIv+0x466>
                    }else if(x % 2 == 0){
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10c      	bne.n	800151e <_Z15All_mode_UARTUIv+0x466>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] / 16);
 8001504:	4a55      	ldr	r2, [pc, #340]	; (800165c <_Z15All_mode_UARTUIv+0x5a4>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3b01      	subs	r3, #1
 8001510:	0912      	lsrs	r2, r2, #4
 8001512:	b2d1      	uxtb	r1, r2
 8001514:	4a52      	ldr	r2, [pc, #328]	; (8001660 <_Z15All_mode_UARTUIv+0x5a8>)
 8001516:	54d1      	strb	r1, [r2, r3]
                        kur++;
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	3301      	adds	r3, #1
 800151c:	61fb      	str	r3, [r7, #28]
				for(int x = 1; x < Nstation+1; x++){
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e7cf      	b.n	80014c6 <_Z15All_mode_UARTUIv+0x40e>
                    }
                }

				chksum = MainBuf[newPos_uart-1];
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <_Z15All_mode_UARTUIv+0x564>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	3b01      	subs	r3, #1
 800152c:	4a3c      	ldr	r2, [pc, #240]	; (8001620 <_Z15All_mode_UARTUIv+0x568>)
 800152e:	5cd2      	ldrb	r2, [r2, r3]
 8001530:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <_Z15All_mode_UARTUIv+0x56c>)
 8001532:	701a      	strb	r2, [r3, #0]
				chksum3 = ~(StartM + Nstation + dataFSum);
 8001534:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <_Z15All_mode_UARTUIv+0x57c>)
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	4b45      	ldr	r3, [pc, #276]	; (8001650 <_Z15All_mode_UARTUIv+0x598>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4413      	add	r3, r2
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b45      	ldr	r3, [pc, #276]	; (8001658 <_Z15All_mode_UARTUIv+0x5a0>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4413      	add	r3, r2
 8001546:	b2db      	uxtb	r3, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b45      	ldr	r3, [pc, #276]	; (8001664 <_Z15All_mode_UARTUIv+0x5ac>)
 800154e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum3){
 8001550:	4b34      	ldr	r3, [pc, #208]	; (8001624 <_Z15All_mode_UARTUIv+0x56c>)
 8001552:	781a      	ldrb	r2, [r3, #0]
 8001554:	4b43      	ldr	r3, [pc, #268]	; (8001664 <_Z15All_mode_UARTUIv+0x5ac>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	f040 81a5 	bne.w	80018a8 <_Z15All_mode_UARTUIv+0x7f0>
					M_state = 7;
 800155e:	4b37      	ldr	r3, [pc, #220]	; (800163c <_Z15All_mode_UARTUIv+0x584>)
 8001560:	2207      	movs	r2, #7
 8001562:	701a      	strb	r2, [r3, #0]

					/////////// Load n station-> positionlog  //////////
					//for(int j = 0; j <= len(PosDataSet); j++){
					for(int j = 0; j <= Nstation; j++){
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	4b39      	ldr	r3, [pc, #228]	; (8001650 <_Z15All_mode_UARTUIv+0x598>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4293      	cmp	r3, r2
 8001572:	dc10      	bgt.n	8001596 <_Z15All_mode_UARTUIv+0x4de>
						positionlog[j] = PosDataSet[Set_Goal_nSta[j]];
 8001574:	4a3a      	ldr	r2, [pc, #232]	; (8001660 <_Z15All_mode_UARTUIv+0x5a8>)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4413      	add	r3, r2
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4a30      	ldr	r2, [pc, #192]	; (8001640 <_Z15All_mode_UARTUIv+0x588>)
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	492f      	ldr	r1, [pc, #188]	; (8001644 <_Z15All_mode_UARTUIv+0x58c>)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	601a      	str	r2, [r3, #0]
					for(int j = 0; j <= Nstation; j++){
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	3301      	adds	r3, #1
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	e7e8      	b.n	8001568 <_Z15All_mode_UARTUIv+0x4b0>
						//Set_Goal_nSta -> raw index from UART
					}

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					dataFSum = 0;
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <_Z15All_mode_UARTUIv+0x5a0>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
					xu_Uart();
 800159c:	f000 f9c6 	bl	800192c <_Z7xu_Uartv>
				}
				break;
 80015a0:	e182      	b.n	80018a8 <_Z15All_mode_UARTUIv+0x7f0>
		////==============[RUN Go to Goal station Order to Work]===========
			case 8: //10011000 01100111
				chksum = MainBuf[newPos_uart-1];
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <_Z15All_mode_UARTUIv+0x564>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	4a1d      	ldr	r2, [pc, #116]	; (8001620 <_Z15All_mode_UARTUIv+0x568>)
 80015aa:	5cd2      	ldrb	r2, [r2, r3]
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <_Z15All_mode_UARTUIv+0x56c>)
 80015ae:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <_Z15All_mode_UARTUIv+0x57c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <_Z15All_mode_UARTUIv+0x5b0>)
 80015ba:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <_Z15All_mode_UARTUIv+0x56c>)
 80015be:	781a      	ldrb	r2, [r3, #0]
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <_Z15All_mode_UARTUIv+0x5b0>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	f040 8171 	bne.w	80018ac <_Z15All_mode_UARTUIv+0x7f4>
					M_state = 8;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <_Z15All_mode_UARTUIv+0x584>)
 80015cc:	2208      	movs	r2, #8
 80015ce:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80015d0:	f000 f9ac 	bl	800192c <_Z7xu_Uartv>

		///////// Order to Work !!! ///
					grandState = work;
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <_Z15All_mode_UARTUIv+0x5b4>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
					//if(grandState == Ready){grandState = work;}
					//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2 ,1000);
				}
				break;
 80015da:	e167      	b.n	80018ac <_Z15All_mode_UARTUIv+0x7f4>
		////==============[Request Current station]===========
			case 9: //10011001 01100110
				chksum = MainBuf[newPos_uart-1];
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <_Z15All_mode_UARTUIv+0x564>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <_Z15All_mode_UARTUIv+0x568>)
 80015e4:	5cd2      	ldrb	r2, [r2, r3]
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <_Z15All_mode_UARTUIv+0x56c>)
 80015e8:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <_Z15All_mode_UARTUIv+0x57c>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <_Z15All_mode_UARTUIv+0x5b0>)
 80015f4:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <_Z15All_mode_UARTUIv+0x56c>)
 80015f8:	781a      	ldrb	r2, [r3, #0]
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <_Z15All_mode_UARTUIv+0x5b0>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	f040 8156 	bne.w	80018b0 <_Z15All_mode_UARTUIv+0x7f8>
					M_state = 9;
 8001604:	4b0d      	ldr	r3, [pc, #52]	; (800163c <_Z15All_mode_UARTUIv+0x584>)
 8001606:	2209      	movs	r2, #9
 8001608:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800160a:	f000 f98f 	bl	800192c <_Z7xu_Uartv>
					//Req_sta[1] = 0;
					//Req_sta[2] = x;
					//Req_sta[3] = ~(Req_sta[0] + Req_sta[1] + Req_sta[2]);
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_sta, 4 ,100);
 800160e:	2364      	movs	r3, #100	; 0x64
 8001610:	2204      	movs	r2, #4
 8001612:	4917      	ldr	r1, [pc, #92]	; (8001670 <_Z15All_mode_UARTUIv+0x5b8>)
 8001614:	4817      	ldr	r0, [pc, #92]	; (8001674 <_Z15All_mode_UARTUIv+0x5bc>)
 8001616:	f01a fa36 	bl	801ba86 <HAL_UART_Transmit>
				}
				break;
 800161a:	e149      	b.n	80018b0 <_Z15All_mode_UARTUIv+0x7f8>
 800161c:	200007a2 	.word	0x200007a2
 8001620:	20000780 	.word	0x20000780
 8001624:	200007e5 	.word	0x200007e5
 8001628:	200007ea 	.word	0x200007ea
 800162c:	200007e9 	.word	0x200007e9
 8001630:	200007bc 	.word	0x200007bc
 8001634:	200007e4 	.word	0x200007e4
 8001638:	200007e7 	.word	0x200007e7
 800163c:	200007eb 	.word	0x200007eb
 8001640:	20000520 	.word	0x20000520
 8001644:	20000144 	.word	0x20000144
 8001648:	200007dc 	.word	0x200007dc
 800164c:	200007e0 	.word	0x200007e0
 8001650:	200007ec 	.word	0x200007ec
 8001654:	200007a0 	.word	0x200007a0
 8001658:	200007ed 	.word	0x200007ed
 800165c:	200007c0 	.word	0x200007c0
 8001660:	200007c8 	.word	0x200007c8
 8001664:	200007e8 	.word	0x200007e8
 8001668:	200007e6 	.word	0x200007e6
 800166c:	20000502 	.word	0x20000502
 8001670:	200001bc 	.word	0x200001bc
 8001674:	200003fc 	.word	0x200003fc
		////==============[Request Angular Position]===========
			case 10: //10011010 01100101
				chksum = MainBuf[newPos_uart-1];
 8001678:	4b97      	ldr	r3, [pc, #604]	; (80018d8 <_Z15All_mode_UARTUIv+0x820>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	3b01      	subs	r3, #1
 800167e:	4a97      	ldr	r2, [pc, #604]	; (80018dc <_Z15All_mode_UARTUIv+0x824>)
 8001680:	5cd2      	ldrb	r2, [r2, r3]
 8001682:	4b97      	ldr	r3, [pc, #604]	; (80018e0 <_Z15All_mode_UARTUIv+0x828>)
 8001684:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001686:	4b97      	ldr	r3, [pc, #604]	; (80018e4 <_Z15All_mode_UARTUIv+0x82c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	43db      	mvns	r3, r3
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b96      	ldr	r3, [pc, #600]	; (80018e8 <_Z15All_mode_UARTUIv+0x830>)
 8001690:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001692:	4b93      	ldr	r3, [pc, #588]	; (80018e0 <_Z15All_mode_UARTUIv+0x828>)
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	4b94      	ldr	r3, [pc, #592]	; (80018e8 <_Z15All_mode_UARTUIv+0x830>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	f040 810a 	bne.w	80018b4 <_Z15All_mode_UARTUIv+0x7fc>
					M_state = 10;
 80016a0:	4b92      	ldr	r3, [pc, #584]	; (80018ec <_Z15All_mode_UARTUIv+0x834>)
 80016a2:	220a      	movs	r2, #10
 80016a4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80016a6:	f000 f941 	bl	800192c <_Z7xu_Uartv>
					DataProtocol_AngPosi = (CurrentEn * 10000); //KalP
 80016aa:	4b91      	ldr	r3, [pc, #580]	; (80018f0 <_Z15All_mode_UARTUIv+0x838>)
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80018f4 <_Z15All_mode_UARTUIv+0x83c>
 80016b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016bc:	ee17 2a90 	vmov	r2, s15
 80016c0:	4b8d      	ldr	r3, [pc, #564]	; (80018f8 <_Z15All_mode_UARTUIv+0x840>)
 80016c2:	601a      	str	r2, [r3, #0]
					Req_AngPosi[1] = (DataProtocol_AngPosi / 256);
 80016c4:	4b8c      	ldr	r3, [pc, #560]	; (80018f8 <_Z15All_mode_UARTUIv+0x840>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	da00      	bge.n	80016ce <_Z15All_mode_UARTUIv+0x616>
 80016cc:	33ff      	adds	r3, #255	; 0xff
 80016ce:	121b      	asrs	r3, r3, #8
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b8a      	ldr	r3, [pc, #552]	; (80018fc <_Z15All_mode_UARTUIv+0x844>)
 80016d4:	705a      	strb	r2, [r3, #1]
					Req_AngPosi[2] = (DataProtocol_AngPosi % 256);
 80016d6:	4b88      	ldr	r3, [pc, #544]	; (80018f8 <_Z15All_mode_UARTUIv+0x840>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	425a      	negs	r2, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	bf58      	it	pl
 80016e2:	4253      	negpl	r3, r2
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b85      	ldr	r3, [pc, #532]	; (80018fc <_Z15All_mode_UARTUIv+0x844>)
 80016e8:	709a      	strb	r2, [r3, #2]
					Req_AngPosi[3] = ~(Req_AngPosi[0] + Req_AngPosi[1] + Req_AngPosi[2]);
 80016ea:	4b84      	ldr	r3, [pc, #528]	; (80018fc <_Z15All_mode_UARTUIv+0x844>)
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	4b83      	ldr	r3, [pc, #524]	; (80018fc <_Z15All_mode_UARTUIv+0x844>)
 80016f0:	785b      	ldrb	r3, [r3, #1]
 80016f2:	4413      	add	r3, r2
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b81      	ldr	r3, [pc, #516]	; (80018fc <_Z15All_mode_UARTUIv+0x844>)
 80016f8:	789b      	ldrb	r3, [r3, #2]
 80016fa:	4413      	add	r3, r2
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b7e      	ldr	r3, [pc, #504]	; (80018fc <_Z15All_mode_UARTUIv+0x844>)
 8001704:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_AngPosi, 4 ,100);
 8001706:	2364      	movs	r3, #100	; 0x64
 8001708:	2204      	movs	r2, #4
 800170a:	497c      	ldr	r1, [pc, #496]	; (80018fc <_Z15All_mode_UARTUIv+0x844>)
 800170c:	487c      	ldr	r0, [pc, #496]	; (8001900 <_Z15All_mode_UARTUIv+0x848>)
 800170e:	f01a f9ba 	bl	801ba86 <HAL_UART_Transmit>
				}
				break;
 8001712:	e0cf      	b.n	80018b4 <_Z15All_mode_UARTUIv+0x7fc>
		////==============[Request MAX Angular velo]===========
			case 11: //10011011 01100100
				chksum = MainBuf[newPos_uart-1];
 8001714:	4b70      	ldr	r3, [pc, #448]	; (80018d8 <_Z15All_mode_UARTUIv+0x820>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	3b01      	subs	r3, #1
 800171a:	4a70      	ldr	r2, [pc, #448]	; (80018dc <_Z15All_mode_UARTUIv+0x824>)
 800171c:	5cd2      	ldrb	r2, [r2, r3]
 800171e:	4b70      	ldr	r3, [pc, #448]	; (80018e0 <_Z15All_mode_UARTUIv+0x828>)
 8001720:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001722:	4b70      	ldr	r3, [pc, #448]	; (80018e4 <_Z15All_mode_UARTUIv+0x82c>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	43db      	mvns	r3, r3
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b6f      	ldr	r3, [pc, #444]	; (80018e8 <_Z15All_mode_UARTUIv+0x830>)
 800172c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800172e:	4b6c      	ldr	r3, [pc, #432]	; (80018e0 <_Z15All_mode_UARTUIv+0x828>)
 8001730:	781a      	ldrb	r2, [r3, #0]
 8001732:	4b6d      	ldr	r3, [pc, #436]	; (80018e8 <_Z15All_mode_UARTUIv+0x830>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	f040 80be 	bne.w	80018b8 <_Z15All_mode_UARTUIv+0x800>
					M_state = 11;
 800173c:	4b6b      	ldr	r3, [pc, #428]	; (80018ec <_Z15All_mode_UARTUIv+0x834>)
 800173e:	220b      	movs	r2, #11
 8001740:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001742:	f000 f8f3 	bl	800192c <_Z7xu_Uartv>
					DataProtocol_Velo = (KalV/(2 * 3.14)) * 60;
 8001746:	4b6f      	ldr	r3, [pc, #444]	; (8001904 <_Z15All_mode_UARTUIv+0x84c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fefc 	bl	8000548 <__aeabi_f2d>
 8001750:	a35f      	add	r3, pc, #380	; (adr r3, 80018d0 <_Z15All_mode_UARTUIv+0x818>)
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	f7ff f879 	bl	800084c <__aeabi_ddiv>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	4b68      	ldr	r3, [pc, #416]	; (8001908 <_Z15All_mode_UARTUIv+0x850>)
 8001768:	f7fe ff46 	bl	80005f8 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff f9f0 	bl	8000b58 <__aeabi_d2f>
 8001778:	4603      	mov	r3, r0
 800177a:	4a64      	ldr	r2, [pc, #400]	; (800190c <_Z15All_mode_UARTUIv+0x854>)
 800177c:	6013      	str	r3, [r2, #0]
					Req_MaxVelo[1] = 0;
 800177e:	4b64      	ldr	r3, [pc, #400]	; (8001910 <_Z15All_mode_UARTUIv+0x858>)
 8001780:	2200      	movs	r2, #0
 8001782:	705a      	strb	r2, [r3, #1]
					Req_MaxVelo[2] = (DataProtocol_Velo * 255) / 10;
 8001784:	4b61      	ldr	r3, [pc, #388]	; (800190c <_Z15All_mode_UARTUIv+0x854>)
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001914 <_Z15All_mode_UARTUIv+0x85c>
 800178e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001792:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001796:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800179a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800179e:	edc7 7a01 	vstr	s15, [r7, #4]
 80017a2:	793b      	ldrb	r3, [r7, #4]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b5a      	ldr	r3, [pc, #360]	; (8001910 <_Z15All_mode_UARTUIv+0x858>)
 80017a8:	709a      	strb	r2, [r3, #2]
					Req_MaxVelo[3] = ~(Req_MaxVelo[0] + Req_MaxVelo[1] + Req_MaxVelo[2]);
 80017aa:	4b59      	ldr	r3, [pc, #356]	; (8001910 <_Z15All_mode_UARTUIv+0x858>)
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	4b58      	ldr	r3, [pc, #352]	; (8001910 <_Z15All_mode_UARTUIv+0x858>)
 80017b0:	785b      	ldrb	r3, [r3, #1]
 80017b2:	4413      	add	r3, r2
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4b56      	ldr	r3, [pc, #344]	; (8001910 <_Z15All_mode_UARTUIv+0x858>)
 80017b8:	789b      	ldrb	r3, [r3, #2]
 80017ba:	4413      	add	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b53      	ldr	r3, [pc, #332]	; (8001910 <_Z15All_mode_UARTUIv+0x858>)
 80017c4:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_MaxVelo, 4 ,1000);
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	2204      	movs	r2, #4
 80017cc:	4950      	ldr	r1, [pc, #320]	; (8001910 <_Z15All_mode_UARTUIv+0x858>)
 80017ce:	484c      	ldr	r0, [pc, #304]	; (8001900 <_Z15All_mode_UARTUIv+0x848>)
 80017d0:	f01a f959 	bl	801ba86 <HAL_UART_Transmit>
				}
				break;
 80017d4:	e070      	b.n	80018b8 <_Z15All_mode_UARTUIv+0x800>
		////==============[Enable end effector]================
			case 12: //// 12  10011100 01100011
				chksum = MainBuf[newPos_uart-1];
 80017d6:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <_Z15All_mode_UARTUIv+0x820>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	3b01      	subs	r3, #1
 80017dc:	4a3f      	ldr	r2, [pc, #252]	; (80018dc <_Z15All_mode_UARTUIv+0x824>)
 80017de:	5cd2      	ldrb	r2, [r2, r3]
 80017e0:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <_Z15All_mode_UARTUIv+0x828>)
 80017e2:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80017e4:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <_Z15All_mode_UARTUIv+0x82c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <_Z15All_mode_UARTUIv+0x830>)
 80017ee:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80017f0:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <_Z15All_mode_UARTUIv+0x828>)
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <_Z15All_mode_UARTUIv+0x830>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d15f      	bne.n	80018bc <_Z15All_mode_UARTUIv+0x804>
					M_state = 12;
 80017fc:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <_Z15All_mode_UARTUIv+0x834>)
 80017fe:	220c      	movs	r2, #12
 8001800:	701a      	strb	r2, [r3, #0]

					flag_efftDis = 0;
 8001802:	4b45      	ldr	r3, [pc, #276]	; (8001918 <_Z15All_mode_UARTUIv+0x860>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]

					//flag_efftActi = 1;

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001808:	f000 f890 	bl	800192c <_Z7xu_Uartv>
				}
				break;
 800180c:	e056      	b.n	80018bc <_Z15All_mode_UARTUIv+0x804>
		////==============[Disable end effector]================
			case 13: // 13 10011101 01100010
				chksum = MainBuf[newPos_uart-1];
 800180e:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <_Z15All_mode_UARTUIv+0x820>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	3b01      	subs	r3, #1
 8001814:	4a31      	ldr	r2, [pc, #196]	; (80018dc <_Z15All_mode_UARTUIv+0x824>)
 8001816:	5cd2      	ldrb	r2, [r2, r3]
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <_Z15All_mode_UARTUIv+0x828>)
 800181a:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800181c:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <_Z15All_mode_UARTUIv+0x82c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	43db      	mvns	r3, r3
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <_Z15All_mode_UARTUIv+0x830>)
 8001826:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001828:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <_Z15All_mode_UARTUIv+0x828>)
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <_Z15All_mode_UARTUIv+0x830>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d145      	bne.n	80018c0 <_Z15All_mode_UARTUIv+0x808>
					M_state = 13;
 8001834:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <_Z15All_mode_UARTUIv+0x834>)
 8001836:	220d      	movs	r2, #13
 8001838:	701a      	strb	r2, [r3, #0]
					//// End Effector Kill
					trig_efftRead = 0;
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <_Z15All_mode_UARTUIv+0x864>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
					flag_efftRead = 0;
 8001840:	4b37      	ldr	r3, [pc, #220]	; (8001920 <_Z15All_mode_UARTUIv+0x868>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 0;
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <_Z15All_mode_UARTUIv+0x86c>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
					flag_efftDis = 1;
 800184c:	4b32      	ldr	r3, [pc, #200]	; (8001918 <_Z15All_mode_UARTUIv+0x860>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 8001852:	f000 f86b 	bl	800192c <_Z7xu_Uartv>
				}
				break;
 8001856:	e033      	b.n	80018c0 <_Z15All_mode_UARTUIv+0x808>
		////==============[Set Home Zero]================
			case 14: //10011110 01100001
				chksum = MainBuf[newPos_uart-1];
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <_Z15All_mode_UARTUIv+0x820>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <_Z15All_mode_UARTUIv+0x824>)
 8001860:	5cd2      	ldrb	r2, [r2, r3]
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <_Z15All_mode_UARTUIv+0x828>)
 8001864:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <_Z15All_mode_UARTUIv+0x82c>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	43db      	mvns	r3, r3
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <_Z15All_mode_UARTUIv+0x830>)
 8001870:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001872:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <_Z15All_mode_UARTUIv+0x828>)
 8001874:	781a      	ldrb	r2, [r3, #0]
 8001876:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <_Z15All_mode_UARTUIv+0x830>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d122      	bne.n	80018c4 <_Z15All_mode_UARTUIv+0x80c>
					M_state = 14;
 800187e:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <_Z15All_mode_UARTUIv+0x834>)
 8001880:	220e      	movs	r2, #14
 8001882:	701a      	strb	r2, [r3, #0]
					//act as set zero interrupt
//					position_order = 0;
//					positionlog[position_order] = 0.0;
//					Velocity = 7.0;
					grandState = SetZeroBf;
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <_Z15All_mode_UARTUIv+0x870>)
 8001886:	2206      	movs	r2, #6
 8001888:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 800188a:	f000 f84f 	bl	800192c <_Z7xu_Uartv>
				}
				break;
 800188e:	e019      	b.n	80018c4 <_Z15All_mode_UARTUIv+0x80c>
				break;
 8001890:	bf00      	nop
 8001892:	e018      	b.n	80018c6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 8001894:	bf00      	nop
 8001896:	e016      	b.n	80018c6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 8001898:	bf00      	nop
 800189a:	e014      	b.n	80018c6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 800189c:	bf00      	nop
 800189e:	e012      	b.n	80018c6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018a0:	bf00      	nop
 80018a2:	e010      	b.n	80018c6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018a4:	bf00      	nop
 80018a6:	e00e      	b.n	80018c6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018a8:	bf00      	nop
 80018aa:	e00c      	b.n	80018c6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018ac:	bf00      	nop
 80018ae:	e00a      	b.n	80018c6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018b0:	bf00      	nop
 80018b2:	e008      	b.n	80018c6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018b4:	bf00      	nop
 80018b6:	e006      	b.n	80018c6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018b8:	bf00      	nop
 80018ba:	e004      	b.n	80018c6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018bc:	bf00      	nop
 80018be:	e002      	b.n	80018c6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018c0:	bf00      	nop
 80018c2:	e000      	b.n	80018c6 <_Z15All_mode_UARTUIv+0x80e>
				break;
 80018c4:	bf00      	nop
			}
}
 80018c6:	bf00      	nop
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	51eb851f 	.word	0x51eb851f
 80018d4:	40191eb8 	.word	0x40191eb8
 80018d8:	200007a2 	.word	0x200007a2
 80018dc:	20000780 	.word	0x20000780
 80018e0:	200007e5 	.word	0x200007e5
 80018e4:	200007e4 	.word	0x200007e4
 80018e8:	200007e6 	.word	0x200007e6
 80018ec:	200007eb 	.word	0x200007eb
 80018f0:	200006f8 	.word	0x200006f8
 80018f4:	461c4000 	.word	0x461c4000
 80018f8:	200007a4 	.word	0x200007a4
 80018fc:	200001c0 	.word	0x200001c0
 8001900:	200003fc 	.word	0x200003fc
 8001904:	200006dc 	.word	0x200006dc
 8001908:	404e0000 	.word	0x404e0000
 800190c:	200007a8 	.word	0x200007a8
 8001910:	200001c4 	.word	0x200001c4
 8001914:	437f0000 	.word	0x437f0000
 8001918:	200001b0 	.word	0x200001b0
 800191c:	20000749 	.word	0x20000749
 8001920:	20000748 	.word	0x20000748
 8001924:	20000747 	.word	0x20000747
 8001928:	20000502 	.word	0x20000502

0800192c <_Z7xu_Uartv>:

void xu_Uart(){
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 , 200); //Xu
 8001930:	23c8      	movs	r3, #200	; 0xc8
 8001932:	2202      	movs	r2, #2
 8001934:	4902      	ldr	r1, [pc, #8]	; (8001940 <_Z7xu_Uartv+0x14>)
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <_Z7xu_Uartv+0x18>)
 8001938:	f01a f8a5 	bl	801ba86 <HAL_UART_Transmit>
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200001b4 	.word	0x200001b4
 8001944:	200003fc 	.word	0x200003fc

08001948 <_Z7fn_Uartv>:

void fn_Uart(){
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
 800194c:	2364      	movs	r3, #100	; 0x64
 800194e:	2202      	movs	r2, #2
 8001950:	4902      	ldr	r1, [pc, #8]	; (800195c <_Z7fn_Uartv+0x14>)
 8001952:	4803      	ldr	r0, [pc, #12]	; (8001960 <_Z7fn_Uartv+0x18>)
 8001954:	f01a f897 	bl	801ba86 <HAL_UART_Transmit>
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200001b8 	.word	0x200001b8
 8001960:	200003fc 	.word	0x200003fc

08001964 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001964:	b5b0      	push	{r4, r5, r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7fe fdd8 	bl	8000524 <__aeabi_i2d>
 8001974:	4604      	mov	r4, r0
 8001976:	460d      	mov	r5, r1
 8001978:	6838      	ldr	r0, [r7, #0]
 800197a:	f7fe fdd3 	bl	8000524 <__aeabi_i2d>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	ec43 2b11 	vmov	d1, r2, r3
 8001986:	ec45 4b10 	vmov	d0, r4, r5
 800198a:	f01b fa63 	bl	801ce54 <pow>
 800198e:	eeb0 7a40 	vmov.f32	s14, s0
 8001992:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001996:	eeb0 0a47 	vmov.f32	s0, s14
 800199a:	eef0 0a67 	vmov.f32	s1, s15
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bdb0      	pop	{r4, r5, r7, pc}

080019a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a8:	b0f2      	sub	sp, #456	; 0x1c8
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/////assign  Matrix  element value  //////////
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 80019ac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019b0:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80019b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019be:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 80019c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019c6:	461a      	mov	r2, r3
 80019c8:	49ed      	ldr	r1, [pc, #948]	; (8001d80 <main+0x3dc>)
 80019ca:	f002 fbb8 	bl	800413e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 80019ce:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019d2:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 80019d6:	4beb      	ldr	r3, [pc, #940]	; (8001d84 <main+0x3e0>)
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80019de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 fbc5 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80019ea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80019ee:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 80019f2:	4be5      	ldr	r3, [pc, #916]	; (8001d88 <main+0x3e4>)
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019fa:	4619      	mov	r1, r3
 80019fc:	f002 fbba 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 ,    1    ,      Dt    ,
 8001a00:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a04:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a12:	4619      	mov	r1, r3
 8001a14:	f002 fbae 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a1c:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8001a20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f002 fba2 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a30:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a34:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8001a38:	4bd2      	ldr	r3, [pc, #840]	; (8001d84 <main+0x3e0>)
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a40:	4619      	mov	r1, r3
 8001a42:	f002 fb97 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 ,    0    ,      1     ;
 8001a46:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a4a:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f002 fb8b 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a5e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a62:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a70:	4619      	mov	r1, r3
 8001a72:	f002 fb7f 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a76:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a7a:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8001a7e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f002 fb73 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001a8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 fb62 	bl	800415c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		X << 0 ,    0    ,      0     ;
 8001a98:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a9c:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001aaa:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8001aae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	49b5      	ldr	r1, [pc, #724]	; (8001d8c <main+0x3e8>)
 8001ab6:	f002 fbcd 	bl	8004254 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001aba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001abe:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001acc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f002 fbda 	bl	800428c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001ad8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001adc:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001aea:	4619      	mov	r1, r3
 8001aec:	f002 fbce 	bl	800428c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001af0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001af4:	4618      	mov	r0, r3
 8001af6:	f002 fbbc 	bl	8004272 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		X1 << 0 ,    0    ,      0     ;
 8001afa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001afe:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b0c:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8001b10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b14:	461a      	mov	r2, r3
 8001b16:	499e      	ldr	r1, [pc, #632]	; (8001d90 <main+0x3ec>)
 8001b18:	f002 fb9c 	bl	8004254 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001b1c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b20:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001b2e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 fba9 	bl	800428c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b3a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b3e:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f002 fb9d 	bl	800428c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b52:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b56:	4618      	mov	r0, r3
 8001b58:	f002 fb8b 	bl	8004272 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>


		P << 0.000001 , 			0 	 , 			0     ,
 8001b5c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b60:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001b64:	4b8b      	ldr	r3, [pc, #556]	; (8001d94 <main+0x3f0>)
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b6c:	f5a3 7094 	sub.w	r0, r3, #296	; 0x128
 8001b70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001b74:	461a      	mov	r2, r3
 8001b76:	4988      	ldr	r1, [pc, #544]	; (8001d98 <main+0x3f4>)
 8001b78:	f002 fae1 	bl	800413e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001b7c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b80:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001b8e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 faed 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b9a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b9e:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bac:	4619      	mov	r1, r3
 8001bae:	f002 fae1 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 		 ,    0.000001    ,  		0     ,
 8001bb2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bb6:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f002 fad5 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bca:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bce:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001bd2:	4b70      	ldr	r3, [pc, #448]	; (8001d94 <main+0x3f0>)
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f002 faca 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001be0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001be4:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f002 fabe 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 		 ,    		0    ,      0.000001     ;
 8001bf8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bfc:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f002 fab2 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c1a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4610      	mov	r0, r2
 8001c22:	f002 faa7 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b5a      	ldr	r3, [pc, #360]	; (8001d94 <main+0x3f0>)
 8001c2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c2e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c32:	4619      	mov	r1, r3
 8001c34:	4610      	mov	r0, r2
 8001c36:	f002 fa9d 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		P << 0.000001 , 			0 	 , 			0     ,
 8001c3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f002 fa8c 	bl	800415c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		O << 0 , 	0 	 , 		0     ,
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c4c:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8001c50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c54:	461a      	mov	r2, r3
 8001c56:	4951      	ldr	r1, [pc, #324]	; (8001d9c <main+0x3f8>)
 8001c58:	f002 fa71 	bl	800413e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c64:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001c68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 fa80 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001c7e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c82:	4619      	mov	r1, r3
 8001c84:	4610      	mov	r0, r2
 8001c86:	f002 fa75 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001c8a:	4602      	mov	r2, r0
		     0 ,    0    ,  	0     ,
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001c94:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f002 fa6a 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001caa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	f002 fa5f 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001cc0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f002 fa54 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ccc:	4602      	mov	r2, r0
			 0 ,    0    ,      0     ;
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001cd6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f002 fa49 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001cec:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	f002 fa3e 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d02:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001d06:	4619      	mov	r1, r3
 8001d08:	4610      	mov	r0, r2
 8001d0a:	f002 fa33 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		O << 0 , 	0 	 , 		0     ,
 8001d0e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d12:	4618      	mov	r0, r3
 8001d14:	f002 fa22 	bl	800415c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		I << 1 , 0 , 0 ,
 8001d18:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d1c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001d20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001d24:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d28:	461a      	mov	r2, r3
 8001d2a:	491d      	ldr	r1, [pc, #116]	; (8001da0 <main+0x3fc>)
 8001d2c:	f002 fa07 	bl	800413e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d38:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f002 fa16 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d56:	4619      	mov	r1, r3
 8001d58:	4610      	mov	r0, r2
 8001d5a:	f002 fa0b 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d5e:	4602      	mov	r2, r0
			 0 , 1 , 0 ,
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d68:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f002 fa00 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d7e:	e011      	b.n	8001da4 <main+0x400>
 8001d80:	200005cc 	.word	0x200005cc
 8001d84:	3c23d70a 	.word	0x3c23d70a
 8001d88:	3851b717 	.word	0x3851b717
 8001d8c:	200006b4 	.word	0x200006b4
 8001d90:	200006c0 	.word	0x200006c0
 8001d94:	358637bd 	.word	0x358637bd
 8001d98:	200005f0 	.word	0x200005f0
 8001d9c:	20000614 	.word	0x20000614
 8001da0:	20000638 	.word	0x20000638
 8001da4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001da8:	4619      	mov	r1, r3
 8001daa:	4610      	mov	r0, r2
 8001dac:	f002 f9e2 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001dba:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	f002 f9d7 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dc6:	4602      	mov	r2, r0
			 0 , 0 , 1 ;
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f002 f9cc 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001de6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001dea:	4619      	mov	r1, r3
 8001dec:	4610      	mov	r0, r2
 8001dee:	f002 f9c1 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001df2:	4602      	mov	r2, r0
 8001df4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001df8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001dfc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001e00:	4619      	mov	r1, r3
 8001e02:	4610      	mov	r0, r2
 8001e04:	f002 f9b6 	bl	8004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		I << 1 , 0 , 0 ,
 8001e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f002 f9a5 	bl	800415c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		R << pow(10, 0);
 8001e12:	2100      	movs	r1, #0
 8001e14:	200a      	movs	r0, #10
 8001e16:	f7ff fda5 	bl	8001964 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001e1a:	ec53 2b10 	vmov	r2, r3, d0
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	f7fe fe99 	bl	8000b58 <__aeabi_d2f>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e2c:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8001e30:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001e34:	461a      	mov	r2, r3
 8001e36:	499c      	ldr	r1, [pc, #624]	; (80020a8 <main+0x704>)
 8001e38:	f002 fa98 	bl	800436c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001e3c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001e40:	4618      	mov	r0, r3
 8001e42:	f002 faa2 	bl	800438a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		D << 0 ;
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001e4e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001e52:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e56:	461a      	mov	r2, r3
 8001e58:	4994      	ldr	r1, [pc, #592]	; (80020ac <main+0x708>)
 8001e5a:	f002 fa87 	bl	800436c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001e5e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e62:	4618      	mov	r0, r3
 8001e64:	f002 fa91 	bl	800438a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		B << 0 , 0 , 0 ;
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001e70:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8001e74:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001e78:	461a      	mov	r2, r3
 8001e7a:	498d      	ldr	r1, [pc, #564]	; (80020b0 <main+0x70c>)
 8001e7c:	f002 f9ea 	bl	8004254 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001e88:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8001e8c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 f9fa 	bl	800428c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001ea2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f002 f9ef 	bl	800428c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001eae:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 f9dd 	bl	8004272 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		C << 1 , 0 , 0 ;
 8001eb8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ebc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001ec0:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8001ec4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ec8:	461a      	mov	r2, r3
 8001eca:	497a      	ldr	r1, [pc, #488]	; (80020b4 <main+0x710>)
 8001ecc:	f002 fa69 	bl	80043a2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001ed8:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8001edc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 fa78 	bl	80043d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001ef2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f002 fa6d 	bl	80043d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001efe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 fa5c 	bl	80043c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>

		G << (Dt*Dt)/2 , Dt , 1 ;
 8001f08:	4b6b      	ldr	r3, [pc, #428]	; (80020b8 <main+0x714>)
 8001f0a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8001f0e:	f507 70ce 	add.w	r0, r7, #412	; 0x19c
 8001f12:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001f16:	461a      	mov	r2, r3
 8001f18:	4968      	ldr	r1, [pc, #416]	; (80020bc <main+0x718>)
 8001f1a:	f002 f99b 	bl	8004254 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001f1e:	4b68      	ldr	r3, [pc, #416]	; (80020c0 <main+0x71c>)
 8001f20:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001f24:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8001f28:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f002 f9ac 	bl	800428c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f3a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001f3e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8001f42:	4619      	mov	r1, r3
 8001f44:	4610      	mov	r0, r2
 8001f46:	f002 f9a1 	bl	800428c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001f4a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 f98f 	bl	8004272 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f54:	f014 fab0 	bl	80164b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f58:	f000 f9a4 	bl	80022a4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f5c:	f000 fbb4 	bl	80026c8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001f60:	f000 fb8a 	bl	8002678 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001f64:	f000 fa10 	bl	8002388 <_ZL12MX_I2C1_Initv>
  MX_TIM11_Init();
 8001f68:	f000 fb2e 	bl	80025c8 <_ZL13MX_TIM11_Initv>
  MX_TIM4_Init();
 8001f6c:	f000 fa74 	bl	8002458 <_ZL12MX_TIM4_Initv>
  MX_I2C3_Init();
 8001f70:	f000 fa3e 	bl	80023f0 <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 8001f74:	f000 fb50 	bl	8002618 <_ZL19MX_USART2_UART_Initv>
  MX_TIM10_Init();
 8001f78:	f000 fafe 	bl	8002578 <_ZL13MX_TIM10_Initv>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim10); // milli timer
 8001f7c:	4851      	ldr	r0, [pc, #324]	; (80020c4 <main+0x720>)
 8001f7e:	f018 fdc1 	bl	801ab04 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8001f82:	4851      	ldr	r0, [pc, #324]	; (80020c8 <main+0x724>)
 8001f84:	f018 fdbe 	bl	801ab04 <HAL_TIM_Base_Start_IT>

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8001f88:	4850      	ldr	r0, [pc, #320]	; (80020cc <main+0x728>)
 8001f8a:	f018 fd61 	bl	801aa50 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	484e      	ldr	r0, [pc, #312]	; (80020cc <main+0x728>)
 8001f92:	f018 fe73 	bl	801ac7c <HAL_TIM_PWM_Start>

    //UART UI
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001f96:	2220      	movs	r2, #32
 8001f98:	494d      	ldr	r1, [pc, #308]	; (80020d0 <main+0x72c>)
 8001f9a:	484e      	ldr	r0, [pc, #312]	; (80020d4 <main+0x730>)
 8001f9c:	f019 fe05 	bl	801bbaa <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001fa0:	4b4d      	ldr	r3, [pc, #308]	; (80020d8 <main+0x734>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6819      	ldr	r1, [r3, #0]
 8001fa6:	4b4c      	ldr	r3, [pc, #304]	; (80020d8 <main+0x734>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	f021 0308 	bic.w	r3, r1, #8
 8001fae:	6013      	str	r3, [r2, #0]

    ////// ===== Select DataPosition Dataset =================
    switch(NumPosDataSetx){
 8001fb0:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <main+0x738>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	f200 809d 	bhi.w	80020f6 <main+0x752>
 8001fbc:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <main+0x620>)
 8001fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc2:	bf00      	nop
 8001fc4:	08001fd5 	.word	0x08001fd5
 8001fc8:	08002007 	.word	0x08002007
 8001fcc:	08002039 	.word	0x08002039
 8001fd0:	0800206b 	.word	0x0800206b

    case 1:
    	for(int t = 0;t <= PosBufSize ;t++){
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fda:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001fde:	2b14      	cmp	r3, #20
 8001fe0:	dc5c      	bgt.n	800209c <main+0x6f8>
		PosDataSet[t] = rawPossw_1[t];
 8001fe2:	4a3f      	ldr	r2, [pc, #252]	; (80020e0 <main+0x73c>)
 8001fe4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	6819      	ldr	r1, [r3, #0]
 8001fee:	4a3d      	ldr	r2, [pc, #244]	; (80020e4 <main+0x740>)
 8001ff0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 8001ffa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001ffe:	3301      	adds	r3, #1
 8002000:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002004:	e7e9      	b.n	8001fda <main+0x636>
		} break;

    case 2:
    	for(int t = 0;t <= PosBufSize ;t++){
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800200c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002010:	2b14      	cmp	r3, #20
 8002012:	dc45      	bgt.n	80020a0 <main+0x6fc>
		PosDataSet[t] = rawPossw_2[t];
 8002014:	4a34      	ldr	r2, [pc, #208]	; (80020e8 <main+0x744>)
 8002016:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	6819      	ldr	r1, [r3, #0]
 8002020:	4a30      	ldr	r2, [pc, #192]	; (80020e4 <main+0x740>)
 8002022:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 800202c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002030:	3301      	adds	r3, #1
 8002032:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002036:	e7e9      	b.n	800200c <main+0x668>
		} break;

    case 3:
    	for(int t = 0;t <= PosBufSize ;t++){
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800203e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002042:	2b14      	cmp	r3, #20
 8002044:	dc2e      	bgt.n	80020a4 <main+0x700>
    	PosDataSet[t] = rawPossw_3[t];
 8002046:	4a29      	ldr	r2, [pc, #164]	; (80020ec <main+0x748>)
 8002048:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	6819      	ldr	r1, [r3, #0]
 8002052:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <main+0x740>)
 8002054:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 800205e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002062:	3301      	adds	r3, #1
 8002064:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002068:	e7e9      	b.n	800203e <main+0x69a>
    	} break;

    case 4:
		for(int t = 0;t <= PosBufSize ;t++){
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8002070:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002074:	2b14      	cmp	r3, #20
 8002076:	dc3d      	bgt.n	80020f4 <main+0x750>
		PosDataSet[t] = rawPossw_4[t];
 8002078:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <main+0x74c>)
 800207a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	6819      	ldr	r1, [r3, #0]
 8002084:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <main+0x740>)
 8002086:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	6019      	str	r1, [r3, #0]
		for(int t = 0;t <= PosBufSize ;t++){
 8002090:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002094:	3301      	adds	r3, #1
 8002096:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800209a:	e7e9      	b.n	8002070 <main+0x6cc>
		} break;
 800209c:	bf00      	nop
 800209e:	e02a      	b.n	80020f6 <main+0x752>
		} break;
 80020a0:	bf00      	nop
 80020a2:	e028      	b.n	80020f6 <main+0x752>
    	} break;
 80020a4:	bf00      	nop
 80020a6:	e026      	b.n	80020f6 <main+0x752>
 80020a8:	20000660 	.word	0x20000660
 80020ac:	20000664 	.word	0x20000664
 80020b0:	200006cc 	.word	0x200006cc
 80020b4:	20000678 	.word	0x20000678
 80020b8:	3851b717 	.word	0x3851b717
 80020bc:	20000684 	.word	0x20000684
 80020c0:	3c23d70a 	.word	0x3c23d70a
 80020c4:	2000036c 	.word	0x2000036c
 80020c8:	200003b4 	.word	0x200003b4
 80020cc:	20000324 	.word	0x20000324
 80020d0:	20000760 	.word	0x20000760
 80020d4:	200003fc 	.word	0x200003fc
 80020d8:	20000440 	.word	0x20000440
 80020dc:	20000000 	.word	0x20000000
 80020e0:	20000004 	.word	0x20000004
 80020e4:	20000520 	.word	0x20000520
 80020e8:	20000054 	.word	0x20000054
 80020ec:	200000a4 	.word	0x200000a4
 80020f0:	200000f4 	.word	0x200000f4
		} break;
 80020f4:	bf00      	nop
    }

    PosoffsetMon = 0 + POSOFFSET; // for send to cubeMon
 80020f6:	4a5d      	ldr	r2, [pc, #372]	; (800226c <main+0x8c8>)
 80020f8:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80020fc:	8013      	strh	r3, [r2, #0]
    ////============position buffer Set Default===================
    //for(int f = 0; f <= PosBufSize; f++){
    //		positionlog[f] = -1.0;
    //	}
    //MCP23017 setting init
    HAL_Delay(50);
 80020fe:	2032      	movs	r0, #50	; 0x32
 8002100:	f014 fa4c 	bl	801659c <HAL_Delay>
    IOExpenderInit();
 8002104:	f001 fdd4 	bl	8003cb0 <_Z14IOExpenderInitv>
	      ///// IT test
	 //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  	  ///// GrandState ///////////////////

	  	  if(micros() - TimeStampGrand >= 1000){
 8002108:	f001 ff42 	bl	8003f90 <_Z6microsv>
 800210c:	4b58      	ldr	r3, [pc, #352]	; (8002270 <main+0x8cc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2200      	movs	r2, #0
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
 8002114:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002118:	ebb0 0803 	subs.w	r8, r0, r3
 800211c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211e:	eb61 0903 	sbc.w	r9, r1, r3
 8002122:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 8002126:	f179 0300 	sbcs.w	r3, r9, #0
 800212a:	bf2c      	ite	cs
 800212c:	2301      	movcs	r3, #1
 800212e:	2300      	movcc	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <main+0x7a2>
	  		TimeStampGrand = micros();
 8002136:	f001 ff2b 	bl	8003f90 <_Z6microsv>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4b4c      	ldr	r3, [pc, #304]	; (8002270 <main+0x8cc>)
 8002140:	601a      	str	r2, [r3, #0]
	  		GrandStatumix();
 8002142:	f000 fbad 	bl	80028a0 <_Z13GrandStatumixv>
	  		//CurrentEn = BinPosXI * 0.006136;
	  	  }

	  	  // Encoder I2CRead

	  	  if (micros()-timeStampSR >= 10000)      // don't use 1
 8002146:	f001 ff23 	bl	8003f90 <_Z6microsv>
 800214a:	4b4a      	ldr	r3, [pc, #296]	; (8002274 <main+0x8d0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2200      	movs	r2, #0
 8002150:	623b      	str	r3, [r7, #32]
 8002152:	627a      	str	r2, [r7, #36]	; 0x24
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	1ac3      	subs	r3, r0, r3
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	eb61 0303 	sbc.w	r3, r1, r3
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	f242 7310 	movw	r3, #10000	; 0x2710
 8002166:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800216a:	4602      	mov	r2, r0
 800216c:	429a      	cmp	r2, r3
 800216e:	460b      	mov	r3, r1
 8002170:	f173 0300 	sbcs.w	r3, r3, #0
 8002174:	bf2c      	ite	cs
 8002176:	2301      	movcs	r3, #1
 8002178:	2300      	movcc	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <main+0x7ee>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 8002180:	f001 ff06 	bl	8003f90 <_Z6microsv>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <main+0x8d0>)
 800218a:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 800218c:	4a3a      	ldr	r2, [pc, #232]	; (8002278 <main+0x8d4>)
 800218e:	2301      	movs	r3, #1
 8002190:	7013      	strb	r3, [r2, #0]
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 8002192:	483a      	ldr	r0, [pc, #232]	; (800227c <main+0x8d8>)
 8002194:	f001 fda2 	bl	8003cdc <_Z14AbsEncI2CReadxPh>
	  	  //Unwrapping();
	  	  //Kalmanfilter();

	  	  ///////////////////// 2KHz change PWM PB6////////////////////

	  	  if(micros() - timestampPWM >= 500){
 8002198:	f001 fefa 	bl	8003f90 <_Z6microsv>
 800219c:	4b38      	ldr	r3, [pc, #224]	; (8002280 <main+0x8dc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2200      	movs	r2, #0
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	61fa      	str	r2, [r7, #28]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	ebb0 0a03 	subs.w	sl, r0, r3
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	eb61 0b03 	sbc.w	fp, r1, r3
 80021b2:	f5ba 7ffa 	cmp.w	sl, #500	; 0x1f4
 80021b6:	f17b 0300 	sbcs.w	r3, fp, #0
 80021ba:	bf2c      	ite	cs
 80021bc:	2301      	movcs	r3, #1
 80021be:	2300      	movcc	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01a      	beq.n	80021fc <main+0x858>
	  		  	  timestampPWM = micros(); // stamp
 80021c6:	f001 fee3 	bl	8003f90 <_Z6microsv>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <main+0x8dc>)
 80021d0:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut); // dutycycle
 80021d2:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <main+0x8e0>)
 80021d4:	8819      	ldrh	r1, [r3, #0]
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <main+0x8e4>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	460b      	mov	r3, r1
 80021dc:	6353      	str	r3, [r2, #52]	; 0x34
	  	  		  //__HAL_TIM_SET_PRESCALER(&htim4, pscalr); // Set freq of pwm
	  	  		  //ADC_Target = ADCFeedx[1].datt;

	  	  		///// Mot Driver ///// 0 => CCW /// 1 => CW
	  	  		if (mot_dirctn == 0){
 80021de:	4b2b      	ldr	r3, [pc, #172]	; (800228c <main+0x8e8>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <main+0x84e>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 80021e6:	2201      	movs	r2, #1
 80021e8:	2104      	movs	r1, #4
 80021ea:	4829      	ldr	r0, [pc, #164]	; (8002290 <main+0x8ec>)
 80021ec:	f015 f8b8 	bl	8017360 <HAL_GPIO_WritePin>
 80021f0:	e004      	b.n	80021fc <main+0x858>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2104      	movs	r1, #4
 80021f6:	4826      	ldr	r0, [pc, #152]	; (8002290 <main+0x8ec>)
 80021f8:	f015 f8b2 	bl	8017360 <HAL_GPIO_WritePin>
				controlloop();
			 }
	  	    */

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 80021fc:	f001 fdc4 	bl	8003d88 <_Z13Efft_activatev>
	  	 Efft_read(&efft_status);
 8002200:	4824      	ldr	r0, [pc, #144]	; (8002294 <main+0x8f0>)
 8002202:	f001 fe19 	bl	8003e38 <_Z9Efft_readPh>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state

	  	 if(trig_efftRead != 0 && millis() - timestamp_efft >= 500){
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <main+0x8f4>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d014      	beq.n	8002238 <main+0x894>
 800220e:	f001 fed9 	bl	8003fc4 <_Z6millisv>
 8002212:	4603      	mov	r3, r0
 8002214:	2200      	movs	r2, #0
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	617a      	str	r2, [r7, #20]
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <main+0x8f8>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	6939      	ldr	r1, [r7, #16]
 8002222:	1a8c      	subs	r4, r1, r2
 8002224:	6979      	ldr	r1, [r7, #20]
 8002226:	eb61 0503 	sbc.w	r5, r1, r3
 800222a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 800222e:	f175 0300 	sbcs.w	r3, r5, #0
 8002232:	d301      	bcc.n	8002238 <main+0x894>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <main+0x896>
 8002238:	2300      	movs	r3, #0
 800223a:	2b00      	cmp	r3, #0
 800223c:	f43f af64 	beq.w	8002108 <main+0x764>
	  		 timestamp_efft = millis();
 8002240:	f001 fec0 	bl	8003fc4 <_Z6millisv>
 8002244:	4603      	mov	r3, r0
 8002246:	2200      	movs	r2, #0
 8002248:	603b      	str	r3, [r7, #0]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <main+0x8f8>)
 800224e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002252:	e9c3 1200 	strd	r1, r2, [r3]
	  		 flag_efftRead = 1;
 8002256:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <main+0x8fc>)
 8002258:	2301      	movs	r3, #1
 800225a:	7013      	strb	r3, [r2, #0]
	  		 trig_efftRead++;
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <main+0x8f4>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	3301      	adds	r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <main+0x8f4>)
 8002266:	7013      	strb	r3, [r2, #0]
	  	  if(micros() - TimeStampGrand >= 1000){
 8002268:	e74e      	b.n	8002108 <main+0x764>
 800226a:	bf00      	nop
 800226c:	20000500 	.word	0x20000500
 8002270:	20000508 	.word	0x20000508
 8002274:	20000570 	.word	0x20000570
 8002278:	2000057a 	.word	0x2000057a
 800227c:	20000574 	.word	0x20000574
 8002280:	20000580 	.word	0x20000580
 8002284:	2000057c 	.word	0x2000057c
 8002288:	20000324 	.word	0x20000324
 800228c:	20000584 	.word	0x20000584
 8002290:	40020400 	.word	0x40020400
 8002294:	20000746 	.word	0x20000746
 8002298:	20000749 	.word	0x20000749
 800229c:	20000750 	.word	0x20000750
 80022a0:	20000748 	.word	0x20000748

080022a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b094      	sub	sp, #80	; 0x50
 80022a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022aa:	f107 0320 	add.w	r3, r7, #32
 80022ae:	2230      	movs	r2, #48	; 0x30
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f01b fd52 	bl	801dd5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <_Z18SystemClock_Configv+0xdc>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	4a2b      	ldr	r2, [pc, #172]	; (8002380 <_Z18SystemClock_Configv+0xdc>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d6:	6413      	str	r3, [r2, #64]	; 0x40
 80022d8:	4b29      	ldr	r3, [pc, #164]	; (8002380 <_Z18SystemClock_Configv+0xdc>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e4:	2300      	movs	r3, #0
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	4b26      	ldr	r3, [pc, #152]	; (8002384 <_Z18SystemClock_Configv+0xe0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a25      	ldr	r2, [pc, #148]	; (8002384 <_Z18SystemClock_Configv+0xe0>)
 80022ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b23      	ldr	r3, [pc, #140]	; (8002384 <_Z18SystemClock_Configv+0xe0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002300:	2302      	movs	r3, #2
 8002302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002304:	2301      	movs	r3, #1
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002308:	2310      	movs	r3, #16
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800230c:	2302      	movs	r3, #2
 800230e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002310:	2300      	movs	r3, #0
 8002312:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002314:	2308      	movs	r3, #8
 8002316:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002318:	2364      	movs	r3, #100	; 0x64
 800231a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800231c:	2302      	movs	r3, #2
 800231e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002320:	2304      	movs	r3, #4
 8002322:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002324:	f107 0320 	add.w	r3, r7, #32
 8002328:	4618      	mov	r0, r3
 800232a:	f017 fea9 	bl	801a080 <HAL_RCC_OscConfig>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800233e:	f001 fe77 	bl	8004030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002342:	230f      	movs	r3, #15
 8002344:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002346:	2302      	movs	r3, #2
 8002348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800234e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002352:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	2103      	movs	r1, #3
 800235e:	4618      	mov	r0, r3
 8002360:	f018 f906 	bl	801a570 <HAL_RCC_ClockConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	bf14      	ite	ne
 800236a:	2301      	movne	r3, #1
 800236c:	2300      	moveq	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002374:	f001 fe5c 	bl	8004030 <Error_Handler>
  }
}
 8002378:	bf00      	nop
 800237a:	3750      	adds	r7, #80	; 0x50
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000

08002388 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <_ZL12MX_I2C1_Initv+0x5c>)
 800238e:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <_ZL12MX_I2C1_Initv+0x60>)
 8002390:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002394:	4a15      	ldr	r2, [pc, #84]	; (80023ec <_ZL12MX_I2C1_Initv+0x64>)
 8002396:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <_ZL12MX_I2C1_Initv+0x5c>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023c4:	4807      	ldr	r0, [pc, #28]	; (80023e4 <_ZL12MX_I2C1_Initv+0x5c>)
 80023c6:	f014 fffd 	bl	80173c4 <HAL_I2C_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf14      	ite	ne
 80023d0:	2301      	movne	r3, #1
 80023d2:	2300      	moveq	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80023da:	f001 fe29 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	2000027c 	.word	0x2000027c
 80023e8:	40005400 	.word	0x40005400
 80023ec:	00061a80 	.word	0x00061a80

080023f0 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <_ZL12MX_I2C3_Initv+0x5c>)
 80023f6:	4a16      	ldr	r2, [pc, #88]	; (8002450 <_ZL12MX_I2C3_Initv+0x60>)
 80023f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <_ZL12MX_I2C3_Initv+0x5c>)
 80023fc:	4a15      	ldr	r2, [pc, #84]	; (8002454 <_ZL12MX_I2C3_Initv+0x64>)
 80023fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <_ZL12MX_I2C3_Initv+0x5c>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <_ZL12MX_I2C3_Initv+0x5c>)
 8002408:	2200      	movs	r2, #0
 800240a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <_ZL12MX_I2C3_Initv+0x5c>)
 800240e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002412:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <_ZL12MX_I2C3_Initv+0x5c>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <_ZL12MX_I2C3_Initv+0x5c>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <_ZL12MX_I2C3_Initv+0x5c>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <_ZL12MX_I2C3_Initv+0x5c>)
 8002428:	2200      	movs	r2, #0
 800242a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800242c:	4807      	ldr	r0, [pc, #28]	; (800244c <_ZL12MX_I2C3_Initv+0x5c>)
 800242e:	f014 ffc9 	bl	80173c4 <HAL_I2C_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf14      	ite	ne
 8002438:	2301      	movne	r3, #1
 800243a:	2300      	moveq	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 8002442:	f001 fdf5 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200002d0 	.word	0x200002d0
 8002450:	40005c00 	.word	0x40005c00
 8002454:	00061a80 	.word	0x00061a80

08002458 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08e      	sub	sp, #56	; 0x38
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246c:	f107 0320 	add.w	r3, r7, #32
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
 8002484:	615a      	str	r2, [r3, #20]
 8002486:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002488:	4b39      	ldr	r3, [pc, #228]	; (8002570 <_ZL12MX_TIM4_Initv+0x118>)
 800248a:	4a3a      	ldr	r2, [pc, #232]	; (8002574 <_ZL12MX_TIM4_Initv+0x11c>)
 800248c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800248e:	4b38      	ldr	r3, [pc, #224]	; (8002570 <_ZL12MX_TIM4_Initv+0x118>)
 8002490:	2200      	movs	r2, #0
 8002492:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002494:	4b36      	ldr	r3, [pc, #216]	; (8002570 <_ZL12MX_TIM4_Initv+0x118>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800249a:	4b35      	ldr	r3, [pc, #212]	; (8002570 <_ZL12MX_TIM4_Initv+0x118>)
 800249c:	f242 720f 	movw	r2, #9999	; 0x270f
 80024a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a2:	4b33      	ldr	r3, [pc, #204]	; (8002570 <_ZL12MX_TIM4_Initv+0x118>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a8:	4b31      	ldr	r3, [pc, #196]	; (8002570 <_ZL12MX_TIM4_Initv+0x118>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024ae:	4830      	ldr	r0, [pc, #192]	; (8002570 <_ZL12MX_TIM4_Initv+0x118>)
 80024b0:	f018 fa7e 	bl	801a9b0 <HAL_TIM_Base_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	bf14      	ite	ne
 80024ba:	2301      	movne	r3, #1
 80024bc:	2300      	moveq	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 80024c4:	f001 fdb4 	bl	8004030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024d2:	4619      	mov	r1, r3
 80024d4:	4826      	ldr	r0, [pc, #152]	; (8002570 <_ZL12MX_TIM4_Initv+0x118>)
 80024d6:	f018 fe4b 	bl	801b170 <HAL_TIM_ConfigClockSource>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 80024ea:	f001 fda1 	bl	8004030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024ee:	4820      	ldr	r0, [pc, #128]	; (8002570 <_ZL12MX_TIM4_Initv+0x118>)
 80024f0:	f018 fb6a 	bl	801abc8 <HAL_TIM_PWM_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf14      	ite	ne
 80024fa:	2301      	movne	r3, #1
 80024fc:	2300      	moveq	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 8002504:	f001 fd94 	bl	8004030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002510:	f107 0320 	add.w	r3, r7, #32
 8002514:	4619      	mov	r1, r3
 8002516:	4816      	ldr	r0, [pc, #88]	; (8002570 <_ZL12MX_TIM4_Initv+0x118>)
 8002518:	f019 f9e6 	bl	801b8e8 <HAL_TIMEx_MasterConfigSynchronization>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	bf14      	ite	ne
 8002522:	2301      	movne	r3, #1
 8002524:	2300      	moveq	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 800252c:	f001 fd80 	bl	8004030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002530:	2360      	movs	r3, #96	; 0x60
 8002532:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	2200      	movs	r2, #0
 8002544:	4619      	mov	r1, r3
 8002546:	480a      	ldr	r0, [pc, #40]	; (8002570 <_ZL12MX_TIM4_Initv+0x118>)
 8002548:	f018 fd50 	bl	801afec <HAL_TIM_PWM_ConfigChannel>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	bf14      	ite	ne
 8002552:	2301      	movne	r3, #1
 8002554:	2300      	moveq	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 800255c:	f001 fd68 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002560:	4803      	ldr	r0, [pc, #12]	; (8002570 <_ZL12MX_TIM4_Initv+0x118>)
 8002562:	f013 fd1d 	bl	8015fa0 <HAL_TIM_MspPostInit>

}
 8002566:	bf00      	nop
 8002568:	3738      	adds	r7, #56	; 0x38
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000324 	.word	0x20000324
 8002574:	40000800 	.word	0x40000800

08002578 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <_ZL13MX_TIM10_Initv+0x48>)
 800257e:	4a11      	ldr	r2, [pc, #68]	; (80025c4 <_ZL13MX_TIM10_Initv+0x4c>)
 8002580:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <_ZL13MX_TIM10_Initv+0x48>)
 8002584:	2263      	movs	r2, #99	; 0x63
 8002586:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <_ZL13MX_TIM10_Initv+0x48>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <_ZL13MX_TIM10_Initv+0x48>)
 8002590:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002594:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <_ZL13MX_TIM10_Initv+0x48>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259c:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <_ZL13MX_TIM10_Initv+0x48>)
 800259e:	2200      	movs	r2, #0
 80025a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80025a2:	4807      	ldr	r0, [pc, #28]	; (80025c0 <_ZL13MX_TIM10_Initv+0x48>)
 80025a4:	f018 fa04 	bl	801a9b0 <HAL_TIM_Base_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bf14      	ite	ne
 80025ae:	2301      	movne	r3, #1
 80025b0:	2300      	moveq	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <_ZL13MX_TIM10_Initv+0x44>
  {
    Error_Handler();
 80025b8:	f001 fd3a 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	2000036c 	.word	0x2000036c
 80025c4:	40014400 	.word	0x40014400

080025c8 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80025cc:	4b10      	ldr	r3, [pc, #64]	; (8002610 <_ZL13MX_TIM11_Initv+0x48>)
 80025ce:	4a11      	ldr	r2, [pc, #68]	; (8002614 <_ZL13MX_TIM11_Initv+0x4c>)
 80025d0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80025d2:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <_ZL13MX_TIM11_Initv+0x48>)
 80025d4:	2263      	movs	r2, #99	; 0x63
 80025d6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d8:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <_ZL13MX_TIM11_Initv+0x48>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <_ZL13MX_TIM11_Initv+0x48>)
 80025e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <_ZL13MX_TIM11_Initv+0x48>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_ZL13MX_TIM11_Initv+0x48>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80025f2:	4807      	ldr	r0, [pc, #28]	; (8002610 <_ZL13MX_TIM11_Initv+0x48>)
 80025f4:	f018 f9dc 	bl	801a9b0 <HAL_TIM_Base_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	bf14      	ite	ne
 80025fe:	2301      	movne	r3, #1
 8002600:	2300      	moveq	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8002608:	f001 fd12 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200003b4 	.word	0x200003b4
 8002614:	40014800 	.word	0x40014800

08002618 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <_ZL19MX_USART2_UART_Initv+0x58>)
 800261e:	4a15      	ldr	r2, [pc, #84]	; (8002674 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8002620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002624:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <_ZL19MX_USART2_UART_Initv+0x58>)
 800262c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002630:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002634:	2200      	movs	r2, #0
 8002636:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002638:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <_ZL19MX_USART2_UART_Initv+0x58>)
 800263a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800263e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002642:	220c      	movs	r2, #12
 8002644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <_ZL19MX_USART2_UART_Initv+0x58>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002652:	4807      	ldr	r0, [pc, #28]	; (8002670 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002654:	f019 f9ca 	bl	801b9ec <HAL_UART_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <_ZL19MX_USART2_UART_Initv+0x54>
  {
    Error_Handler();
 8002668:	f001 fce2 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	200003fc 	.word	0x200003fc
 8002674:	40004400 	.word	0x40004400

08002678 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <_ZL11MX_DMA_Initv+0x4c>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	4a0f      	ldr	r2, [pc, #60]	; (80026c4 <_ZL11MX_DMA_Initv+0x4c>)
 8002688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800268c:	6313      	str	r3, [r2, #48]	; 0x30
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <_ZL11MX_DMA_Initv+0x4c>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	2011      	movs	r0, #17
 80026a0:	f014 f87b 	bl	801679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80026a4:	2011      	movs	r0, #17
 80026a6:	f014 f894 	bl	80167d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	202f      	movs	r0, #47	; 0x2f
 80026b0:	f014 f873 	bl	801679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80026b4:	202f      	movs	r0, #47	; 0x2f
 80026b6:	f014 f88c 	bl	80167d2 <HAL_NVIC_EnableIRQ>

}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800

080026c8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]
 80026dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	4b69      	ldr	r3, [pc, #420]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a68      	ldr	r2, [pc, #416]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b66      	ldr	r3, [pc, #408]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b62      	ldr	r3, [pc, #392]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a61      	ldr	r2, [pc, #388]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b5f      	ldr	r3, [pc, #380]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	4b5b      	ldr	r3, [pc, #364]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4a5a      	ldr	r2, [pc, #360]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6313      	str	r3, [r2, #48]	; 0x30
 8002726:	4b58      	ldr	r3, [pc, #352]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	4b54      	ldr	r3, [pc, #336]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a53      	ldr	r2, [pc, #332]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b51      	ldr	r3, [pc, #324]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	4b4d      	ldr	r3, [pc, #308]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4a4c      	ldr	r2, [pc, #304]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002758:	f043 0308 	orr.w	r3, r3, #8
 800275c:	6313      	str	r3, [r2, #48]	; 0x30
 800275e:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800276a:	2200      	movs	r2, #0
 800276c:	2120      	movs	r1, #32
 800276e:	4847      	ldr	r0, [pc, #284]	; (800288c <_ZL12MX_GPIO_Initv+0x1c4>)
 8002770:	f014 fdf6 	bl	8017360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8002774:	2200      	movs	r2, #0
 8002776:	f24e 0104 	movw	r1, #57348	; 0xe004
 800277a:	4845      	ldr	r0, [pc, #276]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c8>)
 800277c:	f014 fdf0 	bl	8017360 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 8002780:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002786:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800278a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4619      	mov	r1, r3
 8002796:	483f      	ldr	r0, [pc, #252]	; (8002894 <_ZL12MX_GPIO_Initv+0x1cc>)
 8002798:	f014 fc46 	bl	8017028 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM2_CH1_VINCp_Pin */
  GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 800279c:	2301      	movs	r3, #1
 800279e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027ac:	2301      	movs	r3, #1
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	4835      	ldr	r0, [pc, #212]	; (800288c <_ZL12MX_GPIO_Initv+0x1c4>)
 80027b8:	f014 fc36 	bl	8017028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80027bc:	2320      	movs	r3, #32
 80027be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c0:	2301      	movs	r3, #1
 80027c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c8:	2300      	movs	r3, #0
 80027ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	4619      	mov	r1, r3
 80027d2:	482e      	ldr	r0, [pc, #184]	; (800288c <_ZL12MX_GPIO_Initv+0x1c4>)
 80027d4:	f014 fc28 	bl	8017028 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 80027d8:	2302      	movs	r3, #2
 80027da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	4829      	ldr	r0, [pc, #164]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c8>)
 80027ec:	f014 fc1c 	bl	8017028 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 80027f0:	f24e 0304 	movw	r3, #57348	; 0xe004
 80027f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f6:	2301      	movs	r3, #1
 80027f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	4619      	mov	r1, r3
 8002808:	4821      	ldr	r0, [pc, #132]	; (8002890 <_ZL12MX_GPIO_Initv+0x1c8>)
 800280a:	f014 fc0d 	bl	8017028 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 800280e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002814:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	4619      	mov	r1, r3
 8002824:	481b      	ldr	r0, [pc, #108]	; (8002894 <_ZL12MX_GPIO_Initv+0x1cc>)
 8002826:	f014 fbff 	bl	8017028 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 800282a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	4619      	mov	r1, r3
 800283e:	4815      	ldr	r0, [pc, #84]	; (8002894 <_ZL12MX_GPIO_Initv+0x1cc>)
 8002840:	f014 fbf2 	bl	8017028 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 8002844:	2304      	movs	r3, #4
 8002846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002848:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800284c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	480f      	ldr	r0, [pc, #60]	; (8002898 <_ZL12MX_GPIO_Initv+0x1d0>)
 800285a:	f014 fbe5 	bl	8017028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2100      	movs	r1, #0
 8002862:	2008      	movs	r0, #8
 8002864:	f013 ff99 	bl	801679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002868:	2008      	movs	r0, #8
 800286a:	f013 ffb2 	bl	80167d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	2028      	movs	r0, #40	; 0x28
 8002874:	f013 ff91 	bl	801679a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002878:	2028      	movs	r0, #40	; 0x28
 800287a:	f013 ffaa 	bl	80167d2 <HAL_NVIC_EnableIRQ>

}
 800287e:	bf00      	nop
 8002880:	3728      	adds	r7, #40	; 0x28
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	40020000 	.word	0x40020000
 8002890:	40020400 	.word	0x40020400
 8002894:	40020800 	.word	0x40020800
 8002898:	40020c00 	.word	0x40020c00
 800289c:	00000000 	.word	0x00000000

080028a0 <_Z13GrandStatumixv>:

/* USER CODE BEGIN 4 */
////////// [Grand State] //////////////////////// [Grand State] ////////////////////////
//======== [Grand State] ======================== [Grand State] ========================

void GrandStatumix(){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 80028a4:	4bac      	ldr	r3, [pc, #688]	; (8002b58 <_Z13GrandStatumixv+0x2b8>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <_Z13GrandStatumixv+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 80028ac:	2200      	movs	r2, #0
 80028ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028b2:	48aa      	ldr	r0, [pc, #680]	; (8002b5c <_Z13GrandStatumixv+0x2bc>)
 80028b4:	f014 fd54 	bl	8017360 <HAL_GPIO_WritePin>
	}
	if (grandState != work || grandState != SetZeroBf || grandState != SetZeroGr){
 80028b8:	4ba7      	ldr	r3, [pc, #668]	; (8002b58 <_Z13GrandStatumixv+0x2b8>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d107      	bne.n	80028d0 <_Z13GrandStatumixv+0x30>
 80028c0:	4ba5      	ldr	r3, [pc, #660]	; (8002b58 <_Z13GrandStatumixv+0x2b8>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b06      	cmp	r3, #6
 80028c6:	d103      	bne.n	80028d0 <_Z13GrandStatumixv+0x30>
 80028c8:	4ba3      	ldr	r3, [pc, #652]	; (8002b58 <_Z13GrandStatumixv+0x2b8>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d005      	beq.n	80028dc <_Z13GrandStatumixv+0x3c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 80028d0:	2200      	movs	r2, #0
 80028d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028d6:	48a1      	ldr	r0, [pc, #644]	; (8002b5c <_Z13GrandStatumixv+0x2bc>)
 80028d8:	f014 fd42 	bl	8017360 <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 80028dc:	4b9e      	ldr	r3, [pc, #632]	; (8002b58 <_Z13GrandStatumixv+0x2b8>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d103      	bne.n	80028ec <_Z13GrandStatumixv+0x4c>
 80028e4:	4b9c      	ldr	r3, [pc, #624]	; (8002b58 <_Z13GrandStatumixv+0x2b8>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d005      	beq.n	80028f8 <_Z13GrandStatumixv+0x58>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 80028ec:	2200      	movs	r2, #0
 80028ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028f2:	489a      	ldr	r0, [pc, #616]	; (8002b5c <_Z13GrandStatumixv+0x2bc>)
 80028f4:	f014 fd34 	bl	8017360 <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 80028f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028fc:	4898      	ldr	r0, [pc, #608]	; (8002b60 <_Z13GrandStatumixv+0x2c0>)
 80028fe:	f014 fd17 	bl	8017330 <HAL_GPIO_ReadPin>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	4b97      	ldr	r3, [pc, #604]	; (8002b64 <_Z13GrandStatumixv+0x2c4>)
 8002908:	701a      	strb	r2, [r3, #0]
	pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 800290a:	2102      	movs	r1, #2
 800290c:	4893      	ldr	r0, [pc, #588]	; (8002b5c <_Z13GrandStatumixv+0x2bc>)
 800290e:	f014 fd0f 	bl	8017330 <HAL_GPIO_ReadPin>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	4b94      	ldr	r3, [pc, #592]	; (8002b68 <_Z13GrandStatumixv+0x2c8>)
 8002918:	701a      	strb	r2, [r3, #0]

	switch(grandState){
 800291a:	4b8f      	ldr	r3, [pc, #572]	; (8002b58 <_Z13GrandStatumixv+0x2b8>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	3b01      	subs	r3, #1
 8002920:	2b05      	cmp	r3, #5
 8002922:	d80f      	bhi.n	8002944 <_Z13GrandStatumixv+0xa4>
 8002924:	a201      	add	r2, pc, #4	; (adr r2, 800292c <_Z13GrandStatumixv+0x8c>)
 8002926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292a:	bf00      	nop
 800292c:	08002979 	.word	0x08002979
 8002930:	08002c15 	.word	0x08002c15
 8002934:	08002cab 	.word	0x08002cab
 8002938:	08002c65 	.word	0x08002c65
 800293c:	08002b85 	.word	0x08002b85
 8002940:	080029bf 	.word	0x080029bf
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 8002944:	2201      	movs	r2, #1
 8002946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800294a:	4884      	ldr	r0, [pc, #528]	; (8002b5c <_Z13GrandStatumixv+0x2bc>)
 800294c:	f014 fd08 	bl	8017360 <HAL_GPIO_WritePin>
		//PWMOut = 1200;
		Unwrapping();
 8002950:	f000 fd82 	bl	8003458 <_Z10Unwrappingv>
		Kalmanfilter();
 8002954:	f000 fe34 	bl	80035c0 <_Z12Kalmanfilterv>
		//diffvelo();

		if (pwr_sense == 1){grandState = emer;}
 8002958:	4b83      	ldr	r3, [pc, #524]	; (8002b68 <_Z13GrandStatumixv+0x2c8>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d102      	bne.n	8002966 <_Z13GrandStatumixv+0xc6>
 8002960:	4b7d      	ldr	r3, [pc, #500]	; (8002b58 <_Z13GrandStatumixv+0x2b8>)
 8002962:	2203      	movs	r2, #3
 8002964:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 8002966:	4b7f      	ldr	r3, [pc, #508]	; (8002b64 <_Z13GrandStatumixv+0x2c4>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 81ac 	bne.w	8002cc8 <_Z13GrandStatumixv+0x428>
 8002970:	4b79      	ldr	r3, [pc, #484]	; (8002b58 <_Z13GrandStatumixv+0x2b8>)
 8002972:	2202      	movs	r2, #2
 8002974:	701a      	strb	r2, [r3, #0]
		/// [From UART] run when get {HOME} , {RUN}
		//if (bluecounter != 0){grandState = work;} // can go work from ready only
	break;
 8002976:	e1a7      	b.n	8002cc8 <_Z13GrandStatumixv+0x428>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002978:	2201      	movs	r2, #1
 800297a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800297e:	4877      	ldr	r0, [pc, #476]	; (8002b5c <_Z13GrandStatumixv+0x2bc>)
 8002980:	f014 fcee 	bl	8017360 <HAL_GPIO_WritePin>
		LaserTrajex_workflow();
 8002984:	f000 f9cc 	bl	8002d20 <_Z20LaserTrajex_workflowv>

		if (pwr_sense == 1){
 8002988:	4b77      	ldr	r3, [pc, #476]	; (8002b68 <_Z13GrandStatumixv+0x2c8>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d106      	bne.n	800299e <_Z13GrandStatumixv+0xfe>
			grandState = emer;
 8002990:	4b71      	ldr	r3, [pc, #452]	; (8002b58 <_Z13GrandStatumixv+0x2b8>)
 8002992:	2203      	movs	r2, #3
 8002994:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 8002996:	4b75      	ldr	r3, [pc, #468]	; (8002b6c <_Z13GrandStatumixv+0x2cc>)
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
		}
		if (stop_sense == 0){
 800299e:	4b71      	ldr	r3, [pc, #452]	; (8002b64 <_Z13GrandStatumixv+0x2c4>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 8192 	bne.w	8002ccc <_Z13GrandStatumixv+0x42c>
			PWMOut = 0;
 80029a8:	4b71      	ldr	r3, [pc, #452]	; (8002b70 <_Z13GrandStatumixv+0x2d0>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	801a      	strh	r2, [r3, #0]
			grandState = stopnd;
 80029ae:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <_Z13GrandStatumixv+0x2b8>)
 80029b0:	2204      	movs	r2, #4
 80029b2:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 80029b4:	4b6d      	ldr	r3, [pc, #436]	; (8002b6c <_Z13GrandStatumixv+0x2cc>)
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
		}
	break;
 80029bc:	e186      	b.n	8002ccc <_Z13GrandStatumixv+0x42c>

	case SetZeroBf:
		static uint8_t counter_Z = 0;
		//// Cat cat set zero
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 80029be:	2201      	movs	r2, #1
 80029c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029c4:	4865      	ldr	r0, [pc, #404]	; (8002b5c <_Z13GrandStatumixv+0x2bc>)
 80029c6:	f014 fccb 	bl	8017360 <HAL_GPIO_WritePin>

		//PWMOut = 2500;
		//mot_dirctn = 0;
		Unwrapping();
 80029ca:	f000 fd45 	bl	8003458 <_Z10Unwrappingv>
		Kalmanfilter();
 80029ce:	f000 fdf7 	bl	80035c0 <_Z12Kalmanfilterv>

		if(KalP >= 2.00){
 80029d2:	4b68      	ldr	r3, [pc, #416]	; (8002b74 <_Z13GrandStatumixv+0x2d4>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80029dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e4:	db07      	blt.n	80029f6 <_Z13GrandStatumixv+0x156>
			PWMOut = 4800;
 80029e6:	4b62      	ldr	r3, [pc, #392]	; (8002b70 <_Z13GrandStatumixv+0x2d0>)
 80029e8:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80029ec:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 80029ee:	4b62      	ldr	r3, [pc, #392]	; (8002b78 <_Z13GrandStatumixv+0x2d8>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	e082      	b.n	8002afc <_Z13GrandStatumixv+0x25c>
		}else if (2.00 >= KalP && KalP >= 1.00) {
 80029f6:	4b5f      	ldr	r3, [pc, #380]	; (8002b74 <_Z13GrandStatumixv+0x2d4>)
 80029f8:	edd3 7a00 	vldr	s15, [r3]
 80029fc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a08:	d811      	bhi.n	8002a2e <_Z13GrandStatumixv+0x18e>
 8002a0a:	4b5a      	ldr	r3, [pc, #360]	; (8002b74 <_Z13GrandStatumixv+0x2d4>)
 8002a0c:	edd3 7a00 	vldr	s15, [r3]
 8002a10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1c:	db07      	blt.n	8002a2e <_Z13GrandStatumixv+0x18e>
					PWMOut = 2400;
 8002a1e:	4b54      	ldr	r3, [pc, #336]	; (8002b70 <_Z13GrandStatumixv+0x2d0>)
 8002a20:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002a24:	801a      	strh	r2, [r3, #0]
					mot_dirctn = 0;
 8002a26:	4b54      	ldr	r3, [pc, #336]	; (8002b78 <_Z13GrandStatumixv+0x2d8>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
 8002a2c:	e066      	b.n	8002afc <_Z13GrandStatumixv+0x25c>
		}else if (1.00 >= KalP && KalP >= 0.2) {
 8002a2e:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <_Z13GrandStatumixv+0x2d4>)
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a40:	d814      	bhi.n	8002a6c <_Z13GrandStatumixv+0x1cc>
 8002a42:	4b4c      	ldr	r3, [pc, #304]	; (8002b74 <_Z13GrandStatumixv+0x2d4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fd7e 	bl	8000548 <__aeabi_f2d>
 8002a4c:	a33a      	add	r3, pc, #232	; (adr r3, 8002b38 <_Z13GrandStatumixv+0x298>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f7fe f857 	bl	8000b04 <__aeabi_dcmpge>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <_Z13GrandStatumixv+0x1cc>
			PWMOut = 1200;
 8002a5c:	4b44      	ldr	r3, [pc, #272]	; (8002b70 <_Z13GrandStatumixv+0x2d0>)
 8002a5e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002a62:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 8002a64:	4b44      	ldr	r3, [pc, #272]	; (8002b78 <_Z13GrandStatumixv+0x2d8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	e047      	b.n	8002afc <_Z13GrandStatumixv+0x25c>
		}else if (0.2 >= KalP && KalP >= 0.03) {
 8002a6c:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <_Z13GrandStatumixv+0x2d4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fd69 	bl	8000548 <__aeabi_f2d>
 8002a76:	a330      	add	r3, pc, #192	; (adr r3, 8002b38 <_Z13GrandStatumixv+0x298>)
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f7fe f838 	bl	8000af0 <__aeabi_dcmple>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d014      	beq.n	8002ab0 <_Z13GrandStatumixv+0x210>
 8002a86:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <_Z13GrandStatumixv+0x2d4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fd5c 	bl	8000548 <__aeabi_f2d>
 8002a90:	a32b      	add	r3, pc, #172	; (adr r3, 8002b40 <_Z13GrandStatumixv+0x2a0>)
 8002a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a96:	f7fe f835 	bl	8000b04 <__aeabi_dcmpge>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d007      	beq.n	8002ab0 <_Z13GrandStatumixv+0x210>
			PWMOut = 800;
 8002aa0:	4b33      	ldr	r3, [pc, #204]	; (8002b70 <_Z13GrandStatumixv+0x2d0>)
 8002aa2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002aa6:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 8002aa8:	4b33      	ldr	r3, [pc, #204]	; (8002b78 <_Z13GrandStatumixv+0x2d8>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e025      	b.n	8002afc <_Z13GrandStatumixv+0x25c>
		}else if (-0.1 <= KalP && KalP <= -0.02) {
 8002ab0:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <_Z13GrandStatumixv+0x2d4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fd47 	bl	8000548 <__aeabi_f2d>
 8002aba:	a323      	add	r3, pc, #140	; (adr r3, 8002b48 <_Z13GrandStatumixv+0x2a8>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fe f820 	bl	8000b04 <__aeabi_dcmpge>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d014      	beq.n	8002af4 <_Z13GrandStatumixv+0x254>
 8002aca:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <_Z13GrandStatumixv+0x2d4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fd fd3a 	bl	8000548 <__aeabi_f2d>
 8002ad4:	a31e      	add	r3, pc, #120	; (adr r3, 8002b50 <_Z13GrandStatumixv+0x2b0>)
 8002ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ada:	f7fe f809 	bl	8000af0 <__aeabi_dcmple>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <_Z13GrandStatumixv+0x254>
				PWMOut = 900;
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <_Z13GrandStatumixv+0x2d0>)
 8002ae6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002aea:	801a      	strh	r2, [r3, #0]
				mot_dirctn = 1;
 8002aec:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <_Z13GrandStatumixv+0x2d8>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e003      	b.n	8002afc <_Z13GrandStatumixv+0x25c>
			}
		else{PWMOut = PWMOut;}
 8002af4:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <_Z13GrandStatumixv+0x2d0>)
 8002af6:	881a      	ldrh	r2, [r3, #0]
 8002af8:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <_Z13GrandStatumixv+0x2d0>)
 8002afa:	801a      	strh	r2, [r3, #0]

		if(BinPosXI == 0){
 8002afc:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <_Z13GrandStatumixv+0x2dc>)
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d108      	bne.n	8002b16 <_Z13GrandStatumixv+0x276>
			PWMOut = 0;
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <_Z13GrandStatumixv+0x2d0>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	801a      	strh	r2, [r3, #0]
			counter_Z++;
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <_Z13GrandStatumixv+0x2e0>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <_Z13GrandStatumixv+0x2e0>)
 8002b14:	701a      	strb	r2, [r3, #0]
		}
		if(counter_Z >= 100){
 8002b16:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <_Z13GrandStatumixv+0x2e0>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b63      	cmp	r3, #99	; 0x63
 8002b1c:	f240 80d8 	bls.w	8002cd0 <_Z13GrandStatumixv+0x430>
			counter_Z = 0;
 8002b20:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <_Z13GrandStatumixv+0x2e0>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
			PWMOut = 0;
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <_Z13GrandStatumixv+0x2d0>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	801a      	strh	r2, [r3, #0]
			fn_Uart();
 8002b2c:	f7fe ff0c 	bl	8001948 <_Z7fn_Uartv>
			grandState = Ready;
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <_Z13GrandStatumixv+0x2b8>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
//			position_order = 0;
//			positionlog[position_order] = 0.00; // 0.000613 - 0.0122 => 1-2/1024
//			Velocity = 7.0;
//			grandState = SetZeroGr;
//		}
		break;
 8002b36:	e0cb      	b.n	8002cd0 <_Z13GrandStatumixv+0x430>
 8002b38:	9999999a 	.word	0x9999999a
 8002b3c:	3fc99999 	.word	0x3fc99999
 8002b40:	eb851eb8 	.word	0xeb851eb8
 8002b44:	3f9eb851 	.word	0x3f9eb851
 8002b48:	9999999a 	.word	0x9999999a
 8002b4c:	bfb99999 	.word	0xbfb99999
 8002b50:	47ae147b 	.word	0x47ae147b
 8002b54:	bf947ae1 	.word	0xbf947ae1
 8002b58:	20000502 	.word	0x20000502
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40020800 	.word	0x40020800
 8002b64:	20000504 	.word	0x20000504
 8002b68:	20000503 	.word	0x20000503
 8002b6c:	2000073c 	.word	0x2000073c
 8002b70:	2000057c 	.word	0x2000057c
 8002b74:	200006d8 	.word	0x200006d8
 8002b78:	20000584 	.word	0x20000584
 8002b7c:	20000578 	.word	0x20000578
 8002b80:	200007ee 	.word	0x200007ee

	case SetZeroGr:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002b84:	2201      	movs	r2, #1
 8002b86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b8a:	4857      	ldr	r0, [pc, #348]	; (8002ce8 <_Z13GrandStatumixv+0x448>)
 8002b8c:	f014 fbe8 	bl	8017360 <HAL_GPIO_WritePin>

			////////>>>SetZeroStp/////////////////
		Unwrapping();
 8002b90:	f000 fc62 	bl	8003458 <_Z10Unwrappingv>

		 if(flagNewpos==0){
 8002b94:	4b55      	ldr	r3, [pc, #340]	; (8002cec <_Z13GrandStatumixv+0x44c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d111      	bne.n	8002bc0 <_Z13GrandStatumixv+0x320>
			Currentpos = CurrentEn;
 8002b9c:	4b54      	ldr	r3, [pc, #336]	; (8002cf0 <_Z13GrandStatumixv+0x450>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a54      	ldr	r2, [pc, #336]	; (8002cf4 <_Z13GrandStatumixv+0x454>)
 8002ba2:	6013      	str	r3, [r2, #0]
			Distance = Finalposition - Currentpos;
 8002ba4:	4b54      	ldr	r3, [pc, #336]	; (8002cf8 <_Z13GrandStatumixv+0x458>)
 8002ba6:	ed93 7a00 	vldr	s14, [r3]
 8002baa:	4b52      	ldr	r3, [pc, #328]	; (8002cf4 <_Z13GrandStatumixv+0x454>)
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb4:	4b51      	ldr	r3, [pc, #324]	; (8002cfc <_Z13GrandStatumixv+0x45c>)
 8002bb6:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 8002bba:	4b4c      	ldr	r3, [pc, #304]	; (8002cec <_Z13GrandStatumixv+0x44c>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
		 }
		Trajectory();
 8002bc0:	f000 f9f6 	bl	8002fb0 <_Z10Trajectoryv>
		Kalmanfilter();
 8002bc4:	f000 fcfc 	bl	80035c0 <_Z12Kalmanfilterv>
		controlloop();
 8002bc8:	f000 ff56 	bl	8003a78 <_Z11controlloopv>

		//// <> Zero finish
		if (flag_finishTra == 1){
 8002bcc:	4b4c      	ldr	r3, [pc, #304]	; (8002d00 <_Z13GrandStatumixv+0x460>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d109      	bne.n	8002be8 <_Z13GrandStatumixv+0x348>
			flag_finishTra = 0;
 8002bd4:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <_Z13GrandStatumixv+0x460>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
			fn_Uart();
 8002bda:	f7fe feb5 	bl	8001948 <_Z7fn_Uartv>
			grandState = Ready;
 8002bde:	4b49      	ldr	r3, [pc, #292]	; (8002d04 <_Z13GrandStatumixv+0x464>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
			ResetParam();
 8002be4:	f000 f998 	bl	8002f18 <_Z10ResetParamv>
		}
		////////<<<SetZeroStp/////////////////
//		}

		if (pwr_sense == 1){grandState = emer;}
 8002be8:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <_Z13GrandStatumixv+0x468>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d102      	bne.n	8002bf6 <_Z13GrandStatumixv+0x356>
 8002bf0:	4b44      	ldr	r3, [pc, #272]	; (8002d04 <_Z13GrandStatumixv+0x464>)
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){
 8002bf6:	4b45      	ldr	r3, [pc, #276]	; (8002d0c <_Z13GrandStatumixv+0x46c>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d16a      	bne.n	8002cd4 <_Z13GrandStatumixv+0x434>
					PWMOut = 0;
 8002bfe:	4b44      	ldr	r3, [pc, #272]	; (8002d10 <_Z13GrandStatumixv+0x470>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	801a      	strh	r2, [r3, #0]
					grandState = stopnd;
 8002c04:	4b3f      	ldr	r3, [pc, #252]	; (8002d04 <_Z13GrandStatumixv+0x464>)
 8002c06:	2204      	movs	r2, #4
 8002c08:	701a      	strb	r2, [r3, #0]
					u_contr = 0;
 8002c0a:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <_Z13GrandStatumixv+0x474>)
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
				}
	break;
 8002c12:	e05f      	b.n	8002cd4 <_Z13GrandStatumixv+0x434>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002c14:	2201      	movs	r2, #1
 8002c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c1a:	4833      	ldr	r0, [pc, #204]	; (8002ce8 <_Z13GrandStatumixv+0x448>)
 8002c1c:	f014 fba0 	bl	8017360 <HAL_GPIO_WritePin>
		PWMOut = 0;
 8002c20:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <_Z13GrandStatumixv+0x470>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	801a      	strh	r2, [r3, #0]

		X(1,0)=0;
 8002c26:	2200      	movs	r2, #0
 8002c28:	2101      	movs	r1, #1
 8002c2a:	483b      	ldr	r0, [pc, #236]	; (8002d18 <_Z13GrandStatumixv+0x478>)
 8002c2c:	f001 fc44 	bl	80044b8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
		KalV = X(1,0);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4836      	ldr	r0, [pc, #216]	; (8002d18 <_Z13GrandStatumixv+0x478>)
 8002c3e:	f001 fc3b 	bl	80044b8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002c42:	4603      	mov	r3, r0
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a35      	ldr	r2, [pc, #212]	; (8002d1c <_Z13GrandStatumixv+0x47c>)
 8002c48:	6013      	str	r3, [r2, #0]

		if (stop_sense == 1){
 8002c4a:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <_Z13GrandStatumixv+0x46c>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d142      	bne.n	8002cd8 <_Z13GrandStatumixv+0x438>
			grandState = Ready;
 8002c52:	4b2c      	ldr	r3, [pc, #176]	; (8002d04 <_Z13GrandStatumixv+0x464>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
			IOExpenderInit();
 8002c58:	f001 f82a 	bl	8003cb0 <_Z14IOExpenderInitv>
			HAL_Delay(100);
 8002c5c:	2064      	movs	r0, #100	; 0x64
 8002c5e:	f013 fc9d 	bl	801659c <HAL_Delay>
			//== rotation change for dummy test
			//mot_dirctn++; mot_dirctn%=2;
		}
	break;
 8002c62:	e039      	b.n	8002cd8 <_Z13GrandStatumixv+0x438>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002c64:	2201      	movs	r2, #1
 8002c66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c6a:	481f      	ldr	r0, [pc, #124]	; (8002ce8 <_Z13GrandStatumixv+0x448>)
 8002c6c:	f014 fb78 	bl	8017360 <HAL_GPIO_WritePin>
			PWMOut = 0;
 8002c70:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <_Z13GrandStatumixv+0x470>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	801a      	strh	r2, [r3, #0]
			//Integral = 0;
			X(1,0)=0;
 8002c76:	2200      	movs	r2, #0
 8002c78:	2101      	movs	r1, #1
 8002c7a:	4827      	ldr	r0, [pc, #156]	; (8002d18 <_Z13GrandStatumixv+0x478>)
 8002c7c:	f001 fc1c 	bl	80044b8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
			KalV = X(1,0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4822      	ldr	r0, [pc, #136]	; (8002d18 <_Z13GrandStatumixv+0x478>)
 8002c8e:	f001 fc13 	bl	80044b8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002c92:	4603      	mov	r3, r0
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a21      	ldr	r2, [pc, #132]	; (8002d1c <_Z13GrandStatumixv+0x47c>)
 8002c98:	6013      	str	r3, [r2, #0]


			if (stop_sense == 1){
 8002c9a:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <_Z13GrandStatumixv+0x46c>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d11c      	bne.n	8002cdc <_Z13GrandStatumixv+0x43c>
				grandState = work;
 8002ca2:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <_Z13GrandStatumixv+0x464>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002ca8:	e018      	b.n	8002cdc <_Z13GrandStatumixv+0x43c>

	case emer:
		ResetParam();
 8002caa:	f000 f935 	bl	8002f18 <_Z10ResetParamv>
		// Reset every variables at control
		if (pwr_sense == 0){
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <_Z13GrandStatumixv+0x468>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d114      	bne.n	8002ce0 <_Z13GrandStatumixv+0x440>
			grandState = Ready;
 8002cb6:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <_Z13GrandStatumixv+0x464>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
			HAL_Delay(250); // wait for emer release shock power
 8002cbc:	20fa      	movs	r0, #250	; 0xfa
 8002cbe:	f013 fc6d 	bl	801659c <HAL_Delay>
			IOExpenderInit();
 8002cc2:	f000 fff5 	bl	8003cb0 <_Z14IOExpenderInitv>

		}
	break;
 8002cc6:	e00b      	b.n	8002ce0 <_Z13GrandStatumixv+0x440>
	break;
 8002cc8:	bf00      	nop
 8002cca:	e00a      	b.n	8002ce2 <_Z13GrandStatumixv+0x442>
	break;
 8002ccc:	bf00      	nop
 8002cce:	e008      	b.n	8002ce2 <_Z13GrandStatumixv+0x442>
		break;
 8002cd0:	bf00      	nop
 8002cd2:	e006      	b.n	8002ce2 <_Z13GrandStatumixv+0x442>
	break;
 8002cd4:	bf00      	nop
 8002cd6:	e004      	b.n	8002ce2 <_Z13GrandStatumixv+0x442>
	break;
 8002cd8:	bf00      	nop
 8002cda:	e002      	b.n	8002ce2 <_Z13GrandStatumixv+0x442>
		break;
 8002cdc:	bf00      	nop
 8002cde:	e000      	b.n	8002ce2 <_Z13GrandStatumixv+0x442>
	break;
 8002ce0:	bf00      	nop
	}
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40020400 	.word	0x40020400
 8002cec:	200005b0 	.word	0x200005b0
 8002cf0:	200006f8 	.word	0x200006f8
 8002cf4:	200005ac 	.word	0x200005ac
 8002cf8:	20000588 	.word	0x20000588
 8002cfc:	2000058c 	.word	0x2000058c
 8002d00:	2000050c 	.word	0x2000050c
 8002d04:	20000502 	.word	0x20000502
 8002d08:	20000503 	.word	0x20000503
 8002d0c:	20000504 	.word	0x20000504
 8002d10:	2000057c 	.word	0x2000057c
 8002d14:	2000073c 	.word	0x2000073c
 8002d18:	200006b4 	.word	0x200006b4
 8002d1c:	200006dc 	.word	0x200006dc

08002d20 <_Z20LaserTrajex_workflowv>:

void LaserTrajex_workflow(){ // 1, n loop go to shoot laser run
 8002d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
	// -1 means no position value
	//if (Finalposition == -1){flag_LasxTraj = 0;}
	static uint16_t timeouttt = 5050;
	//static uint8_t missst = 0;

	switch(flag_LasxTraj){
 8002d28:	4b6a      	ldr	r3, [pc, #424]	; (8002ed4 <_Z20LaserTrajex_workflowv+0x1b4>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d012      	beq.n	8002d56 <_Z20LaserTrajex_workflowv+0x36>
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d059      	beq.n	8002de8 <_Z20LaserTrajex_workflowv+0xc8>
	default:
	case 0: // wait go flag
		////////// raise flag to 1 if need to drive the state

		if (grandState == work){ //flag_LasxTraj != 0 ||
 8002d34:	4b68      	ldr	r3, [pc, #416]	; (8002ed8 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	f040 80c1 	bne.w	8002ec0 <_Z20LaserTrajex_workflowv+0x1a0>
			flag_LasxTraj = 1;
 8002d3e:	4b65      	ldr	r3, [pc, #404]	; (8002ed4 <_Z20LaserTrajex_workflowv+0x1b4>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
			Finalposition = positionlog[position_order]; // receive in rad
 8002d44:	4b65      	ldr	r3, [pc, #404]	; (8002edc <_Z20LaserTrajex_workflowv+0x1bc>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	4a65      	ldr	r2, [pc, #404]	; (8002ee0 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a64      	ldr	r2, [pc, #400]	; (8002ee4 <_Z20LaserTrajex_workflowv+0x1c4>)
 8002d52:	6013      	str	r3, [r2, #0]

		}
		break;
 8002d54:	e0b4      	b.n	8002ec0 <_Z20LaserTrajex_workflowv+0x1a0>
	case 1: //-------------traject-----
		//====flag_LasxTraj will trig trajex in while;
		//////// raise flag to 2 and flag_efftActi = 1; if reach the target the position

		Unwrapping();
 8002d56:	f000 fb7f 	bl	8003458 <_Z10Unwrappingv>
		 if(flagNewpos == 0){
 8002d5a:	4b63      	ldr	r3, [pc, #396]	; (8002ee8 <_Z20LaserTrajex_workflowv+0x1c8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d114      	bne.n	8002d8c <_Z20LaserTrajex_workflowv+0x6c>
			Currentpos = CurrentEn;
 8002d62:	4b62      	ldr	r3, [pc, #392]	; (8002eec <_Z20LaserTrajex_workflowv+0x1cc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a62      	ldr	r2, [pc, #392]	; (8002ef0 <_Z20LaserTrajex_workflowv+0x1d0>)
 8002d68:	6013      	str	r3, [r2, #0]
			//Finalposition = 300*0.006136; // Put goal position here in rad
			Distance = Finalposition - Currentpos;
 8002d6a:	4b5e      	ldr	r3, [pc, #376]	; (8002ee4 <_Z20LaserTrajex_workflowv+0x1c4>)
 8002d6c:	ed93 7a00 	vldr	s14, [r3]
 8002d70:	4b5f      	ldr	r3, [pc, #380]	; (8002ef0 <_Z20LaserTrajex_workflowv+0x1d0>)
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <_Z20LaserTrajex_workflowv+0x1d4>)
 8002d7c:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 8002d80:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <_Z20LaserTrajex_workflowv+0x1c8>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
			check = 0;
 8002d86:	4b5c      	ldr	r3, [pc, #368]	; (8002ef8 <_Z20LaserTrajex_workflowv+0x1d8>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
		 }
		Trajectory();
 8002d8c:	f000 f910 	bl	8002fb0 <_Z10Trajectoryv>
		Kalmanfilter();
 8002d90:	f000 fc16 	bl	80035c0 <_Z12Kalmanfilterv>
		//controlloop();

		//HAL_Delay(2500); // Simulate workload
		//flag_finishTra = 1;

		if(flag_finishTra == 1){
 8002d94:	4b59      	ldr	r3, [pc, #356]	; (8002efc <_Z20LaserTrajex_workflowv+0x1dc>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	f040 8093 	bne.w	8002ec4 <_Z20LaserTrajex_workflowv+0x1a4>
			flag_finishTra = 0;
 8002d9e:	4b57      	ldr	r3, [pc, #348]	; (8002efc <_Z20LaserTrajex_workflowv+0x1dc>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]

			flag_efftActi = 1;
 8002da4:	4b56      	ldr	r3, [pc, #344]	; (8002f00 <_Z20LaserTrajex_workflowv+0x1e0>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
			flag_LasxTraj = 2;
 8002daa:	4b4a      	ldr	r3, [pc, #296]	; (8002ed4 <_Z20LaserTrajex_workflowv+0x1b4>)
 8002dac:	2202      	movs	r2, #2
 8002dae:	701a      	strb	r2, [r3, #0]

			timeout_efft = millis();
 8002db0:	f001 f908 	bl	8003fc4 <_Z6millisv>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2200      	movs	r2, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	60fa      	str	r2, [r7, #12]
 8002dbc:	4b51      	ldr	r3, [pc, #324]	; (8002f04 <_Z20LaserTrajex_workflowv+0x1e4>)
 8002dbe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002dc2:	e9c3 1200 	strd	r1, r2, [r3]

			if(flag_efftDis == 1){
 8002dc6:	4b50      	ldr	r3, [pc, #320]	; (8002f08 <_Z20LaserTrajex_workflowv+0x1e8>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d107      	bne.n	8002dde <_Z20LaserTrajex_workflowv+0xbe>
				timeouttt = 500;
 8002dce:	4b4f      	ldr	r3, [pc, #316]	; (8002f0c <_Z20LaserTrajex_workflowv+0x1ec>)
 8002dd0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002dd4:	801a      	strh	r2, [r3, #0]
				efft_status = 0x78;}
 8002dd6:	4b4e      	ldr	r3, [pc, #312]	; (8002f10 <_Z20LaserTrajex_workflowv+0x1f0>)
 8002dd8:	2278      	movs	r2, #120	; 0x78
 8002dda:	701a      	strb	r2, [r3, #0]
			else{timeouttt = 5050;}

		}
		break;
 8002ddc:	e072      	b.n	8002ec4 <_Z20LaserTrajex_workflowv+0x1a4>
			else{timeouttt = 5050;}
 8002dde:	4b4b      	ldr	r3, [pc, #300]	; (8002f0c <_Z20LaserTrajex_workflowv+0x1ec>)
 8002de0:	f241 32ba 	movw	r2, #5050	; 0x13ba
 8002de4:	801a      	strh	r2, [r3, #0]
		break;
 8002de6:	e06d      	b.n	8002ec4 <_Z20LaserTrajex_workflowv+0x1a4>
	case 2: //---------------Laserwork--------------
		trig_efftRead = 1;
 8002de8:	4b4a      	ldr	r3, [pc, #296]	; (8002f14 <_Z20LaserTrajex_workflowv+0x1f4>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	701a      	strb	r2, [r3, #0]

		// if laser finished work or tomeout and not too fast shift state
		if((efft_status == 0x78 || millis() - timeout_efft >= timeouttt) && millis() - timeout_efft >= 1000){
 8002dee:	4b48      	ldr	r3, [pc, #288]	; (8002f10 <_Z20LaserTrajex_workflowv+0x1f0>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b78      	cmp	r3, #120	; 0x78
 8002df4:	d01c      	beq.n	8002e30 <_Z20LaserTrajex_workflowv+0x110>
 8002df6:	f001 f8e5 	bl	8003fc4 <_Z6millisv>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	617a      	str	r2, [r7, #20]
 8002e02:	4b40      	ldr	r3, [pc, #256]	; (8002f04 <_Z20LaserTrajex_workflowv+0x1e4>)
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	6939      	ldr	r1, [r7, #16]
 8002e0a:	ebb1 0802 	subs.w	r8, r1, r2
 8002e0e:	6979      	ldr	r1, [r7, #20]
 8002e10:	eb61 0903 	sbc.w	r9, r1, r3
 8002e14:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <_Z20LaserTrajex_workflowv+0x1ec>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002e24:	460b      	mov	r3, r1
 8002e26:	4598      	cmp	r8, r3
 8002e28:	4613      	mov	r3, r2
 8002e2a:	eb79 0303 	sbcs.w	r3, r9, r3
 8002e2e:	d313      	bcc.n	8002e58 <_Z20LaserTrajex_workflowv+0x138>
 8002e30:	f001 f8c8 	bl	8003fc4 <_Z6millisv>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2200      	movs	r2, #0
 8002e38:	469a      	mov	sl, r3
 8002e3a:	4693      	mov	fp, r2
 8002e3c:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <_Z20LaserTrajex_workflowv+0x1e4>)
 8002e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e42:	ebba 0402 	subs.w	r4, sl, r2
 8002e46:	eb6b 0503 	sbc.w	r5, fp, r3
 8002e4a:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002e4e:	f175 0300 	sbcs.w	r3, r5, #0
 8002e52:	d301      	bcc.n	8002e58 <_Z20LaserTrajex_workflowv+0x138>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <_Z20LaserTrajex_workflowv+0x13a>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d034      	beq.n	8002ec8 <_Z20LaserTrajex_workflowv+0x1a8>
		// force encoder to work
		//if(efft_status == 0x78 || millis() - timeout_efft >= timeouttt){
			efft_status = 0x00;
 8002e5e:	4b2c      	ldr	r3, [pc, #176]	; (8002f10 <_Z20LaserTrajex_workflowv+0x1f0>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 0;
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <_Z20LaserTrajex_workflowv+0x1f4>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
			position_order++; // go to next obtained position
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <_Z20LaserTrajex_workflowv+0x1bc>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <_Z20LaserTrajex_workflowv+0x1bc>)
 8002e74:	701a      	strb	r2, [r3, #0]

			if (positionlog[position_order] == -1){
 8002e76:	4b19      	ldr	r3, [pc, #100]	; (8002edc <_Z20LaserTrajex_workflowv+0x1bc>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	edd3 7a00 	vldr	s15, [r3]
 8002e84:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002e88:	eef4 7a47 	vcmp.f32	s15, s14
 8002e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e90:	d10a      	bne.n	8002ea8 <_Z20LaserTrajex_workflowv+0x188>
				//Real end, reset all position parameter
				// back to ready
				//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
				fn_Uart();
 8002e92:	f7fe fd59 	bl	8001948 <_Z7fn_Uartv>
				flag_LasxTraj = 0;
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <_Z20LaserTrajex_workflowv+0x1b4>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
				ResetParam();
 8002e9c:	f000 f83c 	bl	8002f18 <_Z10ResetParamv>
				grandState = Ready;
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
			else {
				Finalposition = positionlog[position_order];
				flag_LasxTraj = 1;
			} // continue next pos if have
		}
		break;
 8002ea6:	e00f      	b.n	8002ec8 <_Z20LaserTrajex_workflowv+0x1a8>
				Finalposition = positionlog[position_order];
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <_Z20LaserTrajex_workflowv+0x1bc>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <_Z20LaserTrajex_workflowv+0x1c4>)
 8002eb6:	6013      	str	r3, [r2, #0]
				flag_LasxTraj = 1;
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <_Z20LaserTrajex_workflowv+0x1b4>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
		break;
 8002ebe:	e003      	b.n	8002ec8 <_Z20LaserTrajex_workflowv+0x1a8>
		break;
 8002ec0:	bf00      	nop
 8002ec2:	e002      	b.n	8002eca <_Z20LaserTrajex_workflowv+0x1aa>
		break;
 8002ec4:	bf00      	nop
 8002ec6:	e000      	b.n	8002eca <_Z20LaserTrajex_workflowv+0x1aa>
		break;
 8002ec8:	bf00      	nop
	}
}
 8002eca:	bf00      	nop
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed4:	2000051c 	.word	0x2000051c
 8002ed8:	20000502 	.word	0x20000502
 8002edc:	2000051d 	.word	0x2000051d
 8002ee0:	20000144 	.word	0x20000144
 8002ee4:	20000588 	.word	0x20000588
 8002ee8:	200005b0 	.word	0x200005b0
 8002eec:	200006f8 	.word	0x200006f8
 8002ef0:	200005ac 	.word	0x200005ac
 8002ef4:	2000058c 	.word	0x2000058c
 8002ef8:	20000745 	.word	0x20000745
 8002efc:	2000050c 	.word	0x2000050c
 8002f00:	20000747 	.word	0x20000747
 8002f04:	20000758 	.word	0x20000758
 8002f08:	200001b0 	.word	0x200001b0
 8002f0c:	200001c8 	.word	0x200001c8
 8002f10:	20000746 	.word	0x20000746
 8002f14:	20000749 	.word	0x20000749

08002f18 <_Z10ResetParamv>:

void ResetParam(){
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
	// Reset every variables at control
	// reset position buffer
	PWMOut = 0;
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <_Z10ResetParamv+0x6c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8002f24:	2300      	movs	r3, #0
 8002f26:	607b      	str	r3, [r7, #4]
 8002f28:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <_Z10ResetParamv+0x70>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4293      	cmp	r3, r2
 8002f32:	dc09      	bgt.n	8002f48 <_Z10ResetParamv+0x30>
			positionlog[i] = -1.0;
 8002f34:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <_Z10ResetParamv+0x74>)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <_Z10ResetParamv+0x78>)
 8002f3e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3301      	adds	r3, #1
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	e7ef      	b.n	8002f28 <_Z10ResetParamv+0x10>
		}
	position_order = 0;
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <_Z10ResetParamv+0x70>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
	flag_LasxTraj = 0;
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <_Z10ResetParamv+0x7c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
	trig_efftRead = 0;
 8002f54:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <_Z10ResetParamv+0x80>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
	bluecounter = 0;
 8002f5a:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <_Z10ResetParamv+0x84>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
	Distance = 0;
 8002f60:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <_Z10ResetParamv+0x88>)
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
	Currentpos = 0;
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <_Z10ResetParamv+0x8c>)
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
	efft_status = 0x00;
 8002f70:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <_Z10ResetParamv+0x90>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
	IOExpenderInit();
 8002f76:	f000 fe9b 	bl	8003cb0 <_Z14IOExpenderInitv>
	//Integral = 0;
	//u_contr = 0;
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	2000057c 	.word	0x2000057c
 8002f88:	2000051d 	.word	0x2000051d
 8002f8c:	20000144 	.word	0x20000144
 8002f90:	bf800000 	.word	0xbf800000
 8002f94:	2000051c 	.word	0x2000051c
 8002f98:	20000749 	.word	0x20000749
 8002f9c:	20000704 	.word	0x20000704
 8002fa0:	2000058c 	.word	0x2000058c
 8002fa4:	200005ac 	.word	0x200005ac
 8002fa8:	20000746 	.word	0x20000746
 8002fac:	00000000 	.word	0x00000000

08002fb0 <_Z10Trajectoryv>:

//////////////////// [Trajectory Path] //////////////////////
void Trajectory(){
 8002fb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fb4:	af00      	add	r7, sp, #0

	if(micros() - TimeStampTraject >= 10000){
 8002fb6:	f000 ffeb 	bl	8003f90 <_Z6microsv>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	49dd      	ldr	r1, [pc, #884]	; (8003334 <_Z10Trajectoryv+0x384>)
 8002fc0:	6809      	ldr	r1, [r1, #0]
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	4688      	mov	r8, r1
 8002fc6:	4681      	mov	r9, r0
 8002fc8:	ebb2 0408 	subs.w	r4, r2, r8
 8002fcc:	eb63 0509 	sbc.w	r5, r3, r9
 8002fd0:	f242 7310 	movw	r3, #10000	; 0x2710
 8002fd4:	429c      	cmp	r4, r3
 8002fd6:	f175 0300 	sbcs.w	r3, r5, #0
 8002fda:	bf2c      	ite	cs
 8002fdc:	2301      	movcs	r3, #1
 8002fde:	2300      	movcc	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8220 	beq.w	8003428 <_Z10Trajectoryv+0x478>
		TimeStampTraject = micros();
 8002fe8:	f000 ffd2 	bl	8003f90 <_Z6microsv>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4bd0      	ldr	r3, [pc, #832]	; (8003334 <_Z10Trajectoryv+0x384>)
 8002ff2:	601a      	str	r2, [r3, #0]

		Acceleration = 0.5;
 8002ff4:	4bd0      	ldr	r3, [pc, #832]	; (8003338 <_Z10Trajectoryv+0x388>)
 8002ff6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002ffa:	601a      	str	r2, [r3, #0]

		//TimeinS = _micros/10^6;

		////////========<<< Quintic ============///////////
		timeFinal = (abs(Distance)*2)/Velocity;
 8002ffc:	4bcf      	ldr	r3, [pc, #828]	; (800333c <_Z10Trajectoryv+0x38c>)
 8002ffe:	edd3 7a00 	vldr	s15, [r3]
 8003002:	eeb0 0a67 	vmov.f32	s0, s15
 8003006:	f7fd ff79 	bl	8000efc <_ZSt3absf>
 800300a:	eef0 7a40 	vmov.f32	s15, s0
 800300e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003012:	4bcb      	ldr	r3, [pc, #812]	; (8003340 <_Z10Trajectoryv+0x390>)
 8003014:	ed93 7a00 	vldr	s14, [r3]
 8003018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301c:	4bc9      	ldr	r3, [pc, #804]	; (8003344 <_Z10Trajectoryv+0x394>)
 800301e:	edc3 7a00 	vstr	s15, [r3]
//		a0 = Currentpos;
//		a3 = (1/(2*pow(timeFinal,3)))*(20*Distance);
//		a4 = (1/(2*pow(timeFinal,4)))*(30*(Currentpos-Finalposition));
//		a5 = (1/(2*pow(timeFinal,5)))*(12*Distance);

		a0 = Currentpos;
 8003022:	4bc9      	ldr	r3, [pc, #804]	; (8003348 <_Z10Trajectoryv+0x398>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4ac9      	ldr	r2, [pc, #804]	; (800334c <_Z10Trajectoryv+0x39c>)
 8003028:	6013      	str	r3, [r2, #0]
		a3 = ((10*Finalposition)/pow(timeFinal,3))-((10*Currentpos)/pow(timeFinal,3));
 800302a:	4bc9      	ldr	r3, [pc, #804]	; (8003350 <_Z10Trajectoryv+0x3a0>)
 800302c:	edd3 7a00 	vldr	s15, [r3]
 8003030:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003038:	ee17 0a90 	vmov	r0, s15
 800303c:	f7fd fa84 	bl	8000548 <__aeabi_f2d>
 8003040:	4604      	mov	r4, r0
 8003042:	460d      	mov	r5, r1
 8003044:	4bbf      	ldr	r3, [pc, #764]	; (8003344 <_Z10Trajectoryv+0x394>)
 8003046:	edd3 7a00 	vldr	s15, [r3]
 800304a:	2003      	movs	r0, #3
 800304c:	eeb0 0a67 	vmov.f32	s0, s15
 8003050:	f001 fa64 	bl	800451c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003054:	ec53 2b10 	vmov	r2, r3, d0
 8003058:	4620      	mov	r0, r4
 800305a:	4629      	mov	r1, r5
 800305c:	f7fd fbf6 	bl	800084c <__aeabi_ddiv>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4690      	mov	r8, r2
 8003066:	4699      	mov	r9, r3
 8003068:	4bb7      	ldr	r3, [pc, #732]	; (8003348 <_Z10Trajectoryv+0x398>)
 800306a:	edd3 7a00 	vldr	s15, [r3]
 800306e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003076:	ee17 0a90 	vmov	r0, s15
 800307a:	f7fd fa65 	bl	8000548 <__aeabi_f2d>
 800307e:	4604      	mov	r4, r0
 8003080:	460d      	mov	r5, r1
 8003082:	4bb0      	ldr	r3, [pc, #704]	; (8003344 <_Z10Trajectoryv+0x394>)
 8003084:	edd3 7a00 	vldr	s15, [r3]
 8003088:	2003      	movs	r0, #3
 800308a:	eeb0 0a67 	vmov.f32	s0, s15
 800308e:	f001 fa45 	bl	800451c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003092:	ec53 2b10 	vmov	r2, r3, d0
 8003096:	4620      	mov	r0, r4
 8003098:	4629      	mov	r1, r5
 800309a:	f7fd fbd7 	bl	800084c <__aeabi_ddiv>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4640      	mov	r0, r8
 80030a4:	4649      	mov	r1, r9
 80030a6:	f7fd f8ef 	bl	8000288 <__aeabi_dsub>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	f7fd fd51 	bl	8000b58 <__aeabi_d2f>
 80030b6:	4603      	mov	r3, r0
 80030b8:	4aa6      	ldr	r2, [pc, #664]	; (8003354 <_Z10Trajectoryv+0x3a4>)
 80030ba:	6013      	str	r3, [r2, #0]
		a4 = ((15*Currentpos)/pow(timeFinal,4))-((15*Finalposition)/pow(timeFinal,4));
 80030bc:	4ba2      	ldr	r3, [pc, #648]	; (8003348 <_Z10Trajectoryv+0x398>)
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80030c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ca:	ee17 0a90 	vmov	r0, s15
 80030ce:	f7fd fa3b 	bl	8000548 <__aeabi_f2d>
 80030d2:	4604      	mov	r4, r0
 80030d4:	460d      	mov	r5, r1
 80030d6:	4b9b      	ldr	r3, [pc, #620]	; (8003344 <_Z10Trajectoryv+0x394>)
 80030d8:	edd3 7a00 	vldr	s15, [r3]
 80030dc:	2004      	movs	r0, #4
 80030de:	eeb0 0a67 	vmov.f32	s0, s15
 80030e2:	f001 fa1b 	bl	800451c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80030e6:	ec53 2b10 	vmov	r2, r3, d0
 80030ea:	4620      	mov	r0, r4
 80030ec:	4629      	mov	r1, r5
 80030ee:	f7fd fbad 	bl	800084c <__aeabi_ddiv>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4690      	mov	r8, r2
 80030f8:	4699      	mov	r9, r3
 80030fa:	4b95      	ldr	r3, [pc, #596]	; (8003350 <_Z10Trajectoryv+0x3a0>)
 80030fc:	edd3 7a00 	vldr	s15, [r3]
 8003100:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003108:	ee17 0a90 	vmov	r0, s15
 800310c:	f7fd fa1c 	bl	8000548 <__aeabi_f2d>
 8003110:	4604      	mov	r4, r0
 8003112:	460d      	mov	r5, r1
 8003114:	4b8b      	ldr	r3, [pc, #556]	; (8003344 <_Z10Trajectoryv+0x394>)
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	2004      	movs	r0, #4
 800311c:	eeb0 0a67 	vmov.f32	s0, s15
 8003120:	f001 f9fc 	bl	800451c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003124:	ec53 2b10 	vmov	r2, r3, d0
 8003128:	4620      	mov	r0, r4
 800312a:	4629      	mov	r1, r5
 800312c:	f7fd fb8e 	bl	800084c <__aeabi_ddiv>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4640      	mov	r0, r8
 8003136:	4649      	mov	r1, r9
 8003138:	f7fd f8a6 	bl	8000288 <__aeabi_dsub>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	f7fd fd08 	bl	8000b58 <__aeabi_d2f>
 8003148:	4603      	mov	r3, r0
 800314a:	4a83      	ldr	r2, [pc, #524]	; (8003358 <_Z10Trajectoryv+0x3a8>)
 800314c:	6013      	str	r3, [r2, #0]
		a5 = ((6*Finalposition)/pow(timeFinal,5))-((6*Currentpos)/pow(timeFinal,5));
 800314e:	4b80      	ldr	r3, [pc, #512]	; (8003350 <_Z10Trajectoryv+0x3a0>)
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800315c:	ee17 0a90 	vmov	r0, s15
 8003160:	f7fd f9f2 	bl	8000548 <__aeabi_f2d>
 8003164:	4604      	mov	r4, r0
 8003166:	460d      	mov	r5, r1
 8003168:	4b76      	ldr	r3, [pc, #472]	; (8003344 <_Z10Trajectoryv+0x394>)
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	2005      	movs	r0, #5
 8003170:	eeb0 0a67 	vmov.f32	s0, s15
 8003174:	f001 f9d2 	bl	800451c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003178:	ec53 2b10 	vmov	r2, r3, d0
 800317c:	4620      	mov	r0, r4
 800317e:	4629      	mov	r1, r5
 8003180:	f7fd fb64 	bl	800084c <__aeabi_ddiv>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4690      	mov	r8, r2
 800318a:	4699      	mov	r9, r3
 800318c:	4b6e      	ldr	r3, [pc, #440]	; (8003348 <_Z10Trajectoryv+0x398>)
 800318e:	edd3 7a00 	vldr	s15, [r3]
 8003192:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800319a:	ee17 0a90 	vmov	r0, s15
 800319e:	f7fd f9d3 	bl	8000548 <__aeabi_f2d>
 80031a2:	4604      	mov	r4, r0
 80031a4:	460d      	mov	r5, r1
 80031a6:	4b67      	ldr	r3, [pc, #412]	; (8003344 <_Z10Trajectoryv+0x394>)
 80031a8:	edd3 7a00 	vldr	s15, [r3]
 80031ac:	2005      	movs	r0, #5
 80031ae:	eeb0 0a67 	vmov.f32	s0, s15
 80031b2:	f001 f9b3 	bl	800451c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80031b6:	ec53 2b10 	vmov	r2, r3, d0
 80031ba:	4620      	mov	r0, r4
 80031bc:	4629      	mov	r1, r5
 80031be:	f7fd fb45 	bl	800084c <__aeabi_ddiv>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4640      	mov	r0, r8
 80031c8:	4649      	mov	r1, r9
 80031ca:	f7fd f85d 	bl	8000288 <__aeabi_dsub>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	f7fd fcbf 	bl	8000b58 <__aeabi_d2f>
 80031da:	4603      	mov	r3, r0
 80031dc:	4a5f      	ldr	r2, [pc, #380]	; (800335c <_Z10Trajectoryv+0x3ac>)
 80031de:	6013      	str	r3, [r2, #0]

		if(TimeinS < timeFinal){
 80031e0:	4b5f      	ldr	r3, [pc, #380]	; (8003360 <_Z10Trajectoryv+0x3b0>)
 80031e2:	ed93 7a00 	vldr	s14, [r3]
 80031e6:	4b57      	ldr	r3, [pc, #348]	; (8003344 <_Z10Trajectoryv+0x394>)
 80031e8:	edd3 7a00 	vldr	s15, [r3]
 80031ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f4:	f140 80f6 	bpl.w	80033e4 <_Z10Trajectoryv+0x434>
			OutPosition = a0+(a3*pow(TimeinS,3))+(a4*pow(TimeinS,4))+(a5*pow(TimeinS,5)) ;//+ Currentpos
 80031f8:	4b54      	ldr	r3, [pc, #336]	; (800334c <_Z10Trajectoryv+0x39c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd f9a3 	bl	8000548 <__aeabi_f2d>
 8003202:	4604      	mov	r4, r0
 8003204:	460d      	mov	r5, r1
 8003206:	4b53      	ldr	r3, [pc, #332]	; (8003354 <_Z10Trajectoryv+0x3a4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd f99c 	bl	8000548 <__aeabi_f2d>
 8003210:	4680      	mov	r8, r0
 8003212:	4689      	mov	r9, r1
 8003214:	4b52      	ldr	r3, [pc, #328]	; (8003360 <_Z10Trajectoryv+0x3b0>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	2003      	movs	r0, #3
 800321c:	eeb0 0a67 	vmov.f32	s0, s15
 8003220:	f001 f97c 	bl	800451c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003224:	ec53 2b10 	vmov	r2, r3, d0
 8003228:	4640      	mov	r0, r8
 800322a:	4649      	mov	r1, r9
 800322c:	f7fd f9e4 	bl	80005f8 <__aeabi_dmul>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4620      	mov	r0, r4
 8003236:	4629      	mov	r1, r5
 8003238:	f7fd f828 	bl	800028c <__adddf3>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4690      	mov	r8, r2
 8003242:	4699      	mov	r9, r3
 8003244:	4b44      	ldr	r3, [pc, #272]	; (8003358 <_Z10Trajectoryv+0x3a8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd f97d 	bl	8000548 <__aeabi_f2d>
 800324e:	4604      	mov	r4, r0
 8003250:	460d      	mov	r5, r1
 8003252:	4b43      	ldr	r3, [pc, #268]	; (8003360 <_Z10Trajectoryv+0x3b0>)
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	2004      	movs	r0, #4
 800325a:	eeb0 0a67 	vmov.f32	s0, s15
 800325e:	f001 f95d 	bl	800451c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003262:	ec53 2b10 	vmov	r2, r3, d0
 8003266:	4620      	mov	r0, r4
 8003268:	4629      	mov	r1, r5
 800326a:	f7fd f9c5 	bl	80005f8 <__aeabi_dmul>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4640      	mov	r0, r8
 8003274:	4649      	mov	r1, r9
 8003276:	f7fd f809 	bl	800028c <__adddf3>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4690      	mov	r8, r2
 8003280:	4699      	mov	r9, r3
 8003282:	4b36      	ldr	r3, [pc, #216]	; (800335c <_Z10Trajectoryv+0x3ac>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd f95e 	bl	8000548 <__aeabi_f2d>
 800328c:	4604      	mov	r4, r0
 800328e:	460d      	mov	r5, r1
 8003290:	4b33      	ldr	r3, [pc, #204]	; (8003360 <_Z10Trajectoryv+0x3b0>)
 8003292:	edd3 7a00 	vldr	s15, [r3]
 8003296:	2005      	movs	r0, #5
 8003298:	eeb0 0a67 	vmov.f32	s0, s15
 800329c:	f001 f93e 	bl	800451c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80032a0:	ec53 2b10 	vmov	r2, r3, d0
 80032a4:	4620      	mov	r0, r4
 80032a6:	4629      	mov	r1, r5
 80032a8:	f7fd f9a6 	bl	80005f8 <__aeabi_dmul>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4640      	mov	r0, r8
 80032b2:	4649      	mov	r1, r9
 80032b4:	f7fc ffea 	bl	800028c <__adddf3>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	f7fd fc4a 	bl	8000b58 <__aeabi_d2f>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4a27      	ldr	r2, [pc, #156]	; (8003364 <_Z10Trajectoryv+0x3b4>)
 80032c8:	6013      	str	r3, [r2, #0]
			OutVelocity = (3*a3*pow(TimeinS,2))+(4*a4*pow(TimeinS,3))+(5*a5*pow(TimeinS,4));
 80032ca:	4b22      	ldr	r3, [pc, #136]	; (8003354 <_Z10Trajectoryv+0x3a4>)
 80032cc:	edd3 7a00 	vldr	s15, [r3]
 80032d0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80032d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d8:	ee17 0a90 	vmov	r0, s15
 80032dc:	f7fd f934 	bl	8000548 <__aeabi_f2d>
 80032e0:	4604      	mov	r4, r0
 80032e2:	460d      	mov	r5, r1
 80032e4:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <_Z10Trajectoryv+0x3b0>)
 80032e6:	edd3 7a00 	vldr	s15, [r3]
 80032ea:	2002      	movs	r0, #2
 80032ec:	eeb0 0a67 	vmov.f32	s0, s15
 80032f0:	f001 f914 	bl	800451c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80032f4:	ec53 2b10 	vmov	r2, r3, d0
 80032f8:	4620      	mov	r0, r4
 80032fa:	4629      	mov	r1, r5
 80032fc:	f7fd f97c 	bl	80005f8 <__aeabi_dmul>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4690      	mov	r8, r2
 8003306:	4699      	mov	r9, r3
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <_Z10Trajectoryv+0x3a8>)
 800330a:	edd3 7a00 	vldr	s15, [r3]
 800330e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003316:	ee17 0a90 	vmov	r0, s15
 800331a:	f7fd f915 	bl	8000548 <__aeabi_f2d>
 800331e:	4604      	mov	r4, r0
 8003320:	460d      	mov	r5, r1
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <_Z10Trajectoryv+0x3b0>)
 8003324:	edd3 7a00 	vldr	s15, [r3]
 8003328:	2003      	movs	r0, #3
 800332a:	eeb0 0a67 	vmov.f32	s0, s15
 800332e:	f001 f8f5 	bl	800451c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003332:	e019      	b.n	8003368 <_Z10Trajectoryv+0x3b8>
 8003334:	200005b4 	.word	0x200005b4
 8003338:	20000594 	.word	0x20000594
 800333c:	2000058c 	.word	0x2000058c
 8003340:	20000590 	.word	0x20000590
 8003344:	200005a4 	.word	0x200005a4
 8003348:	200005ac 	.word	0x200005ac
 800334c:	200005b8 	.word	0x200005b8
 8003350:	20000588 	.word	0x20000588
 8003354:	200005bc 	.word	0x200005bc
 8003358:	200005c0 	.word	0x200005c0
 800335c:	200005c4 	.word	0x200005c4
 8003360:	200005a8 	.word	0x200005a8
 8003364:	20000598 	.word	0x20000598
 8003368:	ec53 2b10 	vmov	r2, r3, d0
 800336c:	4620      	mov	r0, r4
 800336e:	4629      	mov	r1, r5
 8003370:	f7fd f942 	bl	80005f8 <__aeabi_dmul>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4640      	mov	r0, r8
 800337a:	4649      	mov	r1, r9
 800337c:	f7fc ff86 	bl	800028c <__adddf3>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4690      	mov	r8, r2
 8003386:	4699      	mov	r9, r3
 8003388:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <_Z10Trajectoryv+0x488>)
 800338a:	edd3 7a00 	vldr	s15, [r3]
 800338e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003396:	ee17 0a90 	vmov	r0, s15
 800339a:	f7fd f8d5 	bl	8000548 <__aeabi_f2d>
 800339e:	4604      	mov	r4, r0
 80033a0:	460d      	mov	r5, r1
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <_Z10Trajectoryv+0x48c>)
 80033a4:	edd3 7a00 	vldr	s15, [r3]
 80033a8:	2004      	movs	r0, #4
 80033aa:	eeb0 0a67 	vmov.f32	s0, s15
 80033ae:	f001 f8b5 	bl	800451c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80033b2:	ec53 2b10 	vmov	r2, r3, d0
 80033b6:	4620      	mov	r0, r4
 80033b8:	4629      	mov	r1, r5
 80033ba:	f7fd f91d 	bl	80005f8 <__aeabi_dmul>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4640      	mov	r0, r8
 80033c4:	4649      	mov	r1, r9
 80033c6:	f7fc ff61 	bl	800028c <__adddf3>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	f7fd fbc1 	bl	8000b58 <__aeabi_d2f>
 80033d6:	4603      	mov	r3, r0
 80033d8:	4a19      	ldr	r2, [pc, #100]	; (8003440 <_Z10Trajectoryv+0x490>)
 80033da:	6013      	str	r3, [r2, #0]
			ch = 1;
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <_Z10Trajectoryv+0x494>)
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e00e      	b.n	8003402 <_Z10Trajectoryv+0x452>

		}else {
			OutPosition = Finalposition ; //+ Currentpos
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <_Z10Trajectoryv+0x498>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a18      	ldr	r2, [pc, #96]	; (800344c <_Z10Trajectoryv+0x49c>)
 80033ea:	6013      	str	r3, [r2, #0]
			OutVelocity = 0;
 80033ec:	4b14      	ldr	r3, [pc, #80]	; (8003440 <_Z10Trajectoryv+0x490>)
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
			OutAcceleration = 0;
 80033f4:	4b16      	ldr	r3, [pc, #88]	; (8003450 <_Z10Trajectoryv+0x4a0>)
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
			ch = 4;
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <_Z10Trajectoryv+0x494>)
 80033fe:	2204      	movs	r2, #4
 8003400:	701a      	strb	r2, [r3, #0]
//		    //Acceleration= -0.5;   // recieve frol UART (negative)
//		    check = 100;
//		}
		////////=======>>> Tapezoidal==========//////////

		TimeinS = TimeinS + Dt;
 8003402:	4b0e      	ldr	r3, [pc, #56]	; (800343c <_Z10Trajectoryv+0x48c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fd f89e 	bl	8000548 <__aeabi_f2d>
 800340c:	a308      	add	r3, pc, #32	; (adr r3, 8003430 <_Z10Trajectoryv+0x480>)
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	f7fc ff3b 	bl	800028c <__adddf3>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	f7fd fb9b 	bl	8000b58 <__aeabi_d2f>
 8003422:	4603      	mov	r3, r0
 8003424:	4a05      	ldr	r2, [pc, #20]	; (800343c <_Z10Trajectoryv+0x48c>)
 8003426:	6013      	str	r3, [r2, #0]

		//OutVelocity = 0.523598775 ;
		}
}
 8003428:	bf00      	nop
 800342a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800342e:	bf00      	nop
 8003430:	47ae147b 	.word	0x47ae147b
 8003434:	3f847ae1 	.word	0x3f847ae1
 8003438:	200005c4 	.word	0x200005c4
 800343c:	200005a8 	.word	0x200005a8
 8003440:	2000059c 	.word	0x2000059c
 8003444:	20000744 	.word	0x20000744
 8003448:	20000588 	.word	0x20000588
 800344c:	20000598 	.word	0x20000598
 8003450:	200005a0 	.word	0x200005a0
 8003454:	00000000 	.word	0x00000000

08003458 <_Z10Unwrappingv>:

//////////////////////// [Unwrapping] ///////////////////////
void Unwrapping(){
 8003458:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800345c:	af00      	add	r7, sp, #0

	if(micros() - TimeUnwrap >= 10000){
 800345e:	f000 fd97 	bl	8003f90 <_Z6microsv>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	494c      	ldr	r1, [pc, #304]	; (8003598 <_Z10Unwrappingv+0x140>)
 8003468:	6809      	ldr	r1, [r1, #0]
 800346a:	2000      	movs	r0, #0
 800346c:	4688      	mov	r8, r1
 800346e:	4681      	mov	r9, r0
 8003470:	ebb2 0408 	subs.w	r4, r2, r8
 8003474:	eb63 0509 	sbc.w	r5, r3, r9
 8003478:	f242 7310 	movw	r3, #10000	; 0x2710
 800347c:	429c      	cmp	r4, r3
 800347e:	f175 0300 	sbcs.w	r3, r5, #0
 8003482:	bf2c      	ite	cs
 8003484:	2301      	movcs	r3, #1
 8003486:	2300      	movcc	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d07c      	beq.n	8003588 <_Z10Unwrappingv+0x130>
		TimeUnwrap = micros();
 800348e:	f000 fd7f 	bl	8003f90 <_Z6microsv>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4b40      	ldr	r3, [pc, #256]	; (8003598 <_Z10Unwrappingv+0x140>)
 8003498:	601a      	str	r2, [r3, #0]
		Pn = BinPosXI * 0.006136;
 800349a:	4b40      	ldr	r3, [pc, #256]	; (800359c <_Z10Unwrappingv+0x144>)
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd f840 	bl	8000524 <__aeabi_i2d>
 80034a4:	a33a      	add	r3, pc, #232	; (adr r3, 8003590 <_Z10Unwrappingv+0x138>)
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	f7fd f8a5 	bl	80005f8 <__aeabi_dmul>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	f7fd fb4f 	bl	8000b58 <__aeabi_d2f>
 80034ba:	4603      	mov	r3, r0
 80034bc:	4a38      	ldr	r2, [pc, #224]	; (80035a0 <_Z10Unwrappingv+0x148>)
 80034be:	6013      	str	r3, [r2, #0]
		if(Pn-P_n <= -1*e){
 80034c0:	4b37      	ldr	r3, [pc, #220]	; (80035a0 <_Z10Unwrappingv+0x148>)
 80034c2:	ed93 7a00 	vldr	s14, [r3]
 80034c6:	4b37      	ldr	r3, [pc, #220]	; (80035a4 <_Z10Unwrappingv+0x14c>)
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034d0:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <_Z10Unwrappingv+0x150>)
 80034d2:	edd3 7a00 	vldr	s15, [r3]
 80034d6:	eef1 7a67 	vneg.f32	s15, s15
 80034da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e2:	d80b      	bhi.n	80034fc <_Z10Unwrappingv+0xa4>
			P0 = P_0 + P_max;
 80034e4:	4b31      	ldr	r3, [pc, #196]	; (80035ac <_Z10Unwrappingv+0x154>)
 80034e6:	ed93 7a00 	vldr	s14, [r3]
 80034ea:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <_Z10Unwrappingv+0x158>)
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f4:	4b2f      	ldr	r3, [pc, #188]	; (80035b4 <_Z10Unwrappingv+0x15c>)
 80034f6:	edc3 7a00 	vstr	s15, [r3]
 80034fa:	e01f      	b.n	800353c <_Z10Unwrappingv+0xe4>
		}
		else if(Pn - P_n >= e){
 80034fc:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <_Z10Unwrappingv+0x148>)
 80034fe:	ed93 7a00 	vldr	s14, [r3]
 8003502:	4b28      	ldr	r3, [pc, #160]	; (80035a4 <_Z10Unwrappingv+0x14c>)
 8003504:	edd3 7a00 	vldr	s15, [r3]
 8003508:	ee37 7a67 	vsub.f32	s14, s14, s15
 800350c:	4b26      	ldr	r3, [pc, #152]	; (80035a8 <_Z10Unwrappingv+0x150>)
 800350e:	edd3 7a00 	vldr	s15, [r3]
 8003512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351a:	db0b      	blt.n	8003534 <_Z10Unwrappingv+0xdc>
			P0 = P_0 - P_max;
 800351c:	4b23      	ldr	r3, [pc, #140]	; (80035ac <_Z10Unwrappingv+0x154>)
 800351e:	ed93 7a00 	vldr	s14, [r3]
 8003522:	4b23      	ldr	r3, [pc, #140]	; (80035b0 <_Z10Unwrappingv+0x158>)
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352c:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <_Z10Unwrappingv+0x15c>)
 800352e:	edc3 7a00 	vstr	s15, [r3]
 8003532:	e003      	b.n	800353c <_Z10Unwrappingv+0xe4>
		}
		else{
			P0 = P_0;
 8003534:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <_Z10Unwrappingv+0x154>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <_Z10Unwrappingv+0x15c>)
 800353a:	6013      	str	r3, [r2, #0]
		}

		OutUnwrap = Pn + P0;
 800353c:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <_Z10Unwrappingv+0x148>)
 800353e:	ed93 7a00 	vldr	s14, [r3]
 8003542:	4b1c      	ldr	r3, [pc, #112]	; (80035b4 <_Z10Unwrappingv+0x15c>)
 8003544:	edd3 7a00 	vldr	s15, [r3]
 8003548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800354c:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <_Z10Unwrappingv+0x160>)
 800354e:	edc3 7a00 	vstr	s15, [r3]
		CurrentEn = BinPosXI * 0.006136;
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <_Z10Unwrappingv+0x144>)
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fc ffe4 	bl	8000524 <__aeabi_i2d>
 800355c:	a30c      	add	r3, pc, #48	; (adr r3, 8003590 <_Z10Unwrappingv+0x138>)
 800355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003562:	f7fd f849 	bl	80005f8 <__aeabi_dmul>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4610      	mov	r0, r2
 800356c:	4619      	mov	r1, r3
 800356e:	f7fd faf3 	bl	8000b58 <__aeabi_d2f>
 8003572:	4603      	mov	r3, r0
 8003574:	4a11      	ldr	r2, [pc, #68]	; (80035bc <_Z10Unwrappingv+0x164>)
 8003576:	6013      	str	r3, [r2, #0]
		P_n = Pn;
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <_Z10Unwrappingv+0x148>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <_Z10Unwrappingv+0x14c>)
 800357e:	6013      	str	r3, [r2, #0]
		P_0 = P0;
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <_Z10Unwrappingv+0x15c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a09      	ldr	r2, [pc, #36]	; (80035ac <_Z10Unwrappingv+0x154>)
 8003586:	6013      	str	r3, [r2, #0]
	}
}
 8003588:	bf00      	nop
 800358a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800358e:	bf00      	nop
 8003590:	f540895d 	.word	0xf540895d
 8003594:	3f79220f 	.word	0x3f79220f
 8003598:	200006fc 	.word	0x200006fc
 800359c:	20000578 	.word	0x20000578
 80035a0:	200006ec 	.word	0x200006ec
 80035a4:	200006f0 	.word	0x200006f0
 80035a8:	2000019c 	.word	0x2000019c
 80035ac:	200006e8 	.word	0x200006e8
 80035b0:	20000198 	.word	0x20000198
 80035b4:	200006e4 	.word	0x200006e4
 80035b8:	200006f4 	.word	0x200006f4
 80035bc:	200006f8 	.word	0x200006f8

080035c0 <_Z12Kalmanfilterv>:
	}
}


/////////////////////////// [Kalman Filter] ///////////////////////
void Kalmanfilter(){
 80035c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035c4:	b0d2      	sub	sp, #328	; 0x148
 80035c6:	af00      	add	r7, sp, #0

	if(micros() - TimeStampKalman >= 10000){
 80035c8:	f000 fce2 	bl	8003f90 <_Z6microsv>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4992      	ldr	r1, [pc, #584]	; (800381c <_Z12Kalmanfilterv+0x25c>)
 80035d2:	6809      	ldr	r1, [r1, #0]
 80035d4:	2000      	movs	r0, #0
 80035d6:	4688      	mov	r8, r1
 80035d8:	4681      	mov	r9, r0
 80035da:	ebb2 0408 	subs.w	r4, r2, r8
 80035de:	eb63 0509 	sbc.w	r5, r3, r9
 80035e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80035e6:	429c      	cmp	r4, r3
 80035e8:	f175 0300 	sbcs.w	r3, r5, #0
 80035ec:	bf2c      	ite	cs
 80035ee:	2301      	movcs	r3, #1
 80035f0:	2300      	movcc	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 810a 	beq.w	800380e <_Z12Kalmanfilterv+0x24e>
		 TimeStampKalman = micros();
 80035fa:	f000 fcc9 	bl	8003f90 <_Z6microsv>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4b86      	ldr	r3, [pc, #536]	; (800381c <_Z12Kalmanfilterv+0x25c>)
 8003604:	601a      	str	r2, [r3, #0]
	//if(millis() - TimeStampKalman >= 10){
	//	TimeStampKalman = millis();
		 ////////// Predict ////////////////////
		 Q = G*Q1*G.transpose();
 8003606:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800360a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800360e:	4a84      	ldr	r2, [pc, #528]	; (8003820 <_Z12Kalmanfilterv+0x260>)
 8003610:	4984      	ldr	r1, [pc, #528]	; (8003824 <_Z12Kalmanfilterv+0x264>)
 8003612:	4618      	mov	r0, r3
 8003614:	f000 ffb5 	bl	8004582 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>
 8003618:	4882      	ldr	r0, [pc, #520]	; (8003824 <_Z12Kalmanfilterv+0x264>)
 800361a:	f000 ffeb 	bl	80045f4 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>
 800361e:	4602      	mov	r2, r0
 8003620:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003624:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800362e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003632:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003636:	f107 0114 	add.w	r1, r7, #20
 800363a:	4618      	mov	r0, r3
 800363c:	f001 f80c 	bl	8004658 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>
 8003640:	463b      	mov	r3, r7
 8003642:	4619      	mov	r1, r3
 8003644:	4878      	ldr	r0, [pc, #480]	; (8003828 <_Z12Kalmanfilterv+0x268>)
 8003646:	f001 f81e 	bl	8004686 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X = A*X1 ;
 800364a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800364e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003652:	4a76      	ldr	r2, [pc, #472]	; (800382c <_Z12Kalmanfilterv+0x26c>)
 8003654:	4976      	ldr	r1, [pc, #472]	; (8003830 <_Z12Kalmanfilterv+0x270>)
 8003656:	4618      	mov	r0, r3
 8003658:	f001 f824 	bl	80046a4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 800365c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003660:	4619      	mov	r1, r3
 8003662:	4874      	ldr	r0, [pc, #464]	; (8003834 <_Z12Kalmanfilterv+0x274>)
 8003664:	f001 f835 	bl	80046d2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 P = A*O*A.transpose()+Q;
 8003668:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800366c:	4a72      	ldr	r2, [pc, #456]	; (8003838 <_Z12Kalmanfilterv+0x278>)
 800366e:	4970      	ldr	r1, [pc, #448]	; (8003830 <_Z12Kalmanfilterv+0x270>)
 8003670:	4618      	mov	r0, r3
 8003672:	f001 f83d 	bl	80046f0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>
 8003676:	486e      	ldr	r0, [pc, #440]	; (8003830 <_Z12Kalmanfilterv+0x270>)
 8003678:	f001 f851 	bl	800471e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>
 800367c:	4603      	mov	r3, r0
 800367e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003680:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003688:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800368c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003690:	4618      	mov	r0, r3
 8003692:	f001 f857 	bl	8004744 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>
 8003696:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800369a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800369e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80036a2:	4a61      	ldr	r2, [pc, #388]	; (8003828 <_Z12Kalmanfilterv+0x268>)
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 f864 	bl	8004772 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>
 80036aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036ae:	4619      	mov	r1, r3
 80036b0:	4862      	ldr	r0, [pc, #392]	; (800383c <_Z12Kalmanfilterv+0x27c>)
 80036b2:	f001 f87c 	bl	80047ae <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>

		 //////////////// Update /////////////////////
	     Z << OutUnwrap ;
 80036b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80036ba:	4a61      	ldr	r2, [pc, #388]	; (8003840 <_Z12Kalmanfilterv+0x280>)
 80036bc:	4961      	ldr	r1, [pc, #388]	; (8003844 <_Z12Kalmanfilterv+0x284>)
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fe54 	bl	800436c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 80036c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fe5e 	bl	800438a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
	//     Z << DiffVelo ;
		 K = (P*C.transpose())*(C*P*C.transpose()+R).inverse();
 80036ce:	485e      	ldr	r0, [pc, #376]	; (8003848 <_Z12Kalmanfilterv+0x288>)
 80036d0:	f001 f87c 	bl	80047cc <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036da:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80036de:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80036e2:	4956      	ldr	r1, [pc, #344]	; (800383c <_Z12Kalmanfilterv+0x27c>)
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 f884 	bl	80047f2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>
 80036ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80036ee:	4a53      	ldr	r2, [pc, #332]	; (800383c <_Z12Kalmanfilterv+0x27c>)
 80036f0:	4955      	ldr	r1, [pc, #340]	; (8003848 <_Z12Kalmanfilterv+0x288>)
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 f894 	bl	8004820 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 80036f8:	4853      	ldr	r0, [pc, #332]	; (8003848 <_Z12Kalmanfilterv+0x288>)
 80036fa:	f001 f867 	bl	80047cc <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 80036fe:	4603      	mov	r3, r0
 8003700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003704:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003708:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800370c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003710:	4618      	mov	r0, r3
 8003712:	f001 f89c 	bl	800484e <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>
 8003716:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800371a:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800371e:	4a4b      	ldr	r2, [pc, #300]	; (800384c <_Z12Kalmanfilterv+0x28c>)
 8003720:	4618      	mov	r0, r3
 8003722:	f001 f8ab 	bl	800487c <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8003726:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800372a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f001 f8fd 	bl	8004930 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>
 8003736:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800373a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800373e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8003742:	4618      	mov	r0, r3
 8003744:	f001 f92c 	bl	80049a0 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>
 8003748:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800374c:	4619      	mov	r1, r3
 800374e:	4840      	ldr	r0, [pc, #256]	; (8003850 <_Z12Kalmanfilterv+0x290>)
 8003750:	f001 f93d 	bl	80049ce <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X1 = X+K*(Z-C*X);
 8003754:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003758:	4a36      	ldr	r2, [pc, #216]	; (8003834 <_Z12Kalmanfilterv+0x274>)
 800375a:	493b      	ldr	r1, [pc, #236]	; (8003848 <_Z12Kalmanfilterv+0x288>)
 800375c:	4618      	mov	r0, r3
 800375e:	f001 f945 	bl	80049ec <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003762:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003766:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800376a:	4936      	ldr	r1, [pc, #216]	; (8003844 <_Z12Kalmanfilterv+0x284>)
 800376c:	4618      	mov	r0, r3
 800376e:	f001 f954 	bl	8004a1a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 8003772:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003776:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800377a:	4935      	ldr	r1, [pc, #212]	; (8003850 <_Z12Kalmanfilterv+0x290>)
 800377c:	4618      	mov	r0, r3
 800377e:	f001 f989 	bl	8004a94 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>
 8003782:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003786:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800378a:	492a      	ldr	r1, [pc, #168]	; (8003834 <_Z12Kalmanfilterv+0x274>)
 800378c:	4618      	mov	r0, r3
 800378e:	f001 f9ae 	bl	8004aee <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>
 8003792:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003796:	4619      	mov	r1, r3
 8003798:	4824      	ldr	r0, [pc, #144]	; (800382c <_Z12Kalmanfilterv+0x26c>)
 800379a:	f001 f9c6 	bl	8004b2a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>
		 O = (I-(K*C))*P;
 800379e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80037a2:	4a29      	ldr	r2, [pc, #164]	; (8003848 <_Z12Kalmanfilterv+0x288>)
 80037a4:	492a      	ldr	r1, [pc, #168]	; (8003850 <_Z12Kalmanfilterv+0x290>)
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 f9ce 	bl	8004b48 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 80037ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037b0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80037b4:	4927      	ldr	r1, [pc, #156]	; (8003854 <_Z12Kalmanfilterv+0x294>)
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 f9dd 	bl	8004b76 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 80037bc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80037c0:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80037c4:	4a1d      	ldr	r2, [pc, #116]	; (800383c <_Z12Kalmanfilterv+0x27c>)
 80037c6:	4618      	mov	r0, r3
 80037c8:	f001 fa12 	bl	8004bf0 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>
 80037cc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80037d0:	4619      	mov	r1, r3
 80037d2:	4819      	ldr	r0, [pc, #100]	; (8003838 <_Z12Kalmanfilterv+0x278>)
 80037d4:	f001 fa23 	bl	8004c1e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>

		 KalP = X(0,0);
 80037d8:	2200      	movs	r2, #0
 80037da:	2100      	movs	r1, #0
 80037dc:	4815      	ldr	r0, [pc, #84]	; (8003834 <_Z12Kalmanfilterv+0x274>)
 80037de:	f000 fe6b 	bl	80044b8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80037e2:	4603      	mov	r3, r0
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <_Z12Kalmanfilterv+0x298>)
 80037e8:	6013      	str	r3, [r2, #0]
		 KalV = X(1,0);
 80037ea:	2200      	movs	r2, #0
 80037ec:	2101      	movs	r1, #1
 80037ee:	4811      	ldr	r0, [pc, #68]	; (8003834 <_Z12Kalmanfilterv+0x274>)
 80037f0:	f000 fe62 	bl	80044b8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80037f4:	4603      	mov	r3, r0
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a18      	ldr	r2, [pc, #96]	; (800385c <_Z12Kalmanfilterv+0x29c>)
 80037fa:	6013      	str	r3, [r2, #0]
		 KalA = X(2,0);
 80037fc:	2200      	movs	r2, #0
 80037fe:	2102      	movs	r1, #2
 8003800:	480c      	ldr	r0, [pc, #48]	; (8003834 <_Z12Kalmanfilterv+0x274>)
 8003802:	f000 fe59 	bl	80044b8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003806:	4603      	mov	r3, r0
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a15      	ldr	r2, [pc, #84]	; (8003860 <_Z12Kalmanfilterv+0x2a0>)
 800380c:	6013      	str	r3, [r2, #0]
		 //runtime = micros()-TimeStampKalman;

	     //ErrPos[0] = TargetDeg - BinPosXI*0.006136;
	 }

}
 800380e:	bf00      	nop
 8003810:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8003814:	46bd      	mov	sp, r7
 8003816:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800381a:	bf00      	nop
 800381c:	200005c8 	.word	0x200005c8
 8003820:	20000194 	.word	0x20000194
 8003824:	20000684 	.word	0x20000684
 8003828:	20000690 	.word	0x20000690
 800382c:	200006c0 	.word	0x200006c0
 8003830:	200005cc 	.word	0x200005cc
 8003834:	200006b4 	.word	0x200006b4
 8003838:	20000614 	.word	0x20000614
 800383c:	200005f0 	.word	0x200005f0
 8003840:	200006f4 	.word	0x200006f4
 8003844:	20000668 	.word	0x20000668
 8003848:	20000678 	.word	0x20000678
 800384c:	20000660 	.word	0x20000660
 8003850:	2000066c 	.word	0x2000066c
 8003854:	20000638 	.word	0x20000638
 8003858:	200006d8 	.word	0x200006d8
 800385c:	200006dc 	.word	0x200006dc
 8003860:	200006e0 	.word	0x200006e0

08003864 <_Z11PIDPositionv>:

///////////////////// [PID cat cat Zero] /////////////////////////////
void PIDPosition(){
 8003864:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003868:	af00      	add	r7, sp, #0
	/*CrrntTime = micros();
	//DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
	PreviTime = CrrntTime; // log previ here for next loop
	*/
	if(micros() - TimeStampPID_P >= 10000){
 800386a:	f000 fb91 	bl	8003f90 <_Z6microsv>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4936      	ldr	r1, [pc, #216]	; (800394c <_Z11PIDPositionv+0xe8>)
 8003874:	6809      	ldr	r1, [r1, #0]
 8003876:	2000      	movs	r0, #0
 8003878:	4688      	mov	r8, r1
 800387a:	4681      	mov	r9, r0
 800387c:	ebb2 0408 	subs.w	r4, r2, r8
 8003880:	eb63 0509 	sbc.w	r5, r3, r9
 8003884:	f242 7310 	movw	r3, #10000	; 0x2710
 8003888:	429c      	cmp	r4, r3
 800388a:	f175 0300 	sbcs.w	r3, r5, #0
 800388e:	bf2c      	ite	cs
 8003890:	2301      	movcs	r3, #1
 8003892:	2300      	movcc	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d055      	beq.n	8003946 <_Z11PIDPositionv+0xe2>
		TimeStampPID_P = micros();
 800389a:	f000 fb79 	bl	8003f90 <_Z6microsv>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4b2a      	ldr	r3, [pc, #168]	; (800394c <_Z11PIDPositionv+0xe8>)
 80038a4:	601a      	str	r2, [r3, #0]

	//if(millis() - TimeStampPID_P >= 10){
	//	TimeStampPID_P = millis();

		ErrPos[0] = OutPosition - KalP;
 80038a6:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <_Z11PIDPositionv+0xec>)
 80038a8:	ed93 7a00 	vldr	s14, [r3]
 80038ac:	4b29      	ldr	r3, [pc, #164]	; (8003954 <_Z11PIDPositionv+0xf0>)
 80038ae:	edd3 7a00 	vldr	s15, [r3]
 80038b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038b6:	4b28      	ldr	r3, [pc, #160]	; (8003958 <_Z11PIDPositionv+0xf4>)
 80038b8:	edc3 7a00 	vstr	s15, [r3]
	//	ErrPos[0] = OutVelocity - KalV;
		sumError = sumError + ErrPos[0];
 80038bc:	4b26      	ldr	r3, [pc, #152]	; (8003958 <_Z11PIDPositionv+0xf4>)
 80038be:	ed93 7a00 	vldr	s14, [r3]
 80038c2:	4b26      	ldr	r3, [pc, #152]	; (800395c <_Z11PIDPositionv+0xf8>)
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038cc:	4b23      	ldr	r3, [pc, #140]	; (800395c <_Z11PIDPositionv+0xf8>)
 80038ce:	edc3 7a00 	vstr	s15, [r3]

		Propo = K_P * ErrPos[0];
 80038d2:	4b21      	ldr	r3, [pc, #132]	; (8003958 <_Z11PIDPositionv+0xf4>)
 80038d4:	ed93 7a00 	vldr	s14, [r3]
 80038d8:	4b21      	ldr	r3, [pc, #132]	; (8003960 <_Z11PIDPositionv+0xfc>)
 80038da:	edd3 7a00 	vldr	s15, [r3]
 80038de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <_Z11PIDPositionv+0x100>)
 80038e4:	edc3 7a00 	vstr	s15, [r3]

		Integral = K_I * sumError; // Integral -Newton-Leibniz
 80038e8:	4b1f      	ldr	r3, [pc, #124]	; (8003968 <_Z11PIDPositionv+0x104>)
 80038ea:	ed93 7a00 	vldr	s14, [r3]
 80038ee:	4b1b      	ldr	r3, [pc, #108]	; (800395c <_Z11PIDPositionv+0xf8>)
 80038f0:	edd3 7a00 	vldr	s15, [r3]
 80038f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f8:	4b1c      	ldr	r3, [pc, #112]	; (800396c <_Z11PIDPositionv+0x108>)
 80038fa:	edc3 7a00 	vstr	s15, [r3]

		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 80038fe:	4b16      	ldr	r3, [pc, #88]	; (8003958 <_Z11PIDPositionv+0xf4>)
 8003900:	ed93 7a00 	vldr	s14, [r3]
 8003904:	4b14      	ldr	r3, [pc, #80]	; (8003958 <_Z11PIDPositionv+0xf4>)
 8003906:	edd3 7a01 	vldr	s15, [r3, #4]
 800390a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800390e:	4b18      	ldr	r3, [pc, #96]	; (8003970 <_Z11PIDPositionv+0x10c>)
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003918:	4b16      	ldr	r3, [pc, #88]	; (8003974 <_Z11PIDPositionv+0x110>)
 800391a:	edc3 7a00 	vstr	s15, [r3]

		ufromposit = Propo + Integral + Derivate;
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <_Z11PIDPositionv+0x100>)
 8003920:	ed93 7a00 	vldr	s14, [r3]
 8003924:	4b11      	ldr	r3, [pc, #68]	; (800396c <_Z11PIDPositionv+0x108>)
 8003926:	edd3 7a00 	vldr	s15, [r3]
 800392a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <_Z11PIDPositionv+0x110>)
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <_Z11PIDPositionv+0x114>)
 800393a:	edc3 7a00 	vstr	s15, [r3]

		//u_contr = ufromposit ;
		ErrPos[1] = ErrPos[0]; // log previous error
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <_Z11PIDPositionv+0xf4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a05      	ldr	r2, [pc, #20]	; (8003958 <_Z11PIDPositionv+0xf4>)
 8003944:	6053      	str	r3, [r2, #4]
	}
}
 8003946:	bf00      	nop
 8003948:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800394c:	20000700 	.word	0x20000700
 8003950:	20000598 	.word	0x20000598
 8003954:	200006d8 	.word	0x200006d8
 8003958:	20000708 	.word	0x20000708
 800395c:	20000714 	.word	0x20000714
 8003960:	200001a0 	.word	0x200001a0
 8003964:	2000071c 	.word	0x2000071c
 8003968:	20000718 	.word	0x20000718
 800396c:	20000720 	.word	0x20000720
 8003970:	200001a4 	.word	0x200001a4
 8003974:	20000724 	.word	0x20000724
 8003978:	20000710 	.word	0x20000710

0800397c <_Z11PIDVelocityv>:

void PIDVelocity(){
 800397c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003980:	af00      	add	r7, sp, #0

	if(micros() - TimeStampPID_V >= 10000){
 8003982:	f000 fb05 	bl	8003f90 <_Z6microsv>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4930      	ldr	r1, [pc, #192]	; (8003a4c <_Z11PIDVelocityv+0xd0>)
 800398c:	6809      	ldr	r1, [r1, #0]
 800398e:	2000      	movs	r0, #0
 8003990:	4688      	mov	r8, r1
 8003992:	4681      	mov	r9, r0
 8003994:	ebb2 0408 	subs.w	r4, r2, r8
 8003998:	eb63 0509 	sbc.w	r5, r3, r9
 800399c:	f242 7310 	movw	r3, #10000	; 0x2710
 80039a0:	429c      	cmp	r4, r3
 80039a2:	f175 0300 	sbcs.w	r3, r5, #0
 80039a6:	bf2c      	ite	cs
 80039a8:	2301      	movcs	r3, #1
 80039aa:	2300      	movcc	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d048      	beq.n	8003a44 <_Z11PIDVelocityv+0xc8>
		TimeStampPID_V = micros();
 80039b2:	f000 faed 	bl	8003f90 <_Z6microsv>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4b24      	ldr	r3, [pc, #144]	; (8003a4c <_Z11PIDVelocityv+0xd0>)
 80039bc:	601a      	str	r2, [r3, #0]
		Vcontr[1] = Vcontr[0] ;
		ErrVelo[2] = ErrVelo[1] ;
		ErrVelo[1] = ErrVelo[0] ;
		*/

		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <_Z11PIDVelocityv+0xd4>)
 80039c0:	ed93 7a00 	vldr	s14, [r3]
 80039c4:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <_Z11PIDVelocityv+0xd8>)
 80039c6:	edd3 7a00 	vldr	s15, [r3]
 80039ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039ce:	4b22      	ldr	r3, [pc, #136]	; (8003a58 <_Z11PIDVelocityv+0xdc>)
 80039d0:	edd3 7a00 	vldr	s15, [r3]
 80039d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d8:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <_Z11PIDVelocityv+0xe0>)
 80039da:	edc3 7a00 	vstr	s15, [r3]
		SumAll = SumAll + ErrVelo[0];
 80039de:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <_Z11PIDVelocityv+0xe0>)
 80039e0:	ed93 7a00 	vldr	s14, [r3]
 80039e4:	4b1e      	ldr	r3, [pc, #120]	; (8003a60 <_Z11PIDVelocityv+0xe4>)
 80039e6:	edd3 7a00 	vldr	s15, [r3]
 80039ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ee:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <_Z11PIDVelocityv+0xe4>)
 80039f0:	edc3 7a00 	vstr	s15, [r3]

		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 80039f4:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <_Z11PIDVelocityv+0xe0>)
 80039f6:	ed93 7a00 	vldr	s14, [r3]
 80039fa:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <_Z11PIDVelocityv+0xe8>)
 80039fc:	edd3 7a00 	vldr	s15, [r3]
 8003a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a04:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <_Z11PIDVelocityv+0xec>)
 8003a06:	edd3 6a00 	vldr	s13, [r3]
 8003a0a:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <_Z11PIDVelocityv+0xe4>)
 8003a0c:	edd3 7a00 	vldr	s15, [r3]
 8003a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a18:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <_Z11PIDVelocityv+0xe0>)
 8003a1a:	edd3 6a00 	vldr	s13, [r3]
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <_Z11PIDVelocityv+0xe0>)
 8003a20:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003a28:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <_Z11PIDVelocityv+0xf0>)
 8003a2a:	edd3 7a00 	vldr	s15, [r3]
 8003a2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a36:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <_Z11PIDVelocityv+0xf4>)
 8003a38:	edc3 7a00 	vstr	s15, [r3]
		ErrVelo[1] = ErrVelo[0]; // log previous error
 8003a3c:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <_Z11PIDVelocityv+0xe0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a06      	ldr	r2, [pc, #24]	; (8003a5c <_Z11PIDVelocityv+0xe0>)
 8003a42:	6053      	str	r3, [r2, #4]
		}
}
 8003a44:	bf00      	nop
 8003a46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000738 	.word	0x20000738
 8003a50:	2000059c 	.word	0x2000059c
 8003a54:	20000710 	.word	0x20000710
 8003a58:	200006dc 	.word	0x200006dc
 8003a5c:	20000728 	.word	0x20000728
 8003a60:	20000734 	.word	0x20000734
 8003a64:	200001a8 	.word	0x200001a8
 8003a68:	200001ac 	.word	0x200001ac
 8003a6c:	200001a4 	.word	0x200001a4
 8003a70:	2000073c 	.word	0x2000073c
 8003a74:	00000000 	.word	0x00000000

08003a78 <_Z11controlloopv>:

void controlloop(){
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0

	if( abs( Finalposition - KalP) < 0.005 && abs(KalV) < 0.0005){
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <_Z11controlloopv+0xb0>)
 8003a7e:	ed93 7a00 	vldr	s14, [r3]
 8003a82:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <_Z11controlloopv+0xb4>)
 8003a84:	edd3 7a00 	vldr	s15, [r3]
 8003a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a90:	f7fd fa34 	bl	8000efc <_ZSt3absf>
 8003a94:	ee10 3a10 	vmov	r3, s0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fc fd55 	bl	8000548 <__aeabi_f2d>
 8003a9e:	a31e      	add	r3, pc, #120	; (adr r3, 8003b18 <_Z11controlloopv+0xa0>)
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f7fd f81a 	bl	8000adc <__aeabi_dcmplt>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d015      	beq.n	8003ada <_Z11controlloopv+0x62>
 8003aae:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <_Z11controlloopv+0xb8>)
 8003ab0:	edd3 7a00 	vldr	s15, [r3]
 8003ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab8:	f7fd fa20 	bl	8000efc <_ZSt3absf>
 8003abc:	ee10 3a10 	vmov	r3, s0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fc fd41 	bl	8000548 <__aeabi_f2d>
 8003ac6:	a316      	add	r3, pc, #88	; (adr r3, 8003b20 <_Z11controlloopv+0xa8>)
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f7fd f806 	bl	8000adc <__aeabi_dcmplt>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <_Z11controlloopv+0x62>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <_Z11controlloopv+0x64>
 8003ada:	2300      	movs	r3, #0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d010      	beq.n	8003b02 <_Z11controlloopv+0x8a>
		PWMOut = 0;
 8003ae0:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <_Z11controlloopv+0xbc>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	801a      	strh	r2, [r3, #0]
		check = 8;
 8003ae6:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <_Z11controlloopv+0xc0>)
 8003ae8:	2208      	movs	r2, #8
 8003aea:	701a      	strb	r2, [r3, #0]

		flagNewpos = 0;
 8003aec:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <_Z11controlloopv+0xc4>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
		flag_finishTra = 1;
 8003af2:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <_Z11controlloopv+0xc8>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
		TimeinS = 0;
 8003af8:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <_Z11controlloopv+0xcc>)
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
	else{
		PIDPosition();
		PIDVelocity();
		MotDrvCytron();
	}
}
 8003b00:	e005      	b.n	8003b0e <_Z11controlloopv+0x96>
		PIDPosition();
 8003b02:	f7ff feaf 	bl	8003864 <_Z11PIDPositionv>
		PIDVelocity();
 8003b06:	f7ff ff39 	bl	800397c <_Z11PIDVelocityv>
		MotDrvCytron();
 8003b0a:	f000 f81d 	bl	8003b48 <_Z12MotDrvCytronv>
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	f3af 8000 	nop.w
 8003b18:	47ae147b 	.word	0x47ae147b
 8003b1c:	3f747ae1 	.word	0x3f747ae1
 8003b20:	d2f1a9fc 	.word	0xd2f1a9fc
 8003b24:	3f40624d 	.word	0x3f40624d
 8003b28:	20000588 	.word	0x20000588
 8003b2c:	200006d8 	.word	0x200006d8
 8003b30:	200006dc 	.word	0x200006dc
 8003b34:	2000057c 	.word	0x2000057c
 8003b38:	20000745 	.word	0x20000745
 8003b3c:	200005b0 	.word	0x200005b0
 8003b40:	2000050c 	.word	0x2000050c
 8003b44:	200005a8 	.word	0x200005a8

08003b48 <_Z12MotDrvCytronv>:


void MotDrvCytron(){
 8003b48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b4c:	af00      	add	r7, sp, #0
	//   direction chk
	//if(u_contr > 0){mot_dirctn= 0;}
	//else if(u_contr < 0) {mot_dirctn = 1;}
	//else{PWMOut = 0;}

	if(micros() - TimeDrive >= 10000){
 8003b4e:	f000 fa1f 	bl	8003f90 <_Z6microsv>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4932      	ldr	r1, [pc, #200]	; (8003c20 <_Z12MotDrvCytronv+0xd8>)
 8003b58:	6809      	ldr	r1, [r1, #0]
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	4688      	mov	r8, r1
 8003b5e:	4681      	mov	r9, r0
 8003b60:	ebb2 0408 	subs.w	r4, r2, r8
 8003b64:	eb63 0509 	sbc.w	r5, r3, r9
 8003b68:	f242 7310 	movw	r3, #10000	; 0x2710
 8003b6c:	429c      	cmp	r4, r3
 8003b6e:	f175 0300 	sbcs.w	r3, r5, #0
 8003b72:	bf2c      	ite	cs
 8003b74:	2301      	movcs	r3, #1
 8003b76:	2300      	movcc	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d049      	beq.n	8003c12 <_Z12MotDrvCytronv+0xca>
			TimeDrive = micros();
 8003b7e:	f000 fa07 	bl	8003f90 <_Z6microsv>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <_Z12MotDrvCytronv+0xd8>)
 8003b88:	601a      	str	r2, [r3, #0]
			u_contr = u_contr * 833.3;
 8003b8a:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <_Z12MotDrvCytronv+0xdc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fc fcda 	bl	8000548 <__aeabi_f2d>
 8003b94:	a320      	add	r3, pc, #128	; (adr r3, 8003c18 <_Z12MotDrvCytronv+0xd0>)
 8003b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9a:	f7fc fd2d 	bl	80005f8 <__aeabi_dmul>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f7fc ffd7 	bl	8000b58 <__aeabi_d2f>
 8003baa:	4603      	mov	r3, r0
 8003bac:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <_Z12MotDrvCytronv+0xdc>)
 8003bae:	6013      	str	r3, [r2, #0]
			// u_contr = 2500;
			if(u_contr > 0){
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <_Z12MotDrvCytronv+0xdc>)
 8003bb2:	edd3 7a00 	vldr	s15, [r3]
 8003bb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bbe:	dd03      	ble.n	8003bc8 <_Z12MotDrvCytronv+0x80>
				mot_dirctn= 1;
 8003bc0:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <_Z12MotDrvCytronv+0xe0>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	e00e      	b.n	8003be6 <_Z12MotDrvCytronv+0x9e>
			}
			else if(u_contr < 0) {
 8003bc8:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <_Z12MotDrvCytronv+0xdc>)
 8003bca:	edd3 7a00 	vldr	s15, [r3]
 8003bce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd6:	d503      	bpl.n	8003be0 <_Z12MotDrvCytronv+0x98>
				mot_dirctn = 0;
 8003bd8:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <_Z12MotDrvCytronv+0xe0>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	e002      	b.n	8003be6 <_Z12MotDrvCytronv+0x9e>
			}
			else{
				PWMOut = 0;
 8003be0:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <_Z12MotDrvCytronv+0xe4>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	801a      	strh	r2, [r3, #0]
			}
	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 8003be6:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <_Z12MotDrvCytronv+0xdc>)
 8003be8:	edd3 7a00 	vldr	s15, [r3]
 8003bec:	eef0 7ae7 	vabs.f32	s15, s15
 8003bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bf4:	ee17 3a90 	vmov	r3, s15
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <_Z12MotDrvCytronv+0xe4>)
 8003bfc:	801a      	strh	r2, [r3, #0]
	if(PWMOut > 5000){PWMOut = 5000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <_Z12MotDrvCytronv+0xe4>)
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d903      	bls.n	8003c12 <_Z12MotDrvCytronv+0xca>
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <_Z12MotDrvCytronv+0xe4>)
 8003c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c10:	801a      	strh	r2, [r3, #0]
	//if(PWMOut < 1600 ){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
	//&& fabsf(ErrPos[0]) >= 4
	//if(flag_finishTra == 1){PWMOut = 0;}
	}
}
 8003c12:	bf00      	nop
 8003c14:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c18:	66666666 	.word	0x66666666
 8003c1c:	408a0a66 	.word	0x408a0a66
 8003c20:	20000740 	.word	0x20000740
 8003c24:	2000073c 	.word	0x2000073c
 8003c28:	20000584 	.word	0x20000584
 8003c2c:	2000057c 	.word	0x2000057c

08003c30 <_Z13GraytoBinarioth>:

///////////////////// [Abs Encoder I2C] ////////////////////////////////////////////
////////// [Absolute Encoder] ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	460a      	mov	r2, r1
 8003c3a:	80fb      	strh	r3, [r7, #6]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 8003c44:	88fa      	ldrh	r2, [r7, #6]
 8003c46:	797b      	ldrb	r3, [r7, #5]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	fa42 f303 	asr.w	r3, r2, r3
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 8003c56:	2301      	movs	r3, #1
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	797b      	ldrb	r3, [r7, #5]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	da1e      	bge.n	8003ca0 <_Z13GraytoBinarioth+0x70>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 8003c62:	8afb      	ldrh	r3, [r7, #22]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 8003c6a:	88fa      	ldrh	r2, [r7, #6]
 8003c6c:	7979      	ldrb	r1, [r7, #5]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	3301      	adds	r3, #1
 8003c72:	1acb      	subs	r3, r1, r3
 8003c74:	fa42 f303 	asr.w	r3, r2, r3
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d103      	bne.n	8003c8e <_Z13GraytoBinarioth+0x5e>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 8003c86:	8afb      	ldrh	r3, [r7, #22]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	82fb      	strh	r3, [r7, #22]
 8003c8c:	e004      	b.n	8003c98 <_Z13GraytoBinarioth+0x68>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8003c8e:	8afb      	ldrh	r3, [r7, #22]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3301      	adds	r3, #1
 8003c96:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	e7dc      	b.n	8003c5a <_Z13GraytoBinarioth+0x2a>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 8003ca0:	8afb      	ldrh	r3, [r7, #22]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <_Z14IOExpenderInitv>:

void IOExpenderInit() {// call when start system
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Xetting,
 8003cb6:	2364      	movs	r3, #100	; 0x64
 8003cb8:	9302      	str	r3, [sp, #8]
 8003cba:	2316      	movs	r3, #22
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <_Z14IOExpenderInitv+0x24>)
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2140      	movs	r1, #64	; 0x40
 8003cc8:	4803      	ldr	r0, [pc, #12]	; (8003cd8 <_Z14IOExpenderInitv+0x28>)
 8003cca:	f013 fcbf 	bl	801764c <HAL_I2C_Mem_Write>
			0x16, 100);

}
 8003cce:	bf00      	nop
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	200001cc 	.word	0x200001cc
 8003cd8:	2000027c 	.word	0x2000027c

08003cdc <_Z14AbsEncI2CReadxPh>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af04      	add	r7, sp, #16
 8003ce2:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8003ce4:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <_Z14AbsEncI2CReadxPh+0x98>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <_Z14AbsEncI2CReadxPh+0x20>
 8003cec:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <_Z14AbsEncI2CReadxPh+0x9c>)
 8003cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d101      	bne.n	8003cfc <_Z14AbsEncI2CReadxPh+0x20>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <_Z14AbsEncI2CReadxPh+0x22>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d033      	beq.n	8003d6a <_Z14AbsEncI2CReadxPh+0x8e>

		HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 8003d02:	2364      	movs	r3, #100	; 0x64
 8003d04:	9302      	str	r3, [sp, #8]
 8003d06:	2302      	movs	r3, #2
 8003d08:	9301      	str	r3, [sp, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	2301      	movs	r3, #1
 8003d10:	2212      	movs	r2, #18
 8003d12:	2140      	movs	r1, #64	; 0x40
 8003d14:	4818      	ldr	r0, [pc, #96]	; (8003d78 <_Z14AbsEncI2CReadxPh+0x9c>)
 8003d16:	f013 fd93 	bl	8017840 <HAL_I2C_Mem_Read>
								RawRAB, 2, 100);

		GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8003d1a:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <_Z14AbsEncI2CReadxPh+0xa0>)
 8003d1c:	785b      	ldrb	r3, [r3, #1]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	b21a      	sxth	r2, r3
 8003d22:	4b16      	ldr	r3, [pc, #88]	; (8003d7c <_Z14AbsEncI2CReadxPh+0xa0>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b21b      	sxth	r3, r3
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	b21b      	sxth	r3, r3
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003d30:	801a      	strh	r2, [r3, #0]
		// 1023- to reverse
		BinPosXI = 1023 - (GraytoBinario(GrayCBitXI, 10) + POSOFFSET) ;//
 8003d32:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <_Z14AbsEncI2CReadxPh+0xa4>)
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	210a      	movs	r1, #10
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff79 	bl	8003c30 <_Z13GraytoBinarioth>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f5c3 638c 	rsb	r3, r3, #1120	; 0x460
 8003d44:	3303      	adds	r3, #3
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <_Z14AbsEncI2CReadxPh+0xa8>)
 8003d4a:	801a      	strh	r2, [r3, #0]
		if (BinPosXI >= 1024){BinPosXI %= 1024;}
 8003d4c:	4b0d      	ldr	r3, [pc, #52]	; (8003d84 <_Z14AbsEncI2CReadxPh+0xa8>)
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d54:	d306      	bcc.n	8003d64 <_Z14AbsEncI2CReadxPh+0x88>
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <_Z14AbsEncI2CReadxPh+0xa8>)
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <_Z14AbsEncI2CReadxPh+0xa8>)
 8003d62:	801a      	strh	r2, [r3, #0]

		flag_absenc = 0;
 8003d64:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <_Z14AbsEncI2CReadxPh+0x98>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
//			flag_absenc = 0;
//		break;
//
//		}
	}
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	2000057a 	.word	0x2000057a
 8003d78:	2000027c 	.word	0x2000027c
 8003d7c:	20000574 	.word	0x20000574
 8003d80:	20000576 	.word	0x20000576
 8003d84:	20000578 	.word	0x20000578

08003d88 <_Z13Efft_activatev>:

/////////////////////// [End Effector] //////////////////////////////////

void Efft_activate(){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 8003d8e:	2345      	movs	r3, #69	; 0x45
 8003d90:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;


	switch(efshoot){
 8003d92:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <_Z13Efft_activatev+0xa0>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d025      	beq.n	8003de6 <_Z13Efft_activatev+0x5e>
	default:
	case ef_INIT:
		if(flag_efftDis == 1){
 8003d9a:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <_Z13Efft_activatev+0xa4>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d106      	bne.n	8003db0 <_Z13Efft_activatev+0x28>
			flag_efftActi = 0;
 8003da2:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <_Z13Efft_activatev+0xa8>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
			efshoot = ef_INIT;
 8003da8:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <_Z13Efft_activatev+0xa0>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	701a      	strb	r2, [r3, #0]
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
			}
		}
	break;
 8003dae:	e034      	b.n	8003e1a <_Z13Efft_activatev+0x92>
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8003db0:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <_Z13Efft_activatev+0xa8>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <_Z13Efft_activatev+0x40>
 8003db8:	4b1e      	ldr	r3, [pc, #120]	; (8003e34 <_Z13Efft_activatev+0xac>)
 8003dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d101      	bne.n	8003dc8 <_Z13Efft_activatev+0x40>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <_Z13Efft_activatev+0x42>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d025      	beq.n	8003e1a <_Z13Efft_activatev+0x92>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 8003dce:	1dfa      	adds	r2, r7, #7
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	2146      	movs	r1, #70	; 0x46
 8003dd8:	4816      	ldr	r0, [pc, #88]	; (8003e34 <_Z13Efft_activatev+0xac>)
 8003dda:	f013 ff57 	bl	8017c8c <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_shoot;
 8003dde:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <_Z13Efft_activatev+0xa0>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
	break;
 8003de4:	e019      	b.n	8003e1a <_Z13Efft_activatev+0x92>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 8003de6:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <_Z13Efft_activatev+0xac>)
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	bf0c      	ite	eq
 8003df2:	2301      	moveq	r3, #1
 8003df4:	2300      	movne	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d010      	beq.n	8003e1e <_Z13Efft_activatev+0x96>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 8003dfc:	1dfa      	adds	r2, r7, #7
 8003dfe:	2320      	movs	r3, #32
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	2301      	movs	r3, #1
 8003e04:	2146      	movs	r1, #70	; 0x46
 8003e06:	480b      	ldr	r0, [pc, #44]	; (8003e34 <_Z13Efft_activatev+0xac>)
 8003e08:	f013 ff40 	bl	8017c8c <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <_Z13Efft_activatev+0xa0>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 8003e12:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <_Z13Efft_activatev+0xa8>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
			//trig_efftRead = 1;
		}
	break;
 8003e18:	e001      	b.n	8003e1e <_Z13Efft_activatev+0x96>
	break;
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <_Z13Efft_activatev+0x98>
	break;
 8003e1e:	bf00      	nop
	}
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	200007ef 	.word	0x200007ef
 8003e2c:	200001b0 	.word	0x200001b0
 8003e30:	20000747 	.word	0x20000747
 8003e34:	200002d0 	.word	0x200002d0

08003e38 <_Z9Efft_readPh>:

void Efft_read(uint8_t *Rddata){
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	6078      	str	r0, [r7, #4]
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	static uint8_t efrdStatus = 0;
	switch(efrdStatus){
 8003e40:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <_Z9Efft_readPh+0x88>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d01a      	beq.n	8003e7e <_Z9Efft_readPh+0x46>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8003e48:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <_Z9Efft_readPh+0x8c>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d007      	beq.n	8003e60 <_Z9Efft_readPh+0x28>
 8003e50:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <_Z9Efft_readPh+0x90>)
 8003e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d101      	bne.n	8003e60 <_Z9Efft_readPh+0x28>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <_Z9Efft_readPh+0x2a>
 8003e60:	2300      	movs	r3, #0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d025      	beq.n	8003eb2 <_Z9Efft_readPh+0x7a>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 8003e66:	2302      	movs	r3, #2
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	4a17      	ldr	r2, [pc, #92]	; (8003ecc <_Z9Efft_readPh+0x94>)
 8003e6e:	2146      	movs	r1, #70	; 0x46
 8003e70:	4815      	ldr	r0, [pc, #84]	; (8003ec8 <_Z9Efft_readPh+0x90>)
 8003e72:	f013 ff0b 	bl	8017c8c <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <_Z9Efft_readPh+0x88>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003e7c:	e019      	b.n	8003eb2 <_Z9Efft_readPh+0x7a>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 8003e7e:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <_Z9Efft_readPh+0x90>)
 8003e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	bf0c      	ite	eq
 8003e8a:	2301      	moveq	r3, #1
 8003e8c:	2300      	movne	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d010      	beq.n	8003eb6 <_Z9Efft_readPh+0x7e>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 8003e94:	2320      	movs	r3, #32
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	2301      	movs	r3, #1
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	2146      	movs	r1, #70	; 0x46
 8003e9e:	480a      	ldr	r0, [pc, #40]	; (8003ec8 <_Z9Efft_readPh+0x90>)
 8003ea0:	f013 ffba 	bl	8017e18 <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 8003ea4:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <_Z9Efft_readPh+0x8c>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 8003eaa:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <_Z9Efft_readPh+0x88>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]
			}
	break;
 8003eb0:	e001      	b.n	8003eb6 <_Z9Efft_readPh+0x7e>
	break;
 8003eb2:	bf00      	nop
 8003eb4:	e000      	b.n	8003eb8 <_Z9Efft_readPh+0x80>
	break;
 8003eb6:	bf00      	nop
	}

}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	200007f0 	.word	0x200007f0
 8003ec4:	20000748 	.word	0x20000748
 8003ec8:	200002d0 	.word	0x200002d0
 8003ecc:	200001e2 	.word	0x200001e2

08003ed0 <HAL_GPIO_EXTI_Callback>:

/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	80fb      	strh	r3, [r7, #6]
	//============// EMER ////=====================
	if(GPIO_Pin == GPIO_PIN_11){
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee0:	d108      	bne.n	8003ef4 <HAL_GPIO_EXTI_Callback+0x24>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		grandState = emer;
 8003ee2:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <HAL_GPIO_EXTI_Callback+0xb0>)
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 8003ee8:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <HAL_GPIO_EXTI_Callback+0xb4>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 8003eee:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <HAL_GPIO_EXTI_Callback+0xb8>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//=============// Stop ////======================
	if(GPIO_Pin == GPIO_PIN_10){
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efa:	d110      	bne.n	8003f1e <HAL_GPIO_EXTI_Callback+0x4e>
		PWMOut = 0;
 8003efc:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <HAL_GPIO_EXTI_Callback+0xb8>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 8003f02:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <HAL_GPIO_EXTI_Callback+0xb4>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <HAL_GPIO_EXTI_Callback+0xb0>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d103      	bne.n	8003f18 <HAL_GPIO_EXTI_Callback+0x48>
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_GPIO_EXTI_Callback+0xb0>)
 8003f12:	2204      	movs	r2, #4
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e002      	b.n	8003f1e <HAL_GPIO_EXTI_Callback+0x4e>
		else{grandState = stop;}
 8003f18:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_GPIO_EXTI_Callback+0xb0>)
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	701a      	strb	r2, [r3, #0]

		}
	//=========// work Blue button //=========//
	if(GPIO_Pin == GPIO_PIN_13){
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f24:	d120      	bne.n	8003f68 <HAL_GPIO_EXTI_Callback+0x98>
		bluecounter++;
 8003f26:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <HAL_GPIO_EXTI_Callback+0xb4>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <HAL_GPIO_EXTI_Callback+0xb4>)
 8003f30:	701a      	strb	r2, [r3, #0]

		////===== Zero Calibrate Func /////////////
		if (bluecounter % 2 == 0){
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <HAL_GPIO_EXTI_Callback+0xb4>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d111      	bne.n	8003f62 <HAL_GPIO_EXTI_Callback+0x92>
			PWMOut = 1100;
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <HAL_GPIO_EXTI_Callback+0xb8>)
 8003f40:	f240 424c 	movw	r2, #1100	; 0x44c
 8003f44:	801a      	strh	r2, [r3, #0]
			mot_dirctn++; mot_dirctn%=2;
 8003f46:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <HAL_GPIO_EXTI_Callback+0xbc>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <HAL_GPIO_EXTI_Callback+0xbc>)
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <HAL_GPIO_EXTI_Callback+0xbc>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_GPIO_EXTI_Callback+0xbc>)
 8003f5e:	701a      	strb	r2, [r3, #0]
 8003f60:	e002      	b.n	8003f68 <HAL_GPIO_EXTI_Callback+0x98>

		}else{PWMOut = 0;}
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <HAL_GPIO_EXTI_Callback+0xb8>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	801a      	strh	r2, [r3, #0]
		//flag_efftActi = 1;
		//trig_efftRead = 1;
	}

	//=============// setzero //================//
		if(GPIO_Pin == GPIO_PIN_2){
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d102      	bne.n	8003f74 <HAL_GPIO_EXTI_Callback+0xa4>
//			position_order = 0;
//			positionlog[position_order] = 0.00; // 0.000613 - 0.0122 => 1-2/1024
//			Velocity = 7.0;
			grandState = SetZeroBf;
 8003f6e:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <HAL_GPIO_EXTI_Callback+0xb0>)
 8003f70:	2206      	movs	r2, #6
 8003f72:	701a      	strb	r2, [r3, #0]
		}
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	20000502 	.word	0x20000502
 8003f84:	20000704 	.word	0x20000704
 8003f88:	2000057c 	.word	0x2000057c
 8003f8c:	20000584 	.word	0x20000584

08003f90 <_Z6microsv>:

///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 8003f90:	b4b0      	push	{r4, r5, r7}
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <_Z6microsv+0x2c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <_Z6microsv+0x30>)
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	1884      	adds	r4, r0, r2
 8003fa8:	eb41 0503 	adc.w	r5, r1, r3
 8003fac:	4622      	mov	r2, r4
 8003fae:	462b      	mov	r3, r5
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bcb0      	pop	{r4, r5, r7}
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	200003b4 	.word	0x200003b4
 8003fc0:	20000510 	.word	0x20000510

08003fc4 <_Z6millisv>:
uint32_t millis()
{return _millis;}// + htim10.Instance->CNT
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <_Z6millisv+0x14>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000518 	.word	0x20000518

08003fdc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003fdc:	b4b0      	push	{r4, r5, r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a0e      	ldr	r2, [pc, #56]	; (8004020 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10a      	bne.n	8004002 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8003fec:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ff6:	1854      	adds	r4, r2, r1
 8003ff8:	f143 0500 	adc.w	r5, r3, #0
 8003ffc:	4b09      	ldr	r3, [pc, #36]	; (8004024 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003ffe:	e9c3 4500 	strd	r4, r5, [r3]
 if(htim == &htim10)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a08      	ldr	r2, [pc, #32]	; (8004028 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d104      	bne.n	8004014 <HAL_TIM_PeriodElapsedCallback+0x38>
 {_millis++;}
 800400a:	4b08      	ldr	r3, [pc, #32]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3301      	adds	r3, #1
 8004010:	4a06      	ldr	r2, [pc, #24]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004012:	6013      	str	r3, [r2, #0]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bcb0      	pop	{r4, r5, r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	200003b4 	.word	0x200003b4
 8004024:	20000510 	.word	0x20000510
 8004028:	2000036c 	.word	0x2000036c
 800402c:	20000518 	.word	0x20000518

08004030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004034:	b672      	cpsid	i
}
 8004036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004038:	e7fe      	b.n	8004038 <Error_Handler+0x8>

0800403a <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	bf00      	nop
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 800407c:	b5b0      	push	{r4, r5, r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fdd8 	bl	8004c3c <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 800408c:	4604      	mov	r4, r0
 800408e:	f107 030c 	add.w	r3, r7, #12
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fddd 	bl	8004c52 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 8004098:	f107 020c 	add.w	r2, r7, #12
 800409c:	f107 0308 	add.w	r3, r7, #8
 80040a0:	4621      	mov	r1, r4
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fde0 	bl	8004c68 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 80040a8:	bf00      	nop
 80040aa:	4628      	mov	r0, r5
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bdb0      	pop	{r4, r5, r7, pc}

080040b2 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>:
#endif

// Suppresses 'unused variable' warnings.
namespace Eigen {
  namespace internal {
    template<typename T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void ignore_unused_variable(const T&) {}
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>:
      * a matrix to 0 is not supported.
      *
      * \sa resize(Index,Index)
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Matrix() : Base()
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fde2 	bl	8004c9a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
    {
      Base::_check_template_params();
 80040d6:	f000 fdf0 	bl	8004cba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>:
    Matrix() : Base()
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fdf6 	bl	8004ce0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 80040f4:	f000 fe04 	bl	8004d00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
    }
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>:
    Matrix() : Base()
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fe0a 	bl	8004d26 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8004112:	f000 fe18 	bl	8004d46 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
    }
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>:
    Matrix() : Base()
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fe1e 	bl	8004d6c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8004130:	f000 fe2c 	bl	8004d8c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
    }
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>:
  * \note According the c++ standard, the argument expressions of this comma initializer are evaluated in arbitrary order.
  *
  * \sa CommaInitializer::finished(), class CommaInitializer
  */
template<typename Derived>
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
{
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 fe24 	bl	8004d9c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>
}
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
    finished();
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fe59 	bl	8004e1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>
  }
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8004174:	b590      	push	{r4, r7, lr}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689c      	ldr	r4, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fe7e 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800418c:	4603      	mov	r3, r0
 800418e:	429c      	cmp	r4, r3
 8004190:	bf0c      	ite	eq
 8004192:	2301      	moveq	r3, #1
 8004194:	2300      	movne	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01d      	beq.n	80041d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	441a      	add	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685c      	ldr	r4, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fe6d 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80041c4:	4603      	mov	r3, r0
 80041c6:	429c      	cmp	r4, r3
 80041c8:	db05      	blt.n	80041d6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x62>
 80041ca:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xcc>)
 80041cc:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 80041ce:	2148      	movs	r1, #72	; 0x48
 80041d0:	481d      	ldr	r0, [pc, #116]	; (8004248 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 80041d2:	f019 fd5b 	bl	801dc8c <__assert_func>
 80041d6:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689c      	ldr	r4, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fe51 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80041e6:	4603      	mov	r3, r0
 80041e8:	429c      	cmp	r4, r3
 80041ea:	db05      	blt.n	80041f8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x84>
 80041ec:	4b17      	ldr	r3, [pc, #92]	; (800424c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd8>)
 80041ee:	4a15      	ldr	r2, [pc, #84]	; (8004244 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 80041f0:	214b      	movs	r1, #75	; 0x4b
 80041f2:	4815      	ldr	r0, [pc, #84]	; (8004248 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 80041f4:	f019 fd4a 	bl	801dc8c <__assert_func>
 80041f8:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d005      	beq.n	800420e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x9a>
 8004202:	4b13      	ldr	r3, [pc, #76]	; (8004250 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xdc>)
 8004204:	4a0f      	ldr	r2, [pc, #60]	; (8004244 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8004206:	214d      	movs	r1, #77	; 0x4d
 8004208:	480f      	ldr	r0, [pc, #60]	; (8004248 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 800420a:	f019 fd3f 	bl	801dc8c <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461c      	mov	r4, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6858      	ldr	r0, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	1c59      	adds	r1, r3, #1
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6091      	str	r1, [r2, #8]
 8004222:	461a      	mov	r2, r3
 8004224:	4601      	mov	r1, r0
 8004226:	4620      	mov	r0, r4
 8004228:	f000 fe44 	bl	8004eb4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 800422c:	4602      	mov	r2, r0
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6013      	str	r3, [r2, #0]
    return *this;
 8004234:	687b      	ldr	r3, [r7, #4]
  }
 8004236:	4618      	mov	r0, r3
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	bd90      	pop	{r4, r7, pc}
 800423e:	bf00      	nop
 8004240:	0801ed08 	.word	0x0801ed08
 8004244:	0801ed58 	.word	0x0801ed58
 8004248:	0801ee1c 	.word	0x0801ee1c
 800424c:	0801ee78 	.word	0x0801ee78
 8004250:	0801eed0 	.word	0x0801eed0

08004254 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fe3f 	bl	8004ee8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>
}
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
    finished();
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fe74 	bl	8004f68 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>
  }
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689c      	ldr	r4, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fe98 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80042a4:	4603      	mov	r3, r0
 80042a6:	429c      	cmp	r4, r3
 80042a8:	bf0c      	ite	eq
 80042aa:	2301      	moveq	r3, #1
 80042ac:	2300      	movne	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01d      	beq.n	80042f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	441a      	add	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685c      	ldr	r4, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fe87 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80042dc:	4603      	mov	r3, r0
 80042de:	429c      	cmp	r4, r3
 80042e0:	db05      	blt.n	80042ee <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x62>
 80042e2:	4b1d      	ldr	r3, [pc, #116]	; (8004358 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xcc>)
 80042e4:	4a1d      	ldr	r2, [pc, #116]	; (800435c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 80042e6:	2148      	movs	r1, #72	; 0x48
 80042e8:	481d      	ldr	r0, [pc, #116]	; (8004360 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 80042ea:	f019 fccf 	bl	801dc8c <__assert_func>
 80042ee:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689c      	ldr	r4, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fe6b 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80042fe:	4603      	mov	r3, r0
 8004300:	429c      	cmp	r4, r3
 8004302:	db05      	blt.n	8004310 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x84>
 8004304:	4b17      	ldr	r3, [pc, #92]	; (8004364 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd8>)
 8004306:	4a15      	ldr	r2, [pc, #84]	; (800435c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8004308:	214b      	movs	r1, #75	; 0x4b
 800430a:	4815      	ldr	r0, [pc, #84]	; (8004360 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 800430c:	f019 fcbe 	bl	801dc8c <__assert_func>
 8004310:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d005      	beq.n	8004326 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x9a>
 800431a:	4b13      	ldr	r3, [pc, #76]	; (8004368 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xdc>)
 800431c:	4a0f      	ldr	r2, [pc, #60]	; (800435c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 800431e:	214d      	movs	r1, #77	; 0x4d
 8004320:	480f      	ldr	r0, [pc, #60]	; (8004360 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8004322:	f019 fcb3 	bl	801dc8c <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461c      	mov	r4, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6858      	ldr	r0, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	1c59      	adds	r1, r3, #1
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6091      	str	r1, [r2, #8]
 800433a:	461a      	mov	r2, r3
 800433c:	4601      	mov	r1, r0
 800433e:	4620      	mov	r0, r4
 8004340:	f000 fe5e 	bl	8005000 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8004344:	4602      	mov	r2, r0
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6013      	str	r3, [r2, #0]
    return *this;
 800434c:	687b      	ldr	r3, [r7, #4]
  }
 800434e:	4618      	mov	r0, r3
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	bd90      	pop	{r4, r7, pc}
 8004356:	bf00      	nop
 8004358:	0801ed08 	.word	0x0801ed08
 800435c:	0801eee8 	.word	0x0801eee8
 8004360:	0801ee1c 	.word	0x0801ee1c
 8004364:	0801ee78 	.word	0x0801ee78
 8004368:	0801eed0 	.word	0x0801eed0

0800436c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fe59 	bl	8005034 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>
}
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
    finished();
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fe8e 	bl	80050b4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>
  }
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 feb4 	bl	8005120 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>
}
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
    finished();
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fee9 	bl	80051a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>
  }
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4618      	mov	r0, r3
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689c      	ldr	r4, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 ff0e 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80043f0:	4603      	mov	r3, r0
 80043f2:	429c      	cmp	r4, r3
 80043f4:	bf0c      	ite	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	2300      	movne	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01d      	beq.n	800443c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	441a      	add	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	605a      	str	r2, [r3, #4]
      m_col = 0;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685c      	ldr	r4, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fefd 	bl	8005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8004428:	4603      	mov	r3, r0
 800442a:	429c      	cmp	r4, r3
 800442c:	db05      	blt.n	800443a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x62>
 800442e:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xcc>)
 8004430:	4a1d      	ldr	r2, [pc, #116]	; (80044a8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8004432:	2148      	movs	r1, #72	; 0x48
 8004434:	481d      	ldr	r0, [pc, #116]	; (80044ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8004436:	f019 fc29 	bl	801dc8c <__assert_func>
 800443a:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689c      	ldr	r4, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fee1 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800444a:	4603      	mov	r3, r0
 800444c:	429c      	cmp	r4, r3
 800444e:	db05      	blt.n	800445c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x84>
 8004450:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd8>)
 8004452:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8004454:	214b      	movs	r1, #75	; 0x4b
 8004456:	4815      	ldr	r0, [pc, #84]	; (80044ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8004458:	f019 fc18 	bl	801dc8c <__assert_func>
 800445c:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d005      	beq.n	8004472 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x9a>
 8004466:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xdc>)
 8004468:	4a0f      	ldr	r2, [pc, #60]	; (80044a8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 800446a:	214d      	movs	r1, #77	; 0x4d
 800446c:	480f      	ldr	r0, [pc, #60]	; (80044ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 800446e:	f019 fc0d 	bl	801dc8c <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	461c      	mov	r4, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6858      	ldr	r0, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	1c59      	adds	r1, r3, #1
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6091      	str	r1, [r2, #8]
 8004486:	461a      	mov	r2, r3
 8004488:	4601      	mov	r1, r0
 800448a:	4620      	mov	r0, r4
 800448c:	f000 fed4 	bl	8005238 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 8004490:	4602      	mov	r2, r0
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6013      	str	r3, [r2, #0]
    return *this;
 8004498:	687b      	ldr	r3, [r7, #4]
  }
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd90      	pop	{r4, r7, pc}
 80044a2:	bf00      	nop
 80044a4:	0801ed08 	.word	0x0801ed08
 80044a8:	0801efac 	.word	0x0801efac
 80044ac:	0801ee1c 	.word	0x0801ee1c
 80044b0:	0801ee78 	.word	0x0801ee78
 80044b4:	0801eed0 	.word	0x0801eed0

080044b8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>:
      * \sa operator[](Index)
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator()(Index row, Index col)
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
    {
      eigen_assert(row >= 0 && row < rows()
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	db10      	blt.n	80044ec <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fecd 	bl	800526a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	4293      	cmp	r3, r2
 80044d6:	da09      	bge.n	80044ec <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	db06      	blt.n	80044ec <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fed3 	bl	800528a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80044e4:	4602      	mov	r2, r0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4293      	cmp	r3, r2
 80044ea:	db06      	blt.n	80044fa <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x42>
 80044ec:	4b08      	ldr	r3, [pc, #32]	; (8004510 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x58>)
 80044ee:	4a09      	ldr	r2, [pc, #36]	; (8004514 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x5c>)
 80044f0:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80044f4:	4808      	ldr	r0, [pc, #32]	; (8004518 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x60>)
 80044f6:	f019 fbc9 	bl	801dc8c <__assert_func>
          && col >= 0 && col < cols());
      return coeffRef(row, col);
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 feec 	bl	80052dc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>
 8004504:	4603      	mov	r3, r0
    }
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	0801f070 	.word	0x0801f070
 8004514:	0801f0a8 	.word	0x0801f0a8
 8004518:	0801f194 	.word	0x0801f194

0800451c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800451c:	b5b0      	push	{r4, r5, r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	ed87 0a01 	vstr	s0, [r7, #4]
 8004526:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7fc f80d 	bl	8000548 <__aeabi_f2d>
 800452e:	4604      	mov	r4, r0
 8004530:	460d      	mov	r5, r1
 8004532:	6838      	ldr	r0, [r7, #0]
 8004534:	f7fb fff6 	bl	8000524 <__aeabi_i2d>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	ec43 2b11 	vmov	d1, r2, r3
 8004540:	ec45 4b10 	vmov	d0, r4, r5
 8004544:	f018 fc86 	bl	801ce54 <pow>
 8004548:	eeb0 7a40 	vmov.f32	s14, s0
 800454c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8004550:	eeb0 0a47 	vmov.f32	s0, s14
 8004554:	eef0 0a67 	vmov.f32	s1, s15
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bdb0      	pop	{r4, r5, r7, pc}

0800455e <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>:
  * on the behavior of CwiseNullaryOp.
  *
  * \sa class CwiseUnaryOp, class CwiseBinaryOp, DenseBase::NullaryExpr
  */
template<typename NullaryOp, typename PlainObjectType>
class CwiseNullaryOp : public internal::dense_xpr_base< CwiseNullaryOp<NullaryOp, PlainObjectType> >::type, internal::no_assignment_operator
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	1d1a      	adds	r2, r3, #4
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	3304      	adds	r3, #4
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f000 ffae 	bl	80054d4 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>:
  return CwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>(derived(), other.derived(), func);
}


#ifndef EIGEN_PARSED_BY_DOXYGEN
EIGEN_MAKE_SCALAR_BINARY_OP(operator*,product)
 8004582:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004584:	b089      	sub	sp, #36	; 0x24
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	68b8      	ldr	r0, [r7, #8]
 8004590:	f000 fec7 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004594:	4604      	mov	r4, r0
 8004596:	68b8      	ldr	r0, [r7, #8]
 8004598:	f000 fec3 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800459c:	4603      	mov	r3, r0
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fd23 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80045a4:	4605      	mov	r5, r0
 80045a6:	68b8      	ldr	r0, [r7, #8]
 80045a8:	f000 febb 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80045ac:	4603      	mov	r3, r0
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fd10 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80045b4:	4606      	mov	r6, r0
 80045b6:	f107 0318 	add.w	r3, r7, #24
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 febb 	bl	8005338 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>
 80045c2:	f107 0318 	add.w	r3, r7, #24
 80045c6:	f107 0010 	add.w	r0, r7, #16
 80045ca:	4632      	mov	r2, r6
 80045cc:	4629      	mov	r1, r5
 80045ce:	f000 fecf 	bl	8005370 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>
 80045d2:	f107 031c 	add.w	r3, r7, #28
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 ff02 	bl	80053e0 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80045dc:	f107 031c 	add.w	r3, r7, #28
 80045e0:	f107 0210 	add.w	r2, r7, #16
 80045e4:	4621      	mov	r1, r4
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 ff34 	bl	8005454 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	3724      	adds	r7, #36	; 0x24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045f4 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>:
  *
  * \sa transposeInPlace(), adjoint() */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
Transpose<Derived>
DenseBase<Derived>::transpose()
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
{
  return TransposeReturnType(derived());
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 ff85 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004602:	4602      	mov	r2, r0
 8004604:	f107 030c 	add.w	r3, r7, #12
 8004608:	4611      	mov	r1, r2
 800460a:	4618      	mov	r0, r3
 800460c:	f000 ffa1 	bl	8005552 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>
 8004610:	68fb      	ldr	r3, [r7, #12]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>:
  * CwiseBinaryOp types explicitly.
  *
  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
  */
template<typename BinaryOp, typename LhsType, typename RhsType>
class CwiseBinaryOp :
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	1d1a      	adds	r2, r3, #4
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	3304      	adds	r3, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f7ff ff91 	bl	800455e <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f103 020c 	add.w	r2, r3, #12
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	330c      	adds	r3, #12
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f000 ff53 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived, OtherDerived>
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004658:	b590      	push	{r4, r7, lr}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)
#ifdef EIGEN_DEBUG_PRODUCT
  internal::product_type<Derived,OtherDerived>::debug();
#endif

  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004664:	68b8      	ldr	r0, [r7, #8]
 8004666:	f000 ff84 	bl	8005572 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800466a:	4604      	mov	r4, r0
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 ff8b 	bl	8005588 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8004672:	4603      	mov	r3, r0
 8004674:	461a      	mov	r2, r3
 8004676:	4621      	mov	r1, r4
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 ffd1 	bl	8005620 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>
}
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	bd90      	pop	{r4, r7, pc}

08004686 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6839      	ldr	r1, [r7, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fff3 	bl	8005680 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 800469a:	4603      	mov	r3, r0
    }
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80046a4:	b590      	push	{r4, r7, lr}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80046b0:	68b8      	ldr	r0, [r7, #8]
 80046b2:	f000 fffe 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80046b6:	4604      	mov	r4, r0
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fe32 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	4621      	mov	r1, r4
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f001 f823 	bl	8005710 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd90      	pop	{r4, r7, pc}

080046d2 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6839      	ldr	r1, [r7, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f001 f843 	bl	800576c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 80046e6:	4603      	mov	r3, r0
    }
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80046f0:	b590      	push	{r4, r7, lr}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80046fc:	68b8      	ldr	r0, [r7, #8]
 80046fe:	f000 ffd8 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004702:	4604      	mov	r4, r0
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 ffd4 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	4621      	mov	r1, r4
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f001 f869 	bl	80057e8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>
}
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	bd90      	pop	{r4, r7, pc}

0800471e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f001 f88c 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800472c:	4602      	mov	r2, r0
 800472e:	f107 030c 	add.w	r3, r7, #12
 8004732:	4611      	mov	r1, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f001 f8a8 	bl	800588a <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>
 800473a:	68fb      	ldr	r3, [r7, #12]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004744:	b590      	push	{r4, r7, lr}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004750:	68b8      	ldr	r0, [r7, #8]
 8004752:	f001 f8aa 	bl	80058aa <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 8004756:	4604      	mov	r4, r0
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f001 f8b1 	bl	80058c0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800475e:	4603      	mov	r3, r0
 8004760:	461a      	mov	r2, r3
 8004762:	4621      	mov	r1, r4
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f001 f8f7 	bl	8005958 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>
}
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	bd90      	pop	{r4, r7, pc}

08004772 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004772:	b5b0      	push	{r4, r5, r7, lr}
 8004774:	b086      	sub	sp, #24
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	68b8      	ldr	r0, [r7, #8]
 8004780:	f001 f91a 	bl	80059b8 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8004784:	4604      	mov	r4, r0
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 ff93 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800478c:	4605      	mov	r5, r0
 800478e:	f107 0314 	add.w	r3, r7, #20
 8004792:	4618      	mov	r0, r3
 8004794:	f001 f91b 	bl	80059ce <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004798:	f107 0314 	add.w	r3, r7, #20
 800479c:	462a      	mov	r2, r5
 800479e:	4621      	mov	r1, r4
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f001 f953 	bl	8005a4c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bdb0      	pop	{r4, r5, r7, pc}

080047ae <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6839      	ldr	r1, [r7, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f001 f991 	bl	8005ae4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
 80047c2:	4603      	mov	r3, r0
    }
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f001 f99e 	bl	8005b16 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80047da:	4602      	mov	r2, r0
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 f9ba 	bl	8005b5c <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>
 80047e8:	68fb      	ldr	r3, [r7, #12]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80047f2:	b590      	push	{r4, r7, lr}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80047fe:	68b8      	ldr	r0, [r7, #8]
 8004800:	f000 ff57 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004804:	4604      	mov	r4, r0
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f001 f9b8 	bl	8005b7c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800480c:	4603      	mov	r3, r0
 800480e:	461a      	mov	r2, r3
 8004810:	4621      	mov	r1, r4
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f001 f9f0 	bl	8005bf8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>
}
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	bd90      	pop	{r4, r7, pc}

08004820 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 800482c:	68b8      	ldr	r0, [r7, #8]
 800482e:	f001 fa11 	bl	8005c54 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004832:	4604      	mov	r4, r0
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 ff3c 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800483a:	4603      	mov	r3, r0
 800483c:	461a      	mov	r2, r3
 800483e:	4621      	mov	r1, r4
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f001 fa37 	bl	8005cb4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bd90      	pop	{r4, r7, pc}

0800484e <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800484e:	b590      	push	{r4, r7, lr}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 800485a:	68b8      	ldr	r0, [r7, #8]
 800485c:	f001 fa58 	bl	8005d10 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8004860:	4604      	mov	r4, r0
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f001 f98a 	bl	8005b7c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8004868:	4603      	mov	r3, r0
 800486a:	461a      	mov	r2, r3
 800486c:	4621      	mov	r1, r4
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f001 fa8c 	bl	8005d8c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>
}
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	bd90      	pop	{r4, r7, pc}

0800487c <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
 800487c:	b5b0      	push	{r4, r5, r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	68b8      	ldr	r0, [r7, #8]
 800488a:	f001 faaf 	bl	8005dec <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 800488e:	4604      	mov	r4, r0
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f001 fab6 	bl	8005e02 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8004896:	4605      	mov	r5, r0
 8004898:	f107 0314 	add.w	r3, r7, #20
 800489c:	4618      	mov	r0, r3
 800489e:	f001 f896 	bl	80059ce <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80048a2:	f107 0314 	add.w	r3, r7, #20
 80048a6:	462a      	mov	r2, r5
 80048a8:	4621      	mov	r1, r4
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f001 fafe 	bl	8005eac <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bdb0      	pop	{r4, r5, r7, pc}

080048b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  inline const Derived& const_derived() const
  { return *static_cast<const Derived*>(this); }

  /** \returns the number of rows. \sa cols(), RowsAtCompileTime */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f001 fb33 	bl	8005f2c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4618      	mov	r0, r3
 80048ca:	f001 fb3a 	bl	8005f42 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80048ce:	4603      	mov	r3, r0
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  /** \returns the number of columns. \sa rows(), ColsAtCompileTime*/
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f001 fb23 	bl	8005f2c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 80048e6:	4603      	mov	r3, r0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f001 fb37 	bl	8005f5c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80048ee:	4603      	mov	r3, r0
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>:
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	ca07      	ldmia	r2, {r0, r1, r2}
 8004908:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	60da      	str	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f103 0210 	add.w	r2, r3, #16
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	3310      	adds	r3, #16
 800491e:	4619      	mov	r1, r3
 8004920:	4610      	mov	r0, r2
 8004922:	f001 f8d3 	bl	8005acc <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>:
  *
  * \sa computeInverseAndDetWithCheck()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC
inline const Inverse<Derived> MatrixBase<Derived>::inverse() const
 8004930:	b590      	push	{r4, r7, lr}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
{
  EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsInteger,THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES)
  eigen_assert(rows() == cols());
 800493a:	6838      	ldr	r0, [r7, #0]
 800493c:	f7ff ffbc 	bl	80048b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8004940:	4604      	mov	r4, r0
 8004942:	6838      	ldr	r0, [r7, #0]
 8004944:	f7ff ffc8 	bl	80048d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8004948:	4603      	mov	r3, r0
 800494a:	429c      	cmp	r4, r3
 800494c:	d006      	beq.n	800495c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x2c>
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x44>)
 8004950:	4a09      	ldr	r2, [pc, #36]	; (8004978 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x48>)
 8004952:	f240 115f 	movw	r1, #351	; 0x15f
 8004956:	4809      	ldr	r0, [pc, #36]	; (800497c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x4c>)
 8004958:	f019 f998 	bl	801dc8c <__assert_func>
  return Inverse<Derived>(derived());
 800495c:	6838      	ldr	r0, [r7, #0]
 800495e:	f001 fae5 	bl	8005f2c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004962:	4603      	mov	r3, r0
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f001 fb1d 	bl	8005fa6 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
}
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	bd90      	pop	{r4, r7, pc}
 8004974:	0801f1f0 	.word	0x0801f1f0
 8004978:	0801f204 	.word	0x0801f204
 800497c:	0801f358 	.word	0x0801f358

08004980 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>:
  * This class represents an abstract expression of A.inverse()
  * and most of the time this is the only way it is used.
  *
  */
template<typename XprType>
class Inverse : public InverseImpl<XprType,typename internal::traits<XprType>::StorageKind>
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff ffb1 	bl	80048f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80049a0:	b590      	push	{r4, r7, lr}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80049ac:	68b8      	ldr	r0, [r7, #8]
 80049ae:	f001 fb0c 	bl	8005fca <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 80049b2:	4604      	mov	r4, r0
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f001 fb13 	bl	8005fe0 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 80049ba:	4603      	mov	r3, r0
 80049bc:	461a      	mov	r2, r3
 80049be:	4621      	mov	r1, r4
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f001 fb57 	bl	8006074 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>
}
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd90      	pop	{r4, r7, pc}

080049ce <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6839      	ldr	r1, [r7, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f001 fb7b 	bl	80060d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 80049e2:	4603      	mov	r3, r0
    }
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80049f8:	68b8      	ldr	r0, [r7, #8]
 80049fa:	f001 f92b 	bl	8005c54 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80049fe:	4604      	mov	r4, r0
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fc8e 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004a06:	4603      	mov	r3, r0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f001 fba1 	bl	8006154 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd90      	pop	{r4, r7, pc}

08004a1a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004a1a:	b5b0      	push	{r4, r5, r7, lr}
 8004a1c:	b086      	sub	sp, #24
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
 8004a26:	68b8      	ldr	r0, [r7, #8]
 8004a28:	f001 f9eb 	bl	8005e02 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8004a2c:	4604      	mov	r4, r0
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f001 fbbe 	bl	80061b0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8004a34:	4605      	mov	r5, r0
 8004a36:	f107 0314 	add.w	r3, r7, #20
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f001 fbc3 	bl	80061c6 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004a40:	f107 0314 	add.w	r3, r7, #20
 8004a44:	462a      	mov	r2, r5
 8004a46:	4621      	mov	r1, r4
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f001 fbfb 	bl	8006244 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bdb0      	pop	{r4, r5, r7, pc}

08004a56 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>:
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	1d1a      	adds	r2, r3, #4
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004a74:	e882 0003 	stmia.w	r2, {r0, r1}
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f103 020c 	add.w	r2, r3, #12
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	4619      	mov	r1, r3
 8004a84:	4610      	mov	r0, r2
 8004a86:	f001 fc1f 	bl	80062c8 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004a94:	b590      	push	{r4, r7, lr}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004aa0:	68b8      	ldr	r0, [r7, #8]
 8004aa2:	f000 fc3e 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f001 fc19 	bl	80062e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f001 fc51 	bl	800635c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>
}
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd90      	pop	{r4, r7, pc}

08004ac2 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>:
  * The other template parameters are:
  * \tparam Option     can be DefaultProduct, AliasFreeProduct, or LazyProduct
  *
  */
template<typename _Lhs, typename _Rhs, int Option>
class Product : public ProductImpl<_Lhs,_Rhs,Option,
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	1d1a      	adds	r2, r3, #4
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	3304      	adds	r3, #4
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f7ff ffb9 	bl	8004a56 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004aee:	b5b0      	push	{r4, r5, r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
 8004afa:	68b8      	ldr	r0, [r7, #8]
 8004afc:	f000 fc11 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004b00:	4604      	mov	r4, r0
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f001 fc5a 	bl	80063bc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>
 8004b08:	4605      	mov	r5, r0
 8004b0a:	f107 0314 	add.w	r3, r7, #20
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 ff5d 	bl	80059ce <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004b14:	f107 0314 	add.w	r3, r7, #20
 8004b18:	462a      	mov	r2, r5
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f001 fc8d 	bl	800643c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bdb0      	pop	{r4, r5, r7, pc}

08004b2a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6839      	ldr	r1, [r7, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 fcbf 	bl	80064bc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
 8004b3e:	4603      	mov	r3, r0
    }
 8004b40:	4618      	mov	r0, r3
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004b54:	68b8      	ldr	r0, [r7, #8]
 8004b56:	f000 fbe4 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f001 f879 	bl	8005c54 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004b62:	4603      	mov	r3, r0
 8004b64:	461a      	mov	r2, r3
 8004b66:	4621      	mov	r1, r4
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f001 fce5 	bl	8006538 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd90      	pop	{r4, r7, pc}

08004b76 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004b76:	b5b0      	push	{r4, r5, r7, lr}
 8004b78:	b086      	sub	sp, #24
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
 8004b82:	68b8      	ldr	r0, [r7, #8]
 8004b84:	f000 fd95 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004b88:	4604      	mov	r4, r0
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f001 fd02 	bl	8006594 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>
 8004b90:	4605      	mov	r5, r0
 8004b92:	f107 0314 	add.w	r3, r7, #20
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 fb15 	bl	80061c6 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004b9c:	f107 0314 	add.w	r3, r7, #20
 8004ba0:	462a      	mov	r2, r5
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f001 fd35 	bl	8006614 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bdb0      	pop	{r4, r5, r7, pc}

08004bb2 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>:
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	1d1a      	adds	r2, r3, #4
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004bd0:	e882 0003 	stmia.w	r2, {r0, r1}
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f103 020c 	add.w	r2, r3, #12
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	330c      	adds	r3, #12
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f001 fb71 	bl	80062c8 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004bfc:	68b8      	ldr	r0, [r7, #8]
 8004bfe:	f001 fd4b 	bl	8006698 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 8004c02:	4604      	mov	r4, r0
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fd54 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4621      	mov	r1, r4
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f001 fd7f 	bl	8006714 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>
}
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd90      	pop	{r4, r7, pc}

08004c1e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6839      	ldr	r1, [r7, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 fd9f 	bl	8006770 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004c32:	4603      	mov	r3, r0
    }
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue,        pow, power to \c p, const RealScalar& p)
    EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \c p, const std::complex<RealScalar>& p)

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(MatrixBase)
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MatrixBase)
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f001 fd89 	bl	80067a2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    // Prevent user from trying to instantiate PlainObjectBase objects
    // by making all its constructor protected. See bug 1074.
  protected:

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff ffed 	bl	8004c82 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f001 fd84 	bl	80067b8 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>
    {
//       _check_template_params();
//       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void swap(DenseBase<OtherDerived> const & other)
    { Base::swap(other.derived()); }

    EIGEN_DEVICE_FUNC
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004cba:	b480      	push	{r7}
 8004cbc:	af00      	add	r7, sp, #0
                        && ((MaxColsAtCompileTime == Dynamic) || (MaxColsAtCompileTime >= 0))
                        && (MaxRowsAtCompileTime == RowsAtCompileTime || RowsAtCompileTime==Dynamic)
                        && (MaxColsAtCompileTime == ColsAtCompileTime || ColsAtCompileTime==Dynamic)
                        && (Options & (DontAlign|RowMajor)) == Options),
        INVALID_MATRIX_TEMPLATE_PARAMETERS)
    }
 8004cbe:	bf00      	nop
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f001 fd7e 	bl	80067d2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff ffed 	bl	8004cc8 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f001 fd79 	bl	80067e8 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>
    }
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
    }
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f001 fd73 	bl	8006802 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff ffed 	bl	8004d0e <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 fd6e 	bl	8006818 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>
    }
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004d46:	b480      	push	{r7}
 8004d48:	af00      	add	r7, sp, #0
    }
 8004d4a:	bf00      	nop
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f001 fd68 	bl	8006832 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ffed 	bl	8004d54 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f001 fd63 	bl	8006848 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>
    }
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
    }
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	605a      	str	r2, [r3, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	609a      	str	r2, [r3, #8]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 f86a 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	dd07      	ble.n	8004de0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x44>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f857 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	dc05      	bgt.n	8004dec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x50>
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x74>)
 8004de2:	4a0c      	ldr	r2, [pc, #48]	; (8004e14 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x78>)
 8004de4:	2124      	movs	r1, #36	; 0x24
 8004de6:	480c      	ldr	r0, [pc, #48]	; (8004e18 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x7c>)
 8004de8:	f018 ff50 	bl	801dc8c <__assert_func>
 8004dec:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2200      	movs	r2, #0
 8004df4:	2100      	movs	r1, #0
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 f85c 	bl	8004eb4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6013      	str	r3, [r2, #0]
  }
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	0801f3b0 	.word	0x0801f3b0
 8004e14:	0801f40c 	.word	0x0801f40c
 8004e18:	0801ee1c 	.word	0x0801ee1c

08004e1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	18d4      	adds	r4, r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 f833 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	429c      	cmp	r4, r3
 8004e3c:	d007      	beq.n	8004e4e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x32>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 f820 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x46>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689c      	ldr	r4, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 f816 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	429c      	cmp	r4, r3
 8004e60:	d005      	beq.n	8004e6e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x52>
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x60>)
 8004e64:	4a06      	ldr	r2, [pc, #24]	; (8004e80 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x64>)
 8004e66:	217a      	movs	r1, #122	; 0x7a
 8004e68:	4806      	ldr	r0, [pc, #24]	; (8004e84 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x68>)
 8004e6a:	f018 ff0f 	bl	801dc8c <__assert_func>
 8004e6e:	bf00      	nop
      return m_xpr;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
  }
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd90      	pop	{r4, r7, pc}
 8004e7c:	0801f4bc 	.word	0x0801f4bc
 8004e80:	0801f55c 	.word	0x0801f55c
 8004e84:	0801ee1c 	.word	0x0801ee1c

08004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	f001 fce7 	bl	8006862 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>
 8004e94:	4603      	mov	r3, r0
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	f001 fce4 	bl	8006872 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 fcdd 	bl	8006882 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 8004ec8:	4604      	mov	r4, r0
 8004eca:	f001 fcd2 	bl	8006872 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	fb03 f202 	mul.w	r2, r3, r2
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4423      	add	r3, r4
    }
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd90      	pop	{r4, r7, pc}
	...

08004ee8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	605a      	str	r2, [r3, #4]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	609a      	str	r2, [r3, #8]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f86a 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	dd07      	ble.n	8004f2c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x44>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 f857 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	dc05      	bgt.n	8004f38 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x50>
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x74>)
 8004f2e:	4a0c      	ldr	r2, [pc, #48]	; (8004f60 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x78>)
 8004f30:	2124      	movs	r1, #36	; 0x24
 8004f32:	480c      	ldr	r0, [pc, #48]	; (8004f64 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x7c>)
 8004f34:	f018 feaa 	bl	801dc8c <__assert_func>
 8004f38:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2100      	movs	r1, #0
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f85c 	bl	8005000 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6013      	str	r3, [r2, #0]
  }
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	0801f3b0 	.word	0x0801f3b0
 8004f60:	0801f5c4 	.word	0x0801f5c4
 8004f64:	0801ee1c 	.word	0x0801ee1c

08004f68 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8004f68:	b590      	push	{r4, r7, lr}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	18d4      	adds	r4, r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 f833 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004f84:	4603      	mov	r3, r0
 8004f86:	429c      	cmp	r4, r3
 8004f88:	d007      	beq.n	8004f9a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x32>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f820 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x46>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689c      	ldr	r4, [r3, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 f816 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	429c      	cmp	r4, r3
 8004fac:	d005      	beq.n	8004fba <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x52>
 8004fae:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x60>)
 8004fb0:	4a06      	ldr	r2, [pc, #24]	; (8004fcc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x64>)
 8004fb2:	217a      	movs	r1, #122	; 0x7a
 8004fb4:	4806      	ldr	r0, [pc, #24]	; (8004fd0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x68>)
 8004fb6:	f018 fe69 	bl	801dc8c <__assert_func>
 8004fba:	bf00      	nop
      return m_xpr;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
  }
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd90      	pop	{r4, r7, pc}
 8004fc8:	0801f4bc 	.word	0x0801f4bc
 8004fcc:	0801f674 	.word	0x0801f674
 8004fd0:	0801ee1c 	.word	0x0801ee1c

08004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	f001 fc5c 	bl	8006898 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	f001 fc59 	bl	80068a8 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4618      	mov	r0, r3
 8005010:	f001 fc52 	bl	80068b8 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 8005014:	4604      	mov	r4, r0
 8005016:	f001 fc47 	bl	80068a8 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 800501a:	4602      	mov	r2, r0
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	fb03 f202 	mul.w	r2, r3, r2
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4423      	add	r3, r4
    }
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	bd90      	pop	{r4, r7, pc}
	...

08005034 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	605a      	str	r2, [r3, #4]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	609a      	str	r2, [r3, #8]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f000 ff0e 	bl	8005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	dd07      	ble.n	8005078 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x44>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 ff11 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	dc05      	bgt.n	8005084 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x50>
 8005078:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x74>)
 800507a:	4a0c      	ldr	r2, [pc, #48]	; (80050ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x78>)
 800507c:	2124      	movs	r1, #36	; 0x24
 800507e:	480c      	ldr	r0, [pc, #48]	; (80050b0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x7c>)
 8005080:	f018 fe04 	bl	801dc8c <__assert_func>
 8005084:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2200      	movs	r2, #0
 800508c:	2100      	movs	r1, #0
 800508e:	4618      	mov	r0, r3
 8005090:	f001 fc1d 	bl	80068ce <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8005094:	4602      	mov	r2, r0
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6013      	str	r3, [r2, #0]
  }
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	0801f3b0 	.word	0x0801f3b0
 80050ac:	0801f6dc 	.word	0x0801f6dc
 80050b0:	0801ee1c 	.word	0x0801ee1c

080050b4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 80050b4:	b590      	push	{r4, r7, lr}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	18d4      	adds	r4, r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fed7 	bl	8005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80050d0:	4603      	mov	r3, r0
 80050d2:	429c      	cmp	r4, r3
 80050d4:	d007      	beq.n	80050e6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x32>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 feda 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x46>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689c      	ldr	r4, [r3, #8]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fed0 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80050f4:	4603      	mov	r3, r0
 80050f6:	429c      	cmp	r4, r3
 80050f8:	d005      	beq.n	8005106 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x52>
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x60>)
 80050fc:	4a06      	ldr	r2, [pc, #24]	; (8005118 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x64>)
 80050fe:	217a      	movs	r1, #122	; 0x7a
 8005100:	4806      	ldr	r0, [pc, #24]	; (800511c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x68>)
 8005102:	f018 fdc3 	bl	801dc8c <__assert_func>
 8005106:	bf00      	nop
      return m_xpr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
  }
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	bd90      	pop	{r4, r7, pc}
 8005114:	0801f4bc 	.word	0x0801f4bc
 8005118:	0801f78c 	.word	0x0801f78c
 800511c:	0801ee1c 	.word	0x0801ee1c

08005120 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	605a      	str	r2, [r3, #4]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	609a      	str	r2, [r3, #8]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f000 f86a 	bl	8005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	dd07      	ble.n	8005164 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x44>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 f857 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	dc05      	bgt.n	8005170 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x50>
 8005164:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x74>)
 8005166:	4a0c      	ldr	r2, [pc, #48]	; (8005198 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x78>)
 8005168:	2124      	movs	r1, #36	; 0x24
 800516a:	480c      	ldr	r0, [pc, #48]	; (800519c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x7c>)
 800516c:	f018 fd8e 	bl	801dc8c <__assert_func>
 8005170:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2200      	movs	r2, #0
 8005178:	2100      	movs	r1, #0
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f85c 	bl	8005238 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 8005180:	4602      	mov	r2, r0
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6013      	str	r3, [r2, #0]
  }
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	0801f3b0 	.word	0x0801f3b0
 8005198:	0801f7f4 	.word	0x0801f7f4
 800519c:	0801ee1c 	.word	0x0801ee1c

080051a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 80051a0:	b590      	push	{r4, r7, lr}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	18d4      	adds	r4, r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 f833 	bl	8005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80051bc:	4603      	mov	r3, r0
 80051be:	429c      	cmp	r4, r3
 80051c0:	d007      	beq.n	80051d2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x32>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 f820 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d109      	bne.n	80051e6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x46>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689c      	ldr	r4, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 f816 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80051e0:	4603      	mov	r3, r0
 80051e2:	429c      	cmp	r4, r3
 80051e4:	d005      	beq.n	80051f2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x52>
 80051e6:	4b06      	ldr	r3, [pc, #24]	; (8005200 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x60>)
 80051e8:	4a06      	ldr	r2, [pc, #24]	; (8005204 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x64>)
 80051ea:	217a      	movs	r1, #122	; 0x7a
 80051ec:	4806      	ldr	r0, [pc, #24]	; (8005208 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x68>)
 80051ee:	f018 fd4d 	bl	801dc8c <__assert_func>
 80051f2:	bf00      	nop
      return m_xpr;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
  }
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd90      	pop	{r4, r7, pc}
 8005200:	0801f4bc 	.word	0x0801f4bc
 8005204:	0801f8a4 	.word	0x0801f8a4
 8005208:	0801ee1c 	.word	0x0801ee1c

0800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	f001 fb74 	bl	8006900 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 8005218:	4603      	mov	r3, r0
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	f001 fb71 	bl	8006910 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>
 800522e:	4603      	mov	r3, r0
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8005238:	b590      	push	{r4, r7, lr}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
        return m_storage.data()[colId + rowId * m_storage.cols()];
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4618      	mov	r0, r3
 8005248:	f001 fb6a 	bl	8006920 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 800524c:	4604      	mov	r4, r0
 800524e:	f001 fb57 	bl	8006900 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 8005252:	4602      	mov	r2, r0
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	fb03 f202 	mul.w	r2, r3, r2
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4423      	add	r3, r4
    }
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	bd90      	pop	{r4, r7, pc}

0800526a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f855 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005278:	4603      	mov	r3, r0
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff feb5 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005280:	4603      	mov	r3, r0
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f845 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005298:	4603      	mov	r3, r0
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff fe9a 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80052a0:	4603      	mov	r3, r0
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
protected:
  Index m_outerStride;
};

template<typename Derived>
struct evaluator<PlainObjectBase<Derived> >
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b082      	sub	sp, #8
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f001 fb4f 	bl	8006956 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:

  plainobjectbase_evaluator_data<Scalar,OuterStrideAtCompileTime> m_d;
};

template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b082      	sub	sp, #8
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff ffec 	bl	80052aa <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)
 80052dc:	b590      	push	{r4, r7, lr}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
      return internal::evaluator<Derived>(derived()).coeffRef(row,col);
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 f90f 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80052ee:	4602      	mov	r2, r0
 80052f0:	f107 0314 	add.w	r3, r7, #20
 80052f4:	4611      	mov	r1, r2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f001 fb1d 	bl	8006936 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 80052fc:	f107 0314 	add.w	r3, r7, #20
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	4618      	mov	r0, r3
 8005306:	f001 fb31 	bl	800696c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>
 800530a:	4604      	mov	r4, r0
 800530c:	bf00      	nop
 800530e:	f107 0314 	add.w	r3, r7, #20
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff ffd5 	bl	80052c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8005318:	4623      	mov	r3, r4
    }
 800531a:	4618      	mov	r0, r3
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	bd90      	pop	{r4, r7, pc}

08005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4618      	mov	r0, r3
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>:
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f001 fb1b 	bl	800699c <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>:

    typedef typename internal::dense_xpr_base<CwiseNullaryOp>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(CwiseNullaryOp)

    EIGEN_DEVICE_FUNC
    CwiseNullaryOp(Index rows, Index cols, const NullaryOp& func = NullaryOp())
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
      : m_rows(rows), m_cols(cols), m_functor(func)
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f7ff ffea 	bl	8005358 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	4618      	mov	r0, r3
 800538a:	f001 fb13 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3301      	adds	r3, #1
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	4618      	mov	r0, r3
 8005396:	f001 fb27 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3304      	adds	r3, #4
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 f897 	bl	80054d4 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
    {
      eigen_assert(rows >= 0
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	db08      	blt.n	80053be <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d105      	bne.n	80053be <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	db02      	blt.n	80053be <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d005      	beq.n	80053ca <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x5a>
 80053be:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x64>)
 80053c0:	4a05      	ldr	r2, [pc, #20]	; (80053d8 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x68>)
 80053c2:	2147      	movs	r1, #71	; 0x47
 80053c4:	4805      	ldr	r0, [pc, #20]	; (80053dc <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x6c>)
 80053c6:	f018 fc61 	bl	801dc8c <__assert_func>
            && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
            &&  cols >= 0
            && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols));
    }
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	0801f90c 	.word	0x0801f90c
 80053d8:	0801f9a4 	.word	0x0801f9a4
 80053dc:	0801fa98 	.word	0x0801fa98

080053e0 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_product_op)
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f001 fb0c 	bl	8006a1c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>:
    const BinaryOp m_functor;
};

// Generic API dispatcher
template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
class CwiseBinaryOpImpl
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff ffed 	bl	80053f6 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index rows() const { return m_rows.value(); }
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	f001 fb00 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8005432:	4603      	mov	r3, r0
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const { return m_cols.value(); }
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	f001 fafd 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8005448:	4603      	mov	r3, r0
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff ffd3 	bl	800540e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3304      	adds	r3, #4
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff f872 	bl	800455e <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	330c      	adds	r3, #12
 800547e:	6839      	ldr	r1, [r7, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f000 f837 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff fdae 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800548e:	4604      	mov	r4, r0
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff ffc8 	bl	8005426 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005496:	4603      	mov	r3, r0
 8005498:	429c      	cmp	r4, r3
 800549a:	d10a      	bne.n	80054b2 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x5e>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff fd98 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80054a4:	4604      	mov	r4, r0
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff ffc8 	bl	800543c <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80054ac:	4603      	mov	r3, r0
 80054ae:	429c      	cmp	r4, r3
 80054b0:	d005      	beq.n	80054be <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x6a>
 80054b2:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x74>)
 80054b4:	4a05      	ldr	r2, [pc, #20]	; (80054cc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x78>)
 80054b6:	2174      	movs	r1, #116	; 0x74
 80054b8:	4805      	ldr	r0, [pc, #20]	; (80054d0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x7c>)
 80054ba:	f018 fbe7 	bl	801dc8c <__assert_func>
    }
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd90      	pop	{r4, r7, pc}
 80054c8:	0801faf4 	.word	0x0801faf4
 80054cc:	0801fb30 	.word	0x0801fb30
 80054d0:	0801fd58 	.word	0x0801fd58

080054d4 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>:
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4618      	mov	r0, r3
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f001 fa91 	bl	8006a52 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800553a:	b580      	push	{r7, lr}
 800553c:	b082      	sub	sp, #8
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff ffed 	bl	8005522 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005552:	b580      	push	{r7, lr}
 8005554:	b082      	sub	sp, #8
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff ffec 	bl	800553a <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 fa5e 	bl	8006a68 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>:
};

namespace internal {

template<typename Lhs, typename Rhs, int Option, int ProductTag = internal::product_type<Lhs,Rhs>::ret>
class dense_product_base
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b082      	sub	sp, #8
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff ffed 	bl	800559e <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>:
  public:
    typedef typename internal::generic_xpr_base<Product<Lhs,Rhs,Option>, MatrixXpr, StorageKind>::type Base;
};

template<typename Lhs, typename Rhs, int Option>
class ProductImpl<Lhs,Rhs,Option,Dense>
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff ffed 	bl	80055b6 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fcee 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80055f8:	4603      	mov	r3, r0
    }
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff fce0 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005614:	4603      	mov	r3, r0
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005620:	b590      	push	{r4, r7, lr}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f7ff ffce 	bl	80055ce <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe ffef 	bl	800461a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3310      	adds	r3, #16
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005646:	68b8      	ldr	r0, [r7, #8]
 8005648:	f7ff ffcd 	bl	80055e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 800564c:	4604      	mov	r4, r0
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff ffd7 	bl	8005602 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005654:	4603      	mov	r3, r0
 8005656:	429c      	cmp	r4, r3
 8005658:	d005      	beq.n	8005666 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x46>
 800565a:	4b06      	ldr	r3, [pc, #24]	; (8005674 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x54>)
 800565c:	4a06      	ldr	r2, [pc, #24]	; (8005678 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x58>)
 800565e:	2160      	movs	r1, #96	; 0x60
 8005660:	4806      	ldr	r0, [pc, #24]	; (800567c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x5c>)
 8005662:	f018 fb13 	bl	801dc8c <__assert_func>
 8005666:	bf00      	nop
    }
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	bd90      	pop	{r4, r7, pc}
 8005672:	bf00      	nop
 8005674:	0801fdb4 	.word	0x0801fdb4
 8005678:	0801fe40 	.word	0x0801fe40
 800567c:	08020104 	.word	0x08020104

08005680 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f8da 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005690:	4604      	mov	r4, r0
 8005692:	6838      	ldr	r0, [r7, #0]
 8005694:	f001 f9f3 	bl	8006a7e <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 8005698:	4603      	mov	r3, r0
 800569a:	4619      	mov	r1, r3
 800569c:	4620      	mov	r0, r4
 800569e:	f001 f9f9 	bl	8006a94 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>
      return this->derived();
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8ce 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80056a8:	4603      	mov	r3, r0
    }
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd90      	pop	{r4, r7, pc}

080056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f001 f9f4 	bl	8006abe <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>:
class dense_product_base
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff ffed 	bl	80056c8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff ffed 	bl	80056e0 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4618      	mov	r0, r3
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f7ff ffeb 	bl	80056f8 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff fba9 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005736:	4604      	mov	r4, r0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff fc55 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005740:	4603      	mov	r3, r0
 8005742:	429c      	cmp	r4, r3
 8005744:	d005      	beq.n	8005752 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 8005746:	4b06      	ldr	r3, [pc, #24]	; (8005760 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005748:	4a06      	ldr	r2, [pc, #24]	; (8005764 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 800574a:	2160      	movs	r1, #96	; 0x60
 800574c:	4806      	ldr	r0, [pc, #24]	; (8005768 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 800574e:	f018 fa9d 	bl	801dc8c <__assert_func>
 8005752:	bf00      	nop
    }
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	bd90      	pop	{r4, r7, pc}
 800575e:	bf00      	nop
 8005760:	0801fdb4 	.word	0x0801fdb4
 8005764:	08020158 	.word	0x08020158
 8005768:	08020104 	.word	0x08020104

0800576c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 800576c:	b590      	push	{r4, r7, lr}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff fec8 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800577c:	4604      	mov	r4, r0
 800577e:	6838      	ldr	r0, [r7, #0]
 8005780:	f001 f9a8 	bl	8006ad4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8005784:	4603      	mov	r3, r0
 8005786:	4619      	mov	r1, r3
 8005788:	4620      	mov	r0, r4
 800578a:	f001 f9ae 	bl	8006aea <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff febc 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005794:	4603      	mov	r3, r0
    }
 8005796:	4618      	mov	r0, r3
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	bd90      	pop	{r4, r7, pc}

0800579e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
 800579e:	b580      	push	{r7, lr}
 80057a0:	b082      	sub	sp, #8
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f001 f9b4 	bl	8006b14 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>:
class dense_product_base
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7ff ffed 	bl	800579e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff ffed 	bl	80057b6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80057e8:	b590      	push	{r4, r7, lr}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7ff ffea 	bl	80057ce <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff fb3d 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800580e:	4604      	mov	r4, r0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fb43 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005818:	4603      	mov	r3, r0
 800581a:	429c      	cmp	r4, r3
 800581c:	d005      	beq.n	800582a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x42>
 800581e:	4b06      	ldr	r3, [pc, #24]	; (8005838 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x50>)
 8005820:	4a06      	ldr	r2, [pc, #24]	; (800583c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x54>)
 8005822:	2160      	movs	r1, #96	; 0x60
 8005824:	4806      	ldr	r0, [pc, #24]	; (8005840 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x58>)
 8005826:	f018 fa31 	bl	801dc8c <__assert_func>
 800582a:	bf00      	nop
    }
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	bd90      	pop	{r4, r7, pc}
 8005836:	bf00      	nop
 8005838:	0801fdb4 	.word	0x0801fdb4
 800583c:	08020280 	.word	0x08020280
 8005840:	08020104 	.word	0x08020104

08005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f001 f961 	bl	8006b2a <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff ffed 	bl	800585a <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	6039      	str	r1, [r7, #0]
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff ffec 	bl	8005872 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>:
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b082      	sub	sp, #8
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 f92e 	bl	8006b40 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>:
class dense_product_base
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b082      	sub	sp, #8
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff ffed 	bl	80058d6 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff ffed 	bl	80058ee <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff faac 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005930:	4603      	mov	r3, r0
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff fa9e 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800594c:	4603      	mov	r3, r0
 800594e:	4618      	mov	r0, r3
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005958:	b590      	push	{r4, r7, lr}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7ff ffce 	bl	8005906 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005972:	e883 0003 	stmia.w	r3, {r0, r1}
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3308      	adds	r3, #8
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6812      	ldr	r2, [r2, #0]
 800597e:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005980:	68b8      	ldr	r0, [r7, #8]
 8005982:	f7ff ffcc 	bl	800591e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 8005986:	4604      	mov	r4, r0
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff ffd6 	bl	800593a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800598e:	4603      	mov	r3, r0
 8005990:	429c      	cmp	r4, r3
 8005992:	d005      	beq.n	80059a0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x48>
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x54>)
 8005996:	4a06      	ldr	r2, [pc, #24]	; (80059b0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x58>)
 8005998:	2160      	movs	r1, #96	; 0x60
 800599a:	4806      	ldr	r0, [pc, #24]	; (80059b4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x5c>)
 800599c:	f018 f976 	bl	801dc8c <__assert_func>
 80059a0:	bf00      	nop
    }
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd90      	pop	{r4, r7, pc}
 80059ac:	0801fdb4 	.word	0x0801fdb4
 80059b0:	080203a8 	.word	0x080203a8
 80059b4:	08020104 	.word	0x08020104

080059b8 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4618      	mov	r0, r3
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>:
  EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op)
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 f8b2 	bl	8006b56 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7ff ffed 	bl	80059e4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 f8a4 	bl	8006b6c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 8005a24:	4603      	mov	r3, r0
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b082      	sub	sp, #8
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3308      	adds	r3, #8
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f001 f8a4 	bl	8006b88 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005a40:	4603      	mov	r3, r0
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005a4c:	b590      	push	{r4, r7, lr}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7ff ffce 	bl	80059fc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	60da      	str	r2, [r3, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3310      	adds	r3, #16
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 f828 	bl	8005acc <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005a7c:	68b8      	ldr	r0, [r7, #8]
 8005a7e:	f7ff ffc9 	bl	8005a14 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8005a82:	4604      	mov	r4, r0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fa09 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	429c      	cmp	r4, r3
 8005a90:	d10a      	bne.n	8005aa8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x5c>
 8005a92:	68b8      	ldr	r0, [r7, #8]
 8005a94:	f7ff ffcb 	bl	8005a2e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005a98:	4604      	mov	r4, r0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff f9f3 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	429c      	cmp	r4, r3
 8005aa6:	d005      	beq.n	8005ab4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x68>
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x74>)
 8005aaa:	4a06      	ldr	r2, [pc, #24]	; (8005ac4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x78>)
 8005aac:	2174      	movs	r1, #116	; 0x74
 8005aae:	4806      	ldr	r0, [pc, #24]	; (8005ac8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x7c>)
 8005ab0:	f018 f8ec 	bl	801dc8c <__assert_func>
    }
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd90      	pop	{r4, r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	0801faf4 	.word	0x0801faf4
 8005ac4:	08020554 	.word	0x08020554
 8005ac8:	0801fd58 	.word	0x0801fd58

08005acc <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>:
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005ae4:	b590      	push	{r4, r7, lr}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff fea8 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005af4:	4604      	mov	r4, r0
 8005af6:	6838      	ldr	r0, [r7, #0]
 8005af8:	f001 f854 	bl	8006ba4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>
 8005afc:	4603      	mov	r3, r0
 8005afe:	4619      	mov	r1, r3
 8005b00:	4620      	mov	r0, r4
 8005b02:	f001 f85a 	bl	8006bba <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>
      return this->derived();
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fe9c 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005b0c:	4603      	mov	r3, r0
    }
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd90      	pop	{r4, r7, pc}

08005b16 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f001 f855 	bl	8006be4 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff ffed 	bl	8005b2c <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff ffec 	bl	8005b44 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4618      	mov	r0, r3
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f001 f82d 	bl	8006bfa <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>:
class dense_product_base
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff ffed 	bl	8005b92 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b082      	sub	sp, #8
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff ffed 	bl	8005baa <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b082      	sub	sp, #8
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff fb10 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005bec:	4603      	mov	r3, r0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005bf8:	b590      	push	{r4, r7, lr}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff ffdc 	bl	8005bc2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3304      	adds	r3, #4
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff f933 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005c22:	4604      	mov	r4, r0
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff ffd8 	bl	8005bda <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	429c      	cmp	r4, r3
 8005c2e:	d005      	beq.n	8005c3c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x44>
 8005c30:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x50>)
 8005c32:	4a06      	ldr	r2, [pc, #24]	; (8005c4c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x54>)
 8005c34:	2160      	movs	r1, #96	; 0x60
 8005c36:	4806      	ldr	r0, [pc, #24]	; (8005c50 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x58>)
 8005c38:	f018 f828 	bl	801dc8c <__assert_func>
 8005c3c:	bf00      	nop
    }
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd90      	pop	{r4, r7, pc}
 8005c48:	0801fdb4 	.word	0x0801fdb4
 8005c4c:	080207c8 	.word	0x080207c8
 8005c50:	08020104 	.word	0x08020104

08005c54 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 ffcc 	bl	8006c10 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>:
class dense_product_base
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b082      	sub	sp, #8
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff ffed 	bl	8005c6a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7ff ffed 	bl	8005c82 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005cb4:	b590      	push	{r4, r7, lr}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7ff ffea 	bl	8005c9a <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff fa99 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005cda:	4604      	mov	r4, r0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff f8dd 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	429c      	cmp	r4, r3
 8005ce8:	d005      	beq.n	8005cf6 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8005cea:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005cec:	4a06      	ldr	r2, [pc, #24]	; (8005d08 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005cee:	2160      	movs	r1, #96	; 0x60
 8005cf0:	4806      	ldr	r0, [pc, #24]	; (8005d0c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005cf2:	f017 ffcb 	bl	801dc8c <__assert_func>
 8005cf6:	bf00      	nop
    }
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd90      	pop	{r4, r7, pc}
 8005d02:	bf00      	nop
 8005d04:	0801fdb4 	.word	0x0801fdb4
 8005d08:	08020914 	.word	0x08020914
 8005d0c:	08020104 	.word	0x08020104

08005d10 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>:
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 ff79 	bl	8006c26 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff ffed 	bl	8005d26 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7ff ffed 	bl	8005d3e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff f884 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005d80:	4603      	mov	r3, r0
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005d8c:	b590      	push	{r4, r7, lr}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f7ff ffdc 	bl	8005d56 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005da6:	e883 0003 	stmia.w	r3, {r0, r1}
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3308      	adds	r3, #8
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6812      	ldr	r2, [r2, #0]
 8005db2:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005db4:	68b8      	ldr	r0, [r7, #8]
 8005db6:	f7ff ffda 	bl	8005d6e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8005dba:	4604      	mov	r4, r0
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff ff0c 	bl	8005bda <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	d005      	beq.n	8005dd4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x48>
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x54>)
 8005dca:	4a06      	ldr	r2, [pc, #24]	; (8005de4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x58>)
 8005dcc:	2160      	movs	r1, #96	; 0x60
 8005dce:	4806      	ldr	r0, [pc, #24]	; (8005de8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x5c>)
 8005dd0:	f017 ff5c 	bl	801dc8c <__assert_func>
 8005dd4:	bf00      	nop
    }
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd90      	pop	{r4, r7, pc}
 8005de0:	0801fdb4 	.word	0x0801fdb4
 8005de4:	08020a3c 	.word	0x08020a3c
 8005de8:	08020104 	.word	0x08020104

08005dec <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 ff0b 	bl	8006c3c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff ffed 	bl	8005e18 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fefd 	bl	8006c52 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fefd 	bl	8006c6e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005e74:	4603      	mov	r3, r0
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	f000 ff00 	bl	8006c8a <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	f000 fefd 	bl	8006c9a <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005eac:	b590      	push	{r4, r7, lr}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7ff ffb8 	bl	8005e30 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ec6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	60da      	str	r2, [r3, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3310      	adds	r3, #16
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff fdf8 	bl	8005acc <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005edc:	68b8      	ldr	r0, [r7, #8]
 8005ede:	f7ff ffb3 	bl	8005e48 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff ffc9 	bl	8005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005eec:	4603      	mov	r3, r0
 8005eee:	429c      	cmp	r4, r3
 8005ef0:	d10a      	bne.n	8005f08 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x5c>
 8005ef2:	68b8      	ldr	r0, [r7, #8]
 8005ef4:	f7ff ffb5 	bl	8005e62 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005ef8:	4604      	mov	r4, r0
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff ffc9 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005f02:	4603      	mov	r3, r0
 8005f04:	429c      	cmp	r4, r3
 8005f06:	d005      	beq.n	8005f14 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x68>
 8005f08:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x74>)
 8005f0a:	4a06      	ldr	r2, [pc, #24]	; (8005f24 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x78>)
 8005f0c:	2174      	movs	r1, #116	; 0x74
 8005f0e:	4806      	ldr	r0, [pc, #24]	; (8005f28 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x7c>)
 8005f10:	f017 febc 	bl	801dc8c <__assert_func>
    }
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd90      	pop	{r4, r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	0801faf4 	.word	0x0801faf4
 8005f24:	08020be8 	.word	0x08020be8
 8005f28:	0801fd58 	.word	0x0801fd58

08005f2c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>:
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4618      	mov	r0, r3
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff ff7b 	bl	8005e48 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8005f52:	4603      	mov	r3, r0
    }
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff ff7b 	bl	8005e62 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005f6c:	4603      	mov	r3, r0
    }
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fe93 	bl	8006caa <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>:
  XprTypeNested m_xpr;
};

// Generic API dispatcher
template<typename XprType, typename StorageKind>
class InverseImpl
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff ffed 	bl	8005f76 <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit EIGEN_DEVICE_FUNC Inverse(const XprType &xpr)
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b082      	sub	sp, #8
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	6039      	str	r1, [r7, #0]
    : m_xpr(xpr)
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff ffec 	bl	8005f8e <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fe fc9c 	bl	80048f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
  {}
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>:
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>:
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b082      	sub	sp, #8
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fe5e 	bl	8006cc0 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>:
class dense_product_base
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff ffed 	bl	8005ff6 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff ffed 	bl	800600e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3304      	adds	r3, #4
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fe0f 	bl	8006c6e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006050:	4603      	mov	r3, r0
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index rows() const EIGEN_NOEXCEPT { return m_xpr.cols(); }
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff ff79 	bl	8005f5c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800606a:	4603      	mov	r3, r0
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006074:	b590      	push	{r4, r7, lr}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f7ff ffd0 	bl	8006026 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800608e:	e883 0003 	stmia.w	r3, {r0, r1}
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3308      	adds	r3, #8
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4618      	mov	r0, r3
 800609a:	f7fe fc71 	bl	8004980 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 800609e:	68b8      	ldr	r0, [r7, #8]
 80060a0:	f7ff ffcd 	bl	800603e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 80060a4:	4604      	mov	r4, r0
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff ffd7 	bl	800605a <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 80060ac:	4603      	mov	r3, r0
 80060ae:	429c      	cmp	r4, r3
 80060b0:	d005      	beq.n	80060be <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x4a>
 80060b2:	4b06      	ldr	r3, [pc, #24]	; (80060cc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x58>)
 80060b4:	4a06      	ldr	r2, [pc, #24]	; (80060d0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x5c>)
 80060b6:	2160      	movs	r1, #96	; 0x60
 80060b8:	4806      	ldr	r0, [pc, #24]	; (80060d4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x60>)
 80060ba:	f017 fde7 	bl	801dc8c <__assert_func>
 80060be:	bf00      	nop
    }
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd90      	pop	{r4, r7, pc}
 80060ca:	bf00      	nop
 80060cc:	0801fdb4 	.word	0x0801fdb4
 80060d0:	08020e5c 	.word	0x08020e5c
 80060d4:	08020104 	.word	0x08020104

080060d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 80060d8:	b590      	push	{r4, r7, lr}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff fa12 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80060e8:	4604      	mov	r4, r0
 80060ea:	6838      	ldr	r0, [r7, #0]
 80060ec:	f000 fdf3 	bl	8006cd6 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 80060f0:	4603      	mov	r3, r0
 80060f2:	4619      	mov	r1, r3
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 fdf9 	bl	8006cec <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>
      return this->derived();
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff fa06 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006100:	4603      	mov	r3, r0
    }
 8006102:	4618      	mov	r0, r3
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	bd90      	pop	{r4, r7, pc}

0800610a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fdff 	bl	8006d16 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff ffed 	bl	800610a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7ff ffed 	bl	8006122 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006154:	b590      	push	{r4, r7, lr}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7ff ffea 	bl	800613a <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff f849 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800617a:	4604      	mov	r4, r0
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe ff33 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006184:	4603      	mov	r3, r0
 8006186:	429c      	cmp	r4, r3
 8006188:	d005      	beq.n	8006196 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 800618a:	4b06      	ldr	r3, [pc, #24]	; (80061a4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 800618c:	4a06      	ldr	r2, [pc, #24]	; (80061a8 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 800618e:	2160      	movs	r1, #96	; 0x60
 8006190:	4806      	ldr	r0, [pc, #24]	; (80061ac <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8006192:	f017 fd7b 	bl	801dc8c <__assert_func>
 8006196:	bf00      	nop
    }
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd90      	pop	{r4, r7, pc}
 80061a2:	bf00      	nop
 80061a4:	0801fdb4 	.word	0x0801fdb4
 80061a8:	080211e4 	.word	0x080211e4
 80061ac:	08020104 	.word	0x08020104

080061b0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4618      	mov	r0, r3
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_difference_op : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_difference_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_difference_op)
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fda1 	bl	8006d2c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff ffed 	bl	80061dc <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4618      	mov	r0, r3
 800621a:	f7ff f802 	bl	8005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800621e:	4603      	mov	r3, r0
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe fecd 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800623a:	4603      	mov	r3, r0
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006244:	b590      	push	{r4, r7, lr}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7ff ffce 	bl	80061f4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3304      	adds	r3, #4
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006268:	e883 0003 	stmia.w	r3, {r0, r1}
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	330c      	adds	r3, #12
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 f828 	bl	80062c8 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff fdff 	bl	8005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8006280:	4604      	mov	r4, r0
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff ffc2 	bl	800620c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8006288:	4603      	mov	r3, r0
 800628a:	429c      	cmp	r4, r3
 800628c:	d10a      	bne.n	80062a4 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff fdff 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8006296:	4604      	mov	r4, r0
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff ffc5 	bl	8006228 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800629e:	4603      	mov	r3, r0
 80062a0:	429c      	cmp	r4, r3
 80062a2:	d005      	beq.n	80062b0 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 80062a4:	4b05      	ldr	r3, [pc, #20]	; (80062bc <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 80062a6:	4a06      	ldr	r2, [pc, #24]	; (80062c0 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 80062a8:	2174      	movs	r1, #116	; 0x74
 80062aa:	4806      	ldr	r0, [pc, #24]	; (80062c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 80062ac:	f017 fcee 	bl	801dc8c <__assert_func>
    }
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd90      	pop	{r4, r7, pc}
 80062ba:	bf00      	nop
 80062bc:	0801faf4 	.word	0x0801faf4
 80062c0:	0802130c 	.word	0x0802130c
 80062c4:	0801fd58 	.word	0x0801fd58

080062c8 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>:
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>:
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b082      	sub	sp, #8
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fd1f 	bl	8006d42 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>:
class dense_product_base
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff ffed 	bl	80062f6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff ffed 	bl	800630e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff fd97 	bl	8005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8006350:	4603      	mov	r3, r0
    }
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800635c:	b590      	push	{r4, r7, lr}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f7ff ffdc 	bl	8006326 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3304      	adds	r3, #4
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe fb6b 	bl	8004a56 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe fe26 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006388:	4604      	mov	r4, r0
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7ff ffd7 	bl	800633e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8006390:	4603      	mov	r3, r0
 8006392:	429c      	cmp	r4, r3
 8006394:	d005      	beq.n	80063a2 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x46>
 8006396:	4b06      	ldr	r3, [pc, #24]	; (80063b0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x54>)
 8006398:	4a06      	ldr	r2, [pc, #24]	; (80063b4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x58>)
 800639a:	2160      	movs	r1, #96	; 0x60
 800639c:	4806      	ldr	r0, [pc, #24]	; (80063b8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x5c>)
 800639e:	f017 fc75 	bl	801dc8c <__assert_func>
 80063a2:	bf00      	nop
    }
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd90      	pop	{r4, r7, pc}
 80063ae:	bf00      	nop
 80063b0:	0801fdb4 	.word	0x0801fdb4
 80063b4:	08021504 	.word	0x08021504
 80063b8:	08020104 	.word	0x08020104

080063bc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>:
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fcbc 	bl	8006d58 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff ffed 	bl	80063d2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fdeb 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006414:	4603      	mov	r3, r0
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3304      	adds	r3, #4
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fc9f 	bl	8006d6e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 8006430:	4603      	mov	r3, r0
 8006432:	4618      	mov	r0, r3
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800643c:	b590      	push	{r4, r7, lr}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f7ff ffcd 	bl	80063ea <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3304      	adds	r3, #4
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe fb30 	bl	8004ac2 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3318      	adds	r3, #24
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff fb2f 	bl	8005acc <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4618      	mov	r0, r3
 8006472:	f7fe fdba 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006476:	4604      	mov	r4, r0
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff ffc2 	bl	8006402 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 800647e:	4603      	mov	r3, r0
 8006480:	429c      	cmp	r4, r3
 8006482:	d10a      	bne.n	800649a <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x5e>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe fda4 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800648c:	4604      	mov	r4, r0
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7ff ffc5 	bl	800641e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8006494:	4603      	mov	r3, r0
 8006496:	429c      	cmp	r4, r3
 8006498:	d005      	beq.n	80064a6 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x6a>
 800649a:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x74>)
 800649c:	4a05      	ldr	r2, [pc, #20]	; (80064b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x78>)
 800649e:	2174      	movs	r1, #116	; 0x74
 80064a0:	4805      	ldr	r0, [pc, #20]	; (80064b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x7c>)
 80064a2:	f017 fbf3 	bl	801dc8c <__assert_func>
    }
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd90      	pop	{r4, r7, pc}
 80064b0:	0801faf4 	.word	0x0801faf4
 80064b4:	08021770 	.word	0x08021770
 80064b8:	0801fd58 	.word	0x0801fd58

080064bc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 80064bc:	b590      	push	{r4, r7, lr}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff f820 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80064cc:	4604      	mov	r4, r0
 80064ce:	6838      	ldr	r0, [r7, #0]
 80064d0:	f000 fc5b 	bl	8006d8a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 80064d4:	4603      	mov	r3, r0
 80064d6:	4619      	mov	r1, r3
 80064d8:	4620      	mov	r0, r4
 80064da:	f000 fc61 	bl	8006da0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>
      return this->derived();
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff f814 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80064e4:	4603      	mov	r3, r0
    }
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd90      	pop	{r4, r7, pc}

080064ee <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b082      	sub	sp, #8
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fc67 	bl	8006dca <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4618      	mov	r0, r3
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>:
class dense_product_base
 8006506:	b580      	push	{r7, lr}
 8006508:	b082      	sub	sp, #8
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff ffed 	bl	80064ee <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff ffed 	bl	8006506 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006538:	b590      	push	{r4, r7, lr}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f7ff ffea 	bl	800651e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe fd3b 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800655e:	4604      	mov	r4, r0
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4618      	mov	r0, r3
 8006564:	f7fe fe5d 	bl	8005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006568:	4603      	mov	r3, r0
 800656a:	429c      	cmp	r4, r3
 800656c:	d005      	beq.n	800657a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 800656e:	4b06      	ldr	r3, [pc, #24]	; (8006588 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8006570:	4a06      	ldr	r2, [pc, #24]	; (800658c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8006572:	2160      	movs	r1, #96	; 0x60
 8006574:	4806      	ldr	r0, [pc, #24]	; (8006590 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 8006576:	f017 fb89 	bl	801dc8c <__assert_func>
 800657a:	bf00      	nop
    }
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	bd90      	pop	{r4, r7, pc}
 8006586:	bf00      	nop
 8006588:	0801fdb4 	.word	0x0801fdb4
 800658c:	08021aa4 	.word	0x08021aa4
 8006590:	08020104 	.word	0x08020104

08006594 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>:
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4618      	mov	r0, r3
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b082      	sub	sp, #8
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fc14 	bl	8006de0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4618      	mov	r0, r3
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b082      	sub	sp, #8
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff ffed 	bl	80065aa <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe fcff 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80065ec:	4603      	mov	r3, r0
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fe02 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006608:	4603      	mov	r3, r0
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006614:	b590      	push	{r4, r7, lr}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f7ff ffcd 	bl	80065c2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3304      	adds	r3, #4
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006638:	e883 0003 	stmia.w	r3, {r0, r1}
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	330c      	adds	r3, #12
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff fe40 	bl	80062c8 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe fc27 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006650:	4604      	mov	r4, r0
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff ffc1 	bl	80065da <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 8006658:	4603      	mov	r3, r0
 800665a:	429c      	cmp	r4, r3
 800665c:	d10a      	bne.n	8006674 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fc11 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006666:	4604      	mov	r4, r0
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff ffc4 	bl	80065f6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 800666e:	4603      	mov	r3, r0
 8006670:	429c      	cmp	r4, r3
 8006672:	d005      	beq.n	8006680 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8006674:	4b05      	ldr	r3, [pc, #20]	; (800668c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 8006676:	4a06      	ldr	r2, [pc, #24]	; (8006690 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 8006678:	2174      	movs	r1, #116	; 0x74
 800667a:	4806      	ldr	r0, [pc, #24]	; (8006694 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 800667c:	f017 fb06 	bl	801dc8c <__assert_func>
    }
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	bd90      	pop	{r4, r7, pc}
 800668a:	bf00      	nop
 800668c:	0801faf4 	.word	0x0801faf4
 8006690:	08021bcc 	.word	0x08021bcc
 8006694:	0801fd58 	.word	0x0801fd58

08006698 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>:
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b082      	sub	sp, #8
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fb9d 	bl	8006df6 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>:
class dense_product_base
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b082      	sub	sp, #8
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff ffed 	bl	80066ae <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff ffed 	bl	80066c6 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f7fe fbc0 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006708:	4603      	mov	r3, r0
    }
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006714:	b590      	push	{r4, r7, lr}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff ffdc 	bl	80066de <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fa41 	bl	8004bb2 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 8006736:	68b8      	ldr	r0, [r7, #8]
 8006738:	f7ff ffdd 	bl	80066f6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 800673c:	4604      	mov	r4, r0
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe fbac 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006746:	4603      	mov	r3, r0
 8006748:	429c      	cmp	r4, r3
 800674a:	d005      	beq.n	8006758 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x44>
 800674c:	4b05      	ldr	r3, [pc, #20]	; (8006764 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x50>)
 800674e:	4a06      	ldr	r2, [pc, #24]	; (8006768 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x54>)
 8006750:	2160      	movs	r1, #96	; 0x60
 8006752:	4806      	ldr	r0, [pc, #24]	; (800676c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x58>)
 8006754:	f017 fa9a 	bl	801dc8c <__assert_func>
 8006758:	bf00      	nop
    }
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	4618      	mov	r0, r3
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	bd90      	pop	{r4, r7, pc}
 8006764:	0801fdb4 	.word	0x0801fdb4
 8006768:	08021dc4 	.word	0x08021dc4
 800676c:	08020104 	.word	0x08020104

08006770 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8006770:	b590      	push	{r4, r7, lr}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7ff f862 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006780:	4604      	mov	r4, r0
 8006782:	6838      	ldr	r0, [r7, #0]
 8006784:	f000 fb42 	bl	8006e0c <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 8006788:	4603      	mov	r3, r0
 800678a:	4619      	mov	r1, r3
 800678c:	4620      	mov	r0, r4
 800678e:	f000 fb48 	bl	8006e22 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff f856 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006798:	4603      	mov	r3, r0
    }
 800679a:	4618      	mov	r0, r3
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd90      	pop	{r4, r7, pc}

080067a2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    }

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(DenseBase)
    /** Default constructor. Do nothing. */
    EIGEN_DEVICE_FUNC DenseBase()
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
#ifdef EIGEN_INTERNAL_DEBUGGING
      EIGEN_STATIC_ASSERT((EIGEN_IMPLIES(MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1, int(IsRowMajor))
                        && EIGEN_IMPLIES(MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1, int(!IsRowMajor))),
                          INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION)
#endif
    }
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>:
// purely fixed-size matrix
template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage
{
    internal::plain_array<T,Size,_Options> m_data;
  public:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fb42 	bl	8006e4c <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>
      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
    }
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
    }
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fb35 	bl	8006e62 <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>
    }
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
    }
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fb28 	bl	8006e78 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>
    }
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
    }
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fb1b 	bl	8006e8e <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>
    }
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>:
    }
    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
      numext::swap(m_data, other.m_data);
    }
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006862:	b480      	push	{r7}
 8006864:	af00      	add	r7, sp, #0
 8006866:	2303      	movs	r3, #3
 8006868:	4618      	mov	r0, r3
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006872:	b480      	push	{r7}
 8006874:	af00      	add	r7, sp, #0
 8006876:	2303      	movs	r3, #3
 8006878:	4618      	mov	r0, r3
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0
 800689c:	2301      	movs	r3, #1
 800689e:	4618      	mov	r0, r3
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	2303      	movs	r3, #3
 80068ae:	4618      	mov	r0, r3
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 80068ce:	b590      	push	{r4, r7, lr}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 fae1 	bl	8006ea4 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 80068e2:	4604      	mov	r4, r0
 80068e4:	f000 f9d1 	bl	8006c8a <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 80068e8:	4602      	mov	r2, r0
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	fb03 f202 	mul.w	r2, r3, r2
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4423      	add	r3, r4
    }
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd90      	pop	{r4, r7, pc}

08006900 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
 8006904:	2303      	movs	r3, #3
 8006906:	4618      	mov	r0, r3
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
 8006914:	2301      	movs	r3, #1
 8006916:	4618      	mov	r0, r3
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4618      	mov	r0, r3
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>:

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  evaluator() {}

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit evaluator(const XprType& m)
 8006936:	b580      	push	{r7, lr}
 8006938:	b082      	sub	sp, #8
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fab7 	bl	8006eba <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
  { }
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800696c:	b590      	push	{r4, r7, lr}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681c      	ldr	r4, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fab2 	bl	8006ee8 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8006984:	4602      	mov	r2, r0
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	fb03 f202 	mul.w	r2, r3, r2
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4423      	add	r3, r4
  }
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	bd90      	pop	{r4, r7, pc}

0800699c <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
    }
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>:
  */
template<typename T, int Value> class variable_if_dynamic
{
  public:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(variable_if_dynamic)
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d005      	beq.n	80069d0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x1c>
 80069c4:	4b05      	ldr	r3, [pc, #20]	; (80069dc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x28>)
 80069c6:	4a06      	ldr	r2, [pc, #24]	; (80069e0 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x2c>)
 80069c8:	2185      	movs	r1, #133	; 0x85
 80069ca:	4806      	ldr	r0, [pc, #24]	; (80069e4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x30>)
 80069cc:	f017 f95e 	bl	801dc8c <__assert_func>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	08022030 	.word	0x08022030
 80069e0:	08022040 	.word	0x08022040
 80069e4:	080220a8 	.word	0x080220a8

080069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>:
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d005      	beq.n	8006a04 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x1c>
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x28>)
 80069fa:	4a06      	ldr	r2, [pc, #24]	; (8006a14 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x2c>)
 80069fc:	2185      	movs	r1, #133	; 0x85
 80069fe:	4806      	ldr	r0, [pc, #24]	; (8006a18 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x30>)
 8006a00:	f017 f944 	bl	801dc8c <__assert_func>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	08022030 	.word	0x08022030
 8006a14:	08022104 	.word	0x08022104
 8006a18:	080220a8 	.word	0x080220a8

08006a1c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
    }
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>:
    EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    T value() { return T(Value); }
 8006a32:	b480      	push	{r7}
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	2303      	movs	r3, #3
 8006a38:	4618      	mov	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>:
 8006a42:	b480      	push	{r7}
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	2301      	movs	r3, #1
 8006a48:	4618      	mov	r0, r3
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
    }
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
    }
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4618      	mov	r0, r3
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>:
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>:
// So this intermediate function removes everything related to "assume-aliasing" such that Assignment
// does not has to bother about these annoying details.

template<typename Dst, typename Src>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src)
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
{
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006a9e:	f107 030c 	add.w	r3, r7, #12
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fa2b 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006aa8:	f107 020c 	add.w	r2, r7, #12
 8006aac:	2300      	movs	r3, #0
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fa2f 	bl	8006f14 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>
}
 8006ab6:	bf00      	nop
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
    }
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b084      	sub	sp, #16
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006af4:	f107 030c 	add.w	r3, r7, #12
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 fa00 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006afe:	f107 020c 	add.w	r2, r7, #12
 8006b02:	2300      	movs	r3, #0
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fa1c 	bl	8006f44 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>
}
 8006b0c:	bf00      	nop
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
    }
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
    }
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
    }
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
    }
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fe f990 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fe f982 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>:
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006bc4:	f107 030c 	add.w	r3, r7, #12
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 f998 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006bce:	f107 020c 	add.w	r2, r7, #12
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f9cc 	bl	8006f74 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8006bdc:	bf00      	nop
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
    }
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
    }
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
    }
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
    }
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
    }
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>:
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b082      	sub	sp, #8
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe fadf 	bl	8005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006c64:	4603      	mov	r3, r0
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b082      	sub	sp, #8
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fe fad1 	bl	8005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006c80:	4603      	mov	r3, r0
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006c8a:	b480      	push	{r7}
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	2301      	movs	r3, #1
 8006c90:	4618      	mov	r0, r3
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006c9a:	b480      	push	{r7}
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
    }
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
    }
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>:
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006cf6:	f107 030c 	add.w	r3, r7, #12
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 f8ff 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006d00:	f107 020c 	add.w	r2, r7, #12
 8006d04:	2300      	movs	r3, #0
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f943 	bl	8006f94 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>
}
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
    }
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4618      	mov	r0, r3
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
    }
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
    }
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
    }
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4618      	mov	r0, r3
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff f88a 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8006d80:	4603      	mov	r3, r0
    }
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>:
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4618      	mov	r0, r3
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006daa:	f107 030c 	add.w	r3, r7, #12
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 f8a5 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006db4:	f107 020c 	add.w	r2, r7, #12
 8006db8:	2300      	movs	r3, #0
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f901 	bl	8006fc4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>
}
 8006dc2:	bf00      	nop
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
    }
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
    }
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
    }
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>:
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006e2c:	f107 030c 	add.w	r3, r7, #12
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 f864 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006e36:	f107 020c 	add.w	r2, r7, #12
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f8d8 	bl	8006ff4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8006e44:	bf00      	nop
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>:
  plain_array()
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006e54:	f000 f8e6 	bl	8007024 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>:
  plain_array()
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b082      	sub	sp, #8
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006e6a:	f000 f8e2 	bl	8007032 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>
  }
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4618      	mov	r0, r3
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>:
  plain_array()
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006e80:	f000 f8de 	bl	8007040 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>:
  plain_array()
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006e96:	f000 f8d3 	bl	8007040 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8006eba:	b590      	push	{r4, r7, lr}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f8cf 	bl	8007068 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8006eca:	687c      	ldr	r4, [r7, #4]
 8006ecc:	6838      	ldr	r0, [r7, #0]
 8006ece:	f000 f8be 	bl	800704e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f000 f8d0 	bl	800707e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd90      	pop	{r4, r7, pc}

08006ee8 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>:
}

// Deal with "assume-aliasing"
template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08e      	sub	sp, #56	; 0x38
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	603b      	str	r3, [r7, #0]
{
  typename plain_matrix_type<Src>::type tmp(src);
 8006f22:	f107 0314 	add.w	r3, r7, #20
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 f8ba 	bl	80070a2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006f2e:	f107 0314 	add.w	r3, r7, #20
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	4619      	mov	r1, r3
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 f8c8 	bl	80070cc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006f3c:	bf00      	nop
 8006f3e:	3738      	adds	r7, #56	; 0x38
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b088      	sub	sp, #32
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006f52:	f107 0314 	add.w	r3, r7, #20
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 f8c8 	bl	80070ee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006f5e:	f107 0314 	add.w	r3, r7, #20
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	4619      	mov	r1, r3
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 f8d6 	bl	8007118 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006f6c:	bf00      	nop
 8006f6e:	3720      	adds	r7, #32
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:

template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if<!evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
{
  call_assignment_no_alias(dst, src, func);
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	68b9      	ldr	r1, [r7, #8]
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 f8d7 	bl	800713a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006f8c:	bf00      	nop
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006fa2:	f107 0314 	add.w	r3, r7, #20
 8006fa6:	68b9      	ldr	r1, [r7, #8]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 f8d7 	bl	800715c <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006fae:	f107 0314 	add.w	r3, r7, #20
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 f8ae 	bl	8007118 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006fbc:	bf00      	nop
 8006fbe:	3720      	adds	r7, #32
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006fd2:	f107 0314 	add.w	r3, r7, #20
 8006fd6:	68b9      	ldr	r1, [r7, #8]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 f8d4 	bl	8007186 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006fde:	f107 0314 	add.w	r3, r7, #20
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 f896 	bl	8007118 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006fec:	bf00      	nop
 8006fee:	3720      	adds	r7, #32
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08e      	sub	sp, #56	; 0x38
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8007002:	f107 0314 	add.w	r3, r7, #20
 8007006:	68b9      	ldr	r1, [r7, #8]
 8007008:	4618      	mov	r0, r3
 800700a:	f000 f8d1 	bl	80071b0 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 800700e:	f107 0314 	add.w	r3, r7, #20
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	4619      	mov	r1, r3
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 f858 	bl	80070cc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 800701c:	bf00      	nop
 800701e:	3738      	adds	r7, #56	; 0x38
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>:
void check_static_allocation_size()
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0
}
 8007028:	bf00      	nop
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>:
void check_static_allocation_size()
 8007032:	b480      	push	{r7}
 8007034:	af00      	add	r7, sp, #0
}
 8007036:	bf00      	nop
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>:
void check_static_allocation_size()
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0
}
 8007044:	bf00      	nop
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4618      	mov	r0, r3
 800705a:	f000 f8be 	bl	80071da <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 800705e:	4603      	mov	r3, r0
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4618      	mov	r0, r3
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	607a      	str	r2, [r7, #4]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8007090:	1d3b      	adds	r3, r7, #4
 8007092:	4618      	mov	r0, r3
 8007094:	f7fd f80d 	bl	80040b2 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>:
#ifndef EIGEN_PARSED_BY_DOXYGEN

    // This constructor is for both 1x1 matrices and dynamic vectors
    template<typename T>
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    explicit Matrix(const T& x)
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
    {
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fd fdf3 	bl	8004c9a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 80070b4:	f7fd fe01 	bl	8004cba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 f8a3 	bl	8007208 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
}


template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
                      ) && int(Dst::SizeAtCompileTime) != 1
  };

  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst>::type ActualDstTypeCleaned;
  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst&>::type ActualDstType;
  ActualDstType actualDst(dst);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	617b      	str	r3, [r7, #20]
  // TODO check whether this is the right place to perform these checks:
  EIGEN_STATIC_ASSERT_LVALUE(Dst)
  EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ActualDstTypeCleaned,Src)
  EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename ActualDstTypeCleaned::Scalar,typename Src::Scalar);

  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	68b9      	ldr	r1, [r7, #8]
 80070e0:	6978      	ldr	r0, [r7, #20]
 80070e2:	f000 f89e 	bl	8007222 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 80070e6:	bf00      	nop
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
    {
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fd fe13 	bl	8004d26 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8007100:	f7fd fe21 	bl	8004d46 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	4618      	mov	r0, r3
 800710a:	f000 f89d 	bl	8007248 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>
    }
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	68b9      	ldr	r1, [r7, #8]
 800712c:	6978      	ldr	r0, [r7, #20]
 800712e:	f000 f898 	bl	8007262 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 8007132:	bf00      	nop
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800713a:	b580      	push	{r7, lr}
 800713c:	b086      	sub	sp, #24
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	68b9      	ldr	r1, [r7, #8]
 800714e:	6978      	ldr	r0, [r7, #20]
 8007150:	f000 f89a 	bl	8007288 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007154:	bf00      	nop
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
    {
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4618      	mov	r0, r3
 800716a:	f7fd fddc 	bl	8004d26 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800716e:	f7fd fdea 	bl	8004d46 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	4618      	mov	r0, r3
 8007178:	f000 f899 	bl	80072ae <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>
    }
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4618      	mov	r0, r3
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
    {
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4618      	mov	r0, r3
 8007194:	f7fd fdc7 	bl	8004d26 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8007198:	f7fd fdd5 	bl	8004d46 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 f891 	bl	80072c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>
    }
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
    {
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fd fd6c 	bl	8004c9a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 80071c2:	f7fd fd7a 	bl	8004cba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 f889 	bl	80072e2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>
    }
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4618      	mov	r0, r3
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>:
    { }

    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f87f 	bl	80072fc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>
 80071fe:	4603      	mov	r3, r0
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f87d 	bl	8007314 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
// both partial specialization+SFINAE without ambiguous specialization
template< typename DstXprType, typename SrcXprType, typename Functor, typename Weak>
struct Assignment<DstXprType, SrcXprType, Functor, Dense2Dense, Weak>
{
  EIGEN_DEVICE_FUNC
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	607a      	str	r2, [r7, #4]
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 f890 	bl	8007356 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>
#endif

    call_dense_assignment_loop(dst, src, func);
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	68b9      	ldr	r1, [r7, #8]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f8c4 	bl	80073c8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007240:	bf00      	nop
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f8ef 	bl	8007438 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800725a:	bf00      	nop
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800726e:	68b9      	ldr	r1, [r7, #8]
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 f902 	bl	800747a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f908 	bl	8007490 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 f932 	bl	8007500 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f9ca 	bl	800763a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f9f5 	bl	80076aa <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fa09 	bl	80076ec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b082      	sub	sp, #8
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa1d 	bl	800772e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80072f4:	bf00      	nop
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fa33 	bl	8007770 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>
 800730a:	4603      	mov	r3, r0
    }
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007314:	b5b0      	push	{r4, r5, r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7fe fa90 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007324:	4604      	mov	r4, r0
 8007326:	6838      	ldr	r0, [r7, #0]
 8007328:	f7ff fba9 	bl	8006a7e <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 800732c:	4605      	mov	r5, r0
 800732e:	f107 030c 	add.w	r3, r7, #12
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff fde3 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007338:	f107 030c 	add.w	r3, r7, #12
 800733c:	461a      	mov	r2, r3
 800733e:	4629      	mov	r1, r5
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fa27 	bl	8007794 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7fe fa7c 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800734c:	4603      	mov	r3, r0
    }
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bdb0      	pop	{r4, r5, r7, pc}

08007356 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>:
    {
    }
};

template<typename Dst, typename Src>
void check_for_aliasing(const Dst &dst, const Src &src)
 8007356:	b580      	push	{r7, lr}
 8007358:	b082      	sub	sp, #8
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	6039      	str	r1, [r7, #0]
{
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4618      	mov	r0, r3
 8007364:	f7fd fd9b 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007368:	4603      	mov	r3, r0
 800736a:	2b01      	cmp	r3, #1
 800736c:	dd08      	ble.n	8007380 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4618      	mov	r0, r3
 8007372:	f7fd fd89 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007376:	4603      	mov	r3, r0
 8007378:	2b01      	cmp	r3, #1
 800737a:	dd01      	ble.n	8007380 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 800737c:	2301      	movs	r3, #1
 800737e:	e000      	b.n	8007382 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2c>
 8007380:	2300      	movs	r3, #0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fa14 	bl	80077b6 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>
}
 800738e:	bf00      	nop
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8007396:	b580      	push	{r7, lr}
 8007398:	b082      	sub	sp, #8
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fa24 	bl	80077ec <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff ffec 	bl	8007396 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08c      	sub	sp, #48	; 0x30
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80073d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073d8:	68b9      	ldr	r1, [r7, #8]
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 f9f6 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fa0d 	bl	8007804 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80073ea:	f107 0320 	add.w	r3, r7, #32
 80073ee:	68f9      	ldr	r1, [r7, #12]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 f9eb 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 fa50 	bl	800789c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007402:	f107 0120 	add.w	r1, r7, #32
 8007406:	f107 0010 	add.w	r0, r7, #16
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f000 fa50 	bl	80078b2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8007412:	f107 0310 	add.w	r3, r7, #16
 8007416:	4618      	mov	r0, r3
 8007418:	f000 fa65 	bl	80078e6 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 800741c:	f107 0320 	add.w	r3, r7, #32
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff ffc4 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8007426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff ffbf 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
}
 8007430:	bf00      	nop
 8007432:	3728      	adds	r7, #40	; 0x28
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007438:	b5b0      	push	{r4, r5, r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fe f862 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007448:	4604      	mov	r4, r0
 800744a:	6838      	ldr	r0, [r7, #0]
 800744c:	f7ff fb42 	bl	8006ad4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8007450:	4605      	mov	r5, r0
 8007452:	f107 030c 	add.w	r3, r7, #12
 8007456:	4618      	mov	r0, r3
 8007458:	f7ff fd51 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800745c:	f107 030c 	add.w	r3, r7, #12
 8007460:	461a      	mov	r2, r3
 8007462:	4629      	mov	r1, r5
 8007464:	4620      	mov	r0, r4
 8007466:	f000 fa49 	bl	80078fc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fe f84e 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007470:	4603      	mov	r3, r0
    }
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bdb0      	pop	{r4, r5, r7, pc}

0800747a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8007490:	b580      	push	{r7, lr}
 8007492:	b08c      	sub	sp, #48	; 0x30
 8007494:	af02      	add	r7, sp, #8
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800749c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff fa47 	bl	8006936 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 fa37 	bl	8007920 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80074b2:	f107 0320 	add.w	r3, r7, #32
 80074b6:	68f9      	ldr	r1, [r7, #12]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff fa3c 	bl	8006936 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fa7a 	bl	80079b8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80074ca:	f107 0120 	add.w	r1, r7, #32
 80074ce:	f107 0010 	add.w	r0, r7, #16
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f000 fa7a 	bl	80079ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80074da:	f107 0310 	add.w	r3, r7, #16
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fa8f 	bl	8007a02 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 80074e4:	f107 0320 	add.w	r3, r7, #32
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fd feea 	bl	80052c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80074ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fd fee5 	bl	80052c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
}
 80074f8:	bf00      	nop
 80074fa:	3728      	adds	r7, #40	; 0x28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4618      	mov	r0, r3
 800750e:	f7fd fcc6 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007512:	4603      	mov	r3, r0
 8007514:	2b01      	cmp	r3, #1
 8007516:	dd08      	ble.n	800752a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4618      	mov	r0, r3
 800751c:	f7fd fcb4 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007520:	4603      	mov	r3, r0
 8007522:	2b01      	cmp	r3, #1
 8007524:	dd01      	ble.n	800752a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 8007526:	2301      	movs	r3, #1
 8007528:	e000      	b.n	800752c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2c>
 800752a:	2300      	movs	r3, #0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fa70 	bl	8007a18 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>
}
 8007538:	bf00      	nop
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fa8a 	bl	8007a62 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff ffec 	bl	8007540 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>:
};

// This is the default evaluator implementation for products:
// It creates a temporary and call generic_product_impl
template<typename Lhs, typename Rhs, int Options, int ProductTag, typename LhsShape, typename RhsShape>
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff ffeb 	bl	8007558 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4618      	mov	r0, r3
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4618      	mov	r0, r3
 8007598:	f7ff ffeb 	bl	8007572 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7ff ffeb 	bl	800758c <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7ff feef 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>:
  }

protected:

  // this helper permits to completely eliminate the functor if it is empty
  struct Data
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	332c      	adds	r3, #44	; 0x2c
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff ffea 	bl	80075c0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3304      	adds	r3, #4
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7ff ffd8 	bl	80075a6 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff ffe5 	bl	80075da <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fa1b 	bl	8007a4c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff ffe8 	bl	8007600 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4618      	mov	r0, r3
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800763a:	b580      	push	{r7, lr}
 800763c:	b098      	sub	sp, #96	; 0x60
 800763e:	af02      	add	r7, sp, #8
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8007646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800764a:	68b9      	ldr	r1, [r7, #8]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 f9ee 	bl	8007a2e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 fa28 	bl	8007aac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800765c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007660:	68f9      	ldr	r1, [r7, #12]
 8007662:	4618      	mov	r0, r3
 8007664:	f000 f8b2 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f917 	bl	800789c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 800766e:	4603      	mov	r3, r0
 8007670:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007674:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007678:	f107 0014 	add.w	r0, r7, #20
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f000 fa5e 	bl	8007b40 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8007684:	f107 0314 	add.w	r3, r7, #20
 8007688:	4618      	mov	r0, r3
 800768a:	f000 fa73 	bl	8007b74 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 800768e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff fe8b 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8007698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800769c:	4618      	mov	r0, r3
 800769e:	f7ff ffbf 	bl	8007620 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
}
 80076a2:	bf00      	nop
 80076a4:	3758      	adds	r7, #88	; 0x58
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80076aa:	b5b0      	push	{r4, r5, r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7fd ff29 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80076ba:	4604      	mov	r4, r0
 80076bc:	6838      	ldr	r0, [r7, #0]
 80076be:	f7ff fb0a 	bl	8006cd6 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 80076c2:	4605      	mov	r5, r0
 80076c4:	f107 030c 	add.w	r3, r7, #12
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7ff fc18 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80076ce:	f107 030c 	add.w	r3, r7, #12
 80076d2:	461a      	mov	r2, r3
 80076d4:	4629      	mov	r1, r5
 80076d6:	4620      	mov	r0, r4
 80076d8:	f000 fa57 	bl	8007b8a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7fd ff15 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80076e2:	4603      	mov	r3, r0
    }
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bdb0      	pop	{r4, r5, r7, pc}

080076ec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80076ec:	b5b0      	push	{r4, r5, r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7fd ff08 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80076fc:	4604      	mov	r4, r0
 80076fe:	6838      	ldr	r0, [r7, #0]
 8007700:	f7ff fb43 	bl	8006d8a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 8007704:	4605      	mov	r5, r0
 8007706:	f107 030c 	add.w	r3, r7, #12
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff fbf7 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007710:	f107 030c 	add.w	r3, r7, #12
 8007714:	461a      	mov	r2, r3
 8007716:	4629      	mov	r1, r5
 8007718:	4620      	mov	r0, r4
 800771a:	f000 fa47 	bl	8007bac <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fd fef4 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007724:	4603      	mov	r3, r0
    }
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bdb0      	pop	{r4, r5, r7, pc}

0800772e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800772e:	b5b0      	push	{r4, r5, r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7fe f883 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800773e:	4604      	mov	r4, r0
 8007740:	6838      	ldr	r0, [r7, #0]
 8007742:	f7ff fb63 	bl	8006e0c <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 8007746:	4605      	mov	r5, r0
 8007748:	f107 030c 	add.w	r3, r7, #12
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff fbd6 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007752:	f107 030c 	add.w	r3, r7, #12
 8007756:	461a      	mov	r2, r3
 8007758:	4629      	mov	r1, r5
 800775a:	4620      	mov	r0, r4
 800775c:	f000 fa37 	bl	8007bce <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7fe f86f 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007766:	4603      	mov	r3, r0
    }
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bdb0      	pop	{r4, r5, r7, pc}

08007770 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>:
  /** \returns the number of coefficients, which is rows()*cols().
    * \sa rows(), cols(), SizeAtCompileTime. */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8007770:	b590      	push	{r4, r7, lr}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7fd fd76 	bl	800526a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800777e:	4604      	mov	r4, r0
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7fd fd82 	bl	800528a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007786:	4603      	mov	r3, r0
 8007788:	fb04 f303 	mul.w	r3, r4, r3
 800778c:	4618      	mov	r0, r3
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	bd90      	pop	{r4, r7, pc}

08007794 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	6978      	ldr	r0, [r7, #20]
 80077aa:	f000 fa3c 	bl	8007c26 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 80077ae:	bf00      	nop
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>:
    static void run(const Derived&, const OtherDerived&)
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
    }
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	4611      	mov	r1, r2
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 fa5c 	bl	8007c9a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
  { }
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
	...

08007804 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4618      	mov	r0, r3
 8007814:	f7fd fb43 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007818:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	4618      	mov	r0, r3
 800781e:	f7fd fb33 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007822:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4618      	mov	r0, r3
 8007828:	f7fd fb39 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800782c:	4602      	mov	r2, r0
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	4293      	cmp	r3, r2
 8007832:	d107      	bne.n	8007844 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4618      	mov	r0, r3
 8007838:	f7fd fb26 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800783c:	4602      	mov	r2, r0
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	4293      	cmp	r3, r2
 8007842:	d001      	beq.n	8007848 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8007844:	2301      	movs	r3, #1
 8007846:	e000      	b.n	800784a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8007848:	2300      	movs	r3, #0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	6979      	ldr	r1, [r7, #20]
 8007854:	4618      	mov	r0, r3
 8007856:	f000 fa3b 	bl	8007cd0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4618      	mov	r0, r3
 800785e:	f7fd fb1e 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007862:	4602      	mov	r2, r0
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	4293      	cmp	r3, r2
 8007868:	d107      	bne.n	800787a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4618      	mov	r0, r3
 800786e:	f7fd fb0b 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007872:	4602      	mov	r2, r0
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	4293      	cmp	r3, r2
 8007878:	d006      	beq.n	8007888 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 800787a:	4b05      	ldr	r3, [pc, #20]	; (8007890 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800787c:	4a05      	ldr	r2, [pc, #20]	; (8007894 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800787e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007882:	4805      	ldr	r0, [pc, #20]	; (8007898 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8007884:	f016 fa02 	bl	801dc8c <__assert_func>
}
 8007888:	bf00      	nop
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	0802216c 	.word	0x0802216c
 8007894:	0802219c 	.word	0x0802219c
 8007898:	08022280 	.word	0x08022280

0800789c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4618      	mov	r0, r3
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80078b2:	b480      	push	{r7}
 80078b4:	b085      	sub	sp, #20
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	607a      	str	r2, [r7, #4]
 80078be:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	605a      	str	r2, [r3, #4]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	609a      	str	r2, [r3, #8]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	60da      	str	r2, [r3, #12]
  }
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b082      	sub	sp, #8
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fa20 	bl	8007d34 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>
  }
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	68b9      	ldr	r1, [r7, #8]
 8007910:	6978      	ldr	r0, [r7, #20]
 8007912:	f000 fa3a 	bl	8007d8a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8007916:	bf00      	nop
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	4618      	mov	r0, r3
 8007930:	f7fd fb5b 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007934:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	4618      	mov	r0, r3
 800793a:	f7fd fb4b 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800793e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4618      	mov	r0, r3
 8007944:	f7fd fb51 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007948:	4602      	mov	r2, r0
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	4293      	cmp	r3, r2
 800794e:	d107      	bne.n	8007960 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4618      	mov	r0, r3
 8007954:	f7fd fb3e 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007958:	4602      	mov	r2, r0
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	4293      	cmp	r3, r2
 800795e:	d001      	beq.n	8007964 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8007960:	2301      	movs	r3, #1
 8007962:	e000      	b.n	8007966 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8007964:	2300      	movs	r3, #0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d005      	beq.n	8007976 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	6979      	ldr	r1, [r7, #20]
 8007970:	4618      	mov	r0, r3
 8007972:	f000 fa45 	bl	8007e00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4618      	mov	r0, r3
 800797a:	f7fd fb36 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800797e:	4602      	mov	r2, r0
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	4293      	cmp	r3, r2
 8007984:	d107      	bne.n	8007996 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4618      	mov	r0, r3
 800798a:	f7fd fb23 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800798e:	4602      	mov	r2, r0
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	4293      	cmp	r3, r2
 8007994:	d006      	beq.n	80079a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8007996:	4b05      	ldr	r3, [pc, #20]	; (80079ac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007998:	4a05      	ldr	r2, [pc, #20]	; (80079b0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800799a:	f240 21fd 	movw	r1, #765	; 0x2fd
 800799e:	4805      	ldr	r0, [pc, #20]	; (80079b4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 80079a0:	f016 f974 	bl	801dc8c <__assert_func>
}
 80079a4:	bf00      	nop
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	0802216c 	.word	0x0802216c
 80079b0:	080222dc 	.word	0x080222dc
 80079b4:	08022280 	.word	0x08022280

080079b8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4618      	mov	r0, r3
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80079ce:	b480      	push	{r7}
 80079d0:	b085      	sub	sp, #20
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	60f8      	str	r0, [r7, #12]
 80079d6:	60b9      	str	r1, [r7, #8]
 80079d8:	607a      	str	r2, [r7, #4]
 80079da:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	605a      	str	r2, [r3, #4]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	609a      	str	r2, [r3, #8]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	60da      	str	r2, [r3, #12]
  }
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fa2a 	bl	8007e64 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>
  }
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
    }
 8007a22:	bf00      	nop
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	6039      	str	r1, [r7, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 fa20 	bl	8007e82 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4618      	mov	r0, r3
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fd ffc6 	bl	8005a14 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8007a88:	4603      	mov	r3, r0
    }
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b082      	sub	sp, #8
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fd ffc6 	bl	8005a2e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8007aa2:	4603      	mov	r3, r0
    }
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007ab8:	68b8      	ldr	r0, [r7, #8]
 8007aba:	f7ff ffdd 	bl	8007a78 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>
 8007abe:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007ac0:	68b8      	ldr	r0, [r7, #8]
 8007ac2:	f7ff ffe6 	bl	8007a92 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>
 8007ac6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fd f9e7 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d107      	bne.n	8007ae8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fd f9d4 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d001      	beq.n	8007aec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e000      	b.n	8007aee <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8007aec:	2300      	movs	r3, #0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	6979      	ldr	r1, [r7, #20]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 f8e9 	bl	8007cd0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fd f9cc 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007b06:	4602      	mov	r2, r0
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d107      	bne.n	8007b1e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fd f9b9 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007b16:	4602      	mov	r2, r0
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d006      	beq.n	8007b2c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8007b1e:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8007b20:	4a05      	ldr	r2, [pc, #20]	; (8007b38 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007b22:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007b26:	4805      	ldr	r0, [pc, #20]	; (8007b3c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007b28:	f016 f8b0 	bl	801dc8c <__assert_func>
}
 8007b2c:	bf00      	nop
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	0802216c 	.word	0x0802216c
 8007b38:	080223c0 	.word	0x080223c0
 8007b3c:	08022280 	.word	0x08022280

08007b40 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	605a      	str	r2, [r3, #4]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	609a      	str	r2, [r3, #8]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	60da      	str	r2, [r3, #12]
  }
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f992 	bl	8007ea6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8007b82:	bf00      	nop
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b086      	sub	sp, #24
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	60f8      	str	r0, [r7, #12]
 8007b92:	60b9      	str	r1, [r7, #8]
 8007b94:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	68b9      	ldr	r1, [r7, #8]
 8007b9e:	6978      	ldr	r0, [r7, #20]
 8007ba0:	f000 f9ac 	bl	8007efc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8007ba4:	bf00      	nop
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	68b9      	ldr	r1, [r7, #8]
 8007bc0:	6978      	ldr	r0, [r7, #20]
 8007bc2:	f000 f9d5 	bl	8007f70 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>
}
 8007bc6:	bf00      	nop
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b086      	sub	sp, #24
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	68b9      	ldr	r1, [r7, #8]
 8007be2:	6978      	ldr	r0, [r7, #20]
 8007be4:	f000 fa09 	bl	8007ffa <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007be8:	bf00      	nop
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>:
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fa37 	bl	800806e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8007c00:	4603      	mov	r3, r0
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b082      	sub	sp, #8
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3310      	adds	r3, #16
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 fa37 	bl	800808a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::assign_op<Scalar,Scalar>, Dense2Dense,
  typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
{
  typedef Product<Lhs,Rhs,Options> SrcXprType;
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007c26:	b590      	push	{r4, r7, lr}
 8007c28:	b087      	sub	sp, #28
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	607a      	str	r2, [r7, #4]
  {
    Index dstRows = src.rows();
 8007c32:	68b8      	ldr	r0, [r7, #8]
 8007c34:	f7ff ffdc 	bl	8007bf0 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>
 8007c38:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007c3a:	68b8      	ldr	r0, [r7, #8]
 8007c3c:	f7ff ffe5 	bl	8007c0a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>
 8007c40:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fd f92a 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d107      	bne.n	8007c62 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fd f917 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d001      	beq.n	8007c66 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 8007c62:	2301      	movs	r3, #1
 8007c64:	e000      	b.n	8007c68 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 8007c66:	2300      	movs	r3, #0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	6979      	ldr	r1, [r7, #20]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 f82c 	bl	8007cd0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    // FIXME shall we handle nested_eval here?
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007c78:	68b8      	ldr	r0, [r7, #8]
 8007c7a:	f000 fa14 	bl	80080a6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>
 8007c7e:	4604      	mov	r4, r0
 8007c80:	68b8      	ldr	r0, [r7, #8]
 8007c82:	f000 fa1b 	bl	80080bc <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>
 8007c86:	4603      	mov	r3, r0
 8007c88:	461a      	mov	r2, r3
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 fa21 	bl	80080d4 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>
  }
 8007c92:	bf00      	nop
 8007c94:	371c      	adds	r7, #28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd90      	pop	{r4, r7, pc}

08007c9a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8007c9a:	b5b0      	push	{r4, r5, r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fa50 	bl	800814a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8007caa:	687c      	ldr	r4, [r7, #4]
 8007cac:	6838      	ldr	r0, [r7, #0]
 8007cae:	f000 fa2f 	bl	8008110 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	6838      	ldr	r0, [r7, #0]
 8007cb6:	f000 fa38 	bl	800812a <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f000 fa4d 	bl	8008160 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bdb0      	pop	{r4, r5, r7, pc}

08007cd0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d108      	bne.n	8007cf4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d105      	bne.n	8007cf4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	db02      	blt.n	8007cf4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	da06      	bge.n	8007d02 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x32>
 8007cf4:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x58>)
 8007cf6:	4a0d      	ldr	r2, [pc, #52]	; (8007d2c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x5c>)
 8007cf8:	f240 1111 	movw	r1, #273	; 0x111
 8007cfc:	480c      	ldr	r0, [pc, #48]	; (8007d30 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x60>)
 8007cfe:	f015 ffc5 	bl	801dc8c <__assert_func>
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	617b      	str	r3, [r7, #20]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	613b      	str	r3, [r7, #16]
  }
 8007d0a:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	fb02 f103 	mul.w	r1, r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	f000 fa33 	bl	8008184 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>
    }
 8007d1e:	bf00      	nop
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	08022584 	.word	0x08022584
 8007d2c:	08022714 	.word	0x08022714
 8007d30:	080227a0 	.word	0x080227a0

08007d34 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fa2d 	bl	800819e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fa48 	bl	80081da <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>
  }
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fd f89d 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007d64:	4603      	mov	r3, r0
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b082      	sub	sp, #8
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fd f92a 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007d80:	4603      	mov	r3, r0
 8007d82:	4618      	mov	r0, r3
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007d8a:	b590      	push	{r4, r7, lr}
 8007d8c:	b087      	sub	sp, #28
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007d96:	68b8      	ldr	r0, [r7, #8]
 8007d98:	f7ff ffdb 	bl	8007d52 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8007d9c:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007d9e:	68b8      	ldr	r0, [r7, #8]
 8007da0:	f7ff ffe5 	bl	8007d6e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8007da4:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fd f91e 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007dae:	4602      	mov	r2, r0
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d107      	bne.n	8007dc6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x3c>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fd f90b 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d001      	beq.n	8007dca <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x40>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e000      	b.n	8007dcc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x42>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d005      	beq.n	8007ddc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x52>
      dst.resize(dstRows, dstCols);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	6979      	ldr	r1, [r7, #20]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 f812 	bl	8007e00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007ddc:	68b8      	ldr	r0, [r7, #8]
 8007dde:	f000 fa0b 	bl	80081f8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 8007de2:	4604      	mov	r4, r0
 8007de4:	68b8      	ldr	r0, [r7, #8]
 8007de6:	f000 fa13 	bl	8008210 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 8007dea:	4603      	mov	r3, r0
 8007dec:	461a      	mov	r2, r3
 8007dee:	4621      	mov	r1, r4
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 fa19 	bl	8008228 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>
  }
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd90      	pop	{r4, r7, pc}
	...

08007e00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d108      	bne.n	8007e24 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d105      	bne.n	8007e24 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	db02      	blt.n	8007e24 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	da06      	bge.n	8007e32 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x32>
 8007e24:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x58>)
 8007e26:	4a0d      	ldr	r2, [pc, #52]	; (8007e5c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x5c>)
 8007e28:	f240 1111 	movw	r1, #273	; 0x111
 8007e2c:	480c      	ldr	r0, [pc, #48]	; (8007e60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x60>)
 8007e2e:	f015 ff2d 	bl	801dc8c <__assert_func>
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	617b      	str	r3, [r7, #20]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	613b      	str	r3, [r7, #16]
  }
 8007e3a:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	fb02 f103 	mul.w	r1, r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	f000 fa0b 	bl	8008264 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>
    }
 8007e4e:	bf00      	nop
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	08022584 	.word	0x08022584
 8007e5c:	080227fc 	.word	0x080227fc
 8007e60:	080227a0 	.word	0x080227a0

08007e64 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa05 	bl	800827e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fa20 	bl	80082ba <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>
  }
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	6039      	str	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fa23 	bl	80082d8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 fa29 	bl	80082ee <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>
  }
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b082      	sub	sp, #8
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa43 	bl	800833e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fa59 	bl	8008370 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 fa5d 	bl	8008390 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3308      	adds	r3, #8
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 fa5d 	bl	80083ac <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007efc:	b590      	push	{r4, r7, lr}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007f08:	68b8      	ldr	r0, [r7, #8]
 8007f0a:	f7ff ffdc 	bl	8007ec6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>
 8007f0e:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007f10:	68b8      	ldr	r0, [r7, #8]
 8007f12:	f7ff ffe5 	bl	8007ee0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>
 8007f16:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fd f865 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007f20:	4602      	mov	r2, r0
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d107      	bne.n	8007f38 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x3c>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fd f852 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007f30:	4602      	mov	r2, r0
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d001      	beq.n	8007f3c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x40>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e000      	b.n	8007f3e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x42>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d005      	beq.n	8007f4e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x52>
      dst.resize(dstRows, dstCols);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	6979      	ldr	r1, [r7, #20]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff ff59 	bl	8007e00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007f4e:	68b8      	ldr	r0, [r7, #8]
 8007f50:	f000 fa39 	bl	80083c6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>
 8007f54:	4604      	mov	r4, r0
 8007f56:	68b8      	ldr	r0, [r7, #8]
 8007f58:	f000 fa40 	bl	80083dc <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	461a      	mov	r2, r3
 8007f60:	4621      	mov	r1, r4
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 fa46 	bl	80083f4 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>
  }
 8007f68:	bf00      	nop
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd90      	pop	{r4, r7, pc}

08007f70 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>:
template<typename DstXprType, typename OtherXpr, typename ProductType, typename Func1, typename Func2>
struct assignment_from_xpr_op_product
{
  template<typename SrcXprType, typename InitialFunc>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 8007f70:	b590      	push	{r4, r7, lr}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
  {
    call_assignment_no_alias(dst, src.lhs(), Func1());
 8007f7c:	68b8      	ldr	r0, [r7, #8]
 8007f7e:	f000 fa57 	bl	8008430 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>
 8007f82:	4604      	mov	r4, r0
 8007f84:	f107 0310 	add.w	r3, r7, #16
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fe ffb8 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007f8e:	f107 0310 	add.w	r3, r7, #16
 8007f92:	461a      	mov	r2, r3
 8007f94:	4621      	mov	r1, r4
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f7ff f8be 	bl	8007118 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 8007f9c:	68b8      	ldr	r0, [r7, #8]
 8007f9e:	f000 fa53 	bl	8008448 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	f107 0314 	add.w	r3, r7, #20
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 fa59 	bl	8008460 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8007fae:	f107 0314 	add.w	r3, r7, #20
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f000 fa5d 	bl	8008476 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007fbc:	bf00      	nop
 8007fbe:	371c      	adds	r7, #28
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd90      	pop	{r4, r7, pc}

08007fc4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 fa62 	bl	8008498 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fc ff4c 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007ffa:	b590      	push	{r4, r7, lr}
 8007ffc:	b087      	sub	sp, #28
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8008006:	68b8      	ldr	r0, [r7, #8]
 8008008:	f7ff ffdc 	bl	8007fc4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>
 800800c:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800800e:	68b8      	ldr	r0, [r7, #8]
 8008010:	f7ff ffe5 	bl	8007fde <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>
 8008014:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4618      	mov	r0, r3
 800801a:	f7fc ff40 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800801e:	4602      	mov	r2, r0
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	4293      	cmp	r3, r2
 8008024:	d107      	bne.n	8008036 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x3c>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	4618      	mov	r0, r3
 800802a:	f7fc ff2d 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800802e:	4602      	mov	r2, r0
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	4293      	cmp	r3, r2
 8008034:	d001      	beq.n	800803a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x40>
 8008036:	2301      	movs	r3, #1
 8008038:	e000      	b.n	800803c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x42>
 800803a:	2300      	movs	r3, #0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d005      	beq.n	800804c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x52>
      dst.resize(dstRows, dstCols);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	6979      	ldr	r1, [r7, #20]
 8008046:	4618      	mov	r0, r3
 8008048:	f7ff fe42 	bl	8007cd0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800804c:	68b8      	ldr	r0, [r7, #8]
 800804e:	f000 fa31 	bl	80084b4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>
 8008052:	4604      	mov	r4, r0
 8008054:	68b8      	ldr	r0, [r7, #8]
 8008056:	f000 fa38 	bl	80084ca <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>
 800805a:	4603      	mov	r3, r0
 800805c:	461a      	mov	r2, r3
 800805e:	4621      	mov	r1, r4
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f000 fa3e 	bl	80084e2 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>
  }
 8008066:	bf00      	nop
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	bd90      	pop	{r4, r7, pc}

0800806e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800806e:	b580      	push	{r7, lr}
 8008070:	b082      	sub	sp, #8
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4618      	mov	r0, r3
 800807c:	f7fc ffb5 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008080:	4603      	mov	r3, r0
    }
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4618      	mov	r0, r3
 8008098:	f7fc ffa7 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800809c:	4603      	mov	r3, r0
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	3310      	adds	r3, #16
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>:
struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode>
{
  typedef typename Product<Lhs,Rhs>::Scalar Scalar;

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08a      	sub	sp, #40	; 0x28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
  {
    // Same as: dst.noalias() = lhs.lazyProduct(rhs);
    // but easier on the compiler side
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80080e0:	f107 0310 	add.w	r3, r7, #16
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	68b9      	ldr	r1, [r7, #8]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 fa18 	bl	800851e <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>
 80080ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe ff03 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80080f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80080fc:	f107 0310 	add.w	r3, r7, #16
 8008100:	4619      	mov	r1, r3
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 fa22 	bl	800854c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008108:	bf00      	nop
 800810a:	3728      	adds	r7, #40	; 0x28
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4618      	mov	r0, r3
 800811c:	f000 fa27 	bl	800856e <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 8008120:	4603      	mov	r3, r0
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>:
      *          in a column-major matrix).
      *
      * \sa innerStride(), rowStride(), colStride()
      */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
    {
      return derived().outerStride();
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7fd fabd 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008138:	4603      	mov	r3, r0
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fa22 	bl	8008584 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8008140:	4603      	mov	r3, r0
    }
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8008172:	1d3b      	adds	r3, r7, #4
 8008174:	4618      	mov	r0, r3
 8008176:	f7fb ff9c 	bl	80040b2 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	603b      	str	r3, [r7, #0]
 8008192:	bf00      	nop
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800819e:	b5b0      	push	{r4, r5, r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689c      	ldr	r4, [r3, #8]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 f9f2 	bl	800859c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>
 80081b8:	4605      	mov	r5, r0
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 f9fb 	bl	80085bc <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>
 80081c6:	4603      	mov	r3, r0
 80081c8:	461a      	mov	r2, r3
 80081ca:	4629      	mov	r1, r5
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 fa05 	bl	80085dc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80081d2:	bf00      	nop
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bdb0      	pop	{r4, r5, r7, pc}

080081da <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80081e2:	2101      	movs	r1, #1
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff ffda 	bl	800819e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fa06 	bl	80085fc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>
  }
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4618      	mov	r0, r3
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8008234:	f107 0314 	add.w	r3, r7, #20
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	68b9      	ldr	r1, [r7, #8]
 800823c:	4618      	mov	r0, r3
 800823e:	f000 f9ec 	bl	800861a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8008242:	f107 031c 	add.w	r3, r7, #28
 8008246:	4618      	mov	r0, r3
 8008248:	f7fe fe59 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800824c:	f107 021c 	add.w	r2, r7, #28
 8008250:	f107 0314 	add.w	r3, r7, #20
 8008254:	4619      	mov	r1, r3
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 f9f6 	bl	8008648 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800825c:	bf00      	nop
 800825e:	3720      	adds	r7, #32
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>:
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	603b      	str	r3, [r7, #0]
 8008272:	bf00      	nop
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800827e:	b5b0      	push	{r4, r5, r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689c      	ldr	r4, [r3, #8]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	4618      	mov	r0, r3
 8008294:	f000 f9e9 	bl	800866a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8008298:	4605      	mov	r5, r0
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 f9f2 	bl	800868a <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>
 80082a6:	4603      	mov	r3, r0
 80082a8:	461a      	mov	r2, r3
 80082aa:	4629      	mov	r1, r5
 80082ac:	4620      	mov	r0, r4
 80082ae:	f000 f995 	bl	80085dc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80082b2:	bf00      	nop
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bdb0      	pop	{r4, r5, r7, pc}

080082ba <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80082c2:	2101      	movs	r1, #1
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff ffda 	bl	800827e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f9ed 	bl	80086aa <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>
  }
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4618      	mov	r0, r3
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>:
  {
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80082ee:	b590      	push	{r4, r7, lr}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
 80082f8:	687c      	ldr	r4, [r7, #4]
 80082fa:	6838      	ldr	r0, [r7, #0]
 80082fc:	f000 f9e4 	bl	80086c8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>
 8008300:	4603      	mov	r3, r0
 8008302:	4619      	mov	r1, r3
 8008304:	4620      	mov	r0, r4
 8008306:	f7fd fbe1 	bl	8005acc <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	1d1c      	adds	r4, r3, #4
 800830e:	6838      	ldr	r0, [r7, #0]
 8008310:	f000 f9e6 	bl	80086e0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>
 8008314:	4603      	mov	r3, r0
 8008316:	4619      	mov	r1, r3
 8008318:	4620      	mov	r0, r4
 800831a:	f000 f9f8 	bl	800870e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008324:	6838      	ldr	r0, [r7, #0]
 8008326:	f000 f9e6 	bl	80086f6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>
 800832a:	4603      	mov	r3, r0
 800832c:	4619      	mov	r1, r3
 800832e:	4620      	mov	r0, r4
 8008330:	f000 f9fc 	bl	800872c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4618      	mov	r0, r3
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	bd90      	pop	{r4, r7, pc}

0800833e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800833e:	b580      	push	{r7, lr}
 8008340:	b086      	sub	sp, #24
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	68b8      	ldr	r0, [r7, #8]
 800834e:	f000 f9fc 	bl	800874a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8008352:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8008354:	6879      	ldr	r1, [r7, #4]
 8008356:	68b8      	ldr	r0, [r7, #8]
 8008358:	f000 fa03 	bl	8008762 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800835c:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	6979      	ldr	r1, [r7, #20]
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 fa09 	bl	800877a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8008368:	bf00      	nop
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008378:	2201      	movs	r2, #1
 800837a:	2100      	movs	r1, #0
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff ffde 	bl	800833e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fa1f 	bl	80087c6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4618      	mov	r0, r3
 800839e:	f7fc fd7e 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80083a2:	4603      	mov	r3, r0
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index cols() const EIGEN_NOEXCEPT { return m_xpr.rows(); }
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fd fdc3 	bl	8005f42 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80083bc:	4603      	mov	r3, r0
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80083c6:	b480      	push	{r7}
 80083c8:	b083      	sub	sp, #12
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3308      	adds	r3, #8
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08c      	sub	sp, #48	; 0x30
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8008400:	f107 0310 	add.w	r3, r7, #16
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 f9ec 	bl	80087e6 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>
 800840e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fd73 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008418:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800841c:	f107 0310 	add.w	r3, r7, #16
 8008420:	4619      	mov	r1, r3
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 f9f6 	bl	8008814 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008428:	bf00      	nop
 800842a:	3730      	adds	r7, #48	; 0x30
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3304      	adds	r3, #4
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with addition
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4618      	mov	r0, r3
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008476:	b580      	push	{r7, lr}
 8008478:	b086      	sub	sp, #24
 800847a:	af00      	add	r7, sp, #0
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	68b9      	ldr	r1, [r7, #8]
 800848a:	6978      	ldr	r0, [r7, #20]
 800848c:	f000 f9d4 	bl	8008838 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008490:	bf00      	nop
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fc fcfa 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80084aa:	4603      	mov	r3, r0
    }
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4618      	mov	r0, r3
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	4618      	mov	r0, r3
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b08a      	sub	sp, #40	; 0x28
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	60b9      	str	r1, [r7, #8]
 80084ec:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80084ee:	f107 0310 	add.w	r3, r7, #16
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	68b9      	ldr	r1, [r7, #8]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 f9d8 	bl	80088ac <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>
 80084fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008500:	4618      	mov	r0, r3
 8008502:	f7fe fcfc 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008506:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800850a:	f107 0310 	add.w	r3, r7, #16
 800850e:	4619      	mov	r1, r3
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 f9e2 	bl	80088da <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008516:	bf00      	nop
 8008518:	3728      	adds	r7, #40	; 0x28
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived,OtherDerived,LazyProduct>
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800851e:	b590      	push	{r4, r7, lr}
 8008520:	b085      	sub	sp, #20
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	607a      	str	r2, [r7, #4]
    INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS)
  EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),
    INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)

  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800852a:	68b8      	ldr	r0, [r7, #8]
 800852c:	f7fd f821 	bl	8005572 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 8008530:	4604      	mov	r4, r0
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7fd f828 	bl	8005588 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8008538:	4603      	mov	r3, r0
 800853a:	461a      	mov	r2, r3
 800853c:	4621      	mov	r1, r4
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 fa00 	bl	8008944 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>
}
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	bd90      	pop	{r4, r7, pc}

0800854c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	68b9      	ldr	r1, [r7, #8]
 8008560:	6978      	ldr	r0, [r7, #20]
 8008562:	f000 fa1f 	bl	80089a4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 8008566:	bf00      	nop
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800856e:	b480      	push	{r7}
 8008570:	b083      	sub	sp, #12
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>:
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fa1c 	bl	80089ca <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>
 8008592:	4603      	mov	r3, r0
 8008594:	4618      	mov	r0, r3
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
  }
 80085b0:	4618      	mov	r0, r3
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
  }
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	bf00      	nop
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008604:	2102      	movs	r1, #2
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7ff fdc9 	bl	800819e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f9e8 	bl	80089e2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>
  }
 8008612:	bf00      	nop
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800861a:	b590      	push	{r4, r7, lr}
 800861c:	b085      	sub	sp, #20
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008626:	68b8      	ldr	r0, [r7, #8]
 8008628:	f7fd f843 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800862c:	4604      	mov	r4, r0
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7fc fe77 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8008634:	4603      	mov	r3, r0
 8008636:	461a      	mov	r2, r3
 8008638:	4621      	mov	r1, r4
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 fa04 	bl	8008a48 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>
}
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	bd90      	pop	{r4, r7, pc}

08008648 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	68b9      	ldr	r1, [r7, #8]
 800865c:	6978      	ldr	r0, [r7, #20]
 800865e:	f000 fa21 	bl	8008aa4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8008662:	bf00      	nop
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 800866a:	b480      	push	{r7}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
  }
 800867e:	4618      	mov	r0, r3
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 800868a:	b480      	push	{r7}
 800868c:	b083      	sub	sp, #12
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
  }
 800869e:	4618      	mov	r0, r3
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b082      	sub	sp, #8
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80086b2:	2102      	movs	r1, #2
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7ff fde2 	bl	800827e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fa05 	bl	8008aca <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>
  }
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3310      	adds	r3, #16
 80086d4:	4618      	mov	r0, r3
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4618      	mov	r0, r3
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	4618      	mov	r0, r3
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	6039      	str	r1, [r7, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	4618      	mov	r0, r3
 800871e:	f000 f9de 	bl	8008ade <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4618      	mov	r0, r3
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>:
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff f846 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	6039      	str	r1, [r7, #0]
      : inner;
 8008754:	683b      	ldr	r3, [r7, #0]
  }
 8008756:	4618      	mov	r0, r3
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
      : outer;
 800876c:	687b      	ldr	r3, [r7, #4]
  }
 800876e:	4618      	mov	r0, r3
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800877a:	b5b0      	push	{r4, r5, r7, lr}
 800877c:	b086      	sub	sp, #24
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	689c      	ldr	r4, [r3, #8]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	4618      	mov	r0, r3
 8008794:	f000 f9b2 	bl	8008afc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8008798:	4605      	mov	r5, r0
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	68b9      	ldr	r1, [r7, #8]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 f9c2 	bl	8008b2c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>
 80087a8:	eef0 7a40 	vmov.f32	s15, s0
 80087ac:	edc7 7a05 	vstr	s15, [r7, #20]
 80087b0:	f107 0314 	add.w	r3, r7, #20
 80087b4:	461a      	mov	r2, r3
 80087b6:	4629      	mov	r1, r5
 80087b8:	4620      	mov	r0, r4
 80087ba:	f7ff ff0f 	bl	80085dc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80087be:	bf00      	nop
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bdb0      	pop	{r4, r5, r7, pc}

080087c6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80087ce:	2202      	movs	r2, #2
 80087d0:	2100      	movs	r1, #0
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff fdb3 	bl	800833e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f9ce 	bl	8008b7a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 80087de:	bf00      	nop
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80087e6:	b590      	push	{r4, r7, lr}
 80087e8:	b085      	sub	sp, #20
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	60f8      	str	r0, [r7, #12]
 80087ee:	60b9      	str	r1, [r7, #8]
 80087f0:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80087f2:	68b8      	ldr	r0, [r7, #8]
 80087f4:	f7fd fbe9 	bl	8005fca <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 80087f8:	4604      	mov	r4, r0
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7fd fbf0 	bl	8005fe0 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 8008800:	4603      	mov	r3, r0
 8008802:	461a      	mov	r2, r3
 8008804:	4621      	mov	r1, r4
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 f9ec 	bl	8008be4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>
}
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	bd90      	pop	{r4, r7, pc}

08008814 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	68b9      	ldr	r1, [r7, #8]
 8008828:	6978      	ldr	r0, [r7, #20]
 800882a:	f000 fa0d 	bl	8008c48 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 800882e:	bf00      	nop
 8008830:	3718      	adds	r7, #24
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
	...

08008838 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<Scalar,Scalar> &)
 8008838:	b590      	push	{r4, r7, lr}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4618      	mov	r0, r3
 8008848:	f7fc fbcf 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800884c:	4604      	mov	r4, r0
 800884e:	68b8      	ldr	r0, [r7, #8]
 8008850:	f7fd fdd7 	bl	8006402 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 8008854:	4603      	mov	r3, r0
 8008856:	429c      	cmp	r4, r3
 8008858:	d10a      	bne.n	8008870 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x38>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4618      	mov	r0, r3
 800885e:	f7fc fbb9 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008862:	4604      	mov	r4, r0
 8008864:	68b8      	ldr	r0, [r7, #8]
 8008866:	f7fd fdda 	bl	800641e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 800886a:	4603      	mov	r3, r0
 800886c:	429c      	cmp	r4, r3
 800886e:	d005      	beq.n	800887c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x44>
 8008870:	4b0b      	ldr	r3, [pc, #44]	; (80088a0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x68>)
 8008872:	4a0c      	ldr	r2, [pc, #48]	; (80088a4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x6c>)
 8008874:	21a1      	movs	r1, #161	; 0xa1
 8008876:	480c      	ldr	r0, [pc, #48]	; (80088a8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x70>)
 8008878:	f015 fa08 	bl	801dc8c <__assert_func>
    generic_product_impl<Lhs, Rhs>::addTo(dst, src.lhs(), src.rhs());
 800887c:	68b8      	ldr	r0, [r7, #8]
 800887e:	f000 f9f6 	bl	8008c6e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>
 8008882:	4604      	mov	r4, r0
 8008884:	68b8      	ldr	r0, [r7, #8]
 8008886:	f000 f9fe 	bl	8008c86 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>
 800888a:	4603      	mov	r3, r0
 800888c:	461a      	mov	r2, r3
 800888e:	4621      	mov	r1, r4
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 fa04 	bl	8008c9e <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>
  }
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	bd90      	pop	{r4, r7, pc}
 800889e:	bf00      	nop
 80088a0:	08022888 	.word	0x08022888
 80088a4:	080228c0 	.word	0x080228c0
 80088a8:	08022d80 	.word	0x08022d80

080088ac <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80088ac:	b590      	push	{r4, r7, lr}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80088b8:	68b8      	ldr	r0, [r7, #8]
 80088ba:	f7fd feed 	bl	8006698 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 80088be:	4604      	mov	r4, r0
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7fc fef6 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80088c6:	4603      	mov	r3, r0
 80088c8:	461a      	mov	r2, r3
 80088ca:	4621      	mov	r1, r4
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 fa29 	bl	8008d24 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>
}
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd90      	pop	{r4, r7, pc}

080088da <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80088da:	b580      	push	{r7, lr}
 80088dc:	b086      	sub	sp, #24
 80088de:	af00      	add	r7, sp, #0
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	68b9      	ldr	r1, [r7, #8]
 80088ee:	6978      	ldr	r0, [r7, #20]
 80088f0:	f000 fa46 	bl	8008d80 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 80088f4:	bf00      	nop
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fa4e 	bl	8008da6 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4618      	mov	r0, r3
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>:
class dense_product_base
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7ff ffed 	bl	80088fc <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4618      	mov	r0, r3
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff ffed 	bl	8008914 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008944:	b590      	push	{r4, r7, lr}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f7ff ffeb 	bl	800892c <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	4618      	mov	r0, r3
 800895c:	f7fb fe5d 	bl	800461a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3310      	adds	r3, #16
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	6812      	ldr	r2, [r2, #0]
 8008968:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800896a:	68b8      	ldr	r0, [r7, #8]
 800896c:	f7fc fe3b 	bl	80055e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8008970:	4604      	mov	r4, r0
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7fc fe45 	bl	8005602 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008978:	4603      	mov	r3, r0
 800897a:	429c      	cmp	r4, r3
 800897c:	d005      	beq.n	800898a <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x46>
 800897e:	4b06      	ldr	r3, [pc, #24]	; (8008998 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x54>)
 8008980:	4a06      	ldr	r2, [pc, #24]	; (800899c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x58>)
 8008982:	2160      	movs	r1, #96	; 0x60
 8008984:	4806      	ldr	r0, [pc, #24]	; (80089a0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x5c>)
 8008986:	f015 f981 	bl	801dc8c <__assert_func>
 800898a:	bf00      	nop
    }
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	4618      	mov	r0, r3
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	bd90      	pop	{r4, r7, pc}
 8008996:	bf00      	nop
 8008998:	0801fdb4 	.word	0x0801fdb4
 800899c:	08022de0 	.word	0x08022de0
 80089a0:	08020104 	.word	0x08020104

080089a4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80089b0:	68b9      	ldr	r1, [r7, #8]
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f000 fa02 	bl	8008dbc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	68b9      	ldr	r1, [r7, #8]
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 fab3 	bl	8008f28 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80089c2:	bf00      	nop
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fae0 	bl	8008f98 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80089d8:	4603      	mov	r3, r0
    }
 80089da:	4618      	mov	r0, r3
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b082      	sub	sp, #8
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80089ea:	2103      	movs	r1, #3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7ff fbd6 	bl	800819e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fae0 	bl	8008fb8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>
  }
 80089f8:	bf00      	nop
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fae4 	bl	8008fd6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>:
class dense_product_base
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7ff ffed 	bl	8008a00 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff ffed 	bl	8008a18 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4618      	mov	r0, r3
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008a48:	b590      	push	{r4, r7, lr}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f7ff ffeb 	bl	8008a30 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fc fa0d 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008a6e:	4604      	mov	r4, r0
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fc fab9 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	429c      	cmp	r4, r3
 8008a7c:	d005      	beq.n	8008a8a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x42>
 8008a7e:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x50>)
 8008a80:	4a06      	ldr	r2, [pc, #24]	; (8008a9c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x54>)
 8008a82:	2160      	movs	r1, #96	; 0x60
 8008a84:	4806      	ldr	r0, [pc, #24]	; (8008aa0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x58>)
 8008a86:	f015 f901 	bl	801dc8c <__assert_func>
 8008a8a:	bf00      	nop
    }
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd90      	pop	{r4, r7, pc}
 8008a96:	bf00      	nop
 8008a98:	0801fdb4 	.word	0x0801fdb4
 8008a9c:	080230a4 	.word	0x080230a4
 8008aa0:	08020104 	.word	0x08020104

08008aa4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008ab0:	68b9      	ldr	r1, [r7, #8]
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f000 fa9a 	bl	8008fec <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	68b9      	ldr	r1, [r7, #8]
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 fac3 	bl	8009048 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008ac2:	bf00      	nop
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8008aca:	b480      	push	{r7}
 8008acc:	b083      	sub	sp, #12
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	bf00      	nop
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b082      	sub	sp, #8
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	6039      	str	r1, [r7, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 fae3 	bl	80090b8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4618      	mov	r0, r3
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8008afc:	b590      	push	{r4, r7, lr}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681c      	ldr	r4, [r3, #0]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 fb0f 	bl	8009132 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008b14:	4602      	mov	r2, r0
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	fb03 f202 	mul.w	r2, r3, r2
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	4413      	add	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4423      	add	r3, r4
  }
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd90      	pop	{r4, r7, pc}

08008b2c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8008b2c:	b5b0      	push	{r4, r5, r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fb04 	bl	8009148 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>
 8008b40:	4604      	mov	r4, r0
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3304      	adds	r3, #4
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	68b9      	ldr	r1, [r7, #8]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 fb07 	bl	800915e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>
 8008b50:	4605      	mov	r5, r0
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	332c      	adds	r3, #44	; 0x2c
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	68b9      	ldr	r1, [r7, #8]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fb17 	bl	800918e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>
 8008b60:	4603      	mov	r3, r0
 8008b62:	461a      	mov	r2, r3
 8008b64:	4629      	mov	r1, r5
 8008b66:	4620      	mov	r0, r4
 8008b68:	f000 fb29 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8008b6c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008b70:	eeb0 0a67 	vmov.f32	s0, s15
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bdb0      	pop	{r4, r5, r7, pc}

08008b7a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008b82:	2200      	movs	r2, #0
 8008b84:	2101      	movs	r1, #1
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7ff fbd9 	bl	800833e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fb2b 	bl	80091e8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 8008b92:	bf00      	nop
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fb30 	bl	8009208 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>:
class dense_product_base
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7ff ffed 	bl	8008b9a <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff ffed 	bl	8008bb2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008be4:	b590      	push	{r4, r7, lr}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f7ff ffea 	bl	8008bca <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008bfe:	e883 0003 	stmia.w	r3, {r0, r1}
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	3308      	adds	r3, #8
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7fb feb9 	bl	8004980 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8008c0e:	68b8      	ldr	r0, [r7, #8]
 8008c10:	f7fd fa15 	bl	800603e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8008c14:	4604      	mov	r4, r0
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7fd fa1f 	bl	800605a <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	429c      	cmp	r4, r3
 8008c20:	d005      	beq.n	8008c2e <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x4a>
 8008c22:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x58>)
 8008c24:	4a06      	ldr	r2, [pc, #24]	; (8008c40 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x5c>)
 8008c26:	2160      	movs	r1, #96	; 0x60
 8008c28:	4806      	ldr	r0, [pc, #24]	; (8008c44 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x60>)
 8008c2a:	f015 f82f 	bl	801dc8c <__assert_func>
 8008c2e:	bf00      	nop
    }
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd90      	pop	{r4, r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	0801fdb4 	.word	0x0801fdb4
 8008c40:	080231cc 	.word	0x080231cc
 8008c44:	08020104 	.word	0x08020104

08008c48 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008c54:	68b9      	ldr	r1, [r7, #8]
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 fae1 	bl	800921e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	68b9      	ldr	r1, [r7, #8]
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 fb23 	bl	80092ac <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008c66:	bf00      	nop
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008c6e:	b480      	push	{r7}
 8008c70:	b083      	sub	sp, #12
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008c86:	b480      	push	{r7}
 8008c88:	b083      	sub	sp, #12
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3304      	adds	r3, #4
 8008c92:	4618      	mov	r0, r3
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>:

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b08a      	sub	sp, #40	; 0x28
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	607a      	str	r2, [r7, #4]
  {
    // dst.noalias() += lhs.lazyProduct(rhs);
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::add_assign_op<typename Dst::Scalar,Scalar>());
 8008caa:	f107 0310 	add.w	r3, r7, #16
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	68b9      	ldr	r1, [r7, #8]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 fb32 	bl	800931c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>
 8008cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff fbcf 	bl	8008460 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8008cc2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008cc6:	f107 0310 	add.w	r3, r7, #16
 8008cca:	4619      	mov	r1, r3
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 fb3c 	bl	800934a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008cd2:	bf00      	nop
 8008cd4:	3728      	adds	r7, #40	; 0x28
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fb42 	bl	800936c <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4618      	mov	r0, r3
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>:
class dense_product_base
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7ff ffed 	bl	8008cda <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b082      	sub	sp, #8
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7ff ffed 	bl	8008cf2 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
	...

08008d24 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f7ff ffea 	bl	8008d0a <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	68b9      	ldr	r1, [r7, #8]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fb ff39 	bl	8004bb2 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 8008d46:	68b8      	ldr	r0, [r7, #8]
 8008d48:	f7fd fcd5 	bl	80066f6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fc f8a4 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008d56:	4603      	mov	r3, r0
 8008d58:	429c      	cmp	r4, r3
 8008d5a:	d005      	beq.n	8008d68 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x44>
 8008d5c:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x50>)
 8008d5e:	4a06      	ldr	r2, [pc, #24]	; (8008d78 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x54>)
 8008d60:	2160      	movs	r1, #96	; 0x60
 8008d62:	4806      	ldr	r0, [pc, #24]	; (8008d7c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x58>)
 8008d64:	f014 ff92 	bl	801dc8c <__assert_func>
 8008d68:	bf00      	nop
    }
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd90      	pop	{r4, r7, pc}
 8008d74:	0801fdb4 	.word	0x0801fdb4
 8008d78:	08023554 	.word	0x08023554
 8008d7c:	08020104 	.word	0x08020104

08008d80 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 faf7 	bl	8009382 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 fb35 	bl	8009408 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008d9e:	bf00      	nop
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
    }
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4618      	mov	r0, r3
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fc f868 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	dd08      	ble.n	8008de6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fc f856 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	dd01      	ble.n	8008de6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e000      	b.n	8008de8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2c>
 8008de6:	2300      	movs	r3, #0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fb42 	bl	8009478 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>
}
 8008df4:	bf00      	nop
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct evaluator<const T>
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fc fa5b 	bl	80052c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fb5a 	bl	80094d8 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<const T>
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b082      	sub	sp, #8
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff ffec 	bl	8008e16 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4618      	mov	r0, r3
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	3308      	adds	r3, #8
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff ffea 	bl	8008e2e <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7ff ffcc 	bl	8008dfc <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b082      	sub	sp, #8
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7ff ffe5 	bl	8008e48 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fb1f 	bl	80094c2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff ffe8 	bl	8008e6e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fc fa05 	bl	80052c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fb18 	bl	80094ee <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7ff ffe8 	bl	8008ea8 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>:

template<int StorageOrder, int UnrollingIndex, typename Lhs, typename Rhs, typename Packet, int LoadMode>
struct etor_product_packet_impl;

template<typename Lhs, typename Rhs, int ProductTag>
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	3324      	adds	r3, #36	; 0x24
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff ffea 	bl	8008ec8 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	3314      	adds	r3, #20
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff ffc8 	bl	8008e8e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fad4 	bl	80094ac <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b082      	sub	sp, #8
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7ff ffe2 	bl	8008ee2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4618      	mov	r0, r3
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b096      	sub	sp, #88	; 0x58
 8008f2c:	af02      	add	r7, sp, #8
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8008f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f38:	68b9      	ldr	r1, [r7, #8]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 faa7 	bl	800948e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>
  resize_if_allowed(dst, src, func);
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	68b9      	ldr	r1, [r7, #8]
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f000 faf9 	bl	800953c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8008f4a:	f107 0320 	add.w	r3, r7, #32
 8008f4e:	68f9      	ldr	r1, [r7, #12]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fe fc3b 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f7fe fca0 	bl	800789c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008f62:	f107 0120 	add.w	r1, r7, #32
 8008f66:	f107 0010 	add.w	r0, r7, #16
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f000 fb2f 	bl	80095d0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8008f72:	f107 0310 	add.w	r3, r7, #16
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 fb44 	bl	8009604 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>
  DstEvaluatorType dstEvaluator(dst);
 8008f7c:	f107 0320 	add.w	r3, r7, #32
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe fa14 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7ff ffbf 	bl	8008f0e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
}
 8008f90:	bf00      	nop
 8008f92:	3750      	adds	r7, #80	; 0x50
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7fc fb86 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fb ff78 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008fc0:	2104      	movs	r1, #4
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff f8eb 	bl	800819e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fb26 	bl	800961a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>
  }
 8008fce:	bf00      	nop
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008fd6:	b480      	push	{r7}
 8008fd8:	b083      	sub	sp, #12
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
    }
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8009002:	b580      	push	{r7, lr}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	330c      	adds	r3, #12
 800900e:	4618      	mov	r0, r3
 8009010:	f7fc f957 	bl	80052c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	3308      	adds	r3, #8
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe f9c8 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fb19 	bl	8009656 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4618      	mov	r0, r3
 800903a:	f7ff ffe2 	bl	8009002 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4618      	mov	r0, r3
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009048:	b580      	push	{r7, lr}
 800904a:	b090      	sub	sp, #64	; 0x40
 800904c:	af02      	add	r7, sp, #8
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009058:	68b9      	ldr	r1, [r7, #8]
 800905a:	4618      	mov	r0, r3
 800905c:	f000 faec 	bl	8009638 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	68b9      	ldr	r1, [r7, #8]
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 fb1d 	bl	80096a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800906a:	f107 0320 	add.w	r3, r7, #32
 800906e:	68f9      	ldr	r1, [r7, #12]
 8009070:	4618      	mov	r0, r3
 8009072:	f7fd fc60 	bl	8006936 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f7fe fc9e 	bl	80079b8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800907c:	4603      	mov	r3, r0
 800907e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009082:	f107 0120 	add.w	r1, r7, #32
 8009086:	f107 0010 	add.w	r0, r7, #16
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f000 fb53 	bl	8009738 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009092:	f107 0310 	add.w	r3, r7, #16
 8009096:	4618      	mov	r0, r3
 8009098:	f000 fb68 	bl	800976c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 800909c:	f107 0320 	add.w	r3, r7, #32
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fc f90e 	bl	80052c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80090a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7ff ffbf 	bl	800902e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
}
 80090b0:	bf00      	nop
 80090b2:	3738      	adds	r7, #56	; 0x38
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 80090b8:	b5b0      	push	{r4, r5, r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 fb5c 	bl	8009782 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	1d1c      	adds	r4, r3, #4
 80090ce:	6838      	ldr	r0, [r7, #0]
 80090d0:	f7fc fca0 	bl	8005a14 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 80090d4:	4603      	mov	r3, r0
 80090d6:	60bb      	str	r3, [r7, #8]
 80090d8:	6838      	ldr	r0, [r7, #0]
 80090da:	f7fc fca8 	bl	8005a2e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 80090de:	4603      	mov	r3, r0
 80090e0:	60fb      	str	r3, [r7, #12]
 80090e2:	f107 020c 	add.w	r2, r7, #12
 80090e6:	f107 0308 	add.w	r3, r7, #8
 80090ea:	4619      	mov	r1, r3
 80090ec:	4620      	mov	r0, r4
 80090ee:	f000 fb55 	bl	800979c <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4619      	mov	r1, r3
 80090f6:	2004      	movs	r0, #4
 80090f8:	f7f7 ff10 	bl	8000f1c <_ZnwjPv>
 80090fc:	4602      	mov	r2, r0
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	3304      	adds	r3, #4
 8009102:	4619      	mov	r1, r3
 8009104:	4610      	mov	r0, r2
 8009106:	f000 fb62 	bl	80097ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	1d1c      	adds	r4, r3, #4
 800910e:	6838      	ldr	r0, [r7, #0]
 8009110:	f000 fb6d 	bl	80097ee <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 8009114:	4605      	mov	r5, r0
 8009116:	6838      	ldr	r0, [r7, #0]
 8009118:	f000 fb74 	bl	8009804 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 800911c:	4603      	mov	r3, r0
 800911e:	461a      	mov	r2, r3
 8009120:	4629      	mov	r1, r5
 8009122:	4620      	mov	r0, r4
 8009124:	f000 fb7a 	bl	800981c <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>
  }
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bdb0      	pop	{r4, r5, r7, pc}

08009132 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 8009132:	b480      	push	{r7}
 8009134:	b083      	sub	sp, #12
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	2303      	movs	r3, #3
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const BinaryOp& func() const { return op; }
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4618      	mov	r0, r3
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800915e:	b590      	push	{r4, r7, lr}
 8009160:	b085      	sub	sp, #20
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681c      	ldr	r4, [r3, #0]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4618      	mov	r0, r3
 8009172:	f7ff ffde 	bl	8009132 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8009176:	4602      	mov	r2, r0
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	fb03 f202 	mul.w	r2, r3, r2
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4413      	add	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4423      	add	r3, r4
  }
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	bd90      	pop	{r4, r7, pc}

0800918e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800918e:	b590      	push	{r4, r7, lr}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	60f8      	str	r0, [r7, #12]
 8009196:	60b9      	str	r1, [r7, #8]
 8009198:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681c      	ldr	r4, [r3, #0]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7ff ffc6 	bl	8009132 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 80091a6:	4602      	mov	r2, r0
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	fb03 f202 	mul.w	r2, r3, r2
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	4413      	add	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4423      	add	r3, r4
  }
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd90      	pop	{r4, r7, pc}

080091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 80091be:	b480      	push	{r7}
 80091c0:	b085      	sub	sp, #20
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	ed93 7a00 	vldr	s14, [r3]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	edd3 7a00 	vldr	s15, [r3]
 80091d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091da:	eeb0 0a67 	vmov.f32	s0, s15
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80091f0:	2201      	movs	r2, #1
 80091f2:	2101      	movs	r1, #1
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7ff f8a2 	bl	800833e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fb2c 	bl	8009858 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
    }
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	6039      	str	r1, [r7, #0]
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fb35 	bl	80098ac <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff ffec 	bl	8009234 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4618      	mov	r0, r3
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	3314      	adds	r3, #20
 8009272:	4618      	mov	r0, r3
 8009274:	f7ff ffea 	bl	800924c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	3310      	adds	r3, #16
 800927c:	4618      	mov	r0, r3
 800927e:	f7fc f820 	bl	80052c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fb07 	bl	8009896 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4618      	mov	r0, r3
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8009292:	b580      	push	{r7, lr}
 8009294:	b082      	sub	sp, #8
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4618      	mov	r0, r3
 800929e:	f7ff ffe2 	bl	8009266 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4618      	mov	r0, r3
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b092      	sub	sp, #72	; 0x48
 80092b0:	af02      	add	r7, sp, #8
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80092b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092bc:	68b9      	ldr	r1, [r7, #8]
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 fada 	bl	8009878 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>
  resize_if_allowed(dst, src, func);
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	68b9      	ldr	r1, [r7, #8]
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f000 fb15 	bl	80098f8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80092ce:	f107 0320 	add.w	r3, r7, #32
 80092d2:	68f9      	ldr	r1, [r7, #12]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fd fb2e 	bl	8006936 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f7fe fb6c 	bl	80079b8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 80092e0:	4603      	mov	r3, r0
 80092e2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80092e6:	f107 0120 	add.w	r1, r7, #32
 80092ea:	f107 0010 	add.w	r0, r7, #16
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f000 fb4b 	bl	800998c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80092f6:	f107 0310 	add.w	r3, r7, #16
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 fb60 	bl	80099c0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>
  DstEvaluatorType dstEvaluator(dst);
 8009300:	f107 0320 	add.w	r3, r7, #32
 8009304:	4618      	mov	r0, r3
 8009306:	f7fb ffdc 	bl	80052c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800930a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800930e:	4618      	mov	r0, r3
 8009310:	f7ff ffbf 	bl	8009292 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
}
 8009314:	bf00      	nop
 8009316:	3740      	adds	r7, #64	; 0x40
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800931c:	b590      	push	{r4, r7, lr}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8009328:	68b8      	ldr	r0, [r7, #8]
 800932a:	f7fb fffa 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800932e:	4604      	mov	r4, r0
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7fc ffd5 	bl	80062e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 8009336:	4603      	mov	r3, r0
 8009338:	461a      	mov	r2, r3
 800933a:	4621      	mov	r1, r4
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 fb6f 	bl	8009a20 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>
}
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	3714      	adds	r7, #20
 8009346:	46bd      	mov	sp, r7
 8009348:	bd90      	pop	{r4, r7, pc}

0800934a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800934a:	b580      	push	{r7, lr}
 800934c:	b086      	sub	sp, #24
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	68b9      	ldr	r1, [r7, #8]
 800935e:	6978      	ldr	r0, [r7, #20]
 8009360:	f000 fb8e 	bl	8009a80 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8009364:	bf00      	nop
 8009366:	3718      	adds	r7, #24
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
    }
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4618      	mov	r0, r3
 8009390:	f7fb fd85 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009394:	4603      	mov	r3, r0
 8009396:	2b01      	cmp	r3, #1
 8009398:	dd08      	ble.n	80093ac <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4618      	mov	r0, r3
 800939e:	f7fb fd73 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	dd01      	ble.n	80093ac <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2c>
 80093ac:	2300      	movs	r3, #0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fb76 	bl	8009aa6 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>
}
 80093ba:	bf00      	nop
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b082      	sub	sp, #8
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	332c      	adds	r3, #44	; 0x2c
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fd ffed 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3328      	adds	r3, #40	; 0x28
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fd ffe8 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fb7b 	bl	8009ada <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4618      	mov	r0, r3
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7ff ffe2 	bl	80093c2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4618      	mov	r0, r3
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009408:	b580      	push	{r7, lr}
 800940a:	b098      	sub	sp, #96	; 0x60
 800940c:	af02      	add	r7, sp, #8
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009418:	68b9      	ldr	r1, [r7, #8]
 800941a:	4618      	mov	r0, r3
 800941c:	f000 fb4e 	bl	8009abc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	68b9      	ldr	r1, [r7, #8]
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f000 fb7f 	bl	8009b28 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800942a:	f107 0320 	add.w	r3, r7, #32
 800942e:	68f9      	ldr	r1, [r7, #12]
 8009430:	4618      	mov	r0, r3
 8009432:	f7fe f9cb 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f7fe fa30 	bl	800789c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 800943c:	4603      	mov	r3, r0
 800943e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009442:	f107 0120 	add.w	r1, r7, #32
 8009446:	f107 0010 	add.w	r0, r7, #16
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f000 fbb5 	bl	8009bbc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009452:	f107 0310 	add.w	r3, r7, #16
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fbca 	bl	8009bf0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 800945c:	f107 0320 	add.w	r3, r7, #32
 8009460:	4618      	mov	r0, r3
 8009462:	f7fd ffa4 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8009466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800946a:	4618      	mov	r0, r3
 800946c:	f7ff ffbf 	bl	80093ee <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
}
 8009470:	bf00      	nop
 8009472:	3758      	adds	r7, #88	; 0x58
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>:
    static void run(const Derived&, const OtherDerived&)
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
    }
 8009482:	bf00      	nop
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800948e:	b580      	push	{r7, lr}
 8009490:	b082      	sub	sp, #8
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	6039      	str	r1, [r7, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fbb2 	bl	8009c06 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4618      	mov	r0, r3
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4618      	mov	r0, r3
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
 80094c2:	b480      	push	{r7}
 80094c4:	b083      	sub	sp, #12
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4618      	mov	r0, r3
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 80094ee:	b480      	push	{r7}
 80094f0:	b083      	sub	sp, #12
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4618      	mov	r0, r3
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe fdad 	bl	800806e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8009514:	4603      	mov	r3, r0
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3310      	adds	r3, #16
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe fdad 	bl	800808a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009530:	4603      	mov	r3, r0
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009548:	68b8      	ldr	r0, [r7, #8]
 800954a:	f7ff ffdb 	bl	8009504 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>
 800954e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009550:	68b8      	ldr	r0, [r7, #8]
 8009552:	f7ff ffe4 	bl	800951e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>
 8009556:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	4618      	mov	r0, r3
 800955c:	f7fb fc9f 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009560:	4602      	mov	r2, r0
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	4293      	cmp	r3, r2
 8009566:	d107      	bne.n	8009578 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	4618      	mov	r0, r3
 800956c:	f7fb fc8c 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009570:	4602      	mov	r2, r0
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	4293      	cmp	r3, r2
 8009576:	d001      	beq.n	800957c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009578:	2301      	movs	r3, #1
 800957a:	e000      	b.n	800957e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800957c:	2300      	movs	r3, #0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	6979      	ldr	r1, [r7, #20]
 8009588:	4618      	mov	r0, r3
 800958a:	f7fe fba1 	bl	8007cd0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	4618      	mov	r0, r3
 8009592:	f7fb fc84 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009596:	4602      	mov	r2, r0
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	4293      	cmp	r3, r2
 800959c:	d107      	bne.n	80095ae <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7fb fc71 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80095a6:	4602      	mov	r2, r0
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d006      	beq.n	80095bc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80095ae:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80095b0:	4a05      	ldr	r2, [pc, #20]	; (80095c8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80095b2:	f240 21fd 	movw	r1, #765	; 0x2fd
 80095b6:	4805      	ldr	r0, [pc, #20]	; (80095cc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80095b8:	f014 fb68 	bl	801dc8c <__assert_func>
}
 80095bc:	bf00      	nop
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	0802216c 	.word	0x0802216c
 80095c8:	080237c0 	.word	0x080237c0
 80095cc:	08022280 	.word	0x08022280

080095d0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	605a      	str	r2, [r3, #4]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	609a      	str	r2, [r3, #8]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	69ba      	ldr	r2, [r7, #24]
 80095f4:	60da      	str	r2, [r3, #12]
  }
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	4618      	mov	r0, r3
 80095fa:	3714      	adds	r7, #20
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 fb32 	bl	8009c76 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>
  }
 8009612:	bf00      	nop
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800961a:	b580      	push	{r7, lr}
 800961c:	b082      	sub	sp, #8
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009622:	2105      	movs	r1, #5
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7fe fdba 	bl	800819e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fb33 	bl	8009c96 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>
  }
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>:
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	4618      	mov	r0, r3
 8009648:	f000 fb34 	bl	8009cb4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
 8009656:	b480      	push	{r7}
 8009658:	b083      	sub	sp, #12
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4618      	mov	r0, r3
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4618      	mov	r0, r3
 800967a:	f7fb fc10 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800967e:	4603      	mov	r3, r0
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	4618      	mov	r0, r3
 8009696:	f7fb fc9d 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800969a:	4603      	mov	r3, r0
 800969c:	4618      	mov	r0, r3
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80096b0:	68b8      	ldr	r0, [r7, #8]
 80096b2:	f7ff ffdb 	bl	800966c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>
 80096b6:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80096b8:	68b8      	ldr	r0, [r7, #8]
 80096ba:	f7ff ffe5 	bl	8009688 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>
 80096be:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fb fc91 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80096c8:	4602      	mov	r2, r0
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d107      	bne.n	80096e0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fb fc7e 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80096d8:	4602      	mov	r2, r0
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	4293      	cmp	r3, r2
 80096de:	d001      	beq.n	80096e4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80096e0:	2301      	movs	r3, #1
 80096e2:	e000      	b.n	80096e6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80096e4:	2300      	movs	r3, #0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d005      	beq.n	80096f6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	6979      	ldr	r1, [r7, #20]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fe fb85 	bl	8007e00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fb fc76 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80096fe:	4602      	mov	r2, r0
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	4293      	cmp	r3, r2
 8009704:	d107      	bne.n	8009716 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4618      	mov	r0, r3
 800970a:	f7fb fc63 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800970e:	4602      	mov	r2, r0
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	4293      	cmp	r3, r2
 8009714:	d006      	beq.n	8009724 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009716:	4b05      	ldr	r3, [pc, #20]	; (800972c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009718:	4a05      	ldr	r2, [pc, #20]	; (8009730 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800971a:	f240 21fd 	movw	r1, #765	; 0x2fd
 800971e:	4805      	ldr	r0, [pc, #20]	; (8009734 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009720:	f014 fab4 	bl	801dc8c <__assert_func>
}
 8009724:	bf00      	nop
 8009726:	3718      	adds	r7, #24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	0802216c 	.word	0x0802216c
 8009730:	080239a0 	.word	0x080239a0
 8009734:	08022280 	.word	0x08022280

08009738 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
 8009744:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	605a      	str	r2, [r3, #4]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	609a      	str	r2, [r3, #8]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	60da      	str	r2, [r3, #12]
  }
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	4618      	mov	r0, r3
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fad2 	bl	8009d1e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 800977a:	bf00      	nop
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
  evaluator() {}
 8009782:	b580      	push	{r7, lr}
 8009784:	b082      	sub	sp, #8
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fad5 	bl	8009d3c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4618      	mov	r0, r3
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
    {
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 fae4 	bl	8009d78 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 80097b0:	f000 faf2 	bl	8009d98 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	6819      	ldr	r1, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	2300      	movs	r3, #0
 80097c0:	f000 faf1 	bl	8009da6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	4611      	mov	r1, r2
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 faf5 	bl	8009dce <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>
  { }
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4618      	mov	r0, r3
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3308      	adds	r3, #8
 8009810:	4618      	mov	r0, r3
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8009828:	f107 0310 	add.w	r3, r7, #16
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	68b9      	ldr	r1, [r7, #8]
 8009830:	4618      	mov	r0, r3
 8009832:	f000 fae7 	bl	8009e04 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>
 8009836:	f107 031c 	add.w	r3, r7, #28
 800983a:	4618      	mov	r0, r3
 800983c:	f7fd fb5f 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8009840:	f107 021c 	add.w	r2, r7, #28
 8009844:	f107 0310 	add.w	r3, r7, #16
 8009848:	4619      	mov	r1, r3
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f000 faf1 	bl	8009e32 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009850:	bf00      	nop
 8009852:	3720      	adds	r7, #32
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009860:	2202      	movs	r2, #2
 8009862:	2101      	movs	r1, #1
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7fe fd6a 	bl	800833e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 faf2 	bl	8009e54 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 8009870:	bf00      	nop
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	4618      	mov	r0, r3
 8009888:	f000 faf4 	bl	8009e74 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4618      	mov	r0, r3
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4618      	mov	r0, r3
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4618      	mov	r0, r3
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b082      	sub	sp, #8
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fe fd5f 	bl	8008390 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 80098d2:	4603      	mov	r3, r0
 80098d4:	4618      	mov	r0, r3
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	3308      	adds	r3, #8
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe fd5f 	bl	80083ac <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 80098ee:	4603      	mov	r3, r0
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009904:	68b8      	ldr	r0, [r7, #8]
 8009906:	f7ff ffdc 	bl	80098c2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>
 800990a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800990c:	68b8      	ldr	r0, [r7, #8]
 800990e:	f7ff ffe5 	bl	80098dc <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>
 8009912:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4618      	mov	r0, r3
 8009918:	f7fb fb67 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800991c:	4602      	mov	r2, r0
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	4293      	cmp	r3, r2
 8009922:	d107      	bne.n	8009934 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	4618      	mov	r0, r3
 8009928:	f7fb fb54 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800992c:	4602      	mov	r2, r0
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	4293      	cmp	r3, r2
 8009932:	d001      	beq.n	8009938 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009934:	2301      	movs	r3, #1
 8009936:	e000      	b.n	800993a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009938:	2300      	movs	r3, #0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d005      	beq.n	800994a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	693a      	ldr	r2, [r7, #16]
 8009942:	6979      	ldr	r1, [r7, #20]
 8009944:	4618      	mov	r0, r3
 8009946:	f7fe fa5b 	bl	8007e00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	4618      	mov	r0, r3
 800994e:	f7fb fb4c 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009952:	4602      	mov	r2, r0
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	4293      	cmp	r3, r2
 8009958:	d107      	bne.n	800996a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	4618      	mov	r0, r3
 800995e:	f7fb fb39 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009962:	4602      	mov	r2, r0
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	4293      	cmp	r3, r2
 8009968:	d006      	beq.n	8009978 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800996a:	4b05      	ldr	r3, [pc, #20]	; (8009980 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800996c:	4a05      	ldr	r2, [pc, #20]	; (8009984 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800996e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009972:	4805      	ldr	r0, [pc, #20]	; (8009988 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009974:	f014 f98a 	bl	801dc8c <__assert_func>
}
 8009978:	bf00      	nop
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	0802216c 	.word	0x0802216c
 8009984:	08023ab4 	.word	0x08023ab4
 8009988:	08022280 	.word	0x08022280

0800998c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
 8009998:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	605a      	str	r2, [r3, #4]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	609a      	str	r2, [r3, #8]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	69ba      	ldr	r2, [r7, #24]
 80099b0:	60da      	str	r2, [r3, #12]
  }
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	4618      	mov	r0, r3
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fa8e 	bl	8009eea <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>
  }
 80099ce:	bf00      	nop
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b082      	sub	sp, #8
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fa92 	bl	8009f08 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>:
class dense_product_base
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7ff ffed 	bl	80099d6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4618      	mov	r0, r3
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b082      	sub	sp, #8
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7ff ffed 	bl	80099ee <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8009a20:	b590      	push	{r4, r7, lr}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f7ff ffea 	bl	8009a06 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	3304      	adds	r3, #4
 8009a3c:	6879      	ldr	r1, [r7, #4]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fb f809 	bl	8004a56 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fb fac4 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7fc fc75 	bl	800633e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8009a54:	4603      	mov	r3, r0
 8009a56:	429c      	cmp	r4, r3
 8009a58:	d005      	beq.n	8009a66 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x46>
 8009a5a:	4b06      	ldr	r3, [pc, #24]	; (8009a74 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x54>)
 8009a5c:	4a06      	ldr	r2, [pc, #24]	; (8009a78 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x58>)
 8009a5e:	2160      	movs	r1, #96	; 0x60
 8009a60:	4806      	ldr	r0, [pc, #24]	; (8009a7c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x5c>)
 8009a62:	f014 f913 	bl	801dc8c <__assert_func>
 8009a66:	bf00      	nop
    }
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd90      	pop	{r4, r7, pc}
 8009a72:	bf00      	nop
 8009a74:	0801fdb4 	.word	0x0801fdb4
 8009a78:	08023cf8 	.word	0x08023cf8
 8009a7c:	08020104 	.word	0x08020104

08009a80 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8009a8c:	68b9      	ldr	r1, [r7, #8]
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 fa45 	bl	8009f1e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	68b9      	ldr	r1, [r7, #8]
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 fa6e 	bl	8009f7a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009a9e:	bf00      	nop
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8009aa6:	b480      	push	{r7}
 8009aa8:	b083      	sub	sp, #12
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	6039      	str	r1, [r7, #0]
    }
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>:
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 fa8d 	bl	8009fea <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
 8009ada:	b480      	push	{r7}
 8009adc:	b083      	sub	sp, #12
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fe fccc 	bl	8008498 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8009b00:	4603      	mov	r3, r0
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fb f9b6 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
	...

08009b28 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009b34:	68b8      	ldr	r0, [r7, #8]
 8009b36:	f7ff ffdb 	bl	8009af0 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>
 8009b3a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009b3c:	68b8      	ldr	r0, [r7, #8]
 8009b3e:	f7ff ffe4 	bl	8009b0a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>
 8009b42:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fb f9a9 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d107      	bne.n	8009b64 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fb f996 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d001      	beq.n	8009b68 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009b64:	2301      	movs	r3, #1
 8009b66:	e000      	b.n	8009b6a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d005      	beq.n	8009b7a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	6979      	ldr	r1, [r7, #20]
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7fe f8ab 	bl	8007cd0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fb f98e 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009b82:	4602      	mov	r2, r0
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d107      	bne.n	8009b9a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fb f97b 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009b92:	4602      	mov	r2, r0
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d006      	beq.n	8009ba8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009b9a:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009b9c:	4a05      	ldr	r2, [pc, #20]	; (8009bb4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009b9e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009ba2:	4805      	ldr	r0, [pc, #20]	; (8009bb8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009ba4:	f014 f872 	bl	801dc8c <__assert_func>
}
 8009ba8:	bf00      	nop
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	0802216c 	.word	0x0802216c
 8009bb4:	08023f64 	.word	0x08023f64
 8009bb8:	08022280 	.word	0x08022280

08009bbc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
 8009bc8:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	605a      	str	r2, [r3, #4]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	609a      	str	r2, [r3, #8]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	69ba      	ldr	r2, [r7, #24]
 8009be0:	60da      	str	r2, [r3, #12]
  }
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fa2c 	bl	800a056 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8009bfe:	bf00      	nop
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>:
  typedef Product<Lhs, Rhs, LazyProduct> XprType;
  typedef typename XprType::Scalar Scalar;
  typedef typename XprType::CoeffReturnType CoeffReturnType;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
 8009c06:	b590      	push	{r4, r7, lr}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
    : m_lhs(xpr.lhs()),
      m_rhs(xpr.rhs()),
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
                            //       or perhaps declare them on the fly on the packet method... We have experiment to check what's best.
      m_innerDim(xpr.lhs().cols())
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fa47 	bl	800a0a4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8009c16:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009c18:	6838      	ldr	r0, [r7, #0]
 8009c1a:	f000 fa2c 	bl	800a076 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8009c1e:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009c20:	4619      	mov	r1, r3
 8009c22:	4620      	mov	r0, r4
 8009c24:	f7fa fcf9 	bl	800461a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
      m_rhs(xpr.rhs()),
 8009c28:	6838      	ldr	r0, [r7, #0]
 8009c2a:	f000 fa2f 	bl	800a08c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>
 8009c2e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3310      	adds	r3, #16
 8009c34:	6812      	ldr	r2, [r2, #0]
 8009c36:	601a      	str	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	3314      	adds	r3, #20
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009c3c:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009c3e:	4611      	mov	r1, r2
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 fa3a 	bl	800a0ba <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f103 0224 	add.w	r2, r3, #36	; 0x24
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3310      	adds	r3, #16
      m_innerDim(xpr.lhs().cols())
 8009c50:	4619      	mov	r1, r3
 8009c52:	4610      	mov	r0, r2
 8009c54:	f000 fa40 	bl	800a0d8 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
 8009c58:	6838      	ldr	r0, [r7, #0]
 8009c5a:	f000 fa0c 	bl	800a076 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fb fcc0 	bl	80055e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8009c66:	4602      	mov	r2, r0
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	629a      	str	r2, [r3, #40]	; 0x28
    std::cerr << "CanVectorizeInner=    " << CanVectorizeInner << "\n";
    std::cerr << "EvalToRowMajor=       " << EvalToRowMajor << "\n";
    std::cerr << "Alignment=            " << Alignment << "\n";
    std::cerr << "Flags=                " << Flags << "\n";
#endif
  }
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	370c      	adds	r7, #12
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd90      	pop	{r4, r7, pc}

08009c76 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b082      	sub	sp, #8
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2100      	movs	r1, #0
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fa37 	bl	800a0f6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fa4d 	bl	800a128 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>
  }
 8009c8e:	bf00      	nop
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b082      	sub	sp, #8
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009c9e:	2106      	movs	r1, #6
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7fe fa7c 	bl	800819e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fa4e 	bl	800a148 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>
  }
 8009cac:	bf00      	nop
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fa69 	bl	800a196 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8009cc4:	6838      	ldr	r0, [r7, #0]
 8009cc6:	f000 fa4e 	bl	800a166 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 8009cca:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8009cd0:	6838      	ldr	r0, [r7, #0]
 8009cd2:	f000 fa54 	bl	800a17e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>
 8009cd6:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	605a      	str	r2, [r3, #4]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	4610      	mov	r0, r2
 8009cea:	f7fd fd6f 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	f7fc fe1b 	bl	8006936 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009d00:	6838      	ldr	r0, [r7, #0]
 8009d02:	f000 fa30 	bl	800a166 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 8009d06:	4603      	mov	r3, r0
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fb f8bd 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	611a      	str	r2, [r3, #16]
  }
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009d26:	2100      	movs	r1, #0
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fa3f 	bl	800a1ac <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fa5f 	bl	800a1f2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8009d34:	bf00      	nop
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>:
  evaluator()
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fa63 	bl	800a210 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2203      	movs	r2, #3
 8009d4e:	2100      	movs	r1, #0
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fe fa05 	bl	8008160 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fa5c 	bl	800a226 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4618      	mov	r0, r3
 8009d72:	3708      	adds	r7, #8
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7ff ffed 	bl	8009d60 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 fa57 	bl	800a23c <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>
    }
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4618      	mov	r0, r3
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8009d98:	b480      	push	{r7}
 8009d9a:	af00      	add	r7, sp, #0
    }
 8009d9c:	bf00      	nop
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b086      	sub	sp, #24
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	607a      	str	r2, [r7, #4]
 8009db2:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8009db4:	2301      	movs	r3, #1
 8009db6:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8009db8:	2301      	movs	r3, #1
 8009dba:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	68b9      	ldr	r1, [r7, #8]
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 fa49 	bl	800a258 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
    }
 8009dc6:	bf00      	nop
 8009dc8:	3718      	adds	r7, #24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8009dce:	b5b0      	push	{r4, r5, r7, lr}
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fa19 	bl	800a210 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009dde:	687c      	ldr	r4, [r7, #4]
 8009de0:	6838      	ldr	r0, [r7, #0]
 8009de2:	f000 fa6b 	bl	800a2bc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>
 8009de6:	4605      	mov	r5, r0
 8009de8:	6838      	ldr	r0, [r7, #0]
 8009dea:	f000 fa74 	bl	800a2d6 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>
 8009dee:	4603      	mov	r3, r0
 8009df0:	461a      	mov	r2, r3
 8009df2:	4629      	mov	r1, r5
 8009df4:	4620      	mov	r0, r4
 8009df6:	f7fe f9b3 	bl	8008160 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bdb0      	pop	{r4, r5, r7, pc}

08009e04 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8009e04:	b590      	push	{r4, r7, lr}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8009e10:	68b8      	ldr	r0, [r7, #8]
 8009e12:	f7fb fd4a 	bl	80058aa <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 8009e16:	4604      	mov	r4, r0
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f7fb fd51 	bl	80058c0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	461a      	mov	r2, r3
 8009e22:	4621      	mov	r1, r4
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 fa8b 	bl	800a340 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>
}
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd90      	pop	{r4, r7, pc}

08009e32 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b086      	sub	sp, #24
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	60f8      	str	r0, [r7, #12]
 8009e3a:	60b9      	str	r1, [r7, #8]
 8009e3c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	68b9      	ldr	r1, [r7, #8]
 8009e46:	6978      	ldr	r0, [r7, #20]
 8009e48:	f000 faaa 	bl	800a3a0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 8009e4c:	bf00      	nop
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2102      	movs	r1, #2
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7fe fa6c 	bl	800833e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 faad 	bl	800a3c6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 8009e6c:	bf00      	nop
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>:
  explicit product_evaluator(const XprType& xpr)
 8009e74:	b590      	push	{r4, r7, lr}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fac8 	bl	800a414 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8009e84:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009e86:	6838      	ldr	r0, [r7, #0]
 8009e88:	f000 faad 	bl	800a3e6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 8009e8c:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009e8e:	4619      	mov	r1, r3
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 faca 	bl	800a42a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f103 040c 	add.w	r4, r3, #12
      m_rhs(xpr.rhs()),
 8009e9c:	6838      	ldr	r0, [r7, #0]
 8009e9e:	f000 faad 	bl	800a3fc <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>
 8009ea2:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f000 fad4 	bl	800a454 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3310      	adds	r3, #16
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009eb0:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fc fd3e 	bl	8006936 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f103 0214 	add.w	r2, r3, #20
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	330c      	adds	r3, #12
      m_innerDim(xpr.lhs().cols())
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	4610      	mov	r0, r2
 8009ec8:	f000 fad9 	bl	800a47e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 8009ecc:	6838      	ldr	r0, [r7, #0]
 8009ece:	f000 fa8a 	bl	800a3e6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fc f8b2 	bl	800603e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8009eda:	4602      	mov	r2, r0
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	619a      	str	r2, [r3, #24]
  }
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd90      	pop	{r4, r7, pc}

08009eea <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b082      	sub	sp, #8
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fad2 	bl	800a49e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 faf2 	bl	800a4e4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>
  }
 8009f00:	bf00      	nop
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
    }
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4618      	mov	r0, r3
 8009f14:	370c      	adds	r7, #12
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009f1e:	b480      	push	{r7}
 8009f20:	b083      	sub	sp, #12
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	330c      	adds	r3, #12
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7ff f983 	bl	800924c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	3308      	adds	r3, #8
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fb f9b9 	bl	80052c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fae5 	bl	800a520 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7ff ffe2 	bl	8009f34 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b090      	sub	sp, #64	; 0x40
 8009f7e:	af02      	add	r7, sp, #8
 8009f80:	60f8      	str	r0, [r7, #12]
 8009f82:	60b9      	str	r1, [r7, #8]
 8009f84:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8009f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f8a:	68b9      	ldr	r1, [r7, #8]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f000 fab8 	bl	800a502 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	68b9      	ldr	r1, [r7, #8]
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f000 faea 	bl	800a570 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 8009f9c:	f107 0320 	add.w	r3, r7, #32
 8009fa0:	68f9      	ldr	r1, [r7, #12]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fc fcc7 	bl	8006936 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f7fd fd05 	bl	80079b8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009fb4:	f107 0120 	add.w	r1, r7, #32
 8009fb8:	f107 0010 	add.w	r0, r7, #16
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f000 fb04 	bl	800a5cc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009fc4:	f107 0310 	add.w	r3, r7, #16
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f000 fb19 	bl	800a600 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8009fce:	f107 0320 	add.w	r3, r7, #32
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fb f975 	bl	80052c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8009fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7ff ffbf 	bl	8009f60 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
}
 8009fe2:	bf00      	nop
 8009fe4:	3738      	adds	r7, #56	; 0x38
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 8009fea:	b590      	push	{r4, r7, lr}
 8009fec:	b083      	sub	sp, #12
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fb25 	bl	800a644 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8009ffa:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009ffc:	6838      	ldr	r0, [r7, #0]
 8009ffe:	f000 fb0a 	bl	800a616 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 800a002:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a004:	4619      	mov	r1, r3
 800a006:	4620      	mov	r0, r4
 800a008:	f000 fb27 	bl	800a65a <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>
      m_rhs(xpr.rhs()),
 800a00c:	6838      	ldr	r0, [r7, #0]
 800a00e:	f000 fb0d 	bl	800a62c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>
 800a012:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	625a      	str	r2, [r3, #36]	; 0x24
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a01c:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800a01e:	4611      	mov	r1, r2
 800a020:	4618      	mov	r0, r3
 800a022:	f7fd fbd3 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      m_innerDim(xpr.lhs().cols())
 800a030:	4619      	mov	r1, r3
 800a032:	4610      	mov	r0, r2
 800a034:	f7fd fbca 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800a038:	6838      	ldr	r0, [r7, #0]
 800a03a:	f000 faec 	bl	800a616 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 800a03e:	4603      	mov	r3, r0
 800a040:	4618      	mov	r0, r3
 800a042:	f7fc fb58 	bl	80066f6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 800a046:	4602      	mov	r2, r0
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4618      	mov	r0, r3
 800a050:	370c      	adds	r7, #12
 800a052:	46bd      	mov	sp, r7
 800a054:	bd90      	pop	{r4, r7, pc}

0800a056 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a056:	b580      	push	{r7, lr}
 800a058:	b082      	sub	sp, #8
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a05e:	2200      	movs	r2, #0
 800a060:	2100      	movs	r1, #0
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fb0e 	bl	800a684 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fb24 	bl	800a6b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 800a06e:	bf00      	nop
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4618      	mov	r0, r3
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3310      	adds	r3, #16
 800a098:	4618      	mov	r0, r3
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b082      	sub	sp, #8
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	6039      	str	r1, [r7, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6839      	ldr	r1, [r7, #0]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 fb04 	bl	800a6d6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6839      	ldr	r1, [r7, #0]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 fb07 	bl	800a6fa <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b086      	sub	sp, #24
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	60f8      	str	r0, [r7, #12]
 800a0fe:	60b9      	str	r1, [r7, #8]
 800a100:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800a102:	6879      	ldr	r1, [r7, #4]
 800a104:	68b8      	ldr	r0, [r7, #8]
 800a106:	f000 fb0e 	bl	800a726 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800a10a:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800a10c:	6879      	ldr	r1, [r7, #4]
 800a10e:	68b8      	ldr	r0, [r7, #8]
 800a110:	f000 fb15 	bl	800a73e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800a114:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	6979      	ldr	r1, [r7, #20]
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 fb1b 	bl	800a756 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800a120:	bf00      	nop
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a130:	2201      	movs	r2, #1
 800a132:	2100      	movs	r1, #0
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff ffde 	bl	800a0f6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 fb31 	bl	800a7a2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>
  }
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a150:	2107      	movs	r1, #7
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7fe f823 	bl	800819e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fb32 	bl	800a7c2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>
  }
 800a15e:	bf00      	nop
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a166:	b480      	push	{r7}
 800a168:	b083      	sub	sp, #12
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4618      	mov	r0, r3
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a17e:	b480      	push	{r7}
 800a180:	b083      	sub	sp, #12
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	4618      	mov	r0, r3
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a196:	b480      	push	{r7}
 800a198:	b083      	sub	sp, #12
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a1ac:	b5b0      	push	{r4, r5, r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	689c      	ldr	r4, [r3, #8]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fe fa52 	bl	800866a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fb06 	bl	800a7e0 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 800a1d4:	eef0 7a40 	vmov.f32	s15, s0
 800a1d8:	edc7 7a03 	vstr	s15, [r7, #12]
 800a1dc:	f107 030c 	add.w	r3, r7, #12
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f7fe f9f9 	bl	80085dc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a1ea:	bf00      	nop
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bdb0      	pop	{r4, r5, r7, pc}

0800a1f2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b082      	sub	sp, #8
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7ff ffd5 	bl	800a1ac <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fb25 	bl	800a852 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 800a208:	bf00      	nop
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4618      	mov	r0, r3
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a226:	b480      	push	{r7}
 800a228:	b083      	sub	sp, #12
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
    }
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4618      	mov	r0, r3
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 fb12 	bl	800a870 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>
    }
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4618      	mov	r0, r3
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
	...

0800a258 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	2b03      	cmp	r3, #3
 800a268:	d108      	bne.n	800a27c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d105      	bne.n	800a27c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2b00      	cmp	r3, #0
 800a274:	db02      	blt.n	800a27c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	da06      	bge.n	800a28a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x32>
 800a27c:	4b0c      	ldr	r3, [pc, #48]	; (800a2b0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x58>)
 800a27e:	4a0d      	ldr	r2, [pc, #52]	; (800a2b4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x5c>)
 800a280:	f240 1111 	movw	r1, #273	; 0x111
 800a284:	480c      	ldr	r0, [pc, #48]	; (800a2b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x60>)
 800a286:	f013 fd01 	bl	801dc8c <__assert_func>
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	617b      	str	r3, [r7, #20]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	613b      	str	r3, [r7, #16]
  }
 800a292:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	fb02 f103 	mul.w	r1, r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	f000 faf0 	bl	800a886 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>
    }
 800a2a6:	bf00      	nop
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	08022584 	.word	0x08022584
 800a2b4:	0802411c 	.word	0x0802411c
 800a2b8:	080227a0 	.word	0x080227a0

0800a2bc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 faea 	bl	800a8a0 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b082      	sub	sp, #8
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
      return derived().outerStride();
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fae9 	bl	800a8b6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 faf0 	bl	800a8cc <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>
 800a2ec:	4603      	mov	r3, r0
    }
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b082      	sub	sp, #8
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 faf0 	bl	800a8e4 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>:
class dense_product_base
 800a30e:	b580      	push	{r7, lr}
 800a310:	b082      	sub	sp, #8
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7ff ffed 	bl	800a2f6 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4618      	mov	r0, r3
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800a326:	b580      	push	{r7, lr}
 800a328:	b082      	sub	sp, #8
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff ffed 	bl	800a30e <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
	...

0800a340 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800a340:	b590      	push	{r4, r7, lr}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f7ff ffea 	bl	800a326 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a35a:	e883 0003 	stmia.w	r3, {r0, r1}
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3308      	adds	r3, #8
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	6812      	ldr	r2, [r2, #0]
 800a366:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800a368:	68b8      	ldr	r0, [r7, #8]
 800a36a:	f7fb fad8 	bl	800591e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800a36e:	4604      	mov	r4, r0
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7fb fae2 	bl	800593a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800a376:	4603      	mov	r3, r0
 800a378:	429c      	cmp	r4, r3
 800a37a:	d005      	beq.n	800a388 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x48>
 800a37c:	4b05      	ldr	r3, [pc, #20]	; (800a394 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x54>)
 800a37e:	4a06      	ldr	r2, [pc, #24]	; (800a398 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x58>)
 800a380:	2160      	movs	r1, #96	; 0x60
 800a382:	4806      	ldr	r0, [pc, #24]	; (800a39c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x5c>)
 800a384:	f013 fc82 	bl	801dc8c <__assert_func>
 800a388:	bf00      	nop
    }
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	4618      	mov	r0, r3
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	bd90      	pop	{r4, r7, pc}
 800a394:	0801fdb4 	.word	0x0801fdb4
 800a398:	080241b0 	.word	0x080241b0
 800a39c:	08020104 	.word	0x08020104

0800a3a0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800a3ac:	68b9      	ldr	r1, [r7, #8]
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 fab9 	bl	800a926 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	68b9      	ldr	r1, [r7, #8]
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f000 fb14 	bl	800a9e6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800a3be:	bf00      	nop
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b082      	sub	sp, #8
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	2102      	movs	r1, #2
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7fd ffb3 	bl	800833e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fb3c 	bl	800aa56 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800a3de:	bf00      	nop
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a3e6:	b480      	push	{r7}
 800a3e8:	b083      	sub	sp, #12
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3308      	adds	r3, #8
 800a408:	4618      	mov	r0, r3
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4618      	mov	r0, r3
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b082      	sub	sp, #8
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	6039      	str	r1, [r7, #0]
    {
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4618      	mov	r0, r3
 800a438:	f7fa fc75 	bl	8004d26 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a43c:	f7fa fc83 	bl	8004d46 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	4618      	mov	r0, r3
 800a446:	f000 fb16 	bl	800aa76 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4618      	mov	r0, r3
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>:
    explicit Matrix(const T& x)
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
    {
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4618      	mov	r0, r3
 800a462:	f7fa fc3d 	bl	8004ce0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a466:	f7fa fc4b 	bl	8004d00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	4618      	mov	r0, r3
 800a470:	f000 fb0e 	bl	800aa90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4618      	mov	r0, r3
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 800a47e:	b580      	push	{r7, lr}
 800a480:	b082      	sub	sp, #8
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	4611      	mov	r1, r2
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 fb0b 	bl	800aaaa <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>
  { }
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4618      	mov	r0, r3
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a49e:	b5b0      	push	{r4, r5, r7, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	689c      	ldr	r4, [r3, #8]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6839      	ldr	r1, [r7, #0]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe f8d9 	bl	800866a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	6839      	ldr	r1, [r7, #0]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 fb09 	bl	800aad8 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>
 800a4c6:	eef0 7a40 	vmov.f32	s15, s0
 800a4ca:	edc7 7a03 	vstr	s15, [r7, #12]
 800a4ce:	f107 030c 	add.w	r3, r7, #12
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f7fe f880 	bl	80085dc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a4dc:	bf00      	nop
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bdb0      	pop	{r4, r5, r7, pc}

0800a4e4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a4ec:	2101      	movs	r1, #1
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7ff ffd5 	bl	800a49e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 fb28 	bl	800ab4a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>
  }
 800a4fa:	bf00      	nop
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a502:	b580      	push	{r7, lr}
 800a504:	b082      	sub	sp, #8
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	6039      	str	r1, [r7, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6839      	ldr	r1, [r7, #0]
 800a510:	4618      	mov	r0, r3
 800a512:	f000 fb29 	bl	800ab68 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4618      	mov	r0, r3
 800a51a:	3708      	adds	r7, #8
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4618      	mov	r0, r3
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800a536:	b580      	push	{r7, lr}
 800a538:	b082      	sub	sp, #8
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4618      	mov	r0, r3
 800a544:	f7fa fd51 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a548:	4603      	mov	r3, r0
 800a54a:	4618      	mov	r0, r3
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	3304      	adds	r3, #4
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fc fc05 	bl	8006d6e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 800a564:	4603      	mov	r3, r0
 800a566:	4618      	mov	r0, r3
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 800a570:	b590      	push	{r4, r7, lr}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fa fd33 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a584:	4604      	mov	r4, r0
 800a586:	68b8      	ldr	r0, [r7, #8]
 800a588:	f7ff ffd5 	bl	800a536 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>
 800a58c:	4603      	mov	r3, r0
 800a58e:	429c      	cmp	r4, r3
 800a590:	d10a      	bne.n	800a5a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	4618      	mov	r0, r3
 800a596:	f7fa fd1d 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800a59a:	4604      	mov	r4, r0
 800a59c:	68b8      	ldr	r0, [r7, #8]
 800a59e:	f7ff ffd8 	bl	800a552 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	429c      	cmp	r4, r3
 800a5a6:	d006      	beq.n	800a5b6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 800a5a8:	4b05      	ldr	r3, [pc, #20]	; (800a5c0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 800a5aa:	4a06      	ldr	r2, [pc, #24]	; (800a5c4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 800a5ac:	f240 21f2 	movw	r1, #754	; 0x2f2
 800a5b0:	4805      	ldr	r0, [pc, #20]	; (800a5c8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 800a5b2:	f013 fb6b 	bl	801dc8c <__assert_func>
}
 800a5b6:	bf00      	nop
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd90      	pop	{r4, r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	08022888 	.word	0x08022888
 800a5c4:	0802435c 	.word	0x0802435c
 800a5c8:	08022280 	.word	0x08022280

0800a5cc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	605a      	str	r2, [r3, #4]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	609a      	str	r2, [r3, #8]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	69ba      	ldr	r2, [r7, #24]
 800a5f0:	60da      	str	r2, [r3, #12]
  }
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 fae6 	bl	800abda <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>
  }
 800a60e:	bf00      	nop
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a616:	b480      	push	{r7}
 800a618:	b083      	sub	sp, #12
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4618      	mov	r0, r3
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	4618      	mov	r0, r3
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4618      	mov	r0, r3
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b082      	sub	sp, #8
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	6039      	str	r1, [r7, #0]
    {
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4618      	mov	r0, r3
 800a668:	f7fa fb17 	bl	8004c9a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800a66c:	f7fa fb25 	bl	8004cba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	4618      	mov	r0, r3
 800a676:	f000 fabf 	bl	800abf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4618      	mov	r0, r3
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	68b8      	ldr	r0, [r7, #8]
 800a694:	f000 fabd 	bl	800ac12 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800a698:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800a69a:	6879      	ldr	r1, [r7, #4]
 800a69c:	68b8      	ldr	r0, [r7, #8]
 800a69e:	f000 fac4 	bl	800ac2a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800a6a2:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800a6a4:	693a      	ldr	r2, [r7, #16]
 800a6a6:	6979      	ldr	r1, [r7, #20]
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 faca 	bl	800ac42 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800a6ae:	bf00      	nop
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b082      	sub	sp, #8
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a6be:	2201      	movs	r2, #1
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7ff ffde 	bl	800a684 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fae0 	bl	800ac8e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	6039      	str	r1, [r7, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fae4 	bl	800acae <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6839      	ldr	r1, [r7, #0]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 faea 	bl	800acc4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800a6fa:	b590      	push	{r4, r7, lr}
 800a6fc:	b083      	sub	sp, #12
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	6039      	str	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fb11 	bl	800ad2c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800a70a:	687c      	ldr	r4, [r7, #4]
 800a70c:	6838      	ldr	r0, [r7, #0]
 800a70e:	f000 fb01 	bl	800ad14 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800a712:	4603      	mov	r3, r0
 800a714:	4619      	mov	r1, r3
 800a716:	4620      	mov	r0, r4
 800a718:	f7fc f90d 	bl	8006936 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4618      	mov	r0, r3
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	bd90      	pop	{r4, r7, pc}

0800a726 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800a726:	b480      	push	{r7}
 800a728:	b083      	sub	sp, #12
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	6039      	str	r1, [r7, #0]
      : inner;
 800a730:	683b      	ldr	r3, [r7, #0]
  }
 800a732:	4618      	mov	r0, r3
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800a73e:	b480      	push	{r7}
 800a740:	b083      	sub	sp, #12
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	6039      	str	r1, [r7, #0]
      : outer;
 800a748:	687b      	ldr	r3, [r7, #4]
  }
 800a74a:	4618      	mov	r0, r3
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800a756:	b5b0      	push	{r4, r5, r7, lr}
 800a758:	b086      	sub	sp, #24
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	60f8      	str	r0, [r7, #12]
 800a75e:	60b9      	str	r1, [r7, #8]
 800a760:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	689c      	ldr	r4, [r3, #8]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	68b9      	ldr	r1, [r7, #8]
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe f9c4 	bl	8008afc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800a774:	4605      	mov	r5, r0
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	68b9      	ldr	r1, [r7, #8]
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 fadf 	bl	800ad42 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>
 800a784:	eef0 7a40 	vmov.f32	s15, s0
 800a788:	edc7 7a05 	vstr	s15, [r7, #20]
 800a78c:	f107 0314 	add.w	r3, r7, #20
 800a790:	461a      	mov	r2, r3
 800a792:	4629      	mov	r1, r5
 800a794:	4620      	mov	r0, r4
 800a796:	f7fd ff21 	bl	80085dc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a79a:	bf00      	nop
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bdb0      	pop	{r4, r5, r7, pc}

0800a7a2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b082      	sub	sp, #8
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7ff fca1 	bl	800a0f6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 faf7 	bl	800ada8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>
  }
 800a7ba:	bf00      	nop
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b082      	sub	sp, #8
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a7ca:	2108      	movs	r1, #8
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7fd fce6 	bl	800819e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 faf8 	bl	800adc8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>
  }
 800a7d8:	bf00      	nop
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  /* Allow index-based non-packet access. It is impossible though to allow index-based packed access,
   * which is why we don't set the LinearAccessBit.
   * TODO: this seems possible when the result is a vector
   */
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  const CoeffReturnType coeff(Index index) const
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b0a4      	sub	sp, #144	; 0x90
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  {
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6819      	ldr	r1, [r3, #0]
 800a7fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a7fe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a802:	4618      	mov	r0, r3
 800a804:	f000 faea 	bl	800addc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800a808:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a80c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a810:	4611      	mov	r1, r2
 800a812:	4618      	mov	r0, r3
 800a814:	f000 faf5 	bl	800ae02 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6859      	ldr	r1, [r3, #4]
 800a81c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a820:	2200      	movs	r2, #0
 800a822:	4618      	mov	r0, r3
 800a824:	f000 fafe 	bl	800ae24 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>
 800a828:	f107 030c 	add.w	r3, r7, #12
 800a82c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a830:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a834:	4618      	mov	r0, r3
 800a836:	f000 fb08 	bl	800ae4a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800a83a:	f107 030c 	add.w	r3, r7, #12
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fb31 	bl	800aea6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>
 800a844:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a848:	eeb0 0a67 	vmov.f32	s0, s15
 800a84c:	3790      	adds	r7, #144	; 0x90
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a852:	b580      	push	{r7, lr}
 800a854:	b082      	sub	sp, #8
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a85a:	2102      	movs	r1, #2
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f7ff fca5 	bl	800a1ac <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fb3a 	bl	800aedc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 800a868:	bf00      	nop
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>:
  plain_array()
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800a878:	f7fc fbd4 	bl	8007024 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4618      	mov	r0, r3
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800a886:	b480      	push	{r7}
 800a888:	b085      	sub	sp, #20
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	60f8      	str	r0, [r7, #12]
 800a88e:	60b9      	str	r1, [r7, #8]
 800a890:	607a      	str	r2, [r7, #4]
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	bf00      	nop
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	370c      	adds	r7, #12
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800a8b6:	b480      	push	{r7}
 800a8b8:	b083      	sub	sp, #12
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fb0b 	bl	800aef0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
    }
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	370c      	adds	r7, #12
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b082      	sub	sp, #8
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	f000 fb01 	bl	800af08 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>
 800a906:	4603      	mov	r3, r0
 800a908:	4618      	mov	r0, r3
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	f000 fafe 	bl	800af18 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>
 800a91c:	4603      	mov	r3, r0
 800a91e:	4618      	mov	r0, r3
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800a926:	b580      	push	{r7, lr}
 800a928:	b082      	sub	sp, #8
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4618      	mov	r0, r3
 800a934:	f7ff ffe1 	bl	800a8fa <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	dd08      	ble.n	800a950 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4618      	mov	r0, r3
 800a942:	f7ff ffe5 	bl	800a910 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800a946:	4603      	mov	r3, r0
 800a948:	2b01      	cmp	r3, #1
 800a94a:	dd01      	ble.n	800a950 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800a94c:	2301      	movs	r3, #1
 800a94e:	e000      	b.n	800a952 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2c>
 800a950:	2300      	movs	r3, #0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d003      	beq.n	800a95e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fae5 	bl	800af28 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>
}
 800a95e:	bf00      	nop
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800a966:	b580      	push	{r7, lr}
 800a968:	b082      	sub	sp, #8
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4618      	mov	r0, r3
 800a972:	f7fc fd1c 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fafb 	bl	800af72 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4618      	mov	r0, r3
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800a986:	b580      	push	{r7, lr}
 800a988:	b082      	sub	sp, #8
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4618      	mov	r0, r3
 800a992:	f7ff ffe8 	bl	800a966 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4618      	mov	r0, r3
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	332c      	adds	r3, #44	; 0x2c
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7ff ffea 	bl	800a986 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	3328      	adds	r3, #40	; 0x28
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fc fcf9 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 facd 	bl	800af5c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7ff ffe2 	bl	800a9a0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b098      	sub	sp, #96	; 0x60
 800a9ea:	af02      	add	r7, sp, #8
 800a9ec:	60f8      	str	r0, [r7, #12]
 800a9ee:	60b9      	str	r1, [r7, #8]
 800a9f0:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800a9f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9f6:	68b9      	ldr	r1, [r7, #8]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 faa0 	bl	800af3e <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	68b9      	ldr	r1, [r7, #8]
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f000 fadc 	bl	800afc0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800aa08:	f107 0320 	add.w	r3, r7, #32
 800aa0c:	68f9      	ldr	r1, [r7, #12]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe fedd 	bl	80097ce <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f000 fb1d 	bl	800b054 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800aa20:	f107 0120 	add.w	r1, r7, #32
 800aa24:	f107 0010 	add.w	r0, r7, #16
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f000 fb1d 	bl	800b06a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800aa30:	f107 0310 	add.w	r3, r7, #16
 800aa34:	4618      	mov	r0, r3
 800aa36:	f000 fb32 	bl	800b09e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800aa3a:	f107 0320 	add.w	r3, r7, #32
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fc fd8a 	bl	8007558 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800aa44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7ff ffbf 	bl	800a9cc <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
}
 800aa4e:	bf00      	nop
 800aa50:	3758      	adds	r7, #88	; 0x58
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b082      	sub	sp, #8
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800aa5e:	2202      	movs	r2, #2
 800aa60:	2102      	movs	r1, #2
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f7fd fc6b 	bl	800833e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fb23 	bl	800b0b4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800aa6e:	bf00      	nop
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fb20 	bl	800b0c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800aa88:	bf00      	nop
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800aa9a:	6839      	ldr	r1, [r7, #0]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fb34 	bl	800b10a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800aaa2:	bf00      	nop
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800aaaa:	b590      	push	{r4, r7, lr}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 fb56 	bl	800b166 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 800aaba:	687c      	ldr	r4, [r7, #4]
 800aabc:	6838      	ldr	r0, [r7, #0]
 800aabe:	f000 fb45 	bl	800b14c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2200      	movs	r2, #0
 800aac6:	4619      	mov	r1, r3
 800aac8:	4620      	mov	r0, r4
 800aaca:	f7fc fad8 	bl	800707e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4618      	mov	r0, r3
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd90      	pop	{r4, r7, pc}

0800aad8 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800aad8:	b580      	push	{r7, lr}
 800aada:	b0a2      	sub	sp, #136	; 0x88
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800aaf4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 fb3f 	bl	800b17c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800aafe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ab02:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800ab06:	4611      	mov	r1, r2
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f000 fb4a 	bl	800b1a2 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f103 010c 	add.w	r1, r3, #12
 800ab14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ab18:	2200      	movs	r2, #0
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 fb52 	bl	800b1c4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800ab20:	f107 030c 	add.w	r3, r7, #12
 800ab24:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800ab28:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 fb5c 	bl	800b1ea <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800ab32:	f107 030c 	add.w	r3, r7, #12
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 fb85 	bl	800b246 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800ab3c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ab40:	eeb0 0a67 	vmov.f32	s0, s15
 800ab44:	3788      	adds	r7, #136	; 0x88
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800ab52:	2102      	movs	r1, #2
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff fca2 	bl	800a49e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fb8e 	bl	800b27c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>
  }
 800ab60:	bf00      	nop
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 800ab68:	b590      	push	{r4, r7, lr}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fba4 	bl	800b2c0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800ab78:	6838      	ldr	r0, [r7, #0]
 800ab7a:	f000 fb89 	bl	800b290 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800ab7e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	1d1c      	adds	r4, r3, #4
      m_rhs(xpr.rhs()),
 800ab88:	6838      	ldr	r0, [r7, #0]
 800ab8a:	f000 fb8d 	bl	800b2a8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>
 800ab8e:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800ab90:	4619      	mov	r1, r3
 800ab92:	4620      	mov	r0, r4
 800ab94:	f000 fb9f 	bl	800b2d6 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800aba2:	4619      	mov	r1, r3
 800aba4:	4610      	mov	r0, r2
 800aba6:	f7fb fec6 	bl	8006936 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800abb4:	4619      	mov	r1, r3
 800abb6:	4610      	mov	r0, r2
 800abb8:	f7ff fc61 	bl	800a47e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 800abbc:	6838      	ldr	r0, [r7, #0]
 800abbe:	f000 fb67 	bl	800b290 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800abc2:	4603      	mov	r3, r0
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7fa fa05 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800abca:	4602      	mov	r2, r0
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	611a      	str	r2, [r3, #16]
  }
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4618      	mov	r0, r3
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd90      	pop	{r4, r7, pc}

0800abda <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800abe2:	2100      	movs	r1, #0
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fb8b 	bl	800b300 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fbab 	bl	800b346 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>
  }
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800ac02:	6839      	ldr	r1, [r7, #0]
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 fbad 	bl	800b364 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800ac0a:	bf00      	nop
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800ac12:	b480      	push	{r7}
 800ac14:	b083      	sub	sp, #12
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	6039      	str	r1, [r7, #0]
      : inner;
 800ac1c:	683b      	ldr	r3, [r7, #0]
  }
 800ac1e:	4618      	mov	r0, r3
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800ac2a:	b480      	push	{r7}
 800ac2c:	b083      	sub	sp, #12
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	6039      	str	r1, [r7, #0]
      : outer;
 800ac34:	687b      	ldr	r3, [r7, #4]
  }
 800ac36:	4618      	mov	r0, r3
 800ac38:	370c      	adds	r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800ac42:	b5b0      	push	{r4, r5, r7, lr}
 800ac44:	b086      	sub	sp, #24
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	60f8      	str	r0, [r7, #12]
 800ac4a:	60b9      	str	r1, [r7, #8]
 800ac4c:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	689c      	ldr	r4, [r3, #8]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	68b9      	ldr	r1, [r7, #8]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fd ff4e 	bl	8008afc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800ac60:	4605      	mov	r5, r0
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	68b9      	ldr	r1, [r7, #8]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 fb9b 	bl	800b3a6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>
 800ac70:	eef0 7a40 	vmov.f32	s15, s0
 800ac74:	edc7 7a05 	vstr	s15, [r7, #20]
 800ac78:	f107 0314 	add.w	r3, r7, #20
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	4629      	mov	r1, r5
 800ac80:	4620      	mov	r0, r4
 800ac82:	f7fd fcab 	bl	80085dc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800ac86:	bf00      	nop
 800ac88:	3718      	adds	r7, #24
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bdb0      	pop	{r4, r5, r7, pc}

0800ac8e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b082      	sub	sp, #8
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ac96:	2202      	movs	r2, #2
 800ac98:	2100      	movs	r1, #0
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff fcf2 	bl	800a684 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fbb2 	bl	800b40a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 800aca6:	bf00      	nop
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800acae:	b480      	push	{r7}
 800acb0:	b083      	sub	sp, #12
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4618      	mov	r0, r3
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800acc4:	b590      	push	{r4, r7, lr}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
 800acce:	687c      	ldr	r4, [r7, #4]
 800acd0:	6838      	ldr	r0, [r7, #0]
 800acd2:	f000 fbaa 	bl	800b42a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>
 800acd6:	4603      	mov	r3, r0
 800acd8:	4619      	mov	r1, r3
 800acda:	4620      	mov	r0, r4
 800acdc:	f7fa fc0a 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	1d1c      	adds	r4, r3, #4
 800ace4:	6838      	ldr	r0, [r7, #0]
 800ace6:	f000 fbac 	bl	800b442 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>
 800acea:	4603      	mov	r3, r0
 800acec:	4619      	mov	r1, r3
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 fbbf 	bl	800b472 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f103 0408 	add.w	r4, r3, #8
 800acfa:	6838      	ldr	r0, [r7, #0]
 800acfc:	f000 fbad 	bl	800b45a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>
 800ad00:	4603      	mov	r3, r0
 800ad02:	4619      	mov	r1, r3
 800ad04:	4620      	mov	r0, r4
 800ad06:	f000 fbc3 	bl	800b490 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd90      	pop	{r4, r7, pc}

0800ad14 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4618      	mov	r0, r3
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4618      	mov	r0, r3
 800ad38:	370c      	adds	r7, #12
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b0a4      	sub	sp, #144	; 0x90
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	60f8      	str	r0, [r7, #12]
 800ad4a:	60b9      	str	r1, [r7, #8]
 800ad4c:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800ad4e:	68f9      	ldr	r1, [r7, #12]
 800ad50:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 fbde 	bl	800b518 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>
 800ad5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ad60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ad64:	4611      	mov	r1, r2
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 fbf9 	bl	800b55e <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f103 0110 	add.w	r1, r3, #16
 800ad72:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 fc01 	bl	800b580 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>
 800ad7e:	f107 0310 	add.w	r3, r7, #16
 800ad82:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800ad86:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 fc0b 	bl	800b5a6 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>
 800ad90:	f107 0310 	add.w	r3, r7, #16
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 fc34 	bl	800b602 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>
 800ad9a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ad9e:	eeb0 0a67 	vmov.f32	s0, s15
 800ada2:	3790      	adds	r7, #144	; 0x90
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800adb0:	2200      	movs	r2, #0
 800adb2:	2101      	movs	r1, #1
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff f99e 	bl	800a0f6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fc3c 	bl	800b638 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>
  }
 800adc0:	bf00      	nop
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	bf00      	nop
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>:
  return RowXpr(derived(), i);
}

/// This is the const version of row(). */
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
ConstRowXpr row(Index i) const
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
{
  return ConstRowXpr(derived(), i);
 800ade8:	68b8      	ldr	r0, [r7, #8]
 800adea:	f7fa fc62 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800adee:	4603      	mov	r3, r0
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	4619      	mov	r1, r3
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 fc2f 	bl	800b658 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>
}
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b082      	sub	sp, #8
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800ae0c:	6838      	ldr	r0, [r7, #0]
 800ae0e:	f000 fc4d 	bl	800b6ac <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 800ae12:	4603      	mov	r3, r0
 800ae14:	4619      	mov	r1, r3
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fc6b 	bl	800b6f2 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>
}
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800ae30:	68b8      	ldr	r0, [r7, #8]
 800ae32:	f7fa fa76 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800ae36:	4603      	mov	r3, r0
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f000 fc6f 	bl	800b720 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>
}
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
  * \sa class CwiseBinaryOp, cwiseAbs2
  */
template<typename OtherDerived>
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE const EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800ae4a:	b5b0      	push	{r4, r5, r7, lr}
 800ae4c:	b086      	sub	sp, #24
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	60f8      	str	r0, [r7, #12]
 800ae52:	60b9      	str	r1, [r7, #8]
 800ae54:	607a      	str	r2, [r7, #4]
{
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800ae56:	68b8      	ldr	r0, [r7, #8]
 800ae58:	f000 fc8a 	bl	800b770 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fc91 	bl	800b786 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>
 800ae64:	4605      	mov	r5, r0
 800ae66:	f107 0314 	add.w	r3, r7, #20
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fa fab8 	bl	80053e0 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800ae70:	f107 0314 	add.w	r3, r7, #20
 800ae74:	462a      	mov	r2, r5
 800ae76:	4621      	mov	r1, r4
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f000 fcd7 	bl	800b82c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	3718      	adds	r7, #24
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bdb0      	pop	{r4, r5, r7, pc}

0800ae86 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b082      	sub	sp, #8
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fd2a 	bl	800b8e8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800ae94:	4603      	mov	r3, r0
 800ae96:	4618      	mov	r0, r3
 800ae98:	f000 fd31 	bl	800b8fe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>:
  *
  * \sa trace(), prod(), mean()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
DenseBase<Derived>::sum() const
 800aea6:	b590      	push	{r4, r7, lr}
 800aea8:	b085      	sub	sp, #20
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
{
  if(SizeAtCompileTime==0 || (SizeAtCompileTime==Dynamic && size()==0))
    return Scalar(0);
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fd1a 	bl	800b8e8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	f107 030c 	add.w	r3, r7, #12
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fa fd87 	bl	80059ce <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800aec0:	f107 030c 	add.w	r3, r7, #12
 800aec4:	4619      	mov	r1, r3
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 fdf4 	bl	800bab4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800aecc:	eef0 7a40 	vmov.f32	s15, s0
 800aed0:	bf00      	nop
}
 800aed2:	eeb0 0a67 	vmov.f32	s0, s15
 800aed6:	3714      	adds	r7, #20
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd90      	pop	{r4, r7, pc}

0800aedc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	bf00      	nop
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fe21 	bl	800bb40 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800aefe:	4603      	mov	r3, r0
    }
 800af00:	4618      	mov	r0, r3
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 800af08:	b480      	push	{r7}
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	2303      	movs	r3, #3
 800af0e:	4618      	mov	r0, r3
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 800af18:	b480      	push	{r7}
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	2303      	movs	r3, #3
 800af1e:	4618      	mov	r0, r3
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>:
    static void run(const Derived&, const OtherDerived&)
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
    }
 800af32:	bf00      	nop
 800af34:	370c      	adds	r7, #12
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr

0800af3e <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800af3e:	b580      	push	{r7, lr}
 800af40:	b082      	sub	sp, #8
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
 800af46:	6039      	str	r1, [r7, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6839      	ldr	r1, [r7, #0]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f000 fe07 	bl	800bb60 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4618      	mov	r0, r3
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4618      	mov	r0, r3
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr

0800af72 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
 800af72:	b480      	push	{r7}
 800af74:	b083      	sub	sp, #12
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4618      	mov	r0, r3
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4618      	mov	r0, r3
 800af94:	f7fb fdea 	bl	8006b6c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800af98:	4603      	mov	r3, r0
 800af9a:	4618      	mov	r0, r3
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b082      	sub	sp, #8
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	3308      	adds	r3, #8
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fb fdea 	bl	8006b88 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800afb4:	4603      	mov	r3, r0
 800afb6:	4618      	mov	r0, r3
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800afcc:	68b8      	ldr	r0, [r7, #8]
 800afce:	f7ff ffdb 	bl	800af88 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>
 800afd2:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800afd4:	68b8      	ldr	r0, [r7, #8]
 800afd6:	f7ff ffe4 	bl	800afa2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>
 800afda:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	4618      	mov	r0, r3
 800afe0:	f7ff fc8b 	bl	800a8fa <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800afe4:	4602      	mov	r2, r0
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	4293      	cmp	r3, r2
 800afea:	d107      	bne.n	800affc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	4618      	mov	r0, r3
 800aff0:	f7ff fc8e 	bl	800a910 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800aff4:	4602      	mov	r2, r0
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	4293      	cmp	r3, r2
 800affa:	d001      	beq.n	800b000 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800affc:	2301      	movs	r3, #1
 800affe:	e000      	b.n	800b002 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800b000:	2300      	movs	r3, #0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d005      	beq.n	800b012 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	6979      	ldr	r1, [r7, #20]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7ff f923 	bl	800a258 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	4618      	mov	r0, r3
 800b016:	f7ff fc70 	bl	800a8fa <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800b01a:	4602      	mov	r2, r0
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	4293      	cmp	r3, r2
 800b020:	d107      	bne.n	800b032 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	4618      	mov	r0, r3
 800b026:	f7ff fc73 	bl	800a910 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b02a:	4602      	mov	r2, r0
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	4293      	cmp	r3, r2
 800b030:	d006      	beq.n	800b040 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800b032:	4b05      	ldr	r3, [pc, #20]	; (800b048 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800b034:	4a05      	ldr	r2, [pc, #20]	; (800b04c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800b036:	f240 21fd 	movw	r1, #765	; 0x2fd
 800b03a:	4805      	ldr	r0, [pc, #20]	; (800b050 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800b03c:	f012 fe26 	bl	801dc8c <__assert_func>
}
 800b040:	bf00      	nop
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	0802216c 	.word	0x0802216c
 800b04c:	08024518 	.word	0x08024518
 800b050:	08022280 	.word	0x08022280

0800b054 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4618      	mov	r0, r3
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800b06a:	b480      	push	{r7}
 800b06c:	b085      	sub	sp, #20
 800b06e:	af00      	add	r7, sp, #0
 800b070:	60f8      	str	r0, [r7, #12]
 800b072:	60b9      	str	r1, [r7, #8]
 800b074:	607a      	str	r2, [r7, #4]
 800b076:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	605a      	str	r2, [r3, #4]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	683a      	ldr	r2, [r7, #0]
 800b088:	609a      	str	r2, [r3, #8]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	69ba      	ldr	r2, [r7, #24]
 800b08e:	60da      	str	r2, [r3, #12]
  }
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	4618      	mov	r0, r3
 800b094:	3714      	adds	r7, #20
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr

0800b09e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b082      	sub	sp, #8
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fd92 	bl	800bbd0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>
  }
 800b0ac:	bf00      	nop
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	bf00      	nop
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b0c8:	b5b0      	push	{r4, r5, r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7fa fa1a 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b0d8:	4604      	mov	r4, r0
 800b0da:	6838      	ldr	r0, [r7, #0]
 800b0dc:	f7fa ff75 	bl	8005fca <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 800b0e0:	4605      	mov	r5, r0
 800b0e2:	f107 030c 	add.w	r3, r7, #12
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fb ff09 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b0ec:	f107 030c 	add.w	r3, r7, #12
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f000 fd7b 	bl	800bbf0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7fa fa06 	bl	800550c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b100:	4603      	mov	r3, r0
    }
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bdb0      	pop	{r4, r5, r7, pc}

0800b10a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b10a:	b5b0      	push	{r4, r5, r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fd7c 	bl	800bc12 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b11a:	4604      	mov	r4, r0
 800b11c:	6838      	ldr	r0, [r7, #0]
 800b11e:	f7fa ff5f 	bl	8005fe0 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 800b122:	4605      	mov	r5, r0
 800b124:	f107 030c 	add.w	r3, r7, #12
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fb fee8 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b12e:	f107 030c 	add.w	r3, r7, #12
 800b132:	461a      	mov	r2, r3
 800b134:	4629      	mov	r1, r5
 800b136:	4620      	mov	r0, r4
 800b138:	f000 fd76 	bl	800bc28 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 fd68 	bl	800bc12 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b142:	4603      	mov	r3, r0
    }
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bdb0      	pop	{r4, r5, r7, pc}

0800b14c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4618      	mov	r0, r3
 800b158:	f000 fd77 	bl	800bc4a <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 800b15c:	4603      	mov	r3, r0
 800b15e:	4618      	mov	r0, r3
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800b166:	b480      	push	{r7}
 800b168:	b083      	sub	sp, #12
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4618      	mov	r0, r3
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>:
ConstRowXpr row(Index i) const
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800b188:	68b8      	ldr	r0, [r7, #8]
 800b18a:	f7fa f8ca 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b18e:	4603      	mov	r3, r0
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	4619      	mov	r1, r3
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f000 fd6f 	bl	800bc78 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>
}
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b1ac:	6838      	ldr	r0, [r7, #0]
 800b1ae:	f000 fd8d 	bl	800bccc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fdab 	bl	800bd12 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>
}
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b1d0:	68b8      	ldr	r0, [r7, #8]
 800b1d2:	f7fa fe16 	bl	8005e02 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f000 fdaf 	bl	800bd40 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>
}
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b1ea:	b5b0      	push	{r4, r5, r7, lr}
 800b1ec:	b086      	sub	sp, #24
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	60f8      	str	r0, [r7, #12]
 800b1f2:	60b9      	str	r1, [r7, #8]
 800b1f4:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b1f6:	68b8      	ldr	r0, [r7, #8]
 800b1f8:	f000 fdd4 	bl	800bda4 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 800b1fc:	4604      	mov	r4, r0
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 fddb 	bl	800bdba <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>
 800b204:	4605      	mov	r5, r0
 800b206:	f107 0314 	add.w	r3, r7, #20
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fa f8e8 	bl	80053e0 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b210:	f107 0314 	add.w	r3, r7, #20
 800b214:	462a      	mov	r2, r5
 800b216:	4621      	mov	r1, r4
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f000 fe21 	bl	800be60 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	3718      	adds	r7, #24
 800b222:	46bd      	mov	sp, r7
 800b224:	bdb0      	pop	{r4, r5, r7, pc}

0800b226 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800b226:	b580      	push	{r7, lr}
 800b228:	b082      	sub	sp, #8
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 fe72 	bl	800bf18 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b234:	4603      	mov	r3, r0
 800b236:	4618      	mov	r0, r3
 800b238:	f000 fe79 	bl	800bf2e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>
 800b23c:	4603      	mov	r3, r0
 800b23e:	4618      	mov	r0, r3
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b246:	b590      	push	{r4, r7, lr}
 800b248:	b085      	sub	sp, #20
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 fe62 	bl	800bf18 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b254:	4604      	mov	r4, r0
 800b256:	f107 030c 	add.w	r3, r7, #12
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fa fbb7 	bl	80059ce <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b260:	f107 030c 	add.w	r3, r7, #12
 800b264:	4619      	mov	r1, r3
 800b266:	4620      	mov	r0, r4
 800b268:	f000 ff3c 	bl	800c0e4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b26c:	eef0 7a40 	vmov.f32	s15, s0
 800b270:	bf00      	nop
}
 800b272:	eeb0 0a67 	vmov.f32	s0, s15
 800b276:	3714      	adds	r7, #20
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd90      	pop	{r4, r7, pc}

0800b27c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4618      	mov	r0, r3
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>:
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	370c      	adds	r7, #12
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b082      	sub	sp, #8
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
    {
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7f9 fcfc 	bl	8004ce0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800b2e8:	f7f9 fd0a 	bl	8004d00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f000 ff3d 	bl	800c170 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800b300:	b5b0      	push	{r4, r5, r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	689c      	ldr	r4, [r3, #8]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	4618      	mov	r0, r3
 800b316:	f7fd f9a8 	bl	800866a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800b31a:	4605      	mov	r5, r0
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	4618      	mov	r0, r3
 800b324:	f000 ff31 	bl	800c18a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>
 800b328:	eef0 7a40 	vmov.f32	s15, s0
 800b32c:	edc7 7a03 	vstr	s15, [r7, #12]
 800b330:	f107 030c 	add.w	r3, r7, #12
 800b334:	461a      	mov	r2, r3
 800b336:	4629      	mov	r1, r5
 800b338:	4620      	mov	r0, r4
 800b33a:	f000 ff5f 	bl	800c1fc <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>
  }
 800b33e:	bf00      	nop
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bdb0      	pop	{r4, r5, r7, pc}

0800b346 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800b346:	b580      	push	{r7, lr}
 800b348:	b082      	sub	sp, #8
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800b34e:	2101      	movs	r1, #1
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7ff ffd5 	bl	800b300 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 ff67 	bl	800c22a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>
  }
 800b35c:	bf00      	nop
 800b35e:	3708      	adds	r7, #8
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b364:	b5b0      	push	{r4, r5, r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7fa fa68 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b374:	4604      	mov	r4, r0
 800b376:	6838      	ldr	r0, [r7, #0]
 800b378:	f7fb f98e 	bl	8006698 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800b37c:	4605      	mov	r5, r0
 800b37e:	f107 030c 	add.w	r3, r7, #12
 800b382:	4618      	mov	r0, r3
 800b384:	f7fb fdbb 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b388:	f107 030c 	add.w	r3, r7, #12
 800b38c:	461a      	mov	r2, r3
 800b38e:	4629      	mov	r1, r5
 800b390:	4620      	mov	r0, r4
 800b392:	f000 ff59 	bl	800c248 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7fa fa54 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b39c:	4603      	mov	r3, r0
    }
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bdb0      	pop	{r4, r5, r7, pc}

0800b3a6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b0a4      	sub	sp, #144	; 0x90
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	60f8      	str	r0, [r7, #12]
 800b3ae:	60b9      	str	r1, [r7, #8]
 800b3b0:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800b3b2:	68f9      	ldr	r1, [r7, #12]
 800b3b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7ff fd0e 	bl	800addc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800b3c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b3c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7ff fd19 	bl	800ae02 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b3d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f000 ff45 	bl	800c26a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 800b3e0:	f107 0314 	add.w	r3, r7, #20
 800b3e4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b3e8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f000 ff4f 	bl	800c290 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 800b3f2:	f107 0314 	add.w	r3, r7, #20
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 ff78 	bl	800c2ec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 800b3fc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800b400:	eeb0 0a67 	vmov.f32	s0, s15
 800b404:	3790      	adds	r7, #144	; 0x90
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b082      	sub	sp, #8
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b412:	2200      	movs	r2, #0
 800b414:	2101      	movs	r1, #1
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7ff f934 	bl	800a684 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 ff80 	bl	800c322 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 800b422:	bf00      	nop
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800b42a:	b480      	push	{r7}
 800b42c:	b083      	sub	sp, #12
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	330c      	adds	r3, #12
 800b436:	4618      	mov	r0, r3
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800b442:	b480      	push	{r7}
 800b444:	b083      	sub	sp, #12
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4618      	mov	r0, r3
 800b450:	370c      	adds	r7, #12
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800b45a:	b480      	push	{r7}
 800b45c:	b083      	sub	sp, #12
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	3304      	adds	r3, #4
 800b466:	4618      	mov	r0, r3
 800b468:	370c      	adds	r7, #12
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr

0800b472 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800b472:	b580      	push	{r7, lr}
 800b474:	b082      	sub	sp, #8
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
 800b47a:	6039      	str	r1, [r7, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	4618      	mov	r0, r3
 800b482:	f7fb fa58 	bl	8006936 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4618      	mov	r0, r3
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>:
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6839      	ldr	r1, [r7, #0]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 ff4f 	bl	800c342 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>:
    typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
  public:

    typedef typename internal::dense_xpr_base<BlockType>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b082      	sub	sp, #8
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	6039      	str	r1, [r7, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	683a      	ldr	r2, [r7, #0]
 800b4bc:	4611      	mov	r1, r2
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7f9 f8ab 	bl	800461a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	3310      	adds	r3, #16
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	6912      	ldr	r2, [r2, #16]
 800b4cc:	601a      	str	r2, [r3, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl)
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7ff ffe0 	bl	800b4ae <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Block)
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	683a      	ldr	r2, [r7, #0]
 800b506:	4611      	mov	r1, r2
 800b508:	4618      	mov	r0, r3
 800b50a:	f7ff ffe5 	bl	800b4d8 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4618      	mov	r0, r3
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>:
ConstRowXpr row(Index i) const
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800b524:	68b8      	ldr	r0, [r7, #8]
 800b526:	f7fa f824 	bl	8005572 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800b52a:	4603      	mov	r3, r0
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	4619      	mov	r1, r3
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f000 ff1d 	bl	800c370 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>
}
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Transpose)
 800b53e:	b580      	push	{r7, lr}
 800b540:	b082      	sub	sp, #8
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
 800b546:	6039      	str	r1, [r7, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	4611      	mov	r1, r2
 800b54e:	4618      	mov	r0, r3
 800b550:	f7ff ffd2 	bl	800b4f8 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4618      	mov	r0, r3
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b55e:	b580      	push	{r7, lr}
 800b560:	b082      	sub	sp, #8
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b568:	6838      	ldr	r0, [r7, #0]
 800b56a:	f000 ff29 	bl	800c3c0 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>
 800b56e:	4603      	mov	r3, r0
 800b570:	4619      	mov	r1, r3
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 ff47 	bl	800c406 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
}
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b58c:	68b8      	ldr	r0, [r7, #8]
 800b58e:	f7f9 fffb 	bl	8005588 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800b592:	4603      	mov	r3, r0
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	4619      	mov	r1, r3
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f000 ff47 	bl	800c42c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>
}
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b5a6:	b5b0      	push	{r4, r5, r7, lr}
 800b5a8:	b086      	sub	sp, #24
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	60f8      	str	r0, [r7, #12]
 800b5ae:	60b9      	str	r1, [r7, #8]
 800b5b0:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b5b2:	68b8      	ldr	r0, [r7, #8]
 800b5b4:	f000 ff62 	bl	800c47c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 ff69 	bl	800c492 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>
 800b5c0:	4605      	mov	r5, r0
 800b5c2:	f107 0314 	add.w	r3, r7, #20
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7f9 ff0a 	bl	80053e0 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b5cc:	f107 0314 	add.w	r3, r7, #20
 800b5d0:	462a      	mov	r2, r5
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 ffaf 	bl	800c538 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>
}
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bdb0      	pop	{r4, r5, r7, pc}

0800b5e2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>:
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b082      	sub	sp, #8
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fffe 	bl	800c5ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f001 f805 	bl	800c602 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b602:	b590      	push	{r4, r7, lr}
 800b604:	b085      	sub	sp, #20
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 ffee 	bl	800c5ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b610:	4604      	mov	r4, r0
 800b612:	f107 030c 	add.w	r3, r7, #12
 800b616:	4618      	mov	r0, r3
 800b618:	f7fa f9d9 	bl	80059ce <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b61c:	f107 030c 	add.w	r3, r7, #12
 800b620:	4619      	mov	r1, r3
 800b622:	4620      	mov	r0, r4
 800b624:	f001 f8da 	bl	800c7dc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b628:	eef0 7a40 	vmov.f32	s15, s0
 800b62c:	bf00      	nop
}
 800b62e:	eeb0 0a67 	vmov.f32	s0, s15
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	bd90      	pop	{r4, r7, pc}

0800b638 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b640:	2201      	movs	r2, #1
 800b642:	2101      	movs	r1, #1
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7fe fd56 	bl	800a0f6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f001 f90c 	bl	800c868 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>
  }
 800b650:	bf00      	nop
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	68b9      	ldr	r1, [r7, #8]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f001 f90c 	bl	800c888 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	db07      	blt.n	800b686 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x2e>
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	4618      	mov	r0, r3
 800b67a:	f7f9 fc10 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800b67e:	4602      	mov	r2, r0
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4293      	cmp	r3, r2
 800b684:	db05      	blt.n	800b692 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x3a>
 800b686:	4b06      	ldr	r3, [pc, #24]	; (800b6a0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x48>)
 800b688:	4a06      	ldr	r2, [pc, #24]	; (800b6a4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x4c>)
 800b68a:	2178      	movs	r1, #120	; 0x78
 800b68c:	4806      	ldr	r0, [pc, #24]	; (800b6a8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x50>)
 800b68e:	f012 fafd 	bl	801dc8c <__assert_func>
 800b692:	bf00      	nop
    }
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	08024678 	.word	0x08024678
 800b6a4:	08024720 	.word	0x08024720
 800b6a8:	080247fc 	.word	0x080247fc

0800b6ac <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b082      	sub	sp, #8
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f001 f8ed 	bl	800c8aa <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff ffed 	bl	800b6c2 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800b6f2:	b5b0      	push	{r4, r5, r7, lr}
 800b6f4:	b082      	sub	sp, #8
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	6039      	str	r1, [r7, #0]
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f7ff ffec 	bl	800b6da <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	4614      	mov	r4, r2
 800b708:	461d      	mov	r5, r3
 800b70a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b70c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b70e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b712:	e884 0003 	stmia.w	r4, {r0, r1}
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4618      	mov	r0, r3
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bdb0      	pop	{r4, r5, r7, pc}

0800b720 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	68b9      	ldr	r1, [r7, #8]
 800b732:	4618      	mov	r0, r3
 800b734:	f001 f8c4 	bl	800c8c0 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	db07      	blt.n	800b74e <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	4618      	mov	r0, r3
 800b742:	f7f9 fc47 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800b746:	4602      	mov	r2, r0
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4293      	cmp	r3, r2
 800b74c:	db05      	blt.n	800b75a <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800b74e:	4b05      	ldr	r3, [pc, #20]	; (800b764 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800b750:	4a05      	ldr	r2, [pc, #20]	; (800b768 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800b752:	2178      	movs	r1, #120	; 0x78
 800b754:	4805      	ldr	r0, [pc, #20]	; (800b76c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800b756:	f012 fa99 	bl	801dc8c <__assert_func>
    }
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	08024678 	.word	0x08024678
 800b768:	08024850 	.word	0x08024850
 800b76c:	080247fc 	.word	0x080247fc

0800b770 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>:
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4618      	mov	r0, r3
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>:
 800b786:	b480      	push	{r7}
 800b788:	b083      	sub	sp, #12
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4618      	mov	r0, r3
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f001 f89c 	bl	800c8e2 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7ff ffed 	bl	800b79c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3708      	adds	r7, #8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f001 f88e 	bl	800c8f8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b082      	sub	sp, #8
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f001 f88c 	bl	800c90e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>:

    typedef typename Base::CoeffReturnType CoeffReturnType;

    /** \copydoc DenseBase::rows() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	f7fb f913 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800b80c:	4603      	mov	r3, r0
 800b80e:	4618      	mov	r0, r3
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>:
    /** \copydoc DenseBase::cols() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	f7fb f910 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b822:	4603      	mov	r3, r0
 800b824:	4618      	mov	r0, r3
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800b82c:	b5b0      	push	{r4, r5, r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f7ff ffba 	bl	800b7b4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	4614      	mov	r4, r2
 800b846:	461d      	mov	r5, r3
 800b848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b84a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b84c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b850:	e884 0003 	stmia.w	r4, {r0, r1}
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f103 0218 	add.w	r2, r3, #24
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4614      	mov	r4, r2
 800b85e:	461d      	mov	r5, r3
 800b860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b864:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b868:	e884 0003 	stmia.w	r4, {r0, r1}
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	3330      	adds	r3, #48	; 0x30
 800b870:	6839      	ldr	r1, [r7, #0]
 800b872:	4618      	mov	r0, r3
 800b874:	f7f9 fe3e 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800b878:	68b8      	ldr	r0, [r7, #8]
 800b87a:	f7ff ffa7 	bl	800b7cc <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800b87e:	4604      	mov	r4, r0
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4618      	mov	r0, r3
 800b884:	f7ff ffbc 	bl	800b800 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800b888:	4603      	mov	r3, r0
 800b88a:	429c      	cmp	r4, r3
 800b88c:	d10a      	bne.n	800b8a4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 800b88e:	68b8      	ldr	r0, [r7, #8]
 800b890:	f7ff ffa9 	bl	800b7e6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800b894:	4604      	mov	r4, r0
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4618      	mov	r0, r3
 800b89a:	f7ff ffbc 	bl	800b816 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	429c      	cmp	r4, r3
 800b8a2:	d005      	beq.n	800b8b0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 800b8a4:	4b05      	ldr	r3, [pc, #20]	; (800b8bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800b8a6:	4a06      	ldr	r2, [pc, #24]	; (800b8c0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800b8a8:	2174      	movs	r1, #116	; 0x74
 800b8aa:	4806      	ldr	r0, [pc, #24]	; (800b8c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 800b8ac:	f012 f9ee 	bl	801dc8c <__assert_func>
    }
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3710      	adds	r7, #16
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bdb0      	pop	{r4, r5, r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	0801faf4 	.word	0x0801faf4
 800b8c0:	0802492c 	.word	0x0802492c
 800b8c4:	0801fd58 	.word	0x0801fd58

0800b8c8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 f809 	bl	800b8e8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f001 f823 	bl	800c924 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b082      	sub	sp, #8
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4618      	mov	r0, r3
 800b90a:	f7ff ff5f 	bl	800b7cc <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800b90e:	4603      	mov	r3, r0
    }
 800b910:	4618      	mov	r0, r3
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
// but that might complicate template specialization
template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator;

template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator : evaluator_base<Derived>
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f001 f831 	bl	800c988 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>:

// TODO: This evaluator does not actually use the child evaluator;
// all action is via the data() as returned by the Block expression.

template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7ff ffec 	bl	800b918 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4618      	mov	r0, r3
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b082      	sub	sp, #8
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4618      	mov	r0, r3
 800b956:	f7ff ffeb 	bl	800b930 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4618      	mov	r0, r3
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<const T>
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4618      	mov	r0, r3
 800b970:	f7ff ffeb 	bl	800b94a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800b97e:	b580      	push	{r7, lr}
 800b980:	b082      	sub	sp, #8
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4618      	mov	r0, r3
 800b98a:	f7ff ffeb 	bl	800b964 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 ffef 	bl	800c972 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4618      	mov	r0, r3
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b082      	sub	sp, #8
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7ff ffe8 	bl	800b97e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7ff ffeb 	bl	800b99e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b082      	sub	sp, #8
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 ffdf 	bl	800c99e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b082      	sub	sp, #8
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7ff ffec 	bl	800b9d2 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3708      	adds	r7, #8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7ff ffeb 	bl	800b9ea <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4618      	mov	r0, r3
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff ffeb 	bl	800ba04 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4618      	mov	r0, r3
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	330c      	adds	r3, #12
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7ff ffea 	bl	800ba1e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7ff ffb2 	bl	800b9b8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b082      	sub	sp, #8
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7ff ffe5 	bl	800ba38 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 ff74 	bl	800c95c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4618      	mov	r0, r3
 800ba78:	3708      	adds	r7, #8
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b082      	sub	sp, #8
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7ff ffe8 	bl	800ba5e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4618      	mov	r0, r3
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff ffeb 	bl	800ba7e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4618      	mov	r0, r3
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800bab4:	b580      	push	{r7, lr}
 800bab6:	ed2d 8b02 	vpush	{d8}
 800baba:	b088      	sub	sp, #32
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff f9df 	bl	800ae86 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	dd05      	ble.n	800bada <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f7ff fefa 	bl	800b8c8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	dc06      	bgt.n	800bae8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800bada:	4b16      	ldr	r3, [pc, #88]	; (800bb34 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800badc:	4a16      	ldr	r2, [pc, #88]	; (800bb38 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800bade:	f240 119b 	movw	r1, #411	; 0x19b
 800bae2:	4816      	ldr	r0, [pc, #88]	; (800bb3c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800bae4:	f012 f8d2 	bl	801dc8c <__assert_func>
 800bae8:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f7ff fefc 	bl	800b8e8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800baf0:	4602      	mov	r2, r0
 800baf2:	f107 030c 	add.w	r3, r7, #12
 800baf6:	4611      	mov	r1, r2
 800baf8:	4618      	mov	r0, r3
 800bafa:	f000 ff20 	bl	800c93e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f7ff fef2 	bl	800b8e8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800bb04:	4602      	mov	r2, r0
 800bb06:	f107 030c 	add.w	r3, r7, #12
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f000 ff51 	bl	800c9b4 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800bb12:	eeb0 8a40 	vmov.f32	s16, s0
 800bb16:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bb18:	f107 030c 	add.w	r3, r7, #12
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7ff ffbb 	bl	800ba98 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bb22:	eef0 7a48 	vmov.f32	s15, s16
}
 800bb26:	eeb0 0a67 	vmov.f32	s0, s15
 800bb2a:	3720      	adds	r7, #32
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	ecbd 8b02 	vpop	{d8}
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	08024b74 	.word	0x08024b74
 800bb38:	08024bb8 	.word	0x08024bb8
 800bb3c:	08024d80 	.word	0x08024d80

0800bb40 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7fe feb4 	bl	800a8b6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fe fedd 	bl	800a910 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800bb56:	4603      	mov	r3, r0
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800bb60:	b590      	push	{r4, r7, lr}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 ff4a 	bl	800ca04 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>
 800bb70:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800bb72:	6838      	ldr	r0, [r7, #0]
 800bb74:	f000 ff2f 	bl	800c9d6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800bb78:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f000 ff4c 	bl	800ca1a <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>
      m_rhs(xpr.rhs()),
 800bb82:	6838      	ldr	r0, [r7, #0]
 800bb84:	f000 ff32 	bl	800c9ec <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>
 800bb88:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	3324      	adds	r3, #36	; 0x24
 800bb8e:	6812      	ldr	r2, [r2, #0]
 800bb90:	601a      	str	r2, [r3, #0]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800bb96:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800bb98:	4611      	mov	r1, r2
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fb fe16 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	3324      	adds	r3, #36	; 0x24
      m_innerDim(xpr.lhs().cols())
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4610      	mov	r0, r2
 800bbae:	f000 ff49 	bl	800ca44 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
 800bbb2:	6838      	ldr	r0, [r7, #0]
 800bbb4:	f000 ff0f 	bl	800c9d6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7f9 feaf 	bl	800591e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd90      	pop	{r4, r7, pc}

0800bbd0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800bbd8:	2200      	movs	r2, #0
 800bbda:	2100      	movs	r1, #0
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 ff40 	bl	800ca62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 ff56 	bl	800ca94 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>
  }
 800bbe8:	bf00      	nop
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	68b9      	ldr	r1, [r7, #8]
 800bc04:	6978      	ldr	r0, [r7, #20]
 800bc06:	f000 ff55 	bl	800cab4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800bc0a:	bf00      	nop
 800bc0c:	3718      	adds	r7, #24
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800bc12:	b480      	push	{r7}
 800bc14:	b083      	sub	sp, #12
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	68b9      	ldr	r1, [r7, #8]
 800bc3c:	6978      	ldr	r0, [r7, #20]
 800bc3e:	f000 ff73 	bl	800cb28 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800bc42:	bf00      	nop
 800bc44:	3718      	adds	r7, #24
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800bc4a:	b480      	push	{r7}
 800bc4c:	b083      	sub	sp, #12
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4618      	mov	r0, r3
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 ff9c 	bl	800cba6 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	4618      	mov	r0, r3
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	68b9      	ldr	r1, [r7, #8]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f000 ff97 	bl	800cbbe <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	db07      	blt.n	800bca6 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7f9 f9a6 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4293      	cmp	r3, r2
 800bca4:	db05      	blt.n	800bcb2 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 800bca6:	4b06      	ldr	r3, [pc, #24]	; (800bcc0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 800bca8:	4a06      	ldr	r2, [pc, #24]	; (800bcc4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 800bcaa:	2178      	movs	r1, #120	; 0x78
 800bcac:	4806      	ldr	r0, [pc, #24]	; (800bcc8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x50>)
 800bcae:	f011 ffed 	bl	801dc8c <__assert_func>
 800bcb2:	bf00      	nop
    }
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	08024678 	.word	0x08024678
 800bcc4:	08024dd4 	.word	0x08024dd4
 800bcc8:	080247fc 	.word	0x080247fc

0800bccc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	370c      	adds	r7, #12
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b082      	sub	sp, #8
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 ff78 	bl	800cbe0 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b082      	sub	sp, #8
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7ff ffed 	bl	800bce2 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800bd12:	b5b0      	push	{r4, r5, r7, lr}
 800bd14:	b082      	sub	sp, #8
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	6039      	str	r1, [r7, #0]
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7ff ffec 	bl	800bcfa <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	4614      	mov	r4, r2
 800bd28:	461d      	mov	r5, r3
 800bd2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bd32:	e884 0003 	stmia.w	r4, {r0, r1}
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bdb0      	pop	{r4, r5, r7, pc}

0800bd40 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	68b9      	ldr	r1, [r7, #8]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f000 ff4f 	bl	800cbf6 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	db0f      	blt.n	800bd7e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x3e>
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fa f88c 	bl	8005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800bd66:	4602      	mov	r2, r0
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	db0d      	blt.n	800bd8a <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fa f88f 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800bd76:	4602      	mov	r2, r0
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	db05      	blt.n	800bd8a <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800bd7e:	4b06      	ldr	r3, [pc, #24]	; (800bd98 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x58>)
 800bd80:	4a06      	ldr	r2, [pc, #24]	; (800bd9c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x5c>)
 800bd82:	2178      	movs	r1, #120	; 0x78
 800bd84:	4806      	ldr	r0, [pc, #24]	; (800bda0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x60>)
 800bd86:	f011 ff81 	bl	801dc8c <__assert_func>
 800bd8a:	bf00      	nop
    }
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	08024678 	.word	0x08024678
 800bd9c:	08024eb0 	.word	0x08024eb0
 800bda0:	080247fc 	.word	0x080247fc

0800bda4 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>:
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	370c      	adds	r7, #12
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr

0800bdba <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>:
 800bdba:	b480      	push	{r7}
 800bdbc:	b083      	sub	sp, #12
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 ff1d 	bl	800cc18 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4618      	mov	r0, r3
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f7ff ffed 	bl	800bdd0 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 ff0f 	bl	800cc2e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>
 800be10:	4603      	mov	r3, r0
 800be12:	4618      	mov	r0, r3
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b082      	sub	sp, #8
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4618      	mov	r0, r3
 800be26:	f000 ff0d 	bl	800cc44 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>
 800be2a:	4603      	mov	r3, r0
 800be2c:	4618      	mov	r0, r3
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	f7fa fe01 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800be40:	4603      	mov	r3, r0
 800be42:	4618      	mov	r0, r3
 800be44:	3708      	adds	r7, #8
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b082      	sub	sp, #8
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	f7fa fdf6 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800be56:	4603      	mov	r3, r0
 800be58:	4618      	mov	r0, r3
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800be60:	b5b0      	push	{r4, r5, r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
 800be6c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f7ff ffba 	bl	800bde8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	4614      	mov	r4, r2
 800be7a:	461d      	mov	r5, r3
 800be7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be80:	e895 0003 	ldmia.w	r5, {r0, r1}
 800be84:	e884 0003 	stmia.w	r4, {r0, r1}
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f103 0218 	add.w	r2, r3, #24
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4614      	mov	r4, r2
 800be92:	461d      	mov	r5, r3
 800be94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be98:	682b      	ldr	r3, [r5, #0]
 800be9a:	6023      	str	r3, [r4, #0]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	332c      	adds	r3, #44	; 0x2c
 800bea0:	6839      	ldr	r1, [r7, #0]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7f9 fb26 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800bea8:	68b8      	ldr	r0, [r7, #8]
 800beaa:	f7ff ffa9 	bl	800be00 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800beae:	4604      	mov	r4, r0
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7ff ffbe 	bl	800be34 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>
 800beb8:	4603      	mov	r3, r0
 800beba:	429c      	cmp	r4, r3
 800bebc:	d10a      	bne.n	800bed4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x74>
 800bebe:	68b8      	ldr	r0, [r7, #8]
 800bec0:	f7ff ffab 	bl	800be1a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800bec4:	4604      	mov	r4, r0
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4618      	mov	r0, r3
 800beca:	f7ff ffbe 	bl	800be4a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>
 800bece:	4603      	mov	r3, r0
 800bed0:	429c      	cmp	r4, r3
 800bed2:	d005      	beq.n	800bee0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x80>
 800bed4:	4b05      	ldr	r3, [pc, #20]	; (800beec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x8c>)
 800bed6:	4a06      	ldr	r2, [pc, #24]	; (800bef0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800bed8:	2174      	movs	r1, #116	; 0x74
 800beda:	4806      	ldr	r0, [pc, #24]	; (800bef4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800bedc:	f011 fed6 	bl	801dc8c <__assert_func>
    }
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bdb0      	pop	{r4, r5, r7, pc}
 800beea:	bf00      	nop
 800beec:	0801faf4 	.word	0x0801faf4
 800bef0:	08024f8c 	.word	0x08024f8c
 800bef4:	0801fd58 	.word	0x0801fd58

0800bef8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 f809 	bl	800bf18 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800bf06:	4603      	mov	r3, r0
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f000 fea6 	bl	800cc5a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	4618      	mov	r0, r3
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	4618      	mov	r0, r3
 800bf24:	370c      	adds	r7, #12
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b082      	sub	sp, #8
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7ff ff61 	bl	800be00 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800bf3e:	4603      	mov	r3, r0
    }
 800bf40:	4618      	mov	r0, r3
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 feb4 	bl	800ccbe <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7ff ffec 	bl	800bf48 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4618      	mov	r0, r3
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b082      	sub	sp, #8
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7ff ffeb 	bl	800bf60 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7ff ffeb 	bl	800bf7a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3708      	adds	r7, #8
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b082      	sub	sp, #8
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7ff ffeb 	bl	800bf94 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fe72 	bl	800cca8 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b082      	sub	sp, #8
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7ff ffe8 	bl	800bfae <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7ff ffeb 	bl	800bfce <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	4618      	mov	r0, r3
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c002:	b580      	push	{r7, lr}
 800c004:	b082      	sub	sp, #8
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 fe62 	bl	800ccd4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4618      	mov	r0, r3
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b082      	sub	sp, #8
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4618      	mov	r0, r3
 800c026:	f7ff ffec 	bl	800c002 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4618      	mov	r0, r3
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4618      	mov	r0, r3
 800c040:	f7ff ffeb 	bl	800c01a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4618      	mov	r0, r3
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800c04e:	b580      	push	{r7, lr}
 800c050:	b082      	sub	sp, #8
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff ffeb 	bl	800c034 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4618      	mov	r0, r3
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	330c      	adds	r3, #12
 800c074:	4618      	mov	r0, r3
 800c076:	f7ff ffea 	bl	800c04e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	3304      	adds	r3, #4
 800c07e:	4618      	mov	r0, r3
 800c080:	f7ff ffb2 	bl	800bfe8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	4618      	mov	r0, r3
 800c088:	3708      	adds	r7, #8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c08e:	b580      	push	{r7, lr}
 800c090:	b082      	sub	sp, #8
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4618      	mov	r0, r3
 800c09a:	f7ff ffe5 	bl	800c068 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 fdf7 	bl	800cc92 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b082      	sub	sp, #8
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7ff ffe8 	bl	800c08e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7ff ffeb 	bl	800c0ae <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
	...

0800c0e4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	ed2d 8b02 	vpush	{d8}
 800c0ea:	b088      	sub	sp, #32
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff f897 	bl	800b226 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	dd05      	ble.n	800c10a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7ff fefa 	bl	800bef8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	dc06      	bgt.n	800c118 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c10a:	4b16      	ldr	r3, [pc, #88]	; (800c164 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c10c:	4a16      	ldr	r2, [pc, #88]	; (800c168 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c10e:	f240 119b 	movw	r1, #411	; 0x19b
 800c112:	4816      	ldr	r0, [pc, #88]	; (800c16c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c114:	f011 fdba 	bl	801dc8c <__assert_func>
 800c118:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7ff fefc 	bl	800bf18 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c120:	4602      	mov	r2, r0
 800c122:	f107 030c 	add.w	r3, r7, #12
 800c126:	4611      	mov	r1, r2
 800c128:	4618      	mov	r0, r3
 800c12a:	f000 fda3 	bl	800cc74 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f7ff fef2 	bl	800bf18 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c134:	4602      	mov	r2, r0
 800c136:	f107 030c 	add.w	r3, r7, #12
 800c13a:	6839      	ldr	r1, [r7, #0]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f000 fdd4 	bl	800ccea <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800c142:	eeb0 8a40 	vmov.f32	s16, s0
 800c146:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c148:	f107 030c 	add.w	r3, r7, #12
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7ff ffbb 	bl	800c0c8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c152:	eef0 7a48 	vmov.f32	s15, s16
}
 800c156:	eeb0 0a67 	vmov.f32	s0, s15
 800c15a:	3720      	adds	r7, #32
 800c15c:	46bd      	mov	sp, r7
 800c15e:	ecbd 8b02 	vpop	{d8}
 800c162:	bd80      	pop	{r7, pc}
 800c164:	08024b74 	.word	0x08024b74
 800c168:	080251d4 	.word	0x080251d4
 800c16c:	08024d80 	.word	0x08024d80

0800c170 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fdc5 	bl	800cd0c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800c182:	bf00      	nop
 800c184:	3708      	adds	r7, #8
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b0a2      	sub	sp, #136	; 0x88
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
 800c192:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800c19a:	2300      	movs	r3, #0
 800c19c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6819      	ldr	r1, [r3, #0]
 800c1a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c1a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fe ffe5 	bl	800b17c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800c1b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c1b6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800c1ba:	4611      	mov	r1, r2
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7fe fff0 	bl	800b1a2 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	1d19      	adds	r1, r3, #4
 800c1c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7fe fff9 	bl	800b1c4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800c1d2:	f107 030c 	add.w	r3, r7, #12
 800c1d6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c1da:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7ff f803 	bl	800b1ea <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800c1e4:	f107 030c 	add.w	r3, r7, #12
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7ff f82c 	bl	800b246 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800c1ee:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c1f2:	eeb0 0a67 	vmov.f32	s0, s15
 800c1f6:	3788      	adds	r7, #136	; 0x88
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	ed93 7a00 	vldr	s14, [r3]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	edd3 7a00 	vldr	s15, [r3]
 800c214:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	edc3 7a00 	vstr	s15, [r3]
 800c21e:	bf00      	nop
 800c220:	3714      	adds	r7, #20
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b082      	sub	sp, #8
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800c232:	2102      	movs	r1, #2
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f7ff f863 	bl	800b300 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fd87 	bl	800cd4e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>
  }
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	68b9      	ldr	r1, [r7, #8]
 800c25c:	6978      	ldr	r0, [r7, #20]
 800c25e:	f000 fd80 	bl	800cd62 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800c262:	bf00      	nop
 800c264:	3718      	adds	r7, #24
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b084      	sub	sp, #16
 800c26e:	af00      	add	r7, sp, #0
 800c270:	60f8      	str	r0, [r7, #12]
 800c272:	60b9      	str	r1, [r7, #8]
 800c274:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800c276:	68b8      	ldr	r0, [r7, #8]
 800c278:	f7f9 fa1b 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800c27c:	4603      	mov	r3, r0
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	4619      	mov	r1, r3
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	f000 fd98 	bl	800cdb8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>
}
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800c290:	b5b0      	push	{r4, r5, r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800c29c:	68b8      	ldr	r0, [r7, #8]
 800c29e:	f7ff fa67 	bl	800b770 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 fdaf 	bl	800ce08 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 800c2aa:	4605      	mov	r5, r0
 800c2ac:	f107 0314 	add.w	r3, r7, #20
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7f9 f895 	bl	80053e0 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800c2b6:	f107 0314 	add.w	r3, r7, #20
 800c2ba:	462a      	mov	r2, r5
 800c2bc:	4621      	mov	r1, r4
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f000 fddc 	bl	800ce7c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>
}
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	3718      	adds	r7, #24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bdb0      	pop	{r4, r5, r7, pc}

0800c2cc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fe2f 	bl	800cf38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 fe36 	bl	800cf4e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800c2ec:	b590      	push	{r4, r7, lr}
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fe1f 	bl	800cf38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	f107 030c 	add.w	r3, r7, #12
 800c300:	4618      	mov	r0, r3
 800c302:	f7f9 fb64 	bl	80059ce <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800c306:	f107 030c 	add.w	r3, r7, #12
 800c30a:	4619      	mov	r1, r3
 800c30c:	4620      	mov	r0, r4
 800c30e:	f000 fe9b 	bl	800d048 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800c312:	eef0 7a40 	vmov.f32	s15, s0
 800c316:	bf00      	nop
}
 800c318:	eeb0 0a67 	vmov.f32	s0, s15
 800c31c:	3714      	adds	r7, #20
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd90      	pop	{r4, r7, pc}

0800c322 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c322:	b580      	push	{r7, lr}
 800c324:	b082      	sub	sp, #8
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c32a:	2201      	movs	r2, #1
 800c32c:	2101      	movs	r1, #1
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f7fe f9a8 	bl	800a684 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 fecd 	bl	800d0d4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 800c33a:	bf00      	nop
 800c33c:	3708      	adds	r7, #8
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)
 800c342:	b590      	push	{r4, r7, lr}
 800c344:	b083      	sub	sp, #12
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
 800c34a:	6039      	str	r1, [r7, #0]
    : m_functor(n.functor()), m_wrapper()
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fedd 	bl	800d10c <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800c352:	687c      	ldr	r4, [r7, #4]
 800c354:	6838      	ldr	r0, [r7, #0]
 800c356:	f000 fecd 	bl	800d0f4 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 800c35a:	4603      	mov	r3, r0
 800c35c:	4619      	mov	r1, r3
 800c35e:	4620      	mov	r0, r4
 800c360:	f7f9 f8b8 	bl	80054d4 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
  }
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4618      	mov	r0, r3
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd90      	pop	{r4, r7, pc}
	...

0800c370 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	68b9      	ldr	r1, [r7, #8]
 800c382:	4618      	mov	r0, r3
 800c384:	f000 fecd 	bl	800d122 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>
      eigen_assert( (i>=0) && (
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	db06      	blt.n	800c39c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x2c>
 800c38e:	68b8      	ldr	r0, [r7, #8]
 800c390:	f7fb fe6d 	bl	800806e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 800c394:	4602      	mov	r2, r0
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4293      	cmp	r3, r2
 800c39a:	db05      	blt.n	800c3a8 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x38>
 800c39c:	4b05      	ldr	r3, [pc, #20]	; (800c3b4 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x44>)
 800c39e:	4a06      	ldr	r2, [pc, #24]	; (800c3b8 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x48>)
 800c3a0:	2178      	movs	r1, #120	; 0x78
 800c3a2:	4806      	ldr	r0, [pc, #24]	; (800c3bc <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x4c>)
 800c3a4:	f011 fc72 	bl	801dc8c <__assert_func>
 800c3a8:	bf00      	nop
    }
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	08024678 	.word	0x08024678
 800c3b8:	0802539c 	.word	0x0802539c
 800c3bc:	080247fc 	.word	0x080247fc

0800c3c0 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	370c      	adds	r7, #12
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr

0800c3d6 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b082      	sub	sp, #8
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 feb0 	bl	800d144 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b082      	sub	sp, #8
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f7ff ffed 	bl	800c3d6 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4618      	mov	r0, r3
 800c400:	3708      	adds	r7, #8
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}

0800c406 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800c406:	b580      	push	{r7, lr}
 800c408:	b082      	sub	sp, #8
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	6039      	str	r1, [r7, #0]
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f7ff ffec 	bl	800c3ee <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7ff f86c 	bl	800b4f8 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4618      	mov	r0, r3
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
	...

0800c42c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	607a      	str	r2, [r7, #4]
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	68b9      	ldr	r1, [r7, #8]
 800c43e:	4618      	mov	r0, r3
 800c440:	f000 fe8b 	bl	800d15a <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	db06      	blt.n	800c458 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x2c>
 800c44a:	68b8      	ldr	r0, [r7, #8]
 800c44c:	f7fb fe1d 	bl	800808a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800c450:	4602      	mov	r2, r0
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4293      	cmp	r3, r2
 800c456:	db05      	blt.n	800c464 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x38>
 800c458:	4b05      	ldr	r3, [pc, #20]	; (800c470 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x44>)
 800c45a:	4a06      	ldr	r2, [pc, #24]	; (800c474 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x48>)
 800c45c:	2178      	movs	r1, #120	; 0x78
 800c45e:	4806      	ldr	r0, [pc, #24]	; (800c478 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x4c>)
 800c460:	f011 fc14 	bl	801dc8c <__assert_func>
    }
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	08024678 	.word	0x08024678
 800c474:	08025534 	.word	0x08025534
 800c478:	080247fc 	.word	0x080247fc

0800c47c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>:
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4618      	mov	r0, r3
 800c488:	370c      	adds	r7, #12
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr

0800c492 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>:
 800c492:	b480      	push	{r7}
 800c494:	b083      	sub	sp, #12
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4618      	mov	r0, r3
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 fe63 	bl	800d17c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f7ff ffed 	bl	800c4a8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f000 fe55 	bl	800d192 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b082      	sub	sp, #8
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f000 fe53 	bl	800d1a8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>
 800c502:	4603      	mov	r3, r0
 800c504:	4618      	mov	r0, r3
 800c506:	3708      	adds	r7, #8
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	f7fa fa95 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c518:	4603      	mov	r3, r0
 800c51a:	4618      	mov	r0, r3
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c522:	b580      	push	{r7, lr}
 800c524:	b082      	sub	sp, #8
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
 800c52a:	f7fa fa8a 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c52e:	4603      	mov	r3, r0
 800c530:	4618      	mov	r0, r3
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c538:	b5b0      	push	{r4, r5, r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	607a      	str	r2, [r7, #4]
 800c544:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f7ff ffba 	bl	800c4c0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	3304      	adds	r3, #4
 800c550:	68b9      	ldr	r1, [r7, #8]
 800c552:	4618      	mov	r0, r3
 800c554:	f7fe fff3 	bl	800b53e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f103 021c 	add.w	r2, r3, #28
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4614      	mov	r4, r2
 800c562:	461d      	mov	r5, r3
 800c564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c568:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c56c:	e884 0003 	stmia.w	r4, {r0, r1}
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	3334      	adds	r3, #52	; 0x34
 800c574:	6839      	ldr	r1, [r7, #0]
 800c576:	4618      	mov	r0, r3
 800c578:	f7f8 ffbc 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c57c:	68b8      	ldr	r0, [r7, #8]
 800c57e:	f7ff ffab 	bl	800c4d8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c582:	4604      	mov	r4, r0
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4618      	mov	r0, r3
 800c588:	f7ff ffc0 	bl	800c50c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>
 800c58c:	4603      	mov	r3, r0
 800c58e:	429c      	cmp	r4, r3
 800c590:	d10a      	bne.n	800c5a8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x70>
 800c592:	68b8      	ldr	r0, [r7, #8]
 800c594:	f7ff ffad 	bl	800c4f2 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800c598:	4604      	mov	r4, r0
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7ff ffc0 	bl	800c522 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	429c      	cmp	r4, r3
 800c5a6:	d005      	beq.n	800c5b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x7c>
 800c5a8:	4b05      	ldr	r3, [pc, #20]	; (800c5c0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x88>)
 800c5aa:	4a06      	ldr	r2, [pc, #24]	; (800c5c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x8c>)
 800c5ac:	2174      	movs	r1, #116	; 0x74
 800c5ae:	4806      	ldr	r0, [pc, #24]	; (800c5c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x90>)
 800c5b0:	f011 fb6c 	bl	801dc8c <__assert_func>
    }
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bdb0      	pop	{r4, r5, r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	0801faf4 	.word	0x0801faf4
 800c5c4:	08025624 	.word	0x08025624
 800c5c8:	0801fd58 	.word	0x0801fd58

0800c5cc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 f809 	bl	800c5ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 fdee 	bl	800d1be <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	370c      	adds	r7, #12
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr

0800c602 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c602:	b580      	push	{r7, lr}
 800c604:	b082      	sub	sp, #8
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	3304      	adds	r3, #4
 800c60e:	4618      	mov	r0, r3
 800c610:	f7ff ff62 	bl	800c4d8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c614:	4603      	mov	r3, r0
    }
 800c616:	4618      	mov	r0, r3
 800c618:	3708      	adds	r7, #8
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<const T>
 800c61e:	b580      	push	{r7, lr}
 800c620:	b082      	sub	sp, #8
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	4618      	mov	r0, r3
 800c62a:	f7fc fc30 	bl	8008e8e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	4618      	mov	r0, r3
 800c632:	3708      	adds	r7, #8
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>, IndexBased>
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4618      	mov	r0, r3
 800c644:	f7ff ffeb 	bl	800c61e <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 fdeb 	bl	800d224 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4618      	mov	r0, r3
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /*HasDirectAccess*/ false>
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4618      	mov	r0, r3
 800c664:	f7ff ffe8 	bl	800c638 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4618      	mov	r0, r3
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c672:	b580      	push	{r7, lr}
 800c674:	b082      	sub	sp, #8
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7ff ffeb 	bl	800c658 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4618      	mov	r0, r3
 800c698:	f7ff ffeb 	bl	800c672 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b082      	sub	sp, #8
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7ff ffeb 	bl	800c68c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 fda9 	bl	800d20e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7ff ffe8 	bl	800c6a6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7ff ffeb 	bl	800c6c6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b082      	sub	sp, #8
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 fd99 	bl	800d23a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4618      	mov	r0, r3
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c712:	b580      	push	{r7, lr}
 800c714:	b082      	sub	sp, #8
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7ff ffec 	bl	800c6fa <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4618      	mov	r0, r3
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4618      	mov	r0, r3
 800c738:	f7ff ffeb 	bl	800c712 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4618      	mov	r0, r3
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c746:	b580      	push	{r7, lr}
 800c748:	b082      	sub	sp, #8
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4618      	mov	r0, r3
 800c752:	f7ff ffeb 	bl	800c72c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	4618      	mov	r0, r3
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>:
  struct Data
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	3320      	adds	r3, #32
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7ff ffea 	bl	800c746 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	3304      	adds	r3, #4
 800c776:	4618      	mov	r0, r3
 800c778:	f7ff ffb2 	bl	800c6e0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4618      	mov	r0, r3
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c786:	b580      	push	{r7, lr}
 800c788:	b082      	sub	sp, #8
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4618      	mov	r0, r3
 800c792:	f7ff ffe5 	bl	800c760 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 fd2e 	bl	800d1f8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3708      	adds	r7, #8
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b082      	sub	sp, #8
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7ff ffe8 	bl	800c786 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7ff ffeb 	bl	800c7a6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3708      	adds	r7, #8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
	...

0800c7dc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	ed2d 8b02 	vpush	{d8}
 800c7e2:	b08c      	sub	sp, #48	; 0x30
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7fe fef9 	bl	800b5e2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	dd05      	ble.n	800c802 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7ff fee8 	bl	800c5cc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	dc06      	bgt.n	800c810 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c802:	4b16      	ldr	r3, [pc, #88]	; (800c85c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c804:	4a16      	ldr	r2, [pc, #88]	; (800c860 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c806:	f240 119b 	movw	r1, #411	; 0x19b
 800c80a:	4816      	ldr	r0, [pc, #88]	; (800c864 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c80c:	f011 fa3e 	bl	801dc8c <__assert_func>
 800c810:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f7ff feea 	bl	800c5ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c818:	4602      	mov	r2, r0
 800c81a:	f107 0308 	add.w	r3, r7, #8
 800c81e:	4611      	mov	r1, r2
 800c820:	4618      	mov	r0, r3
 800c822:	f000 fcda 	bl	800d1da <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f7ff fee0 	bl	800c5ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c82c:	4602      	mov	r2, r0
 800c82e:	f107 0308 	add.w	r3, r7, #8
 800c832:	6839      	ldr	r1, [r7, #0]
 800c834:	4618      	mov	r0, r3
 800c836:	f000 fd0b 	bl	800d250 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>
 800c83a:	eeb0 8a40 	vmov.f32	s16, s0
 800c83e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c840:	f107 0308 	add.w	r3, r7, #8
 800c844:	4618      	mov	r0, r3
 800c846:	f7ff ffbb 	bl	800c7c0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c84a:	eef0 7a48 	vmov.f32	s15, s16
}
 800c84e:	eeb0 0a67 	vmov.f32	s0, s15
 800c852:	3730      	adds	r7, #48	; 0x30
 800c854:	46bd      	mov	sp, r7
 800c856:	ecbd 8b02 	vpop	{d8}
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	08024b74 	.word	0x08024b74
 800c860:	08025a0c 	.word	0x08025a0c
 800c864:	08024d80 	.word	0x08024d80

0800c868 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c870:	2202      	movs	r2, #2
 800c872:	2101      	movs	r1, #1
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7fd fc3e 	bl	800a0f6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fcf9 	bl	800d272 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>
  }
 800c880:	bf00      	nop
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	68b9      	ldr	r1, [r7, #8]
 800c89a:	4618      	mov	r0, r3
 800c89c:	f000 fcf9 	bl	800d292 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c8aa:	b480      	push	{r7}
 800c8ac:	b083      	sub	sp, #12
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
    }
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr

0800c8c0 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	68b9      	ldr	r1, [r7, #8]
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f000 fd13 	bl	800d2fe <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c8e2:	b480      	push	{r7}
 800c8e4:	b083      	sub	sp, #12
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
    }
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>:
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	f7fa f897 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800c904:	4603      	mov	r3, r0
 800c906:	4618      	mov	r0, r3
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c90e:	b580      	push	{r7, lr}
 800c910:	b082      	sub	sp, #8
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
 800c916:	f7fa f894 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c91a:	4603      	mov	r3, r0
 800c91c:	4618      	mov	r0, r3
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fe ff59 	bl	800b7e6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800c934:	4603      	mov	r3, r0
    }
 800c936:	4618      	mov	r0, r3
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800c93e:	b580      	push	{r7, lr}
 800c940:	b082      	sub	sp, #8
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
 800c946:	6039      	str	r1, [r7, #0]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6839      	ldr	r1, [r7, #0]
 800c94c:	4618      	mov	r0, r3
 800c94e:	f000 fd0c 	bl	800d36a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4618      	mov	r0, r3
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	4618      	mov	r0, r3
 800c968:	370c      	adds	r7, #12
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr

0800c972 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
 800c972:	b480      	push	{r7}
 800c974:	b083      	sub	sp, #12
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4618      	mov	r0, r3
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4618      	mov	r0, r3
 800c994:	370c      	adds	r7, #12
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr

0800c99e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
 800c99e:	b480      	push	{r7}
 800c9a0:	b083      	sub	sp, #12
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800c9c0:	68b9      	ldr	r1, [r7, #8]
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f000 fce0 	bl	800d388 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800c9c8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c9cc:	eeb0 0a67 	vmov.f32	s0, s15
 800c9d0:	3710      	adds	r7, #16
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800c9d6:	b480      	push	{r7}
 800c9d8:	b083      	sub	sp, #12
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr

0800ca1a <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b082      	sub	sp, #8
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
 800ca22:	6039      	str	r1, [r7, #0]
    {
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7f8 f937 	bl	8004c9a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800ca2c:	f7f8 f945 	bl	8004cba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6839      	ldr	r1, [r7, #0]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f000 fccb 	bl	800d3d0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>
    }
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f000 fcc9 	bl	800d3ea <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b086      	sub	sp, #24
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	60f8      	str	r0, [r7, #12]
 800ca6a:	60b9      	str	r1, [r7, #8]
 800ca6c:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800ca6e:	6879      	ldr	r1, [r7, #4]
 800ca70:	68b8      	ldr	r0, [r7, #8]
 800ca72:	f000 fcd0 	bl	800d416 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800ca76:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800ca78:	6879      	ldr	r1, [r7, #4]
 800ca7a:	68b8      	ldr	r0, [r7, #8]
 800ca7c:	f000 fcd7 	bl	800d42e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800ca80:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	6979      	ldr	r1, [r7, #20]
 800ca86:	68f8      	ldr	r0, [r7, #12]
 800ca88:	f000 fcdd 	bl	800d446 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800ca8c:	bf00      	nop
 800ca8e:	3718      	adds	r7, #24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	2100      	movs	r1, #0
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f7ff ffde 	bl	800ca62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fcf3 	bl	800d492 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>
  }
 800caac:	bf00      	nop
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800cab4:	b590      	push	{r4, r7, lr}
 800cab6:	b087      	sub	sp, #28
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800cac0:	68b8      	ldr	r0, [r7, #8]
 800cac2:	f7fb fc65 	bl	8008390 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800cac6:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800cac8:	68b8      	ldr	r0, [r7, #8]
 800caca:	f7f9 fab8 	bl	800603e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800cace:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7f8 fa89 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800cad8:	4602      	mov	r2, r0
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	4293      	cmp	r3, r2
 800cade:	d107      	bne.n	800caf0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x3c>
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7f8 fa76 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800cae8:	4602      	mov	r2, r0
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	4293      	cmp	r3, r2
 800caee:	d001      	beq.n	800caf4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x40>
 800caf0:	2301      	movs	r3, #1
 800caf2:	e000      	b.n	800caf6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x42>
 800caf4:	2300      	movs	r3, #0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d005      	beq.n	800cb06 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x52>
      dst.resize(dstRows, dstCols);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	693a      	ldr	r2, [r7, #16]
 800cafe:	6979      	ldr	r1, [r7, #20]
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7fb f97d 	bl	8007e00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800cb06:	68b8      	ldr	r0, [r7, #8]
 800cb08:	f000 fcd3 	bl	800d4b2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	68b8      	ldr	r0, [r7, #8]
 800cb10:	f000 fcdb 	bl	800d4ca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>
 800cb14:	4603      	mov	r3, r0
 800cb16:	461a      	mov	r2, r3
 800cb18:	4621      	mov	r1, r4
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	f000 fce1 	bl	800d4e2 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>
  }
 800cb20:	bf00      	nop
 800cb22:	371c      	adds	r7, #28
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd90      	pop	{r4, r7, pc}

0800cb28 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename XprType::Scalar> &)
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b088      	sub	sp, #32
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800cb34:	68b8      	ldr	r0, [r7, #8]
 800cb36:	f7f9 fa90 	bl	800605a <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 800cb3a:	61f8      	str	r0, [r7, #28]
    Index dstCols = src.cols();
 800cb3c:	68b8      	ldr	r0, [r7, #8]
 800cb3e:	f7fb fc35 	bl	80083ac <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800cb42:	61b8      	str	r0, [r7, #24]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7f9 f999 	bl	8005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d107      	bne.n	800cb64 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7f9 f99c 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	69bb      	ldr	r3, [r7, #24]
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d001      	beq.n	800cb68 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 800cb64:	2301      	movs	r3, #1
 800cb66:	e000      	b.n	800cb6a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 800cb68:	2300      	movs	r3, #0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d005      	beq.n	800cb7a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	69ba      	ldr	r2, [r7, #24]
 800cb72:	69f9      	ldr	r1, [r7, #28]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f000 fcd3 	bl	800d520 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    const int Size = EIGEN_PLAIN_ENUM_MIN(XprType::ColsAtCompileTime,DstXprType::ColsAtCompileTime);
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	617b      	str	r3, [r7, #20]
    ActualXprType actual_xpr(src.nestedExpression());
 800cb7e:	68b8      	ldr	r0, [r7, #8]
 800cb80:	f000 fd00 	bl	800d584 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>
 800cb84:	4602      	mov	r2, r0
 800cb86:	f107 0310 	add.w	r3, r7, #16
 800cb8a:	4611      	mov	r1, r2
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 fd04 	bl	800d59a <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>
    compute_inverse<ActualXprTypeCleanded, DstXprType>::run(actual_xpr, dst);
 800cb92:	f107 0310 	add.w	r3, r7, #16
 800cb96:	68f9      	ldr	r1, [r7, #12]
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f000 fd13 	bl	800d5c4 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>
  }
 800cb9e:	bf00      	nop
 800cba0:	3720      	adds	r7, #32
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b082      	sub	sp, #8
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 fd47 	bl	800d642 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>
 800cbb4:	4603      	mov	r3, r0
    }
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b084      	sub	sp, #16
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	60f8      	str	r0, [r7, #12]
 800cbc6:	60b9      	str	r1, [r7, #8]
 800cbc8:	607a      	str	r2, [r7, #4]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	68b9      	ldr	r1, [r7, #8]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 fd58 	bl	800d686 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3710      	adds	r7, #16
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
    }
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4618      	mov	r0, r3
 800cbec:	370c      	adds	r7, #12
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr

0800cbf6 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b084      	sub	sp, #16
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	60f8      	str	r0, [r7, #12]
 800cbfe:	60b9      	str	r1, [r7, #8]
 800cc00:	607a      	str	r2, [r7, #4]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	68b9      	ldr	r1, [r7, #8]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f000 fd6d 	bl	800d6e8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	4618      	mov	r0, r3
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
    }
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4618      	mov	r0, r3
 800cc24:	370c      	adds	r7, #12
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr

0800cc2e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b082      	sub	sp, #8
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
 800cc36:	f7f9 ff04 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	f7f9 fef9 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cc50:	4603      	mov	r3, r0
 800cc52:	4618      	mov	r0, r3
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b082      	sub	sp, #8
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7ff f8d8 	bl	800be1a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800cc6a:	4603      	mov	r3, r0
    }
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	4618      	mov	r0, r3
 800cc84:	f000 fd61 	bl	800d74a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3708      	adds	r7, #8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}

0800cc92 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800cc92:	b480      	push	{r7}
 800cc94:	b083      	sub	sp, #12
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	370c      	adds	r7, #12
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr

0800ccbe <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
 800ccbe:	b480      	push	{r7}
 800ccc0:	b083      	sub	sp, #12
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4618      	mov	r0, r3
 800cce0:	370c      	adds	r7, #12
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr

0800ccea <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b084      	sub	sp, #16
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	60f8      	str	r0, [r7, #12]
 800ccf2:	60b9      	str	r1, [r7, #8]
 800ccf4:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800ccf6:	68b9      	ldr	r1, [r7, #8]
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f000 fd35 	bl	800d768 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800ccfe:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cd02:	eeb0 0a67 	vmov.f32	s0, s15
 800cd06:	3710      	adds	r7, #16
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800cd0c:	b5b0      	push	{r4, r5, r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7fe ff7b 	bl	800bc12 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800cd1c:	4604      	mov	r4, r0
 800cd1e:	6838      	ldr	r0, [r7, #0]
 800cd20:	f7f9 fade 	bl	80062e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 800cd24:	4605      	mov	r5, r0
 800cd26:	f107 030c 	add.w	r3, r7, #12
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fa f8e7 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800cd30:	f107 030c 	add.w	r3, r7, #12
 800cd34:	461a      	mov	r2, r3
 800cd36:	4629      	mov	r1, r5
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f000 fd26 	bl	800d78a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f7fe ff67 	bl	800bc12 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800cd44:	4603      	mov	r3, r0
    }
 800cd46:	4618      	mov	r0, r3
 800cd48:	3710      	adds	r7, #16
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bdb0      	pop	{r4, r5, r7, pc}

0800cd4e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800cd4e:	b480      	push	{r7}
 800cd50:	b083      	sub	sp, #12
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
 800cd56:	bf00      	nop
 800cd58:	370c      	adds	r7, #12
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr

0800cd62 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800cd62:	b590      	push	{r4, r7, lr}
 800cd64:	b087      	sub	sp, #28
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	60f8      	str	r0, [r7, #12]
 800cd6a:	60b9      	str	r1, [r7, #8]
 800cd6c:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800cd6e:	68b8      	ldr	r0, [r7, #8]
 800cd70:	f000 fd1c 	bl	800d7ac <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>
 800cd74:	4604      	mov	r4, r0
 800cd76:	f107 0310 	add.w	r3, r7, #16
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7fa f8bf 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800cd80:	f107 0310 	add.w	r3, r7, #16
 800cd84:	461a      	mov	r2, r3
 800cd86:	4621      	mov	r1, r4
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f7fa f99f 	bl	80070cc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800cd8e:	68b8      	ldr	r0, [r7, #8]
 800cd90:	f000 fd18 	bl	800d7c4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>
 800cd94:	4604      	mov	r4, r0
 800cd96:	f107 0314 	add.w	r3, r7, #20
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f000 fd1e 	bl	800d7dc <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800cda0:	f107 0314 	add.w	r3, r7, #20
 800cda4:	461a      	mov	r2, r3
 800cda6:	4621      	mov	r1, r4
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f000 fd22 	bl	800d7f2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800cdae:	bf00      	nop
 800cdb0:	371c      	adds	r7, #28
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd90      	pop	{r4, r7, pc}
	...

0800cdb8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	68b9      	ldr	r1, [r7, #8]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f000 fd22 	bl	800d814 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	db07      	blt.n	800cde6 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7f8 f855 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800cdde:	4602      	mov	r2, r0
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	4293      	cmp	r3, r2
 800cde4:	db05      	blt.n	800cdf2 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800cde6:	4b05      	ldr	r3, [pc, #20]	; (800cdfc <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800cde8:	4a05      	ldr	r2, [pc, #20]	; (800ce00 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800cdea:	2178      	movs	r1, #120	; 0x78
 800cdec:	4805      	ldr	r0, [pc, #20]	; (800ce04 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800cdee:	f010 ff4d 	bl	801dc8c <__assert_func>
    }
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	08024678 	.word	0x08024678
 800ce00:	08025ca0 	.word	0x08025ca0
 800ce04:	080247fc 	.word	0x080247fc

0800ce08 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>:
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4618      	mov	r0, r3
 800ce14:	370c      	adds	r7, #12
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr

0800ce1e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b082      	sub	sp, #8
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 fd05 	bl	800d836 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b082      	sub	sp, #8
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7ff ffed 	bl	800ce1e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>:
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b082      	sub	sp, #8
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
 800ce56:	f7f9 fdec 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	f7f9 fde9 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ce70:	4603      	mov	r3, r0
 800ce72:	4618      	mov	r0, r3
 800ce74:	3708      	adds	r7, #8
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
	...

0800ce7c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800ce7c:	b5b0      	push	{r4, r5, r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
 800ce88:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f7ff ffd3 	bl	800ce36 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>
 800ce90:	68fa      	ldr	r2, [r7, #12]
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	4614      	mov	r4, r2
 800ce96:	461d      	mov	r5, r3
 800ce98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cea0:	e884 0003 	stmia.w	r4, {r0, r1}
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f103 0218 	add.w	r2, r3, #24
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	4614      	mov	r4, r2
 800ceae:	461d      	mov	r5, r3
 800ceb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ceb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ceb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ceb8:	e884 0003 	stmia.w	r4, {r0, r1}
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	3330      	adds	r3, #48	; 0x30
 800cec0:	6839      	ldr	r1, [r7, #0]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7f8 fb16 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800cec8:	68b8      	ldr	r0, [r7, #8]
 800ceca:	f7fe fc7f 	bl	800b7cc <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800cece:	4604      	mov	r4, r0
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7ff ffbb 	bl	800ce4e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800ced8:	4603      	mov	r3, r0
 800ceda:	429c      	cmp	r4, r3
 800cedc:	d10a      	bne.n	800cef4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x78>
 800cede:	68b8      	ldr	r0, [r7, #8]
 800cee0:	f7fe fc81 	bl	800b7e6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800cee4:	4604      	mov	r4, r0
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7ff ffbb 	bl	800ce64 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 800ceee:	4603      	mov	r3, r0
 800cef0:	429c      	cmp	r4, r3
 800cef2:	d005      	beq.n	800cf00 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x84>
 800cef4:	4b05      	ldr	r3, [pc, #20]	; (800cf0c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x90>)
 800cef6:	4a06      	ldr	r2, [pc, #24]	; (800cf10 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x94>)
 800cef8:	2174      	movs	r1, #116	; 0x74
 800cefa:	4806      	ldr	r0, [pc, #24]	; (800cf14 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x98>)
 800cefc:	f010 fec6 	bl	801dc8c <__assert_func>
    }
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	4618      	mov	r0, r3
 800cf04:	3710      	adds	r7, #16
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bdb0      	pop	{r4, r5, r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	0801faf4 	.word	0x0801faf4
 800cf10:	08025d7c 	.word	0x08025d7c
 800cf14:	0801fd58 	.word	0x0801fd58

0800cf18 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f809 	bl	800cf38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800cf26:	4603      	mov	r3, r0
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 fc8f 	bl	800d84c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	4618      	mov	r0, r3
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4618      	mov	r0, r3
 800cf44:	370c      	adds	r7, #12
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr

0800cf4e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b082      	sub	sp, #8
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7fe fc37 	bl	800b7cc <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800cf5e:	4603      	mov	r3, r0
    }
 800cf60:	4618      	mov	r0, r3
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fc92 	bl	800d89a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7ff ffec 	bl	800cf68 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4618      	mov	r0, r3
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b082      	sub	sp, #8
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7ff ffeb 	bl	800cf80 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4618      	mov	r0, r3
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7ff ffeb 	bl	800cf9a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3708      	adds	r7, #8
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b082      	sub	sp, #8
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	330c      	adds	r3, #12
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7ff ffea 	bl	800cfb4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	3304      	adds	r3, #4
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fe fce7 	bl	800b9b8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	4618      	mov	r0, r3
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	4618      	mov	r0, r3
 800d000:	f7ff ffe5 	bl	800cfce <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 fc3d 	bl	800d884 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4618      	mov	r0, r3
 800d00e:	3708      	adds	r7, #8
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	4618      	mov	r0, r3
 800d020:	f7ff ffe8 	bl	800cff4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4618      	mov	r0, r3
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800d02e:	b580      	push	{r7, lr}
 800d030:	b082      	sub	sp, #8
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	4618      	mov	r0, r3
 800d03a:	f7ff ffeb 	bl	800d014 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4618      	mov	r0, r3
 800d042:	3708      	adds	r7, #8
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800d048:	b580      	push	{r7, lr}
 800d04a:	ed2d 8b02 	vpush	{d8}
 800d04e:	b088      	sub	sp, #32
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f7ff f938 	bl	800c2cc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	dd05      	ble.n	800d06e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f7ff ff58 	bl	800cf18 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	dc06      	bgt.n	800d07c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800d06e:	4b16      	ldr	r3, [pc, #88]	; (800d0c8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800d070:	4a16      	ldr	r2, [pc, #88]	; (800d0cc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800d072:	f240 119b 	movw	r1, #411	; 0x19b
 800d076:	4816      	ldr	r0, [pc, #88]	; (800d0d0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800d078:	f010 fe08 	bl	801dc8c <__assert_func>
 800d07c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7ff ff5a 	bl	800cf38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800d084:	4602      	mov	r2, r0
 800d086:	f107 030c 	add.w	r3, r7, #12
 800d08a:	4611      	mov	r1, r2
 800d08c:	4618      	mov	r0, r3
 800d08e:	f000 fbea 	bl	800d866 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7ff ff50 	bl	800cf38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800d098:	4602      	mov	r2, r0
 800d09a:	f107 030c 	add.w	r3, r7, #12
 800d09e:	6839      	ldr	r1, [r7, #0]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f000 fc05 	bl	800d8b0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 800d0a6:	eeb0 8a40 	vmov.f32	s16, s0
 800d0aa:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800d0ac:	f107 030c 	add.w	r3, r7, #12
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7ff ffbc 	bl	800d02e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800d0b6:	eef0 7a48 	vmov.f32	s15, s16
}
 800d0ba:	eeb0 0a67 	vmov.f32	s0, s15
 800d0be:	3720      	adds	r7, #32
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	ecbd 8b02 	vpop	{d8}
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	08024b74 	.word	0x08024b74
 800d0cc:	08025fc4 	.word	0x08025fc4
 800d0d0:	08024d80 	.word	0x08024d80

0800d0d4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d0dc:	2202      	movs	r2, #2
 800d0de:	2101      	movs	r1, #1
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7fd facf 	bl	800a684 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 fbf3 	bl	800d8d2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 800d0ec:	bf00      	nop
 800d0ee:	3708      	adds	r7, #8
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:

    /** \returns the functor representing the nullary operation */
    EIGEN_DEVICE_FUNC
    const NullaryOp& functor() const { return m_functor; }
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	3304      	adds	r3, #4
 800d100:	4618      	mov	r0, r3
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	4618      	mov	r0, r3
 800d118:	370c      	adds	r7, #12
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr

0800d122 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800d122:	b580      	push	{r7, lr}
 800d124:	b084      	sub	sp, #16
 800d126:	af00      	add	r7, sp, #0
 800d128:	60f8      	str	r0, [r7, #12]
 800d12a:	60b9      	str	r1, [r7, #8]
 800d12c:	607a      	str	r2, [r7, #4]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	68b9      	ldr	r1, [r7, #8]
 800d134:	4618      	mov	r0, r3
 800d136:	f000 fbe8 	bl	800d90a <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	4618      	mov	r0, r3
 800d13e:	3710      	adds	r7, #16
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
    }
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4618      	mov	r0, r3
 800d150:	370c      	adds	r7, #12
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr

0800d15a <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>:
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b084      	sub	sp, #16
 800d15e:	af00      	add	r7, sp, #0
 800d160:	60f8      	str	r0, [r7, #12]
 800d162:	60b9      	str	r1, [r7, #8]
 800d164:	607a      	str	r2, [r7, #4]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	68b9      	ldr	r1, [r7, #8]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 fbf7 	bl	800d960 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	4618      	mov	r0, r3
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
    }
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4618      	mov	r0, r3
 800d188:	370c      	adds	r7, #12
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr

0800d192 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>:
      : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
                    m_blockRows(blockRows), m_blockCols(blockCols)
    {}

    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
    EIGEN_DEVICE_FUNC inline Index cols() const { return m_blockCols.value(); }
 800d192:	b580      	push	{r7, lr}
 800d194:	b082      	sub	sp, #8
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
 800d19a:	f7f9 fc52 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>:
    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	f7f9 fc47 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3708      	adds	r7, #8
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b082      	sub	sp, #8
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7ff f991 	bl	800c4f2 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800d1d0:	4603      	mov	r3, r0
    }
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3708      	adds	r7, #8
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b082      	sub	sp, #8
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
 800d1e2:	6039      	str	r1, [r7, #0]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6839      	ldr	r1, [r7, #0]
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f000 fbeb 	bl	800d9c4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4618      	mov	r0, r3
 800d204:	370c      	adds	r7, #12
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr

0800d20e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
 800d20e:	b480      	push	{r7}
 800d210:	b083      	sub	sp, #12
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	4618      	mov	r0, r3
 800d21a:	370c      	adds	r7, #12
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4618      	mov	r0, r3
 800d230:	370c      	adds	r7, #12
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr

0800d23a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
 800d23a:	b480      	push	{r7}
 800d23c:	b083      	sub	sp, #12
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4618      	mov	r0, r3
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d25c:	68b9      	ldr	r1, [r7, #8]
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	f000 fbbf 	bl	800d9e2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>
 800d264:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d268:	eeb0 0a67 	vmov.f32	s0, s15
 800d26c:	3710      	adds	r7, #16
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d272:	b580      	push	{r7, lr}
 800d274:	b082      	sub	sp, #8
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d27a:	2200      	movs	r2, #0
 800d27c:	2102      	movs	r1, #2
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f7fc ff39 	bl	800a0f6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 fbbd 	bl	800da04 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>
  }
 800d28a:	bf00      	nop
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)

    /** Column or Row constructor
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    BlockImpl_dense(XprType& xpr, Index i)
 800d292:	b5b0      	push	{r4, r5, r7, lr}
 800d294:	b084      	sub	sp, #16
 800d296:	af00      	add	r7, sp, #0
 800d298:	60f8      	str	r0, [r7, #12]
 800d29a:	60b9      	str	r1, [r7, #8]
 800d29c:	607a      	str	r2, [r7, #4]
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
             BlockRows==1 ? 1 : xpr.rows(),
             BlockCols==1 ? 1 : xpr.cols()),
        m_xpr(xpr),
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d29e:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fa ff34 	bl	8008110 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800d2a8:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d2aa:	68b8      	ldr	r0, [r7, #8]
 800d2ac:	f000 fbba 	bl	800da24 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800d2b0:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	fb02 f303 	mul.w	r3, r2, r3
 800d2b8:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d2ba:	441d      	add	r5, r3
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7f7 fde2 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	f000 fbc2 	bl	800da54 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	68ba      	ldr	r2, [r7, #8]
 800d2d4:	609a      	str	r2, [r3, #8]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	330c      	adds	r3, #12
 800d2da:	6879      	ldr	r1, [r7, #4]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f000 fbf7 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	3310      	adds	r3, #16
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f000 fbf1 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
    {
      init();
 800d2ee:	68f8      	ldr	r0, [r7, #12]
 800d2f0:	f000 fbfd 	bl	800daee <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>
    }
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bdb0      	pop	{r4, r5, r7, pc}

0800d2fe <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d2fe:	b5b0      	push	{r4, r5, r7, lr}
 800d300:	b084      	sub	sp, #16
 800d302:	af00      	add	r7, sp, #0
 800d304:	60f8      	str	r0, [r7, #12]
 800d306:	60b9      	str	r1, [r7, #8]
 800d308:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d30a:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	4618      	mov	r0, r3
 800d310:	f7f9 fe9d 	bl	800704e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d314:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d316:	68b8      	ldr	r0, [r7, #8]
 800d318:	f7f9 ff6a 	bl	80071f0 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d31c:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	fb02 f303 	mul.w	r3, r2, r3
 800d324:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d326:	441d      	add	r5, r3
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7f7 fe5d 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800d330:	4602      	mov	r2, r0
 800d332:	2301      	movs	r3, #1
 800d334:	4629      	mov	r1, r5
 800d336:	4620      	mov	r0, r4
 800d338:	f000 fc00 	bl	800db3c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	68ba      	ldr	r2, [r7, #8]
 800d340:	609a      	str	r2, [r3, #8]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	330c      	adds	r3, #12
 800d346:	2100      	movs	r1, #0
 800d348:	4618      	mov	r0, r3
 800d34a:	f000 fbc1 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	3310      	adds	r3, #16
 800d352:	6879      	ldr	r1, [r7, #4]
 800d354:	4618      	mov	r0, r3
 800d356:	f000 fc2f 	bl	800dbb8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f000 fc46 	bl	800dbec <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	4618      	mov	r0, r3
 800d364:	3710      	adds	r7, #16
 800d366:	46bd      	mov	sp, r7
 800d368:	bdb0      	pop	{r4, r5, r7, pc}

0800d36a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b082      	sub	sp, #8
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
 800d372:	6039      	str	r1, [r7, #0]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6839      	ldr	r1, [r7, #0]
 800d378:	4618      	mov	r0, r3
 800d37a:	f000 fc47 	bl	800dc0c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	4618      	mov	r0, r3
 800d382:	3708      	adds	r7, #8
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d392:	6839      	ldr	r1, [r7, #0]
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 fc4b 	bl	800dc30 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800d39a:	eef0 7a40 	vmov.f32	s15, s0
 800d39e:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800d3a2:	6839      	ldr	r1, [r7, #0]
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 fc54 	bl	800dc52 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800d3aa:	eef0 7a40 	vmov.f32	s15, s0
 800d3ae:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d3b2:	f107 020c 	add.w	r2, r7, #12
 800d3b6:	f107 0308 	add.w	r3, r7, #8
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	6838      	ldr	r0, [r7, #0]
 800d3be:	f7fb fefe 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800d3c2:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d3c6:	eeb0 0a67 	vmov.f32	s0, s15
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800d3da:	6839      	ldr	r1, [r7, #0]
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 fc5c 	bl	800dc9a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800d3e2:	bf00      	nop
 800d3e4:	3708      	adds	r7, #8
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800d3ea:	b590      	push	{r4, r7, lr}
 800d3ec:	b083      	sub	sp, #12
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
 800d3f2:	6039      	str	r1, [r7, #0]
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 fc7d 	bl	800dcf4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 800d3fa:	687c      	ldr	r4, [r7, #4]
 800d3fc:	6838      	ldr	r0, [r7, #0]
 800d3fe:	f000 fc6d 	bl	800dcdc <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800d402:	4603      	mov	r3, r0
 800d404:	4619      	mov	r1, r3
 800d406:	4620      	mov	r0, r4
 800d408:	f7fa f9e0 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	4618      	mov	r0, r3
 800d410:	370c      	adds	r7, #12
 800d412:	46bd      	mov	sp, r7
 800d414:	bd90      	pop	{r4, r7, pc}

0800d416 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800d416:	b480      	push	{r7}
 800d418:	b083      	sub	sp, #12
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	6039      	str	r1, [r7, #0]
      : inner;
 800d420:	687b      	ldr	r3, [r7, #4]
  }
 800d422:	4618      	mov	r0, r3
 800d424:	370c      	adds	r7, #12
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr

0800d42e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800d42e:	b480      	push	{r7}
 800d430:	b083      	sub	sp, #12
 800d432:	af00      	add	r7, sp, #0
 800d434:	6078      	str	r0, [r7, #4]
 800d436:	6039      	str	r1, [r7, #0]
      : outer;
 800d438:	683b      	ldr	r3, [r7, #0]
  }
 800d43a:	4618      	mov	r0, r3
 800d43c:	370c      	adds	r7, #12
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr

0800d446 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800d446:	b5b0      	push	{r4, r5, r7, lr}
 800d448:	b086      	sub	sp, #24
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	60f8      	str	r0, [r7, #12]
 800d44e:	60b9      	str	r1, [r7, #8]
 800d450:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	689c      	ldr	r4, [r3, #8]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	687a      	ldr	r2, [r7, #4]
 800d45c:	68b9      	ldr	r1, [r7, #8]
 800d45e:	4618      	mov	r0, r3
 800d460:	f000 fc53 	bl	800dd0a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>
 800d464:	4605      	mov	r5, r0
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	687a      	ldr	r2, [r7, #4]
 800d46c:	68b9      	ldr	r1, [r7, #8]
 800d46e:	4618      	mov	r0, r3
 800d470:	f000 fc63 	bl	800dd3a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>
 800d474:	eef0 7a40 	vmov.f32	s15, s0
 800d478:	edc7 7a05 	vstr	s15, [r7, #20]
 800d47c:	f107 0314 	add.w	r3, r7, #20
 800d480:	461a      	mov	r2, r3
 800d482:	4629      	mov	r1, r5
 800d484:	4620      	mov	r0, r4
 800d486:	f7fb f8a9 	bl	80085dc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800d48a:	bf00      	nop
 800d48c:	3718      	adds	r7, #24
 800d48e:	46bd      	mov	sp, r7
 800d490:	bdb0      	pop	{r4, r5, r7, pc}

0800d492 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d492:	b580      	push	{r7, lr}
 800d494:	b082      	sub	sp, #8
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d49a:	2202      	movs	r2, #2
 800d49c:	2100      	movs	r1, #0
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f7ff fadf 	bl	800ca62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 fc7b 	bl	800dda0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>
  }
 800d4aa:	bf00      	nop
 800d4ac:	3708      	adds	r7, #8
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800d4b2:	b480      	push	{r7}
 800d4b4:	b083      	sub	sp, #12
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	370c      	adds	r7, #12
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr

0800d4ca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800d4ca:	b480      	push	{r7}
 800d4cc:	b083      	sub	sp, #12
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	3304      	adds	r3, #4
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	370c      	adds	r7, #12
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b088      	sub	sp, #32
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	60f8      	str	r0, [r7, #12]
 800d4ea:	60b9      	str	r1, [r7, #8]
 800d4ec:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800d4ee:	f107 0314 	add.w	r3, r7, #20
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	68b9      	ldr	r1, [r7, #8]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 fc62 	bl	800ddc0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>
 800d4fc:	f107 031c 	add.w	r3, r7, #28
 800d500:	4618      	mov	r0, r3
 800d502:	f7f9 fcfc 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d506:	f107 021c 	add.w	r2, r7, #28
 800d50a:	f107 0314 	add.w	r3, r7, #20
 800d50e:	4619      	mov	r1, r3
 800d510:	68f8      	ldr	r0, [r7, #12]
 800d512:	f000 fc6c 	bl	800ddee <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800d516:	bf00      	nop
 800d518:	3720      	adds	r7, #32
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
	...

0800d520 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d108      	bne.n	800d544 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b01      	cmp	r3, #1
 800d536:	d105      	bne.n	800d544 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	db02      	blt.n	800d544 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2b00      	cmp	r3, #0
 800d542:	da06      	bge.n	800d552 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x32>
 800d544:	4b0c      	ldr	r3, [pc, #48]	; (800d578 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x58>)
 800d546:	4a0d      	ldr	r2, [pc, #52]	; (800d57c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x5c>)
 800d548:	f240 1111 	movw	r1, #273	; 0x111
 800d54c:	480c      	ldr	r0, [pc, #48]	; (800d580 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x60>)
 800d54e:	f010 fb9d 	bl	801dc8c <__assert_func>
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	617b      	str	r3, [r7, #20]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	613b      	str	r3, [r7, #16]
  }
 800d55a:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800d55c:	68f8      	ldr	r0, [r7, #12]
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	fb02 f103 	mul.w	r1, r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	68ba      	ldr	r2, [r7, #8]
 800d56a:	f000 fc51 	bl	800de10 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>
    }
 800d56e:	bf00      	nop
 800d570:	3718      	adds	r7, #24
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	08022584 	.word	0x08022584
 800d57c:	0802618c 	.word	0x0802618c
 800d580:	080227a0 	.word	0x080227a0

0800d584 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>:
  EIGEN_DEVICE_FUNC const XprTypeNestedCleaned& nestedExpression() const { return m_xpr; }
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	4618      	mov	r0, r3
 800d590:	370c      	adds	r7, #12
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr

0800d59a <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>:
    explicit Matrix(const T& x)
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b082      	sub	sp, #8
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
 800d5a2:	6039      	str	r1, [r7, #0]
    {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7f7 fb9a 	bl	8004ce0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800d5ac:	f7f7 fba8 	bl	8004d00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6839      	ldr	r1, [r7, #0]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f000 fc38 	bl	800de2a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>
    }
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>:
  static inline void run(const MatrixType& matrix, ResultType& result)
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	ed2d 8b02 	vpush	{d8}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d5d2:	f107 030c 	add.w	r3, r7, #12
 800d5d6:	6879      	ldr	r1, [r7, #4]
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7fc ff50 	bl	800a47e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    result.coeffRef(0,0) = Scalar(1) / matrixEval.coeff(0,0);
 800d5de:	f107 030c 	add.w	r3, r7, #12
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f000 fc2c 	bl	800de44 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	ed93 8a00 	vldr	s16, [r3]
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7f9 f968 	bl	80068ce <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800d5fe:	4603      	mov	r3, r0
 800d600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d604:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800d608:	edc3 7a00 	vstr	s15, [r3]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d60c:	f107 030c 	add.w	r3, r7, #12
 800d610:	4618      	mov	r0, r3
 800d612:	f7fb fe1b 	bl	800924c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  }
 800d616:	bf00      	nop
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	ecbd 8b02 	vpop	{d8}
 800d620:	bd80      	pop	{r7, pc}

0800d622 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800d622:	b580      	push	{r7, lr}
 800d624:	b082      	sub	sp, #8
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7f8 fbe9 	bl	8005e02 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d630:	4603      	mov	r3, r0
 800d632:	4618      	mov	r0, r3
 800d634:	f7f8 fc23 	bl	8005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d638:	4603      	mov	r3, r0
 800d63a:	4618      	mov	r0, r3
 800d63c:	3708      	adds	r7, #8
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}

0800d642 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 800d642:	b590      	push	{r4, r7, lr}
 800d644:	b083      	sub	sp, #12
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f7ff ffe9 	bl	800d622 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d650:	4604      	mov	r4, r0
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 f807 	bl	800d666 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d658:	4603      	mov	r3, r0
 800d65a:	fb04 f303 	mul.w	r3, r4, r3
 800d65e:	4618      	mov	r0, r3
 800d660:	370c      	adds	r7, #12
 800d662:	46bd      	mov	sp, r7
 800d664:	bd90      	pop	{r4, r7, pc}

0800d666 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800d666:	b580      	push	{r7, lr}
 800d668:	b082      	sub	sp, #8
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f7f8 fbc7 	bl	8005e02 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d674:	4603      	mov	r3, r0
 800d676:	4618      	mov	r0, r3
 800d678:	f7f8 fc0c 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d67c:	4603      	mov	r3, r0
 800d67e:	4618      	mov	r0, r3
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d686:	b5b0      	push	{r4, r5, r7, lr}
 800d688:	b084      	sub	sp, #16
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	60f8      	str	r0, [r7, #12]
 800d68e:	60b9      	str	r1, [r7, #8]
 800d690:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d692:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	4618      	mov	r0, r3
 800d698:	f7f9 fcd9 	bl	800704e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d69c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d69e:	68b8      	ldr	r0, [r7, #8]
 800d6a0:	f000 fa35 	bl	800db0e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800d6a4:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	fb02 f303 	mul.w	r3, r2, r3
 800d6ac:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d6ae:	18e9      	adds	r1, r5, r3
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f000 fbe9 	bl	800de8c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	68ba      	ldr	r2, [r7, #8]
 800d6be:	609a      	str	r2, [r3, #8]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	330c      	adds	r3, #12
 800d6c4:	6879      	ldr	r1, [r7, #4]
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f000 fa02 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	3310      	adds	r3, #16
 800d6d0:	2100      	movs	r1, #0
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 fa70 	bl	800dbb8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f000 fc15 	bl	800df08 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>
    }
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3710      	adds	r7, #16
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bdb0      	pop	{r4, r5, r7, pc}

0800d6e8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d6e8:	b5b0      	push	{r4, r5, r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d6f4:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fd fd27 	bl	800b14c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800d6fe:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d700:	68b8      	ldr	r0, [r7, #8]
 800d702:	f000 fc11 	bl	800df28 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 800d706:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	fb02 f303 	mul.w	r3, r2, r3
 800d70e:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d710:	18e9      	adds	r1, r5, r3
 800d712:	2301      	movs	r3, #1
 800d714:	2201      	movs	r2, #1
 800d716:	4620      	mov	r0, r4
 800d718:	f000 fc1e 	bl	800df58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	68ba      	ldr	r2, [r7, #8]
 800d720:	609a      	str	r2, [r3, #8]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	330c      	adds	r3, #12
 800d726:	6879      	ldr	r1, [r7, #4]
 800d728:	4618      	mov	r0, r3
 800d72a:	f000 fa45 	bl	800dbb8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	330d      	adds	r3, #13
 800d732:	6879      	ldr	r1, [r7, #4]
 800d734:	4618      	mov	r0, r3
 800d736:	f000 fa3f 	bl	800dbb8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f000 fc4a 	bl	800dfd4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>
    }
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bdb0      	pop	{r4, r5, r7, pc}

0800d74a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b082      	sub	sp, #8
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
 800d752:	6039      	str	r1, [r7, #0]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6839      	ldr	r1, [r7, #0]
 800d758:	4618      	mov	r0, r3
 800d75a:	f000 fc4b 	bl	800dff4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	4618      	mov	r0, r3
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d772:	2200      	movs	r2, #0
 800d774:	2100      	movs	r1, #0
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 fc4e 	bl	800e018 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800d77c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d780:	eeb0 0a67 	vmov.f32	s0, s15
 800d784:	3708      	adds	r7, #8
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b086      	sub	sp, #24
 800d78e:	af00      	add	r7, sp, #0
 800d790:	60f8      	str	r0, [r7, #12]
 800d792:	60b9      	str	r1, [r7, #8]
 800d794:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	68b9      	ldr	r1, [r7, #8]
 800d79e:	6978      	ldr	r0, [r7, #20]
 800d7a0:	f000 fc4d 	bl	800e03e <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800d7a4:	bf00      	nop
 800d7a6:	3718      	adds	r7, #24
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	370c      	adds	r7, #12
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr

0800d7c4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	3304      	adds	r3, #4
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with subtraction
  *
  */
template<typename DstScalar,typename SrcScalar> struct sub_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op)
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	370c      	adds	r7, #12
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr

0800d7f2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b086      	sub	sp, #24
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	60f8      	str	r0, [r7, #12]
 800d7fa:	60b9      	str	r1, [r7, #8]
 800d7fc:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	68b9      	ldr	r1, [r7, #8]
 800d806:	6978      	ldr	r0, [r7, #20]
 800d808:	f000 fc44 	bl	800e094 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800d80c:	bf00      	nop
 800d80e:	3718      	adds	r7, #24
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	68b9      	ldr	r1, [r7, #8]
 800d826:	4618      	mov	r0, r3
 800d828:	f000 fc6e 	bl	800e108 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d836:	b480      	push	{r7}
 800d838:	b083      	sub	sp, #12
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
    }
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4618      	mov	r0, r3
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4618      	mov	r0, r3
 800d858:	f7fd ffc5 	bl	800b7e6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800d85c:	4603      	mov	r3, r0
    }
 800d85e:	4618      	mov	r0, r3
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800d866:	b580      	push	{r7, lr}
 800d868:	b082      	sub	sp, #8
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	6039      	str	r1, [r7, #0]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6839      	ldr	r1, [r7, #0]
 800d874:	4618      	mov	r0, r3
 800d876:	f000 fc7d 	bl	800e174 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4618      	mov	r0, r3
 800d87e:	3708      	adds	r7, #8
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	4618      	mov	r0, r3
 800d890:	370c      	adds	r7, #12
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr

0800d89a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
 800d89a:	b480      	push	{r7}
 800d89c:	b083      	sub	sp, #12
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d8bc:	68b9      	ldr	r1, [r7, #8]
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f000 fc67 	bl	800e192 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>
 800d8c4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d8c8:	eeb0 0a67 	vmov.f32	s0, s15
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b082      	sub	sp, #8
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d8da:	2200      	movs	r2, #0
 800d8dc:	2102      	movs	r1, #2
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f7fc fed0 	bl	800a684 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 fc78 	bl	800e1da <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800d8ea:	bf00      	nop
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b082      	sub	sp, #8
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 fc7d 	bl	800e1fa <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	4618      	mov	r0, r3
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>:
    inline BlockImpl_dense(XprType& xpr, Index i)
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b084      	sub	sp, #16
 800d90e:	af00      	add	r7, sp, #0
 800d910:	60f8      	str	r0, [r7, #12]
 800d912:	60b9      	str	r1, [r7, #8]
 800d914:	607a      	str	r2, [r7, #4]
        m_blockCols(BlockCols==1 ? 1 : xpr.cols())
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f7ff ffeb 	bl	800d8f2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	68b9      	ldr	r1, [r7, #8]
 800d920:	4618      	mov	r0, r3
 800d922:	f7f6 fe7a 	bl	800461a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	3310      	adds	r3, #16
 800d92a:	6879      	ldr	r1, [r7, #4]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f000 f8cf 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	3314      	adds	r3, #20
 800d936:	2100      	movs	r1, #0
 800d938:	4618      	mov	r0, r3
 800d93a:	f000 f93d 	bl	800dbb8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	3315      	adds	r3, #21
 800d942:	2101      	movs	r1, #1
 800d944:	4618      	mov	r0, r3
 800d946:	f7f9 f84f 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	3316      	adds	r3, #22
 800d94e:	2101      	movs	r1, #1
 800d950:	4618      	mov	r0, r3
 800d952:	f7f9 f849 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
    {}
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	4618      	mov	r0, r3
 800d95a:	3710      	adds	r7, #16
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d960:	b5b0      	push	{r4, r5, r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d96c:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d96e:	68b8      	ldr	r0, [r7, #8]
 800d970:	f000 fc4e 	bl	800e210 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>
 800d974:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d976:	68b8      	ldr	r0, [r7, #8]
 800d978:	f000 fc5e 	bl	800e238 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 800d97c:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	fb02 f303 	mul.w	r3, r2, r3
 800d984:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d986:	18e9      	adds	r1, r5, r3
 800d988:	2301      	movs	r3, #1
 800d98a:	2201      	movs	r2, #1
 800d98c:	4620      	mov	r0, r4
 800d98e:	f000 fc87 	bl	800e2a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	3308      	adds	r3, #8
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	6812      	ldr	r2, [r2, #0]
 800d99a:	601a      	str	r2, [r3, #0]
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	330c      	adds	r3, #12
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f000 f908 	bl	800dbb8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	3310      	adds	r3, #16
 800d9ac:	6879      	ldr	r1, [r7, #4]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f000 f88e 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f000 fcb1 	bl	800e31c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>
    }
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3710      	adds	r7, #16
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bdb0      	pop	{r4, r5, r7, pc}

0800d9c4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6839      	ldr	r1, [r7, #0]
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f000 fcb2 	bl	800e33c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b082      	sub	sp, #8
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
 800d9ea:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	2100      	movs	r1, #0
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 fcb5 	bl	800e360 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 800d9f6:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d9fa:	eeb0 0a67 	vmov.f32	s0, s15
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800da0c:	2201      	movs	r2, #1
 800da0e:	2102      	movs	r1, #2
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7fc fb70 	bl	800a0f6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 fcb5 	bl	800e386 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>
  }
 800da1c:	bf00      	nop
 800da1e:	3708      	adds	r7, #8
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	2301      	movs	r3, #1
 800da2e:	4618      	mov	r0, r3
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b082      	sub	sp, #8
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 fcaf 	bl	800e3a6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	4618      	mov	r0, r3
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
	...

0800da54 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>:
      checkSanity<Derived>();
    }

    /** \internal Constructor for dynamically sized matrices */
    EIGEN_DEVICE_FUNC
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	607a      	str	r2, [r7, #4]
 800da60:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800da62:	68f8      	ldr	r0, [r7, #12]
 800da64:	f7ff ffe9 	bl	800da3a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	68ba      	ldr	r2, [r7, #8]
 800da6c:	601a      	str	r2, [r3, #0]
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	3304      	adds	r3, #4
 800da72:	6879      	ldr	r1, [r7, #4]
 800da74:	4618      	mov	r0, r3
 800da76:	f7f8 ffb7 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	3305      	adds	r3, #5
 800da7e:	6839      	ldr	r1, [r7, #0]
 800da80:	4618      	mov	r0, r3
 800da82:	f7f8 ff97 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
    {
      eigen_assert( (dataPtr == 0)
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d011      	beq.n	800dab0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	db08      	blt.n	800daa4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b01      	cmp	r3, #1
 800da96:	d105      	bne.n	800daa4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	db02      	blt.n	800daa4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	2b03      	cmp	r3, #3
 800daa2:	d005      	beq.n	800dab0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800daa4:	4b07      	ldr	r3, [pc, #28]	; (800dac4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x70>)
 800daa6:	4a08      	ldr	r2, [pc, #32]	; (800dac8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x74>)
 800daa8:	21b0      	movs	r1, #176	; 0xb0
 800daaa:	4808      	ldr	r0, [pc, #32]	; (800dacc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x78>)
 800daac:	f010 f8ee 	bl	801dc8c <__assert_func>
              || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
                  && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));
      checkSanity<Derived>();
 800dab0:	2100      	movs	r1, #0
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	f000 fc82 	bl	800e3bc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	4618      	mov	r0, r3
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
 800dac2:	bf00      	nop
 800dac4:	08026218 	.word	0x08026218
 800dac8:	080262c4 	.word	0x080262c4
 800dacc:	080263c8 	.word	0x080263c8

0800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>:

template<typename T> class variable_if_dynamic<T, Dynamic>
{
    T m_value;
  public:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value = 0) EIGEN_NO_THROW : m_value(value) {}
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	683a      	ldr	r2, [r7, #0]
 800dade:	601a      	str	r2, [r3, #0]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	4618      	mov	r0, r3
 800dae4:	370c      	adds	r7, #12
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr

0800daee <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>:
    }
    #endif

  protected:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void init()
 800daee:	b580      	push	{r7, lr}
 800daf0:	b082      	sub	sp, #8
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
    {
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
                    ? m_xpr.outerStride()
                    : m_xpr.innerStride();
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff ff92 	bl	800da24 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800db00:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	615a      	str	r2, [r3, #20]
    }
 800db06:	bf00      	nop
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>:
 800db0e:	b480      	push	{r7}
 800db10:	b083      	sub	sp, #12
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
 800db16:	2301      	movs	r3, #1
 800db18:	4618      	mov	r0, r3
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f000 fc50 	bl	800e3d2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	4618      	mov	r0, r3
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]
 800db48:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f7ff ffea 	bl	800db24 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	68ba      	ldr	r2, [r7, #8]
 800db54:	601a      	str	r2, [r3, #0]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	3304      	adds	r3, #4
 800db5a:	6879      	ldr	r1, [r7, #4]
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7f8 ff29 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	3305      	adds	r3, #5
 800db66:	6839      	ldr	r1, [r7, #0]
 800db68:	4618      	mov	r0, r3
 800db6a:	f7f8 ff3d 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d011      	beq.n	800db98 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	db08      	blt.n	800db8c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2b03      	cmp	r3, #3
 800db7e:	d105      	bne.n	800db8c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	db02      	blt.n	800db8c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d005      	beq.n	800db98 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800db8c:	4b07      	ldr	r3, [pc, #28]	; (800dbac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800db8e:	4a08      	ldr	r2, [pc, #32]	; (800dbb0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800db90:	21b0      	movs	r1, #176	; 0xb0
 800db92:	4808      	ldr	r0, [pc, #32]	; (800dbb4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800db94:	f010 f87a 	bl	801dc8c <__assert_func>
      checkSanity<Derived>();
 800db98:	2100      	movs	r1, #0
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	f000 fc24 	bl	800e3e8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	4618      	mov	r0, r3
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	08026218 	.word	0x08026218
 800dbb0:	0802641c 	.word	0x0802641c
 800dbb4:	080263c8 	.word	0x080263c8

0800dbb8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d005      	beq.n	800dbd4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x1c>
 800dbc8:	4b05      	ldr	r3, [pc, #20]	; (800dbe0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x28>)
 800dbca:	4a06      	ldr	r2, [pc, #24]	; (800dbe4 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x2c>)
 800dbcc:	2185      	movs	r1, #133	; 0x85
 800dbce:	4806      	ldr	r0, [pc, #24]	; (800dbe8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x30>)
 800dbd0:	f010 f85c 	bl	801dc8c <__assert_func>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3708      	adds	r7, #8
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	08022030 	.word	0x08022030
 800dbe4:	08026520 	.word	0x08026520
 800dbe8:	080220a8 	.word	0x080220a8

0800dbec <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7f9 faf9 	bl	80071f0 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800dbfe:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	615a      	str	r2, [r3, #20]
    }
 800dc04:	bf00      	nop
 800dc06:	3708      	adds	r7, #8
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 fbf1 	bl	800e3fe <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6839      	ldr	r1, [r7, #0]
 800dc20:	4618      	mov	r0, r3
 800dc22:	f000 fbf7 	bl	800e414 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3708      	adds	r7, #8
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	2100      	movs	r1, #0
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 fc10 	bl	800e464 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800dc44:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dc48:	eeb0 0a67 	vmov.f32	s0, s15
 800dc4c:	3708      	adds	r7, #8
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b084      	sub	sp, #16
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800dc5c:	6839      	ldr	r1, [r7, #0]
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 fc13 	bl	800e48a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 800dc64:	eef0 7a40 	vmov.f32	s15, s0
 800dc68:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800dc6c:	6839      	ldr	r1, [r7, #0]
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 fc1c 	bl	800e4ac <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 800dc74:	eef0 7a40 	vmov.f32	s15, s0
 800dc78:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800dc7c:	f107 020c 	add.w	r2, r7, #12
 800dc80:	f107 0308 	add.w	r3, r7, #8
 800dc84:	4619      	mov	r1, r3
 800dc86:	6838      	ldr	r0, [r7, #0]
 800dc88:	f7fb fa99 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800dc8c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dc90:	eeb0 0a67 	vmov.f32	s0, s15
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}

0800dc9a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800dc9a:	b5b0      	push	{r4, r5, r7, lr}
 800dc9c:	b084      	sub	sp, #16
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
 800dca2:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7f7 fdcd 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800dcaa:	4604      	mov	r4, r0
 800dcac:	6838      	ldr	r0, [r7, #0]
 800dcae:	f7f7 fdfc 	bl	80058aa <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800dcb2:	4605      	mov	r5, r0
 800dcb4:	f107 030c 	add.w	r3, r7, #12
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7f9 f920 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800dcbe:	f107 030c 	add.w	r3, r7, #12
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	4629      	mov	r1, r5
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f000 fc01 	bl	800e4ce <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f7f7 fdb9 	bl	8005844 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800dcd2:	4603      	mov	r3, r0
    }
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bdb0      	pop	{r4, r5, r7, pc}

0800dcdc <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800dcdc:	b480      	push	{r7}
 800dcde:	b083      	sub	sp, #12
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4618      	mov	r0, r3
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	370c      	adds	r7, #12
 800dd02:	46bd      	mov	sp, r7
 800dd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd08:	4770      	bx	lr

0800dd0a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800dd0a:	b590      	push	{r4, r7, lr}
 800dd0c:	b085      	sub	sp, #20
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	60f8      	str	r0, [r7, #12]
 800dd12:	60b9      	str	r1, [r7, #8]
 800dd14:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row * m_d.outerStride() + col];
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681c      	ldr	r4, [r3, #0]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fb fa08 	bl	8009132 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800dd22:	4602      	mov	r2, r0
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	fb03 f202 	mul.w	r2, r3, r2
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	4423      	add	r3, r4
  }
 800dd32:	4618      	mov	r0, r3
 800dd34:	3714      	adds	r7, #20
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd90      	pop	{r4, r7, pc}

0800dd3a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800dd3a:	b580      	push	{r7, lr}
 800dd3c:	b0a4      	sub	sp, #144	; 0x90
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	60f8      	str	r0, [r7, #12]
 800dd42:	60b9      	str	r1, [r7, #8]
 800dd44:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800dd46:	68f9      	ldr	r1, [r7, #12]
 800dd48:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dd4c:	68ba      	ldr	r2, [r7, #8]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fd f844 	bl	800addc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800dd54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dd58:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dd5c:	4611      	mov	r1, r2
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fd f84f 	bl	800ae02 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800dd6a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	4618      	mov	r0, r3
 800dd72:	f000 fbbd 	bl	800e4f0 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>
 800dd76:	f107 0314 	add.w	r3, r7, #20
 800dd7a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800dd7e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800dd82:	4618      	mov	r0, r3
 800dd84:	f000 fbc7 	bl	800e516 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800dd88:	f107 0314 	add.w	r3, r7, #20
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f000 fbf0 	bl	800e572 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>
 800dd92:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dd96:	eeb0 0a67 	vmov.f32	s0, s15
 800dd9a:	3790      	adds	r7, #144	; 0x90
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800dda8:	2200      	movs	r2, #0
 800ddaa:	2101      	movs	r1, #1
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7fe fe58 	bl	800ca62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 fbf8 	bl	800e5a8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>
  }
 800ddb8:	bf00      	nop
 800ddba:	3708      	adds	r7, #8
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800ddc0:	b590      	push	{r4, r7, lr}
 800ddc2:	b085      	sub	sp, #20
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800ddcc:	68b8      	ldr	r0, [r7, #8]
 800ddce:	f7f7 fc70 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f7f7 fed1 	bl	8005b7c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800ddda:	4603      	mov	r3, r0
 800dddc:	461a      	mov	r2, r3
 800ddde:	4621      	mov	r1, r4
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f000 fc15 	bl	800e610 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>
}
 800dde6:	68f8      	ldr	r0, [r7, #12]
 800dde8:	3714      	adds	r7, #20
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd90      	pop	{r4, r7, pc}

0800ddee <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b086      	sub	sp, #24
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	60f8      	str	r0, [r7, #12]
 800ddf6:	60b9      	str	r1, [r7, #8]
 800ddf8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	68b9      	ldr	r1, [r7, #8]
 800de02:	6978      	ldr	r0, [r7, #20]
 800de04:	f000 fc32 	bl	800e66c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800de08:	bf00      	nop
 800de0a:	3718      	adds	r7, #24
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800de10:	b480      	push	{r7}
 800de12:	b085      	sub	sp, #20
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
 800de1c:	603b      	str	r3, [r7, #0]
 800de1e:	bf00      	nop
 800de20:	3714      	adds	r7, #20
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr

0800de2a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b082      	sub	sp, #8
 800de2e:	af00      	add	r7, sp, #0
 800de30:	6078      	str	r0, [r7, #4]
 800de32:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800de34:	6839      	ldr	r1, [r7, #0]
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 fc2b 	bl	800e692 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800de3c:	bf00      	nop
 800de3e:	3708      	adds	r7, #8
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800de44:	b590      	push	{r4, r7, lr}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681c      	ldr	r4, [r3, #0]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	4618      	mov	r0, r3
 800de58:	f7f9 f846 	bl	8006ee8 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 800de5c:	4602      	mov	r2, r0
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	fb03 f202 	mul.w	r2, r3, r2
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	4413      	add	r3, r2
 800de68:	009b      	lsls	r3, r3, #2
 800de6a:	4423      	add	r3, r4
  }
 800de6c:	4618      	mov	r0, r3
 800de6e:	3714      	adds	r7, #20
 800de70:	46bd      	mov	sp, r7
 800de72:	bd90      	pop	{r4, r7, pc}

0800de74 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 fc29 	bl	800e6d4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	4618      	mov	r0, r3
 800de86:	3708      	adds	r7, #8
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b084      	sub	sp, #16
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
 800de98:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	f7ff ffea 	bl	800de74 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	68ba      	ldr	r2, [r7, #8]
 800dea4:	601a      	str	r2, [r3, #0]
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	3304      	adds	r3, #4
 800deaa:	6879      	ldr	r1, [r7, #4]
 800deac:	4618      	mov	r0, r3
 800deae:	f7f8 fd9b 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	3305      	adds	r3, #5
 800deb6:	6839      	ldr	r1, [r7, #0]
 800deb8:	4618      	mov	r0, r3
 800deba:	f7f8 fd95 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d011      	beq.n	800dee8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	db08      	blt.n	800dedc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d105      	bne.n	800dedc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	db02      	blt.n	800dedc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d005      	beq.n	800dee8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800dedc:	4b07      	ldr	r3, [pc, #28]	; (800defc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800dede:	4a08      	ldr	r2, [pc, #32]	; (800df00 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800dee0:	21b0      	movs	r1, #176	; 0xb0
 800dee2:	4808      	ldr	r0, [pc, #32]	; (800df04 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800dee4:	f00f fed2 	bl	801dc8c <__assert_func>
      checkSanity<Derived>();
 800dee8:	2100      	movs	r1, #0
 800deea:	68f8      	ldr	r0, [r7, #12]
 800deec:	f000 fbfd 	bl	800e6ea <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	4618      	mov	r0, r3
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	08026218 	.word	0x08026218
 800df00:	08026588 	.word	0x08026588
 800df04:	080263c8 	.word	0x080263c8

0800df08 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	689b      	ldr	r3, [r3, #8]
 800df14:	4618      	mov	r0, r3
 800df16:	f7f9 f96b 	bl	80071f0 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800df1a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	615a      	str	r2, [r3, #20]
    }
 800df20:	bf00      	nop
 800df22:	3708      	adds	r7, #8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>:
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	2301      	movs	r3, #1
 800df32:	4618      	mov	r0, r3
 800df34:	370c      	adds	r7, #12
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr

0800df3e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
 800df3e:	b580      	push	{r7, lr}
 800df40:	b082      	sub	sp, #8
 800df42:	af00      	add	r7, sp, #0
 800df44:	6078      	str	r0, [r7, #4]
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 fbda 	bl	800e700 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	4618      	mov	r0, r3
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
	...

0800df58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	607a      	str	r2, [r7, #4]
 800df64:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	f7ff ffe9 	bl	800df3e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	68ba      	ldr	r2, [r7, #8]
 800df70:	601a      	str	r2, [r3, #0]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	3304      	adds	r3, #4
 800df76:	6879      	ldr	r1, [r7, #4]
 800df78:	4618      	mov	r0, r3
 800df7a:	f7f8 fd35 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	3305      	adds	r3, #5
 800df82:	6839      	ldr	r1, [r7, #0]
 800df84:	4618      	mov	r0, r3
 800df86:	f7f8 fd2f 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d011      	beq.n	800dfb4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	db08      	blt.n	800dfa8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d105      	bne.n	800dfa8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	db02      	blt.n	800dfa8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	d005      	beq.n	800dfb4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800dfa8:	4b07      	ldr	r3, [pc, #28]	; (800dfc8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800dfaa:	4a08      	ldr	r2, [pc, #32]	; (800dfcc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800dfac:	21b0      	movs	r1, #176	; 0xb0
 800dfae:	4808      	ldr	r0, [pc, #32]	; (800dfd0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800dfb0:	f00f fe6c 	bl	801dc8c <__assert_func>
      checkSanity<Derived>();
 800dfb4:	2100      	movs	r1, #0
 800dfb6:	68f8      	ldr	r0, [r7, #12]
 800dfb8:	f000 fbad 	bl	800e716 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3710      	adds	r7, #16
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	08026218 	.word	0x08026218
 800dfcc:	0802668c 	.word	0x0802668c
 800dfd0:	080263c8 	.word	0x080263c8

0800dfd4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>:
    void init()
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	689b      	ldr	r3, [r3, #8]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7fd fe3d 	bl	800bc60 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 800dfe6:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	611a      	str	r2, [r3, #16]
    }
 800dfec:	bf00      	nop
 800dfee:	3708      	adds	r7, #8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 fb94 	bl	800e72c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6839      	ldr	r1, [r7, #0]
 800e008:	4618      	mov	r0, r3
 800e00a:	f000 fb9a 	bl	800e742 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4618      	mov	r0, r3
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	68b9      	ldr	r1, [r7, #8]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f000 fbb1 	bl	800e792 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800e030:	eef0 7a40 	vmov.f32	s15, s0
 800e034:	eeb0 0a67 	vmov.f32	s0, s15
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800e03e:	b590      	push	{r4, r7, lr}
 800e040:	b087      	sub	sp, #28
 800e042:	af00      	add	r7, sp, #0
 800e044:	60f8      	str	r0, [r7, #12]
 800e046:	60b9      	str	r1, [r7, #8]
 800e048:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800e04a:	68b8      	ldr	r0, [r7, #8]
 800e04c:	f000 fbd1 	bl	800e7f2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>
 800e050:	4604      	mov	r4, r0
 800e052:	f107 0310 	add.w	r3, r7, #16
 800e056:	4618      	mov	r0, r3
 800e058:	f7f8 ff51 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800e05c:	f107 0310 	add.w	r3, r7, #16
 800e060:	461a      	mov	r2, r3
 800e062:	4621      	mov	r1, r4
 800e064:	68f8      	ldr	r0, [r7, #12]
 800e066:	f000 fbd0 	bl	800e80a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800e06a:	68b8      	ldr	r0, [r7, #8]
 800e06c:	f000 fbde 	bl	800e82c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>
 800e070:	4604      	mov	r4, r0
 800e072:	f107 0314 	add.w	r3, r7, #20
 800e076:	4618      	mov	r0, r3
 800e078:	f7ff fbb0 	bl	800d7dc <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800e07c:	f107 0314 	add.w	r3, r7, #20
 800e080:	461a      	mov	r2, r3
 800e082:	4621      	mov	r1, r4
 800e084:	68f8      	ldr	r0, [r7, #12]
 800e086:	f000 fbdd 	bl	800e844 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e08a:	bf00      	nop
 800e08c:	371c      	adds	r7, #28
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd90      	pop	{r4, r7, pc}
	...

0800e094 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800e094:	b590      	push	{r4, r7, lr}
 800e096:	b085      	sub	sp, #20
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7f6 fefb 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	68b8      	ldr	r0, [r7, #8]
 800e0ac:	f7f8 fa95 	bl	80065da <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	429c      	cmp	r4, r3
 800e0b4:	d10a      	bne.n	800e0cc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7f6 fee5 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e0be:	4604      	mov	r4, r0
 800e0c0:	68b8      	ldr	r0, [r7, #8]
 800e0c2:	f7f8 fa98 	bl	80065f6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	429c      	cmp	r4, r3
 800e0ca:	d005      	beq.n	800e0d8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800e0cc:	4b0b      	ldr	r3, [pc, #44]	; (800e0fc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800e0ce:	4a0c      	ldr	r2, [pc, #48]	; (800e100 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800e0d0:	21b0      	movs	r1, #176	; 0xb0
 800e0d2:	480c      	ldr	r0, [pc, #48]	; (800e104 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800e0d4:	f00f fdda 	bl	801dc8c <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800e0d8:	68b8      	ldr	r0, [r7, #8]
 800e0da:	f000 fbc4 	bl	800e866 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>
 800e0de:	4604      	mov	r4, r0
 800e0e0:	68b8      	ldr	r0, [r7, #8]
 800e0e2:	f000 fbcc 	bl	800e87e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f000 fbd2 	bl	800e896 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>
  }
 800e0f2:	bf00      	nop
 800e0f4:	3714      	adds	r7, #20
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd90      	pop	{r4, r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	08022888 	.word	0x08022888
 800e100:	08026790 	.word	0x08026790
 800e104:	08022d80 	.word	0x08022d80

0800e108 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800e108:	b5b0      	push	{r4, r5, r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800e114:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	4618      	mov	r0, r3
 800e11a:	f7f9 fff9 	bl	8008110 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800e11e:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800e120:	68b8      	ldr	r0, [r7, #8]
 800e122:	f7fa fa2f 	bl	8008584 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800e126:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	fb02 f303 	mul.w	r3, r2, r3
 800e12e:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800e130:	441d      	add	r5, r3
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	4618      	mov	r0, r3
 800e136:	f7f6 feb2 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800e13a:	4602      	mov	r2, r0
 800e13c:	2301      	movs	r3, #1
 800e13e:	4629      	mov	r1, r5
 800e140:	4620      	mov	r0, r4
 800e142:	f000 fbd3 	bl	800e8ec <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	609a      	str	r2, [r3, #8]
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	330c      	adds	r3, #12
 800e150:	2100      	movs	r1, #0
 800e152:	4618      	mov	r0, r3
 800e154:	f7ff fcbc 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	3310      	adds	r3, #16
 800e15c:	6879      	ldr	r1, [r7, #4]
 800e15e:	4618      	mov	r0, r3
 800e160:	f7ff fcb6 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800e164:	68f8      	ldr	r0, [r7, #12]
 800e166:	f000 fbff 	bl	800e968 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	4618      	mov	r0, r3
 800e16e:	3710      	adds	r7, #16
 800e170:	46bd      	mov	sp, r7
 800e172:	bdb0      	pop	{r4, r5, r7, pc}

0800e174 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6839      	ldr	r1, [r7, #0]
 800e182:	4618      	mov	r0, r3
 800e184:	f000 fc00 	bl	800e988 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	4618      	mov	r0, r3
 800e18c:	3708      	adds	r7, #8
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800e192:	b580      	push	{r7, lr}
 800e194:	b084      	sub	sp, #16
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
 800e19a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e19c:	6839      	ldr	r1, [r7, #0]
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f000 fc04 	bl	800e9ac <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>
 800e1a4:	eef0 7a40 	vmov.f32	s15, s0
 800e1a8:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800e1ac:	6839      	ldr	r1, [r7, #0]
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 fc0d 	bl	800e9ce <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>
 800e1b4:	eef0 7a40 	vmov.f32	s15, s0
 800e1b8:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e1bc:	f107 020c 	add.w	r2, r7, #12
 800e1c0:	f107 0308 	add.w	r3, r7, #8
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	6838      	ldr	r0, [r7, #0]
 800e1c8:	f7fa fff9 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800e1cc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e1d0:	eeb0 0a67 	vmov.f32	s0, s15
 800e1d4:	3710      	adds	r7, #16
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}

0800e1da <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e1da:	b580      	push	{r7, lr}
 800e1dc:	b082      	sub	sp, #8
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	2102      	movs	r1, #2
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f7fc fa4c 	bl	800a684 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 fc12 	bl	800ea16 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800e1f2:	bf00      	nop
 800e1f4:	3708      	adds	r7, #8
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}

0800e1fa <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e1fa:	b480      	push	{r7}
 800e1fc:	b083      	sub	sp, #12
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
    }
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	4618      	mov	r0, r3
 800e206:	370c      	adds	r7, #12
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr

0800e210 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7f7 f9b5 	bl	8005588 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e21e:	4603      	mov	r3, r0
 800e220:	4618      	mov	r0, r3
 800e222:	f7fc fd77 	bl	800ad14 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e226:	4603      	mov	r3, r0
 800e228:	4618      	mov	r0, r3
 800e22a:	f7f8 ff10 	bl	800704e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800e22e:	4603      	mov	r3, r0
 800e230:	4618      	mov	r0, r3
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f7f7 f9a1 	bl	8005588 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e246:	4603      	mov	r3, r0
 800e248:	4618      	mov	r0, r3
 800e24a:	f7fc fd63 	bl	800ad14 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e24e:	4603      	mov	r3, r0
 800e250:	4618      	mov	r0, r3
 800e252:	f7ff fc5c 	bl	800db0e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800e256:	4603      	mov	r3, r0
 800e258:	4618      	mov	r0, r3
 800e25a:	3708      	adds	r7, #8
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7f7 f98d 	bl	8005588 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e26e:	4603      	mov	r3, r0
 800e270:	4618      	mov	r0, r3
 800e272:	f7fc fd4f 	bl	800ad14 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e276:	4603      	mov	r3, r0
 800e278:	4618      	mov	r0, r3
 800e27a:	f7f8 ffb9 	bl	80071f0 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800e27e:	4603      	mov	r3, r0
 800e280:	4618      	mov	r0, r3
 800e282:	3708      	adds	r7, #8
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 fbd0 	bl	800ea36 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	4618      	mov	r0, r3
 800e29a:	3708      	adds	r7, #8
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	607a      	str	r2, [r7, #4]
 800e2ac:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f7ff ffea 	bl	800e288 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	68ba      	ldr	r2, [r7, #8]
 800e2b8:	601a      	str	r2, [r3, #0]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	3304      	adds	r3, #4
 800e2be:	6879      	ldr	r1, [r7, #4]
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7f8 fb91 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	3305      	adds	r3, #5
 800e2ca:	6839      	ldr	r1, [r7, #0]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7f8 fb8b 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d011      	beq.n	800e2fc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	db08      	blt.n	800e2f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d105      	bne.n	800e2f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	db02      	blt.n	800e2f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d005      	beq.n	800e2fc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e2f0:	4b07      	ldr	r3, [pc, #28]	; (800e310 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800e2f2:	4a08      	ldr	r2, [pc, #32]	; (800e314 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800e2f4:	21b0      	movs	r1, #176	; 0xb0
 800e2f6:	4808      	ldr	r0, [pc, #32]	; (800e318 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800e2f8:	f00f fcc8 	bl	801dc8c <__assert_func>
      checkSanity<Derived>();
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	68f8      	ldr	r0, [r7, #12]
 800e300:	f000 fba4 	bl	800ea4c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	4618      	mov	r0, r3
 800e308:	3710      	adds	r7, #16
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	08026218 	.word	0x08026218
 800e314:	08026b0c 	.word	0x08026b0c
 800e318:	080263c8 	.word	0x080263c8

0800e31c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	3308      	adds	r3, #8
 800e328:	4618      	mov	r0, r3
 800e32a:	f7ff ff99 	bl	800e260 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 800e32e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	615a      	str	r2, [r3, #20]
    }
 800e334:	bf00      	nop
 800e336:	3708      	adds	r7, #8
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 fb8b 	bl	800ea62 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6839      	ldr	r1, [r7, #0]
 800e350:	4618      	mov	r0, r3
 800e352:	f000 fb91 	bl	800ea78 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>
  }
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	4618      	mov	r0, r3
 800e35a:	3708      	adds	r7, #8
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	68b9      	ldr	r1, [r7, #8]
 800e372:	4618      	mov	r0, r3
 800e374:	f000 fba8 	bl	800eac8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>
 800e378:	eef0 7a40 	vmov.f32	s15, s0
 800e37c:	eeb0 0a67 	vmov.f32	s0, s15
 800e380:	3710      	adds	r7, #16
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}

0800e386 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e386:	b580      	push	{r7, lr}
 800e388:	b082      	sub	sp, #8
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e38e:	2202      	movs	r2, #2
 800e390:	2102      	movs	r1, #2
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f7fb feaf 	bl	800a0f6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f000 fbc5 	bl	800eb28 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>
  }
 800e39e:	bf00      	nop
 800e3a0:	3708      	adds	r7, #8
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}

0800e3a6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e3a6:	b480      	push	{r7}
 800e3a8:	b083      	sub	sp, #12
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
    }
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
#endif
    }

    template<typename T>
    EIGEN_DEVICE_FUNC
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
    {}
 800e3c6:	bf00      	nop
 800e3c8:	370c      	adds	r7, #12
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr

0800e3d2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e3d2:	b480      	push	{r7}
 800e3d4:	b083      	sub	sp, #12
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
    }
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	370c      	adds	r7, #12
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr

0800e3e8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e3e8:	b480      	push	{r7}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	6039      	str	r1, [r7, #0]
    {}
 800e3f2:	bf00      	nop
 800e3f4:	370c      	adds	r7, #12
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr

0800e3fe <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e3fe:	b480      	push	{r7}
 800e400:	b083      	sub	sp, #12
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	4618      	mov	r0, r3
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr

0800e414 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e414:	b590      	push	{r4, r7, lr}
 800e416:	b083      	sub	sp, #12
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
 800e41e:	687c      	ldr	r4, [r7, #4]
 800e420:	6838      	ldr	r0, [r7, #0]
 800e422:	f000 fb8b 	bl	800eb3c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>
 800e426:	4603      	mov	r3, r0
 800e428:	4619      	mov	r1, r3
 800e42a:	4620      	mov	r0, r4
 800e42c:	f7f7 f862 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	1d1c      	adds	r4, r3, #4
 800e434:	6838      	ldr	r0, [r7, #0]
 800e436:	f000 fb8d 	bl	800eb54 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>
 800e43a:	4603      	mov	r3, r0
 800e43c:	4619      	mov	r1, r3
 800e43e:	4620      	mov	r0, r4
 800e440:	f000 fb9f 	bl	800eb82 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f103 040c 	add.w	r4, r3, #12
 800e44a:	6838      	ldr	r0, [r7, #0]
 800e44c:	f000 fb8d 	bl	800eb6a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>
 800e450:	4603      	mov	r3, r0
 800e452:	4619      	mov	r1, r3
 800e454:	4620      	mov	r0, r4
 800e456:	f000 fba3 	bl	800eba0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	4618      	mov	r0, r3
 800e45e:	370c      	adds	r7, #12
 800e460:	46bd      	mov	sp, r7
 800e462:	bd90      	pop	{r4, r7, pc}

0800e464 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	68ba      	ldr	r2, [r7, #8]
 800e474:	6879      	ldr	r1, [r7, #4]
 800e476:	4618      	mov	r0, r3
 800e478:	f000 fba1 	bl	800ebbe <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800e47c:	eef0 7a40 	vmov.f32	s15, s0
 800e480:	eeb0 0a67 	vmov.f32	s0, s15
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}

0800e48a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b082      	sub	sp, #8
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
 800e492:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e494:	2201      	movs	r2, #1
 800e496:	2100      	movs	r1, #0
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f7ff ffe3 	bl	800e464 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e49e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e4a2:	eeb0 0a67 	vmov.f32	s0, s15
 800e4a6:	3708      	adds	r7, #8
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e4b6:	2202      	movs	r2, #2
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f7ff ffd2 	bl	800e464 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e4c0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e4c4:	eeb0 0a67 	vmov.f32	s0, s15
 800e4c8:	3708      	adds	r7, #8
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b086      	sub	sp, #24
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	60f8      	str	r0, [r7, #12]
 800e4d6:	60b9      	str	r1, [r7, #8]
 800e4d8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	68b9      	ldr	r1, [r7, #8]
 800e4e2:	6978      	ldr	r0, [r7, #20]
 800e4e4:	f000 fb9b 	bl	800ec1e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800e4e8:	bf00      	nop
 800e4ea:	3718      	adds	r7, #24
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800e4fc:	68b8      	ldr	r0, [r7, #8]
 800e4fe:	f7f7 f9df 	bl	80058c0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800e502:	4603      	mov	r3, r0
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	4619      	mov	r1, r3
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f000 fbc3 	bl	800ec94 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>
}
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	3710      	adds	r7, #16
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}

0800e516 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800e516:	b5b0      	push	{r4, r5, r7, lr}
 800e518:	b086      	sub	sp, #24
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	60f8      	str	r0, [r7, #12]
 800e51e:	60b9      	str	r1, [r7, #8]
 800e520:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800e522:	68b8      	ldr	r0, [r7, #8]
 800e524:	f7fd f924 	bl	800b770 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800e528:	4604      	mov	r4, r0
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f000 fbda 	bl	800ece4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>
 800e530:	4605      	mov	r5, r0
 800e532:	f107 0314 	add.w	r3, r7, #20
 800e536:	4618      	mov	r0, r3
 800e538:	f7f6 ff52 	bl	80053e0 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800e53c:	f107 0314 	add.w	r3, r7, #20
 800e540:	462a      	mov	r2, r5
 800e542:	4621      	mov	r1, r4
 800e544:	68f8      	ldr	r0, [r7, #12]
 800e546:	f000 fc07 	bl	800ed58 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 800e54a:	68f8      	ldr	r0, [r7, #12]
 800e54c:	3718      	adds	r7, #24
 800e54e:	46bd      	mov	sp, r7
 800e550:	bdb0      	pop	{r4, r5, r7, pc}

0800e552 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800e552:	b580      	push	{r7, lr}
 800e554:	b082      	sub	sp, #8
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f000 fc5a 	bl	800ee14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e560:	4603      	mov	r3, r0
 800e562:	4618      	mov	r0, r3
 800e564:	f000 fc61 	bl	800ee2a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>
 800e568:	4603      	mov	r3, r0
 800e56a:	4618      	mov	r0, r3
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800e572:	b590      	push	{r4, r7, lr}
 800e574:	b085      	sub	sp, #20
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 fc4a 	bl	800ee14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e580:	4604      	mov	r4, r0
 800e582:	f107 030c 	add.w	r3, r7, #12
 800e586:	4618      	mov	r0, r3
 800e588:	f7f7 fa21 	bl	80059ce <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800e58c:	f107 030c 	add.w	r3, r7, #12
 800e590:	4619      	mov	r1, r3
 800e592:	4620      	mov	r0, r4
 800e594:	f000 fcc6 	bl	800ef24 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800e598:	eef0 7a40 	vmov.f32	s15, s0
 800e59c:	bf00      	nop
}
 800e59e:	eeb0 0a67 	vmov.f32	s0, s15
 800e5a2:	3714      	adds	r7, #20
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd90      	pop	{r4, r7, pc}

0800e5a8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	2101      	movs	r1, #1
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7fe fa54 	bl	800ca62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 fcf8 	bl	800efb0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>
  }
 800e5c0:	bf00      	nop
 800e5c2:	3708      	adds	r7, #8
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f000 fcfd 	bl	800efd0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3708      	adds	r7, #8
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>:
class dense_product_base
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7ff ffed 	bl	800e5c8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7ff ffed 	bl	800e5e0 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	4618      	mov	r0, r3
 800e60a:	3708      	adds	r7, #8
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800e610:	b590      	push	{r4, r7, lr}
 800e612:	b085      	sub	sp, #20
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
 800e61c:	68f8      	ldr	r0, [r7, #12]
 800e61e:	f7ff ffeb 	bl	800e5f8 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	68ba      	ldr	r2, [r7, #8]
 800e626:	601a      	str	r2, [r3, #0]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	3304      	adds	r3, #4
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	6812      	ldr	r2, [r2, #0]
 800e630:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	4618      	mov	r0, r3
 800e636:	f7f6 fc27 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e63a:	4604      	mov	r4, r0
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f7f7 facc 	bl	8005bda <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800e642:	4603      	mov	r3, r0
 800e644:	429c      	cmp	r4, r3
 800e646:	d005      	beq.n	800e654 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x44>
 800e648:	4b05      	ldr	r3, [pc, #20]	; (800e660 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x50>)
 800e64a:	4a06      	ldr	r2, [pc, #24]	; (800e664 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x54>)
 800e64c:	2160      	movs	r1, #96	; 0x60
 800e64e:	4806      	ldr	r0, [pc, #24]	; (800e668 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x58>)
 800e650:	f00f fb1c 	bl	801dc8c <__assert_func>
 800e654:	bf00      	nop
    }
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	4618      	mov	r0, r3
 800e65a:	3714      	adds	r7, #20
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd90      	pop	{r4, r7, pc}
 800e660:	0801fdb4 	.word	0x0801fdb4
 800e664:	08026c24 	.word	0x08026c24
 800e668:	08020104 	.word	0x08020104

0800e66c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800e678:	68b9      	ldr	r1, [r7, #8]
 800e67a:	68f8      	ldr	r0, [r7, #12]
 800e67c:	f000 fcb3 	bl	800efe6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	68b9      	ldr	r1, [r7, #8]
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	f000 fd12 	bl	800f0ae <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e68a:	bf00      	nop
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800e692:	b5b0      	push	{r4, r5, r7, lr}
 800e694:	b084      	sub	sp, #16
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
 800e69a:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f7fd fab8 	bl	800bc12 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800e6a2:	4604      	mov	r4, r0
 800e6a4:	6838      	ldr	r0, [r7, #0]
 800e6a6:	f7f7 fc41 	bl	8005f2c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800e6aa:	4605      	mov	r5, r0
 800e6ac:	f107 030c 	add.w	r3, r7, #12
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7f8 fc24 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800e6b6:	f107 030c 	add.w	r3, r7, #12
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	4629      	mov	r1, r5
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f000 fd2d 	bl	800f11e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7fd faa4 	bl	800bc12 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800e6ca:	4603      	mov	r3, r0
    }
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bdb0      	pop	{r4, r5, r7, pc}

0800e6d4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
    }
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	4618      	mov	r0, r3
 800e6e0:	370c      	adds	r7, #12
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr

0800e6ea <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e6ea:	b480      	push	{r7}
 800e6ec:	b083      	sub	sp, #12
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
 800e6f2:	6039      	str	r1, [r7, #0]
    {}
 800e6f4:	bf00      	nop
 800e6f6:	370c      	adds	r7, #12
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
    }
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	4618      	mov	r0, r3
 800e70c:	370c      	adds	r7, #12
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr

0800e716 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e716:	b480      	push	{r7}
 800e718:	b083      	sub	sp, #12
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
 800e71e:	6039      	str	r1, [r7, #0]
    {}
 800e720:	bf00      	nop
 800e722:	370c      	adds	r7, #12
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4618      	mov	r0, r3
 800e738:	370c      	adds	r7, #12
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr

0800e742 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e742:	b590      	push	{r4, r7, lr}
 800e744:	b083      	sub	sp, #12
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
 800e74a:	6039      	str	r1, [r7, #0]
 800e74c:	687c      	ldr	r4, [r7, #4]
 800e74e:	6838      	ldr	r0, [r7, #0]
 800e750:	f000 fcf6 	bl	800f140 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>
 800e754:	4603      	mov	r3, r0
 800e756:	4619      	mov	r1, r3
 800e758:	4620      	mov	r0, r4
 800e75a:	f7f6 fecb 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	1d1c      	adds	r4, r3, #4
 800e762:	6838      	ldr	r0, [r7, #0]
 800e764:	f000 fcf8 	bl	800f158 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>
 800e768:	4603      	mov	r3, r0
 800e76a:	4619      	mov	r1, r3
 800e76c:	4620      	mov	r0, r4
 800e76e:	f000 fd0a 	bl	800f186 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f103 040c 	add.w	r4, r3, #12
 800e778:	6838      	ldr	r0, [r7, #0]
 800e77a:	f000 fcf8 	bl	800f16e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>
 800e77e:	4603      	mov	r3, r0
 800e780:	4619      	mov	r1, r3
 800e782:	4620      	mov	r0, r4
 800e784:	f000 fd0e 	bl	800f1a4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	4618      	mov	r0, r3
 800e78c:	370c      	adds	r7, #12
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd90      	pop	{r4, r7, pc}

0800e792 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e792:	b590      	push	{r4, r7, lr}
 800e794:	b087      	sub	sp, #28
 800e796:	af00      	add	r7, sp, #0
 800e798:	60f8      	str	r0, [r7, #12]
 800e79a:	60b9      	str	r1, [r7, #8]
 800e79c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f000 fd0e 	bl	800f1c2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	3304      	adds	r3, #4
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	68b9      	ldr	r1, [r7, #8]
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f000 fd11 	bl	800f1d8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e7b6:	eef0 7a40 	vmov.f32	s15, s0
 800e7ba:	edc7 7a04 	vstr	s15, [r7, #16]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	330c      	adds	r3, #12
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	68b9      	ldr	r1, [r7, #8]
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f000 fd19 	bl	800f1fe <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>
 800e7cc:	eef0 7a40 	vmov.f32	s15, s0
 800e7d0:	edc7 7a05 	vstr	s15, [r7, #20]
 800e7d4:	f107 0214 	add.w	r2, r7, #20
 800e7d8:	f107 0310 	add.w	r3, r7, #16
 800e7dc:	4619      	mov	r1, r3
 800e7de:	4620      	mov	r0, r4
 800e7e0:	f000 fd2e 	bl	800f240 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e7e4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e7e8:	eeb0 0a67 	vmov.f32	s0, s15
 800e7ec:	371c      	adds	r7, #28
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd90      	pop	{r4, r7, pc}

0800e7f2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e7f2:	b480      	push	{r7}
 800e7f4:	b083      	sub	sp, #12
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	4618      	mov	r0, r3
 800e800:	370c      	adds	r7, #12
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr

0800e80a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b086      	sub	sp, #24
 800e80e:	af00      	add	r7, sp, #0
 800e810:	60f8      	str	r0, [r7, #12]
 800e812:	60b9      	str	r1, [r7, #8]
 800e814:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	68b9      	ldr	r1, [r7, #8]
 800e81e:	6978      	ldr	r0, [r7, #20]
 800e820:	f000 fd23 	bl	800f26a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800e824:	bf00      	nop
 800e826:	3718      	adds	r7, #24
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	3304      	adds	r3, #4
 800e838:	4618      	mov	r0, r3
 800e83a:	370c      	adds	r7, #12
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr

0800e844 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e844:	b580      	push	{r7, lr}
 800e846:	b086      	sub	sp, #24
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	68b9      	ldr	r1, [r7, #8]
 800e858:	6978      	ldr	r0, [r7, #20]
 800e85a:	f000 fd19 	bl	800f290 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800e85e:	bf00      	nop
 800e860:	3718      	adds	r7, #24
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}

0800e866 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800e866:	b480      	push	{r7}
 800e868:	b083      	sub	sp, #12
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	4618      	mov	r0, r3
 800e874:	370c      	adds	r7, #12
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr

0800e87e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800e87e:	b480      	push	{r7}
 800e880:	b083      	sub	sp, #12
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	4618      	mov	r0, r3
 800e88c:	370c      	adds	r7, #12
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr

0800e896 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800e896:	b580      	push	{r7, lr}
 800e898:	b088      	sub	sp, #32
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	60f8      	str	r0, [r7, #12]
 800e89e:	60b9      	str	r1, [r7, #8]
 800e8a0:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::sub_assign_op<typename Dst::Scalar,Scalar>());
 800e8a2:	f107 0314 	add.w	r3, r7, #20
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	68b9      	ldr	r1, [r7, #8]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f000 fd2a 	bl	800f304 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 800e8b0:	f107 031c 	add.w	r3, r7, #28
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7fe ff91 	bl	800d7dc <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800e8ba:	f107 021c 	add.w	r2, r7, #28
 800e8be:	f107 0314 	add.w	r3, r7, #20
 800e8c2:	4619      	mov	r1, r3
 800e8c4:	68f8      	ldr	r0, [r7, #12]
 800e8c6:	f000 fd34 	bl	800f332 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e8ca:	bf00      	nop
 800e8cc:	3720      	adds	r7, #32
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b082      	sub	sp, #8
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f000 fd3a 	bl	800f354 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3708      	adds	r7, #8
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
	...

0800e8ec <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	60b9      	str	r1, [r7, #8]
 800e8f6:	607a      	str	r2, [r7, #4]
 800e8f8:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e8fa:	68f8      	ldr	r0, [r7, #12]
 800e8fc:	f7ff ffe9 	bl	800e8d2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	68ba      	ldr	r2, [r7, #8]
 800e904:	601a      	str	r2, [r3, #0]
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	3304      	adds	r3, #4
 800e90a:	6879      	ldr	r1, [r7, #4]
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7f8 f851 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	3305      	adds	r3, #5
 800e916:	6839      	ldr	r1, [r7, #0]
 800e918:	4618      	mov	r0, r3
 800e91a:	f7f8 f865 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d011      	beq.n	800e948 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	db08      	blt.n	800e93c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2b03      	cmp	r3, #3
 800e92e:	d105      	bne.n	800e93c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	db02      	blt.n	800e93c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d005      	beq.n	800e948 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e93c:	4b07      	ldr	r3, [pc, #28]	; (800e95c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800e93e:	4a08      	ldr	r2, [pc, #32]	; (800e960 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800e940:	21b0      	movs	r1, #176	; 0xb0
 800e942:	4808      	ldr	r0, [pc, #32]	; (800e964 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800e944:	f00f f9a2 	bl	801dc8c <__assert_func>
      checkSanity<Derived>();
 800e948:	2100      	movs	r1, #0
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	f000 fd0d 	bl	800f36a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	4618      	mov	r0, r3
 800e954:	3710      	adds	r7, #16
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	08026218 	.word	0x08026218
 800e960:	08026d70 	.word	0x08026d70
 800e964:	080263c8 	.word	0x080263c8

0800e968 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	4618      	mov	r0, r3
 800e976:	f7f9 fe05 	bl	8008584 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800e97a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	615a      	str	r2, [r3, #20]
    }
 800e980:	bf00      	nop
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f000 fcf4 	bl	800f380 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6839      	ldr	r1, [r7, #0]
 800e99c:	4618      	mov	r0, r3
 800e99e:	f000 fcfa 	bl	800f396 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 fd13 	bl	800f3e6 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e9c0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e9c4:	eeb0 0a67 	vmov.f32	s0, s15
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b084      	sub	sp, #16
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
 800e9d6:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e9d8:	6839      	ldr	r1, [r7, #0]
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 fd16 	bl	800f40c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>
 800e9e0:	eef0 7a40 	vmov.f32	s15, s0
 800e9e4:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800e9e8:	6839      	ldr	r1, [r7, #0]
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 fd1f 	bl	800f42e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>
 800e9f0:	eef0 7a40 	vmov.f32	s15, s0
 800e9f4:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e9f8:	f107 020c 	add.w	r2, r7, #12
 800e9fc:	f107 0308 	add.w	r3, r7, #8
 800ea00:	4619      	mov	r1, r3
 800ea02:	6838      	ldr	r0, [r7, #0]
 800ea04:	f7fa fbdb 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800ea08:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ea0c:	eeb0 0a67 	vmov.f32	s0, s15
 800ea10:	3710      	adds	r7, #16
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}

0800ea16 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ea16:	b580      	push	{r7, lr}
 800ea18:	b082      	sub	sp, #8
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ea1e:	2202      	movs	r2, #2
 800ea20:	2102      	movs	r1, #2
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f7fb fe2e 	bl	800a684 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f000 fd11 	bl	800f450 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800ea2e:	bf00      	nop
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ea36:	b480      	push	{r7}
 800ea38:	b083      	sub	sp, #12
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
    }
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4618      	mov	r0, r3
 800ea42:	370c      	adds	r7, #12
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr

0800ea4c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800ea4c:	b480      	push	{r7}
 800ea4e:	b083      	sub	sp, #12
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
    {}
 800ea56:	bf00      	nop
 800ea58:	370c      	adds	r7, #12
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr

0800ea62 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ea62:	b480      	push	{r7}
 800ea64:	b083      	sub	sp, #12
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800ea78:	b590      	push	{r4, r7, lr}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
 800ea82:	687c      	ldr	r4, [r7, #4]
 800ea84:	6838      	ldr	r0, [r7, #0]
 800ea86:	f000 fced 	bl	800f464 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	4620      	mov	r0, r4
 800ea90:	f7f6 fd30 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	1d1c      	adds	r4, r3, #4
 800ea98:	6838      	ldr	r0, [r7, #0]
 800ea9a:	f000 fcef 	bl	800f47c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f000 fd02 	bl	800f4ac <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f103 0420 	add.w	r4, r3, #32
 800eaae:	6838      	ldr	r0, [r7, #0]
 800eab0:	f000 fcf0 	bl	800f494 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>
 800eab4:	4603      	mov	r3, r0
 800eab6:	4619      	mov	r1, r3
 800eab8:	4620      	mov	r0, r4
 800eaba:	f000 fd06 	bl	800f4ca <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4618      	mov	r0, r3
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd90      	pop	{r4, r7, pc}

0800eac8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800eac8:	b590      	push	{r4, r7, lr}
 800eaca:	b087      	sub	sp, #28
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	4618      	mov	r0, r3
 800ead8:	f000 fd06 	bl	800f4e8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>
 800eadc:	4604      	mov	r4, r0
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	3304      	adds	r3, #4
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	68b9      	ldr	r1, [r7, #8]
 800eae6:	4618      	mov	r0, r3
 800eae8:	f000 fd09 	bl	800f4fe <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800eaec:	eef0 7a40 	vmov.f32	s15, s0
 800eaf0:	edc7 7a04 	vstr	s15, [r7, #16]
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	3320      	adds	r3, #32
 800eaf8:	687a      	ldr	r2, [r7, #4]
 800eafa:	68b9      	ldr	r1, [r7, #8]
 800eafc:	4618      	mov	r0, r3
 800eafe:	f000 fd11 	bl	800f524 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 800eb02:	eef0 7a40 	vmov.f32	s15, s0
 800eb06:	edc7 7a05 	vstr	s15, [r7, #20]
 800eb0a:	f107 0214 	add.w	r2, r7, #20
 800eb0e:	f107 0310 	add.w	r3, r7, #16
 800eb12:	4619      	mov	r1, r3
 800eb14:	4620      	mov	r0, r4
 800eb16:	f000 fb93 	bl	800f240 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800eb1a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800eb1e:	eeb0 0a67 	vmov.f32	s0, s15
 800eb22:	371c      	adds	r7, #28
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd90      	pop	{r4, r7, pc}

0800eb28 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	bf00      	nop
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	3330      	adds	r3, #48	; 0x30
 800eb48:	4618      	mov	r0, r3
 800eb4a:	370c      	adds	r7, #12
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr

0800eb54 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	4618      	mov	r0, r3
 800eb60:	370c      	adds	r7, #12
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr

0800eb6a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800eb6a:	b480      	push	{r7}
 800eb6c:	b083      	sub	sp, #12
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	3318      	adds	r3, #24
 800eb76:	4618      	mov	r0, r3
 800eb78:	370c      	adds	r7, #12
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr

0800eb82 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b082      	sub	sp, #8
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
 800eb8a:	6039      	str	r1, [r7, #0]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6839      	ldr	r1, [r7, #0]
 800eb90:	4618      	mov	r0, r3
 800eb92:	f000 fce8 	bl	800f566 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>:
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6839      	ldr	r1, [r7, #0]
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f000 fce8 	bl	800f584 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3708      	adds	r7, #8
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}

0800ebbe <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ebbe:	b590      	push	{r4, r7, lr}
 800ebc0:	b087      	sub	sp, #28
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	60f8      	str	r0, [r7, #12]
 800ebc6:	60b9      	str	r1, [r7, #8]
 800ebc8:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f000 fce8 	bl	800f5a2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	68b9      	ldr	r1, [r7, #8]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f000 fceb 	bl	800f5b8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800ebe2:	eef0 7a40 	vmov.f32	s15, s0
 800ebe6:	edc7 7a04 	vstr	s15, [r7, #16]
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	330c      	adds	r3, #12
 800ebee:	687a      	ldr	r2, [r7, #4]
 800ebf0:	68b9      	ldr	r1, [r7, #8]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f000 fcf3 	bl	800f5de <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>
 800ebf8:	eef0 7a40 	vmov.f32	s15, s0
 800ebfc:	edc7 7a05 	vstr	s15, [r7, #20]
 800ec00:	f107 0214 	add.w	r2, r7, #20
 800ec04:	f107 0310 	add.w	r3, r7, #16
 800ec08:	4619      	mov	r1, r3
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f000 fb18 	bl	800f240 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800ec10:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ec14:	eeb0 0a67 	vmov.f32	s0, s15
 800ec18:	371c      	adds	r7, #28
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd90      	pop	{r4, r7, pc}

0800ec1e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800ec1e:	b590      	push	{r4, r7, lr}
 800ec20:	b087      	sub	sp, #28
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	60f8      	str	r0, [r7, #12]
 800ec26:	60b9      	str	r1, [r7, #8]
 800ec28:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800ec2a:	68b8      	ldr	r0, [r7, #8]
 800ec2c:	f7f7 ff9e 	bl	8006b6c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800ec30:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800ec32:	68b8      	ldr	r0, [r7, #8]
 800ec34:	f7f6 fe73 	bl	800591e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800ec38:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7f6 f92e 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800ec42:	4602      	mov	r2, r0
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d107      	bne.n	800ec5a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x3c>
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7f6 f91b 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ec52:	4602      	mov	r2, r0
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d001      	beq.n	800ec5e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x40>
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	e000      	b.n	800ec60 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x42>
 800ec5e:	2300      	movs	r3, #0
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d005      	beq.n	800ec70 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x52>
      dst.resize(dstRows, dstCols);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	693a      	ldr	r2, [r7, #16]
 800ec68:	6979      	ldr	r1, [r7, #20]
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7f9 f830 	bl	8007cd0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800ec70:	68b8      	ldr	r0, [r7, #8]
 800ec72:	f000 fcd5 	bl	800f620 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>
 800ec76:	4604      	mov	r4, r0
 800ec78:	68b8      	ldr	r0, [r7, #8]
 800ec7a:	f000 fcdd 	bl	800f638 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	461a      	mov	r2, r3
 800ec82:	4621      	mov	r1, r4
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f000 fce3 	bl	800f650 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>
  }
 800ec8a:	bf00      	nop
 800ec8c:	371c      	adds	r7, #28
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd90      	pop	{r4, r7, pc}
	...

0800ec94 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	60b9      	str	r1, [r7, #8]
 800ec9e:	607a      	str	r2, [r7, #4]
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	68b9      	ldr	r1, [r7, #8]
 800eca6:	4618      	mov	r0, r3
 800eca8:	f000 fcf0 	bl	800f68c <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	db06      	blt.n	800ecc0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x2c>
 800ecb2:	68b8      	ldr	r0, [r7, #8]
 800ecb4:	f7f7 ff68 	bl	8006b88 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	db05      	blt.n	800eccc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x38>
 800ecc0:	4b05      	ldr	r3, [pc, #20]	; (800ecd8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x44>)
 800ecc2:	4a06      	ldr	r2, [pc, #24]	; (800ecdc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x48>)
 800ecc4:	2178      	movs	r1, #120	; 0x78
 800ecc6:	4806      	ldr	r0, [pc, #24]	; (800ece0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x4c>)
 800ecc8:	f00e ffe0 	bl	801dc8c <__assert_func>
    }
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3710      	adds	r7, #16
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	08024678 	.word	0x08024678
 800ecdc:	08026e74 	.word	0x08026e74
 800ece0:	080247fc 	.word	0x080247fc

0800ece4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	4618      	mov	r0, r3
 800ecf0:	370c      	adds	r7, #12
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr

0800ecfa <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b082      	sub	sp, #8
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 fcd3 	bl	800f6ae <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}

0800ed12 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800ed12:	b580      	push	{r7, lr}
 800ed14:	b082      	sub	sp, #8
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	6078      	str	r0, [r7, #4]
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f7ff ffed 	bl	800ecfa <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	4618      	mov	r0, r3
 800ed24:	3708      	adds	r7, #8
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b082      	sub	sp, #8
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
 800ed32:	f7f7 fe7e 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800ed36:	4603      	mov	r3, r0
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3708      	adds	r7, #8
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	f7f7 fe7b 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3708      	adds	r7, #8
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
	...

0800ed58 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800ed58:	b5b0      	push	{r4, r5, r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	607a      	str	r2, [r7, #4]
 800ed64:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f7ff ffd3 	bl	800ed12 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	4614      	mov	r4, r2
 800ed72:	461d      	mov	r5, r3
 800ed74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed78:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ed7c:	e884 0003 	stmia.w	r4, {r0, r1}
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f103 0218 	add.w	r2, r3, #24
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	4614      	mov	r4, r2
 800ed8a:	461d      	mov	r5, r3
 800ed8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed90:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ed94:	e884 0003 	stmia.w	r4, {r0, r1}
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	3330      	adds	r3, #48	; 0x30
 800ed9c:	6839      	ldr	r1, [r7, #0]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7f6 fba8 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800eda4:	68b8      	ldr	r0, [r7, #8]
 800eda6:	f7fc fd11 	bl	800b7cc <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800edaa:	4604      	mov	r4, r0
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	4618      	mov	r0, r3
 800edb0:	f7ff ffbb 	bl	800ed2a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>
 800edb4:	4603      	mov	r3, r0
 800edb6:	429c      	cmp	r4, r3
 800edb8:	d10a      	bne.n	800edd0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 800edba:	68b8      	ldr	r0, [r7, #8]
 800edbc:	f7fc fd13 	bl	800b7e6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800edc0:	4604      	mov	r4, r0
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7ff ffbb 	bl	800ed40 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>
 800edca:	4603      	mov	r3, r0
 800edcc:	429c      	cmp	r4, r3
 800edce:	d005      	beq.n	800eddc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 800edd0:	4b05      	ldr	r3, [pc, #20]	; (800ede8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 800edd2:	4a06      	ldr	r2, [pc, #24]	; (800edec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 800edd4:	2174      	movs	r1, #116	; 0x74
 800edd6:	4806      	ldr	r0, [pc, #24]	; (800edf0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 800edd8:	f00e ff58 	bl	801dc8c <__assert_func>
    }
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	4618      	mov	r0, r3
 800ede0:	3710      	adds	r7, #16
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bdb0      	pop	{r4, r5, r7, pc}
 800ede6:	bf00      	nop
 800ede8:	0801faf4 	.word	0x0801faf4
 800edec:	08026f64 	.word	0x08026f64
 800edf0:	0801fd58 	.word	0x0801fd58

0800edf4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b082      	sub	sp, #8
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 f809 	bl	800ee14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800ee02:	4603      	mov	r3, r0
 800ee04:	4618      	mov	r0, r3
 800ee06:	f000 fc5d 	bl	800f6c4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	4618      	mov	r0, r3
 800ee20:	370c      	adds	r7, #12
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr

0800ee2a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b082      	sub	sp, #8
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fc fcc9 	bl	800b7cc <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800ee3a:	4603      	mov	r3, r0
    }
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3708      	adds	r7, #8
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 fc60 	bl	800f712 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	4618      	mov	r0, r3
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7ff ffec 	bl	800ee44 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3708      	adds	r7, #8
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}

0800ee76 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b082      	sub	sp, #8
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7ff ffeb 	bl	800ee5c <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3708      	adds	r7, #8
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7ff ffeb 	bl	800ee76 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	4618      	mov	r0, r3
 800eea4:	3708      	adds	r7, #8
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b082      	sub	sp, #8
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	330c      	adds	r3, #12
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7ff ffea 	bl	800ee90 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	3304      	adds	r3, #4
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fc fd79 	bl	800b9b8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	4618      	mov	r0, r3
 800eeca:	3708      	adds	r7, #8
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7ff ffe5 	bl	800eeaa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f000 fc0b 	bl	800f6fc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	4618      	mov	r0, r3
 800eeea:	3708      	adds	r7, #8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7ff ffe8 	bl	800eed0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	4618      	mov	r0, r3
 800ef04:	3708      	adds	r7, #8
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}

0800ef0a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800ef0a:	b580      	push	{r7, lr}
 800ef0c:	b082      	sub	sp, #8
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	6078      	str	r0, [r7, #4]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7ff ffeb 	bl	800eef0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3708      	adds	r7, #8
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800ef24:	b580      	push	{r7, lr}
 800ef26:	ed2d 8b02 	vpush	{d8}
 800ef2a:	b088      	sub	sp, #32
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f7ff fb0d 	bl	800e552 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	dd05      	ble.n	800ef4a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f7ff ff58 	bl	800edf4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	dc06      	bgt.n	800ef58 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800ef4a:	4b16      	ldr	r3, [pc, #88]	; (800efa4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800ef4c:	4a16      	ldr	r2, [pc, #88]	; (800efa8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800ef4e:	f240 119b 	movw	r1, #411	; 0x19b
 800ef52:	4816      	ldr	r0, [pc, #88]	; (800efac <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800ef54:	f00e fe9a 	bl	801dc8c <__assert_func>
 800ef58:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f7ff ff5a 	bl	800ee14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800ef60:	4602      	mov	r2, r0
 800ef62:	f107 030c 	add.w	r3, r7, #12
 800ef66:	4611      	mov	r1, r2
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f000 fbb8 	bl	800f6de <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f7ff ff50 	bl	800ee14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800ef74:	4602      	mov	r2, r0
 800ef76:	f107 030c 	add.w	r3, r7, #12
 800ef7a:	6839      	ldr	r1, [r7, #0]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f000 fbd3 	bl	800f728 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800ef82:	eeb0 8a40 	vmov.f32	s16, s0
 800ef86:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ef88:	f107 030c 	add.w	r3, r7, #12
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7ff ffbc 	bl	800ef0a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ef92:	eef0 7a48 	vmov.f32	s15, s16
}
 800ef96:	eeb0 0a67 	vmov.f32	s0, s15
 800ef9a:	3720      	adds	r7, #32
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	ecbd 8b02 	vpop	{d8}
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	08024b74 	.word	0x08024b74
 800efa8:	080271d4 	.word	0x080271d4
 800efac:	08024d80 	.word	0x08024d80

0800efb0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800efb8:	2202      	movs	r2, #2
 800efba:	2101      	movs	r1, #1
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f7fd fd50 	bl	800ca62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f000 fbc1 	bl	800f74a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>
  }
 800efc8:	bf00      	nop
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
    }
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	4618      	mov	r0, r3
 800efdc:	370c      	adds	r7, #12
 800efde:	46bd      	mov	sp, r7
 800efe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe4:	4770      	bx	lr

0800efe6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800efe6:	b480      	push	{r7}
 800efe8:	b083      	sub	sp, #12
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
 800efee:	6039      	str	r1, [r7, #0]
}
 800eff0:	bf00      	nop
 800eff2:	370c      	adds	r7, #12
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr

0800effc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f000 fbd5 	bl	800f7b4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	4618      	mov	r0, r3
 800f00e:	3708      	adds	r7, #8
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	4618      	mov	r0, r3
 800f020:	f7ff ffec 	bl	800effc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	4618      	mov	r0, r3
 800f028:	3708      	adds	r7, #8
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}

0800f02e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800f02e:	b580      	push	{r7, lr}
 800f030:	b082      	sub	sp, #8
 800f032:	af00      	add	r7, sp, #0
 800f034:	6078      	str	r0, [r7, #4]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	4618      	mov	r0, r3
 800f03a:	f7ff ffeb 	bl	800f014 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f000 fbad 	bl	800f79e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4618      	mov	r0, r3
 800f048:	3708      	adds	r7, #8
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}

0800f04e <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800f04e:	b580      	push	{r7, lr}
 800f050:	b082      	sub	sp, #8
 800f052:	af00      	add	r7, sp, #0
 800f054:	6078      	str	r0, [r7, #4]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	4618      	mov	r0, r3
 800f05a:	f7ff ffe8 	bl	800f02e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	4618      	mov	r0, r3
 800f062:	3708      	adds	r7, #8
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	330c      	adds	r3, #12
 800f074:	4618      	mov	r0, r3
 800f076:	f7ff ffea 	bl	800f04e <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	3308      	adds	r3, #8
 800f07e:	4618      	mov	r0, r3
 800f080:	f7f8 f995 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 fb7f 	bl	800f788 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4618      	mov	r0, r3
 800f08e:	3708      	adds	r7, #8
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff ffe2 	bl	800f068 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3708      	adds	r7, #8
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}

0800f0ae <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800f0ae:	b580      	push	{r7, lr}
 800f0b0:	b090      	sub	sp, #64	; 0x40
 800f0b2:	af02      	add	r7, sp, #8
 800f0b4:	60f8      	str	r0, [r7, #12]
 800f0b6:	60b9      	str	r1, [r7, #8]
 800f0b8:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800f0ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0be:	68b9      	ldr	r1, [r7, #8]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f000 fb52 	bl	800f76a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	68b9      	ldr	r1, [r7, #8]
 800f0ca:	68f8      	ldr	r0, [r7, #12]
 800f0cc:	f000 fb9a 	bl	800f804 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800f0d0:	f107 0320 	add.w	r3, r7, #32
 800f0d4:	68f9      	ldr	r1, [r7, #12]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7f7 fc2d 	bl	8006936 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f7f8 fc6b 	bl	80079b8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f0e8:	f107 0120 	add.w	r1, r7, #32
 800f0ec:	f107 0010 	add.w	r0, r7, #16
 800f0f0:	9300      	str	r3, [sp, #0]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f000 fbd0 	bl	800f898 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800f0f8:	f107 0310 	add.w	r3, r7, #16
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f000 fbe5 	bl	800f8cc <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800f102:	f107 0320 	add.w	r3, r7, #32
 800f106:	4618      	mov	r0, r3
 800f108:	f7f6 f8db 	bl	80052c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800f10c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f110:	4618      	mov	r0, r3
 800f112:	f7ff ffbf 	bl	800f094 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
}
 800f116:	bf00      	nop
 800f118:	3738      	adds	r7, #56	; 0x38
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}

0800f11e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f11e:	b580      	push	{r7, lr}
 800f120:	b086      	sub	sp, #24
 800f122:	af00      	add	r7, sp, #0
 800f124:	60f8      	str	r0, [r7, #12]
 800f126:	60b9      	str	r1, [r7, #8]
 800f128:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	68b9      	ldr	r1, [r7, #8]
 800f132:	6978      	ldr	r0, [r7, #20]
 800f134:	f000 fbd5 	bl	800f8e2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>
}
 800f138:	bf00      	nop
 800f13a:	3718      	adds	r7, #24
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}

0800f140 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f140:	b480      	push	{r7}
 800f142:	b083      	sub	sp, #12
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	332c      	adds	r3, #44	; 0x2c
 800f14c:	4618      	mov	r0, r3
 800f14e:	370c      	adds	r7, #12
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr

0800f158 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4618      	mov	r0, r3
 800f164:	370c      	adds	r7, #12
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr

0800f16e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f16e:	b480      	push	{r7}
 800f170:	b083      	sub	sp, #12
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	3318      	adds	r3, #24
 800f17a:	4618      	mov	r0, r3
 800f17c:	370c      	adds	r7, #12
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr

0800f186 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f186:	b580      	push	{r7, lr}
 800f188:	b082      	sub	sp, #8
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
 800f18e:	6039      	str	r1, [r7, #0]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6839      	ldr	r1, [r7, #0]
 800f194:	4618      	mov	r0, r3
 800f196:	f000 fbb7 	bl	800f908 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	4618      	mov	r0, r3
 800f19e:	3708      	adds	r7, #8
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>:
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6839      	ldr	r1, [r7, #0]
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f000 fbb7 	bl	800f926 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3708      	adds	r7, #8
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f1c2:	b480      	push	{r7}
 800f1c4:	b083      	sub	sp, #12
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	370c      	adds	r7, #12
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr

0800f1d8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	68ba      	ldr	r2, [r7, #8]
 800f1e8:	6879      	ldr	r1, [r7, #4]
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 fbaa 	bl	800f944 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>
 800f1f0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f1f4:	eeb0 0a67 	vmov.f32	s0, s15
 800f1f8:	3710      	adds	r7, #16
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}

0800f1fe <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f1fe:	b5b0      	push	{r4, r5, r7, lr}
 800f200:	b084      	sub	sp, #16
 800f202:	af00      	add	r7, sp, #0
 800f204:	60f8      	str	r0, [r7, #12]
 800f206:	60b9      	str	r1, [r7, #8]
 800f208:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681c      	ldr	r4, [r3, #0]
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	f000 fbb9 	bl	800f986 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>
 800f214:	4602      	mov	r2, r0
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	fb03 f502 	mul.w	r5, r3, r2
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f000 fbbd 	bl	800f99c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>
 800f222:	4602      	mov	r2, r0
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	fb02 f303 	mul.w	r3, r2, r3
 800f22a:	442b      	add	r3, r5
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	4423      	add	r3, r4
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	ee07 3a90 	vmov	s15, r3
  }
 800f236:	eeb0 0a67 	vmov.f32	s0, s15
 800f23a:	3710      	adds	r7, #16
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bdb0      	pop	{r4, r5, r7, pc}

0800f240 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800f240:	b480      	push	{r7}
 800f242:	b085      	sub	sp, #20
 800f244:	af00      	add	r7, sp, #0
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	607a      	str	r2, [r7, #4]
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	ed93 7a00 	vldr	s14, [r3]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	edd3 7a00 	vldr	s15, [r3]
 800f258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f25c:	eeb0 0a67 	vmov.f32	s0, s15
 800f260:	3714      	adds	r7, #20
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr

0800f26a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f26a:	b580      	push	{r7, lr}
 800f26c:	b084      	sub	sp, #16
 800f26e:	af00      	add	r7, sp, #0
 800f270:	60f8      	str	r0, [r7, #12]
 800f272:	60b9      	str	r1, [r7, #8]
 800f274:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f276:	68b9      	ldr	r1, [r7, #8]
 800f278:	68f8      	ldr	r0, [r7, #12]
 800f27a:	f000 fb9a 	bl	800f9b2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f27e:	687a      	ldr	r2, [r7, #4]
 800f280:	68b9      	ldr	r1, [r7, #8]
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f000 fba0 	bl	800f9c8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f288:	bf00      	nop
 800f28a:	3710      	adds	r7, #16
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800f290:	b590      	push	{r4, r7, lr}
 800f292:	b085      	sub	sp, #20
 800f294:	af00      	add	r7, sp, #0
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7f6 fded 	bl	8005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	68b8      	ldr	r0, [r7, #8]
 800f2a8:	f7f6 ffb0 	bl	800620c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	429c      	cmp	r4, r3
 800f2b0:	d10a      	bne.n	800f2c8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7f6 fded 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	68b8      	ldr	r0, [r7, #8]
 800f2be:	f7f6 ffb3 	bl	8006228 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	429c      	cmp	r4, r3
 800f2c6:	d005      	beq.n	800f2d4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800f2c8:	4b0b      	ldr	r3, [pc, #44]	; (800f2f8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800f2ca:	4a0c      	ldr	r2, [pc, #48]	; (800f2fc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800f2cc:	21b0      	movs	r1, #176	; 0xb0
 800f2ce:	480c      	ldr	r0, [pc, #48]	; (800f300 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800f2d0:	f00e fcdc 	bl	801dc8c <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800f2d4:	68b8      	ldr	r0, [r7, #8]
 800f2d6:	f000 fbaf 	bl	800fa38 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 800f2da:	4604      	mov	r4, r0
 800f2dc:	68b8      	ldr	r0, [r7, #8]
 800f2de:	f000 fbb7 	bl	800fa50 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	4621      	mov	r1, r4
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	f000 fbbd 	bl	800fa68 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>
  }
 800f2ee:	bf00      	nop
 800f2f0:	3714      	adds	r7, #20
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd90      	pop	{r4, r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	08022888 	.word	0x08022888
 800f2fc:	080273b0 	.word	0x080273b0
 800f300:	08022d80 	.word	0x08022d80

0800f304 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800f304:	b590      	push	{r4, r7, lr}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800f310:	68b8      	ldr	r0, [r7, #8]
 800f312:	f7f6 f806 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800f316:	4604      	mov	r4, r0
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f7f6 fc9b 	bl	8005c54 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800f31e:	4603      	mov	r3, r0
 800f320:	461a      	mov	r2, r3
 800f322:	4621      	mov	r1, r4
 800f324:	68f8      	ldr	r0, [r7, #12]
 800f326:	f000 fbf3 	bl	800fb10 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>
}
 800f32a:	68f8      	ldr	r0, [r7, #12]
 800f32c:	3714      	adds	r7, #20
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd90      	pop	{r4, r7, pc}

0800f332 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f332:	b580      	push	{r7, lr}
 800f334:	b086      	sub	sp, #24
 800f336:	af00      	add	r7, sp, #0
 800f338:	60f8      	str	r0, [r7, #12]
 800f33a:	60b9      	str	r1, [r7, #8]
 800f33c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	68b9      	ldr	r1, [r7, #8]
 800f346:	6978      	ldr	r0, [r7, #20]
 800f348:	f000 fc10 	bl	800fb6c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800f34c:	bf00      	nop
 800f34e:	3718      	adds	r7, #24
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f354:	b480      	push	{r7}
 800f356:	b083      	sub	sp, #12
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
    }
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	4618      	mov	r0, r3
 800f360:	370c      	adds	r7, #12
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr

0800f36a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800f36a:	b480      	push	{r7}
 800f36c:	b083      	sub	sp, #12
 800f36e:	af00      	add	r7, sp, #0
 800f370:	6078      	str	r0, [r7, #4]
 800f372:	6039      	str	r1, [r7, #0]
    {}
 800f374:	bf00      	nop
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800f380:	b480      	push	{r7}
 800f382:	b083      	sub	sp, #12
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	4618      	mov	r0, r3
 800f38c:	370c      	adds	r7, #12
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr

0800f396 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800f396:	b590      	push	{r4, r7, lr}
 800f398:	b083      	sub	sp, #12
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
 800f39e:	6039      	str	r1, [r7, #0]
 800f3a0:	687c      	ldr	r4, [r7, #4]
 800f3a2:	6838      	ldr	r0, [r7, #0]
 800f3a4:	f000 fbf5 	bl	800fb92 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	f7f6 f8a1 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	1d1c      	adds	r4, r3, #4
 800f3b6:	6838      	ldr	r0, [r7, #0]
 800f3b8:	f000 fbf7 	bl	800fbaa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	4619      	mov	r1, r3
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	f7ff fbde 	bl	800eb82 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f103 040c 	add.w	r4, r3, #12
 800f3cc:	6838      	ldr	r0, [r7, #0]
 800f3ce:	f000 fbf7 	bl	800fbc0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	f000 fbfe 	bl	800fbd8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	4618      	mov	r0, r3
 800f3e0:	370c      	adds	r7, #12
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd90      	pop	{r4, r7, pc}

0800f3e6 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b084      	sub	sp, #16
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	60f8      	str	r0, [r7, #12]
 800f3ee:	60b9      	str	r1, [r7, #8]
 800f3f0:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	68ba      	ldr	r2, [r7, #8]
 800f3f6:	6879      	ldr	r1, [r7, #4]
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f000 fbfc 	bl	800fbf6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>
 800f3fe:	eef0 7a40 	vmov.f32	s15, s0
 800f402:	eeb0 0a67 	vmov.f32	s0, s15
 800f406:	3710      	adds	r7, #16
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f416:	2201      	movs	r2, #1
 800f418:	2100      	movs	r1, #0
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f7ff ffe3 	bl	800f3e6 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f420:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f424:	eeb0 0a67 	vmov.f32	s0, s15
 800f428:	3708      	adds	r7, #8
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}

0800f42e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f42e:	b580      	push	{r7, lr}
 800f430:	b082      	sub	sp, #8
 800f432:	af00      	add	r7, sp, #0
 800f434:	6078      	str	r0, [r7, #4]
 800f436:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f438:	2202      	movs	r2, #2
 800f43a:	2100      	movs	r1, #0
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f7ff ffd2 	bl	800f3e6 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f442:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f446:	eeb0 0a67 	vmov.f32	s0, s15
 800f44a:	3708      	adds	r7, #8
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800f450:	b480      	push	{r7}
 800f452:	b083      	sub	sp, #12
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	bf00      	nop
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr

0800f464 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	3334      	adds	r3, #52	; 0x34
 800f470:	4618      	mov	r0, r3
 800f472:	370c      	adds	r7, #12
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr

0800f47c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	3304      	adds	r3, #4
 800f488:	4618      	mov	r0, r3
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f494:	b480      	push	{r7}
 800f496:	b083      	sub	sp, #12
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	331c      	adds	r3, #28
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6839      	ldr	r1, [r7, #0]
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f000 fbcb 	bl	800fc56 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3708      	adds	r7, #8
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}

0800f4ca <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>:
 800f4ca:	b580      	push	{r7, lr}
 800f4cc:	b082      	sub	sp, #8
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
 800f4d2:	6039      	str	r1, [r7, #0]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6839      	ldr	r1, [r7, #0]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f000 fbcb 	bl	800fc74 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3708      	adds	r7, #8
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	370c      	adds	r7, #12
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr

0800f4fe <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b084      	sub	sp, #16
 800f502:	af00      	add	r7, sp, #0
 800f504:	60f8      	str	r0, [r7, #12]
 800f506:	60b9      	str	r1, [r7, #8]
 800f508:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	6879      	ldr	r1, [r7, #4]
 800f510:	4618      	mov	r0, r3
 800f512:	f000 fbc6 	bl	800fca2 <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>
 800f516:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f51a:	eeb0 0a67 	vmov.f32	s0, s15
 800f51e:	3710      	adds	r7, #16
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f524:	b5b0      	push	{r4, r5, r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	60b9      	str	r1, [r7, #8]
 800f52e:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	681c      	ldr	r4, [r3, #0]
 800f534:	68f8      	ldr	r0, [r7, #12]
 800f536:	f000 fbd4 	bl	800fce2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 800f53a:	4602      	mov	r2, r0
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	fb03 f502 	mul.w	r5, r3, r2
 800f542:	68f8      	ldr	r0, [r7, #12]
 800f544:	f000 fbd8 	bl	800fcf8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 800f548:	4602      	mov	r2, r0
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	fb02 f303 	mul.w	r3, r2, r3
 800f550:	442b      	add	r3, r5
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	4423      	add	r3, r4
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	ee07 3a90 	vmov	s15, r3
  }
 800f55c:	eeb0 0a67 	vmov.f32	s0, s15
 800f560:	3710      	adds	r7, #16
 800f562:	46bd      	mov	sp, r7
 800f564:	bdb0      	pop	{r4, r5, r7, pc}

0800f566 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f566:	b580      	push	{r7, lr}
 800f568:	b082      	sub	sp, #8
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
 800f56e:	6039      	str	r1, [r7, #0]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6839      	ldr	r1, [r7, #0]
 800f574:	4618      	mov	r0, r3
 800f576:	f000 fbca 	bl	800fd0e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	4618      	mov	r0, r3
 800f57e:	3708      	adds	r7, #8
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}

0800f584 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6839      	ldr	r1, [r7, #0]
 800f592:	4618      	mov	r0, r3
 800f594:	f000 fbd1 	bl	800fd3a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4618      	mov	r0, r3
 800f59c:	3708      	adds	r7, #8
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f5a2:	b480      	push	{r7}
 800f5a4:	b083      	sub	sp, #12
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	370c      	adds	r7, #12
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr

0800f5b8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	68ba      	ldr	r2, [r7, #8]
 800f5c8:	6879      	ldr	r1, [r7, #4]
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f000 fbc9 	bl	800fd62 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>
 800f5d0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f5d4:	eeb0 0a67 	vmov.f32	s0, s15
 800f5d8:	3710      	adds	r7, #16
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f5de:	b5b0      	push	{r4, r5, r7, lr}
 800f5e0:	b084      	sub	sp, #16
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	60f8      	str	r0, [r7, #12]
 800f5e6:	60b9      	str	r1, [r7, #8]
 800f5e8:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681c      	ldr	r4, [r3, #0]
 800f5ee:	68f8      	ldr	r0, [r7, #12]
 800f5f0:	f000 fbd8 	bl	800fda4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	fb03 f502 	mul.w	r5, r3, r2
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f000 fbdc 	bl	800fdba <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>
 800f602:	4602      	mov	r2, r0
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	fb02 f303 	mul.w	r3, r2, r3
 800f60a:	442b      	add	r3, r5
 800f60c:	009b      	lsls	r3, r3, #2
 800f60e:	4423      	add	r3, r4
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	ee07 3a90 	vmov	s15, r3
  }
 800f616:	eeb0 0a67 	vmov.f32	s0, s15
 800f61a:	3710      	adds	r7, #16
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bdb0      	pop	{r4, r5, r7, pc}

0800f620 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800f620:	b480      	push	{r7}
 800f622:	b083      	sub	sp, #12
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4618      	mov	r0, r3
 800f62e:	370c      	adds	r7, #12
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr

0800f638 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	4618      	mov	r0, r3
 800f646:	370c      	adds	r7, #12
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800f650:	b580      	push	{r7, lr}
 800f652:	b088      	sub	sp, #32
 800f654:	af00      	add	r7, sp, #0
 800f656:	60f8      	str	r0, [r7, #12]
 800f658:	60b9      	str	r1, [r7, #8]
 800f65a:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800f65c:	f107 0314 	add.w	r3, r7, #20
 800f660:	687a      	ldr	r2, [r7, #4]
 800f662:	68b9      	ldr	r1, [r7, #8]
 800f664:	4618      	mov	r0, r3
 800f666:	f000 fbb3 	bl	800fdd0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>
 800f66a:	f107 031c 	add.w	r3, r7, #28
 800f66e:	4618      	mov	r0, r3
 800f670:	f7f7 fc45 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800f674:	f107 021c 	add.w	r2, r7, #28
 800f678:	f107 0314 	add.w	r3, r7, #20
 800f67c:	4619      	mov	r1, r3
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f000 fbbd 	bl	800fdfe <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f684:	bf00      	nop
 800f686:	3720      	adds	r7, #32
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}

0800f68c <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	af00      	add	r7, sp, #0
 800f692:	60f8      	str	r0, [r7, #12]
 800f694:	60b9      	str	r1, [r7, #8]
 800f696:	607a      	str	r2, [r7, #4]
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	687a      	ldr	r2, [r7, #4]
 800f69c:	68b9      	ldr	r1, [r7, #8]
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f000 fbbe 	bl	800fe20 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}

0800f6ae <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f6ae:	b480      	push	{r7}
 800f6b0:	b083      	sub	sp, #12
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
    }
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	370c      	adds	r7, #12
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr

0800f6c4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b082      	sub	sp, #8
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fc f889 	bl	800b7e6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800f6d4:	4603      	mov	r3, r0
    }
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3708      	adds	r7, #8
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}

0800f6de <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b082      	sub	sp, #8
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
 800f6e6:	6039      	str	r1, [r7, #0]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6839      	ldr	r1, [r7, #0]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f000 fbcd 	bl	800fe8c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3708      	adds	r7, #8
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800f6fc:	b480      	push	{r7}
 800f6fe:	b083      	sub	sp, #12
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4618      	mov	r0, r3
 800f708:	370c      	adds	r7, #12
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr

0800f712 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
 800f712:	b480      	push	{r7}
 800f714:	b083      	sub	sp, #12
 800f716:	af00      	add	r7, sp, #0
 800f718:	6078      	str	r0, [r7, #4]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	4618      	mov	r0, r3
 800f71e:	370c      	adds	r7, #12
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr

0800f728 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800f728:	b580      	push	{r7, lr}
 800f72a:	b084      	sub	sp, #16
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	60f8      	str	r0, [r7, #12]
 800f730:	60b9      	str	r1, [r7, #8]
 800f732:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800f734:	68b9      	ldr	r1, [r7, #8]
 800f736:	68f8      	ldr	r0, [r7, #12]
 800f738:	f000 fbb7 	bl	800feaa <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800f73c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f740:	eeb0 0a67 	vmov.f32	s0, s15
 800f744:	3710      	adds	r7, #16
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}

0800f74a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f74a:	b580      	push	{r7, lr}
 800f74c:	b082      	sub	sp, #8
 800f74e:	af00      	add	r7, sp, #0
 800f750:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800f752:	2200      	movs	r2, #0
 800f754:	2102      	movs	r1, #2
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f7fd f983 	bl	800ca62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f000 fbc8 	bl	800fef2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>
  }
 800f762:	bf00      	nop
 800f764:	3708      	adds	r7, #8
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b082      	sub	sp, #8
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
 800f772:	6039      	str	r1, [r7, #0]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6839      	ldr	r1, [r7, #0]
 800f778:	4618      	mov	r0, r3
 800f77a:	f000 fbca 	bl	800ff12 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4618      	mov	r0, r3
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
 800f788:	b480      	push	{r7}
 800f78a:	b083      	sub	sp, #12
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	4618      	mov	r0, r3
 800f794:	370c      	adds	r7, #12
 800f796:	46bd      	mov	sp, r7
 800f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79c:	4770      	bx	lr

0800f79e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 800f79e:	b480      	push	{r7}
 800f7a0:	b083      	sub	sp, #12
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	370c      	adds	r7, #12
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr

0800f7b4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4618      	mov	r0, r3
 800f7c0:	370c      	adds	r7, #12
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr

0800f7ca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800f7ca:	b580      	push	{r7, lr}
 800f7cc:	b082      	sub	sp, #8
 800f7ce:	af00      	add	r7, sp, #0
 800f7d0:	6078      	str	r0, [r7, #4]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7f5 fb61 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3708      	adds	r7, #8
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b082      	sub	sp, #8
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	3304      	adds	r3, #4
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7f7 fa3b 	bl	8006c6e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3708      	adds	r7, #8
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
	...

0800f804 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800f804:	b580      	push	{r7, lr}
 800f806:	b086      	sub	sp, #24
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800f810:	68b8      	ldr	r0, [r7, #8]
 800f812:	f7ff ffda 	bl	800f7ca <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>
 800f816:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800f818:	68b8      	ldr	r0, [r7, #8]
 800f81a:	f7ff ffe4 	bl	800f7e6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>
 800f81e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	4618      	mov	r0, r3
 800f824:	f7f5 fbe1 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f828:	4602      	mov	r2, r0
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d107      	bne.n	800f840 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	4618      	mov	r0, r3
 800f834:	f7f5 fbce 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f838:	4602      	mov	r2, r0
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d001      	beq.n	800f844 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800f840:	2301      	movs	r3, #1
 800f842:	e000      	b.n	800f846 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800f844:	2300      	movs	r3, #0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d005      	beq.n	800f856 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	693a      	ldr	r2, [r7, #16]
 800f84e:	6979      	ldr	r1, [r7, #20]
 800f850:	4618      	mov	r0, r3
 800f852:	f7f8 fad5 	bl	8007e00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	4618      	mov	r0, r3
 800f85a:	f7f5 fbc6 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f85e:	4602      	mov	r2, r0
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	4293      	cmp	r3, r2
 800f864:	d107      	bne.n	800f876 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	4618      	mov	r0, r3
 800f86a:	f7f5 fbb3 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f86e:	4602      	mov	r2, r0
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	4293      	cmp	r3, r2
 800f874:	d006      	beq.n	800f884 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800f876:	4b05      	ldr	r3, [pc, #20]	; (800f88c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800f878:	4a05      	ldr	r2, [pc, #20]	; (800f890 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800f87a:	f240 21fd 	movw	r1, #765	; 0x2fd
 800f87e:	4805      	ldr	r0, [pc, #20]	; (800f894 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800f880:	f00e fa04 	bl	801dc8c <__assert_func>
}
 800f884:	bf00      	nop
 800f886:	3718      	adds	r7, #24
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}
 800f88c:	0802216c 	.word	0x0802216c
 800f890:	0802772c 	.word	0x0802772c
 800f894:	08022280 	.word	0x08022280

0800f898 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	60f8      	str	r0, [r7, #12]
 800f8a0:	60b9      	str	r1, [r7, #8]
 800f8a2:	607a      	str	r2, [r7, #4]
 800f8a4:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	601a      	str	r2, [r3, #0]
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	605a      	str	r2, [r3, #4]
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	683a      	ldr	r2, [r7, #0]
 800f8b6:	609a      	str	r2, [r3, #8]
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	69ba      	ldr	r2, [r7, #24]
 800f8bc:	60da      	str	r2, [r3, #12]
  }
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3714      	adds	r7, #20
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ca:	4770      	bx	lr

0800f8cc <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 fb53 	bl	800ff80 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>
  }
 800f8da:	bf00      	nop
 800f8dc:	3708      	adds	r7, #8
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}

0800f8e2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b084      	sub	sp, #16
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	60f8      	str	r0, [r7, #12]
 800f8ea:	60b9      	str	r1, [r7, #8]
 800f8ec:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f8ee:	68b9      	ldr	r1, [r7, #8]
 800f8f0:	68f8      	ldr	r0, [r7, #12]
 800f8f2:	f000 fb54 	bl	800ff9e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f8f6:	687a      	ldr	r2, [r7, #4]
 800f8f8:	68b9      	ldr	r1, [r7, #8]
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f000 fbbe 	bl	801007c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f900:	bf00      	nop
 800f902:	3710      	adds	r7, #16
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6039      	str	r1, [r7, #0]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6839      	ldr	r1, [r7, #0]
 800f916:	4618      	mov	r0, r3
 800f918:	f000 fbe8 	bl	80100ec <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4618      	mov	r0, r3
 800f920:	3708      	adds	r7, #8
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}

0800f926 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f926:	b580      	push	{r7, lr}
 800f928:	b082      	sub	sp, #8
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
 800f92e:	6039      	str	r1, [r7, #0]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6839      	ldr	r1, [r7, #0]
 800f934:	4618      	mov	r0, r3
 800f936:	f000 fbef 	bl	8010118 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>
  }
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	4618      	mov	r0, r3
 800f93e:	3708      	adds	r7, #8
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f944:	b5b0      	push	{r4, r5, r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681c      	ldr	r4, [r3, #0]
 800f954:	68f8      	ldr	r0, [r7, #12]
 800f956:	f000 fbf3 	bl	8010140 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>
 800f95a:	4602      	mov	r2, r0
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	fb03 f502 	mul.w	r5, r3, r2
 800f962:	68f8      	ldr	r0, [r7, #12]
 800f964:	f000 fbf7 	bl	8010156 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>
 800f968:	4602      	mov	r2, r0
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	fb02 f303 	mul.w	r3, r2, r3
 800f970:	442b      	add	r3, r5
 800f972:	009b      	lsls	r3, r3, #2
 800f974:	4423      	add	r3, r4
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	ee07 3a90 	vmov	s15, r3
  }
 800f97c:	eeb0 0a67 	vmov.f32	s0, s15
 800f980:	3710      	adds	r7, #16
 800f982:	46bd      	mov	sp, r7
 800f984:	bdb0      	pop	{r4, r5, r7, pc}

0800f986 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f986:	b580      	push	{r7, lr}
 800f988:	b082      	sub	sp, #8
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f98e:	f7f7 f858 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f992:	4603      	mov	r3, r0
  }
 800f994:	4618      	mov	r0, r3
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f9a4:	f7f7 f84d 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f9a8:	4603      	mov	r3, r0
  }
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3708      	adds	r7, #8
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}

0800f9b2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800f9b2:	b480      	push	{r7}
 800f9b4:	b083      	sub	sp, #12
 800f9b6:	af00      	add	r7, sp, #0
 800f9b8:	6078      	str	r0, [r7, #4]
 800f9ba:	6039      	str	r1, [r7, #0]
}
 800f9bc:	bf00      	nop
 800f9be:	370c      	adds	r7, #12
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b08c      	sub	sp, #48	; 0x30
 800f9cc:	af02      	add	r7, sp, #8
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800f9d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9d8:	68b9      	ldr	r1, [r7, #8]
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fa fd4f 	bl	800a47e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	68b9      	ldr	r1, [r7, #8]
 800f9e4:	68f8      	ldr	r0, [r7, #12]
 800f9e6:	f000 fbc1 	bl	801016c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800f9ea:	f107 0320 	add.w	r3, r7, #32
 800f9ee:	68f9      	ldr	r1, [r7, #12]
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7fa fd44 	bl	800a47e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800f9f6:	68f8      	ldr	r0, [r7, #12]
 800f9f8:	f000 fc04 	bl	8010204 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fa02:	f107 0120 	add.w	r1, r7, #32
 800fa06:	f107 0010 	add.w	r0, r7, #16
 800fa0a:	9300      	str	r3, [sp, #0]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f000 fc04 	bl	801021a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800fa12:	f107 0310 	add.w	r3, r7, #16
 800fa16:	4618      	mov	r0, r3
 800fa18:	f000 fc19 	bl	801024e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 800fa1c:	f107 0320 	add.w	r3, r7, #32
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7f9 fc13 	bl	800924c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800fa26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7f9 fc0e 	bl	800924c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
}
 800fa30:	bf00      	nop
 800fa32:	3728      	adds	r7, #40	; 0x28
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800fa38:	b480      	push	{r7}
 800fa3a:	b083      	sub	sp, #12
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4618      	mov	r0, r3
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	370c      	adds	r7, #12
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr

0800fa68 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	ed2d 8b02 	vpush	{d8}
 800fa6e:	b088      	sub	sp, #32
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	607a      	str	r2, [r7, #4]
  { dst.coeffRef(0,0) -= (lhs.transpose().cwiseProduct(rhs)).sum(); }
 800fa78:	68b8      	ldr	r0, [r7, #8]
 800fa7a:	f000 fbf3 	bl	8010264 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	61fb      	str	r3, [r7, #28]
 800fa82:	f107 0310 	add.w	r3, r7, #16
 800fa86:	f107 011c 	add.w	r1, r7, #28
 800fa8a:	687a      	ldr	r2, [r7, #4]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f000 fbfc 	bl	801028a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>
 800fa92:	f107 0310 	add.w	r3, r7, #16
 800fa96:	4618      	mov	r0, r3
 800fa98:	f000 fc25 	bl	80102e6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>
 800fa9c:	eeb0 8a40 	vmov.f32	s16, s0
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2200      	movs	r2, #0
 800faa4:	2100      	movs	r1, #0
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7f6 ff11 	bl	80068ce <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800faac:	4603      	mov	r3, r0
 800faae:	edd3 7a00 	vldr	s15, [r3]
 800fab2:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800fab6:	edc3 7a00 	vstr	s15, [r3]
 800faba:	bf00      	nop
 800fabc:	3720      	adds	r7, #32
 800fabe:	46bd      	mov	sp, r7
 800fac0:	ecbd 8b02 	vpop	{d8}
 800fac4:	bd80      	pop	{r7, pc}

0800fac6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
 800fac6:	b580      	push	{r7, lr}
 800fac8:	b082      	sub	sp, #8
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 fc24 	bl	801031c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	4618      	mov	r0, r3
 800fad8:	3708      	adds	r7, #8
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>:
class dense_product_base
 800fade:	b580      	push	{r7, lr}
 800fae0:	b082      	sub	sp, #8
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f7ff ffed 	bl	800fac6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	4618      	mov	r0, r3
 800faf0:	3708      	adds	r7, #8
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}

0800faf6 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800faf6:	b580      	push	{r7, lr}
 800faf8:	b082      	sub	sp, #8
 800fafa:	af00      	add	r7, sp, #0
 800fafc:	6078      	str	r0, [r7, #4]
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f7ff ffed 	bl	800fade <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	4618      	mov	r0, r3
 800fb08:	3708      	adds	r7, #8
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
	...

0800fb10 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800fb10:	b590      	push	{r4, r7, lr}
 800fb12:	b085      	sub	sp, #20
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	607a      	str	r2, [r7, #4]
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	f7ff ffea 	bl	800faf6 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	68ba      	ldr	r2, [r7, #8]
 800fb26:	601a      	str	r2, [r3, #0]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	687a      	ldr	r2, [r7, #4]
 800fb2c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7f5 fa4f 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800fb36:	4604      	mov	r4, r0
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7f5 fb71 	bl	8005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800fb40:	4603      	mov	r3, r0
 800fb42:	429c      	cmp	r4, r3
 800fb44:	d005      	beq.n	800fb52 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 800fb46:	4b06      	ldr	r3, [pc, #24]	; (800fb60 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 800fb48:	4a06      	ldr	r2, [pc, #24]	; (800fb64 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 800fb4a:	2160      	movs	r1, #96	; 0x60
 800fb4c:	4806      	ldr	r0, [pc, #24]	; (800fb68 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 800fb4e:	f00e f89d 	bl	801dc8c <__assert_func>
 800fb52:	bf00      	nop
    }
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	4618      	mov	r0, r3
 800fb58:	3714      	adds	r7, #20
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd90      	pop	{r4, r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	0801fdb4 	.word	0x0801fdb4
 800fb64:	08027854 	.word	0x08027854
 800fb68:	08020104 	.word	0x08020104

0800fb6c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	60f8      	str	r0, [r7, #12]
 800fb74:	60b9      	str	r1, [r7, #8]
 800fb76:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800fb78:	68b9      	ldr	r1, [r7, #8]
 800fb7a:	68f8      	ldr	r0, [r7, #12]
 800fb7c:	f000 fbd9 	bl	8010332 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	68b9      	ldr	r1, [r7, #8]
 800fb84:	68f8      	ldr	r0, [r7, #12]
 800fb86:	f000 fc17 	bl	80103b8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800fb8a:	bf00      	nop
 800fb8c:	3710      	adds	r7, #16
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}

0800fb92 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800fb92:	b480      	push	{r7}
 800fb94:	b083      	sub	sp, #12
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	6078      	str	r0, [r7, #4]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	3330      	adds	r3, #48	; 0x30
 800fb9e:	4618      	mov	r0, r3
 800fba0:	370c      	adds	r7, #12
 800fba2:	46bd      	mov	sp, r7
 800fba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba8:	4770      	bx	lr

0800fbaa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800fbaa:	b480      	push	{r7}
 800fbac:	b083      	sub	sp, #12
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	6078      	str	r0, [r7, #4]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	370c      	adds	r7, #12
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbe:	4770      	bx	lr

0800fbc0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800fbc0:	b480      	push	{r7}
 800fbc2:	b083      	sub	sp, #12
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	3318      	adds	r3, #24
 800fbcc:	4618      	mov	r0, r3
 800fbce:	370c      	adds	r7, #12
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd6:	4770      	bx	lr

0800fbd8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6839      	ldr	r1, [r7, #0]
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f000 fc1e 	bl	8010428 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3708      	adds	r7, #8
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}

0800fbf6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fbf6:	b590      	push	{r4, r7, lr}
 800fbf8:	b087      	sub	sp, #28
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	60f8      	str	r0, [r7, #12]
 800fbfe:	60b9      	str	r1, [r7, #8]
 800fc00:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f000 fc1e 	bl	8010446 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	3304      	adds	r3, #4
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	68b9      	ldr	r1, [r7, #8]
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7ff fccf 	bl	800f5b8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800fc1a:	eef0 7a40 	vmov.f32	s15, s0
 800fc1e:	edc7 7a04 	vstr	s15, [r7, #16]
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	330c      	adds	r3, #12
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	68b9      	ldr	r1, [r7, #8]
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f000 fc16 	bl	801045c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 800fc30:	eef0 7a40 	vmov.f32	s15, s0
 800fc34:	edc7 7a05 	vstr	s15, [r7, #20]
 800fc38:	f107 0214 	add.w	r2, r7, #20
 800fc3c:	f107 0310 	add.w	r3, r7, #16
 800fc40:	4619      	mov	r1, r3
 800fc42:	4620      	mov	r0, r4
 800fc44:	f7ff fafc 	bl	800f240 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800fc48:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fc4c:	eeb0 0a67 	vmov.f32	s0, s15
 800fc50:	371c      	adds	r7, #28
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd90      	pop	{r4, r7, pc}

0800fc56 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b082      	sub	sp, #8
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
 800fc5e:	6039      	str	r1, [r7, #0]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6839      	ldr	r1, [r7, #0]
 800fc64:	4618      	mov	r0, r3
 800fc66:	f000 fc1a 	bl	801049e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	6039      	str	r1, [r7, #0]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6839      	ldr	r1, [r7, #0]
 800fc82:	4618      	mov	r0, r3
 800fc84:	f000 fc21 	bl	80104ca <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>
  }
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3708      	adds	r7, #8
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>:
    T value() { return T(Value); }
 800fc92:	b480      	push	{r7}
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	2300      	movs	r3, #0
 800fc98:	4618      	mov	r0, r3
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca0:	4770      	bx	lr

0800fca2 <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fca2:	b5b0      	push	{r4, r5, r7, lr}
 800fca4:	b084      	sub	sp, #16
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	60f8      	str	r0, [r7, #12]
 800fcaa:	60b9      	str	r1, [r7, #8]
 800fcac:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(m_startRow.value() + row, m_startCol.value() + col);
 800fcae:	68fc      	ldr	r4, [r7, #12]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	3310      	adds	r3, #16
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f000 fc1c 	bl	80104f2 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 800fcba:	4602      	mov	r2, r0
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	18d5      	adds	r5, r2, r3
 800fcc0:	f7ff ffe7 	bl	800fc92 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	4413      	add	r3, r2
 800fcca:	461a      	mov	r2, r3
 800fccc:	4629      	mov	r1, r5
 800fcce:	4620      	mov	r0, r4
 800fcd0:	f000 fc1b 	bl	801050a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>
 800fcd4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fcd8:	eeb0 0a67 	vmov.f32	s0, s15
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bdb0      	pop	{r4, r5, r7, pc}

0800fce2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fce2:	b580      	push	{r7, lr}
 800fce4:	b082      	sub	sp, #8
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fcea:	f7f6 feaa 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fcee:	4603      	mov	r3, r0
  }
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fd00:	f7f6 fe97 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800fd04:	4603      	mov	r3, r0
  }
 800fd06:	4618      	mov	r0, r3
 800fd08:	3708      	adds	r7, #8
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}

0800fd0e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800fd0e:	b590      	push	{r4, r7, lr}
 800fd10:	b083      	sub	sp, #12
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
 800fd16:	6039      	str	r1, [r7, #0]
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 fc2d 	bl	8010578 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800fd1e:	687c      	ldr	r4, [r7, #4]
 800fd20:	6838      	ldr	r0, [r7, #0]
 800fd22:	f000 fc1e 	bl	8010562 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>
 800fd26:	4603      	mov	r3, r0
 800fd28:	4619      	mov	r1, r3
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f000 fc2f 	bl	801058e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	4618      	mov	r0, r3
 800fd34:	370c      	adds	r7, #12
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd90      	pop	{r4, r7, pc}

0800fd3a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
{
  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
  typedef typename XprType::Scalar Scalar;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit block_evaluator(const XprType& block)
 800fd3a:	b580      	push	{r7, lr}
 800fd3c:	b082      	sub	sp, #8
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	6078      	str	r0, [r7, #4]
 800fd42:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6839      	ldr	r1, [r7, #0]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f000 fc2f 	bl	80105ac <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>
  {
    // TODO: for the 3.3 release, this should be turned to an internal assertion, but let's keep it as is for the beta lifetime
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	4618      	mov	r0, r3
 800fd52:	f000 fc55 	bl	8010600 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 800fd56:	bf00      	nop
  }
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3708      	adds	r7, #8
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}

0800fd62 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fd62:	b5b0      	push	{r4, r5, r7, lr}
 800fd64:	b084      	sub	sp, #16
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	60f8      	str	r0, [r7, #12]
 800fd6a:	60b9      	str	r1, [r7, #8]
 800fd6c:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681c      	ldr	r4, [r3, #0]
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f000 fc50 	bl	8010618 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	fb03 f502 	mul.w	r5, r3, r2
 800fd80:	68f8      	ldr	r0, [r7, #12]
 800fd82:	f000 fc54 	bl	801062e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>
 800fd86:	4602      	mov	r2, r0
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	fb02 f303 	mul.w	r3, r2, r3
 800fd8e:	442b      	add	r3, r5
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	4423      	add	r3, r4
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	ee07 3a90 	vmov	s15, r3
  }
 800fd9a:	eeb0 0a67 	vmov.f32	s0, s15
 800fd9e:	3710      	adds	r7, #16
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bdb0      	pop	{r4, r5, r7, pc}

0800fda4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fdac:	f7f6 fe41 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800fdb0:	4603      	mov	r3, r0
  }
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b082      	sub	sp, #8
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fdc2:	f7f6 fe3e 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fdc6:	4603      	mov	r3, r0
  }
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800fdd0:	b590      	push	{r4, r7, lr}
 800fdd2:	b085      	sub	sp, #20
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800fddc:	68b8      	ldr	r0, [r7, #8]
 800fdde:	f7f5 fc68 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800fde2:	4604      	mov	r4, r0
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f7f5 fc64 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800fdea:	4603      	mov	r3, r0
 800fdec:	461a      	mov	r2, r3
 800fdee:	4621      	mov	r1, r4
 800fdf0:	68f8      	ldr	r0, [r7, #12]
 800fdf2:	f000 fc4b 	bl	801068c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>
}
 800fdf6:	68f8      	ldr	r0, [r7, #12]
 800fdf8:	3714      	adds	r7, #20
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd90      	pop	{r4, r7, pc}

0800fdfe <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800fdfe:	b580      	push	{r7, lr}
 800fe00:	b086      	sub	sp, #24
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	60f8      	str	r0, [r7, #12]
 800fe06:	60b9      	str	r1, [r7, #8]
 800fe08:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	68b9      	ldr	r1, [r7, #8]
 800fe12:	6978      	ldr	r0, [r7, #20]
 800fe14:	f000 fc68 	bl	80106e8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800fe18:	bf00      	nop
 800fe1a:	3718      	adds	r7, #24
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800fe20:	b5b0      	push	{r4, r5, r7, lr}
 800fe22:	b084      	sub	sp, #16
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	60b9      	str	r1, [r7, #8]
 800fe2a:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800fe2c:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800fe2e:	68b8      	ldr	r0, [r7, #8]
 800fe30:	f000 fc6d 	bl	801070e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>
 800fe34:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800fe36:	68b8      	ldr	r0, [r7, #8]
 800fe38:	f000 fc7d 	bl	8010736 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 800fe3c:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	fb02 f303 	mul.w	r3, r2, r3
 800fe44:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800fe46:	441d      	add	r5, r3
 800fe48:	68b8      	ldr	r0, [r7, #8]
 800fe4a:	f7f5 fd76 	bl	800593a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	2301      	movs	r3, #1
 800fe52:	4629      	mov	r1, r5
 800fe54:	4620      	mov	r0, r4
 800fe56:	f000 fca3 	bl	80107a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	3308      	adds	r3, #8
 800fe5e:	68ba      	ldr	r2, [r7, #8]
 800fe60:	6812      	ldr	r2, [r2, #0]
 800fe62:	601a      	str	r2, [r3, #0]
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	330c      	adds	r3, #12
 800fe68:	2100      	movs	r1, #0
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fd fe30 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	3310      	adds	r3, #16
 800fe74:	6879      	ldr	r1, [r7, #4]
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fd fe2a 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800fe7c:	68f8      	ldr	r0, [r7, #12]
 800fe7e:	f000 fccd 	bl	801081c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>
    }
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	4618      	mov	r0, r3
 800fe86:	3710      	adds	r7, #16
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bdb0      	pop	{r4, r5, r7, pc}

0800fe8c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	6039      	str	r1, [r7, #0]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6839      	ldr	r1, [r7, #0]
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f000 fcce 	bl	801083c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	4618      	mov	r0, r3
 800fea4:	3708      	adds	r7, #8
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}

0800feaa <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800feaa:	b580      	push	{r7, lr}
 800feac:	b084      	sub	sp, #16
 800feae:	af00      	add	r7, sp, #0
 800feb0:	6078      	str	r0, [r7, #4]
 800feb2:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800feb4:	6839      	ldr	r1, [r7, #0]
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f000 fcd2 	bl	8010860 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800febc:	eef0 7a40 	vmov.f32	s15, s0
 800fec0:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800fec4:	6839      	ldr	r1, [r7, #0]
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f000 fcdb 	bl	8010882 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800fecc:	eef0 7a40 	vmov.f32	s15, s0
 800fed0:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800fed4:	f107 020c 	add.w	r2, r7, #12
 800fed8:	f107 0308 	add.w	r3, r7, #8
 800fedc:	4619      	mov	r1, r3
 800fede:	6838      	ldr	r0, [r7, #0]
 800fee0:	f7f9 f96d 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800fee4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fee8:	eeb0 0a67 	vmov.f32	s0, s15
 800feec:	3710      	adds	r7, #16
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800fef2:	b580      	push	{r7, lr}
 800fef4:	b082      	sub	sp, #8
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800fefa:	2201      	movs	r2, #1
 800fefc:	2102      	movs	r1, #2
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f7fc fdaf 	bl	800ca62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f000 fce0 	bl	80108ca <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>
  }
 800ff0a:	bf00      	nop
 800ff0c:	3708      	adds	r7, #8
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b082      	sub	sp, #8
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
 800ff1a:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f000 fcfc 	bl	801091a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800ff22:	6838      	ldr	r0, [r7, #0]
 800ff24:	f000 fce1 	bl	80108ea <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 800ff28:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 800ff2e:	6838      	ldr	r0, [r7, #0]
 800ff30:	f000 fce7 	bl	8010902 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>
 800ff34:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	3304      	adds	r3, #4
 800ff3a:	6812      	ldr	r2, [r2, #0]
 800ff3c:	601a      	str	r2, [r3, #0]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800ff48:	4619      	mov	r1, r3
 800ff4a:	4610      	mov	r0, r2
 800ff4c:	f7f7 fc3e 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	4610      	mov	r0, r2
 800ff5e:	f000 fce7 	bl	8010930 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 800ff62:	6838      	ldr	r0, [r7, #0]
 800ff64:	f000 fcc1 	bl	80108ea <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7f4 ff8c 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ff70:	4602      	mov	r2, r0
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	611a      	str	r2, [r3, #16]
  }
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3708      	adds	r7, #8
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800ff88:	2100      	movs	r1, #0
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f000 fcdf 	bl	801094e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f000 fcff 	bl	8010994 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>
  }
 800ff96:	bf00      	nop
 800ff98:	3708      	adds	r7, #8
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800ff9e:	b480      	push	{r7}
 800ffa0:	b083      	sub	sp, #12
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
 800ffa6:	6039      	str	r1, [r7, #0]
}
 800ffa8:	bf00      	nop
 800ffaa:	370c      	adds	r7, #12
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr

0800ffb4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7f9 f944 	bl	800924c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3708      	adds	r7, #8
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}

0800ffce <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800ffce:	b580      	push	{r7, lr}
 800ffd0:	b082      	sub	sp, #8
 800ffd2:	af00      	add	r7, sp, #0
 800ffd4:	6078      	str	r0, [r7, #4]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7ff ffeb 	bl	800ffb4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3708      	adds	r7, #8
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}

0800ffe8 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7ff ffeb 	bl	800ffce <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	4618      	mov	r0, r3
 800fffc:	3708      	adds	r7, #8
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}

08010002 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 8010002:	b580      	push	{r7, lr}
 8010004:	b082      	sub	sp, #8
 8010006:	af00      	add	r7, sp, #0
 8010008:	6078      	str	r0, [r7, #4]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	4618      	mov	r0, r3
 801000e:	f7f9 f91d 	bl	800924c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	4618      	mov	r0, r3
 8010016:	3708      	adds	r7, #8
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	330c      	adds	r3, #12
 8010028:	4618      	mov	r0, r3
 801002a:	f7ff ffea 	bl	8010002 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	3304      	adds	r3, #4
 8010032:	4618      	mov	r0, r3
 8010034:	f7ff ffd8 	bl	800ffe8 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	4618      	mov	r0, r3
 801003c:	3708      	adds	r7, #8
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}

08010042 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8010042:	b580      	push	{r7, lr}
 8010044:	b082      	sub	sp, #8
 8010046:	af00      	add	r7, sp, #0
 8010048:	6078      	str	r0, [r7, #4]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	4618      	mov	r0, r3
 801004e:	f7ff ffe5 	bl	801001c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 fcbc 	bl	80109d0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	4618      	mov	r0, r3
 801005c:	3708      	adds	r7, #8
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}

08010062 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8010062:	b580      	push	{r7, lr}
 8010064:	b082      	sub	sp, #8
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	4618      	mov	r0, r3
 801006e:	f7ff ffe8 	bl	8010042 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	4618      	mov	r0, r3
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 801007c:	b580      	push	{r7, lr}
 801007e:	b090      	sub	sp, #64	; 0x40
 8010080:	af02      	add	r7, sp, #8
 8010082:	60f8      	str	r0, [r7, #12]
 8010084:	60b9      	str	r1, [r7, #8]
 8010086:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8010088:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801008c:	68b9      	ldr	r1, [r7, #8]
 801008e:	4618      	mov	r0, r3
 8010090:	f000 fc8f 	bl	80109b2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
  resize_if_allowed(dst, src, func);
 8010094:	687a      	ldr	r2, [r7, #4]
 8010096:	68b9      	ldr	r1, [r7, #8]
 8010098:	68f8      	ldr	r0, [r7, #12]
 801009a:	f000 fca5 	bl	80109e8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 801009e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80100a2:	68f9      	ldr	r1, [r7, #12]
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7fa f9ea 	bl	800a47e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	f000 f8aa 	bl	8010204 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 80100b0:	4603      	mov	r3, r0
 80100b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80100b6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80100ba:	f107 0014 	add.w	r0, r7, #20
 80100be:	9300      	str	r3, [sp, #0]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f000 fcdb 	bl	8010a7c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80100c6:	f107 0314 	add.w	r3, r7, #20
 80100ca:	4618      	mov	r0, r3
 80100cc:	f000 fcf0 	bl	8010ab0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>
  DstEvaluatorType dstEvaluator(dst);
 80100d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7f9 f8b9 	bl	800924c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80100da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80100de:	4618      	mov	r0, r3
 80100e0:	f7ff ffbf 	bl	8010062 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
}
 80100e4:	bf00      	nop
 80100e6:	3738      	adds	r7, #56	; 0x38
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80100ec:	b590      	push	{r4, r7, lr}
 80100ee:	b083      	sub	sp, #12
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	6039      	str	r1, [r7, #0]
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 fcf0 	bl	8010adc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 80100fc:	687c      	ldr	r4, [r7, #4]
 80100fe:	6838      	ldr	r0, [r7, #0]
 8010100:	f000 fce1 	bl	8010ac6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>
 8010104:	4603      	mov	r3, r0
 8010106:	4619      	mov	r1, r3
 8010108:	4620      	mov	r0, r4
 801010a:	f000 fcf2 	bl	8010af2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	4618      	mov	r0, r3
 8010112:	370c      	adds	r7, #12
 8010114:	46bd      	mov	sp, r7
 8010116:	bd90      	pop	{r4, r7, pc}

08010118 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6839      	ldr	r1, [r7, #0]
 8010126:	4618      	mov	r0, r3
 8010128:	f000 fcf2 	bl	8010b10 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	4618      	mov	r0, r3
 8010130:	f000 fd18 	bl	8010b64 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 8010134:	bf00      	nop
  }
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	4618      	mov	r0, r3
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8010148:	f7f6 fc73 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801014c:	4603      	mov	r3, r0
  }
 801014e:	4618      	mov	r0, r3
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8010156:	b580      	push	{r7, lr}
 8010158:	b082      	sub	sp, #8
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 801015e:	f7f6 fc70 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8010162:	4603      	mov	r3, r0
  }
 8010164:	4618      	mov	r0, r3
 8010166:	3708      	adds	r7, #8
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 801016c:	b580      	push	{r7, lr}
 801016e:	b086      	sub	sp, #24
 8010170:	af00      	add	r7, sp, #0
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	4618      	mov	r0, r3
 801017c:	f7f5 fe7f 	bl	8005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010180:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	4618      	mov	r0, r3
 8010186:	f7f5 fe85 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 801018a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	4618      	mov	r0, r3
 8010190:	f7f5 fe75 	bl	8005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010194:	4602      	mov	r2, r0
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	4293      	cmp	r3, r2
 801019a:	d107      	bne.n	80101ac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	4618      	mov	r0, r3
 80101a0:	f7f5 fe78 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80101a4:	4602      	mov	r2, r0
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	4293      	cmp	r3, r2
 80101aa:	d001      	beq.n	80101b0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 80101ac:	2301      	movs	r3, #1
 80101ae:	e000      	b.n	80101b2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 80101b0:	2300      	movs	r3, #0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d005      	beq.n	80101c2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	693a      	ldr	r2, [r7, #16]
 80101ba:	6979      	ldr	r1, [r7, #20]
 80101bc:	4618      	mov	r0, r3
 80101be:	f7fd f9af 	bl	800d520 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7f5 fe5a 	bl	8005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80101ca:	4602      	mov	r2, r0
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	4293      	cmp	r3, r2
 80101d0:	d107      	bne.n	80101e2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7f5 fe5d 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80101da:	4602      	mov	r2, r0
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	4293      	cmp	r3, r2
 80101e0:	d006      	beq.n	80101f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 80101e2:	4b05      	ldr	r3, [pc, #20]	; (80101f8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80101e4:	4a05      	ldr	r2, [pc, #20]	; (80101fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80101e6:	f240 21fd 	movw	r1, #765	; 0x2fd
 80101ea:	4805      	ldr	r0, [pc, #20]	; (8010200 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 80101ec:	f00d fd4e 	bl	801dc8c <__assert_func>
}
 80101f0:	bf00      	nop
 80101f2:	3718      	adds	r7, #24
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	0802216c 	.word	0x0802216c
 80101fc:	0802797c 	.word	0x0802797c
 8010200:	08022280 	.word	0x08022280

08010204 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8010204:	b480      	push	{r7}
 8010206:	b083      	sub	sp, #12
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	4618      	mov	r0, r3
 8010210:	370c      	adds	r7, #12
 8010212:	46bd      	mov	sp, r7
 8010214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010218:	4770      	bx	lr

0801021a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 801021a:	b480      	push	{r7}
 801021c:	b085      	sub	sp, #20
 801021e:	af00      	add	r7, sp, #0
 8010220:	60f8      	str	r0, [r7, #12]
 8010222:	60b9      	str	r1, [r7, #8]
 8010224:	607a      	str	r2, [r7, #4]
 8010226:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	68ba      	ldr	r2, [r7, #8]
 801022c:	601a      	str	r2, [r3, #0]
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	687a      	ldr	r2, [r7, #4]
 8010232:	605a      	str	r2, [r3, #4]
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	683a      	ldr	r2, [r7, #0]
 8010238:	609a      	str	r2, [r3, #8]
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	69ba      	ldr	r2, [r7, #24]
 801023e:	60da      	str	r2, [r3, #12]
  }
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	4618      	mov	r0, r3
 8010244:	3714      	adds	r7, #20
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr

0801024e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801024e:	b580      	push	{r7, lr}
 8010250:	b082      	sub	sp, #8
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f000 fc90 	bl	8010b7c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>
  }
 801025c:	bf00      	nop
 801025e:	3708      	adds	r7, #8
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8010264:	b580      	push	{r7, lr}
 8010266:	b084      	sub	sp, #16
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
  return ConstTransposeReturnType(derived());
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f7f5 fcf1 	bl	8005c54 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8010272:	4602      	mov	r2, r0
 8010274:	f107 030c 	add.w	r3, r7, #12
 8010278:	4611      	mov	r1, r2
 801027a:	4618      	mov	r0, r3
 801027c:	f000 fca5 	bl	8010bca <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>
 8010280:	68fb      	ldr	r3, [r7, #12]
}
 8010282:	4618      	mov	r0, r3
 8010284:	3710      	adds	r7, #16
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}

0801028a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 801028a:	b5b0      	push	{r4, r5, r7, lr}
 801028c:	b086      	sub	sp, #24
 801028e:	af00      	add	r7, sp, #0
 8010290:	60f8      	str	r0, [r7, #12]
 8010292:	60b9      	str	r1, [r7, #8]
 8010294:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8010296:	68b8      	ldr	r0, [r7, #8]
 8010298:	f000 fca7 	bl	8010bea <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 801029c:	4604      	mov	r4, r0
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f7f5 f83f 	bl	8005322 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80102a4:	4605      	mov	r5, r0
 80102a6:	f107 0314 	add.w	r3, r7, #20
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7f5 f898 	bl	80053e0 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80102b0:	f107 0314 	add.w	r3, r7, #20
 80102b4:	462a      	mov	r2, r5
 80102b6:	4621      	mov	r1, r4
 80102b8:	68f8      	ldr	r0, [r7, #12]
 80102ba:	f000 fcd5 	bl	8010c68 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>
}
 80102be:	68f8      	ldr	r0, [r7, #12]
 80102c0:	3718      	adds	r7, #24
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bdb0      	pop	{r4, r5, r7, pc}

080102c6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80102c6:	b580      	push	{r7, lr}
 80102c8:	b082      	sub	sp, #8
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	6078      	str	r0, [r7, #4]
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f000 fd18 	bl	8010d04 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80102d4:	4603      	mov	r3, r0
 80102d6:	4618      	mov	r0, r3
 80102d8:	f000 fd1f 	bl	8010d1a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80102dc:	4603      	mov	r3, r0
 80102de:	4618      	mov	r0, r3
 80102e0:	3708      	adds	r7, #8
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 80102e6:	b590      	push	{r4, r7, lr}
 80102e8:	b085      	sub	sp, #20
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f000 fd08 	bl	8010d04 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80102f4:	4604      	mov	r4, r0
 80102f6:	f107 030c 	add.w	r3, r7, #12
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7f5 fb67 	bl	80059ce <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8010300:	f107 030c 	add.w	r3, r7, #12
 8010304:	4619      	mov	r1, r3
 8010306:	4620      	mov	r0, r4
 8010308:	f000 fd88 	bl	8010e1c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 801030c:	eef0 7a40 	vmov.f32	s15, s0
 8010310:	bf00      	nop
}
 8010312:	eeb0 0a67 	vmov.f32	s0, s15
 8010316:	3714      	adds	r7, #20
 8010318:	46bd      	mov	sp, r7
 801031a:	bd90      	pop	{r4, r7, pc}

0801031c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801031c:	b480      	push	{r7}
 801031e:	b083      	sub	sp, #12
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
    }
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	4618      	mov	r0, r3
 8010328:	370c      	adds	r7, #12
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr

08010332 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8010332:	b580      	push	{r7, lr}
 8010334:	b082      	sub	sp, #8
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
 801033a:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	4618      	mov	r0, r3
 8010340:	f7f4 fdad 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010344:	4603      	mov	r3, r0
 8010346:	2b01      	cmp	r3, #1
 8010348:	dd08      	ble.n	801035c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	4618      	mov	r0, r3
 801034e:	f7f4 fd9b 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010352:	4603      	mov	r3, r0
 8010354:	2b01      	cmp	r3, #1
 8010356:	dd01      	ble.n	801035c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 8010358:	2301      	movs	r3, #1
 801035a:	e000      	b.n	801035e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2c>
 801035c:	2300      	movs	r3, #0
 801035e:	2b00      	cmp	r3, #0
 8010360:	d003      	beq.n	801036a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8010362:	6839      	ldr	r1, [r7, #0]
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f000 fd9f 	bl	8010ea8 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>
}
 801036a:	bf00      	nop
 801036c:	3708      	adds	r7, #8
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}

08010372 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8010372:	b580      	push	{r7, lr}
 8010374:	b082      	sub	sp, #8
 8010376:	af00      	add	r7, sp, #0
 8010378:	6078      	str	r0, [r7, #4]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	330c      	adds	r3, #12
 801037e:	4618      	mov	r0, r3
 8010380:	f7fe fe48 	bl	800f014 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	3308      	adds	r3, #8
 8010388:	4618      	mov	r0, r3
 801038a:	f7f4 ff9a 	bl	80052c2 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f000 fda4 	bl	8010edc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	4618      	mov	r0, r3
 8010398:	3708      	adds	r7, #8
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}

0801039e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 801039e:	b580      	push	{r7, lr}
 80103a0:	b082      	sub	sp, #8
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7ff ffe2 	bl	8010372 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	4618      	mov	r0, r3
 80103b2:	3708      	adds	r7, #8
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b090      	sub	sp, #64	; 0x40
 80103bc:	af02      	add	r7, sp, #8
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80103c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103c8:	68b9      	ldr	r1, [r7, #8]
 80103ca:	4618      	mov	r0, r3
 80103cc:	f000 fd77 	bl	8010ebe <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	68b9      	ldr	r1, [r7, #8]
 80103d4:	68f8      	ldr	r0, [r7, #12]
 80103d6:	f000 fda9 	bl	8010f2c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 80103da:	f107 0320 	add.w	r3, r7, #32
 80103de:	68f9      	ldr	r1, [r7, #12]
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7f7 f9f3 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80103e6:	68f8      	ldr	r0, [r7, #12]
 80103e8:	f7f7 fa58 	bl	800789c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80103ec:	4603      	mov	r3, r0
 80103ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80103f2:	f107 0120 	add.w	r1, r7, #32
 80103f6:	f107 0010 	add.w	r0, r7, #16
 80103fa:	9300      	str	r3, [sp, #0]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f000 fdc3 	bl	8010f88 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8010402:	f107 0310 	add.w	r3, r7, #16
 8010406:	4618      	mov	r0, r3
 8010408:	f000 fdd8 	bl	8010fbc <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>
  DstEvaluatorType dstEvaluator(dst);
 801040c:	f107 0320 	add.w	r3, r7, #32
 8010410:	4618      	mov	r0, r3
 8010412:	f7f6 ffcc 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8010416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801041a:	4618      	mov	r0, r3
 801041c:	f7ff ffbf 	bl	801039e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
}
 8010420:	bf00      	nop
 8010422:	3738      	adds	r7, #56	; 0x38
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6839      	ldr	r1, [r7, #0]
 8010436:	4618      	mov	r0, r3
 8010438:	f000 fdcb 	bl	8010fd2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	4618      	mov	r0, r3
 8010440:	3708      	adds	r7, #8
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8010446:	b480      	push	{r7}
 8010448:	b083      	sub	sp, #12
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	4618      	mov	r0, r3
 8010452:	370c      	adds	r7, #12
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr

0801045c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801045c:	b5b0      	push	{r4, r5, r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	60f8      	str	r0, [r7, #12]
 8010464:	60b9      	str	r1, [r7, #8]
 8010466:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681c      	ldr	r4, [r3, #0]
 801046c:	68f8      	ldr	r0, [r7, #12]
 801046e:	f000 fdc4 	bl	8010ffa <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8010472:	4602      	mov	r2, r0
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	fb03 f502 	mul.w	r5, r3, r2
 801047a:	68f8      	ldr	r0, [r7, #12]
 801047c:	f000 fdc8 	bl	8011010 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8010480:	4602      	mov	r2, r0
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	fb02 f303 	mul.w	r3, r2, r3
 8010488:	442b      	add	r3, r5
 801048a:	009b      	lsls	r3, r3, #2
 801048c:	4423      	add	r3, r4
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	ee07 3a90 	vmov	s15, r3
  }
 8010494:	eeb0 0a67 	vmov.f32	s0, s15
 8010498:	3710      	adds	r7, #16
 801049a:	46bd      	mov	sp, r7
 801049c:	bdb0      	pop	{r4, r5, r7, pc}

0801049e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 801049e:	b590      	push	{r4, r7, lr}
 80104a0:	b083      	sub	sp, #12
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
 80104a6:	6039      	str	r1, [r7, #0]
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f000 fdc7 	bl	801103c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 80104ae:	687c      	ldr	r4, [r7, #4]
 80104b0:	6838      	ldr	r0, [r7, #0]
 80104b2:	f000 fdb8 	bl	8011026 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>
 80104b6:	4603      	mov	r3, r0
 80104b8:	4619      	mov	r1, r3
 80104ba:	4620      	mov	r0, r4
 80104bc:	f000 fdc9 	bl	8011052 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	4618      	mov	r0, r3
 80104c4:	370c      	adds	r7, #12
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd90      	pop	{r4, r7, pc}

080104ca <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80104ca:	b580      	push	{r7, lr}
 80104cc:	b082      	sub	sp, #8
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
 80104d2:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6839      	ldr	r1, [r7, #0]
 80104d8:	4618      	mov	r0, r3
 80104da:	f000 fdc9 	bl	8011070 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f000 fdef 	bl	80110c4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 80104e6:	bf00      	nop
  }
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4618      	mov	r0, r3
 80104ec:	3708      	adds	r7, #8
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}

080104f2 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T value() const { return m_value; }
 80104f2:	b480      	push	{r7}
 80104f4:	b083      	sub	sp, #12
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	4618      	mov	r0, r3
 8010500:	370c      	adds	r7, #12
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr

0801050a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801050a:	b5b0      	push	{r4, r5, r7, lr}
 801050c:	b086      	sub	sp, #24
 801050e:	af00      	add	r7, sp, #0
 8010510:	60f8      	str	r0, [r7, #12]
 8010512:	60b9      	str	r1, [r7, #8]
 8010514:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	4618      	mov	r0, r3
 801051a:	f000 fddf 	bl	80110dc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 801051e:	4604      	mov	r4, r0
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	3304      	adds	r3, #4
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	68b9      	ldr	r1, [r7, #8]
 8010528:	4618      	mov	r0, r3
 801052a:	f000 fde2 	bl	80110f2 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 801052e:	4605      	mov	r5, r0
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	3308      	adds	r3, #8
 8010534:	687a      	ldr	r2, [r7, #4]
 8010536:	68b9      	ldr	r1, [r7, #8]
 8010538:	4618      	mov	r0, r3
 801053a:	f000 fdf2 	bl	8011122 <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>
 801053e:	eef0 7a40 	vmov.f32	s15, s0
 8010542:	edc7 7a05 	vstr	s15, [r7, #20]
 8010546:	f107 0314 	add.w	r3, r7, #20
 801054a:	461a      	mov	r2, r3
 801054c:	4629      	mov	r1, r5
 801054e:	4620      	mov	r0, r4
 8010550:	f7fe fe76 	bl	800f240 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8010554:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010558:	eeb0 0a67 	vmov.f32	s0, s15
 801055c:	3718      	adds	r7, #24
 801055e:	46bd      	mov	sp, r7
 8010560:	bdb0      	pop	{r4, r5, r7, pc}

08010562 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010562:	b480      	push	{r7}
 8010564:	b083      	sub	sp, #12
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4618      	mov	r0, r3
 801056e:	370c      	adds	r7, #12
 8010570:	46bd      	mov	sp, r7
 8010572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010576:	4770      	bx	lr

08010578 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010578:	b480      	push	{r7}
 801057a:	b083      	sub	sp, #12
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	4618      	mov	r0, r3
 8010584:	370c      	adds	r7, #12
 8010586:	46bd      	mov	sp, r7
 8010588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058c:	4770      	bx	lr

0801058e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801058e:	b580      	push	{r7, lr}
 8010590:	b082      	sub	sp, #8
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
 8010596:	6039      	str	r1, [r7, #0]
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6839      	ldr	r1, [r7, #0]
 801059c:	4618      	mov	r0, r3
 801059e:	f000 fdd4 	bl	801114a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	4618      	mov	r0, r3
 80105a6:	3708      	adds	r7, #8
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80105ac:	b590      	push	{r4, r7, lr}
 80105ae:	b083      	sub	sp, #12
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 fdf2 	bl	80111a0 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	4618      	mov	r0, r3
 80105c0:	f000 f81e 	bl	8010600 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 80105c4:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	601a      	str	r2, [r3, #0]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	1d1c      	adds	r4, r3, #4
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	4618      	mov	r0, r3
 80105d2:	f000 fdc9 	bl	8011168 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 80105d6:	4603      	mov	r3, r0
 80105d8:	4619      	mov	r1, r3
 80105da:	4620      	mov	r0, r4
 80105dc:	f7f6 fa04 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	1d5c      	adds	r4, r3, #5
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	4618      	mov	r0, r3
 80105e8:	f000 fdcc 	bl	8011184 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 80105ec:	4603      	mov	r3, r0
 80105ee:	4619      	mov	r1, r3
 80105f0:	4620      	mov	r0, r4
 80105f2:	f7f6 f9df 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	4618      	mov	r0, r3
 80105fa:	370c      	adds	r7, #12
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd90      	pop	{r4, r7, pc}

08010600 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8010600:	b480      	push	{r7}
 8010602:	b083      	sub	sp, #12
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	4618      	mov	r0, r3
 801060e:	370c      	adds	r7, #12
 8010610:	46bd      	mov	sp, r7
 8010612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010616:	4770      	bx	lr

08010618 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8010620:	f7f6 fa07 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8010624:	4603      	mov	r3, r0
  }
 8010626:	4618      	mov	r0, r3
 8010628:	3708      	adds	r7, #8
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}

0801062e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 801062e:	b580      	push	{r7, lr}
 8010630:	b082      	sub	sp, #8
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8010636:	f7f6 fa04 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801063a:	4603      	mov	r3, r0
  }
 801063c:	4618      	mov	r0, r3
 801063e:	3708      	adds	r7, #8
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	f000 fdb2 	bl	80111b6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	4618      	mov	r0, r3
 8010656:	3708      	adds	r7, #8
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>:
class dense_product_base
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f7ff ffed 	bl	8010644 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	4618      	mov	r0, r3
 801066e:	3708      	adds	r7, #8
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}

08010674 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8010674:	b580      	push	{r7, lr}
 8010676:	b082      	sub	sp, #8
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f7ff ffed 	bl	801065c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	4618      	mov	r0, r3
 8010686:	3708      	adds	r7, #8
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}

0801068c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 801068c:	b590      	push	{r4, r7, lr}
 801068e:	b085      	sub	sp, #20
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	607a      	str	r2, [r7, #4]
 8010698:	68f8      	ldr	r0, [r7, #12]
 801069a:	f7ff ffeb 	bl	8010674 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	68ba      	ldr	r2, [r7, #8]
 80106a2:	601a      	str	r2, [r3, #0]
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7f4 fbeb 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80106b2:	4604      	mov	r4, r0
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7f4 fbf1 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80106bc:	4603      	mov	r3, r0
 80106be:	429c      	cmp	r4, r3
 80106c0:	d005      	beq.n	80106ce <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x42>
 80106c2:	4b06      	ldr	r3, [pc, #24]	; (80106dc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x50>)
 80106c4:	4a06      	ldr	r2, [pc, #24]	; (80106e0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x54>)
 80106c6:	2160      	movs	r1, #96	; 0x60
 80106c8:	4806      	ldr	r0, [pc, #24]	; (80106e4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x58>)
 80106ca:	f00d fadf 	bl	801dc8c <__assert_func>
 80106ce:	bf00      	nop
    }
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	4618      	mov	r0, r3
 80106d4:	3714      	adds	r7, #20
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd90      	pop	{r4, r7, pc}
 80106da:	bf00      	nop
 80106dc:	0801fdb4 	.word	0x0801fdb4
 80106e0:	08027a60 	.word	0x08027a60
 80106e4:	08020104 	.word	0x08020104

080106e8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b084      	sub	sp, #16
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	60b9      	str	r1, [r7, #8]
 80106f2:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80106f4:	68b9      	ldr	r1, [r7, #8]
 80106f6:	68f8      	ldr	r0, [r7, #12]
 80106f8:	f000 fd68 	bl	80111cc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	68b9      	ldr	r1, [r7, #8]
 8010700:	68f8      	ldr	r0, [r7, #12]
 8010702:	f000 fda6 	bl	8011252 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8010706:	bf00      	nop
 8010708:	3710      	adds	r7, #16
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}

0801070e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 801070e:	b580      	push	{r7, lr}
 8010710:	b082      	sub	sp, #8
 8010712:	af00      	add	r7, sp, #0
 8010714:	6078      	str	r0, [r7, #4]
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f7f5 f8d2 	bl	80058c0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 801071c:	4603      	mov	r3, r0
 801071e:	4618      	mov	r0, r3
 8010720:	f7fd fadc 	bl	800dcdc <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010724:	4603      	mov	r3, r0
 8010726:	4618      	mov	r0, r3
 8010728:	f7f7 fcf2 	bl	8008110 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 801072c:	4603      	mov	r3, r0
 801072e:	4618      	mov	r0, r3
 8010730:	3708      	adds	r7, #8
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}

08010736 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 8010736:	b580      	push	{r7, lr}
 8010738:	b082      	sub	sp, #8
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f7f5 f8be 	bl	80058c0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010744:	4603      	mov	r3, r0
 8010746:	4618      	mov	r0, r3
 8010748:	f7fd fac8 	bl	800dcdc <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 801074c:	4603      	mov	r3, r0
 801074e:	4618      	mov	r0, r3
 8010750:	f7fd f968 	bl	800da24 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8010754:	4603      	mov	r3, r0
 8010756:	4618      	mov	r0, r3
 8010758:	3708      	adds	r7, #8
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}

0801075e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 801075e:	b580      	push	{r7, lr}
 8010760:	b082      	sub	sp, #8
 8010762:	af00      	add	r7, sp, #0
 8010764:	6078      	str	r0, [r7, #4]
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f7f5 f8aa 	bl	80058c0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 801076c:	4603      	mov	r3, r0
 801076e:	4618      	mov	r0, r3
 8010770:	f7fd fab4 	bl	800dcdc <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010774:	4603      	mov	r3, r0
 8010776:	4618      	mov	r0, r3
 8010778:	f7f7 ff04 	bl	8008584 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 801077c:	4603      	mov	r3, r0
 801077e:	4618      	mov	r0, r3
 8010780:	3708      	adds	r7, #8
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}

08010786 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
 8010786:	b580      	push	{r7, lr}
 8010788:	b082      	sub	sp, #8
 801078a:	af00      	add	r7, sp, #0
 801078c:	6078      	str	r0, [r7, #4]
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f000 fd97 	bl	80112c2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4618      	mov	r0, r3
 8010798:	3708      	adds	r7, #8
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
	...

080107a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b084      	sub	sp, #16
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	60f8      	str	r0, [r7, #12]
 80107a8:	60b9      	str	r1, [r7, #8]
 80107aa:	607a      	str	r2, [r7, #4]
 80107ac:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 80107ae:	68f8      	ldr	r0, [r7, #12]
 80107b0:	f7ff ffe9 	bl	8010786 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	68ba      	ldr	r2, [r7, #8]
 80107b8:	601a      	str	r2, [r3, #0]
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	3304      	adds	r3, #4
 80107be:	6879      	ldr	r1, [r7, #4]
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7f6 f8f7 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	3305      	adds	r3, #5
 80107ca:	6839      	ldr	r1, [r7, #0]
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7f6 f90b 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d011      	beq.n	80107fc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	db08      	blt.n	80107f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2b03      	cmp	r3, #3
 80107e2:	d105      	bne.n	80107f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	db02      	blt.n	80107f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	d005      	beq.n	80107fc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80107f0:	4b07      	ldr	r3, [pc, #28]	; (8010810 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 80107f2:	4a08      	ldr	r2, [pc, #32]	; (8010814 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 80107f4:	21b0      	movs	r1, #176	; 0xb0
 80107f6:	4808      	ldr	r0, [pc, #32]	; (8010818 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 80107f8:	f00d fa48 	bl	801dc8c <__assert_func>
      checkSanity<Derived>();
 80107fc:	2100      	movs	r1, #0
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	f000 fd6a 	bl	80112d8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	4618      	mov	r0, r3
 8010808:	3710      	adds	r7, #16
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	08026218 	.word	0x08026218
 8010814:	08027b88 	.word	0x08027b88
 8010818:	080263c8 	.word	0x080263c8

0801081c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>:
    void init()
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 8010828:	4618      	mov	r0, r3
 801082a:	f7ff ff84 	bl	8010736 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 801082e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	615a      	str	r2, [r3, #20]
    }
 8010834:	bf00      	nop
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801083c:	b580      	push	{r7, lr}
 801083e:	b082      	sub	sp, #8
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f000 fd51 	bl	80112ee <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6839      	ldr	r1, [r7, #0]
 8010850:	4618      	mov	r0, r3
 8010852:	f000 fd57 	bl	8011304 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	4618      	mov	r0, r3
 801085a:	3708      	adds	r7, #8
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801086a:	2200      	movs	r2, #0
 801086c:	2100      	movs	r1, #0
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f000 fd70 	bl	8011354 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8010874:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010878:	eeb0 0a67 	vmov.f32	s0, s15
 801087c:	3708      	adds	r7, #8
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}

08010882 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8010882:	b580      	push	{r7, lr}
 8010884:	b084      	sub	sp, #16
 8010886:	af00      	add	r7, sp, #0
 8010888:	6078      	str	r0, [r7, #4]
 801088a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801088c:	6839      	ldr	r1, [r7, #0]
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f000 fd73 	bl	801137a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 8010894:	eef0 7a40 	vmov.f32	s15, s0
 8010898:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 801089c:	6839      	ldr	r1, [r7, #0]
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f000 fd7c 	bl	801139c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 80108a4:	eef0 7a40 	vmov.f32	s15, s0
 80108a8:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80108ac:	f107 020c 	add.w	r2, r7, #12
 80108b0:	f107 0308 	add.w	r3, r7, #8
 80108b4:	4619      	mov	r1, r3
 80108b6:	6838      	ldr	r0, [r7, #0]
 80108b8:	f7f8 fc81 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80108bc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80108c0:	eeb0 0a67 	vmov.f32	s0, s15
 80108c4:	3710      	adds	r7, #16
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}

080108ca <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80108ca:	b580      	push	{r7, lr}
 80108cc:	b082      	sub	sp, #8
 80108ce:	af00      	add	r7, sp, #0
 80108d0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80108d2:	2202      	movs	r2, #2
 80108d4:	2102      	movs	r1, #2
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f7fc f8c3 	bl	800ca62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f000 fd6e 	bl	80113be <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>
  }
 80108e2:	bf00      	nop
 80108e4:	3708      	adds	r7, #8
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}

080108ea <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80108ea:	b480      	push	{r7}
 80108ec:	b083      	sub	sp, #12
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6078      	str	r0, [r7, #4]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	4618      	mov	r0, r3
 80108f8:	370c      	adds	r7, #12
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr

08010902 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8010902:	b480      	push	{r7}
 8010904:	b083      	sub	sp, #12
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	3304      	adds	r3, #4
 801090e:	4618      	mov	r0, r3
 8010910:	370c      	adds	r7, #12
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr

0801091a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801091a:	b480      	push	{r7}
 801091c:	b083      	sub	sp, #12
 801091e:	af00      	add	r7, sp, #0
 8010920:	6078      	str	r0, [r7, #4]
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4618      	mov	r0, r3
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr

08010930 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6839      	ldr	r1, [r7, #0]
 801093e:	4618      	mov	r0, r3
 8010940:	f000 fd47 	bl	80113d2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	4618      	mov	r0, r3
 8010948:	3708      	adds	r7, #8
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}

0801094e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 801094e:	b5b0      	push	{r4, r5, r7, lr}
 8010950:	b084      	sub	sp, #16
 8010952:	af00      	add	r7, sp, #0
 8010954:	6078      	str	r0, [r7, #4]
 8010956:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	689c      	ldr	r4, [r3, #8]
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	6839      	ldr	r1, [r7, #0]
 8010962:	4618      	mov	r0, r3
 8010964:	f7f7 fe81 	bl	800866a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8010968:	4605      	mov	r5, r0
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	6839      	ldr	r1, [r7, #0]
 8010970:	4618      	mov	r0, r3
 8010972:	f000 fd44 	bl	80113fe <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>
 8010976:	eef0 7a40 	vmov.f32	s15, s0
 801097a:	edc7 7a03 	vstr	s15, [r7, #12]
 801097e:	f107 030c 	add.w	r3, r7, #12
 8010982:	461a      	mov	r2, r3
 8010984:	4629      	mov	r1, r5
 8010986:	4620      	mov	r0, r4
 8010988:	f7f7 fe28 	bl	80085dc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 801098c:	bf00      	nop
 801098e:	3710      	adds	r7, #16
 8010990:	46bd      	mov	sp, r7
 8010992:	bdb0      	pop	{r4, r5, r7, pc}

08010994 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801099c:	2101      	movs	r1, #1
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f7ff ffd5 	bl	801094e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f000 fd63 	bl	8011470 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>
  }
 80109aa:	bf00      	nop
 80109ac:	3708      	adds	r7, #8
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}

080109b2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80109b2:	b580      	push	{r7, lr}
 80109b4:	b082      	sub	sp, #8
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6078      	str	r0, [r7, #4]
 80109ba:	6039      	str	r1, [r7, #0]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6839      	ldr	r1, [r7, #0]
 80109c0:	4618      	mov	r0, r3
 80109c2:	f000 fd64 	bl	801148e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	4618      	mov	r0, r3
 80109ca:	3708      	adds	r7, #8
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	4618      	mov	r0, r3
 80109dc:	370c      	adds	r7, #12
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr
	...

080109e8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b086      	sub	sp, #24
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80109f4:	68b8      	ldr	r0, [r7, #8]
 80109f6:	f7f5 faa4 	bl	8005f42 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80109fa:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80109fc:	68b8      	ldr	r0, [r7, #8]
 80109fe:	f7f5 faad 	bl	8005f5c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010a02:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7f5 fa39 	bl	8005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010a0c:	4602      	mov	r2, r0
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d107      	bne.n	8010a24 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7f5 fa3c 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010a1c:	4602      	mov	r2, r0
 8010a1e:	693b      	ldr	r3, [r7, #16]
 8010a20:	4293      	cmp	r3, r2
 8010a22:	d001      	beq.n	8010a28 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8010a24:	2301      	movs	r3, #1
 8010a26:	e000      	b.n	8010a2a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8010a28:	2300      	movs	r3, #0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d005      	beq.n	8010a3a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	693a      	ldr	r2, [r7, #16]
 8010a32:	6979      	ldr	r1, [r7, #20]
 8010a34:	4618      	mov	r0, r3
 8010a36:	f7fc fd73 	bl	800d520 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7f5 fa1e 	bl	8005e7e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010a42:	4602      	mov	r2, r0
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d107      	bne.n	8010a5a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7f5 fa21 	bl	8005e94 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010a52:	4602      	mov	r2, r0
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	4293      	cmp	r3, r2
 8010a58:	d006      	beq.n	8010a68 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8010a5a:	4b05      	ldr	r3, [pc, #20]	; (8010a70 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8010a5c:	4a05      	ldr	r2, [pc, #20]	; (8010a74 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8010a5e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8010a62:	4805      	ldr	r0, [pc, #20]	; (8010a78 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8010a64:	f00d f912 	bl	801dc8c <__assert_func>
}
 8010a68:	bf00      	nop
 8010a6a:	3718      	adds	r7, #24
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	0802216c 	.word	0x0802216c
 8010a74:	08027ca0 	.word	0x08027ca0
 8010a78:	08022280 	.word	0x08022280

08010a7c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010a7c:	b480      	push	{r7}
 8010a7e:	b085      	sub	sp, #20
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	60f8      	str	r0, [r7, #12]
 8010a84:	60b9      	str	r1, [r7, #8]
 8010a86:	607a      	str	r2, [r7, #4]
 8010a88:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	68ba      	ldr	r2, [r7, #8]
 8010a8e:	601a      	str	r2, [r3, #0]
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	687a      	ldr	r2, [r7, #4]
 8010a94:	605a      	str	r2, [r3, #4]
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	683a      	ldr	r2, [r7, #0]
 8010a9a:	609a      	str	r2, [r3, #8]
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	69ba      	ldr	r2, [r7, #24]
 8010aa0:	60da      	str	r2, [r3, #12]
  }
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3714      	adds	r7, #20
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr

08010ab0 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f000 fcfa 	bl	80114b2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>
  }
 8010abe:	bf00      	nop
 8010ac0:	3708      	adds	r7, #8
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}

08010ac6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010ac6:	b480      	push	{r7}
 8010ac8:	b083      	sub	sp, #12
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	370c      	adds	r7, #12
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ada:	4770      	bx	lr

08010adc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010adc:	b480      	push	{r7}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	370c      	adds	r7, #12
 8010aea:	46bd      	mov	sp, r7
 8010aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af0:	4770      	bx	lr

08010af2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b082      	sub	sp, #8
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	6078      	str	r0, [r7, #4]
 8010afa:	6039      	str	r1, [r7, #0]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6839      	ldr	r1, [r7, #0]
 8010b00:	4618      	mov	r0, r3
 8010b02:	f000 fce5 	bl	80114d0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3708      	adds	r7, #8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8010b10:	b590      	push	{r4, r7, lr}
 8010b12:	b083      	sub	sp, #12
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f000 fd03 	bl	8011526 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	4618      	mov	r0, r3
 8010b24:	f000 f81e 	bl	8010b64 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 8010b28:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	601a      	str	r2, [r3, #0]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	1d1c      	adds	r4, r3, #4
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	4618      	mov	r0, r3
 8010b36:	f000 fcda 	bl	80114ee <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	4620      	mov	r0, r4
 8010b40:	f7f5 ff52 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	1d5c      	adds	r4, r3, #5
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f000 fcdd 	bl	801150a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>
 8010b50:	4603      	mov	r3, r0
 8010b52:	4619      	mov	r1, r3
 8010b54:	4620      	mov	r0, r4
 8010b56:	f7f5 ff47 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	370c      	adds	r7, #12
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd90      	pop	{r4, r7, pc}

08010b64 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4618      	mov	r0, r3
 8010b72:	370c      	adds	r7, #12
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr

08010b7c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010b84:	2100      	movs	r1, #0
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f000 fcd8 	bl	801153c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f000 fcf3 	bl	8011578 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>
  }
 8010b92:	bf00      	nop
 8010b94:	3708      	adds	r7, #8
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}

08010b9a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8010b9a:	b580      	push	{r7, lr}
 8010b9c:	b082      	sub	sp, #8
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f000 fcf2 	bl	801158c <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	4618      	mov	r0, r3
 8010bac:	3708      	adds	r7, #8
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}

08010bb2 <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b082      	sub	sp, #8
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f7ff ffed 	bl	8010b9a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3708      	adds	r7, #8
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}

08010bca <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8010bca:	b580      	push	{r7, lr}
 8010bcc:	b082      	sub	sp, #8
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	6078      	str	r0, [r7, #4]
 8010bd2:	6039      	str	r1, [r7, #0]
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f7ff ffec 	bl	8010bb2 <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	683a      	ldr	r2, [r7, #0]
 8010bde:	601a      	str	r2, [r3, #0]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	4618      	mov	r0, r3
 8010be4:	3708      	adds	r7, #8
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}

08010bea <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8010bea:	b480      	push	{r7}
 8010bec:	b083      	sub	sp, #12
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	370c      	adds	r7, #12
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr

08010c00 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f000 fcca 	bl	80115a2 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	4618      	mov	r0, r3
 8010c12:	3708      	adds	r7, #8
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f7ff ffed 	bl	8010c00 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3708      	adds	r7, #8
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}

08010c30 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b082      	sub	sp, #8
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7f4 fae5 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010c42:	4603      	mov	r3, r0
 8010c44:	4618      	mov	r0, r3
 8010c46:	3708      	adds	r7, #8
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f7f4 fae2 	bl	8005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	4618      	mov	r0, r3
 8010c62:	3708      	adds	r7, #8
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8010c68:	b590      	push	{r4, r7, lr}
 8010c6a:	b085      	sub	sp, #20
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60f8      	str	r0, [r7, #12]
 8010c70:	60b9      	str	r1, [r7, #8]
 8010c72:	607a      	str	r2, [r7, #4]
 8010c74:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8010c76:	68f8      	ldr	r0, [r7, #12]
 8010c78:	f7ff ffce 	bl	8010c18 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	68ba      	ldr	r2, [r7, #8]
 8010c80:	6812      	ldr	r2, [r2, #0]
 8010c82:	601a      	str	r2, [r3, #0]
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	687a      	ldr	r2, [r7, #4]
 8010c88:	605a      	str	r2, [r3, #4]
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	3308      	adds	r3, #8
 8010c8e:	6839      	ldr	r1, [r7, #0]
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7f4 fc2f 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8010c96:	68b8      	ldr	r0, [r7, #8]
 8010c98:	f7ff ffca 	bl	8010c30 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010c9c:	4604      	mov	r4, r0
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7f4 f9a2 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	429c      	cmp	r4, r3
 8010caa:	d10a      	bne.n	8010cc2 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x5a>
 8010cac:	68b8      	ldr	r0, [r7, #8]
 8010cae:	f7ff ffcd 	bl	8010c4c <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7f4 f98c 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	429c      	cmp	r4, r3
 8010cc0:	d005      	beq.n	8010cce <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x66>
 8010cc2:	4b05      	ldr	r3, [pc, #20]	; (8010cd8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x70>)
 8010cc4:	4a05      	ldr	r2, [pc, #20]	; (8010cdc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x74>)
 8010cc6:	2174      	movs	r1, #116	; 0x74
 8010cc8:	4805      	ldr	r0, [pc, #20]	; (8010ce0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x78>)
 8010cca:	f00c ffdf 	bl	801dc8c <__assert_func>
    }
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3714      	adds	r7, #20
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd90      	pop	{r4, r7, pc}
 8010cd8:	0801faf4 	.word	0x0801faf4
 8010cdc:	08027e64 	.word	0x08027e64
 8010ce0:	0801fd58 	.word	0x0801fd58

08010ce4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f000 f809 	bl	8010d04 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f000 fc5f 	bl	80115b8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3708      	adds	r7, #8
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8010d04:	b480      	push	{r7}
 8010d06:	b083      	sub	sp, #12
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	4618      	mov	r0, r3
 8010d10:	370c      	adds	r7, #12
 8010d12:	46bd      	mov	sp, r7
 8010d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d18:	4770      	bx	lr

08010d1a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8010d1a:	b580      	push	{r7, lr}
 8010d1c:	b082      	sub	sp, #8
 8010d1e:	af00      	add	r7, sp, #0
 8010d20:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7ff ff83 	bl	8010c30 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010d2a:	4603      	mov	r3, r0
    }
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3708      	adds	r7, #8
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<const T>
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7fe f968 	bl	800f014 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	4618      	mov	r0, r3
 8010d48:	3708      	adds	r7, #8
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}

08010d4e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8010d4e:	b580      	push	{r7, lr}
 8010d50:	b082      	sub	sp, #8
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6078      	str	r0, [r7, #4]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7ff ffeb 	bl	8010d34 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f000 fc51 	bl	8011606 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	4618      	mov	r0, r3
 8010d68:	3708      	adds	r7, #8
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}

08010d6e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8010d6e:	b580      	push	{r7, lr}
 8010d70:	b082      	sub	sp, #8
 8010d72:	af00      	add	r7, sp, #0
 8010d74:	6078      	str	r0, [r7, #4]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7ff ffe8 	bl	8010d4e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	4618      	mov	r0, r3
 8010d82:	3708      	adds	r7, #8
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}

08010d88 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<const T>
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7ff ffeb 	bl	8010d6e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3708      	adds	r7, #8
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}

08010da2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 8010da2:	b580      	push	{r7, lr}
 8010da4:	b082      	sub	sp, #8
 8010da6:	af00      	add	r7, sp, #0
 8010da8:	6078      	str	r0, [r7, #4]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	3308      	adds	r3, #8
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7f8 f824 	bl	8008dfc <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	3304      	adds	r3, #4
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7ff ffe5 	bl	8010d88 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3708      	adds	r7, #8
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}

08010dc8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b082      	sub	sp, #8
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7ff ffe5 	bl	8010da2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f000 fc09 	bl	80115f0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	4618      	mov	r0, r3
 8010de2:	3708      	adds	r7, #8
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7ff ffe8 	bl	8010dc8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3708      	adds	r7, #8
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}

08010e02 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8010e02:	b580      	push	{r7, lr}
 8010e04:	b082      	sub	sp, #8
 8010e06:	af00      	add	r7, sp, #0
 8010e08:	6078      	str	r0, [r7, #4]
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7ff ffeb 	bl	8010de8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	4618      	mov	r0, r3
 8010e16:	3708      	adds	r7, #8
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}

08010e1c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	ed2d 8b02 	vpush	{d8}
 8010e22:	b086      	sub	sp, #24
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f7ff fa4b 	bl	80102c6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>
 8010e30:	4603      	mov	r3, r0
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	dd05      	ble.n	8010e42 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f7ff ff54 	bl	8010ce4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	dc06      	bgt.n	8010e50 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8010e42:	4b16      	ldr	r3, [pc, #88]	; (8010e9c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8010e44:	4a16      	ldr	r2, [pc, #88]	; (8010ea0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8010e46:	f240 119b 	movw	r1, #411	; 0x19b
 8010e4a:	4816      	ldr	r0, [pc, #88]	; (8010ea4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8010e4c:	f00c ff1e 	bl	801dc8c <__assert_func>
 8010e50:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f7ff ff56 	bl	8010d04 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	f107 030c 	add.w	r3, r7, #12
 8010e5e:	4611      	mov	r1, r2
 8010e60:	4618      	mov	r0, r3
 8010e62:	f000 fbb6 	bl	80115d2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f7ff ff4c 	bl	8010d04 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	f107 030c 	add.w	r3, r7, #12
 8010e72:	6839      	ldr	r1, [r7, #0]
 8010e74:	4618      	mov	r0, r3
 8010e76:	f000 fbd1 	bl	801161c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>
 8010e7a:	eeb0 8a40 	vmov.f32	s16, s0
 8010e7e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8010e80:	f107 030c 	add.w	r3, r7, #12
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7ff ffbc 	bl	8010e02 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8010e8a:	eef0 7a48 	vmov.f32	s15, s16
}
 8010e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8010e92:	3718      	adds	r7, #24
 8010e94:	46bd      	mov	sp, r7
 8010e96:	ecbd 8b02 	vpop	{d8}
 8010e9a:	bd80      	pop	{r7, pc}
 8010e9c:	08024b74 	.word	0x08024b74
 8010ea0:	0802802c 	.word	0x0802802c
 8010ea4:	08024d80 	.word	0x08024d80

08010ea8 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>:
    static void run(const Derived&, const OtherDerived&)
 8010ea8:	b480      	push	{r7}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	6039      	str	r1, [r7, #0]
    }
 8010eb2:	bf00      	nop
 8010eb4:	370c      	adds	r7, #12
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr

08010ebe <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010ebe:	b580      	push	{r7, lr}
 8010ec0:	b082      	sub	sp, #8
 8010ec2:	af00      	add	r7, sp, #0
 8010ec4:	6078      	str	r0, [r7, #4]
 8010ec6:	6039      	str	r1, [r7, #0]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6839      	ldr	r1, [r7, #0]
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f000 fbb6 	bl	801163e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3708      	adds	r7, #8
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010edc:	b480      	push	{r7}
 8010ede:	b083      	sub	sp, #12
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	370c      	adds	r7, #12
 8010eea:	46bd      	mov	sp, r7
 8010eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef0:	4770      	bx	lr

08010ef2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8010ef2:	b580      	push	{r7, lr}
 8010ef4:	b082      	sub	sp, #8
 8010ef6:	af00      	add	r7, sp, #0
 8010ef8:	6078      	str	r0, [r7, #4]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7f4 f873 	bl	8004fea <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8010f04:	4603      	mov	r3, r0
 8010f06:	4618      	mov	r0, r3
 8010f08:	3708      	adds	r7, #8
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}

08010f0e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8010f0e:	b580      	push	{r7, lr}
 8010f10:	b082      	sub	sp, #8
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	6078      	str	r0, [r7, #4]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7f4 f976 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010f20:	4603      	mov	r3, r0
 8010f22:	4618      	mov	r0, r3
 8010f24:	3708      	adds	r7, #8
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
	...

08010f2c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 8010f2c:	b590      	push	{r4, r7, lr}
 8010f2e:	b085      	sub	sp, #20
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f7f3 ffaf 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010f40:	4604      	mov	r4, r0
 8010f42:	68b8      	ldr	r0, [r7, #8]
 8010f44:	f7ff ffd5 	bl	8010ef2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	429c      	cmp	r4, r3
 8010f4c:	d10a      	bne.n	8010f64 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7f3 ff99 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010f56:	4604      	mov	r4, r0
 8010f58:	68b8      	ldr	r0, [r7, #8]
 8010f5a:	f7ff ffd8 	bl	8010f0e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	429c      	cmp	r4, r3
 8010f62:	d006      	beq.n	8010f72 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 8010f64:	4b05      	ldr	r3, [pc, #20]	; (8010f7c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 8010f66:	4a06      	ldr	r2, [pc, #24]	; (8010f80 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 8010f68:	f240 21f2 	movw	r1, #754	; 0x2f2
 8010f6c:	4805      	ldr	r0, [pc, #20]	; (8010f84 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 8010f6e:	f00c fe8d 	bl	801dc8c <__assert_func>
}
 8010f72:	bf00      	nop
 8010f74:	3714      	adds	r7, #20
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd90      	pop	{r4, r7, pc}
 8010f7a:	bf00      	nop
 8010f7c:	08022888 	.word	0x08022888
 8010f80:	080281b0 	.word	0x080281b0
 8010f84:	08022280 	.word	0x08022280

08010f88 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010f88:	b480      	push	{r7}
 8010f8a:	b085      	sub	sp, #20
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	607a      	str	r2, [r7, #4]
 8010f94:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	68ba      	ldr	r2, [r7, #8]
 8010f9a:	601a      	str	r2, [r3, #0]
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	687a      	ldr	r2, [r7, #4]
 8010fa0:	605a      	str	r2, [r3, #4]
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	683a      	ldr	r2, [r7, #0]
 8010fa6:	609a      	str	r2, [r3, #8]
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	69ba      	ldr	r2, [r7, #24]
 8010fac:	60da      	str	r2, [r3, #12]
  }
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3714      	adds	r7, #20
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fba:	4770      	bx	lr

08010fbc <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f000 fb6f 	bl	80116a8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>
  }
 8010fca:	bf00      	nop
 8010fcc:	3708      	adds	r7, #8
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}

08010fd2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8010fd2:	b580      	push	{r7, lr}
 8010fd4:	b082      	sub	sp, #8
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	6078      	str	r0, [r7, #4]
 8010fda:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6839      	ldr	r1, [r7, #0]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f000 fb71 	bl	80116c8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f000 fb97 	bl	801171c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 8010fee:	bf00      	nop
  }
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	3708      	adds	r7, #8
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}

08010ffa <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010ffa:	b580      	push	{r7, lr}
 8010ffc:	b082      	sub	sp, #8
 8010ffe:	af00      	add	r7, sp, #0
 8011000:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8011002:	f7f5 fd16 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8011006:	4603      	mov	r3, r0
  }
 8011008:	4618      	mov	r0, r3
 801100a:	3708      	adds	r7, #8
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}

08011010 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8011018:	f7f5 fd13 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801101c:	4603      	mov	r3, r0
  }
 801101e:	4618      	mov	r0, r3
 8011020:	3708      	adds	r7, #8
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}

08011026 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8011026:	b480      	push	{r7}
 8011028:	b083      	sub	sp, #12
 801102a:	af00      	add	r7, sp, #0
 801102c:	6078      	str	r0, [r7, #4]
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	4618      	mov	r0, r3
 8011032:	370c      	adds	r7, #12
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr

0801103c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801103c:	b480      	push	{r7}
 801103e:	b083      	sub	sp, #12
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	4618      	mov	r0, r3
 8011048:	370c      	adds	r7, #12
 801104a:	46bd      	mov	sp, r7
 801104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011050:	4770      	bx	lr

08011052 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011052:	b580      	push	{r7, lr}
 8011054:	b082      	sub	sp, #8
 8011056:	af00      	add	r7, sp, #0
 8011058:	6078      	str	r0, [r7, #4]
 801105a:	6039      	str	r1, [r7, #0]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6839      	ldr	r1, [r7, #0]
 8011060:	4618      	mov	r0, r3
 8011062:	f000 fb67 	bl	8011734 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	4618      	mov	r0, r3
 801106a:	3708      	adds	r7, #8
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8011070:	b590      	push	{r4, r7, lr}
 8011072:	b083      	sub	sp, #12
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f000 fb85 	bl	801178a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	4618      	mov	r0, r3
 8011084:	f000 f81e 	bl	80110c4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 8011088:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	601a      	str	r2, [r3, #0]
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	1d1c      	adds	r4, r3, #4
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	4618      	mov	r0, r3
 8011096:	f000 fb5c 	bl	8011752 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>
 801109a:	4603      	mov	r3, r0
 801109c:	4619      	mov	r1, r3
 801109e:	4620      	mov	r0, r4
 80110a0:	f7f5 fca2 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	1d5c      	adds	r4, r3, #5
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	4618      	mov	r0, r3
 80110ac:	f000 fb5f 	bl	801176e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>
 80110b0:	4603      	mov	r3, r0
 80110b2:	4619      	mov	r1, r3
 80110b4:	4620      	mov	r0, r4
 80110b6:	f7f5 fc7d 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	4618      	mov	r0, r3
 80110be:	370c      	adds	r7, #12
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd90      	pop	{r4, r7, pc}

080110c4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>:
 80110c4:	b480      	push	{r7}
 80110c6:	b083      	sub	sp, #12
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	4618      	mov	r0, r3
 80110d2:	370c      	adds	r7, #12
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr

080110dc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80110dc:	b480      	push	{r7}
 80110de:	b083      	sub	sp, #12
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	4618      	mov	r0, r3
 80110e8:	370c      	adds	r7, #12
 80110ea:	46bd      	mov	sp, r7
 80110ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f0:	4770      	bx	lr

080110f2 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80110f2:	b590      	push	{r4, r7, lr}
 80110f4:	b085      	sub	sp, #20
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	60f8      	str	r0, [r7, #12]
 80110fa:	60b9      	str	r1, [r7, #8]
 80110fc:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	681c      	ldr	r4, [r3, #0]
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	4618      	mov	r0, r3
 8011106:	f7f5 feef 	bl	8006ee8 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 801110a:	4602      	mov	r2, r0
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	fb03 f202 	mul.w	r2, r3, r2
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	4413      	add	r3, r2
 8011116:	009b      	lsls	r3, r3, #2
 8011118:	4423      	add	r3, r4
  }
 801111a:	4618      	mov	r0, r3
 801111c:	3714      	adds	r7, #20
 801111e:	46bd      	mov	sp, r7
 8011120:	bd90      	pop	{r4, r7, pc}

08011122 <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>:
  CoeffReturnType coeff(IndexType row, IndexType col) const
 8011122:	b580      	push	{r7, lr}
 8011124:	b084      	sub	sp, #16
 8011126:	af00      	add	r7, sp, #0
 8011128:	60f8      	str	r0, [r7, #12]
 801112a:	60b9      	str	r1, [r7, #8]
 801112c:	607a      	str	r2, [r7, #4]
    return m_wrapper(m_functor, row, col);
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	1d18      	adds	r0, r3, #4
 8011132:	68f9      	ldr	r1, [r7, #12]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	68ba      	ldr	r2, [r7, #8]
 8011138:	f000 fb32 	bl	80117a0 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>
 801113c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011140:	eeb0 0a67 	vmov.f32	s0, s15
 8011144:	3710      	adds	r7, #16
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}

0801114a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801114a:	b580      	push	{r7, lr}
 801114c:	b082      	sub	sp, #8
 801114e:	af00      	add	r7, sp, #0
 8011150:	6078      	str	r0, [r7, #4]
 8011152:	6039      	str	r1, [r7, #0]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6839      	ldr	r1, [r7, #0]
 8011158:	4618      	mov	r0, r3
 801115a:	f000 fb32 	bl	80117c2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>
  }
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4618      	mov	r0, r3
 8011162:	3708      	adds	r7, #8
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	689b      	ldr	r3, [r3, #8]
 8011174:	4618      	mov	r0, r3
 8011176:	f7fc fcca 	bl	800db0e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 801117a:	4603      	mov	r3, r0
    }
 801117c:	4618      	mov	r0, r3
 801117e:	3708      	adds	r7, #8
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011184:	b580      	push	{r7, lr}
 8011186:	b082      	sub	sp, #8
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	689b      	ldr	r3, [r3, #8]
 8011190:	4618      	mov	r0, r3
 8011192:	f7f6 f82d 	bl	80071f0 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 8011196:	4603      	mov	r3, r0
    }
 8011198:	4618      	mov	r0, r3
 801119a:	3708      	adds	r7, #8
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}

080111a0 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80111a0:	b480      	push	{r7}
 80111a2:	b083      	sub	sp, #12
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	4618      	mov	r0, r3
 80111ac:	370c      	adds	r7, #12
 80111ae:	46bd      	mov	sp, r7
 80111b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b4:	4770      	bx	lr

080111b6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80111b6:	b480      	push	{r7}
 80111b8:	b083      	sub	sp, #12
 80111ba:	af00      	add	r7, sp, #0
 80111bc:	6078      	str	r0, [r7, #4]
    }
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	4618      	mov	r0, r3
 80111c2:	370c      	adds	r7, #12
 80111c4:	46bd      	mov	sp, r7
 80111c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ca:	4770      	bx	lr

080111cc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b082      	sub	sp, #8
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	4618      	mov	r0, r3
 80111da:	f7f3 fe60 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80111de:	4603      	mov	r3, r0
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	dd08      	ble.n	80111f6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7f3 fe4e 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80111ec:	4603      	mov	r3, r0
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	dd01      	ble.n	80111f6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 80111f2:	2301      	movs	r3, #1
 80111f4:	e000      	b.n	80111f8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2c>
 80111f6:	2300      	movs	r3, #0
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d003      	beq.n	8011204 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80111fc:	6839      	ldr	r1, [r7, #0]
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 faf3 	bl	80117ea <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>
}
 8011204:	bf00      	nop
 8011206:	3708      	adds	r7, #8
 8011208:	46bd      	mov	sp, r7
 801120a:	bd80      	pop	{r7, pc}

0801120c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 801120c:	b580      	push	{r7, lr}
 801120e:	b082      	sub	sp, #8
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	330c      	adds	r3, #12
 8011218:	4618      	mov	r0, r3
 801121a:	f7f6 f8c8 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	3308      	adds	r3, #8
 8011222:	4618      	mov	r0, r3
 8011224:	f7f6 f8c3 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f000 faf8 	bl	801181e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	4618      	mov	r0, r3
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8011238:	b580      	push	{r7, lr}
 801123a:	b082      	sub	sp, #8
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	4618      	mov	r0, r3
 8011244:	f7ff ffe2 	bl	801120c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	4618      	mov	r0, r3
 801124c:	3708      	adds	r7, #8
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}

08011252 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8011252:	b580      	push	{r7, lr}
 8011254:	b090      	sub	sp, #64	; 0x40
 8011256:	af02      	add	r7, sp, #8
 8011258:	60f8      	str	r0, [r7, #12]
 801125a:	60b9      	str	r1, [r7, #8]
 801125c:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 801125e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011262:	68b9      	ldr	r1, [r7, #8]
 8011264:	4618      	mov	r0, r3
 8011266:	f000 facb 	bl	8011800 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>
  resize_if_allowed(dst, src, func);
 801126a:	687a      	ldr	r2, [r7, #4]
 801126c:	68b9      	ldr	r1, [r7, #8]
 801126e:	68f8      	ldr	r0, [r7, #12]
 8011270:	f000 fafc 	bl	801186c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8011274:	f107 0320 	add.w	r3, r7, #32
 8011278:	68f9      	ldr	r1, [r7, #12]
 801127a:	4618      	mov	r0, r3
 801127c:	f7f6 faa6 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8011280:	68f8      	ldr	r0, [r7, #12]
 8011282:	f7f6 fb0b 	bl	800789c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8011286:	4603      	mov	r3, r0
 8011288:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801128c:	f107 0120 	add.w	r1, r7, #32
 8011290:	f107 0010 	add.w	r0, r7, #16
 8011294:	9300      	str	r3, [sp, #0]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f000 fb32 	bl	8011900 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 801129c:	f107 0310 	add.w	r3, r7, #16
 80112a0:	4618      	mov	r0, r3
 80112a2:	f000 fb47 	bl	8011934 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>
  DstEvaluatorType dstEvaluator(dst);
 80112a6:	f107 0320 	add.w	r3, r7, #32
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7f6 f87f 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80112b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7ff ffbf 	bl	8011238 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
}
 80112ba:	bf00      	nop
 80112bc:	3738      	adds	r7, #56	; 0x38
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}

080112c2 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80112c2:	b480      	push	{r7}
 80112c4:	b083      	sub	sp, #12
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	6078      	str	r0, [r7, #4]
    }
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	4618      	mov	r0, r3
 80112ce:	370c      	adds	r7, #12
 80112d0:	46bd      	mov	sp, r7
 80112d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d6:	4770      	bx	lr

080112d8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 80112d8:	b480      	push	{r7}
 80112da:	b083      	sub	sp, #12
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6039      	str	r1, [r7, #0]
    {}
 80112e2:	bf00      	nop
 80112e4:	370c      	adds	r7, #12
 80112e6:	46bd      	mov	sp, r7
 80112e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ec:	4770      	bx	lr

080112ee <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 80112ee:	b480      	push	{r7}
 80112f0:	b083      	sub	sp, #12
 80112f2:	af00      	add	r7, sp, #0
 80112f4:	6078      	str	r0, [r7, #4]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	4618      	mov	r0, r3
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr

08011304 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8011304:	b590      	push	{r4, r7, lr}
 8011306:	b083      	sub	sp, #12
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	6039      	str	r1, [r7, #0]
 801130e:	687c      	ldr	r4, [r7, #4]
 8011310:	6838      	ldr	r0, [r7, #0]
 8011312:	f000 fb1a 	bl	801194a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>
 8011316:	4603      	mov	r3, r0
 8011318:	4619      	mov	r1, r3
 801131a:	4620      	mov	r0, r4
 801131c:	f7f4 f8ea 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	1d1c      	adds	r4, r3, #4
 8011324:	6838      	ldr	r0, [r7, #0]
 8011326:	f000 fb1c 	bl	8011962 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>
 801132a:	4603      	mov	r3, r0
 801132c:	4619      	mov	r1, r3
 801132e:	4620      	mov	r0, r4
 8011330:	f7fd fc27 	bl	800eb82 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f103 040c 	add.w	r4, r3, #12
 801133a:	6838      	ldr	r0, [r7, #0]
 801133c:	f000 fb1c 	bl	8011978 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>
 8011340:	4603      	mov	r3, r0
 8011342:	4619      	mov	r1, r3
 8011344:	4620      	mov	r0, r4
 8011346:	f000 fb23 	bl	8011990 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	4618      	mov	r0, r3
 801134e:	370c      	adds	r7, #12
 8011350:	46bd      	mov	sp, r7
 8011352:	bd90      	pop	{r4, r7, pc}

08011354 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8011354:	b580      	push	{r7, lr}
 8011356:	b084      	sub	sp, #16
 8011358:	af00      	add	r7, sp, #0
 801135a:	60f8      	str	r0, [r7, #12]
 801135c:	60b9      	str	r1, [r7, #8]
 801135e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	68ba      	ldr	r2, [r7, #8]
 8011364:	6879      	ldr	r1, [r7, #4]
 8011366:	4618      	mov	r0, r3
 8011368:	f000 fb21 	bl	80119ae <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 801136c:	eef0 7a40 	vmov.f32	s15, s0
 8011370:	eeb0 0a67 	vmov.f32	s0, s15
 8011374:	3710      	adds	r7, #16
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}

0801137a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801137a:	b580      	push	{r7, lr}
 801137c:	b082      	sub	sp, #8
 801137e:	af00      	add	r7, sp, #0
 8011380:	6078      	str	r0, [r7, #4]
 8011382:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8011384:	2201      	movs	r2, #1
 8011386:	2100      	movs	r1, #0
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f7ff ffe3 	bl	8011354 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 801138e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011392:	eeb0 0a67 	vmov.f32	s0, s15
 8011396:	3708      	adds	r7, #8
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}

0801139c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801139c:	b580      	push	{r7, lr}
 801139e:	b082      	sub	sp, #8
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80113a6:	2202      	movs	r2, #2
 80113a8:	2100      	movs	r1, #0
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f7ff ffd2 	bl	8011354 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 80113b0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80113b4:	eeb0 0a67 	vmov.f32	s0, s15
 80113b8:	3708      	adds	r7, #8
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}

080113be <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80113be:	b480      	push	{r7}
 80113c0:	b083      	sub	sp, #12
 80113c2:	af00      	add	r7, sp, #0
 80113c4:	6078      	str	r0, [r7, #4]
 80113c6:	bf00      	nop
 80113c8:	370c      	adds	r7, #12
 80113ca:	46bd      	mov	sp, r7
 80113cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d0:	4770      	bx	lr

080113d2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80113d2:	b590      	push	{r4, r7, lr}
 80113d4:	b083      	sub	sp, #12
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	6078      	str	r0, [r7, #4]
 80113da:	6039      	str	r1, [r7, #0]
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f000 fb22 	bl	8011a26 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80113e2:	687c      	ldr	r4, [r7, #4]
 80113e4:	6838      	ldr	r0, [r7, #0]
 80113e6:	f000 fb12 	bl	8011a0e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 80113ea:	4603      	mov	r3, r0
 80113ec:	4619      	mov	r1, r3
 80113ee:	4620      	mov	r0, r4
 80113f0:	f000 fb24 	bl	8011a3c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	4618      	mov	r0, r3
 80113f8:	370c      	adds	r7, #12
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd90      	pop	{r4, r7, pc}

080113fe <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 80113fe:	b580      	push	{r7, lr}
 8011400:	b0a4      	sub	sp, #144	; 0x90
 8011402:	af00      	add	r7, sp, #0
 8011404:	6078      	str	r0, [r7, #4]
 8011406:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 801140e:	2300      	movs	r3, #0
 8011410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6819      	ldr	r1, [r3, #0]
 8011418:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801141c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011420:	4618      	mov	r0, r3
 8011422:	f7f9 fcdb 	bl	800addc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 8011426:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801142a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801142e:	4611      	mov	r1, r2
 8011430:	4618      	mov	r0, r3
 8011432:	f7f9 fce6 	bl	800ae02 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	1d19      	adds	r1, r3, #4
 801143a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801143e:	2200      	movs	r2, #0
 8011440:	4618      	mov	r0, r3
 8011442:	f000 fb0b 	bl	8011a5c <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>
 8011446:	f107 030c 	add.w	r3, r7, #12
 801144a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801144e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8011452:	4618      	mov	r0, r3
 8011454:	f000 fb15 	bl	8011a82 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>
 8011458:	f107 030c 	add.w	r3, r7, #12
 801145c:	4618      	mov	r0, r3
 801145e:	f000 fb3e 	bl	8011ade <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>
 8011462:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011466:	eeb0 0a67 	vmov.f32	s0, s15
 801146a:	3790      	adds	r7, #144	; 0x90
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8011470:	b580      	push	{r7, lr}
 8011472:	b082      	sub	sp, #8
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8011478:	2102      	movs	r1, #2
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f7ff fa67 	bl	801094e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f000 fb47 	bl	8011b14 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>
  }
 8011486:	bf00      	nop
 8011488:	3708      	adds	r7, #8
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}

0801148e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801148e:	b580      	push	{r7, lr}
 8011490:	b082      	sub	sp, #8
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
 8011496:	6039      	str	r1, [r7, #0]
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	f000 fb45 	bl	8011b28 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6839      	ldr	r1, [r7, #0]
 80114a2:	4618      	mov	r0, r3
 80114a4:	f000 fb4b 	bl	8011b3e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	4618      	mov	r0, r3
 80114ac:	3708      	adds	r7, #8
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}

080114b2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80114b2:	b580      	push	{r7, lr}
 80114b4:	b082      	sub	sp, #8
 80114b6:	af00      	add	r7, sp, #0
 80114b8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80114ba:	2100      	movs	r1, #0
 80114bc:	6878      	ldr	r0, [r7, #4]
 80114be:	f000 fb66 	bl	8011b8e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f000 fb86 	bl	8011bd4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>
  }
 80114c8:	bf00      	nop
 80114ca:	3708      	adds	r7, #8
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}

080114d0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	6039      	str	r1, [r7, #0]
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6839      	ldr	r1, [r7, #0]
 80114de:	4618      	mov	r0, r3
 80114e0:	f000 fb82 	bl	8011be8 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	4618      	mov	r0, r3
 80114e8:	3708      	adds	r7, #8
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}

080114ee <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80114ee:	b580      	push	{r7, lr}
 80114f0:	b082      	sub	sp, #8
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	689b      	ldr	r3, [r3, #8]
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7fc fd14 	bl	800df28 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 8011500:	4603      	mov	r3, r0
    }
 8011502:	4618      	mov	r0, r3
 8011504:	3708      	adds	r7, #8
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}

0801150a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801150a:	b580      	push	{r7, lr}
 801150c:	b082      	sub	sp, #8
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	689b      	ldr	r3, [r3, #8]
 8011516:	4618      	mov	r0, r3
 8011518:	f7fa fba2 	bl	800bc60 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 801151c:	4603      	mov	r3, r0
    }
 801151e:	4618      	mov	r0, r3
 8011520:	3708      	adds	r7, #8
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}

08011526 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011526:	b480      	push	{r7}
 8011528:	b083      	sub	sp, #12
 801152a:	af00      	add	r7, sp, #0
 801152c:	6078      	str	r0, [r7, #4]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	4618      	mov	r0, r3
 8011532:	370c      	adds	r7, #12
 8011534:	46bd      	mov	sp, r7
 8011536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153a:	4770      	bx	lr

0801153c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 801153c:	b5b0      	push	{r4, r5, r7, lr}
 801153e:	b082      	sub	sp, #8
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	689c      	ldr	r4, [r3, #8]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	6839      	ldr	r1, [r7, #0]
 8011550:	4618      	mov	r0, r3
 8011552:	f000 fb5d 	bl	8011c10 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8011556:	4605      	mov	r5, r0
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	685b      	ldr	r3, [r3, #4]
 801155c:	6839      	ldr	r1, [r7, #0]
 801155e:	4618      	mov	r0, r3
 8011560:	f000 fb66 	bl	8011c30 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8011564:	4603      	mov	r3, r0
 8011566:	461a      	mov	r2, r3
 8011568:	4629      	mov	r1, r5
 801156a:	4620      	mov	r0, r4
 801156c:	f7f7 f836 	bl	80085dc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8011570:	bf00      	nop
 8011572:	3708      	adds	r7, #8
 8011574:	46bd      	mov	sp, r7
 8011576:	bdb0      	pop	{r4, r5, r7, pc}

08011578 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011578:	b480      	push	{r7}
 801157a:	b083      	sub	sp, #12
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
 8011580:	bf00      	nop
 8011582:	370c      	adds	r7, #12
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr

0801158c <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801158c:	b480      	push	{r7}
 801158e:	b083      	sub	sp, #12
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
    }
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	4618      	mov	r0, r3
 8011598:	370c      	adds	r7, #12
 801159a:	46bd      	mov	sp, r7
 801159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a0:	4770      	bx	lr

080115a2 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80115a2:	b480      	push	{r7}
 80115a4:	b083      	sub	sp, #12
 80115a6:	af00      	add	r7, sp, #0
 80115a8:	6078      	str	r0, [r7, #4]
    }
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	4618      	mov	r0, r3
 80115ae:	370c      	adds	r7, #12
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr

080115b8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	4618      	mov	r0, r3
 80115c4:	f7ff fb42 	bl	8010c4c <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80115c8:	4603      	mov	r3, r0
    }
 80115ca:	4618      	mov	r0, r3
 80115cc:	3708      	adds	r7, #8
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}

080115d2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 80115d2:	b580      	push	{r7, lr}
 80115d4:	b082      	sub	sp, #8
 80115d6:	af00      	add	r7, sp, #0
 80115d8:	6078      	str	r0, [r7, #4]
 80115da:	6039      	str	r1, [r7, #0]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6839      	ldr	r1, [r7, #0]
 80115e0:	4618      	mov	r0, r3
 80115e2:	f000 fb35 	bl	8011c50 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	4618      	mov	r0, r3
 80115ea:	3708      	adds	r7, #8
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80115f0:	b480      	push	{r7}
 80115f2:	b083      	sub	sp, #12
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	4618      	mov	r0, r3
 80115fc:	370c      	adds	r7, #12
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr

08011606 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 8011606:	b480      	push	{r7}
 8011608:	b083      	sub	sp, #12
 801160a:	af00      	add	r7, sp, #0
 801160c:	6078      	str	r0, [r7, #4]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	4618      	mov	r0, r3
 8011612:	370c      	adds	r7, #12
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr

0801161c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 801161c:	b580      	push	{r7, lr}
 801161e:	b084      	sub	sp, #16
 8011620:	af00      	add	r7, sp, #0
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	60b9      	str	r1, [r7, #8]
 8011626:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8011628:	68b9      	ldr	r1, [r7, #8]
 801162a:	68f8      	ldr	r0, [r7, #12]
 801162c:	f000 fb1f 	bl	8011c6e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>
 8011630:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011634:	eeb0 0a67 	vmov.f32	s0, s15
 8011638:	3710      	adds	r7, #16
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}

0801163e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 801163e:	b580      	push	{r7, lr}
 8011640:	b082      	sub	sp, #8
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
 8011646:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f000 fb4c 	bl	8011ce6 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 801164e:	6838      	ldr	r0, [r7, #0]
 8011650:	f000 fb31 	bl	8011cb6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8011654:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 801165a:	6838      	ldr	r0, [r7, #0]
 801165c:	f000 fb37 	bl	8011cce <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>
 8011660:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	605a      	str	r2, [r3, #4]
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8011670:	4619      	mov	r1, r3
 8011672:	4610      	mov	r0, r2
 8011674:	f7f5 f95f 	bl	8006936 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8011682:	4619      	mov	r1, r3
 8011684:	4610      	mov	r0, r2
 8011686:	f000 f9d9 	bl	8011a3c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 801168a:	6838      	ldr	r0, [r7, #0]
 801168c:	f000 fb13 	bl	8011cb6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8011690:	4603      	mov	r3, r0
 8011692:	4618      	mov	r0, r3
 8011694:	f7f3 fc9e 	bl	8004fd4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8011698:	4602      	mov	r2, r0
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	611a      	str	r2, [r3, #16]
  }
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4618      	mov	r0, r3
 80116a2:	3708      	adds	r7, #8
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}

080116a8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80116b0:	2200      	movs	r2, #0
 80116b2:	2100      	movs	r1, #0
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f000 fb21 	bl	8011cfc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 fb37 	bl	8011d2e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>
  }
 80116c0:	bf00      	nop
 80116c2:	3708      	adds	r7, #8
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80116c8:	b590      	push	{r4, r7, lr}
 80116ca:	b083      	sub	sp, #12
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	f000 fb57 	bl	8011d86 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	4618      	mov	r0, r3
 80116dc:	f000 f81e 	bl	801171c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 80116e0:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	601a      	str	r2, [r3, #0]
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	1d1c      	adds	r4, r3, #4
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	4618      	mov	r0, r3
 80116ee:	f000 fb2e 	bl	8011d4e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 80116f2:	4603      	mov	r3, r0
 80116f4:	4619      	mov	r1, r3
 80116f6:	4620      	mov	r0, r4
 80116f8:	f7f5 f976 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	1d5c      	adds	r4, r3, #5
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	4618      	mov	r0, r3
 8011704:	f000 fb31 	bl	8011d6a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8011708:	4603      	mov	r3, r0
 801170a:	4619      	mov	r1, r3
 801170c:	4620      	mov	r0, r4
 801170e:	f7f5 f951 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	4618      	mov	r0, r3
 8011716:	370c      	adds	r7, #12
 8011718:	46bd      	mov	sp, r7
 801171a:	bd90      	pop	{r4, r7, pc}

0801171c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 801171c:	b480      	push	{r7}
 801171e:	b083      	sub	sp, #12
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	4618      	mov	r0, r3
 801172a:	370c      	adds	r7, #12
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr

08011734 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	6039      	str	r1, [r7, #0]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6839      	ldr	r1, [r7, #0]
 8011742:	4618      	mov	r0, r3
 8011744:	f000 fb2a 	bl	8011d9c <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>
  }
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	4618      	mov	r0, r3
 801174c:	3708      	adds	r7, #8
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}

08011752 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011752:	b580      	push	{r7, lr}
 8011754:	b082      	sub	sp, #8
 8011756:	af00      	add	r7, sp, #0
 8011758:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	3308      	adds	r3, #8
 801175e:	4618      	mov	r0, r3
 8011760:	f7fc fd6a 	bl	800e238 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 8011764:	4603      	mov	r3, r0
    }
 8011766:	4618      	mov	r0, r3
 8011768:	3708      	adds	r7, #8
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}

0801176e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801176e:	b580      	push	{r7, lr}
 8011770:	b082      	sub	sp, #8
 8011772:	af00      	add	r7, sp, #0
 8011774:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	3308      	adds	r3, #8
 801177a:	4618      	mov	r0, r3
 801177c:	f7fc fd70 	bl	800e260 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 8011780:	4603      	mov	r3, r0
    }
 8011782:	4618      	mov	r0, r3
 8011784:	3708      	adds	r7, #8
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}

0801178a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801178a:	b480      	push	{r7}
 801178c:	b083      	sub	sp, #12
 801178e:	af00      	add	r7, sp, #0
 8011790:	6078      	str	r0, [r7, #4]
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	4618      	mov	r0, r3
 8011796:	370c      	adds	r7, #12
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr

080117a0 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexType=0) const { return op(); }
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b084      	sub	sp, #16
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	60b9      	str	r1, [r7, #8]
 80117aa:	607a      	str	r2, [r7, #4]
 80117ac:	603b      	str	r3, [r7, #0]
 80117ae:	68b8      	ldr	r0, [r7, #8]
 80117b0:	f000 fb03 	bl	8011dba <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>
 80117b4:	eef0 7a40 	vmov.f32	s15, s0
 80117b8:	eeb0 0a67 	vmov.f32	s0, s15
 80117bc:	3710      	adds	r7, #16
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}

080117c2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80117c2:	b580      	push	{r7, lr}
 80117c4:	b082      	sub	sp, #8
 80117c6:	af00      	add	r7, sp, #0
 80117c8:	6078      	str	r0, [r7, #4]
 80117ca:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6839      	ldr	r1, [r7, #0]
 80117d0:	4618      	mov	r0, r3
 80117d2:	f000 fb01 	bl	8011dd8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	4618      	mov	r0, r3
 80117da:	f000 fb27 	bl	8011e2c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 80117de:	bf00      	nop
  }
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	4618      	mov	r0, r3
 80117e4:	3708      	adds	r7, #8
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}

080117ea <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>:
    static void run(const Derived&, const OtherDerived&)
 80117ea:	b480      	push	{r7}
 80117ec:	b083      	sub	sp, #12
 80117ee:	af00      	add	r7, sp, #0
 80117f0:	6078      	str	r0, [r7, #4]
 80117f2:	6039      	str	r1, [r7, #0]
    }
 80117f4:	bf00      	nop
 80117f6:	370c      	adds	r7, #12
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr

08011800 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011800:	b580      	push	{r7, lr}
 8011802:	b082      	sub	sp, #8
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
 8011808:	6039      	str	r1, [r7, #0]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6839      	ldr	r1, [r7, #0]
 801180e:	4618      	mov	r0, r3
 8011810:	f000 fb18 	bl	8011e44 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	4618      	mov	r0, r3
 8011818:	3708      	adds	r7, #8
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}

0801181e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 801181e:	b480      	push	{r7}
 8011820:	b083      	sub	sp, #12
 8011822:	af00      	add	r7, sp, #0
 8011824:	6078      	str	r0, [r7, #4]
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	4618      	mov	r0, r3
 801182a:	370c      	adds	r7, #12
 801182c:	46bd      	mov	sp, r7
 801182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011832:	4770      	bx	lr

08011834 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8011834:	b580      	push	{r7, lr}
 8011836:	b082      	sub	sp, #8
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4618      	mov	r0, r3
 8011842:	f7f3 fb2c 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011846:	4603      	mov	r3, r0
 8011848:	4618      	mov	r0, r3
 801184a:	3708      	adds	r7, #8
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8011850:	b580      	push	{r7, lr}
 8011852:	b082      	sub	sp, #8
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	4618      	mov	r0, r3
 801185e:	f7f3 fb13 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011862:	4603      	mov	r3, r0
 8011864:	4618      	mov	r0, r3
 8011866:	3708      	adds	r7, #8
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}

0801186c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 801186c:	b580      	push	{r7, lr}
 801186e:	b086      	sub	sp, #24
 8011870:	af00      	add	r7, sp, #0
 8011872:	60f8      	str	r0, [r7, #12]
 8011874:	60b9      	str	r1, [r7, #8]
 8011876:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8011878:	68b8      	ldr	r0, [r7, #8]
 801187a:	f7ff ffdb 	bl	8011834 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>
 801187e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8011880:	68b8      	ldr	r0, [r7, #8]
 8011882:	f7ff ffe5 	bl	8011850 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>
 8011886:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	4618      	mov	r0, r3
 801188c:	f7f3 fb07 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011890:	4602      	mov	r2, r0
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	4293      	cmp	r3, r2
 8011896:	d107      	bne.n	80118a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	4618      	mov	r0, r3
 801189c:	f7f3 faf4 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80118a0:	4602      	mov	r2, r0
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d001      	beq.n	80118ac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80118a8:	2301      	movs	r3, #1
 80118aa:	e000      	b.n	80118ae <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80118ac:	2300      	movs	r3, #0
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d005      	beq.n	80118be <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	693a      	ldr	r2, [r7, #16]
 80118b6:	6979      	ldr	r1, [r7, #20]
 80118b8:	4618      	mov	r0, r3
 80118ba:	f7f6 fa09 	bl	8007cd0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	4618      	mov	r0, r3
 80118c2:	f7f3 faec 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80118c6:	4602      	mov	r2, r0
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	4293      	cmp	r3, r2
 80118cc:	d107      	bne.n	80118de <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	4618      	mov	r0, r3
 80118d2:	f7f3 fad9 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80118d6:	4602      	mov	r2, r0
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	4293      	cmp	r3, r2
 80118dc:	d006      	beq.n	80118ec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80118de:	4b05      	ldr	r3, [pc, #20]	; (80118f4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80118e0:	4a05      	ldr	r2, [pc, #20]	; (80118f8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80118e2:	f240 21fd 	movw	r1, #765	; 0x2fd
 80118e6:	4805      	ldr	r0, [pc, #20]	; (80118fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80118e8:	f00c f9d0 	bl	801dc8c <__assert_func>
}
 80118ec:	bf00      	nop
 80118ee:	3718      	adds	r7, #24
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	0802216c 	.word	0x0802216c
 80118f8:	080282c8 	.word	0x080282c8
 80118fc:	08022280 	.word	0x08022280

08011900 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8011900:	b480      	push	{r7}
 8011902:	b085      	sub	sp, #20
 8011904:	af00      	add	r7, sp, #0
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	60b9      	str	r1, [r7, #8]
 801190a:	607a      	str	r2, [r7, #4]
 801190c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	68ba      	ldr	r2, [r7, #8]
 8011912:	601a      	str	r2, [r3, #0]
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	687a      	ldr	r2, [r7, #4]
 8011918:	605a      	str	r2, [r3, #4]
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	683a      	ldr	r2, [r7, #0]
 801191e:	609a      	str	r2, [r3, #8]
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	69ba      	ldr	r2, [r7, #24]
 8011924:	60da      	str	r2, [r3, #12]
  }
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	4618      	mov	r0, r3
 801192a:	3714      	adds	r7, #20
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr

08011934 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f000 fab6 	bl	8011eae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>
  }
 8011942:	bf00      	nop
 8011944:	3708      	adds	r7, #8
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}

0801194a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 801194a:	b480      	push	{r7}
 801194c:	b083      	sub	sp, #12
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	3330      	adds	r3, #48	; 0x30
 8011956:	4618      	mov	r0, r3
 8011958:	370c      	adds	r7, #12
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr

08011962 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8011962:	b480      	push	{r7}
 8011964:	b083      	sub	sp, #12
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	4618      	mov	r0, r3
 801196e:	370c      	adds	r7, #12
 8011970:	46bd      	mov	sp, r7
 8011972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011976:	4770      	bx	lr

08011978 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8011978:	b480      	push	{r7}
 801197a:	b083      	sub	sp, #12
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	3318      	adds	r3, #24
 8011984:	4618      	mov	r0, r3
 8011986:	370c      	adds	r7, #12
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr

08011990 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	6039      	str	r1, [r7, #0]
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6839      	ldr	r1, [r7, #0]
 801199e:	4618      	mov	r0, r3
 80119a0:	f000 fa95 	bl	8011ece <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	4618      	mov	r0, r3
 80119a8:	3708      	adds	r7, #8
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}

080119ae <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80119ae:	b590      	push	{r4, r7, lr}
 80119b0:	b087      	sub	sp, #28
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	60f8      	str	r0, [r7, #12]
 80119b6:	60b9      	str	r1, [r7, #8]
 80119b8:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	4618      	mov	r0, r3
 80119be:	f000 fa95 	bl	8011eec <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 80119c2:	4604      	mov	r4, r0
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	3304      	adds	r3, #4
 80119c8:	687a      	ldr	r2, [r7, #4]
 80119ca:	68b9      	ldr	r1, [r7, #8]
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fd fdf3 	bl	800f5b8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 80119d2:	eef0 7a40 	vmov.f32	s15, s0
 80119d6:	edc7 7a04 	vstr	s15, [r7, #16]
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	330c      	adds	r3, #12
 80119de:	687a      	ldr	r2, [r7, #4]
 80119e0:	68b9      	ldr	r1, [r7, #8]
 80119e2:	4618      	mov	r0, r3
 80119e4:	f000 fa8d 	bl	8011f02 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 80119e8:	eef0 7a40 	vmov.f32	s15, s0
 80119ec:	edc7 7a05 	vstr	s15, [r7, #20]
 80119f0:	f107 0214 	add.w	r2, r7, #20
 80119f4:	f107 0310 	add.w	r3, r7, #16
 80119f8:	4619      	mov	r1, r3
 80119fa:	4620      	mov	r0, r4
 80119fc:	f7fd fc20 	bl	800f240 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8011a00:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011a04:	eeb0 0a67 	vmov.f32	s0, s15
 8011a08:	371c      	adds	r7, #28
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd90      	pop	{r4, r7, pc}

08011a0e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8011a0e:	b480      	push	{r7}
 8011a10:	b083      	sub	sp, #12
 8011a12:	af00      	add	r7, sp, #0
 8011a14:	6078      	str	r0, [r7, #4]
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	370c      	adds	r7, #12
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a24:	4770      	bx	lr

08011a26 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011a26:	b480      	push	{r7}
 8011a28:	b083      	sub	sp, #12
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	6078      	str	r0, [r7, #4]
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	4618      	mov	r0, r3
 8011a32:	370c      	adds	r7, #12
 8011a34:	46bd      	mov	sp, r7
 8011a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3a:	4770      	bx	lr

08011a3c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	683a      	ldr	r2, [r7, #0]
 8011a4a:	4611      	mov	r1, r2
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f000 fa79 	bl	8011f44 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
  { }
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	4618      	mov	r0, r3
 8011a56:	3708      	adds	r7, #8
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}

08011a5c <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b084      	sub	sp, #16
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	60f8      	str	r0, [r7, #12]
 8011a64:	60b9      	str	r1, [r7, #8]
 8011a66:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8011a68:	68b8      	ldr	r0, [r7, #8]
 8011a6a:	f7f4 f887 	bl	8005b7c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	687a      	ldr	r2, [r7, #4]
 8011a72:	4619      	mov	r1, r3
 8011a74:	68f8      	ldr	r0, [r7, #12]
 8011a76:	f000 fa7d 	bl	8011f74 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>
}
 8011a7a:	68f8      	ldr	r0, [r7, #12]
 8011a7c:	3710      	adds	r7, #16
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}

08011a82 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8011a82:	b5b0      	push	{r4, r5, r7, lr}
 8011a84:	b086      	sub	sp, #24
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	60f8      	str	r0, [r7, #12]
 8011a8a:	60b9      	str	r1, [r7, #8]
 8011a8c:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8011a8e:	68b8      	ldr	r0, [r7, #8]
 8011a90:	f7f9 fe6e 	bl	800b770 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 8011a94:	4604      	mov	r4, r0
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f000 fa94 	bl	8011fc4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>
 8011a9c:	4605      	mov	r5, r0
 8011a9e:	f107 0314 	add.w	r3, r7, #20
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7f3 fc9c 	bl	80053e0 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8011aa8:	f107 0314 	add.w	r3, r7, #20
 8011aac:	462a      	mov	r2, r5
 8011aae:	4621      	mov	r1, r4
 8011ab0:	68f8      	ldr	r0, [r7, #12]
 8011ab2:	f000 fac1 	bl	8012038 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>
}
 8011ab6:	68f8      	ldr	r0, [r7, #12]
 8011ab8:	3718      	adds	r7, #24
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bdb0      	pop	{r4, r5, r7, pc}

08011abe <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8011abe:	b580      	push	{r7, lr}
 8011ac0:	b082      	sub	sp, #8
 8011ac2:	af00      	add	r7, sp, #0
 8011ac4:	6078      	str	r0, [r7, #4]
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f000 fb14 	bl	80120f4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011acc:	4603      	mov	r3, r0
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f000 fb1b 	bl	801210a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3708      	adds	r7, #8
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}

08011ade <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8011ade:	b590      	push	{r4, r7, lr}
 8011ae0:	b085      	sub	sp, #20
 8011ae2:	af00      	add	r7, sp, #0
 8011ae4:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f000 fb04 	bl	80120f4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011aec:	4604      	mov	r4, r0
 8011aee:	f107 030c 	add.w	r3, r7, #12
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7f3 ff6b 	bl	80059ce <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8011af8:	f107 030c 	add.w	r3, r7, #12
 8011afc:	4619      	mov	r1, r3
 8011afe:	4620      	mov	r0, r4
 8011b00:	f000 fb80 	bl	8012204 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8011b04:	eef0 7a40 	vmov.f32	s15, s0
 8011b08:	bf00      	nop
}
 8011b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8011b0e:	3714      	adds	r7, #20
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd90      	pop	{r4, r7, pc}

08011b14 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011b14:	b480      	push	{r7}
 8011b16:	b083      	sub	sp, #12
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	bf00      	nop
 8011b1e:	370c      	adds	r7, #12
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr

08011b28 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011b28:	b480      	push	{r7}
 8011b2a:	b083      	sub	sp, #12
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	4618      	mov	r0, r3
 8011b34:	370c      	adds	r7, #12
 8011b36:	46bd      	mov	sp, r7
 8011b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3c:	4770      	bx	lr

08011b3e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8011b3e:	b590      	push	{r4, r7, lr}
 8011b40:	b083      	sub	sp, #12
 8011b42:	af00      	add	r7, sp, #0
 8011b44:	6078      	str	r0, [r7, #4]
 8011b46:	6039      	str	r1, [r7, #0]
 8011b48:	687c      	ldr	r4, [r7, #4]
 8011b4a:	6838      	ldr	r0, [r7, #0]
 8011b4c:	f000 fba0 	bl	8012290 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>
 8011b50:	4603      	mov	r3, r0
 8011b52:	4619      	mov	r1, r3
 8011b54:	4620      	mov	r0, r4
 8011b56:	f7f3 ffb9 	bl	8005acc <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	1d1c      	adds	r4, r3, #4
 8011b5e:	6838      	ldr	r0, [r7, #0]
 8011b60:	f000 fba2 	bl	80122a8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>
 8011b64:	4603      	mov	r3, r0
 8011b66:	4619      	mov	r1, r3
 8011b68:	4620      	mov	r0, r4
 8011b6a:	f000 fbb4 	bl	80122d6 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f103 040c 	add.w	r4, r3, #12
 8011b74:	6838      	ldr	r0, [r7, #0]
 8011b76:	f000 fba2 	bl	80122be <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f000 fbb8 	bl	80122f4 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	4618      	mov	r0, r3
 8011b88:	370c      	adds	r7, #12
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd90      	pop	{r4, r7, pc}

08011b8e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8011b8e:	b5b0      	push	{r4, r5, r7, lr}
 8011b90:	b084      	sub	sp, #16
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	6078      	str	r0, [r7, #4]
 8011b96:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	689c      	ldr	r4, [r3, #8]
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	6839      	ldr	r1, [r7, #0]
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f000 f834 	bl	8011c10 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8011ba8:	4605      	mov	r5, r0
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	685b      	ldr	r3, [r3, #4]
 8011bae:	6839      	ldr	r1, [r7, #0]
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f000 fbae 	bl	8012312 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>
 8011bb6:	eef0 7a40 	vmov.f32	s15, s0
 8011bba:	edc7 7a03 	vstr	s15, [r7, #12]
 8011bbe:	f107 030c 	add.w	r3, r7, #12
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	4629      	mov	r1, r5
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	f7f6 fd08 	bl	80085dc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8011bcc:	bf00      	nop
 8011bce:	3710      	adds	r7, #16
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bdb0      	pop	{r4, r5, r7, pc}

08011bd4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011bd4:	b480      	push	{r7}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	bf00      	nop
 8011bde:	370c      	adds	r7, #12
 8011be0:	46bd      	mov	sp, r7
 8011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be6:	4770      	bx	lr

08011be8 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6839      	ldr	r1, [r7, #0]
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f000 fbaf 	bl	801235a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f000 fbd5 	bl	80123ae <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8011c04:	bf00      	nop
  }
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	4618      	mov	r0, r3
 8011c0a:	3708      	adds	r7, #8
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd80      	pop	{r7, pc}

08011c10 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8011c10:	b480      	push	{r7}
 8011c12:	b083      	sub	sp, #12
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681a      	ldr	r2, [r3, #0]
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	009b      	lsls	r3, r3, #2
 8011c22:	4413      	add	r3, r2
  }
 8011c24:	4618      	mov	r0, r3
 8011c26:	370c      	adds	r7, #12
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2e:	4770      	bx	lr

08011c30 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8011c30:	b480      	push	{r7}
 8011c32:	b083      	sub	sp, #12
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681a      	ldr	r2, [r3, #0]
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	009b      	lsls	r3, r3, #2
 8011c42:	4413      	add	r3, r2
  }
 8011c44:	4618      	mov	r0, r3
 8011c46:	370c      	adds	r7, #12
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr

08011c50 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b082      	sub	sp, #8
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	6039      	str	r1, [r7, #0]
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	6839      	ldr	r1, [r7, #0]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f000 fbb1 	bl	80123c6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	4618      	mov	r0, r3
 8011c68:	3708      	adds	r7, #8
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}

08011c6e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8011c6e:	b580      	push	{r7, lr}
 8011c70:	b084      	sub	sp, #16
 8011c72:	af00      	add	r7, sp, #0
 8011c74:	6078      	str	r0, [r7, #4]
 8011c76:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011c78:	6839      	ldr	r1, [r7, #0]
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f000 fbb5 	bl	80123ea <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>
 8011c80:	eef0 7a40 	vmov.f32	s15, s0
 8011c84:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8011c88:	6839      	ldr	r1, [r7, #0]
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f000 fbbe 	bl	801240c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>
 8011c90:	eef0 7a40 	vmov.f32	s15, s0
 8011c94:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011c98:	f107 020c 	add.w	r2, r7, #12
 8011c9c:	f107 0308 	add.w	r3, r7, #8
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	6838      	ldr	r0, [r7, #0]
 8011ca4:	f7f7 fa8b 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8011ca8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011cac:	eeb0 0a67 	vmov.f32	s0, s15
 8011cb0:	3710      	adds	r7, #16
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}

08011cb6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8011cb6:	b480      	push	{r7}
 8011cb8:	b083      	sub	sp, #12
 8011cba:	af00      	add	r7, sp, #0
 8011cbc:	6078      	str	r0, [r7, #4]
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	370c      	adds	r7, #12
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ccc:	4770      	bx	lr

08011cce <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8011cce:	b480      	push	{r7}
 8011cd0:	b083      	sub	sp, #12
 8011cd2:	af00      	add	r7, sp, #0
 8011cd4:	6078      	str	r0, [r7, #4]
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	4618      	mov	r0, r3
 8011cdc:	370c      	adds	r7, #12
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce4:	4770      	bx	lr

08011ce6 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011ce6:	b480      	push	{r7}
 8011ce8:	b083      	sub	sp, #12
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	370c      	adds	r7, #12
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr

08011cfc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b086      	sub	sp, #24
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	60f8      	str	r0, [r7, #12]
 8011d04:	60b9      	str	r1, [r7, #8]
 8011d06:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8011d08:	6879      	ldr	r1, [r7, #4]
 8011d0a:	68b8      	ldr	r0, [r7, #8]
 8011d0c:	f000 fba2 	bl	8012454 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8011d10:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8011d12:	6879      	ldr	r1, [r7, #4]
 8011d14:	68b8      	ldr	r0, [r7, #8]
 8011d16:	f000 fba9 	bl	801246c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8011d1a:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8011d1c:	693a      	ldr	r2, [r7, #16]
 8011d1e:	6979      	ldr	r1, [r7, #20]
 8011d20:	68f8      	ldr	r0, [r7, #12]
 8011d22:	f000 fbaf 	bl	8012484 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>
  }
 8011d26:	bf00      	nop
 8011d28:	3718      	adds	r7, #24
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}

08011d2e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011d2e:	b580      	push	{r7, lr}
 8011d30:	b082      	sub	sp, #8
 8011d32:	af00      	add	r7, sp, #0
 8011d34:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011d36:	2201      	movs	r2, #1
 8011d38:	2100      	movs	r1, #0
 8011d3a:	6878      	ldr	r0, [r7, #4]
 8011d3c:	f7ff ffde 	bl	8011cfc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	f000 fbc5 	bl	80124d0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>
  }
 8011d46:	bf00      	nop
 8011d48:	3708      	adds	r7, #8
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}

08011d4e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011d4e:	b580      	push	{r7, lr}
 8011d50:	b082      	sub	sp, #8
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	689b      	ldr	r3, [r3, #8]
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7fb fe62 	bl	800da24 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8011d60:	4603      	mov	r3, r0
    }
 8011d62:	4618      	mov	r0, r3
 8011d64:	3708      	adds	r7, #8
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}

08011d6a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011d6a:	b580      	push	{r7, lr}
 8011d6c:	b082      	sub	sp, #8
 8011d6e:	af00      	add	r7, sp, #0
 8011d70:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	689b      	ldr	r3, [r3, #8]
 8011d76:	4618      	mov	r0, r3
 8011d78:	f7f6 fc04 	bl	8008584 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8011d7c:	4603      	mov	r3, r0
    }
 8011d7e:	4618      	mov	r0, r3
 8011d80:	3708      	adds	r7, #8
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}

08011d86 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 8011d86:	b480      	push	{r7}
 8011d88:	b083      	sub	sp, #12
 8011d8a:	af00      	add	r7, sp, #0
 8011d8c:	6078      	str	r0, [r7, #4]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	4618      	mov	r0, r3
 8011d92:	370c      	adds	r7, #12
 8011d94:	46bd      	mov	sp, r7
 8011d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9a:	4770      	bx	lr

08011d9c <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b082      	sub	sp, #8
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	6039      	str	r1, [r7, #0]
    : unary_evaluator<XprType>(block)
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6839      	ldr	r1, [r7, #0]
 8011daa:	4618      	mov	r0, r3
 8011dac:	f000 fbb9 	bl	8012522 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>
  {}
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	4618      	mov	r0, r3
 8011db4:	3708      	adds	r7, #8
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}

08011dba <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() () const { return m_other; }
 8011dba:	b480      	push	{r7}
 8011dbc:	b083      	sub	sp, #12
 8011dbe:	af00      	add	r7, sp, #0
 8011dc0:	6078      	str	r0, [r7, #4]
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	ee07 3a90 	vmov	s15, r3
 8011dca:	eeb0 0a67 	vmov.f32	s0, s15
 8011dce:	370c      	adds	r7, #12
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd6:	4770      	bx	lr

08011dd8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8011dd8:	b590      	push	{r4, r7, lr}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f000 fc05 	bl	80125f2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	4618      	mov	r0, r3
 8011dec:	f000 f81e 	bl	8011e2c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 8011df0:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	601a      	str	r2, [r3, #0]
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	1d1c      	adds	r4, r3, #4
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f000 fbdc 	bl	80125ba <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>
 8011e02:	4603      	mov	r3, r0
 8011e04:	4619      	mov	r1, r3
 8011e06:	4620      	mov	r0, r4
 8011e08:	f7f4 fdd4 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	1d5c      	adds	r4, r3, #5
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	4618      	mov	r0, r3
 8011e14:	f000 fbdf 	bl	80125d6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	4619      	mov	r1, r3
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	f7f4 fde3 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	4618      	mov	r0, r3
 8011e26:	370c      	adds	r7, #12
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd90      	pop	{r4, r7, pc}

08011e2c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>:
 8011e2c:	b480      	push	{r7}
 8011e2e:	b083      	sub	sp, #12
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	4618      	mov	r0, r3
 8011e3a:	370c      	adds	r7, #12
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e42:	4770      	bx	lr

08011e44 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>:
  explicit product_evaluator(const XprType& xpr)
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b082      	sub	sp, #8
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f000 fbf2 	bl	8012638 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8011e54:	6838      	ldr	r0, [r7, #0]
 8011e56:	f000 fbd7 	bl	8012608 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 8011e5a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8011e60:	6838      	ldr	r0, [r7, #0]
 8011e62:	f000 fbdd 	bl	8012620 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>
 8011e66:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	605a      	str	r2, [r3, #4]
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8011e76:	4619      	mov	r1, r3
 8011e78:	4610      	mov	r0, r2
 8011e7a:	f7f5 fca7 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8011e88:	4619      	mov	r1, r3
 8011e8a:	4610      	mov	r0, r2
 8011e8c:	f7f5 fc9e 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8011e90:	6838      	ldr	r0, [r7, #0]
 8011e92:	f000 fbb9 	bl	8012608 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 8011e96:	4603      	mov	r3, r0
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7f2 fff5 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011e9e:	4602      	mov	r2, r0
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	611a      	str	r2, [r3, #16]
  }
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3708      	adds	r7, #8
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}

08011eae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011eae:	b580      	push	{r7, lr}
 8011eb0:	b082      	sub	sp, #8
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	2100      	movs	r1, #0
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f000 fbc7 	bl	801264e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f000 fbdd 	bl	8012680 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>
  }
 8011ec6:	bf00      	nop
 8011ec8:	3708      	adds	r7, #8
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}

08011ece <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011ece:	b580      	push	{r7, lr}
 8011ed0:	b082      	sub	sp, #8
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	6078      	str	r0, [r7, #4]
 8011ed6:	6039      	str	r1, [r7, #0]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6839      	ldr	r1, [r7, #0]
 8011edc:	4618      	mov	r0, r3
 8011ede:	f000 fbdf 	bl	80126a0 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>
  }
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	3708      	adds	r7, #8
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bd80      	pop	{r7, pc}

08011eec <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8011eec:	b480      	push	{r7}
 8011eee:	b083      	sub	sp, #12
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	370c      	adds	r7, #12
 8011efa:	46bd      	mov	sp, r7
 8011efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f00:	4770      	bx	lr

08011f02 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8011f02:	b5b0      	push	{r4, r5, r7, lr}
 8011f04:	b084      	sub	sp, #16
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	60f8      	str	r0, [r7, #12]
 8011f0a:	60b9      	str	r1, [r7, #8]
 8011f0c:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	681c      	ldr	r4, [r3, #0]
 8011f12:	68f8      	ldr	r0, [r7, #12]
 8011f14:	f000 fbd8 	bl	80126c8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8011f18:	4602      	mov	r2, r0
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	fb03 f502 	mul.w	r5, r3, r2
 8011f20:	68f8      	ldr	r0, [r7, #12]
 8011f22:	f000 fbdc 	bl	80126de <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8011f26:	4602      	mov	r2, r0
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	fb02 f303 	mul.w	r3, r2, r3
 8011f2e:	442b      	add	r3, r5
 8011f30:	009b      	lsls	r3, r3, #2
 8011f32:	4423      	add	r3, r4
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	ee07 3a90 	vmov	s15, r3
  }
 8011f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8011f3e:	3710      	adds	r7, #16
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bdb0      	pop	{r4, r5, r7, pc}

08011f44 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8011f44:	b590      	push	{r4, r7, lr}
 8011f46:	b083      	sub	sp, #12
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
 8011f4c:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f000 fbdd 	bl	801270e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8011f54:	687c      	ldr	r4, [r7, #4]
 8011f56:	6838      	ldr	r0, [r7, #0]
 8011f58:	f000 fbcc 	bl	80126f4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	2200      	movs	r2, #0
 8011f60:	4619      	mov	r1, r3
 8011f62:	4620      	mov	r0, r4
 8011f64:	f7f5 f88b 	bl	800707e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	370c      	adds	r7, #12
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd90      	pop	{r4, r7, pc}
	...

08011f74 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b084      	sub	sp, #16
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	60f8      	str	r0, [r7, #12]
 8011f7c:	60b9      	str	r1, [r7, #8]
 8011f7e:	607a      	str	r2, [r7, #4]
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	68b9      	ldr	r1, [r7, #8]
 8011f86:	4618      	mov	r0, r3
 8011f88:	f000 fbcc 	bl	8012724 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	db06      	blt.n	8011fa0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x2c>
 8011f92:	68b8      	ldr	r0, [r7, #8]
 8011f94:	f7f4 fe6b 	bl	8006c6e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8011f98:	4602      	mov	r2, r0
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	4293      	cmp	r3, r2
 8011f9e:	db05      	blt.n	8011fac <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x38>
 8011fa0:	4b05      	ldr	r3, [pc, #20]	; (8011fb8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x44>)
 8011fa2:	4a06      	ldr	r2, [pc, #24]	; (8011fbc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x48>)
 8011fa4:	2178      	movs	r1, #120	; 0x78
 8011fa6:	4806      	ldr	r0, [pc, #24]	; (8011fc0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x4c>)
 8011fa8:	f00b fe70 	bl	801dc8c <__assert_func>
    }
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	4618      	mov	r0, r3
 8011fb0:	3710      	adds	r7, #16
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}
 8011fb6:	bf00      	nop
 8011fb8:	08024678 	.word	0x08024678
 8011fbc:	080283dc 	.word	0x080283dc
 8011fc0:	080247fc 	.word	0x080247fc

08011fc4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8011fc4:	b480      	push	{r7}
 8011fc6:	b083      	sub	sp, #12
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	4618      	mov	r0, r3
 8011fd0:	370c      	adds	r7, #12
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd8:	4770      	bx	lr

08011fda <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
 8011fda:	b580      	push	{r7, lr}
 8011fdc:	b082      	sub	sp, #8
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f000 fbaf 	bl	8012746 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	4618      	mov	r0, r3
 8011fec:	3708      	adds	r7, #8
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}

08011ff2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8011ff2:	b580      	push	{r7, lr}
 8011ff4:	b082      	sub	sp, #8
 8011ff6:	af00      	add	r7, sp, #0
 8011ff8:	6078      	str	r0, [r7, #4]
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f7ff ffed 	bl	8011fda <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	4618      	mov	r0, r3
 8012004:	3708      	adds	r7, #8
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}

0801200a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 801200a:	b580      	push	{r7, lr}
 801200c:	b082      	sub	sp, #8
 801200e:	af00      	add	r7, sp, #0
 8012010:	6078      	str	r0, [r7, #4]
 8012012:	f7f4 fd0e 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8012016:	4603      	mov	r3, r0
 8012018:	4618      	mov	r0, r3
 801201a:	3708      	adds	r7, #8
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	f7f4 fd0b 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801202c:	4603      	mov	r3, r0
 801202e:	4618      	mov	r0, r3
 8012030:	3708      	adds	r7, #8
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}
	...

08012038 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8012038:	b5b0      	push	{r4, r5, r7, lr}
 801203a:	b084      	sub	sp, #16
 801203c:	af00      	add	r7, sp, #0
 801203e:	60f8      	str	r0, [r7, #12]
 8012040:	60b9      	str	r1, [r7, #8]
 8012042:	607a      	str	r2, [r7, #4]
 8012044:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8012046:	68f8      	ldr	r0, [r7, #12]
 8012048:	f7ff ffd3 	bl	8011ff2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 801204c:	68fa      	ldr	r2, [r7, #12]
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	4614      	mov	r4, r2
 8012052:	461d      	mov	r5, r3
 8012054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012058:	e895 0003 	ldmia.w	r5, {r0, r1}
 801205c:	e884 0003 	stmia.w	r4, {r0, r1}
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	f103 0218 	add.w	r2, r3, #24
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	4614      	mov	r4, r2
 801206a:	461d      	mov	r5, r3
 801206c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801206e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012070:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012074:	e884 0003 	stmia.w	r4, {r0, r1}
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	3330      	adds	r3, #48	; 0x30
 801207c:	6839      	ldr	r1, [r7, #0]
 801207e:	4618      	mov	r0, r3
 8012080:	f7f3 fa38 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8012084:	68b8      	ldr	r0, [r7, #8]
 8012086:	f7f9 fba1 	bl	800b7cc <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 801208a:	4604      	mov	r4, r0
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	4618      	mov	r0, r3
 8012090:	f7ff ffbb 	bl	801200a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>
 8012094:	4603      	mov	r3, r0
 8012096:	429c      	cmp	r4, r3
 8012098:	d10a      	bne.n	80120b0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x78>
 801209a:	68b8      	ldr	r0, [r7, #8]
 801209c:	f7f9 fba3 	bl	800b7e6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 80120a0:	4604      	mov	r4, r0
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7ff ffbb 	bl	8012020 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>
 80120aa:	4603      	mov	r3, r0
 80120ac:	429c      	cmp	r4, r3
 80120ae:	d005      	beq.n	80120bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x84>
 80120b0:	4b05      	ldr	r3, [pc, #20]	; (80120c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x90>)
 80120b2:	4a06      	ldr	r2, [pc, #24]	; (80120cc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x94>)
 80120b4:	2174      	movs	r1, #116	; 0x74
 80120b6:	4806      	ldr	r0, [pc, #24]	; (80120d0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x98>)
 80120b8:	f00b fde8 	bl	801dc8c <__assert_func>
    }
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	4618      	mov	r0, r3
 80120c0:	3710      	adds	r7, #16
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bdb0      	pop	{r4, r5, r7, pc}
 80120c6:	bf00      	nop
 80120c8:	0801faf4 	.word	0x0801faf4
 80120cc:	080284cc 	.word	0x080284cc
 80120d0:	0801fd58 	.word	0x0801fd58

080120d4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b082      	sub	sp, #8
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f000 f809 	bl	80120f4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 80120e2:	4603      	mov	r3, r0
 80120e4:	4618      	mov	r0, r3
 80120e6:	f000 fb39 	bl	801275c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>
 80120ea:	4603      	mov	r3, r0
 80120ec:	4618      	mov	r0, r3
 80120ee:	3708      	adds	r7, #8
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}

080120f4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80120f4:	b480      	push	{r7}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	4618      	mov	r0, r3
 8012100:	370c      	adds	r7, #12
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr

0801210a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 801210a:	b580      	push	{r7, lr}
 801210c:	b082      	sub	sp, #8
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	4618      	mov	r0, r3
 8012116:	f7f9 fb59 	bl	800b7cc <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 801211a:	4603      	mov	r3, r0
    }
 801211c:	4618      	mov	r0, r3
 801211e:	3708      	adds	r7, #8
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}

08012124 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f000 fb3c 	bl	80127aa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	4618      	mov	r0, r3
 8012136:	3708      	adds	r7, #8
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}

0801213c <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 801213c:	b580      	push	{r7, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	4618      	mov	r0, r3
 8012148:	f7ff ffec 	bl	8012124 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	4618      	mov	r0, r3
 8012150:	3708      	adds	r7, #8
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}

08012156 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8012156:	b580      	push	{r7, lr}
 8012158:	b082      	sub	sp, #8
 801215a:	af00      	add	r7, sp, #0
 801215c:	6078      	str	r0, [r7, #4]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	4618      	mov	r0, r3
 8012162:	f7ff ffeb 	bl	801213c <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	4618      	mov	r0, r3
 801216a:	3708      	adds	r7, #8
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	4618      	mov	r0, r3
 801217c:	f7ff ffeb 	bl	8012156 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	4618      	mov	r0, r3
 8012184:	3708      	adds	r7, #8
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}

0801218a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>:
  struct Data
 801218a:	b580      	push	{r7, lr}
 801218c:	b082      	sub	sp, #8
 801218e:	af00      	add	r7, sp, #0
 8012190:	6078      	str	r0, [r7, #4]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	330c      	adds	r3, #12
 8012196:	4618      	mov	r0, r3
 8012198:	f7ff ffea 	bl	8012170 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	3304      	adds	r3, #4
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7f9 fc09 	bl	800b9b8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	4618      	mov	r0, r3
 80121aa:	3708      	adds	r7, #8
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7ff ffe5 	bl	801218a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f000 fae7 	bl	8012794 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	4618      	mov	r0, r3
 80121ca:	3708      	adds	r7, #8
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}

080121d0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	4618      	mov	r0, r3
 80121dc:	f7ff ffe8 	bl	80121b0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	4618      	mov	r0, r3
 80121e4:	3708      	adds	r7, #8
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}

080121ea <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 80121ea:	b580      	push	{r7, lr}
 80121ec:	b082      	sub	sp, #8
 80121ee:	af00      	add	r7, sp, #0
 80121f0:	6078      	str	r0, [r7, #4]
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7ff ffeb 	bl	80121d0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	4618      	mov	r0, r3
 80121fe:	3708      	adds	r7, #8
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}

08012204 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8012204:	b580      	push	{r7, lr}
 8012206:	ed2d 8b02 	vpush	{d8}
 801220a:	b088      	sub	sp, #32
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f7ff fc53 	bl	8011abe <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>
 8012218:	4603      	mov	r3, r0
 801221a:	2b00      	cmp	r3, #0
 801221c:	dd05      	ble.n	801222a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f7ff ff58 	bl	80120d4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>
 8012224:	4603      	mov	r3, r0
 8012226:	2b00      	cmp	r3, #0
 8012228:	dc06      	bgt.n	8012238 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 801222a:	4b16      	ldr	r3, [pc, #88]	; (8012284 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 801222c:	4a16      	ldr	r2, [pc, #88]	; (8012288 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 801222e:	f240 119b 	movw	r1, #411	; 0x19b
 8012232:	4816      	ldr	r0, [pc, #88]	; (801228c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8012234:	f00b fd2a 	bl	801dc8c <__assert_func>
 8012238:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f7ff ff5a 	bl	80120f4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8012240:	4602      	mov	r2, r0
 8012242:	f107 030c 	add.w	r3, r7, #12
 8012246:	4611      	mov	r1, r2
 8012248:	4618      	mov	r0, r3
 801224a:	f000 fa94 	bl	8012776 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f7ff ff50 	bl	80120f4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8012254:	4602      	mov	r2, r0
 8012256:	f107 030c 	add.w	r3, r7, #12
 801225a:	6839      	ldr	r1, [r7, #0]
 801225c:	4618      	mov	r0, r3
 801225e:	f000 faaf 	bl	80127c0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>
 8012262:	eeb0 8a40 	vmov.f32	s16, s0
 8012266:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8012268:	f107 030c 	add.w	r3, r7, #12
 801226c:	4618      	mov	r0, r3
 801226e:	f7ff ffbc 	bl	80121ea <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8012272:	eef0 7a48 	vmov.f32	s15, s16
}
 8012276:	eeb0 0a67 	vmov.f32	s0, s15
 801227a:	3720      	adds	r7, #32
 801227c:	46bd      	mov	sp, r7
 801227e:	ecbd 8b02 	vpop	{d8}
 8012282:	bd80      	pop	{r7, pc}
 8012284:	08024b74 	.word	0x08024b74
 8012288:	0802873c 	.word	0x0802873c
 801228c:	08024d80 	.word	0x08024d80

08012290 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8012290:	b480      	push	{r7}
 8012292:	b083      	sub	sp, #12
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	3310      	adds	r3, #16
 801229c:	4618      	mov	r0, r3
 801229e:	370c      	adds	r7, #12
 80122a0:	46bd      	mov	sp, r7
 80122a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a6:	4770      	bx	lr

080122a8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80122a8:	b480      	push	{r7}
 80122aa:	b083      	sub	sp, #12
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	4618      	mov	r0, r3
 80122b4:	370c      	adds	r7, #12
 80122b6:	46bd      	mov	sp, r7
 80122b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122bc:	4770      	bx	lr

080122be <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80122be:	b480      	push	{r7}
 80122c0:	b083      	sub	sp, #12
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	6078      	str	r0, [r7, #4]
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	68db      	ldr	r3, [r3, #12]
 80122ca:	4618      	mov	r0, r3
 80122cc:	370c      	adds	r7, #12
 80122ce:	46bd      	mov	sp, r7
 80122d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d4:	4770      	bx	lr

080122d6 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80122d6:	b580      	push	{r7, lr}
 80122d8:	b082      	sub	sp, #8
 80122da:	af00      	add	r7, sp, #0
 80122dc:	6078      	str	r0, [r7, #4]
 80122de:	6039      	str	r1, [r7, #0]
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6839      	ldr	r1, [r7, #0]
 80122e4:	4618      	mov	r0, r3
 80122e6:	f000 fa7c 	bl	80127e2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	4618      	mov	r0, r3
 80122ee:	3708      	adds	r7, #8
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>:
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	6039      	str	r1, [r7, #0]
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6839      	ldr	r1, [r7, #0]
 8012302:	4618      	mov	r0, r3
 8012304:	f7f8 f8bb 	bl	800a47e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	4618      	mov	r0, r3
 801230c:	3708      	adds	r7, #8
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}

08012312 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8012312:	b5b0      	push	{r4, r5, r7, lr}
 8012314:	b082      	sub	sp, #8
 8012316:	af00      	add	r7, sp, #0
 8012318:	6078      	str	r0, [r7, #4]
 801231a:	6039      	str	r1, [r7, #0]
    return m_d.func()(m_d.lhsImpl.coeff(index), m_d.rhsImpl.coeff(index));
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	4618      	mov	r0, r3
 8012320:	f000 fa6e 	bl	8012800 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 8012324:	4604      	mov	r4, r0
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	3304      	adds	r3, #4
 801232a:	6839      	ldr	r1, [r7, #0]
 801232c:	4618      	mov	r0, r3
 801232e:	f7ff fc7f 	bl	8011c30 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8012332:	4605      	mov	r5, r0
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	330c      	adds	r3, #12
 8012338:	6839      	ldr	r1, [r7, #0]
 801233a:	4618      	mov	r0, r3
 801233c:	f7ff fc78 	bl	8011c30 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8012340:	4603      	mov	r3, r0
 8012342:	461a      	mov	r2, r3
 8012344:	4629      	mov	r1, r5
 8012346:	4620      	mov	r0, r4
 8012348:	f7f6 ff39 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 801234c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012350:	eeb0 0a67 	vmov.f32	s0, s15
 8012354:	3708      	adds	r7, #8
 8012356:	46bd      	mov	sp, r7
 8012358:	bdb0      	pop	{r4, r5, r7, pc}

0801235a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 801235a:	b590      	push	{r4, r7, lr}
 801235c:	b083      	sub	sp, #12
 801235e:	af00      	add	r7, sp, #0
 8012360:	6078      	str	r0, [r7, #4]
 8012362:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f000 fa72 	bl	801284e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	4618      	mov	r0, r3
 801236e:	f000 f81e 	bl	80123ae <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8012372:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	601a      	str	r2, [r3, #0]
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	1d1c      	adds	r4, r3, #4
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	4618      	mov	r0, r3
 8012380:	f000 fa49 	bl	8012816 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8012384:	4603      	mov	r3, r0
 8012386:	4619      	mov	r1, r3
 8012388:	4620      	mov	r0, r4
 801238a:	f7f4 fb2d 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	1d5c      	adds	r4, r3, #5
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	4618      	mov	r0, r3
 8012396:	f000 fa4c 	bl	8012832 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 801239a:	4603      	mov	r3, r0
 801239c:	4619      	mov	r1, r3
 801239e:	4620      	mov	r0, r4
 80123a0:	f7f4 fb08 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	4618      	mov	r0, r3
 80123a8:	370c      	adds	r7, #12
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd90      	pop	{r4, r7, pc}

080123ae <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80123ae:	b480      	push	{r7}
 80123b0:	b083      	sub	sp, #12
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	4618      	mov	r0, r3
 80123bc:	370c      	adds	r7, #12
 80123be:	46bd      	mov	sp, r7
 80123c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c4:	4770      	bx	lr

080123c6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80123c6:	b580      	push	{r7, lr}
 80123c8:	b082      	sub	sp, #8
 80123ca:	af00      	add	r7, sp, #0
 80123cc:	6078      	str	r0, [r7, #4]
 80123ce:	6039      	str	r1, [r7, #0]
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f000 fa47 	bl	8012864 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	6839      	ldr	r1, [r7, #0]
 80123da:	4618      	mov	r0, r3
 80123dc:	f000 fa4d 	bl	801287a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	4618      	mov	r0, r3
 80123e4:	3708      	adds	r7, #8
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}

080123ea <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80123ea:	b580      	push	{r7, lr}
 80123ec:	b082      	sub	sp, #8
 80123ee:	af00      	add	r7, sp, #0
 80123f0:	6078      	str	r0, [r7, #4]
 80123f2:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80123f4:	2200      	movs	r2, #0
 80123f6:	2100      	movs	r1, #0
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f000 fa66 	bl	80128ca <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 80123fe:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012402:	eeb0 0a67 	vmov.f32	s0, s15
 8012406:	3708      	adds	r7, #8
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}

0801240c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801240c:	b580      	push	{r7, lr}
 801240e:	b084      	sub	sp, #16
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012416:	6839      	ldr	r1, [r7, #0]
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f000 fa69 	bl	80128f0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>
 801241e:	eef0 7a40 	vmov.f32	s15, s0
 8012422:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012426:	6839      	ldr	r1, [r7, #0]
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f000 fa72 	bl	8012912 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>
 801242e:	eef0 7a40 	vmov.f32	s15, s0
 8012432:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012436:	f107 020c 	add.w	r2, r7, #12
 801243a:	f107 0308 	add.w	r3, r7, #8
 801243e:	4619      	mov	r1, r3
 8012440:	6838      	ldr	r0, [r7, #0]
 8012442:	f7f6 febc 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012446:	eef0 7a40 	vmov.f32	s15, s0
  }
 801244a:	eeb0 0a67 	vmov.f32	s0, s15
 801244e:	3710      	adds	r7, #16
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}

08012454 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8012454:	b480      	push	{r7}
 8012456:	b083      	sub	sp, #12
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
 801245c:	6039      	str	r1, [r7, #0]
      : inner;
 801245e:	683b      	ldr	r3, [r7, #0]
  }
 8012460:	4618      	mov	r0, r3
 8012462:	370c      	adds	r7, #12
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr

0801246c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	6039      	str	r1, [r7, #0]
      : outer;
 8012476:	687b      	ldr	r3, [r7, #4]
  }
 8012478:	4618      	mov	r0, r3
 801247a:	370c      	adds	r7, #12
 801247c:	46bd      	mov	sp, r7
 801247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012482:	4770      	bx	lr

08012484 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8012484:	b5b0      	push	{r4, r5, r7, lr}
 8012486:	b086      	sub	sp, #24
 8012488:	af00      	add	r7, sp, #0
 801248a:	60f8      	str	r0, [r7, #12]
 801248c:	60b9      	str	r1, [r7, #8]
 801248e:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	689c      	ldr	r4, [r3, #8]
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	687a      	ldr	r2, [r7, #4]
 801249a:	68b9      	ldr	r1, [r7, #8]
 801249c:	4618      	mov	r0, r3
 801249e:	f7f6 fb2d 	bl	8008afc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 80124a2:	4605      	mov	r5, r0
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	687a      	ldr	r2, [r7, #4]
 80124aa:	68b9      	ldr	r1, [r7, #8]
 80124ac:	4618      	mov	r0, r3
 80124ae:	f000 fa41 	bl	8012934 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>
 80124b2:	eef0 7a40 	vmov.f32	s15, s0
 80124b6:	edc7 7a05 	vstr	s15, [r7, #20]
 80124ba:	f107 0314 	add.w	r3, r7, #20
 80124be:	461a      	mov	r2, r3
 80124c0:	4629      	mov	r1, r5
 80124c2:	4620      	mov	r0, r4
 80124c4:	f000 fa69 	bl	801299a <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>
  }
 80124c8:	bf00      	nop
 80124ca:	3718      	adds	r7, #24
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bdb0      	pop	{r4, r5, r7, pc}

080124d0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b082      	sub	sp, #8
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80124d8:	2202      	movs	r2, #2
 80124da:	2100      	movs	r1, #0
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f7ff fc0d 	bl	8011cfc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80124e2:	6878      	ldr	r0, [r7, #4]
 80124e4:	f000 fa70 	bl	80129c8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>
  }
 80124e8:	bf00      	nop
 80124ea:	3708      	adds	r7, #8
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}

080124f0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>:
    StorageIndex startRow() const EIGEN_NOEXCEPT
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b082      	sub	sp, #8
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
      return m_startRow.value();
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	3310      	adds	r3, #16
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7fd fff8 	bl	80104f2 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 8012502:	4603      	mov	r3, r0
    }
 8012504:	4618      	mov	r0, r3
 8012506:	3708      	adds	r7, #8
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}

0801250c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>:
    StorageIndex startCol() const EIGEN_NOEXCEPT
 801250c:	b580      	push	{r7, lr}
 801250e:	b082      	sub	sp, #8
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
      return m_startCol.value();
 8012514:	f7fd fbbd 	bl	800fc92 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 8012518:	4603      	mov	r3, r0
    }
 801251a:	4618      	mov	r0, r3
 801251c:	3708      	adds	r7, #8
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}

08012522 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>:
  explicit unary_evaluator(const XprType& block)
 8012522:	b5b0      	push	{r4, r5, r7, lr}
 8012524:	b082      	sub	sp, #8
 8012526:	af00      	add	r7, sp, #0
 8012528:	6078      	str	r0, [r7, #4]
 801252a:	6039      	str	r1, [r7, #0]
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f000 fa66 	bl	80129fe <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 8012532:	687c      	ldr	r4, [r7, #4]
    : m_argImpl(block.nestedExpression()),
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	4618      	mov	r0, r3
 8012538:	f000 fa56 	bl	80129e8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 801253c:	4603      	mov	r3, r0
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 801253e:	4619      	mov	r1, r3
 8012540:	4620      	mov	r0, r4
 8012542:	f000 fa67 	bl	8012a14 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	f103 0410 	add.w	r4, r3, #16
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	4618      	mov	r0, r3
 8012550:	f7ff ffce 	bl	80124f0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8012554:	4603      	mov	r3, r0
 8012556:	4619      	mov	r1, r3
 8012558:	4620      	mov	r0, r4
 801255a:	f7fb fab9 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	f103 0414 	add.w	r4, r3, #20
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	4618      	mov	r0, r3
 8012568:	f7ff ffd0 	bl	801250c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 801256c:	4603      	mov	r3, r0
 801256e:	4619      	mov	r1, r3
 8012570:	4620      	mov	r0, r4
 8012572:	f7fb fb21 	bl	800dbb8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f103 0518 	add.w	r5, r3, #24
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	4618      	mov	r0, r3
 8012580:	f7ff ffc4 	bl	801250c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8012584:	4604      	mov	r4, r0
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	4618      	mov	r0, r3
 801258a:	f000 fa2d 	bl	80129e8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 801258e:	4603      	mov	r3, r0
 8012590:	4618      	mov	r0, r3
 8012592:	f7f5 fd6c 	bl	800806e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8012596:	4603      	mov	r3, r0
 8012598:	fb03 f404 	mul.w	r4, r3, r4
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	4618      	mov	r0, r3
 80125a0:	f7ff ffa6 	bl	80124f0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 80125a4:	4603      	mov	r3, r0
 80125a6:	4423      	add	r3, r4
 80125a8:	4619      	mov	r1, r3
 80125aa:	4628      	mov	r0, r5
 80125ac:	f7fb fa90 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
  { }
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	4618      	mov	r0, r3
 80125b4:	3708      	adds	r7, #8
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bdb0      	pop	{r4, r5, r7, pc}

080125ba <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80125ba:	b580      	push	{r7, lr}
 80125bc:	b082      	sub	sp, #8
 80125be:	af00      	add	r7, sp, #0
 80125c0:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	689b      	ldr	r3, [r3, #8]
             ? m_xpr.innerStride()
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7f5 ffdc 	bl	8008584 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 80125cc:	4603      	mov	r3, r0
    }
 80125ce:	4618      	mov	r0, r3
 80125d0:	3708      	adds	r7, #8
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}

080125d6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80125d6:	b580      	push	{r7, lr}
 80125d8:	b082      	sub	sp, #8
 80125da:	af00      	add	r7, sp, #0
 80125dc:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7fb fa1e 	bl	800da24 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 80125e8:	4603      	mov	r3, r0
    }
 80125ea:	4618      	mov	r0, r3
 80125ec:	3708      	adds	r7, #8
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}

080125f2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80125f2:	b480      	push	{r7}
 80125f4:	b083      	sub	sp, #12
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	6078      	str	r0, [r7, #4]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	4618      	mov	r0, r3
 80125fe:	370c      	adds	r7, #12
 8012600:	46bd      	mov	sp, r7
 8012602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012606:	4770      	bx	lr

08012608 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8012608:	b480      	push	{r7}
 801260a:	b083      	sub	sp, #12
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	4618      	mov	r0, r3
 8012616:	370c      	adds	r7, #12
 8012618:	46bd      	mov	sp, r7
 801261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261e:	4770      	bx	lr

08012620 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8012620:	b480      	push	{r7}
 8012622:	b083      	sub	sp, #12
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	685b      	ldr	r3, [r3, #4]
 801262c:	4618      	mov	r0, r3
 801262e:	370c      	adds	r7, #12
 8012630:	46bd      	mov	sp, r7
 8012632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012636:	4770      	bx	lr

08012638 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>:
 8012638:	b480      	push	{r7}
 801263a:	b083      	sub	sp, #12
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	4618      	mov	r0, r3
 8012644:	370c      	adds	r7, #12
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr

0801264e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 801264e:	b580      	push	{r7, lr}
 8012650:	b086      	sub	sp, #24
 8012652:	af00      	add	r7, sp, #0
 8012654:	60f8      	str	r0, [r7, #12]
 8012656:	60b9      	str	r1, [r7, #8]
 8012658:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 801265a:	6879      	ldr	r1, [r7, #4]
 801265c:	68b8      	ldr	r0, [r7, #8]
 801265e:	f000 f9e8 	bl	8012a32 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8012662:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8012664:	6879      	ldr	r1, [r7, #4]
 8012666:	68b8      	ldr	r0, [r7, #8]
 8012668:	f000 f9ef 	bl	8012a4a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 801266c:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 801266e:	693a      	ldr	r2, [r7, #16]
 8012670:	6979      	ldr	r1, [r7, #20]
 8012672:	68f8      	ldr	r0, [r7, #12]
 8012674:	f000 f9f5 	bl	8012a62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8012678:	bf00      	nop
 801267a:	3718      	adds	r7, #24
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012688:	2201      	movs	r2, #1
 801268a:	2100      	movs	r1, #0
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f7ff ffde 	bl	801264e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	f000 fa0b 	bl	8012aae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>
  }
 8012698:	bf00      	nop
 801269a:	3708      	adds	r7, #8
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}

080126a0 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6839      	ldr	r1, [r7, #0]
 80126ae:	4618      	mov	r0, r3
 80126b0:	f000 fa0d 	bl	8012ace <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	4618      	mov	r0, r3
 80126b8:	f000 fa33 	bl	8012b22 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 80126bc:	bf00      	nop
  }
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	4618      	mov	r0, r3
 80126c2:	3708      	adds	r7, #8
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}

080126c8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80126d0:	f7f4 f9b7 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80126d4:	4603      	mov	r3, r0
  }
 80126d6:	4618      	mov	r0, r3
 80126d8:	3708      	adds	r7, #8
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}

080126de <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80126de:	b580      	push	{r7, lr}
 80126e0:	b082      	sub	sp, #8
 80126e2:	af00      	add	r7, sp, #0
 80126e4:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80126e6:	f7f4 f9a4 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80126ea:	4603      	mov	r3, r0
  }
 80126ec:	4618      	mov	r0, r3
 80126ee:	3708      	adds	r7, #8
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}

080126f4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	4618      	mov	r0, r3
 8012700:	f000 fa1b 	bl	8012b3a <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 8012704:	4603      	mov	r3, r0
 8012706:	4618      	mov	r0, r3
 8012708:	3708      	adds	r7, #8
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}

0801270e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801270e:	b480      	push	{r7}
 8012710:	b083      	sub	sp, #12
 8012712:	af00      	add	r7, sp, #0
 8012714:	6078      	str	r0, [r7, #4]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	4618      	mov	r0, r3
 801271a:	370c      	adds	r7, #12
 801271c:	46bd      	mov	sp, r7
 801271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012722:	4770      	bx	lr

08012724 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8012724:	b580      	push	{r7, lr}
 8012726:	b084      	sub	sp, #16
 8012728:	af00      	add	r7, sp, #0
 801272a:	60f8      	str	r0, [r7, #12]
 801272c:	60b9      	str	r1, [r7, #8]
 801272e:	607a      	str	r2, [r7, #4]
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	68b9      	ldr	r1, [r7, #8]
 8012736:	4618      	mov	r0, r3
 8012738:	f000 fa16 	bl	8012b68 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	4618      	mov	r0, r3
 8012740:	3710      	adds	r7, #16
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}

08012746 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8012746:	b480      	push	{r7}
 8012748:	b083      	sub	sp, #12
 801274a:	af00      	add	r7, sp, #0
 801274c:	6078      	str	r0, [r7, #4]
    }
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	4618      	mov	r0, r3
 8012752:	370c      	adds	r7, #12
 8012754:	46bd      	mov	sp, r7
 8012756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275a:	4770      	bx	lr

0801275c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	4618      	mov	r0, r3
 8012768:	f7f9 f83d 	bl	800b7e6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 801276c:	4603      	mov	r3, r0
    }
 801276e:	4618      	mov	r0, r3
 8012770:	3708      	adds	r7, #8
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}

08012776 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8012776:	b580      	push	{r7, lr}
 8012778:	b082      	sub	sp, #8
 801277a:	af00      	add	r7, sp, #0
 801277c:	6078      	str	r0, [r7, #4]
 801277e:	6039      	str	r1, [r7, #0]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	6839      	ldr	r1, [r7, #0]
 8012784:	4618      	mov	r0, r3
 8012786:	f000 fa25 	bl	8012bd4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	4618      	mov	r0, r3
 801278e:	3708      	adds	r7, #8
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8012794:	b480      	push	{r7}
 8012796:	b083      	sub	sp, #12
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	4618      	mov	r0, r3
 80127a0:	370c      	adds	r7, #12
 80127a2:	46bd      	mov	sp, r7
 80127a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a8:	4770      	bx	lr

080127aa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
 80127aa:	b480      	push	{r7}
 80127ac:	b083      	sub	sp, #12
 80127ae:	af00      	add	r7, sp, #0
 80127b0:	6078      	str	r0, [r7, #4]
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	4618      	mov	r0, r3
 80127b6:	370c      	adds	r7, #12
 80127b8:	46bd      	mov	sp, r7
 80127ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127be:	4770      	bx	lr

080127c0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b084      	sub	sp, #16
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	60f8      	str	r0, [r7, #12]
 80127c8:	60b9      	str	r1, [r7, #8]
 80127ca:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80127cc:	68b9      	ldr	r1, [r7, #8]
 80127ce:	68f8      	ldr	r0, [r7, #12]
 80127d0:	f000 fa0f 	bl	8012bf2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>
 80127d4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80127d8:	eeb0 0a67 	vmov.f32	s0, s15
 80127dc:	3710      	adds	r7, #16
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}

080127e2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80127e2:	b580      	push	{r7, lr}
 80127e4:	b082      	sub	sp, #8
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	6078      	str	r0, [r7, #4]
 80127ea:	6039      	str	r1, [r7, #0]
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	6839      	ldr	r1, [r7, #0]
 80127f0:	4618      	mov	r0, r3
 80127f2:	f000 fa22 	bl	8012c3a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	4618      	mov	r0, r3
 80127fa:	3708      	adds	r7, #8
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8012800:	b480      	push	{r7}
 8012802:	b083      	sub	sp, #12
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	4618      	mov	r0, r3
 801280c:	370c      	adds	r7, #12
 801280e:	46bd      	mov	sp, r7
 8012810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012814:	4770      	bx	lr

08012816 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8012816:	b580      	push	{r7, lr}
 8012818:	b082      	sub	sp, #8
 801281a:	af00      	add	r7, sp, #0
 801281c:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	689b      	ldr	r3, [r3, #8]
 8012822:	4618      	mov	r0, r3
 8012824:	f7fb f973 	bl	800db0e <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 8012828:	4603      	mov	r3, r0
    }
 801282a:	4618      	mov	r0, r3
 801282c:	3708      	adds	r7, #8
 801282e:	46bd      	mov	sp, r7
 8012830:	bd80      	pop	{r7, pc}

08012832 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8012832:	b580      	push	{r7, lr}
 8012834:	b082      	sub	sp, #8
 8012836:	af00      	add	r7, sp, #0
 8012838:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	689b      	ldr	r3, [r3, #8]
 801283e:	4618      	mov	r0, r3
 8012840:	f7f4 fcd6 	bl	80071f0 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 8012844:	4603      	mov	r3, r0
    }
 8012846:	4618      	mov	r0, r3
 8012848:	3708      	adds	r7, #8
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}

0801284e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801284e:	b480      	push	{r7}
 8012850:	b083      	sub	sp, #12
 8012852:	af00      	add	r7, sp, #0
 8012854:	6078      	str	r0, [r7, #4]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4618      	mov	r0, r3
 801285a:	370c      	adds	r7, #12
 801285c:	46bd      	mov	sp, r7
 801285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012862:	4770      	bx	lr

08012864 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8012864:	b480      	push	{r7}
 8012866:	b083      	sub	sp, #12
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	4618      	mov	r0, r3
 8012870:	370c      	adds	r7, #12
 8012872:	46bd      	mov	sp, r7
 8012874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012878:	4770      	bx	lr

0801287a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 801287a:	b590      	push	{r4, r7, lr}
 801287c:	b083      	sub	sp, #12
 801287e:	af00      	add	r7, sp, #0
 8012880:	6078      	str	r0, [r7, #4]
 8012882:	6039      	str	r1, [r7, #0]
 8012884:	687c      	ldr	r4, [r7, #4]
 8012886:	6838      	ldr	r0, [r7, #0]
 8012888:	f000 fa14 	bl	8012cb4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 801288c:	4603      	mov	r3, r0
 801288e:	4619      	mov	r1, r3
 8012890:	4620      	mov	r0, r4
 8012892:	f7f2 fe2f 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	1d1c      	adds	r4, r3, #4
 801289a:	6838      	ldr	r0, [r7, #0]
 801289c:	f000 fa16 	bl	8012ccc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>
 80128a0:	4603      	mov	r3, r0
 80128a2:	4619      	mov	r1, r3
 80128a4:	4620      	mov	r0, r4
 80128a6:	f000 fa28 	bl	8012cfa <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f103 0408 	add.w	r4, r3, #8
 80128b0:	6838      	ldr	r0, [r7, #0]
 80128b2:	f000 fa16 	bl	8012ce2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>
 80128b6:	4603      	mov	r3, r0
 80128b8:	4619      	mov	r1, r3
 80128ba:	4620      	mov	r0, r4
 80128bc:	f7f8 fdd9 	bl	800b472 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	4618      	mov	r0, r3
 80128c4:	370c      	adds	r7, #12
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd90      	pop	{r4, r7, pc}

080128ca <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 80128ca:	b580      	push	{r7, lr}
 80128cc:	b084      	sub	sp, #16
 80128ce:	af00      	add	r7, sp, #0
 80128d0:	60f8      	str	r0, [r7, #12]
 80128d2:	60b9      	str	r1, [r7, #8]
 80128d4:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	68ba      	ldr	r2, [r7, #8]
 80128da:	6879      	ldr	r1, [r7, #4]
 80128dc:	4618      	mov	r0, r3
 80128de:	f000 fa1b 	bl	8012d18 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>
 80128e2:	eef0 7a40 	vmov.f32	s15, s0
 80128e6:	eeb0 0a67 	vmov.f32	s0, s15
 80128ea:	3710      	adds	r7, #16
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}

080128f0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b082      	sub	sp, #8
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
 80128f8:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80128fa:	2201      	movs	r2, #1
 80128fc:	2100      	movs	r1, #0
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f7ff ffe3 	bl	80128ca <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8012904:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012908:	eeb0 0a67 	vmov.f32	s0, s15
 801290c:	3708      	adds	r7, #8
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}

08012912 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012912:	b580      	push	{r7, lr}
 8012914:	b082      	sub	sp, #8
 8012916:	af00      	add	r7, sp, #0
 8012918:	6078      	str	r0, [r7, #4]
 801291a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801291c:	2202      	movs	r2, #2
 801291e:	2100      	movs	r1, #0
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f7ff ffd2 	bl	80128ca <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8012926:	eef0 7a40 	vmov.f32	s15, s0
  }
 801292a:	eeb0 0a67 	vmov.f32	s0, s15
 801292e:	3708      	adds	r7, #8
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 8012934:	b580      	push	{r7, lr}
 8012936:	b0a4      	sub	sp, #144	; 0x90
 8012938:	af00      	add	r7, sp, #0
 801293a:	60f8      	str	r0, [r7, #12]
 801293c:	60b9      	str	r1, [r7, #8]
 801293e:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	6819      	ldr	r1, [r3, #0]
 8012944:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012948:	68ba      	ldr	r2, [r7, #8]
 801294a:	4618      	mov	r0, r3
 801294c:	f7f8 fc16 	bl	800b17c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 8012950:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012954:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012958:	4611      	mov	r1, r2
 801295a:	4618      	mov	r0, r3
 801295c:	f7f8 fc21 	bl	800b1a2 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	6859      	ldr	r1, [r3, #4]
 8012964:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	4618      	mov	r0, r3
 801296c:	f000 f9ff 	bl	8012d6e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>
 8012970:	f107 0314 	add.w	r3, r7, #20
 8012974:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012978:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801297c:	4618      	mov	r0, r3
 801297e:	f000 fa09 	bl	8012d94 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8012982:	f107 0314 	add.w	r3, r7, #20
 8012986:	4618      	mov	r0, r3
 8012988:	f000 fa32 	bl	8012df0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>
 801298c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012990:	eeb0 0a67 	vmov.f32	s0, s15
 8012994:	3790      	adds	r7, #144	; 0x90
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}

0801299a <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 801299a:	b480      	push	{r7}
 801299c:	b085      	sub	sp, #20
 801299e:	af00      	add	r7, sp, #0
 80129a0:	60f8      	str	r0, [r7, #12]
 80129a2:	60b9      	str	r1, [r7, #8]
 80129a4:	607a      	str	r2, [r7, #4]
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	ed93 7a00 	vldr	s14, [r3]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	edd3 7a00 	vldr	s15, [r3]
 80129b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80129b6:	68bb      	ldr	r3, [r7, #8]
 80129b8:	edc3 7a00 	vstr	s15, [r3]
 80129bc:	bf00      	nop
 80129be:	3714      	adds	r7, #20
 80129c0:	46bd      	mov	sp, r7
 80129c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c6:	4770      	bx	lr

080129c8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b082      	sub	sp, #8
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80129d0:	2200      	movs	r2, #0
 80129d2:	2101      	movs	r1, #1
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	f7ff f991 	bl	8011cfc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f000 fa23 	bl	8012e26 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>
  }
 80129e0:	bf00      	nop
 80129e2:	3708      	adds	r7, #8
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>:
    const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
 80129e8:	b480      	push	{r7}
 80129ea:	b083      	sub	sp, #12
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
      return m_xpr;
 80129f0:	687b      	ldr	r3, [r7, #4]
    }
 80129f2:	4618      	mov	r0, r3
 80129f4:	370c      	adds	r7, #12
 80129f6:	46bd      	mov	sp, r7
 80129f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fc:	4770      	bx	lr

080129fe <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80129fe:	b480      	push	{r7}
 8012a00:	b083      	sub	sp, #12
 8012a02:	af00      	add	r7, sp, #0
 8012a04:	6078      	str	r0, [r7, #4]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	4618      	mov	r0, r3
 8012a0a:	370c      	adds	r7, #12
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a12:	4770      	bx	lr

08012a14 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	6039      	str	r1, [r7, #0]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6839      	ldr	r1, [r7, #0]
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7f7 fb49 	bl	800a0ba <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	3708      	adds	r7, #8
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}

08012a32 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8012a32:	b480      	push	{r7}
 8012a34:	b083      	sub	sp, #12
 8012a36:	af00      	add	r7, sp, #0
 8012a38:	6078      	str	r0, [r7, #4]
 8012a3a:	6039      	str	r1, [r7, #0]
      : inner;
 8012a3c:	683b      	ldr	r3, [r7, #0]
  }
 8012a3e:	4618      	mov	r0, r3
 8012a40:	370c      	adds	r7, #12
 8012a42:	46bd      	mov	sp, r7
 8012a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a48:	4770      	bx	lr

08012a4a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8012a4a:	b480      	push	{r7}
 8012a4c:	b083      	sub	sp, #12
 8012a4e:	af00      	add	r7, sp, #0
 8012a50:	6078      	str	r0, [r7, #4]
 8012a52:	6039      	str	r1, [r7, #0]
      : outer;
 8012a54:	687b      	ldr	r3, [r7, #4]
  }
 8012a56:	4618      	mov	r0, r3
 8012a58:	370c      	adds	r7, #12
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a60:	4770      	bx	lr

08012a62 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8012a62:	b5b0      	push	{r4, r5, r7, lr}
 8012a64:	b086      	sub	sp, #24
 8012a66:	af00      	add	r7, sp, #0
 8012a68:	60f8      	str	r0, [r7, #12]
 8012a6a:	60b9      	str	r1, [r7, #8]
 8012a6c:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	689c      	ldr	r4, [r3, #8]
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	687a      	ldr	r2, [r7, #4]
 8012a78:	68b9      	ldr	r1, [r7, #8]
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7f6 f83e 	bl	8008afc <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8012a80:	4605      	mov	r5, r0
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	687a      	ldr	r2, [r7, #4]
 8012a88:	68b9      	ldr	r1, [r7, #8]
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f000 f9db 	bl	8012e46 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>
 8012a90:	eef0 7a40 	vmov.f32	s15, s0
 8012a94:	edc7 7a05 	vstr	s15, [r7, #20]
 8012a98:	f107 0314 	add.w	r3, r7, #20
 8012a9c:	461a      	mov	r2, r3
 8012a9e:	4629      	mov	r1, r5
 8012aa0:	4620      	mov	r0, r4
 8012aa2:	f7f5 fd9b 	bl	80085dc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8012aa6:	bf00      	nop
 8012aa8:	3718      	adds	r7, #24
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bdb0      	pop	{r4, r5, r7, pc}

08012aae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012aae:	b580      	push	{r7, lr}
 8012ab0:	b082      	sub	sp, #8
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012ab6:	2202      	movs	r2, #2
 8012ab8:	2100      	movs	r1, #0
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f7ff fdc7 	bl	801264e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f000 f9f3 	bl	8012eac <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>
  }
 8012ac6:	bf00      	nop
 8012ac8:	3708      	adds	r7, #8
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}

08012ace <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8012ace:	b590      	push	{r4, r7, lr}
 8012ad0:	b083      	sub	sp, #12
 8012ad2:	af00      	add	r7, sp, #0
 8012ad4:	6078      	str	r0, [r7, #4]
 8012ad6:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f000 fa13 	bl	8012f04 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	f000 f81e 	bl	8012b22 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 8012ae6:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	601a      	str	r2, [r3, #0]
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	1d1c      	adds	r4, r3, #4
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	4618      	mov	r0, r3
 8012af4:	f000 f9ea 	bl	8012ecc <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>
 8012af8:	4603      	mov	r3, r0
 8012afa:	4619      	mov	r1, r3
 8012afc:	4620      	mov	r0, r4
 8012afe:	f7f3 ff59 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	1d5c      	adds	r4, r3, #5
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f000 f9ed 	bl	8012ee8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	4619      	mov	r1, r3
 8012b12:	4620      	mov	r0, r4
 8012b14:	f7f3 ff68 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	370c      	adds	r7, #12
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd90      	pop	{r4, r7, pc}

08012b22 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>:
 8012b22:	b480      	push	{r7}
 8012b24:	b083      	sub	sp, #12
 8012b26:	af00      	add	r7, sp, #0
 8012b28:	6078      	str	r0, [r7, #4]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	4618      	mov	r0, r3
 8012b30:	370c      	adds	r7, #12
 8012b32:	46bd      	mov	sp, r7
 8012b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b38:	4770      	bx	lr

08012b3a <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8012b3a:	b480      	push	{r7}
 8012b3c:	b083      	sub	sp, #12
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	6078      	str	r0, [r7, #4]
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	4618      	mov	r0, r3
 8012b46:	370c      	adds	r7, #12
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4e:	4770      	bx	lr

08012b50 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f000 f9de 	bl	8012f1a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	4618      	mov	r0, r3
 8012b62:	3708      	adds	r7, #8
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8012b68:	b5b0      	push	{r4, r5, r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	60b9      	str	r1, [r7, #8]
 8012b72:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012b74:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012b76:	68b8      	ldr	r0, [r7, #8]
 8012b78:	f000 f9db 	bl	8012f32 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>
 8012b7c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8012b7e:	68b8      	ldr	r0, [r7, #8]
 8012b80:	f000 f9ff 	bl	8012f82 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8012b84:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	fb02 f303 	mul.w	r3, r2, r3
 8012b8c:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012b8e:	441d      	add	r5, r3
 8012b90:	68b8      	ldr	r0, [r7, #8]
 8012b92:	f7f3 f822 	bl	8005bda <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8012b96:	4602      	mov	r2, r0
 8012b98:	2301      	movs	r3, #1
 8012b9a:	4629      	mov	r1, r5
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f000 fa11 	bl	8012fc4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	3308      	adds	r3, #8
 8012ba6:	68ba      	ldr	r2, [r7, #8]
 8012ba8:	6812      	ldr	r2, [r2, #0]
 8012baa:	601a      	str	r2, [r3, #0]
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	330c      	adds	r3, #12
 8012bb0:	2100      	movs	r1, #0
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f7fa ff8c 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	3310      	adds	r3, #16
 8012bbc:	6879      	ldr	r1, [r7, #4]
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7fa fffa 	bl	800dbb8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 8012bc4:	68f8      	ldr	r0, [r7, #12]
 8012bc6:	f000 fa3b 	bl	8013040 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>
    }
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	3710      	adds	r7, #16
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bdb0      	pop	{r4, r5, r7, pc}

08012bd4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b082      	sub	sp, #8
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	6039      	str	r1, [r7, #0]
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6839      	ldr	r1, [r7, #0]
 8012be2:	4618      	mov	r0, r3
 8012be4:	f000 fa3c 	bl	8013060 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	4618      	mov	r0, r3
 8012bec:	3708      	adds	r7, #8
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}

08012bf2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012bf2:	b580      	push	{r7, lr}
 8012bf4:	b084      	sub	sp, #16
 8012bf6:	af00      	add	r7, sp, #0
 8012bf8:	6078      	str	r0, [r7, #4]
 8012bfa:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012bfc:	6839      	ldr	r1, [r7, #0]
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f000 fa40 	bl	8013084 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>
 8012c04:	eef0 7a40 	vmov.f32	s15, s0
 8012c08:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012c0c:	6839      	ldr	r1, [r7, #0]
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f000 fa49 	bl	80130a6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>
 8012c14:	eef0 7a40 	vmov.f32	s15, s0
 8012c18:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012c1c:	f107 020c 	add.w	r2, r7, #12
 8012c20:	f107 0308 	add.w	r3, r7, #8
 8012c24:	4619      	mov	r1, r3
 8012c26:	6838      	ldr	r0, [r7, #0]
 8012c28:	f7f6 fac9 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012c2c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012c30:	eeb0 0a67 	vmov.f32	s0, s15
 8012c34:	3710      	adds	r7, #16
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}

08012c3a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>:
  explicit product_evaluator(const XprType& xpr)
 8012c3a:	b5b0      	push	{r4, r5, r7, lr}
 8012c3c:	b084      	sub	sp, #16
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	6078      	str	r0, [r7, #4]
 8012c42:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	4618      	mov	r0, r3
 8012c48:	f000 fa51 	bl	80130ee <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	1d1c      	adds	r4, r3, #4
 8012c50:	6838      	ldr	r0, [r7, #0]
 8012c52:	f7f3 f8f9 	bl	8005e48 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8012c56:	4603      	mov	r3, r0
 8012c58:	60bb      	str	r3, [r7, #8]
 8012c5a:	6838      	ldr	r0, [r7, #0]
 8012c5c:	f7f3 f901 	bl	8005e62 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8012c60:	4603      	mov	r3, r0
 8012c62:	60fb      	str	r3, [r7, #12]
 8012c64:	f107 020c 	add.w	r2, r7, #12
 8012c68:	f107 0308 	add.w	r3, r7, #8
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	4620      	mov	r0, r4
 8012c70:	f000 fa4a 	bl	8013108 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	4619      	mov	r1, r3
 8012c78:	2004      	movs	r0, #4
 8012c7a:	f7ee f94f 	bl	8000f1c <_ZnwjPv>
 8012c7e:	4602      	mov	r2, r0
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	3304      	adds	r3, #4
 8012c84:	4619      	mov	r1, r3
 8012c86:	4610      	mov	r0, r2
 8012c88:	f7f7 fbf9 	bl	800a47e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	1d1c      	adds	r4, r3, #4
 8012c90:	6838      	ldr	r0, [r7, #0]
 8012c92:	f000 fa52 	bl	801313a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 8012c96:	4605      	mov	r5, r0
 8012c98:	6838      	ldr	r0, [r7, #0]
 8012c9a:	f000 fa59 	bl	8013150 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	461a      	mov	r2, r3
 8012ca2:	4629      	mov	r1, r5
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	f000 fa5f 	bl	8013168 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>
  }
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	4618      	mov	r0, r3
 8012cae:	3710      	adds	r7, #16
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bdb0      	pop	{r4, r5, r7, pc}

08012cb4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8012cb4:	b480      	push	{r7}
 8012cb6:	b083      	sub	sp, #12
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	3308      	adds	r3, #8
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	370c      	adds	r7, #12
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cca:	4770      	bx	lr

08012ccc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8012ccc:	b480      	push	{r7}
 8012cce:	b083      	sub	sp, #12
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	370c      	adds	r7, #12
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce0:	4770      	bx	lr

08012ce2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8012ce2:	b480      	push	{r7}
 8012ce4:	b083      	sub	sp, #12
 8012ce6:	af00      	add	r7, sp, #0
 8012ce8:	6078      	str	r0, [r7, #4]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	685b      	ldr	r3, [r3, #4]
 8012cee:	4618      	mov	r0, r3
 8012cf0:	370c      	adds	r7, #12
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf8:	4770      	bx	lr

08012cfa <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012cfa:	b580      	push	{r7, lr}
 8012cfc:	b082      	sub	sp, #8
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	6078      	str	r0, [r7, #4]
 8012d02:	6039      	str	r1, [r7, #0]
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	6839      	ldr	r1, [r7, #0]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f000 fa55 	bl	80131b8 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	4618      	mov	r0, r3
 8012d12:	3708      	adds	r7, #8
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}

08012d18 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8012d18:	b590      	push	{r4, r7, lr}
 8012d1a:	b087      	sub	sp, #28
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	60f8      	str	r0, [r7, #12]
 8012d20:	60b9      	str	r1, [r7, #8]
 8012d22:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	4618      	mov	r0, r3
 8012d28:	f000 fa55 	bl	80131d6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 8012d2c:	4604      	mov	r4, r0
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	3304      	adds	r3, #4
 8012d32:	687a      	ldr	r2, [r7, #4]
 8012d34:	68b9      	ldr	r1, [r7, #8]
 8012d36:	4618      	mov	r0, r3
 8012d38:	f000 fa58 	bl	80131ec <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 8012d3c:	eef0 7a40 	vmov.f32	s15, s0
 8012d40:	edc7 7a05 	vstr	s15, [r7, #20]
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	3308      	adds	r3, #8
 8012d48:	687a      	ldr	r2, [r7, #4]
 8012d4a:	68b9      	ldr	r1, [r7, #8]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7fe f9d0 	bl	80110f2 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 8012d52:	4602      	mov	r2, r0
 8012d54:	f107 0314 	add.w	r3, r7, #20
 8012d58:	4619      	mov	r1, r3
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	f7fc fa70 	bl	800f240 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8012d60:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012d64:	eeb0 0a67 	vmov.f32	s0, s15
 8012d68:	371c      	adds	r7, #28
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd90      	pop	{r4, r7, pc}

08012d6e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 8012d6e:	b580      	push	{r7, lr}
 8012d70:	b084      	sub	sp, #16
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	60f8      	str	r0, [r7, #12]
 8012d76:	60b9      	str	r1, [r7, #8]
 8012d78:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8012d7a:	68b8      	ldr	r0, [r7, #8]
 8012d7c:	f7f2 ff6a 	bl	8005c54 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8012d80:	4603      	mov	r3, r0
 8012d82:	687a      	ldr	r2, [r7, #4]
 8012d84:	4619      	mov	r1, r3
 8012d86:	68f8      	ldr	r0, [r7, #12]
 8012d88:	f000 fa46 	bl	8013218 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>
}
 8012d8c:	68f8      	ldr	r0, [r7, #12]
 8012d8e:	3710      	adds	r7, #16
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}

08012d94 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8012d94:	b5b0      	push	{r4, r5, r7, lr}
 8012d96:	b086      	sub	sp, #24
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	60f8      	str	r0, [r7, #12]
 8012d9c:	60b9      	str	r1, [r7, #8]
 8012d9e:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8012da0:	68b8      	ldr	r0, [r7, #8]
 8012da2:	f7f8 ffff 	bl	800bda4 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012da6:	4604      	mov	r4, r0
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f000 fa5d 	bl	8013268 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>
 8012dae:	4605      	mov	r5, r0
 8012db0:	f107 0314 	add.w	r3, r7, #20
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7f2 fb13 	bl	80053e0 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8012dba:	f107 0314 	add.w	r3, r7, #20
 8012dbe:	462a      	mov	r2, r5
 8012dc0:	4621      	mov	r1, r4
 8012dc2:	68f8      	ldr	r0, [r7, #12]
 8012dc4:	f000 fa8a 	bl	80132dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 8012dc8:	68f8      	ldr	r0, [r7, #12]
 8012dca:	3718      	adds	r7, #24
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bdb0      	pop	{r4, r5, r7, pc}

08012dd0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b082      	sub	sp, #8
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f000 fadd 	bl	8013398 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012dde:	4603      	mov	r3, r0
 8012de0:	4618      	mov	r0, r3
 8012de2:	f000 fae4 	bl	80133ae <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>
 8012de6:	4603      	mov	r3, r0
 8012de8:	4618      	mov	r0, r3
 8012dea:	3708      	adds	r7, #8
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}

08012df0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8012df0:	b590      	push	{r4, r7, lr}
 8012df2:	b085      	sub	sp, #20
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8012df8:	6878      	ldr	r0, [r7, #4]
 8012dfa:	f000 facd 	bl	8013398 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012dfe:	4604      	mov	r4, r0
 8012e00:	f107 030c 	add.w	r3, r7, #12
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7f2 fde2 	bl	80059ce <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8012e0a:	f107 030c 	add.w	r3, r7, #12
 8012e0e:	4619      	mov	r1, r3
 8012e10:	4620      	mov	r0, r4
 8012e12:	f000 fb49 	bl	80134a8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8012e16:	eef0 7a40 	vmov.f32	s15, s0
 8012e1a:	bf00      	nop
}
 8012e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8012e20:	3714      	adds	r7, #20
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd90      	pop	{r4, r7, pc}

08012e26 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012e26:	b580      	push	{r7, lr}
 8012e28:	b082      	sub	sp, #8
 8012e2a:	af00      	add	r7, sp, #0
 8012e2c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012e2e:	2201      	movs	r2, #1
 8012e30:	2101      	movs	r1, #1
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	f7fe ff62 	bl	8011cfc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f000 fb7b 	bl	8013534 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>
  }
 8012e3e:	bf00      	nop
 8012e40:	3708      	adds	r7, #8
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}

08012e46 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 8012e46:	b580      	push	{r7, lr}
 8012e48:	b0a4      	sub	sp, #144	; 0x90
 8012e4a:	af00      	add	r7, sp, #0
 8012e4c:	60f8      	str	r0, [r7, #12]
 8012e4e:	60b9      	str	r1, [r7, #8]
 8012e50:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	6819      	ldr	r1, [r3, #0]
 8012e56:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012e5a:	68ba      	ldr	r2, [r7, #8]
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f7f7 ffbd 	bl	800addc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 8012e62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012e66:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012e6a:	4611      	mov	r1, r2
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7f7 ffc8 	bl	800ae02 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	6859      	ldr	r1, [r3, #4]
 8012e76:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012e7a:	687a      	ldr	r2, [r7, #4]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7f9 f9f4 	bl	800c26a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 8012e82:	f107 0314 	add.w	r3, r7, #20
 8012e86:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012e8a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f7f9 f9fe 	bl	800c290 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8012e94:	f107 0314 	add.w	r3, r7, #20
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f7f9 fa27 	bl	800c2ec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 8012e9e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8012ea6:	3790      	adds	r7, #144	; 0x90
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}

08012eac <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	2101      	movs	r1, #1
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f7ff fbc8 	bl	801264e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f000 fb48 	bl	8013554 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>
  }
 8012ec4:	bf00      	nop
 8012ec6:	3708      	adds	r7, #8
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}

08012ecc <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b082      	sub	sp, #8
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	3308      	adds	r3, #8
             ? m_xpr.innerStride()
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f7fd fc40 	bl	801075e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>
 8012ede:	4603      	mov	r3, r0
    }
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	3708      	adds	r7, #8
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd80      	pop	{r7, pc}

08012ee8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b082      	sub	sp, #8
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7fd fc1e 	bl	8010736 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8012efa:	4603      	mov	r3, r0
    }
 8012efc:	4618      	mov	r0, r3
 8012efe:	3708      	adds	r7, #8
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}

08012f04 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012f04:	b480      	push	{r7}
 8012f06:	b083      	sub	sp, #12
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	4618      	mov	r0, r3
 8012f10:	370c      	adds	r7, #12
 8012f12:	46bd      	mov	sp, r7
 8012f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f18:	4770      	bx	lr

08012f1a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 8012f1a:	b580      	push	{r7, lr}
 8012f1c:	b082      	sub	sp, #8
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f000 fb36 	bl	8013594 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>
 8012f28:	4603      	mov	r3, r0
    }
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3708      	adds	r7, #8
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}

08012f32 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 8012f32:	b580      	push	{r7, lr}
 8012f34:	b082      	sub	sp, #8
 8012f36:	af00      	add	r7, sp, #0
 8012f38:	6078      	str	r0, [r7, #4]
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f7f2 fe1e 	bl	8005b7c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012f40:	4603      	mov	r3, r0
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7fe fd63 	bl	8011a0e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7ff fbd2 	bl	80126f4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8012f50:	4603      	mov	r3, r0
 8012f52:	4618      	mov	r0, r3
 8012f54:	3708      	adds	r7, #8
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}

08012f5a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 8012f5a:	b580      	push	{r7, lr}
 8012f5c:	b082      	sub	sp, #8
 8012f5e:	af00      	add	r7, sp, #0
 8012f60:	6078      	str	r0, [r7, #4]
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f7f2 fe0a 	bl	8005b7c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7fe fd4f 	bl	8011a0e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012f70:	4603      	mov	r3, r0
 8012f72:	4618      	mov	r0, r3
 8012f74:	f000 fb30 	bl	80135d8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	3708      	adds	r7, #8
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}

08012f82 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 8012f82:	b580      	push	{r7, lr}
 8012f84:	b082      	sub	sp, #8
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	6078      	str	r0, [r7, #4]
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f7f2 fdf6 	bl	8005b7c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012f90:	4603      	mov	r3, r0
 8012f92:	4618      	mov	r0, r3
 8012f94:	f7fe fd3b 	bl	8011a0e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7ff fdd8 	bl	8012b50 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	3708      	adds	r7, #8
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}

08012faa <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
 8012faa:	b580      	push	{r7, lr}
 8012fac:	b082      	sub	sp, #8
 8012fae:	af00      	add	r7, sp, #0
 8012fb0:	6078      	str	r0, [r7, #4]
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f000 fb1b 	bl	80135ee <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3708      	adds	r7, #8
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
	...

08012fc4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b084      	sub	sp, #16
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	60f8      	str	r0, [r7, #12]
 8012fcc:	60b9      	str	r1, [r7, #8]
 8012fce:	607a      	str	r2, [r7, #4]
 8012fd0:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8012fd2:	68f8      	ldr	r0, [r7, #12]
 8012fd4:	f7ff ffe9 	bl	8012faa <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	68ba      	ldr	r2, [r7, #8]
 8012fdc:	601a      	str	r2, [r3, #0]
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	3304      	adds	r3, #4
 8012fe2:	6879      	ldr	r1, [r7, #4]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7f3 fce5 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	3305      	adds	r3, #5
 8012fee:	6839      	ldr	r1, [r7, #0]
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f7f3 fcf9 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d011      	beq.n	8013020 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	db08      	blt.n	8013014 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2b03      	cmp	r3, #3
 8013006:	d105      	bne.n	8013014 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	2b00      	cmp	r3, #0
 801300c:	db02      	blt.n	8013014 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	2b01      	cmp	r3, #1
 8013012:	d005      	beq.n	8013020 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 8013014:	4b07      	ldr	r3, [pc, #28]	; (8013034 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 8013016:	4a08      	ldr	r2, [pc, #32]	; (8013038 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 8013018:	21b0      	movs	r1, #176	; 0xb0
 801301a:	4808      	ldr	r0, [pc, #32]	; (801303c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 801301c:	f00a fe36 	bl	801dc8c <__assert_func>
      checkSanity<Derived>();
 8013020:	2100      	movs	r1, #0
 8013022:	68f8      	ldr	r0, [r7, #12]
 8013024:	f000 faee 	bl	8013604 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	4618      	mov	r0, r3
 801302c:	3710      	adds	r7, #16
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}
 8013032:	bf00      	nop
 8013034:	08026218 	.word	0x08026218
 8013038:	08028914 	.word	0x08028914
 801303c:	080263c8 	.word	0x080263c8

08013040 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 8013040:	b580      	push	{r7, lr}
 8013042:	b082      	sub	sp, #8
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	3308      	adds	r3, #8
 801304c:	4618      	mov	r0, r3
 801304e:	f7ff ff98 	bl	8012f82 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8013052:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	615a      	str	r2, [r3, #20]
    }
 8013058:	bf00      	nop
 801305a:	3708      	adds	r7, #8
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}

08013060 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8013060:	b580      	push	{r7, lr}
 8013062:	b082      	sub	sp, #8
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	6039      	str	r1, [r7, #0]
 801306a:	6878      	ldr	r0, [r7, #4]
 801306c:	f000 fad5 	bl	801361a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	6839      	ldr	r1, [r7, #0]
 8013074:	4618      	mov	r0, r3
 8013076:	f000 fadb 	bl	8013630 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>
  }
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	4618      	mov	r0, r3
 801307e:	3708      	adds	r7, #8
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
 801308c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801308e:	2200      	movs	r2, #0
 8013090:	2100      	movs	r1, #0
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f000 faf4 	bl	8013680 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8013098:	eef0 7a40 	vmov.f32	s15, s0
  }
 801309c:	eeb0 0a67 	vmov.f32	s0, s15
 80130a0:	3708      	adds	r7, #8
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}

080130a6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80130a6:	b580      	push	{r7, lr}
 80130a8:	b084      	sub	sp, #16
 80130aa:	af00      	add	r7, sp, #0
 80130ac:	6078      	str	r0, [r7, #4]
 80130ae:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80130b0:	6839      	ldr	r1, [r7, #0]
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f000 faf7 	bl	80136a6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>
 80130b8:	eef0 7a40 	vmov.f32	s15, s0
 80130bc:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80130c0:	6839      	ldr	r1, [r7, #0]
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f000 fb00 	bl	80136c8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>
 80130c8:	eef0 7a40 	vmov.f32	s15, s0
 80130cc:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80130d0:	f107 020c 	add.w	r2, r7, #12
 80130d4:	f107 0308 	add.w	r3, r7, #8
 80130d8:	4619      	mov	r1, r3
 80130da:	6838      	ldr	r0, [r7, #0]
 80130dc:	f7f6 f86f 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80130e0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80130e4:	eeb0 0a67 	vmov.f32	s0, s15
 80130e8:	3710      	adds	r7, #16
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}

080130ee <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  evaluator() {}
 80130ee:	b580      	push	{r7, lr}
 80130f0:	b082      	sub	sp, #8
 80130f2:	af00      	add	r7, sp, #0
 80130f4:	6078      	str	r0, [r7, #4]
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	4618      	mov	r0, r3
 80130fa:	f000 faf6 	bl	80136ea <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	4618      	mov	r0, r3
 8013102:	3708      	adds	r7, #8
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}

08013108 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8013108:	b580      	push	{r7, lr}
 801310a:	b084      	sub	sp, #16
 801310c:	af00      	add	r7, sp, #0
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	607a      	str	r2, [r7, #4]
    {
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	4618      	mov	r0, r3
 8013118:	f7f1 fde2 	bl	8004ce0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 801311c:	f7f1 fdf0 	bl	8004d00 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8013120:	68f8      	ldr	r0, [r7, #12]
 8013122:	68bb      	ldr	r3, [r7, #8]
 8013124:	6819      	ldr	r1, [r3, #0]
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681a      	ldr	r2, [r3, #0]
 801312a:	2300      	movs	r3, #0
 801312c:	f000 faef 	bl	801370e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	4618      	mov	r0, r3
 8013134:	3710      	adds	r7, #16
 8013136:	46bd      	mov	sp, r7
 8013138:	bd80      	pop	{r7, pc}

0801313a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 801313a:	b480      	push	{r7}
 801313c:	b083      	sub	sp, #12
 801313e:	af00      	add	r7, sp, #0
 8013140:	6078      	str	r0, [r7, #4]
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	4618      	mov	r0, r3
 8013146:	370c      	adds	r7, #12
 8013148:	46bd      	mov	sp, r7
 801314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314e:	4770      	bx	lr

08013150 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	3308      	adds	r3, #8
 801315c:	4618      	mov	r0, r3
 801315e:	370c      	adds	r7, #12
 8013160:	46bd      	mov	sp, r7
 8013162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013166:	4770      	bx	lr

08013168 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8013168:	b590      	push	{r4, r7, lr}
 801316a:	b08b      	sub	sp, #44	; 0x2c
 801316c:	af00      	add	r7, sp, #0
 801316e:	60f8      	str	r0, [r7, #12]
 8013170:	60b9      	str	r1, [r7, #8]
 8013172:	607a      	str	r2, [r7, #4]
    dst.coeffRef(0,0) = (lhs.transpose().cwiseProduct(rhs)).sum();
 8013174:	f107 0320 	add.w	r3, r7, #32
 8013178:	68b9      	ldr	r1, [r7, #8]
 801317a:	4618      	mov	r0, r3
 801317c:	f000 fadb 	bl	8013736 <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>
 8013180:	f107 0310 	add.w	r3, r7, #16
 8013184:	f107 0120 	add.w	r1, r7, #32
 8013188:	687a      	ldr	r2, [r7, #4]
 801318a:	4618      	mov	r0, r3
 801318c:	f000 fae4 	bl	8013758 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	2200      	movs	r2, #0
 8013194:	2100      	movs	r1, #0
 8013196:	4618      	mov	r0, r3
 8013198:	f7f3 fb99 	bl	80068ce <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 801319c:	4604      	mov	r4, r0
 801319e:	f107 0310 	add.w	r3, r7, #16
 80131a2:	4618      	mov	r0, r3
 80131a4:	f000 fb06 	bl	80137b4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>
 80131a8:	eef0 7a40 	vmov.f32	s15, s0
 80131ac:	edc4 7a00 	vstr	s15, [r4]
  }
 80131b0:	bf00      	nop
 80131b2:	372c      	adds	r7, #44	; 0x2c
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd90      	pop	{r4, r7, pc}

080131b8 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b082      	sub	sp, #8
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	6039      	str	r1, [r7, #0]
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6839      	ldr	r1, [r7, #0]
 80131c6:	4618      	mov	r0, r3
 80131c8:	f000 fb0f 	bl	80137ea <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	4618      	mov	r0, r3
 80131d0:	3708      	adds	r7, #8
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}

080131d6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80131d6:	b480      	push	{r7}
 80131d8:	b083      	sub	sp, #12
 80131da:	af00      	add	r7, sp, #0
 80131dc:	6078      	str	r0, [r7, #4]
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	4618      	mov	r0, r3
 80131e2:	370c      	adds	r7, #12
 80131e4:	46bd      	mov	sp, r7
 80131e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ea:	4770      	bx	lr

080131ec <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b084      	sub	sp, #16
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	60b9      	str	r1, [r7, #8]
 80131f6:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	68ba      	ldr	r2, [r7, #8]
 80131fc:	6879      	ldr	r1, [r7, #4]
 80131fe:	4618      	mov	r0, r3
 8013200:	f000 fb09 	bl	8013816 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8013204:	4603      	mov	r3, r0
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	ee07 3a90 	vmov	s15, r3
  }
 801320c:	eeb0 0a67 	vmov.f32	s0, s15
 8013210:	3710      	adds	r7, #16
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
	...

08013218 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8013218:	b580      	push	{r7, lr}
 801321a:	b084      	sub	sp, #16
 801321c:	af00      	add	r7, sp, #0
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	60b9      	str	r1, [r7, #8]
 8013222:	607a      	str	r2, [r7, #4]
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	687a      	ldr	r2, [r7, #4]
 8013228:	68b9      	ldr	r1, [r7, #8]
 801322a:	4618      	mov	r0, r3
 801322c:	f000 fb0b 	bl	8013846 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2b00      	cmp	r3, #0
 8013234:	db07      	blt.n	8013246 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	4618      	mov	r0, r3
 801323a:	f7f1 ffe7 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801323e:	4602      	mov	r2, r0
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	4293      	cmp	r3, r2
 8013244:	db05      	blt.n	8013252 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 8013246:	4b05      	ldr	r3, [pc, #20]	; (801325c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x44>)
 8013248:	4a05      	ldr	r2, [pc, #20]	; (8013260 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 801324a:	2178      	movs	r1, #120	; 0x78
 801324c:	4805      	ldr	r0, [pc, #20]	; (8013264 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 801324e:	f00a fd1d 	bl	801dc8c <__assert_func>
    }
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	4618      	mov	r0, r3
 8013256:	3710      	adds	r7, #16
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}
 801325c:	08024678 	.word	0x08024678
 8013260:	08028a28 	.word	0x08028a28
 8013264:	080247fc 	.word	0x080247fc

08013268 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013268:	b480      	push	{r7}
 801326a:	b083      	sub	sp, #12
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	4618      	mov	r0, r3
 8013274:	370c      	adds	r7, #12
 8013276:	46bd      	mov	sp, r7
 8013278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327c:	4770      	bx	lr

0801327e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
 801327e:	b580      	push	{r7, lr}
 8013280:	b082      	sub	sp, #8
 8013282:	af00      	add	r7, sp, #0
 8013284:	6078      	str	r0, [r7, #4]
 8013286:	6878      	ldr	r0, [r7, #4]
 8013288:	f000 faee 	bl	8013868 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	4618      	mov	r0, r3
 8013290:	3708      	adds	r7, #8
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}

08013296 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8013296:	b580      	push	{r7, lr}
 8013298:	b082      	sub	sp, #8
 801329a:	af00      	add	r7, sp, #0
 801329c:	6078      	str	r0, [r7, #4]
 801329e:	6878      	ldr	r0, [r7, #4]
 80132a0:	f7ff ffed 	bl	801327e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	4618      	mov	r0, r3
 80132a8:	3708      	adds	r7, #8
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}

080132ae <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 80132ae:	b580      	push	{r7, lr}
 80132b0:	b082      	sub	sp, #8
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	6078      	str	r0, [r7, #4]
 80132b6:	f7f3 fbc4 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80132ba:	4603      	mov	r3, r0
 80132bc:	4618      	mov	r0, r3
 80132be:	3708      	adds	r7, #8
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}

080132c4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b082      	sub	sp, #8
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
 80132cc:	f7f3 fbb9 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80132d0:	4603      	mov	r3, r0
 80132d2:	4618      	mov	r0, r3
 80132d4:	3708      	adds	r7, #8
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}
	...

080132dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80132dc:	b5b0      	push	{r4, r5, r7, lr}
 80132de:	b084      	sub	sp, #16
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	60f8      	str	r0, [r7, #12]
 80132e4:	60b9      	str	r1, [r7, #8]
 80132e6:	607a      	str	r2, [r7, #4]
 80132e8:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80132ea:	68f8      	ldr	r0, [r7, #12]
 80132ec:	f7ff ffd3 	bl	8013296 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 80132f0:	68fa      	ldr	r2, [r7, #12]
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	4614      	mov	r4, r2
 80132f6:	461d      	mov	r5, r3
 80132f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80132fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80132fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013300:	e884 0003 	stmia.w	r4, {r0, r1}
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	f103 0218 	add.w	r2, r3, #24
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	4614      	mov	r4, r2
 801330e:	461d      	mov	r5, r3
 8013310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013314:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013318:	e884 0003 	stmia.w	r4, {r0, r1}
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	3330      	adds	r3, #48	; 0x30
 8013320:	6839      	ldr	r1, [r7, #0]
 8013322:	4618      	mov	r0, r3
 8013324:	f7f2 f8e6 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8013328:	68b8      	ldr	r0, [r7, #8]
 801332a:	f7f8 fd69 	bl	800be00 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 801332e:	4604      	mov	r4, r0
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	4618      	mov	r0, r3
 8013334:	f7ff ffbb 	bl	80132ae <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>
 8013338:	4603      	mov	r3, r0
 801333a:	429c      	cmp	r4, r3
 801333c:	d10a      	bne.n	8013354 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 801333e:	68b8      	ldr	r0, [r7, #8]
 8013340:	f7f8 fd6b 	bl	800be1a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 8013344:	4604      	mov	r4, r0
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	4618      	mov	r0, r3
 801334a:	f7ff ffbb 	bl	80132c4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>
 801334e:	4603      	mov	r3, r0
 8013350:	429c      	cmp	r4, r3
 8013352:	d005      	beq.n	8013360 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 8013354:	4b05      	ldr	r3, [pc, #20]	; (801336c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 8013356:	4a06      	ldr	r2, [pc, #24]	; (8013370 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 8013358:	2174      	movs	r1, #116	; 0x74
 801335a:	4806      	ldr	r0, [pc, #24]	; (8013374 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 801335c:	f00a fc96 	bl	801dc8c <__assert_func>
    }
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	4618      	mov	r0, r3
 8013364:	3710      	adds	r7, #16
 8013366:	46bd      	mov	sp, r7
 8013368:	bdb0      	pop	{r4, r5, r7, pc}
 801336a:	bf00      	nop
 801336c:	0801faf4 	.word	0x0801faf4
 8013370:	08028b04 	.word	0x08028b04
 8013374:	0801fd58 	.word	0x0801fd58

08013378 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8013378:	b580      	push	{r7, lr}
 801337a:	b082      	sub	sp, #8
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f000 f809 	bl	8013398 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8013386:	4603      	mov	r3, r0
 8013388:	4618      	mov	r0, r3
 801338a:	f000 fa78 	bl	801387e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>
 801338e:	4603      	mov	r3, r0
 8013390:	4618      	mov	r0, r3
 8013392:	3708      	adds	r7, #8
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}

08013398 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013398:	b480      	push	{r7}
 801339a:	b083      	sub	sp, #12
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	4618      	mov	r0, r3
 80133a4:	370c      	adds	r7, #12
 80133a6:	46bd      	mov	sp, r7
 80133a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ac:	4770      	bx	lr

080133ae <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80133ae:	b580      	push	{r7, lr}
 80133b0:	b082      	sub	sp, #8
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7f8 fd21 	bl	800be00 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 80133be:	4603      	mov	r3, r0
    }
 80133c0:	4618      	mov	r0, r3
 80133c2:	3708      	adds	r7, #8
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}

080133c8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b082      	sub	sp, #8
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	6878      	ldr	r0, [r7, #4]
 80133d2:	f000 fa7b 	bl	80138cc <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	4618      	mov	r0, r3
 80133da:	3708      	adds	r7, #8
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}

080133e0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b082      	sub	sp, #8
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7ff ffec 	bl	80133c8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	4618      	mov	r0, r3
 80133f4:	3708      	adds	r7, #8
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}

080133fa <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 80133fa:	b580      	push	{r7, lr}
 80133fc:	b082      	sub	sp, #8
 80133fe:	af00      	add	r7, sp, #0
 8013400:	6078      	str	r0, [r7, #4]
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	4618      	mov	r0, r3
 8013406:	f7ff ffeb 	bl	80133e0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	4618      	mov	r0, r3
 801340e:	3708      	adds	r7, #8
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}

08013414 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 8013414:	b580      	push	{r7, lr}
 8013416:	b082      	sub	sp, #8
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	4618      	mov	r0, r3
 8013420:	f7ff ffeb 	bl	80133fa <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	4618      	mov	r0, r3
 8013428:	3708      	adds	r7, #8
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}

0801342e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 801342e:	b580      	push	{r7, lr}
 8013430:	b082      	sub	sp, #8
 8013432:	af00      	add	r7, sp, #0
 8013434:	6078      	str	r0, [r7, #4]
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	330c      	adds	r3, #12
 801343a:	4618      	mov	r0, r3
 801343c:	f7ff ffea 	bl	8013414 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	3304      	adds	r3, #4
 8013444:	4618      	mov	r0, r3
 8013446:	f7f8 fdcf 	bl	800bfe8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	4618      	mov	r0, r3
 801344e:	3708      	adds	r7, #8
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}

08013454 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8013454:	b580      	push	{r7, lr}
 8013456:	b082      	sub	sp, #8
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	4618      	mov	r0, r3
 8013460:	f7ff ffe5 	bl	801342e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f000 fa26 	bl	80138b6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	4618      	mov	r0, r3
 801346e:	3708      	adds	r7, #8
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}

08013474 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	4618      	mov	r0, r3
 8013480:	f7ff ffe8 	bl	8013454 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	4618      	mov	r0, r3
 8013488:	3708      	adds	r7, #8
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}

0801348e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 801348e:	b580      	push	{r7, lr}
 8013490:	b082      	sub	sp, #8
 8013492:	af00      	add	r7, sp, #0
 8013494:	6078      	str	r0, [r7, #4]
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	4618      	mov	r0, r3
 801349a:	f7ff ffeb 	bl	8013474 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	4618      	mov	r0, r3
 80134a2:	3708      	adds	r7, #8
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}

080134a8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 80134a8:	b580      	push	{r7, lr}
 80134aa:	ed2d 8b02 	vpush	{d8}
 80134ae:	b088      	sub	sp, #32
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
 80134b4:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f7ff fc8a 	bl	8012dd0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>
 80134bc:	4603      	mov	r3, r0
 80134be:	2b00      	cmp	r3, #0
 80134c0:	dd05      	ble.n	80134ce <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f7ff ff58 	bl	8013378 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>
 80134c8:	4603      	mov	r3, r0
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	dc06      	bgt.n	80134dc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80134ce:	4b16      	ldr	r3, [pc, #88]	; (8013528 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 80134d0:	4a16      	ldr	r2, [pc, #88]	; (801352c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 80134d2:	f240 119b 	movw	r1, #411	; 0x19b
 80134d6:	4816      	ldr	r0, [pc, #88]	; (8013530 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80134d8:	f00a fbd8 	bl	801dc8c <__assert_func>
 80134dc:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	f7ff ff5a 	bl	8013398 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 80134e4:	4602      	mov	r2, r0
 80134e6:	f107 030c 	add.w	r3, r7, #12
 80134ea:	4611      	mov	r1, r2
 80134ec:	4618      	mov	r0, r3
 80134ee:	f000 f9d3 	bl	8013898 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f7ff ff50 	bl	8013398 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 80134f8:	4602      	mov	r2, r0
 80134fa:	f107 030c 	add.w	r3, r7, #12
 80134fe:	6839      	ldr	r1, [r7, #0]
 8013500:	4618      	mov	r0, r3
 8013502:	f000 f9ee 	bl	80138e2 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 8013506:	eeb0 8a40 	vmov.f32	s16, s0
 801350a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801350c:	f107 030c 	add.w	r3, r7, #12
 8013510:	4618      	mov	r0, r3
 8013512:	f7ff ffbc 	bl	801348e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013516:	eef0 7a48 	vmov.f32	s15, s16
}
 801351a:	eeb0 0a67 	vmov.f32	s0, s15
 801351e:	3720      	adds	r7, #32
 8013520:	46bd      	mov	sp, r7
 8013522:	ecbd 8b02 	vpop	{d8}
 8013526:	bd80      	pop	{r7, pc}
 8013528:	08024b74 	.word	0x08024b74
 801352c:	08028d50 	.word	0x08028d50
 8013530:	08024d80 	.word	0x08024d80

08013534 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013534:	b580      	push	{r7, lr}
 8013536:	b082      	sub	sp, #8
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801353c:	2202      	movs	r2, #2
 801353e:	2101      	movs	r1, #1
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f7fe fbdb 	bl	8011cfc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013546:	6878      	ldr	r0, [r7, #4]
 8013548:	f000 f9dc 	bl	8013904 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>
  }
 801354c:	bf00      	nop
 801354e:	3708      	adds	r7, #8
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}

08013554 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013554:	b580      	push	{r7, lr}
 8013556:	b082      	sub	sp, #8
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801355c:	2201      	movs	r2, #1
 801355e:	2101      	movs	r1, #1
 8013560:	6878      	ldr	r0, [r7, #4]
 8013562:	f7ff f874 	bl	801264e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	f000 f9dc 	bl	8013924 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>
  }
 801356c:	bf00      	nop
 801356e:	3708      	adds	r7, #8
 8013570:	46bd      	mov	sp, r7
 8013572:	bd80      	pop	{r7, pc}

08013574 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8013574:	b580      	push	{r7, lr}
 8013576:	b082      	sub	sp, #8
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f7f2 fb69 	bl	8005c54 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8013582:	4603      	mov	r3, r0
 8013584:	4618      	mov	r0, r3
 8013586:	f7f1 fe4c 	bl	8005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801358a:	4603      	mov	r3, r0
 801358c:	4618      	mov	r0, r3
 801358e:	3708      	adds	r7, #8
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}

08013594 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8013594:	b590      	push	{r4, r7, lr}
 8013596:	b083      	sub	sp, #12
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f7ff ffe9 	bl	8013574 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80135a2:	4604      	mov	r4, r0
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f000 f807 	bl	80135b8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80135aa:	4603      	mov	r3, r0
 80135ac:	fb04 f303 	mul.w	r3, r4, r3
 80135b0:	4618      	mov	r0, r3
 80135b2:	370c      	adds	r7, #12
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd90      	pop	{r4, r7, pc}

080135b8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b082      	sub	sp, #8
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f7f2 fb47 	bl	8005c54 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80135c6:	4603      	mov	r3, r0
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7f1 fe1f 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80135ce:	4603      	mov	r3, r0
 80135d0:	4618      	mov	r0, r3
 80135d2:	3708      	adds	r7, #8
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}

080135d8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 80135d8:	b480      	push	{r7}
 80135da:	b083      	sub	sp, #12
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
 80135e0:	2301      	movs	r3, #1
 80135e2:	4618      	mov	r0, r3
 80135e4:	370c      	adds	r7, #12
 80135e6:	46bd      	mov	sp, r7
 80135e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ec:	4770      	bx	lr

080135ee <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80135ee:	b480      	push	{r7}
 80135f0:	b083      	sub	sp, #12
 80135f2:	af00      	add	r7, sp, #0
 80135f4:	6078      	str	r0, [r7, #4]
    }
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	4618      	mov	r0, r3
 80135fa:	370c      	adds	r7, #12
 80135fc:	46bd      	mov	sp, r7
 80135fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013602:	4770      	bx	lr

08013604 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8013604:	b480      	push	{r7}
 8013606:	b083      	sub	sp, #12
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
 801360c:	6039      	str	r1, [r7, #0]
    {}
 801360e:	bf00      	nop
 8013610:	370c      	adds	r7, #12
 8013612:	46bd      	mov	sp, r7
 8013614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013618:	4770      	bx	lr

0801361a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801361a:	b480      	push	{r7}
 801361c:	b083      	sub	sp, #12
 801361e:	af00      	add	r7, sp, #0
 8013620:	6078      	str	r0, [r7, #4]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	4618      	mov	r0, r3
 8013626:	370c      	adds	r7, #12
 8013628:	46bd      	mov	sp, r7
 801362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362e:	4770      	bx	lr

08013630 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8013630:	b590      	push	{r4, r7, lr}
 8013632:	b083      	sub	sp, #12
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	6039      	str	r1, [r7, #0]
 801363a:	687c      	ldr	r4, [r7, #4]
 801363c:	6838      	ldr	r0, [r7, #0]
 801363e:	f000 f981 	bl	8013944 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>
 8013642:	4603      	mov	r3, r0
 8013644:	4619      	mov	r1, r3
 8013646:	4620      	mov	r0, r4
 8013648:	f7f1 ff54 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	1d1c      	adds	r4, r3, #4
 8013650:	6838      	ldr	r0, [r7, #0]
 8013652:	f000 f983 	bl	801395c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>
 8013656:	4603      	mov	r3, r0
 8013658:	4619      	mov	r1, r3
 801365a:	4620      	mov	r0, r4
 801365c:	f7fb fa91 	bl	800eb82 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	f103 040c 	add.w	r4, r3, #12
 8013666:	6838      	ldr	r0, [r7, #0]
 8013668:	f000 f983 	bl	8013972 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>
 801366c:	4603      	mov	r3, r0
 801366e:	4619      	mov	r1, r3
 8013670:	4620      	mov	r0, r4
 8013672:	f000 f98a 	bl	801398a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	4618      	mov	r0, r3
 801367a:	370c      	adds	r7, #12
 801367c:	46bd      	mov	sp, r7
 801367e:	bd90      	pop	{r4, r7, pc}

08013680 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013680:	b580      	push	{r7, lr}
 8013682:	b084      	sub	sp, #16
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	68ba      	ldr	r2, [r7, #8]
 8013690:	6879      	ldr	r1, [r7, #4]
 8013692:	4618      	mov	r0, r3
 8013694:	f000 f988 	bl	80139a8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>
 8013698:	eef0 7a40 	vmov.f32	s15, s0
 801369c:	eeb0 0a67 	vmov.f32	s0, s15
 80136a0:	3710      	adds	r7, #16
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}

080136a6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80136a6:	b580      	push	{r7, lr}
 80136a8:	b082      	sub	sp, #8
 80136aa:	af00      	add	r7, sp, #0
 80136ac:	6078      	str	r0, [r7, #4]
 80136ae:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80136b0:	2201      	movs	r2, #1
 80136b2:	2100      	movs	r1, #0
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f7ff ffe3 	bl	8013680 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80136ba:	eef0 7a40 	vmov.f32	s15, s0
  }
 80136be:	eeb0 0a67 	vmov.f32	s0, s15
 80136c2:	3708      	adds	r7, #8
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}

080136c8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80136d2:	2202      	movs	r2, #2
 80136d4:	2100      	movs	r1, #0
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f7ff ffd2 	bl	8013680 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80136dc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80136e0:	eeb0 0a67 	vmov.f32	s0, s15
 80136e4:	3708      	adds	r7, #8
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}

080136ea <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  evaluator()
 80136ea:	b580      	push	{r7, lr}
 80136ec:	b082      	sub	sp, #8
 80136ee:	af00      	add	r7, sp, #0
 80136f0:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f7f7 fd37 	bl	800b166 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2200      	movs	r2, #0
 80136fc:	2100      	movs	r1, #0
 80136fe:	4618      	mov	r0, r3
 8013700:	f7f3 fcbd 	bl	800707e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	4618      	mov	r0, r3
 8013708:	3708      	adds	r7, #8
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}

0801370e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 801370e:	b580      	push	{r7, lr}
 8013710:	b086      	sub	sp, #24
 8013712:	af00      	add	r7, sp, #0
 8013714:	60f8      	str	r0, [r7, #12]
 8013716:	60b9      	str	r1, [r7, #8]
 8013718:	607a      	str	r2, [r7, #4]
 801371a:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 801371c:	2301      	movs	r3, #1
 801371e:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8013720:	2301      	movs	r3, #1
 8013722:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8013724:	687a      	ldr	r2, [r7, #4]
 8013726:	68b9      	ldr	r1, [r7, #8]
 8013728:	68f8      	ldr	r0, [r7, #12]
 801372a:	f7f9 fef9 	bl	800d520 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    }
 801372e:	bf00      	nop
 8013730:	3718      	adds	r7, #24
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}

08013736 <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8013736:	b580      	push	{r7, lr}
 8013738:	b082      	sub	sp, #8
 801373a:	af00      	add	r7, sp, #0
 801373c:	6078      	str	r0, [r7, #4]
 801373e:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8013740:	6838      	ldr	r0, [r7, #0]
 8013742:	f7f2 fae5 	bl	8005d10 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8013746:	4603      	mov	r3, r0
 8013748:	4619      	mov	r1, r3
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f000 f974 	bl	8013a38 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>
}
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	3708      	adds	r7, #8
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8013758:	b5b0      	push	{r4, r5, r7, lr}
 801375a:	b086      	sub	sp, #24
 801375c:	af00      	add	r7, sp, #0
 801375e:	60f8      	str	r0, [r7, #12]
 8013760:	60b9      	str	r1, [r7, #8]
 8013762:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8013764:	68b8      	ldr	r0, [r7, #8]
 8013766:	f000 f97a 	bl	8013a5e <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>
 801376a:	4604      	mov	r4, r0
 801376c:	6878      	ldr	r0, [r7, #4]
 801376e:	f7f2 fa05 	bl	8005b7c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8013772:	4605      	mov	r5, r0
 8013774:	f107 0314 	add.w	r3, r7, #20
 8013778:	4618      	mov	r0, r3
 801377a:	f7f1 fe31 	bl	80053e0 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 801377e:	f107 0314 	add.w	r3, r7, #20
 8013782:	462a      	mov	r2, r5
 8013784:	4621      	mov	r1, r4
 8013786:	68f8      	ldr	r0, [r7, #12]
 8013788:	f000 f9a6 	bl	8013ad8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>
}
 801378c:	68f8      	ldr	r0, [r7, #12]
 801378e:	3718      	adds	r7, #24
 8013790:	46bd      	mov	sp, r7
 8013792:	bdb0      	pop	{r4, r5, r7, pc}

08013794 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f000 f9eb 	bl	8013b78 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 80137a2:	4603      	mov	r3, r0
 80137a4:	4618      	mov	r0, r3
 80137a6:	f000 f9f2 	bl	8013b8e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>
 80137aa:	4603      	mov	r3, r0
 80137ac:	4618      	mov	r0, r3
 80137ae:	3708      	adds	r7, #8
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bd80      	pop	{r7, pc}

080137b4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>:
DenseBase<Derived>::sum() const
 80137b4:	b590      	push	{r4, r7, lr}
 80137b6:	b085      	sub	sp, #20
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 80137bc:	6878      	ldr	r0, [r7, #4]
 80137be:	f000 f9db 	bl	8013b78 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 80137c2:	4604      	mov	r4, r0
 80137c4:	f107 030c 	add.w	r3, r7, #12
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7f2 f900 	bl	80059ce <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80137ce:	f107 030c 	add.w	r3, r7, #12
 80137d2:	4619      	mov	r1, r3
 80137d4:	4620      	mov	r0, r4
 80137d6:	f000 fa83 	bl	8013ce0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 80137da:	eef0 7a40 	vmov.f32	s15, s0
 80137de:	bf00      	nop
}
 80137e0:	eeb0 0a67 	vmov.f32	s0, s15
 80137e4:	3714      	adds	r7, #20
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd90      	pop	{r4, r7, pc}

080137ea <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80137ea:	b590      	push	{r4, r7, lr}
 80137ec:	b083      	sub	sp, #12
 80137ee:	af00      	add	r7, sp, #0
 80137f0:	6078      	str	r0, [r7, #4]
 80137f2:	6039      	str	r1, [r7, #0]
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f000 fac5 	bl	8013d84 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80137fa:	687c      	ldr	r4, [r7, #4]
 80137fc:	6838      	ldr	r0, [r7, #0]
 80137fe:	f000 fab5 	bl	8013d6c <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8013802:	4603      	mov	r3, r0
 8013804:	4619      	mov	r1, r3
 8013806:	4620      	mov	r0, r4
 8013808:	f000 fac7 	bl	8013d9a <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	4618      	mov	r0, r3
 8013810:	370c      	adds	r7, #12
 8013812:	46bd      	mov	sp, r7
 8013814:	bd90      	pop	{r4, r7, pc}

08013816 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013816:	b590      	push	{r4, r7, lr}
 8013818:	b085      	sub	sp, #20
 801381a:	af00      	add	r7, sp, #0
 801381c:	60f8      	str	r0, [r7, #12]
 801381e:	60b9      	str	r1, [r7, #8]
 8013820:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	681c      	ldr	r4, [r3, #0]
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	4618      	mov	r0, r3
 801382a:	f7f3 fb5d 	bl	8006ee8 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 801382e:	4602      	mov	r2, r0
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	fb03 f202 	mul.w	r2, r3, r2
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	4413      	add	r3, r2
 801383a:	009b      	lsls	r3, r3, #2
 801383c:	4423      	add	r3, r4
  }
 801383e:	4618      	mov	r0, r3
 8013840:	3714      	adds	r7, #20
 8013842:	46bd      	mov	sp, r7
 8013844:	bd90      	pop	{r4, r7, pc}

08013846 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8013846:	b580      	push	{r7, lr}
 8013848:	b084      	sub	sp, #16
 801384a:	af00      	add	r7, sp, #0
 801384c:	60f8      	str	r0, [r7, #12]
 801384e:	60b9      	str	r1, [r7, #8]
 8013850:	607a      	str	r2, [r7, #4]
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	687a      	ldr	r2, [r7, #4]
 8013856:	68b9      	ldr	r1, [r7, #8]
 8013858:	4618      	mov	r0, r3
 801385a:	f000 faad 	bl	8013db8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	4618      	mov	r0, r3
 8013862:	3710      	adds	r7, #16
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013868:	b480      	push	{r7}
 801386a:	b083      	sub	sp, #12
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
    }
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	4618      	mov	r0, r3
 8013874:	370c      	adds	r7, #12
 8013876:	46bd      	mov	sp, r7
 8013878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387c:	4770      	bx	lr

0801387e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 801387e:	b580      	push	{r7, lr}
 8013880:	b082      	sub	sp, #8
 8013882:	af00      	add	r7, sp, #0
 8013884:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	4618      	mov	r0, r3
 801388a:	f7f8 fac6 	bl	800be1a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 801388e:	4603      	mov	r3, r0
    }
 8013890:	4618      	mov	r0, r3
 8013892:	3708      	adds	r7, #8
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}

08013898 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8013898:	b580      	push	{r7, lr}
 801389a:	b082      	sub	sp, #8
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
 80138a0:	6039      	str	r1, [r7, #0]
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	6839      	ldr	r1, [r7, #0]
 80138a6:	4618      	mov	r0, r3
 80138a8:	f000 fab7 	bl	8013e1a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	4618      	mov	r0, r3
 80138b0:	3708      	adds	r7, #8
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}

080138b6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80138b6:	b480      	push	{r7}
 80138b8:	b083      	sub	sp, #12
 80138ba:	af00      	add	r7, sp, #0
 80138bc:	6078      	str	r0, [r7, #4]
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	4618      	mov	r0, r3
 80138c2:	370c      	adds	r7, #12
 80138c4:	46bd      	mov	sp, r7
 80138c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ca:	4770      	bx	lr

080138cc <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
 80138cc:	b480      	push	{r7}
 80138ce:	b083      	sub	sp, #12
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	4618      	mov	r0, r3
 80138d8:	370c      	adds	r7, #12
 80138da:	46bd      	mov	sp, r7
 80138dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e0:	4770      	bx	lr

080138e2 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80138e2:	b580      	push	{r7, lr}
 80138e4:	b084      	sub	sp, #16
 80138e6:	af00      	add	r7, sp, #0
 80138e8:	60f8      	str	r0, [r7, #12]
 80138ea:	60b9      	str	r1, [r7, #8]
 80138ec:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80138ee:	68b9      	ldr	r1, [r7, #8]
 80138f0:	68f8      	ldr	r0, [r7, #12]
 80138f2:	f000 faa1 	bl	8013e38 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 80138f6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80138fa:	eeb0 0a67 	vmov.f32	s0, s15
 80138fe:	3710      	adds	r7, #16
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}

08013904 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013904:	b580      	push	{r7, lr}
 8013906:	b082      	sub	sp, #8
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801390c:	2200      	movs	r2, #0
 801390e:	2102      	movs	r1, #2
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f7fe f9f3 	bl	8011cfc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013916:	6878      	ldr	r0, [r7, #4]
 8013918:	f000 fa9f 	bl	8013e5a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>
  }
 801391c:	bf00      	nop
 801391e:	3708      	adds	r7, #8
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}

08013924 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013924:	b580      	push	{r7, lr}
 8013926:	b082      	sub	sp, #8
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801392c:	2202      	movs	r2, #2
 801392e:	2101      	movs	r1, #1
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f7fe fe8c 	bl	801264e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f000 fa9f 	bl	8013e7a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>
  }
 801393c:	bf00      	nop
 801393e:	3708      	adds	r7, #8
 8013940:	46bd      	mov	sp, r7
 8013942:	bd80      	pop	{r7, pc}

08013944 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8013944:	b480      	push	{r7}
 8013946:	b083      	sub	sp, #12
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	3330      	adds	r3, #48	; 0x30
 8013950:	4618      	mov	r0, r3
 8013952:	370c      	adds	r7, #12
 8013954:	46bd      	mov	sp, r7
 8013956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395a:	4770      	bx	lr

0801395c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 801395c:	b480      	push	{r7}
 801395e:	b083      	sub	sp, #12
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	4618      	mov	r0, r3
 8013968:	370c      	adds	r7, #12
 801396a:	46bd      	mov	sp, r7
 801396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013970:	4770      	bx	lr

08013972 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8013972:	b480      	push	{r7}
 8013974:	b083      	sub	sp, #12
 8013976:	af00      	add	r7, sp, #0
 8013978:	6078      	str	r0, [r7, #4]
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	3318      	adds	r3, #24
 801397e:	4618      	mov	r0, r3
 8013980:	370c      	adds	r7, #12
 8013982:	46bd      	mov	sp, r7
 8013984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013988:	4770      	bx	lr

0801398a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801398a:	b580      	push	{r7, lr}
 801398c:	b082      	sub	sp, #8
 801398e:	af00      	add	r7, sp, #0
 8013990:	6078      	str	r0, [r7, #4]
 8013992:	6039      	str	r1, [r7, #0]
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6839      	ldr	r1, [r7, #0]
 8013998:	4618      	mov	r0, r3
 801399a:	f000 fa7e 	bl	8013e9a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	4618      	mov	r0, r3
 80139a2:	3708      	adds	r7, #8
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}

080139a8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80139a8:	b590      	push	{r4, r7, lr}
 80139aa:	b087      	sub	sp, #28
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	60f8      	str	r0, [r7, #12]
 80139b0:	60b9      	str	r1, [r7, #8]
 80139b2:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	4618      	mov	r0, r3
 80139b8:	f000 fa7e 	bl	8013eb8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>
 80139bc:	4604      	mov	r4, r0
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	3304      	adds	r3, #4
 80139c2:	687a      	ldr	r2, [r7, #4]
 80139c4:	68b9      	ldr	r1, [r7, #8]
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7fb fdf6 	bl	800f5b8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 80139cc:	eef0 7a40 	vmov.f32	s15, s0
 80139d0:	edc7 7a04 	vstr	s15, [r7, #16]
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	330c      	adds	r3, #12
 80139d8:	687a      	ldr	r2, [r7, #4]
 80139da:	68b9      	ldr	r1, [r7, #8]
 80139dc:	4618      	mov	r0, r3
 80139de:	f000 fa76 	bl	8013ece <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 80139e2:	eef0 7a40 	vmov.f32	s15, s0
 80139e6:	edc7 7a05 	vstr	s15, [r7, #20]
 80139ea:	f107 0214 	add.w	r2, r7, #20
 80139ee:	f107 0310 	add.w	r3, r7, #16
 80139f2:	4619      	mov	r1, r3
 80139f4:	4620      	mov	r0, r4
 80139f6:	f7fb fc23 	bl	800f240 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80139fa:	eef0 7a40 	vmov.f32	s15, s0
  }
 80139fe:	eeb0 0a67 	vmov.f32	s0, s15
 8013a02:	371c      	adds	r7, #28
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd90      	pop	{r4, r7, pc}

08013a08 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b082      	sub	sp, #8
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f000 fa7d 	bl	8013f10 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	4618      	mov	r0, r3
 8013a1a:	3708      	adds	r7, #8
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	bd80      	pop	{r7, pc}

08013a20 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b082      	sub	sp, #8
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	f7ff ffed 	bl	8013a08 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	4618      	mov	r0, r3
 8013a32:	3708      	adds	r7, #8
 8013a34:	46bd      	mov	sp, r7
 8013a36:	bd80      	pop	{r7, pc}

08013a38 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b082      	sub	sp, #8
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
 8013a40:	6039      	str	r1, [r7, #0]
 8013a42:	6878      	ldr	r0, [r7, #4]
 8013a44:	f7ff ffec 	bl	8013a20 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	683a      	ldr	r2, [r7, #0]
 8013a4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a50:	e883 0003 	stmia.w	r3, {r0, r1}
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	4618      	mov	r0, r3
 8013a58:	3708      	adds	r7, #8
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}

08013a5e <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013a5e:	b480      	push	{r7}
 8013a60:	b083      	sub	sp, #12
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	6078      	str	r0, [r7, #4]
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	4618      	mov	r0, r3
 8013a6a:	370c      	adds	r7, #12
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a72:	4770      	bx	lr

08013a74 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b082      	sub	sp, #8
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f000 fa52 	bl	8013f26 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	4618      	mov	r0, r3
 8013a86:	3708      	adds	r7, #8
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f7ff ffed 	bl	8013a74 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	3708      	adds	r7, #8
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}

08013aa4 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b082      	sub	sp, #8
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7f2 f95d 	bl	8005d6e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	3708      	adds	r7, #8
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}

08013abe <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8013abe:	b580      	push	{r7, lr}
 8013ac0:	b082      	sub	sp, #8
 8013ac2:	af00      	add	r7, sp, #0
 8013ac4:	6078      	str	r0, [r7, #4]
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	4618      	mov	r0, r3
 8013aca:	f7f3 f8c2 	bl	8006c52 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	3708      	adds	r7, #8
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}

08013ad8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8013ad8:	b590      	push	{r4, r7, lr}
 8013ada:	b085      	sub	sp, #20
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	60f8      	str	r0, [r7, #12]
 8013ae0:	60b9      	str	r1, [r7, #8]
 8013ae2:	607a      	str	r2, [r7, #4]
 8013ae4:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8013ae6:	68f8      	ldr	r0, [r7, #12]
 8013ae8:	f7ff ffd0 	bl	8013a8c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	68ba      	ldr	r2, [r7, #8]
 8013af0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013af4:	e883 0003 	stmia.w	r3, {r0, r1}
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	3308      	adds	r3, #8
 8013afc:	687a      	ldr	r2, [r7, #4]
 8013afe:	6812      	ldr	r2, [r2, #0]
 8013b00:	601a      	str	r2, [r3, #0]
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	330c      	adds	r3, #12
 8013b06:	6839      	ldr	r1, [r7, #0]
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7f1 fcf3 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8013b0e:	68b8      	ldr	r0, [r7, #8]
 8013b10:	f7ff ffc8 	bl	8013aa4 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8013b14:	4604      	mov	r4, r0
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f7f2 f85f 	bl	8005bda <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	429c      	cmp	r4, r3
 8013b20:	d109      	bne.n	8013b36 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x5e>
 8013b22:	68b8      	ldr	r0, [r7, #8]
 8013b24:	f7ff ffcb 	bl	8013abe <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8013b28:	4604      	mov	r4, r0
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f7f3 f89f 	bl	8006c6e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013b30:	4603      	mov	r3, r0
 8013b32:	429c      	cmp	r4, r3
 8013b34:	d005      	beq.n	8013b42 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x6a>
 8013b36:	4b05      	ldr	r3, [pc, #20]	; (8013b4c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x74>)
 8013b38:	4a05      	ldr	r2, [pc, #20]	; (8013b50 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x78>)
 8013b3a:	2174      	movs	r1, #116	; 0x74
 8013b3c:	4805      	ldr	r0, [pc, #20]	; (8013b54 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x7c>)
 8013b3e:	f00a f8a5 	bl	801dc8c <__assert_func>
    }
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	4618      	mov	r0, r3
 8013b46:	3714      	adds	r7, #20
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd90      	pop	{r4, r7, pc}
 8013b4c:	0801faf4 	.word	0x0801faf4
 8013b50:	08028f18 	.word	0x08028f18
 8013b54:	0801fd58 	.word	0x0801fd58

08013b58 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b082      	sub	sp, #8
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
 8013b60:	6878      	ldr	r0, [r7, #4]
 8013b62:	f000 f809 	bl	8013b78 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013b66:	4603      	mov	r3, r0
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f000 f9e7 	bl	8013f3c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	4618      	mov	r0, r3
 8013b72:	3708      	adds	r7, #8
 8013b74:	46bd      	mov	sp, r7
 8013b76:	bd80      	pop	{r7, pc}

08013b78 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013b78:	b480      	push	{r7}
 8013b7a:	b083      	sub	sp, #12
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	4618      	mov	r0, r3
 8013b84:	370c      	adds	r7, #12
 8013b86:	46bd      	mov	sp, r7
 8013b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8c:	4770      	bx	lr

08013b8e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8013b8e:	b580      	push	{r7, lr}
 8013b90:	b082      	sub	sp, #8
 8013b92:	af00      	add	r7, sp, #0
 8013b94:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7ff ff83 	bl	8013aa4 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8013b9e:	4603      	mov	r3, r0
    }
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	3708      	adds	r7, #8
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}

08013ba8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b082      	sub	sp, #8
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f7fb fa2e 	bl	800f014 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3708      	adds	r7, #8
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}

08013bc2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8013bc2:	b580      	push	{r7, lr}
 8013bc4:	b082      	sub	sp, #8
 8013bc6:	af00      	add	r7, sp, #0
 8013bc8:	6078      	str	r0, [r7, #4]
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7ff ffeb 	bl	8013ba8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3708      	adds	r7, #8
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}

08013bdc <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<const T>
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b082      	sub	sp, #8
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7ff ffeb 	bl	8013bc2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3708      	adds	r7, #8
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}

08013bf6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8013bf6:	b580      	push	{r7, lr}
 8013bf8:	b082      	sub	sp, #8
 8013bfa:	af00      	add	r7, sp, #0
 8013bfc:	6078      	str	r0, [r7, #4]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7ff ffeb 	bl	8013bdc <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f000 f9bf 	bl	8013f8a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3708      	adds	r7, #8
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}

08013c16 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8013c16:	b580      	push	{r7, lr}
 8013c18:	b082      	sub	sp, #8
 8013c1a:	af00      	add	r7, sp, #0
 8013c1c:	6078      	str	r0, [r7, #4]
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7ff ffe8 	bl	8013bf6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3708      	adds	r7, #8
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}

08013c30 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator<const T>
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b082      	sub	sp, #8
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7ff ffeb 	bl	8013c16 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	4618      	mov	r0, r3
 8013c44:	3708      	adds	r7, #8
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}

08013c4a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 8013c4a:	b580      	push	{r7, lr}
 8013c4c:	b082      	sub	sp, #8
 8013c4e:	af00      	add	r7, sp, #0
 8013c50:	6078      	str	r0, [r7, #4]
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7fb f9fa 	bl	800f04e <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	3708      	adds	r7, #8
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}

08013c64 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	3314      	adds	r3, #20
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7ff ffea 	bl	8013c4a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	3304      	adds	r3, #4
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f7ff ffd8 	bl	8013c30 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	4618      	mov	r0, r3
 8013c84:	3708      	adds	r7, #8
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}

08013c8a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8013c8a:	b580      	push	{r7, lr}
 8013c8c:	b082      	sub	sp, #8
 8013c8e:	af00      	add	r7, sp, #0
 8013c90:	6078      	str	r0, [r7, #4]
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	4618      	mov	r0, r3
 8013c96:	f7ff ffe5 	bl	8013c64 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f000 f96a 	bl	8013f74 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3708      	adds	r7, #8
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}

08013caa <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8013caa:	b580      	push	{r7, lr}
 8013cac:	b082      	sub	sp, #8
 8013cae:	af00      	add	r7, sp, #0
 8013cb0:	6078      	str	r0, [r7, #4]
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7ff ffe8 	bl	8013c8a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3708      	adds	r7, #8
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}

08013cc4 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b082      	sub	sp, #8
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f7ff ffeb 	bl	8013caa <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3708      	adds	r7, #8
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
	...

08013ce0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	ed2d 8b02 	vpush	{d8}
 8013ce6:	b088      	sub	sp, #32
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8013cee:	6878      	ldr	r0, [r7, #4]
 8013cf0:	f7ff fd50 	bl	8013794 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	dd05      	ble.n	8013d06 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f7ff ff2c 	bl	8013b58 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>
 8013d00:	4603      	mov	r3, r0
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	dc06      	bgt.n	8013d14 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8013d06:	4b16      	ldr	r3, [pc, #88]	; (8013d60 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8013d08:	4a16      	ldr	r2, [pc, #88]	; (8013d64 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8013d0a:	f240 119b 	movw	r1, #411	; 0x19b
 8013d0e:	4816      	ldr	r0, [pc, #88]	; (8013d68 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8013d10:	f009 ffbc 	bl	801dc8c <__assert_func>
 8013d14:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f7ff ff2e 	bl	8013b78 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013d1c:	4602      	mov	r2, r0
 8013d1e:	f107 0308 	add.w	r3, r7, #8
 8013d22:	4611      	mov	r1, r2
 8013d24:	4618      	mov	r0, r3
 8013d26:	f000 f916 	bl	8013f56 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f7ff ff24 	bl	8013b78 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013d30:	4602      	mov	r2, r0
 8013d32:	f107 0308 	add.w	r3, r7, #8
 8013d36:	6839      	ldr	r1, [r7, #0]
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f000 f931 	bl	8013fa0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 8013d3e:	eeb0 8a40 	vmov.f32	s16, s0
 8013d42:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013d44:	f107 0308 	add.w	r3, r7, #8
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7ff ffbb 	bl	8013cc4 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013d4e:	eef0 7a48 	vmov.f32	s15, s16
}
 8013d52:	eeb0 0a67 	vmov.f32	s0, s15
 8013d56:	3720      	adds	r7, #32
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	ecbd 8b02 	vpop	{d8}
 8013d5e:	bd80      	pop	{r7, pc}
 8013d60:	08024b74 	.word	0x08024b74
 8013d64:	08029164 	.word	0x08029164
 8013d68:	08024d80 	.word	0x08024d80

08013d6c <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8013d6c:	b480      	push	{r7}
 8013d6e:	b083      	sub	sp, #12
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	4618      	mov	r0, r3
 8013d7a:	370c      	adds	r7, #12
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d82:	4770      	bx	lr

08013d84 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013d84:	b480      	push	{r7}
 8013d86:	b083      	sub	sp, #12
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	4618      	mov	r0, r3
 8013d90:	370c      	adds	r7, #12
 8013d92:	46bd      	mov	sp, r7
 8013d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d98:	4770      	bx	lr

08013d9a <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013d9a:	b580      	push	{r7, lr}
 8013d9c:	b082      	sub	sp, #8
 8013d9e:	af00      	add	r7, sp, #0
 8013da0:	6078      	str	r0, [r7, #4]
 8013da2:	6039      	str	r1, [r7, #0]
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	6839      	ldr	r1, [r7, #0]
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7fd fe47 	bl	8011a3c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	4618      	mov	r0, r3
 8013db2:	3708      	adds	r7, #8
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}

08013db8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8013db8:	b5b0      	push	{r4, r5, r7, lr}
 8013dba:	b084      	sub	sp, #16
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	60f8      	str	r0, [r7, #12]
 8013dc0:	60b9      	str	r1, [r7, #8]
 8013dc2:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8013dc4:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013dc6:	68bb      	ldr	r3, [r7, #8]
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7fe fc93 	bl	80126f4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8013dce:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8013dd0:	68b8      	ldr	r0, [r7, #8]
 8013dd2:	f7ff fc01 	bl	80135d8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8013dd6:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	fb02 f303 	mul.w	r3, r2, r3
 8013dde:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8013de0:	18e9      	adds	r1, r5, r3
 8013de2:	2301      	movs	r3, #1
 8013de4:	2201      	movs	r2, #1
 8013de6:	4620      	mov	r0, r4
 8013de8:	f000 f8f8 	bl	8013fdc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	68ba      	ldr	r2, [r7, #8]
 8013df0:	609a      	str	r2, [r3, #8]
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	330c      	adds	r3, #12
 8013df6:	2100      	movs	r1, #0
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7f9 fedd 	bl	800dbb8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	3310      	adds	r3, #16
 8013e02:	6879      	ldr	r1, [r7, #4]
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7f9 fe63 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8013e0a:	68f8      	ldr	r0, [r7, #12]
 8013e0c:	f000 f924 	bl	8014058 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>
    }
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	4618      	mov	r0, r3
 8013e14:	3710      	adds	r7, #16
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bdb0      	pop	{r4, r5, r7, pc}

08013e1a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8013e1a:	b580      	push	{r7, lr}
 8013e1c:	b082      	sub	sp, #8
 8013e1e:	af00      	add	r7, sp, #0
 8013e20:	6078      	str	r0, [r7, #4]
 8013e22:	6039      	str	r1, [r7, #0]
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	6839      	ldr	r1, [r7, #0]
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f000 f925 	bl	8014078 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	4618      	mov	r0, r3
 8013e32:	3708      	adds	r7, #8
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}

08013e38 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b082      	sub	sp, #8
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013e42:	2200      	movs	r2, #0
 8013e44:	2100      	movs	r1, #0
 8013e46:	6878      	ldr	r0, [r7, #4]
 8013e48:	f000 f928 	bl	801409c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8013e4c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013e50:	eeb0 0a67 	vmov.f32	s0, s15
 8013e54:	3708      	adds	r7, #8
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd80      	pop	{r7, pc}

08013e5a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013e5a:	b580      	push	{r7, lr}
 8013e5c:	b082      	sub	sp, #8
 8013e5e:	af00      	add	r7, sp, #0
 8013e60:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013e62:	2201      	movs	r2, #1
 8013e64:	2102      	movs	r1, #2
 8013e66:	6878      	ldr	r0, [r7, #4]
 8013e68:	f7fd ff48 	bl	8011cfc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013e6c:	6878      	ldr	r0, [r7, #4]
 8013e6e:	f000 f928 	bl	80140c2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>
  }
 8013e72:	bf00      	nop
 8013e74:	3708      	adds	r7, #8
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}

08013e7a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013e7a:	b580      	push	{r7, lr}
 8013e7c:	b082      	sub	sp, #8
 8013e7e:	af00      	add	r7, sp, #0
 8013e80:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013e82:	2200      	movs	r2, #0
 8013e84:	2102      	movs	r1, #2
 8013e86:	6878      	ldr	r0, [r7, #4]
 8013e88:	f7fe fbe1 	bl	801264e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f000 f928 	bl	80140e2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>
  }
 8013e92:	bf00      	nop
 8013e94:	3708      	adds	r7, #8
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}

08013e9a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8013e9a:	b580      	push	{r7, lr}
 8013e9c:	b082      	sub	sp, #8
 8013e9e:	af00      	add	r7, sp, #0
 8013ea0:	6078      	str	r0, [r7, #4]
 8013ea2:	6039      	str	r1, [r7, #0]
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	6839      	ldr	r1, [r7, #0]
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f000 f92a 	bl	8014102 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>
  }
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3708      	adds	r7, #8
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}

08013eb8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8013eb8:	b480      	push	{r7}
 8013eba:	b083      	sub	sp, #12
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	370c      	adds	r7, #12
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ecc:	4770      	bx	lr

08013ece <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013ece:	b5b0      	push	{r4, r5, r7, lr}
 8013ed0:	b084      	sub	sp, #16
 8013ed2:	af00      	add	r7, sp, #0
 8013ed4:	60f8      	str	r0, [r7, #12]
 8013ed6:	60b9      	str	r1, [r7, #8]
 8013ed8:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	681c      	ldr	r4, [r3, #0]
 8013ede:	68f8      	ldr	r0, [r7, #12]
 8013ee0:	f000 f923 	bl	801412a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8013ee4:	4602      	mov	r2, r0
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	fb03 f502 	mul.w	r5, r3, r2
 8013eec:	68f8      	ldr	r0, [r7, #12]
 8013eee:	f000 f927 	bl	8014140 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8013ef2:	4602      	mov	r2, r0
 8013ef4:	68bb      	ldr	r3, [r7, #8]
 8013ef6:	fb02 f303 	mul.w	r3, r2, r3
 8013efa:	442b      	add	r3, r5
 8013efc:	009b      	lsls	r3, r3, #2
 8013efe:	4423      	add	r3, r4
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	ee07 3a90 	vmov	s15, r3
  }
 8013f06:	eeb0 0a67 	vmov.f32	s0, s15
 8013f0a:	3710      	adds	r7, #16
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bdb0      	pop	{r4, r5, r7, pc}

08013f10 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013f10:	b480      	push	{r7}
 8013f12:	b083      	sub	sp, #12
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
    }
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	370c      	adds	r7, #12
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f24:	4770      	bx	lr

08013f26 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013f26:	b480      	push	{r7}
 8013f28:	b083      	sub	sp, #12
 8013f2a:	af00      	add	r7, sp, #0
 8013f2c:	6078      	str	r0, [r7, #4]
    }
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	4618      	mov	r0, r3
 8013f32:	370c      	adds	r7, #12
 8013f34:	46bd      	mov	sp, r7
 8013f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3a:	4770      	bx	lr

08013f3c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b082      	sub	sp, #8
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7ff fdb9 	bl	8013abe <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8013f4c:	4603      	mov	r3, r0
    }
 8013f4e:	4618      	mov	r0, r3
 8013f50:	3708      	adds	r7, #8
 8013f52:	46bd      	mov	sp, r7
 8013f54:	bd80      	pop	{r7, pc}

08013f56 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8013f56:	b580      	push	{r7, lr}
 8013f58:	b082      	sub	sp, #8
 8013f5a:	af00      	add	r7, sp, #0
 8013f5c:	6078      	str	r0, [r7, #4]
 8013f5e:	6039      	str	r1, [r7, #0]
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6839      	ldr	r1, [r7, #0]
 8013f64:	4618      	mov	r0, r3
 8013f66:	f000 f8f6 	bl	8014156 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	3708      	adds	r7, #8
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}

08013f74 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8013f74:	b480      	push	{r7}
 8013f76:	b083      	sub	sp, #12
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	4618      	mov	r0, r3
 8013f80:	370c      	adds	r7, #12
 8013f82:	46bd      	mov	sp, r7
 8013f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f88:	4770      	bx	lr

08013f8a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
 8013f8a:	b480      	push	{r7}
 8013f8c:	b083      	sub	sp, #12
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	6078      	str	r0, [r7, #4]
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	4618      	mov	r0, r3
 8013f96:	370c      	adds	r7, #12
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9e:	4770      	bx	lr

08013fa0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b084      	sub	sp, #16
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	60f8      	str	r0, [r7, #12]
 8013fa8:	60b9      	str	r1, [r7, #8]
 8013faa:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8013fac:	68b9      	ldr	r1, [r7, #8]
 8013fae:	68f8      	ldr	r0, [r7, #12]
 8013fb0:	f000 f8e0 	bl	8014174 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>
 8013fb4:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8013fbc:	3710      	adds	r7, #16
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	bd80      	pop	{r7, pc}

08013fc2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
 8013fc2:	b580      	push	{r7, lr}
 8013fc4:	b082      	sub	sp, #8
 8013fc6:	af00      	add	r7, sp, #0
 8013fc8:	6078      	str	r0, [r7, #4]
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f000 f8f6 	bl	80141bc <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	3708      	adds	r7, #8
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}
	...

08013fdc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b084      	sub	sp, #16
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	60f8      	str	r0, [r7, #12]
 8013fe4:	60b9      	str	r1, [r7, #8]
 8013fe6:	607a      	str	r2, [r7, #4]
 8013fe8:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8013fea:	68f8      	ldr	r0, [r7, #12]
 8013fec:	f7ff ffe9 	bl	8013fc2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	68ba      	ldr	r2, [r7, #8]
 8013ff4:	601a      	str	r2, [r3, #0]
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	3304      	adds	r3, #4
 8013ffa:	6879      	ldr	r1, [r7, #4]
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7f2 fcf3 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	3305      	adds	r3, #5
 8014006:	6839      	ldr	r1, [r7, #0]
 8014008:	4618      	mov	r0, r3
 801400a:	f7f2 fced 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d011      	beq.n	8014038 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2b00      	cmp	r3, #0
 8014018:	db08      	blt.n	801402c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2b01      	cmp	r3, #1
 801401e:	d105      	bne.n	801402c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	2b00      	cmp	r3, #0
 8014024:	db02      	blt.n	801402c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	2b01      	cmp	r3, #1
 801402a:	d005      	beq.n	8014038 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 801402c:	4b07      	ldr	r3, [pc, #28]	; (801404c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 801402e:	4a08      	ldr	r2, [pc, #32]	; (8014050 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 8014030:	21b0      	movs	r1, #176	; 0xb0
 8014032:	4808      	ldr	r0, [pc, #32]	; (8014054 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 8014034:	f009 fe2a 	bl	801dc8c <__assert_func>
      checkSanity<Derived>();
 8014038:	2100      	movs	r1, #0
 801403a:	68f8      	ldr	r0, [r7, #12]
 801403c:	f000 f8c9 	bl	80141d2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	4618      	mov	r0, r3
 8014044:	3710      	adds	r7, #16
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	08026218 	.word	0x08026218
 8014050:	0802932c 	.word	0x0802932c
 8014054:	080263c8 	.word	0x080263c8

08014058 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 8014058:	b580      	push	{r7, lr}
 801405a:	b082      	sub	sp, #8
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	689b      	ldr	r3, [r3, #8]
 8014064:	4618      	mov	r0, r3
 8014066:	f7fe fd73 	bl	8012b50 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 801406a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	615a      	str	r2, [r3, #20]
    }
 8014070:	bf00      	nop
 8014072:	3708      	adds	r7, #8
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}

08014078 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8014078:	b580      	push	{r7, lr}
 801407a:	b082      	sub	sp, #8
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
 8014080:	6039      	str	r1, [r7, #0]
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f000 f8b0 	bl	80141e8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6839      	ldr	r1, [r7, #0]
 801408c:	4618      	mov	r0, r3
 801408e:	f000 f8b6 	bl	80141fe <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	4618      	mov	r0, r3
 8014096:	3708      	adds	r7, #8
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}

0801409c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 801409c:	b580      	push	{r7, lr}
 801409e:	b084      	sub	sp, #16
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	60f8      	str	r0, [r7, #12]
 80140a4:	60b9      	str	r1, [r7, #8]
 80140a6:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	687a      	ldr	r2, [r7, #4]
 80140ac:	68b9      	ldr	r1, [r7, #8]
 80140ae:	4618      	mov	r0, r3
 80140b0:	f000 f8cd 	bl	801424e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 80140b4:	eef0 7a40 	vmov.f32	s15, s0
 80140b8:	eeb0 0a67 	vmov.f32	s0, s15
 80140bc:	3710      	adds	r7, #16
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}

080140c2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80140c2:	b580      	push	{r7, lr}
 80140c4:	b082      	sub	sp, #8
 80140c6:	af00      	add	r7, sp, #0
 80140c8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80140ca:	2202      	movs	r2, #2
 80140cc:	2102      	movs	r1, #2
 80140ce:	6878      	ldr	r0, [r7, #4]
 80140d0:	f7fd fe14 	bl	8011cfc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	f000 f8ea 	bl	80142ae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>
  }
 80140da:	bf00      	nop
 80140dc:	3708      	adds	r7, #8
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}

080140e2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80140e2:	b580      	push	{r7, lr}
 80140e4:	b082      	sub	sp, #8
 80140e6:	af00      	add	r7, sp, #0
 80140e8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80140ea:	2201      	movs	r2, #1
 80140ec:	2102      	movs	r1, #2
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f7fe faad 	bl	801264e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f000 f8e4 	bl	80142c2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>
  }
 80140fa:	bf00      	nop
 80140fc:	3708      	adds	r7, #8
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}

08014102 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8014102:	b580      	push	{r7, lr}
 8014104:	b082      	sub	sp, #8
 8014106:	af00      	add	r7, sp, #0
 8014108:	6078      	str	r0, [r7, #4]
 801410a:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	6839      	ldr	r1, [r7, #0]
 8014110:	4618      	mov	r0, r3
 8014112:	f000 f8e6 	bl	80142e2 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	4618      	mov	r0, r3
 801411a:	f000 f90c 	bl	8014336 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 801411e:	bf00      	nop
  }
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	4618      	mov	r0, r3
 8014124:	3708      	adds	r7, #8
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}

0801412a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 801412a:	b580      	push	{r7, lr}
 801412c:	b082      	sub	sp, #8
 801412e:	af00      	add	r7, sp, #0
 8014130:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8014132:	f7f2 fc7e 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8014136:	4603      	mov	r3, r0
  }
 8014138:	4618      	mov	r0, r3
 801413a:	3708      	adds	r7, #8
 801413c:	46bd      	mov	sp, r7
 801413e:	bd80      	pop	{r7, pc}

08014140 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8014140:	b580      	push	{r7, lr}
 8014142:	b082      	sub	sp, #8
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8014148:	f7f2 fc7b 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801414c:	4603      	mov	r3, r0
  }
 801414e:	4618      	mov	r0, r3
 8014150:	3708      	adds	r7, #8
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}

08014156 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014156:	b580      	push	{r7, lr}
 8014158:	b082      	sub	sp, #8
 801415a:	af00      	add	r7, sp, #0
 801415c:	6078      	str	r0, [r7, #4]
 801415e:	6039      	str	r1, [r7, #0]
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6839      	ldr	r1, [r7, #0]
 8014164:	4618      	mov	r0, r3
 8014166:	f000 f8f2 	bl	801434e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	4618      	mov	r0, r3
 801416e:	3708      	adds	r7, #8
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}

08014174 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8014174:	b580      	push	{r7, lr}
 8014176:	b084      	sub	sp, #16
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
 801417c:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801417e:	6839      	ldr	r1, [r7, #0]
 8014180:	6878      	ldr	r0, [r7, #4]
 8014182:	f000 f8f6 	bl	8014372 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>
 8014186:	eef0 7a40 	vmov.f32	s15, s0
 801418a:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 801418e:	6839      	ldr	r1, [r7, #0]
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f000 f8ff 	bl	8014394 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>
 8014196:	eef0 7a40 	vmov.f32	s15, s0
 801419a:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801419e:	f107 020c 	add.w	r2, r7, #12
 80141a2:	f107 0308 	add.w	r3, r7, #8
 80141a6:	4619      	mov	r1, r3
 80141a8:	6838      	ldr	r0, [r7, #0]
 80141aa:	f7f5 f808 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80141ae:	eef0 7a40 	vmov.f32	s15, s0
  }
 80141b2:	eeb0 0a67 	vmov.f32	s0, s15
 80141b6:	3710      	adds	r7, #16
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}

080141bc <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80141bc:	b480      	push	{r7}
 80141be:	b083      	sub	sp, #12
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
    }
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	4618      	mov	r0, r3
 80141c8:	370c      	adds	r7, #12
 80141ca:	46bd      	mov	sp, r7
 80141cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d0:	4770      	bx	lr

080141d2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 80141d2:	b480      	push	{r7}
 80141d4:	b083      	sub	sp, #12
 80141d6:	af00      	add	r7, sp, #0
 80141d8:	6078      	str	r0, [r7, #4]
 80141da:	6039      	str	r1, [r7, #0]
    {}
 80141dc:	bf00      	nop
 80141de:	370c      	adds	r7, #12
 80141e0:	46bd      	mov	sp, r7
 80141e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e6:	4770      	bx	lr

080141e8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80141e8:	b480      	push	{r7}
 80141ea:	b083      	sub	sp, #12
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	4618      	mov	r0, r3
 80141f4:	370c      	adds	r7, #12
 80141f6:	46bd      	mov	sp, r7
 80141f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fc:	4770      	bx	lr

080141fe <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80141fe:	b590      	push	{r4, r7, lr}
 8014200:	b083      	sub	sp, #12
 8014202:	af00      	add	r7, sp, #0
 8014204:	6078      	str	r0, [r7, #4]
 8014206:	6039      	str	r1, [r7, #0]
 8014208:	687c      	ldr	r4, [r7, #4]
 801420a:	6838      	ldr	r0, [r7, #0]
 801420c:	f000 f8e6 	bl	80143dc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>
 8014210:	4603      	mov	r3, r0
 8014212:	4619      	mov	r1, r3
 8014214:	4620      	mov	r0, r4
 8014216:	f7f1 f96d 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	1d1c      	adds	r4, r3, #4
 801421e:	6838      	ldr	r0, [r7, #0]
 8014220:	f000 f8e8 	bl	80143f4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>
 8014224:	4603      	mov	r3, r0
 8014226:	4619      	mov	r1, r3
 8014228:	4620      	mov	r0, r4
 801422a:	f7fa ffac 	bl	800f186 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f103 040c 	add.w	r4, r3, #12
 8014234:	6838      	ldr	r0, [r7, #0]
 8014236:	f000 f8e8 	bl	801440a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>
 801423a:	4603      	mov	r3, r0
 801423c:	4619      	mov	r1, r3
 801423e:	4620      	mov	r0, r4
 8014240:	f000 f8ef 	bl	8014422 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	4618      	mov	r0, r3
 8014248:	370c      	adds	r7, #12
 801424a:	46bd      	mov	sp, r7
 801424c:	bd90      	pop	{r4, r7, pc}

0801424e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801424e:	b590      	push	{r4, r7, lr}
 8014250:	b087      	sub	sp, #28
 8014252:	af00      	add	r7, sp, #0
 8014254:	60f8      	str	r0, [r7, #12]
 8014256:	60b9      	str	r1, [r7, #8]
 8014258:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	4618      	mov	r0, r3
 801425e:	f000 f8ef 	bl	8014440 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8014262:	4604      	mov	r4, r0
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	3304      	adds	r3, #4
 8014268:	687a      	ldr	r2, [r7, #4]
 801426a:	68b9      	ldr	r1, [r7, #8]
 801426c:	4618      	mov	r0, r3
 801426e:	f7fa ffb3 	bl	800f1d8 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8014272:	eef0 7a40 	vmov.f32	s15, s0
 8014276:	edc7 7a04 	vstr	s15, [r7, #16]
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	330c      	adds	r3, #12
 801427e:	687a      	ldr	r2, [r7, #4]
 8014280:	68b9      	ldr	r1, [r7, #8]
 8014282:	4618      	mov	r0, r3
 8014284:	f000 f8e7 	bl	8014456 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 8014288:	eef0 7a40 	vmov.f32	s15, s0
 801428c:	edc7 7a05 	vstr	s15, [r7, #20]
 8014290:	f107 0214 	add.w	r2, r7, #20
 8014294:	f107 0310 	add.w	r3, r7, #16
 8014298:	4619      	mov	r1, r3
 801429a:	4620      	mov	r0, r4
 801429c:	f7fa ffd0 	bl	800f240 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80142a0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80142a4:	eeb0 0a67 	vmov.f32	s0, s15
 80142a8:	371c      	adds	r7, #28
 80142aa:	46bd      	mov	sp, r7
 80142ac:	bd90      	pop	{r4, r7, pc}

080142ae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80142ae:	b480      	push	{r7}
 80142b0:	b083      	sub	sp, #12
 80142b2:	af00      	add	r7, sp, #0
 80142b4:	6078      	str	r0, [r7, #4]
 80142b6:	bf00      	nop
 80142b8:	370c      	adds	r7, #12
 80142ba:	46bd      	mov	sp, r7
 80142bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c0:	4770      	bx	lr

080142c2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80142c2:	b580      	push	{r7, lr}
 80142c4:	b082      	sub	sp, #8
 80142c6:	af00      	add	r7, sp, #0
 80142c8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80142ca:	2202      	movs	r2, #2
 80142cc:	2102      	movs	r1, #2
 80142ce:	6878      	ldr	r0, [r7, #4]
 80142d0:	f7fe f9bd 	bl	801264e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f000 f8df 	bl	8014498 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>
  }
 80142da:	bf00      	nop
 80142dc:	3708      	adds	r7, #8
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd80      	pop	{r7, pc}

080142e2 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 80142e2:	b590      	push	{r4, r7, lr}
 80142e4:	b083      	sub	sp, #12
 80142e6:	af00      	add	r7, sp, #0
 80142e8:	6078      	str	r0, [r7, #4]
 80142ea:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f000 f8f9 	bl	80144e4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	4618      	mov	r0, r3
 80142f6:	f000 f81e 	bl	8014336 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 80142fa:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	601a      	str	r2, [r3, #0]
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	1d1c      	adds	r4, r3, #4
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	4618      	mov	r0, r3
 8014308:	f000 f8d0 	bl	80144ac <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>
 801430c:	4603      	mov	r3, r0
 801430e:	4619      	mov	r1, r3
 8014310:	4620      	mov	r0, r4
 8014312:	f7f2 fb69 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	1d5c      	adds	r4, r3, #5
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	4618      	mov	r0, r3
 801431e:	f000 f8d3 	bl	80144c8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8014322:	4603      	mov	r3, r0
 8014324:	4619      	mov	r1, r3
 8014326:	4620      	mov	r0, r4
 8014328:	f7f2 fb44 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	4618      	mov	r0, r3
 8014330:	370c      	adds	r7, #12
 8014332:	46bd      	mov	sp, r7
 8014334:	bd90      	pop	{r4, r7, pc}

08014336 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8014336:	b480      	push	{r7}
 8014338:	b083      	sub	sp, #12
 801433a:	af00      	add	r7, sp, #0
 801433c:	6078      	str	r0, [r7, #4]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	4618      	mov	r0, r3
 8014344:	370c      	adds	r7, #12
 8014346:	46bd      	mov	sp, r7
 8014348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434c:	4770      	bx	lr

0801434e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801434e:	b580      	push	{r7, lr}
 8014350:	b082      	sub	sp, #8
 8014352:	af00      	add	r7, sp, #0
 8014354:	6078      	str	r0, [r7, #4]
 8014356:	6039      	str	r1, [r7, #0]
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	f000 f8ce 	bl	80144fa <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	6839      	ldr	r1, [r7, #0]
 8014362:	4618      	mov	r0, r3
 8014364:	f000 f8d4 	bl	8014510 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	4618      	mov	r0, r3
 801436c:	3708      	adds	r7, #8
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}

08014372 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8014372:	b580      	push	{r7, lr}
 8014374:	b082      	sub	sp, #8
 8014376:	af00      	add	r7, sp, #0
 8014378:	6078      	str	r0, [r7, #4]
 801437a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801437c:	2200      	movs	r2, #0
 801437e:	2100      	movs	r1, #0
 8014380:	6878      	ldr	r0, [r7, #4]
 8014382:	f000 f8ed 	bl	8014560 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8014386:	eef0 7a40 	vmov.f32	s15, s0
  }
 801438a:	eeb0 0a67 	vmov.f32	s0, s15
 801438e:	3708      	adds	r7, #8
 8014390:	46bd      	mov	sp, r7
 8014392:	bd80      	pop	{r7, pc}

08014394 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8014394:	b580      	push	{r7, lr}
 8014396:	b084      	sub	sp, #16
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
 801439c:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801439e:	6839      	ldr	r1, [r7, #0]
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f000 f8f0 	bl	8014586 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>
 80143a6:	eef0 7a40 	vmov.f32	s15, s0
 80143aa:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80143ae:	6839      	ldr	r1, [r7, #0]
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f000 f8f9 	bl	80145a8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>
 80143b6:	eef0 7a40 	vmov.f32	s15, s0
 80143ba:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80143be:	f107 020c 	add.w	r2, r7, #12
 80143c2:	f107 0308 	add.w	r3, r7, #8
 80143c6:	4619      	mov	r1, r3
 80143c8:	6838      	ldr	r0, [r7, #0]
 80143ca:	f7f4 fef8 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80143ce:	eef0 7a40 	vmov.f32	s15, s0
  }
 80143d2:	eeb0 0a67 	vmov.f32	s0, s15
 80143d6:	3710      	adds	r7, #16
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}

080143dc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80143dc:	b480      	push	{r7}
 80143de:	b083      	sub	sp, #12
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	3330      	adds	r3, #48	; 0x30
 80143e8:	4618      	mov	r0, r3
 80143ea:	370c      	adds	r7, #12
 80143ec:	46bd      	mov	sp, r7
 80143ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f2:	4770      	bx	lr

080143f4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80143f4:	b480      	push	{r7}
 80143f6:	b083      	sub	sp, #12
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	4618      	mov	r0, r3
 8014400:	370c      	adds	r7, #12
 8014402:	46bd      	mov	sp, r7
 8014404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014408:	4770      	bx	lr

0801440a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 801440a:	b480      	push	{r7}
 801440c:	b083      	sub	sp, #12
 801440e:	af00      	add	r7, sp, #0
 8014410:	6078      	str	r0, [r7, #4]
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	3318      	adds	r3, #24
 8014416:	4618      	mov	r0, r3
 8014418:	370c      	adds	r7, #12
 801441a:	46bd      	mov	sp, r7
 801441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014420:	4770      	bx	lr

08014422 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8014422:	b580      	push	{r7, lr}
 8014424:	b082      	sub	sp, #8
 8014426:	af00      	add	r7, sp, #0
 8014428:	6078      	str	r0, [r7, #4]
 801442a:	6039      	str	r1, [r7, #0]
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	6839      	ldr	r1, [r7, #0]
 8014430:	4618      	mov	r0, r3
 8014432:	f000 f8ca 	bl	80145ca <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	4618      	mov	r0, r3
 801443a:	3708      	adds	r7, #8
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}

08014440 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8014440:	b480      	push	{r7}
 8014442:	b083      	sub	sp, #12
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	4618      	mov	r0, r3
 801444c:	370c      	adds	r7, #12
 801444e:	46bd      	mov	sp, r7
 8014450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014454:	4770      	bx	lr

08014456 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014456:	b5b0      	push	{r4, r5, r7, lr}
 8014458:	b084      	sub	sp, #16
 801445a:	af00      	add	r7, sp, #0
 801445c:	60f8      	str	r0, [r7, #12]
 801445e:	60b9      	str	r1, [r7, #8]
 8014460:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	681c      	ldr	r4, [r3, #0]
 8014466:	68f8      	ldr	r0, [r7, #12]
 8014468:	f000 f8be 	bl	80145e8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 801446c:	4602      	mov	r2, r0
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	fb03 f502 	mul.w	r5, r3, r2
 8014474:	68f8      	ldr	r0, [r7, #12]
 8014476:	f000 f8c2 	bl	80145fe <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 801447a:	4602      	mov	r2, r0
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	fb02 f303 	mul.w	r3, r2, r3
 8014482:	442b      	add	r3, r5
 8014484:	009b      	lsls	r3, r3, #2
 8014486:	4423      	add	r3, r4
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	ee07 3a90 	vmov	s15, r3
  }
 801448e:	eeb0 0a67 	vmov.f32	s0, s15
 8014492:	3710      	adds	r7, #16
 8014494:	46bd      	mov	sp, r7
 8014496:	bdb0      	pop	{r4, r5, r7, pc}

08014498 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8014498:	b480      	push	{r7}
 801449a:	b083      	sub	sp, #12
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	bf00      	nop
 80144a2:	370c      	adds	r7, #12
 80144a4:	46bd      	mov	sp, r7
 80144a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144aa:	4770      	bx	lr

080144ac <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b082      	sub	sp, #8
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	3308      	adds	r3, #8
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7fe fd4e 	bl	8012f5a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>
 80144be:	4603      	mov	r3, r0
    }
 80144c0:	4618      	mov	r0, r3
 80144c2:	3708      	adds	r7, #8
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}

080144c8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b082      	sub	sp, #8
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	3308      	adds	r3, #8
 80144d4:	4618      	mov	r0, r3
 80144d6:	f7fe fd54 	bl	8012f82 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 80144da:	4603      	mov	r3, r0
    }
 80144dc:	4618      	mov	r0, r3
 80144de:	3708      	adds	r7, #8
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}

080144e4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80144e4:	b480      	push	{r7}
 80144e6:	b083      	sub	sp, #12
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	4618      	mov	r0, r3
 80144f0:	370c      	adds	r7, #12
 80144f2:	46bd      	mov	sp, r7
 80144f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f8:	4770      	bx	lr

080144fa <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 80144fa:	b480      	push	{r7}
 80144fc:	b083      	sub	sp, #12
 80144fe:	af00      	add	r7, sp, #0
 8014500:	6078      	str	r0, [r7, #4]
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	4618      	mov	r0, r3
 8014506:	370c      	adds	r7, #12
 8014508:	46bd      	mov	sp, r7
 801450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450e:	4770      	bx	lr

08014510 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8014510:	b590      	push	{r4, r7, lr}
 8014512:	b083      	sub	sp, #12
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	6039      	str	r1, [r7, #0]
 801451a:	687c      	ldr	r4, [r7, #4]
 801451c:	6838      	ldr	r0, [r7, #0]
 801451e:	f000 f879 	bl	8014614 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>
 8014522:	4603      	mov	r3, r0
 8014524:	4619      	mov	r1, r3
 8014526:	4620      	mov	r0, r4
 8014528:	f7f0 ffe4 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	1d1c      	adds	r4, r3, #4
 8014530:	6838      	ldr	r0, [r7, #0]
 8014532:	f000 f87b 	bl	801462c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>
 8014536:	4603      	mov	r3, r0
 8014538:	4619      	mov	r1, r3
 801453a:	4620      	mov	r0, r4
 801453c:	f000 f88d 	bl	801465a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	f103 0414 	add.w	r4, r3, #20
 8014546:	6838      	ldr	r0, [r7, #0]
 8014548:	f000 f87b 	bl	8014642 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>
 801454c:	4603      	mov	r3, r0
 801454e:	4619      	mov	r1, r3
 8014550:	4620      	mov	r0, r4
 8014552:	f000 f891 	bl	8014678 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	4618      	mov	r0, r3
 801455a:	370c      	adds	r7, #12
 801455c:	46bd      	mov	sp, r7
 801455e:	bd90      	pop	{r4, r7, pc}

08014560 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8014560:	b580      	push	{r7, lr}
 8014562:	b084      	sub	sp, #16
 8014564:	af00      	add	r7, sp, #0
 8014566:	60f8      	str	r0, [r7, #12]
 8014568:	60b9      	str	r1, [r7, #8]
 801456a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	68ba      	ldr	r2, [r7, #8]
 8014570:	6879      	ldr	r1, [r7, #4]
 8014572:	4618      	mov	r0, r3
 8014574:	f000 f88f 	bl	8014696 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>
 8014578:	eef0 7a40 	vmov.f32	s15, s0
 801457c:	eeb0 0a67 	vmov.f32	s0, s15
 8014580:	3710      	adds	r7, #16
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}

08014586 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8014586:	b580      	push	{r7, lr}
 8014588:	b082      	sub	sp, #8
 801458a:	af00      	add	r7, sp, #0
 801458c:	6078      	str	r0, [r7, #4]
 801458e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014590:	2201      	movs	r2, #1
 8014592:	2100      	movs	r1, #0
 8014594:	6878      	ldr	r0, [r7, #4]
 8014596:	f7ff ffe3 	bl	8014560 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 801459a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801459e:	eeb0 0a67 	vmov.f32	s0, s15
 80145a2:	3708      	adds	r7, #8
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}

080145a8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b082      	sub	sp, #8
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80145b2:	2202      	movs	r2, #2
 80145b4:	2100      	movs	r1, #0
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f7ff ffd2 	bl	8014560 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 80145bc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80145c0:	eeb0 0a67 	vmov.f32	s0, s15
 80145c4:	3708      	adds	r7, #8
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}

080145ca <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80145ca:	b580      	push	{r7, lr}
 80145cc:	b082      	sub	sp, #8
 80145ce:	af00      	add	r7, sp, #0
 80145d0:	6078      	str	r0, [r7, #4]
 80145d2:	6039      	str	r1, [r7, #0]
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	6839      	ldr	r1, [r7, #0]
 80145d8:	4618      	mov	r0, r3
 80145da:	f000 f887 	bl	80146ec <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	4618      	mov	r0, r3
 80145e2:	3708      	adds	r7, #8
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}

080145e8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b082      	sub	sp, #8
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80145f0:	f7f2 fa27 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80145f4:	4603      	mov	r3, r0
  }
 80145f6:	4618      	mov	r0, r3
 80145f8:	3708      	adds	r7, #8
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}

080145fe <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80145fe:	b580      	push	{r7, lr}
 8014600:	b082      	sub	sp, #8
 8014602:	af00      	add	r7, sp, #0
 8014604:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8014606:	f7f2 fa14 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801460a:	4603      	mov	r3, r0
  }
 801460c:	4618      	mov	r0, r3
 801460e:	3708      	adds	r7, #8
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8014614:	b480      	push	{r7}
 8014616:	b083      	sub	sp, #12
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	330c      	adds	r3, #12
 8014620:	4618      	mov	r0, r3
 8014622:	370c      	adds	r7, #12
 8014624:	46bd      	mov	sp, r7
 8014626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462a:	4770      	bx	lr

0801462c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 801462c:	b480      	push	{r7}
 801462e:	b083      	sub	sp, #12
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	4618      	mov	r0, r3
 8014638:	370c      	adds	r7, #12
 801463a:	46bd      	mov	sp, r7
 801463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014640:	4770      	bx	lr

08014642 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8014642:	b480      	push	{r7}
 8014644:	b083      	sub	sp, #12
 8014646:	af00      	add	r7, sp, #0
 8014648:	6078      	str	r0, [r7, #4]
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	3308      	adds	r3, #8
 801464e:	4618      	mov	r0, r3
 8014650:	370c      	adds	r7, #12
 8014652:	46bd      	mov	sp, r7
 8014654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014658:	4770      	bx	lr

0801465a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801465a:	b580      	push	{r7, lr}
 801465c:	b082      	sub	sp, #8
 801465e:	af00      	add	r7, sp, #0
 8014660:	6078      	str	r0, [r7, #4]
 8014662:	6039      	str	r1, [r7, #0]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6839      	ldr	r1, [r7, #0]
 8014668:	4618      	mov	r0, r3
 801466a:	f000 f853 	bl	8014714 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	4618      	mov	r0, r3
 8014672:	3708      	adds	r7, #8
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}

08014678 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>:
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
 8014680:	6039      	str	r1, [r7, #0]
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	6839      	ldr	r1, [r7, #0]
 8014686:	4618      	mov	r0, r3
 8014688:	f7fc f952 	bl	8010930 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	4618      	mov	r0, r3
 8014690:	3708      	adds	r7, #8
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}

08014696 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014696:	b590      	push	{r4, r7, lr}
 8014698:	b087      	sub	sp, #28
 801469a:	af00      	add	r7, sp, #0
 801469c:	60f8      	str	r0, [r7, #12]
 801469e:	60b9      	str	r1, [r7, #8]
 80146a0:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	4618      	mov	r0, r3
 80146a6:	f000 f844 	bl	8014732 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 80146aa:	4604      	mov	r4, r0
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	3304      	adds	r3, #4
 80146b0:	687a      	ldr	r2, [r7, #4]
 80146b2:	68b9      	ldr	r1, [r7, #8]
 80146b4:	4618      	mov	r0, r3
 80146b6:	f000 f847 	bl	8014748 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>
 80146ba:	eef0 7a40 	vmov.f32	s15, s0
 80146be:	edc7 7a05 	vstr	s15, [r7, #20]
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	3314      	adds	r3, #20
 80146c6:	687a      	ldr	r2, [r7, #4]
 80146c8:	68b9      	ldr	r1, [r7, #8]
 80146ca:	4618      	mov	r0, r3
 80146cc:	f000 f851 	bl	8014772 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 80146d0:	4602      	mov	r2, r0
 80146d2:	f107 0314 	add.w	r3, r7, #20
 80146d6:	4619      	mov	r1, r3
 80146d8:	4620      	mov	r0, r4
 80146da:	f7fa fdb1 	bl	800f240 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80146de:	eef0 7a40 	vmov.f32	s15, s0
  }
 80146e2:	eeb0 0a67 	vmov.f32	s0, s15
 80146e6:	371c      	adds	r7, #28
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd90      	pop	{r4, r7, pc}

080146ec <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b082      	sub	sp, #8
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
 80146f4:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	6839      	ldr	r1, [r7, #0]
 80146fa:	4618      	mov	r0, r3
 80146fc:	f000 f84a 	bl	8014794 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	4618      	mov	r0, r3
 8014704:	f000 f870 	bl	80147e8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8014708:	bf00      	nop
  }
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	4618      	mov	r0, r3
 801470e:	3708      	adds	r7, #8
 8014710:	46bd      	mov	sp, r7
 8014712:	bd80      	pop	{r7, pc}

08014714 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6039      	str	r1, [r7, #0]
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	6839      	ldr	r1, [r7, #0]
 8014722:	4618      	mov	r0, r3
 8014724:	f000 f86c 	bl	8014800 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	4618      	mov	r0, r3
 801472c:	3708      	adds	r7, #8
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}

08014732 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8014732:	b480      	push	{r7}
 8014734:	b083      	sub	sp, #12
 8014736:	af00      	add	r7, sp, #0
 8014738:	6078      	str	r0, [r7, #4]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	4618      	mov	r0, r3
 801473e:	370c      	adds	r7, #12
 8014740:	46bd      	mov	sp, r7
 8014742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014746:	4770      	bx	lr

08014748 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014748:	b580      	push	{r7, lr}
 801474a:	b084      	sub	sp, #16
 801474c:	af00      	add	r7, sp, #0
 801474e:	60f8      	str	r0, [r7, #12]
 8014750:	60b9      	str	r1, [r7, #8]
 8014752:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	68ba      	ldr	r2, [r7, #8]
 8014758:	6879      	ldr	r1, [r7, #4]
 801475a:	4618      	mov	r0, r3
 801475c:	f7ff f85b 	bl	8013816 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8014760:	4603      	mov	r3, r0
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	ee07 3a90 	vmov	s15, r3
  }
 8014768:	eeb0 0a67 	vmov.f32	s0, s15
 801476c:	3710      	adds	r7, #16
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}

08014772 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014772:	b580      	push	{r7, lr}
 8014774:	b084      	sub	sp, #16
 8014776:	af00      	add	r7, sp, #0
 8014778:	60f8      	str	r0, [r7, #12]
 801477a:	60b9      	str	r1, [r7, #8]
 801477c:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	68ba      	ldr	r2, [r7, #8]
 8014782:	6879      	ldr	r1, [r7, #4]
 8014784:	4618      	mov	r0, r3
 8014786:	f7ff f846 	bl	8013816 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 801478a:	4603      	mov	r3, r0
  }
 801478c:	4618      	mov	r0, r3
 801478e:	3710      	adds	r7, #16
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}

08014794 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8014794:	b590      	push	{r4, r7, lr}
 8014796:	b083      	sub	sp, #12
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f000 f860 	bl	8014864 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80147a4:	683b      	ldr	r3, [r7, #0]
 80147a6:	4618      	mov	r0, r3
 80147a8:	f000 f81e 	bl	80147e8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 80147ac:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	601a      	str	r2, [r3, #0]
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	1d1c      	adds	r4, r3, #4
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	4618      	mov	r0, r3
 80147ba:	f000 f837 	bl	801482c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 80147be:	4603      	mov	r3, r0
 80147c0:	4619      	mov	r1, r3
 80147c2:	4620      	mov	r0, r4
 80147c4:	f7f2 f910 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	1d5c      	adds	r4, r3, #5
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	4618      	mov	r0, r3
 80147d0:	f000 f83a 	bl	8014848 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 80147d4:	4603      	mov	r3, r0
 80147d6:	4619      	mov	r1, r3
 80147d8:	4620      	mov	r0, r4
 80147da:	f7f2 f8eb 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	4618      	mov	r0, r3
 80147e2:	370c      	adds	r7, #12
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd90      	pop	{r4, r7, pc}

080147e8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>:
 80147e8:	b480      	push	{r7}
 80147ea:	b083      	sub	sp, #12
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	4618      	mov	r0, r3
 80147f6:	370c      	adds	r7, #12
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr

08014800 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8014800:	b590      	push	{r4, r7, lr}
 8014802:	b083      	sub	sp, #12
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
 8014808:	6039      	str	r1, [r7, #0]
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f000 f840 	bl	8014890 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8014810:	687c      	ldr	r4, [r7, #4]
 8014812:	6838      	ldr	r0, [r7, #0]
 8014814:	f000 f831 	bl	801487a <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>
 8014818:	4603      	mov	r3, r0
 801481a:	4619      	mov	r1, r3
 801481c:	4620      	mov	r0, r4
 801481e:	f000 f842 	bl	80148a6 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	4618      	mov	r0, r3
 8014826:	370c      	adds	r7, #12
 8014828:	46bd      	mov	sp, r7
 801482a:	bd90      	pop	{r4, r7, pc}

0801482c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801482c:	b580      	push	{r7, lr}
 801482e:	b082      	sub	sp, #8
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	689b      	ldr	r3, [r3, #8]
 8014838:	4618      	mov	r0, r3
 801483a:	f7fe fecd 	bl	80135d8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 801483e:	4603      	mov	r3, r0
    }
 8014840:	4618      	mov	r0, r3
 8014842:	3708      	adds	r7, #8
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}

08014848 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	689b      	ldr	r3, [r3, #8]
 8014854:	4618      	mov	r0, r3
 8014856:	f7fe f97b 	bl	8012b50 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 801485a:	4603      	mov	r3, r0
    }
 801485c:	4618      	mov	r0, r3
 801485e:	3708      	adds	r7, #8
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}

08014864 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014864:	b480      	push	{r7}
 8014866:	b083      	sub	sp, #12
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	4618      	mov	r0, r3
 8014870:	370c      	adds	r7, #12
 8014872:	46bd      	mov	sp, r7
 8014874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014878:	4770      	bx	lr

0801487a <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>:
 801487a:	b480      	push	{r7}
 801487c:	b083      	sub	sp, #12
 801487e:	af00      	add	r7, sp, #0
 8014880:	6078      	str	r0, [r7, #4]
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	4618      	mov	r0, r3
 8014886:	370c      	adds	r7, #12
 8014888:	46bd      	mov	sp, r7
 801488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488e:	4770      	bx	lr

08014890 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8014890:	b480      	push	{r7}
 8014892:	b083      	sub	sp, #12
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	4618      	mov	r0, r3
 801489c:	370c      	adds	r7, #12
 801489e:	46bd      	mov	sp, r7
 80148a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a4:	4770      	bx	lr

080148a6 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80148a6:	b580      	push	{r7, lr}
 80148a8:	b082      	sub	sp, #8
 80148aa:	af00      	add	r7, sp, #0
 80148ac:	6078      	str	r0, [r7, #4]
 80148ae:	6039      	str	r1, [r7, #0]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	6839      	ldr	r1, [r7, #0]
 80148b4:	4618      	mov	r0, r3
 80148b6:	f000 f805 	bl	80148c4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	4618      	mov	r0, r3
 80148be:	3708      	adds	r7, #8
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bd80      	pop	{r7, pc}

080148c4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b082      	sub	sp, #8
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
 80148cc:	6039      	str	r1, [r7, #0]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	6839      	ldr	r1, [r7, #0]
 80148d2:	4618      	mov	r0, r3
 80148d4:	f000 f805 	bl	80148e2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	4618      	mov	r0, r3
 80148dc:	3708      	adds	r7, #8
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}

080148e2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 80148e2:	b5b0      	push	{r4, r5, r7, lr}
 80148e4:	b084      	sub	sp, #16
 80148e6:	af00      	add	r7, sp, #0
 80148e8:	6078      	str	r0, [r7, #4]
 80148ea:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	4618      	mov	r0, r3
 80148f0:	f000 f834 	bl	801495c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	1d1c      	adds	r4, r3, #4
 80148f8:	6838      	ldr	r0, [r7, #0]
 80148fa:	f7f2 f9aa 	bl	8006c52 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 80148fe:	4603      	mov	r3, r0
 8014900:	60bb      	str	r3, [r7, #8]
 8014902:	6838      	ldr	r0, [r7, #0]
 8014904:	f7f1 fa33 	bl	8005d6e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8014908:	4603      	mov	r3, r0
 801490a:	60fb      	str	r3, [r7, #12]
 801490c:	f107 020c 	add.w	r2, r7, #12
 8014910:	f107 0308 	add.w	r3, r7, #8
 8014914:	4619      	mov	r1, r3
 8014916:	4620      	mov	r0, r4
 8014918:	f000 f82d 	bl	8014976 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	4619      	mov	r1, r3
 8014920:	2004      	movs	r0, #4
 8014922:	f7ec fafb 	bl	8000f1c <_ZnwjPv>
 8014926:	4602      	mov	r2, r0
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	3304      	adds	r3, #4
 801492c:	4619      	mov	r1, r3
 801492e:	4610      	mov	r0, r2
 8014930:	f7fd f884 	bl	8011a3c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	1d1c      	adds	r4, r3, #4
 8014938:	6838      	ldr	r0, [r7, #0]
 801493a:	f000 f835 	bl	80149a8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>
 801493e:	4605      	mov	r5, r0
 8014940:	6838      	ldr	r0, [r7, #0]
 8014942:	f000 f83d 	bl	80149c0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>
 8014946:	4603      	mov	r3, r0
 8014948:	461a      	mov	r2, r3
 801494a:	4629      	mov	r1, r5
 801494c:	4620      	mov	r0, r4
 801494e:	f000 f843 	bl	80149d8 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>
  }
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	4618      	mov	r0, r3
 8014956:	3710      	adds	r7, #16
 8014958:	46bd      	mov	sp, r7
 801495a:	bdb0      	pop	{r4, r5, r7, pc}

0801495c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  evaluator() {}
 801495c:	b580      	push	{r7, lr}
 801495e:	b082      	sub	sp, #8
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	4618      	mov	r0, r3
 8014968:	f000 f854 	bl	8014a14 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	4618      	mov	r0, r3
 8014970:	3708      	adds	r7, #8
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}

08014976 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8014976:	b580      	push	{r7, lr}
 8014978:	b084      	sub	sp, #16
 801497a:	af00      	add	r7, sp, #0
 801497c:	60f8      	str	r0, [r7, #12]
 801497e:	60b9      	str	r1, [r7, #8]
 8014980:	607a      	str	r2, [r7, #4]
    {
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	4618      	mov	r0, r3
 8014986:	f7f0 f9f1 	bl	8004d6c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 801498a:	f7f0 f9ff 	bl	8004d8c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 801498e:	68f8      	ldr	r0, [r7, #12]
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	6819      	ldr	r1, [r3, #0]
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	681a      	ldr	r2, [r3, #0]
 8014998:	2300      	movs	r3, #0
 801499a:	f000 f84d 	bl	8014a38 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	4618      	mov	r0, r3
 80149a2:	3710      	adds	r7, #16
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}

080149a8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80149a8:	b480      	push	{r7}
 80149aa:	b083      	sub	sp, #12
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	4618      	mov	r0, r3
 80149b6:	370c      	adds	r7, #12
 80149b8:	46bd      	mov	sp, r7
 80149ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149be:	4770      	bx	lr

080149c0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80149c0:	b480      	push	{r7}
 80149c2:	b083      	sub	sp, #12
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	6078      	str	r0, [r7, #4]
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	685b      	ldr	r3, [r3, #4]
 80149cc:	4618      	mov	r0, r3
 80149ce:	370c      	adds	r7, #12
 80149d0:	46bd      	mov	sp, r7
 80149d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d6:	4770      	bx	lr

080149d8 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80149d8:	b580      	push	{r7, lr}
 80149da:	b088      	sub	sp, #32
 80149dc:	af00      	add	r7, sp, #0
 80149de:	60f8      	str	r0, [r7, #12]
 80149e0:	60b9      	str	r1, [r7, #8]
 80149e2:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80149e4:	f107 0314 	add.w	r3, r7, #20
 80149e8:	687a      	ldr	r2, [r7, #4]
 80149ea:	68b9      	ldr	r1, [r7, #8]
 80149ec:	4618      	mov	r0, r3
 80149ee:	f000 f837 	bl	8014a60 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 80149f2:	f107 031c 	add.w	r3, r7, #28
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7f2 fa81 	bl	8006efe <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80149fc:	f107 021c 	add.w	r2, r7, #28
 8014a00:	f107 0314 	add.w	r3, r7, #20
 8014a04:	4619      	mov	r1, r3
 8014a06:	68f8      	ldr	r0, [r7, #12]
 8014a08:	f000 f841 	bl	8014a8e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8014a0c:	bf00      	nop
 8014a0e:	3720      	adds	r7, #32
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd80      	pop	{r7, pc}

08014a14 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  evaluator()
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b082      	sub	sp, #8
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f7fd fe76 	bl	801270e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2200      	movs	r2, #0
 8014a26:	2100      	movs	r1, #0
 8014a28:	4618      	mov	r0, r3
 8014a2a:	f7f2 fb28 	bl	800707e <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	4618      	mov	r0, r3
 8014a32:	3708      	adds	r7, #8
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bd80      	pop	{r7, pc}

08014a38 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b086      	sub	sp, #24
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	60f8      	str	r0, [r7, #12]
 8014a40:	60b9      	str	r1, [r7, #8]
 8014a42:	607a      	str	r2, [r7, #4]
 8014a44:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8014a46:	2301      	movs	r3, #1
 8014a48:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8014a4e:	687a      	ldr	r2, [r7, #4]
 8014a50:	68b9      	ldr	r1, [r7, #8]
 8014a52:	68f8      	ldr	r0, [r7, #12]
 8014a54:	f000 f82c 	bl	8014ab0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
    }
 8014a58:	bf00      	nop
 8014a5a:	3718      	adds	r7, #24
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}

08014a60 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8014a60:	b590      	push	{r4, r7, lr}
 8014a62:	b085      	sub	sp, #20
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	60f8      	str	r0, [r7, #12]
 8014a68:	60b9      	str	r1, [r7, #8]
 8014a6a:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8014a6c:	68b8      	ldr	r0, [r7, #8]
 8014a6e:	f7f1 f8f1 	bl	8005c54 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8014a72:	4604      	mov	r4, r0
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f7f0 fe1c 	bl	80056b2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	461a      	mov	r2, r3
 8014a7e:	4621      	mov	r1, r4
 8014a80:	68f8      	ldr	r0, [r7, #12]
 8014a82:	f000 f86b 	bl	8014b5c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>
}
 8014a86:	68f8      	ldr	r0, [r7, #12]
 8014a88:	3714      	adds	r7, #20
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	bd90      	pop	{r4, r7, pc}

08014a8e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8014a8e:	b580      	push	{r7, lr}
 8014a90:	b086      	sub	sp, #24
 8014a92:	af00      	add	r7, sp, #0
 8014a94:	60f8      	str	r0, [r7, #12]
 8014a96:	60b9      	str	r1, [r7, #8]
 8014a98:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8014a9e:	687a      	ldr	r2, [r7, #4]
 8014aa0:	68b9      	ldr	r1, [r7, #8]
 8014aa2:	6978      	ldr	r0, [r7, #20]
 8014aa4:	f000 f888 	bl	8014bb8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8014aa8:	bf00      	nop
 8014aaa:	3718      	adds	r7, #24
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b086      	sub	sp, #24
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	60f8      	str	r0, [r7, #12]
 8014ab8:	60b9      	str	r1, [r7, #8]
 8014aba:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	2b01      	cmp	r3, #1
 8014ac0:	d108      	bne.n	8014ad4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	2b03      	cmp	r3, #3
 8014ac6:	d105      	bne.n	8014ad4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	db02      	blt.n	8014ad4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	da06      	bge.n	8014ae2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x32>
 8014ad4:	4b0c      	ldr	r3, [pc, #48]	; (8014b08 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x58>)
 8014ad6:	4a0d      	ldr	r2, [pc, #52]	; (8014b0c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x5c>)
 8014ad8:	f240 1111 	movw	r1, #273	; 0x111
 8014adc:	480c      	ldr	r0, [pc, #48]	; (8014b10 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x60>)
 8014ade:	f009 f8d5 	bl	801dc8c <__assert_func>
 8014ae2:	68bb      	ldr	r3, [r7, #8]
 8014ae4:	617b      	str	r3, [r7, #20]
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	613b      	str	r3, [r7, #16]
  }
 8014aea:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8014aec:	68f8      	ldr	r0, [r7, #12]
 8014aee:	68bb      	ldr	r3, [r7, #8]
 8014af0:	687a      	ldr	r2, [r7, #4]
 8014af2:	fb02 f103 	mul.w	r1, r2, r3
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	68ba      	ldr	r2, [r7, #8]
 8014afa:	f000 f870 	bl	8014bde <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>
    }
 8014afe:	bf00      	nop
 8014b00:	3718      	adds	r7, #24
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	bf00      	nop
 8014b08:	08022584 	.word	0x08022584
 8014b0c:	08029430 	.word	0x08029430
 8014b10:	080227a0 	.word	0x080227a0

08014b14 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b082      	sub	sp, #8
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	6878      	ldr	r0, [r7, #4]
 8014b1e:	f000 f86b 	bl	8014bf8 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	4618      	mov	r0, r3
 8014b26:	3708      	adds	r7, #8
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}

08014b2c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>:
class dense_product_base
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b082      	sub	sp, #8
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
 8014b34:	6878      	ldr	r0, [r7, #4]
 8014b36:	f7ff ffed 	bl	8014b14 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	3708      	adds	r7, #8
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd80      	pop	{r7, pc}

08014b44 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b082      	sub	sp, #8
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f7ff ffed 	bl	8014b2c <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	4618      	mov	r0, r3
 8014b56:	3708      	adds	r7, #8
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}

08014b5c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8014b5c:	b590      	push	{r4, r7, lr}
 8014b5e:	b085      	sub	sp, #20
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	60f8      	str	r0, [r7, #12]
 8014b64:	60b9      	str	r1, [r7, #8]
 8014b66:	607a      	str	r2, [r7, #4]
 8014b68:	68f8      	ldr	r0, [r7, #12]
 8014b6a:	f7ff ffeb 	bl	8014b44 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	68ba      	ldr	r2, [r7, #8]
 8014b72:	601a      	str	r2, [r3, #0]
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	687a      	ldr	r2, [r7, #4]
 8014b78:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f7f0 fb45 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014b82:	4604      	mov	r4, r0
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	4618      	mov	r0, r3
 8014b88:	f7f0 f989 	bl	8004e9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	429c      	cmp	r4, r3
 8014b90:	d005      	beq.n	8014b9e <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 8014b92:	4b06      	ldr	r3, [pc, #24]	; (8014bac <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 8014b94:	4a06      	ldr	r2, [pc, #24]	; (8014bb0 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 8014b96:	2160      	movs	r1, #96	; 0x60
 8014b98:	4806      	ldr	r0, [pc, #24]	; (8014bb4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 8014b9a:	f009 f877 	bl	801dc8c <__assert_func>
 8014b9e:	bf00      	nop
    }
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	3714      	adds	r7, #20
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd90      	pop	{r4, r7, pc}
 8014baa:	bf00      	nop
 8014bac:	0801fdb4 	.word	0x0801fdb4
 8014bb0:	080294bc 	.word	0x080294bc
 8014bb4:	08020104 	.word	0x08020104

08014bb8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b084      	sub	sp, #16
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	60f8      	str	r0, [r7, #12]
 8014bc0:	60b9      	str	r1, [r7, #8]
 8014bc2:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8014bc4:	68b9      	ldr	r1, [r7, #8]
 8014bc6:	68f8      	ldr	r0, [r7, #12]
 8014bc8:	f000 f821 	bl	8014c0e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8014bcc:	687a      	ldr	r2, [r7, #4]
 8014bce:	68b9      	ldr	r1, [r7, #8]
 8014bd0:	68f8      	ldr	r0, [r7, #12]
 8014bd2:	f000 f84a 	bl	8014c6a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8014bd6:	bf00      	nop
 8014bd8:	3710      	adds	r7, #16
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}

08014bde <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8014bde:	b480      	push	{r7}
 8014be0:	b085      	sub	sp, #20
 8014be2:	af00      	add	r7, sp, #0
 8014be4:	60f8      	str	r0, [r7, #12]
 8014be6:	60b9      	str	r1, [r7, #8]
 8014be8:	607a      	str	r2, [r7, #4]
 8014bea:	603b      	str	r3, [r7, #0]
 8014bec:	bf00      	nop
 8014bee:	3714      	adds	r7, #20
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf6:	4770      	bx	lr

08014bf8 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014bf8:	b480      	push	{r7}
 8014bfa:	b083      	sub	sp, #12
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
    }
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	4618      	mov	r0, r3
 8014c04:	370c      	adds	r7, #12
 8014c06:	46bd      	mov	sp, r7
 8014c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0c:	4770      	bx	lr

08014c0e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8014c0e:	b480      	push	{r7}
 8014c10:	b083      	sub	sp, #12
 8014c12:	af00      	add	r7, sp, #0
 8014c14:	6078      	str	r0, [r7, #4]
 8014c16:	6039      	str	r1, [r7, #0]
}
 8014c18:	bf00      	nop
 8014c1a:	370c      	adds	r7, #12
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c22:	4770      	bx	lr

08014c24 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b082      	sub	sp, #8
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	330c      	adds	r3, #12
 8014c30:	4618      	mov	r0, r3
 8014c32:	f7f2 fbbc 	bl	80073ae <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	3308      	adds	r3, #8
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7fa f9ea 	bl	800f014 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8014c40:	6878      	ldr	r0, [r7, #4]
 8014c42:	f000 f859 	bl	8014cf8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	4618      	mov	r0, r3
 8014c4a:	3708      	adds	r7, #8
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	bd80      	pop	{r7, pc}

08014c50 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b082      	sub	sp, #8
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7ff ffe2 	bl	8014c24 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	4618      	mov	r0, r3
 8014c64:	3708      	adds	r7, #8
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}

08014c6a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8014c6a:	b580      	push	{r7, lr}
 8014c6c:	b090      	sub	sp, #64	; 0x40
 8014c6e:	af02      	add	r7, sp, #8
 8014c70:	60f8      	str	r0, [r7, #12]
 8014c72:	60b9      	str	r1, [r7, #8]
 8014c74:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8014c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014c7a:	68b9      	ldr	r1, [r7, #8]
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f000 f82c 	bl	8014cda <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8014c82:	687a      	ldr	r2, [r7, #4]
 8014c84:	68b9      	ldr	r1, [r7, #8]
 8014c86:	68f8      	ldr	r0, [r7, #12]
 8014c88:	f000 f85e 	bl	8014d48 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8014c8c:	f107 0320 	add.w	r3, r7, #32
 8014c90:	68f9      	ldr	r1, [r7, #12]
 8014c92:	4618      	mov	r0, r3
 8014c94:	f7fc fed2 	bl	8011a3c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8014c98:	68f8      	ldr	r0, [r7, #12]
 8014c9a:	f000 f89f 	bl	8014ddc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014ca4:	f107 0120 	add.w	r1, r7, #32
 8014ca8:	f107 0010 	add.w	r0, r7, #16
 8014cac:	9300      	str	r3, [sp, #0]
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	f000 f89f 	bl	8014df2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8014cb4:	f107 0310 	add.w	r3, r7, #16
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f000 f8b4 	bl	8014e26 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8014cbe:	f107 0320 	add.w	r3, r7, #32
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7fa f9a6 	bl	800f014 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8014cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7ff ffbf 	bl	8014c50 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
}
 8014cd2:	bf00      	nop
 8014cd4:	3738      	adds	r7, #56	; 0x38
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}

08014cda <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014cda:	b580      	push	{r7, lr}
 8014cdc:	b082      	sub	sp, #8
 8014cde:	af00      	add	r7, sp, #0
 8014ce0:	6078      	str	r0, [r7, #4]
 8014ce2:	6039      	str	r1, [r7, #0]
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	6839      	ldr	r1, [r7, #0]
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f000 f8a7 	bl	8014e3c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	3708      	adds	r7, #8
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}

08014cf8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8014cf8:	b480      	push	{r7}
 8014cfa:	b083      	sub	sp, #12
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	4618      	mov	r0, r3
 8014d04:	370c      	adds	r7, #12
 8014d06:	46bd      	mov	sp, r7
 8014d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0c:	4770      	bx	lr

08014d0e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8014d0e:	b580      	push	{r7, lr}
 8014d10:	b082      	sub	sp, #8
 8014d12:	af00      	add	r7, sp, #0
 8014d14:	6078      	str	r0, [r7, #4]
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f7f0 fa81 	bl	8005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014d20:	4603      	mov	r3, r0
 8014d22:	4618      	mov	r0, r3
 8014d24:	3708      	adds	r7, #8
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}

08014d2a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8014d2a:	b580      	push	{r7, lr}
 8014d2c:	b082      	sub	sp, #8
 8014d2e:	af00      	add	r7, sp, #0
 8014d30:	6078      	str	r0, [r7, #4]
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	685b      	ldr	r3, [r3, #4]
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7f0 f8a6 	bl	8004e88 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3708      	adds	r7, #8
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
	...

08014d48 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b086      	sub	sp, #24
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	60f8      	str	r0, [r7, #12]
 8014d50:	60b9      	str	r1, [r7, #8]
 8014d52:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8014d54:	68b8      	ldr	r0, [r7, #8]
 8014d56:	f7ff ffda 	bl	8014d0e <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>
 8014d5a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8014d5c:	68b8      	ldr	r0, [r7, #8]
 8014d5e:	f7ff ffe4 	bl	8014d2a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>
 8014d62:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7f0 fa5b 	bl	8005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014d6c:	4602      	mov	r2, r0
 8014d6e:	697b      	ldr	r3, [r7, #20]
 8014d70:	4293      	cmp	r3, r2
 8014d72:	d107      	bne.n	8014d84 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	4618      	mov	r0, r3
 8014d78:	f7f0 fa48 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014d7c:	4602      	mov	r2, r0
 8014d7e:	693b      	ldr	r3, [r7, #16]
 8014d80:	4293      	cmp	r3, r2
 8014d82:	d001      	beq.n	8014d88 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8014d84:	2301      	movs	r3, #1
 8014d86:	e000      	b.n	8014d8a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8014d88:	2300      	movs	r3, #0
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d005      	beq.n	8014d9a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	693a      	ldr	r2, [r7, #16]
 8014d92:	6979      	ldr	r1, [r7, #20]
 8014d94:	4618      	mov	r0, r3
 8014d96:	f7ff fe8b 	bl	8014ab0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f7f0 fa40 	bl	8005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014da2:	4602      	mov	r2, r0
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	4293      	cmp	r3, r2
 8014da8:	d107      	bne.n	8014dba <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	4618      	mov	r0, r3
 8014dae:	f7f0 fa2d 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014db2:	4602      	mov	r2, r0
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	4293      	cmp	r3, r2
 8014db8:	d006      	beq.n	8014dc8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8014dba:	4b05      	ldr	r3, [pc, #20]	; (8014dd0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8014dbc:	4a05      	ldr	r2, [pc, #20]	; (8014dd4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8014dbe:	f240 21fd 	movw	r1, #765	; 0x2fd
 8014dc2:	4805      	ldr	r0, [pc, #20]	; (8014dd8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8014dc4:	f008 ff62 	bl	801dc8c <__assert_func>
}
 8014dc8:	bf00      	nop
 8014dca:	3718      	adds	r7, #24
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}
 8014dd0:	0802216c 	.word	0x0802216c
 8014dd4:	080295e4 	.word	0x080295e4
 8014dd8:	08022280 	.word	0x08022280

08014ddc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8014ddc:	b480      	push	{r7}
 8014dde:	b083      	sub	sp, #12
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	4618      	mov	r0, r3
 8014de8:	370c      	adds	r7, #12
 8014dea:	46bd      	mov	sp, r7
 8014dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df0:	4770      	bx	lr

08014df2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8014df2:	b480      	push	{r7}
 8014df4:	b085      	sub	sp, #20
 8014df6:	af00      	add	r7, sp, #0
 8014df8:	60f8      	str	r0, [r7, #12]
 8014dfa:	60b9      	str	r1, [r7, #8]
 8014dfc:	607a      	str	r2, [r7, #4]
 8014dfe:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	68ba      	ldr	r2, [r7, #8]
 8014e04:	601a      	str	r2, [r3, #0]
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	605a      	str	r2, [r3, #4]
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	683a      	ldr	r2, [r7, #0]
 8014e10:	609a      	str	r2, [r3, #8]
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	69ba      	ldr	r2, [r7, #24]
 8014e16:	60da      	str	r2, [r3, #12]
  }
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3714      	adds	r7, #20
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e24:	4770      	bx	lr

08014e26 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014e26:	b580      	push	{r7, lr}
 8014e28:	b082      	sub	sp, #8
 8014e2a:	af00      	add	r7, sp, #0
 8014e2c:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	f000 f839 	bl	8014ea6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 8014e34:	bf00      	nop
 8014e36:	3708      	adds	r7, #8
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}

08014e3c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b082      	sub	sp, #8
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
 8014e44:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8014e46:	6878      	ldr	r0, [r7, #4]
 8014e48:	f000 f854 	bl	8014ef4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8014e4c:	6838      	ldr	r0, [r7, #0]
 8014e4e:	f000 f839 	bl	8014ec4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 8014e52:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8014e58:	6838      	ldr	r0, [r7, #0]
 8014e5a:	f000 f83f 	bl	8014edc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>
 8014e5e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	605a      	str	r2, [r3, #4]
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8014e6e:	4619      	mov	r1, r3
 8014e70:	4610      	mov	r0, r2
 8014e72:	f7fc fde3 	bl	8011a3c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8014e80:	4619      	mov	r1, r3
 8014e82:	4610      	mov	r0, r2
 8014e84:	f7f2 fca2 	bl	80077cc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8014e88:	6838      	ldr	r0, [r7, #0]
 8014e8a:	f000 f81b 	bl	8014ec4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7f0 f9bb 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014e96:	4602      	mov	r2, r0
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	611a      	str	r2, [r3, #16]
  }
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	3708      	adds	r7, #8
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}

08014ea6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014ea6:	b580      	push	{r7, lr}
 8014ea8:	b082      	sub	sp, #8
 8014eaa:	af00      	add	r7, sp, #0
 8014eac:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014eae:	2100      	movs	r1, #0
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f000 f82a 	bl	8014f0a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014eb6:	6878      	ldr	r0, [r7, #4]
 8014eb8:	f000 f84a 	bl	8014f50 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8014ebc:	bf00      	nop
 8014ebe:	3708      	adds	r7, #8
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}

08014ec4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8014ec4:	b480      	push	{r7}
 8014ec6:	b083      	sub	sp, #12
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	370c      	adds	r7, #12
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eda:	4770      	bx	lr

08014edc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8014edc:	b480      	push	{r7}
 8014ede:	b083      	sub	sp, #12
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	685b      	ldr	r3, [r3, #4]
 8014ee8:	4618      	mov	r0, r3
 8014eea:	370c      	adds	r7, #12
 8014eec:	46bd      	mov	sp, r7
 8014eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef2:	4770      	bx	lr

08014ef4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014ef4:	b480      	push	{r7}
 8014ef6:	b083      	sub	sp, #12
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	4618      	mov	r0, r3
 8014f00:	370c      	adds	r7, #12
 8014f02:	46bd      	mov	sp, r7
 8014f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f08:	4770      	bx	lr

08014f0a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8014f0a:	b5b0      	push	{r4, r5, r7, lr}
 8014f0c:	b084      	sub	sp, #16
 8014f0e:	af00      	add	r7, sp, #0
 8014f10:	6078      	str	r0, [r7, #4]
 8014f12:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	689c      	ldr	r4, [r3, #8]
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	6839      	ldr	r1, [r7, #0]
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f000 f825 	bl	8014f6e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>
 8014f24:	4605      	mov	r5, r0
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	685b      	ldr	r3, [r3, #4]
 8014f2a:	6839      	ldr	r1, [r7, #0]
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	f000 f82e 	bl	8014f8e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 8014f32:	eef0 7a40 	vmov.f32	s15, s0
 8014f36:	edc7 7a03 	vstr	s15, [r7, #12]
 8014f3a:	f107 030c 	add.w	r3, r7, #12
 8014f3e:	461a      	mov	r2, r3
 8014f40:	4629      	mov	r1, r5
 8014f42:	4620      	mov	r0, r4
 8014f44:	f7f3 fb4a 	bl	80085dc <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8014f48:	bf00      	nop
 8014f4a:	3710      	adds	r7, #16
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bdb0      	pop	{r4, r5, r7, pc}

08014f50 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b082      	sub	sp, #8
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014f58:	2101      	movs	r1, #1
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f7ff ffd5 	bl	8014f0a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014f60:	6878      	ldr	r0, [r7, #4]
 8014f62:	f000 f84d 	bl	8015000 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 8014f66:	bf00      	nop
 8014f68:	3708      	adds	r7, #8
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}

08014f6e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8014f6e:	b480      	push	{r7}
 8014f70:	b083      	sub	sp, #12
 8014f72:	af00      	add	r7, sp, #0
 8014f74:	6078      	str	r0, [r7, #4]
 8014f76:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681a      	ldr	r2, [r3, #0]
 8014f7c:	683b      	ldr	r3, [r7, #0]
 8014f7e:	009b      	lsls	r3, r3, #2
 8014f80:	4413      	add	r3, r2
  }
 8014f82:	4618      	mov	r0, r3
 8014f84:	370c      	adds	r7, #12
 8014f86:	46bd      	mov	sp, r7
 8014f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8c:	4770      	bx	lr

08014f8e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 8014f8e:	b580      	push	{r7, lr}
 8014f90:	b0a4      	sub	sp, #144	; 0x90
 8014f92:	af00      	add	r7, sp, #0
 8014f94:	6078      	str	r0, [r7, #4]
 8014f96:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8014f98:	2300      	movs	r3, #0
 8014f9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	6819      	ldr	r1, [r3, #0]
 8014fa8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014fac:	2200      	movs	r2, #0
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f000 f835 	bl	801501e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>
 8014fb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014fb8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014fbc:	4611      	mov	r1, r2
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f000 f840 	bl	8015044 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	6859      	ldr	r1, [r3, #4]
 8014fc8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014fcc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f7f7 f94a 	bl	800c26a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 8014fd6:	f107 030c 	add.w	r3, r7, #12
 8014fda:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8014fde:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f000 f83f 	bl	8015066 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8014fe8:	f107 030c 	add.w	r3, r7, #12
 8014fec:	4618      	mov	r0, r3
 8014fee:	f000 f868 	bl	80150c2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>
 8014ff2:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8014ffa:	3790      	adds	r7, #144	; 0x90
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}

08015000 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8015000:	b580      	push	{r7, lr}
 8015002:	b082      	sub	sp, #8
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8015008:	2102      	movs	r1, #2
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f7ff ff7d 	bl	8014f0a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f000 f871 	bl	80150f8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 8015016:	bf00      	nop
 8015018:	3708      	adds	r7, #8
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}

0801501e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>:
ConstRowXpr row(Index i) const
 801501e:	b580      	push	{r7, lr}
 8015020:	b084      	sub	sp, #16
 8015022:	af00      	add	r7, sp, #0
 8015024:	60f8      	str	r0, [r7, #12]
 8015026:	60b9      	str	r1, [r7, #8]
 8015028:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 801502a:	68b8      	ldr	r0, [r7, #8]
 801502c:	f7f0 fe12 	bl	8005c54 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8015030:	4603      	mov	r3, r0
 8015032:	687a      	ldr	r2, [r7, #4]
 8015034:	4619      	mov	r1, r3
 8015036:	68f8      	ldr	r0, [r7, #12]
 8015038:	f000 f868 	bl	801510c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>
}
 801503c:	68f8      	ldr	r0, [r7, #12]
 801503e:	3710      	adds	r7, #16
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}

08015044 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8015044:	b580      	push	{r7, lr}
 8015046:	b082      	sub	sp, #8
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 801504e:	6838      	ldr	r0, [r7, #0]
 8015050:	f000 f886 	bl	8015160 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>
 8015054:	4603      	mov	r3, r0
 8015056:	4619      	mov	r1, r3
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f000 f8a4 	bl	80151a6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>
}
 801505e:	6878      	ldr	r0, [r7, #4]
 8015060:	3708      	adds	r7, #8
 8015062:	46bd      	mov	sp, r7
 8015064:	bd80      	pop	{r7, pc}

08015066 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8015066:	b5b0      	push	{r4, r5, r7, lr}
 8015068:	b086      	sub	sp, #24
 801506a:	af00      	add	r7, sp, #0
 801506c:	60f8      	str	r0, [r7, #12]
 801506e:	60b9      	str	r1, [r7, #8]
 8015070:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8015072:	68b8      	ldr	r0, [r7, #8]
 8015074:	f000 f8ae 	bl	80151d4 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>
 8015078:	4604      	mov	r4, r0
 801507a:	6878      	ldr	r0, [r7, #4]
 801507c:	f7f7 fec4 	bl	800ce08 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 8015080:	4605      	mov	r5, r0
 8015082:	f107 0314 	add.w	r3, r7, #20
 8015086:	4618      	mov	r0, r3
 8015088:	f7f0 f9aa 	bl	80053e0 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 801508c:	f107 0314 	add.w	r3, r7, #20
 8015090:	462a      	mov	r2, r5
 8015092:	4621      	mov	r1, r4
 8015094:	68f8      	ldr	r0, [r7, #12]
 8015096:	f000 f8db 	bl	8015250 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 801509a:	68f8      	ldr	r0, [r7, #12]
 801509c:	3718      	adds	r7, #24
 801509e:	46bd      	mov	sp, r7
 80150a0:	bdb0      	pop	{r4, r5, r7, pc}

080150a2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80150a2:	b580      	push	{r7, lr}
 80150a4:	b082      	sub	sp, #8
 80150a6:	af00      	add	r7, sp, #0
 80150a8:	6078      	str	r0, [r7, #4]
 80150aa:	6878      	ldr	r0, [r7, #4]
 80150ac:	f000 f92e 	bl	801530c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80150b0:	4603      	mov	r3, r0
 80150b2:	4618      	mov	r0, r3
 80150b4:	f000 f935 	bl	8015322 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>
 80150b8:	4603      	mov	r3, r0
 80150ba:	4618      	mov	r0, r3
 80150bc:	3708      	adds	r7, #8
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}

080150c2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 80150c2:	b590      	push	{r4, r7, lr}
 80150c4:	b085      	sub	sp, #20
 80150c6:	af00      	add	r7, sp, #0
 80150c8:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f000 f91e 	bl	801530c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80150d0:	4604      	mov	r4, r0
 80150d2:	f107 030c 	add.w	r3, r7, #12
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7f0 fc79 	bl	80059ce <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80150dc:	f107 030c 	add.w	r3, r7, #12
 80150e0:	4619      	mov	r1, r3
 80150e2:	4620      	mov	r0, r4
 80150e4:	f000 f9c4 	bl	8015470 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 80150e8:	eef0 7a40 	vmov.f32	s15, s0
 80150ec:	bf00      	nop
}
 80150ee:	eeb0 0a67 	vmov.f32	s0, s15
 80150f2:	3714      	adds	r7, #20
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd90      	pop	{r4, r7, pc}

080150f8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80150f8:	b480      	push	{r7}
 80150fa:	b083      	sub	sp, #12
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	6078      	str	r0, [r7, #4]
 8015100:	bf00      	nop
 8015102:	370c      	adds	r7, #12
 8015104:	46bd      	mov	sp, r7
 8015106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510a:	4770      	bx	lr

0801510c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 801510c:	b580      	push	{r7, lr}
 801510e:	b084      	sub	sp, #16
 8015110:	af00      	add	r7, sp, #0
 8015112:	60f8      	str	r0, [r7, #12]
 8015114:	60b9      	str	r1, [r7, #8]
 8015116:	607a      	str	r2, [r7, #4]
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	687a      	ldr	r2, [r7, #4]
 801511c:	68b9      	ldr	r1, [r7, #8]
 801511e:	4618      	mov	r0, r3
 8015120:	f000 f9ec 	bl	80154fc <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	2b00      	cmp	r3, #0
 8015128:	db07      	blt.n	801513a <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x2e>
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	4618      	mov	r0, r3
 801512e:	f7f0 f878 	bl	8005222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8015132:	4602      	mov	r2, r0
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	4293      	cmp	r3, r2
 8015138:	db05      	blt.n	8015146 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x3a>
 801513a:	4b06      	ldr	r3, [pc, #24]	; (8015154 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x48>)
 801513c:	4a06      	ldr	r2, [pc, #24]	; (8015158 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x4c>)
 801513e:	2178      	movs	r1, #120	; 0x78
 8015140:	4806      	ldr	r0, [pc, #24]	; (801515c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x50>)
 8015142:	f008 fda3 	bl	801dc8c <__assert_func>
 8015146:	bf00      	nop
    }
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	4618      	mov	r0, r3
 801514c:	3710      	adds	r7, #16
 801514e:	46bd      	mov	sp, r7
 8015150:	bd80      	pop	{r7, pc}
 8015152:	bf00      	nop
 8015154:	08024678 	.word	0x08024678
 8015158:	080296f8 	.word	0x080296f8
 801515c:	080247fc 	.word	0x080247fc

08015160 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8015160:	b480      	push	{r7}
 8015162:	b083      	sub	sp, #12
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	4618      	mov	r0, r3
 801516c:	370c      	adds	r7, #12
 801516e:	46bd      	mov	sp, r7
 8015170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015174:	4770      	bx	lr

08015176 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
 8015176:	b580      	push	{r7, lr}
 8015178:	b082      	sub	sp, #8
 801517a:	af00      	add	r7, sp, #0
 801517c:	6078      	str	r0, [r7, #4]
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f000 f9cd 	bl	801551e <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	4618      	mov	r0, r3
 8015188:	3708      	adds	r7, #8
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}

0801518e <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 801518e:	b580      	push	{r7, lr}
 8015190:	b082      	sub	sp, #8
 8015192:	af00      	add	r7, sp, #0
 8015194:	6078      	str	r0, [r7, #4]
 8015196:	6878      	ldr	r0, [r7, #4]
 8015198:	f7ff ffed 	bl	8015176 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	4618      	mov	r0, r3
 80151a0:	3708      	adds	r7, #8
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}

080151a6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 80151a6:	b5b0      	push	{r4, r5, r7, lr}
 80151a8:	b082      	sub	sp, #8
 80151aa:	af00      	add	r7, sp, #0
 80151ac:	6078      	str	r0, [r7, #4]
 80151ae:	6039      	str	r1, [r7, #0]
 80151b0:	6878      	ldr	r0, [r7, #4]
 80151b2:	f7ff ffec 	bl	801518e <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>
 80151b6:	687a      	ldr	r2, [r7, #4]
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	4614      	mov	r4, r2
 80151bc:	461d      	mov	r5, r3
 80151be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80151c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	4618      	mov	r0, r3
 80151ce:	3708      	adds	r7, #8
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bdb0      	pop	{r4, r5, r7, pc}

080151d4 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>:
 80151d4:	b480      	push	{r7}
 80151d6:	b083      	sub	sp, #12
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	4618      	mov	r0, r3
 80151e0:	370c      	adds	r7, #12
 80151e2:	46bd      	mov	sp, r7
 80151e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e8:	4770      	bx	lr

080151ea <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
 80151ea:	b580      	push	{r7, lr}
 80151ec:	b082      	sub	sp, #8
 80151ee:	af00      	add	r7, sp, #0
 80151f0:	6078      	str	r0, [r7, #4]
 80151f2:	6878      	ldr	r0, [r7, #4]
 80151f4:	f000 f99e 	bl	8015534 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	4618      	mov	r0, r3
 80151fc:	3708      	adds	r7, #8
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd80      	pop	{r7, pc}

08015202 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8015202:	b580      	push	{r7, lr}
 8015204:	b082      	sub	sp, #8
 8015206:	af00      	add	r7, sp, #0
 8015208:	6078      	str	r0, [r7, #4]
 801520a:	6878      	ldr	r0, [r7, #4]
 801520c:	f7ff ffed 	bl	80151ea <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	4618      	mov	r0, r3
 8015214:	3708      	adds	r7, #8
 8015216:	46bd      	mov	sp, r7
 8015218:	bd80      	pop	{r7, pc}

0801521a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 801521a:	b580      	push	{r7, lr}
 801521c:	b082      	sub	sp, #8
 801521e:	af00      	add	r7, sp, #0
 8015220:	6078      	str	r0, [r7, #4]
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	4618      	mov	r0, r3
 8015226:	f000 f990 	bl	801554a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>
 801522a:	4603      	mov	r3, r0
 801522c:	4618      	mov	r0, r3
 801522e:	3708      	adds	r7, #8
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}

08015234 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8015234:	b580      	push	{r7, lr}
 8015236:	b082      	sub	sp, #8
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	4618      	mov	r0, r3
 8015240:	f000 f98e 	bl	8015560 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>
 8015244:	4603      	mov	r3, r0
 8015246:	4618      	mov	r0, r3
 8015248:	3708      	adds	r7, #8
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
	...

08015250 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8015250:	b5b0      	push	{r4, r5, r7, lr}
 8015252:	b084      	sub	sp, #16
 8015254:	af00      	add	r7, sp, #0
 8015256:	60f8      	str	r0, [r7, #12]
 8015258:	60b9      	str	r1, [r7, #8]
 801525a:	607a      	str	r2, [r7, #4]
 801525c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 801525e:	68f8      	ldr	r0, [r7, #12]
 8015260:	f7ff ffcf 	bl	8015202 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8015264:	68fa      	ldr	r2, [r7, #12]
 8015266:	68bb      	ldr	r3, [r7, #8]
 8015268:	4614      	mov	r4, r2
 801526a:	461d      	mov	r5, r3
 801526c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801526e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015270:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015274:	e884 0003 	stmia.w	r4, {r0, r1}
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	f103 0218 	add.w	r2, r3, #24
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	4614      	mov	r4, r2
 8015282:	461d      	mov	r5, r3
 8015284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015288:	e895 0003 	ldmia.w	r5, {r0, r1}
 801528c:	e884 0003 	stmia.w	r4, {r0, r1}
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	3330      	adds	r3, #48	; 0x30
 8015294:	6839      	ldr	r1, [r7, #0]
 8015296:	4618      	mov	r0, r3
 8015298:	f7f0 f92c 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 801529c:	68b8      	ldr	r0, [r7, #8]
 801529e:	f7ff ffbc 	bl	801521a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 80152a2:	4604      	mov	r4, r0
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	4618      	mov	r0, r3
 80152a8:	f7f7 fdd1 	bl	800ce4e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 80152ac:	4603      	mov	r3, r0
 80152ae:	429c      	cmp	r4, r3
 80152b0:	d10a      	bne.n	80152c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 80152b2:	68b8      	ldr	r0, [r7, #8]
 80152b4:	f7ff ffbe 	bl	8015234 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 80152b8:	4604      	mov	r4, r0
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	4618      	mov	r0, r3
 80152be:	f7f7 fdd1 	bl	800ce64 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 80152c2:	4603      	mov	r3, r0
 80152c4:	429c      	cmp	r4, r3
 80152c6:	d005      	beq.n	80152d4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 80152c8:	4b05      	ldr	r3, [pc, #20]	; (80152e0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 80152ca:	4a06      	ldr	r2, [pc, #24]	; (80152e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 80152cc:	2174      	movs	r1, #116	; 0x74
 80152ce:	4806      	ldr	r0, [pc, #24]	; (80152e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 80152d0:	f008 fcdc 	bl	801dc8c <__assert_func>
    }
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	4618      	mov	r0, r3
 80152d8:	3710      	adds	r7, #16
 80152da:	46bd      	mov	sp, r7
 80152dc:	bdb0      	pop	{r4, r5, r7, pc}
 80152de:	bf00      	nop
 80152e0:	0801faf4 	.word	0x0801faf4
 80152e4:	080297d4 	.word	0x080297d4
 80152e8:	0801fd58 	.word	0x0801fd58

080152ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b082      	sub	sp, #8
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f000 f809 	bl	801530c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80152fa:	4603      	mov	r3, r0
 80152fc:	4618      	mov	r0, r3
 80152fe:	f000 f93a 	bl	8015576 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>
 8015302:	4603      	mov	r3, r0
 8015304:	4618      	mov	r0, r3
 8015306:	3708      	adds	r7, #8
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}

0801530c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801530c:	b480      	push	{r7}
 801530e:	b083      	sub	sp, #12
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	4618      	mov	r0, r3
 8015318:	370c      	adds	r7, #12
 801531a:	46bd      	mov	sp, r7
 801531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015320:	4770      	bx	lr

08015322 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8015322:	b580      	push	{r7, lr}
 8015324:	b082      	sub	sp, #8
 8015326:	af00      	add	r7, sp, #0
 8015328:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	4618      	mov	r0, r3
 801532e:	f7ff ff74 	bl	801521a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 8015332:	4603      	mov	r3, r0
    }
 8015334:	4618      	mov	r0, r3
 8015336:	3708      	adds	r7, #8
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}

0801533c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 801533c:	b580      	push	{r7, lr}
 801533e:	b082      	sub	sp, #8
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
 8015344:	6878      	ldr	r0, [r7, #4]
 8015346:	f000 f948 	bl	80155da <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	4618      	mov	r0, r3
 801534e:	3708      	adds	r7, #8
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}

08015354 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8015354:	b580      	push	{r7, lr}
 8015356:	b082      	sub	sp, #8
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	4618      	mov	r0, r3
 8015360:	f7ff ffec 	bl	801533c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	4618      	mov	r0, r3
 8015368:	3708      	adds	r7, #8
 801536a:	46bd      	mov	sp, r7
 801536c:	bd80      	pop	{r7, pc}

0801536e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 801536e:	b580      	push	{r7, lr}
 8015370:	b082      	sub	sp, #8
 8015372:	af00      	add	r7, sp, #0
 8015374:	6078      	str	r0, [r7, #4]
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	4618      	mov	r0, r3
 801537a:	f7ff ffeb 	bl	8015354 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	4618      	mov	r0, r3
 8015382:	3708      	adds	r7, #8
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}

08015388 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<const T>
 8015388:	b580      	push	{r7, lr}
 801538a:	b082      	sub	sp, #8
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	4618      	mov	r0, r3
 8015394:	f7ff ffeb 	bl	801536e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	4618      	mov	r0, r3
 801539c:	3708      	adds	r7, #8
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd80      	pop	{r7, pc}

080153a2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 80153a2:	b580      	push	{r7, lr}
 80153a4:	b082      	sub	sp, #8
 80153a6:	af00      	add	r7, sp, #0
 80153a8:	6078      	str	r0, [r7, #4]
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	4618      	mov	r0, r3
 80153ae:	f7ff ffeb 	bl	8015388 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	f000 f906 	bl	80155c4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	4618      	mov	r0, r3
 80153bc:	3708      	adds	r7, #8
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}

080153c2 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 80153c2:	b580      	push	{r7, lr}
 80153c4:	b082      	sub	sp, #8
 80153c6:	af00      	add	r7, sp, #0
 80153c8:	6078      	str	r0, [r7, #4]
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	4618      	mov	r0, r3
 80153ce:	f7ff ffe8 	bl	80153a2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	4618      	mov	r0, r3
 80153d6:	3708      	adds	r7, #8
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}

080153dc <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator<const T>
 80153dc:	b580      	push	{r7, lr}
 80153de:	b082      	sub	sp, #8
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7ff ffeb 	bl	80153c2 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	4618      	mov	r0, r3
 80153f0:	3708      	adds	r7, #8
 80153f2:	46bd      	mov	sp, r7
 80153f4:	bd80      	pop	{r7, pc}

080153f6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 80153f6:	b580      	push	{r7, lr}
 80153f8:	b082      	sub	sp, #8
 80153fa:	af00      	add	r7, sp, #0
 80153fc:	6078      	str	r0, [r7, #4]
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	330c      	adds	r3, #12
 8015402:	4618      	mov	r0, r3
 8015404:	f7f7 fdd6 	bl	800cfb4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	3304      	adds	r3, #4
 801540c:	4618      	mov	r0, r3
 801540e:	f7ff ffe5 	bl	80153dc <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	4618      	mov	r0, r3
 8015416:	3708      	adds	r7, #8
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}

0801541c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 801541c:	b580      	push	{r7, lr}
 801541e:	b082      	sub	sp, #8
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	4618      	mov	r0, r3
 8015428:	f7ff ffe5 	bl	80153f6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 801542c:	6878      	ldr	r0, [r7, #4]
 801542e:	f000 f8be 	bl	80155ae <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	4618      	mov	r0, r3
 8015436:	3708      	adds	r7, #8
 8015438:	46bd      	mov	sp, r7
 801543a:	bd80      	pop	{r7, pc}

0801543c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 801543c:	b580      	push	{r7, lr}
 801543e:	b082      	sub	sp, #8
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	4618      	mov	r0, r3
 8015448:	f7ff ffe8 	bl	801541c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	4618      	mov	r0, r3
 8015450:	3708      	adds	r7, #8
 8015452:	46bd      	mov	sp, r7
 8015454:	bd80      	pop	{r7, pc}

08015456 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8015456:	b580      	push	{r7, lr}
 8015458:	b082      	sub	sp, #8
 801545a:	af00      	add	r7, sp, #0
 801545c:	6078      	str	r0, [r7, #4]
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	4618      	mov	r0, r3
 8015462:	f7ff ffeb 	bl	801543c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	4618      	mov	r0, r3
 801546a:	3708      	adds	r7, #8
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}

08015470 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8015470:	b580      	push	{r7, lr}
 8015472:	ed2d 8b02 	vpush	{d8}
 8015476:	b088      	sub	sp, #32
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
 801547c:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 801547e:	6878      	ldr	r0, [r7, #4]
 8015480:	f7ff fe0f 	bl	80150a2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>
 8015484:	4603      	mov	r3, r0
 8015486:	2b00      	cmp	r3, #0
 8015488:	dd05      	ble.n	8015496 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 801548a:	6878      	ldr	r0, [r7, #4]
 801548c:	f7ff ff2e 	bl	80152ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>
 8015490:	4603      	mov	r3, r0
 8015492:	2b00      	cmp	r3, #0
 8015494:	dc06      	bgt.n	80154a4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8015496:	4b16      	ldr	r3, [pc, #88]	; (80154f0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8015498:	4a16      	ldr	r2, [pc, #88]	; (80154f4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 801549a:	f240 119b 	movw	r1, #411	; 0x19b
 801549e:	4816      	ldr	r0, [pc, #88]	; (80154f8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80154a0:	f008 fbf4 	bl	801dc8c <__assert_func>
 80154a4:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f7ff ff30 	bl	801530c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80154ac:	4602      	mov	r2, r0
 80154ae:	f107 030c 	add.w	r3, r7, #12
 80154b2:	4611      	mov	r1, r2
 80154b4:	4618      	mov	r0, r3
 80154b6:	f000 f86b 	bl	8015590 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	f7ff ff26 	bl	801530c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 80154c0:	4602      	mov	r2, r0
 80154c2:	f107 030c 	add.w	r3, r7, #12
 80154c6:	6839      	ldr	r1, [r7, #0]
 80154c8:	4618      	mov	r0, r3
 80154ca:	f000 f891 	bl	80155f0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 80154ce:	eeb0 8a40 	vmov.f32	s16, s0
 80154d2:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80154d4:	f107 030c 	add.w	r3, r7, #12
 80154d8:	4618      	mov	r0, r3
 80154da:	f7ff ffbc 	bl	8015456 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80154de:	eef0 7a48 	vmov.f32	s15, s16
}
 80154e2:	eeb0 0a67 	vmov.f32	s0, s15
 80154e6:	3720      	adds	r7, #32
 80154e8:	46bd      	mov	sp, r7
 80154ea:	ecbd 8b02 	vpop	{d8}
 80154ee:	bd80      	pop	{r7, pc}
 80154f0:	08024b74 	.word	0x08024b74
 80154f4:	08029a1c 	.word	0x08029a1c
 80154f8:	08024d80 	.word	0x08024d80

080154fc <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b084      	sub	sp, #16
 8015500:	af00      	add	r7, sp, #0
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	607a      	str	r2, [r7, #4]
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	687a      	ldr	r2, [r7, #4]
 801550c:	68b9      	ldr	r1, [r7, #8]
 801550e:	4618      	mov	r0, r3
 8015510:	f000 f87f 	bl	8015612 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	4618      	mov	r0, r3
 8015518:	3710      	adds	r7, #16
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}

0801551e <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801551e:	b480      	push	{r7}
 8015520:	b083      	sub	sp, #12
 8015522:	af00      	add	r7, sp, #0
 8015524:	6078      	str	r0, [r7, #4]
    }
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	4618      	mov	r0, r3
 801552a:	370c      	adds	r7, #12
 801552c:	46bd      	mov	sp, r7
 801552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015532:	4770      	bx	lr

08015534 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8015534:	b480      	push	{r7}
 8015536:	b083      	sub	sp, #12
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
    }
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	4618      	mov	r0, r3
 8015540:	370c      	adds	r7, #12
 8015542:	46bd      	mov	sp, r7
 8015544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015548:	4770      	bx	lr

0801554a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 801554a:	b580      	push	{r7, lr}
 801554c:	b082      	sub	sp, #8
 801554e:	af00      	add	r7, sp, #0
 8015550:	6078      	str	r0, [r7, #4]
 8015552:	f7f1 fa6e 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8015556:	4603      	mov	r3, r0
 8015558:	4618      	mov	r0, r3
 801555a:	3708      	adds	r7, #8
 801555c:	46bd      	mov	sp, r7
 801555e:	bd80      	pop	{r7, pc}

08015560 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8015560:	b580      	push	{r7, lr}
 8015562:	b082      	sub	sp, #8
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]
 8015568:	f7f1 fa6b 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801556c:	4603      	mov	r3, r0
 801556e:	4618      	mov	r0, r3
 8015570:	3708      	adds	r7, #8
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}

08015576 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8015576:	b580      	push	{r7, lr}
 8015578:	b082      	sub	sp, #8
 801557a:	af00      	add	r7, sp, #0
 801557c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	4618      	mov	r0, r3
 8015582:	f7ff fe57 	bl	8015234 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 8015586:	4603      	mov	r3, r0
    }
 8015588:	4618      	mov	r0, r3
 801558a:	3708      	adds	r7, #8
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}

08015590 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8015590:	b580      	push	{r7, lr}
 8015592:	b082      	sub	sp, #8
 8015594:	af00      	add	r7, sp, #0
 8015596:	6078      	str	r0, [r7, #4]
 8015598:	6039      	str	r1, [r7, #0]
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	6839      	ldr	r1, [r7, #0]
 801559e:	4618      	mov	r0, r3
 80155a0:	f000 f86d 	bl	801567e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	4618      	mov	r0, r3
 80155a8:	3708      	adds	r7, #8
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}

080155ae <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80155ae:	b480      	push	{r7}
 80155b0:	b083      	sub	sp, #12
 80155b2:	af00      	add	r7, sp, #0
 80155b4:	6078      	str	r0, [r7, #4]
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	4618      	mov	r0, r3
 80155ba:	370c      	adds	r7, #12
 80155bc:	46bd      	mov	sp, r7
 80155be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c2:	4770      	bx	lr

080155c4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
 80155c4:	b480      	push	{r7}
 80155c6:	b083      	sub	sp, #12
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	4618      	mov	r0, r3
 80155d0:	370c      	adds	r7, #12
 80155d2:	46bd      	mov	sp, r7
 80155d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d8:	4770      	bx	lr

080155da <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
 80155da:	b480      	push	{r7}
 80155dc:	b083      	sub	sp, #12
 80155de:	af00      	add	r7, sp, #0
 80155e0:	6078      	str	r0, [r7, #4]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	4618      	mov	r0, r3
 80155e6:	370c      	adds	r7, #12
 80155e8:	46bd      	mov	sp, r7
 80155ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ee:	4770      	bx	lr

080155f0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b084      	sub	sp, #16
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	60f8      	str	r0, [r7, #12]
 80155f8:	60b9      	str	r1, [r7, #8]
 80155fa:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80155fc:	68b9      	ldr	r1, [r7, #8]
 80155fe:	68f8      	ldr	r0, [r7, #12]
 8015600:	f000 f84c 	bl	801569c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 8015604:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015608:	eeb0 0a67 	vmov.f32	s0, s15
 801560c:	3710      	adds	r7, #16
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}

08015612 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8015612:	b5b0      	push	{r4, r5, r7, lr}
 8015614:	b084      	sub	sp, #16
 8015616:	af00      	add	r7, sp, #0
 8015618:	60f8      	str	r0, [r7, #12]
 801561a:	60b9      	str	r1, [r7, #8]
 801561c:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 801561e:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	4618      	mov	r0, r3
 8015624:	f7fd f866 	bl	80126f4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8015628:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 801562a:	68b8      	ldr	r0, [r7, #8]
 801562c:	f7fd fa90 	bl	8012b50 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015630:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	fb02 f303 	mul.w	r3, r2, r3
 8015638:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 801563a:	441d      	add	r5, r3
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	4618      	mov	r0, r3
 8015640:	f7ef fde4 	bl	800520c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8015644:	4603      	mov	r3, r0
 8015646:	2201      	movs	r2, #1
 8015648:	4629      	mov	r1, r5
 801564a:	4620      	mov	r0, r4
 801564c:	f000 f856 	bl	80156fc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	68ba      	ldr	r2, [r7, #8]
 8015654:	609a      	str	r2, [r3, #8]
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	330c      	adds	r3, #12
 801565a:	6879      	ldr	r1, [r7, #4]
 801565c:	4618      	mov	r0, r3
 801565e:	f7f8 faab 	bl	800dbb8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	3310      	adds	r3, #16
 8015666:	2100      	movs	r1, #0
 8015668:	4618      	mov	r0, r3
 801566a:	f7f8 fa31 	bl	800dad0 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 801566e:	68f8      	ldr	r0, [r7, #12]
 8015670:	f000 f882 	bl	8015778 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>
    }
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	4618      	mov	r0, r3
 8015678:	3710      	adds	r7, #16
 801567a:	46bd      	mov	sp, r7
 801567c:	bdb0      	pop	{r4, r5, r7, pc}

0801567e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 801567e:	b580      	push	{r7, lr}
 8015680:	b082      	sub	sp, #8
 8015682:	af00      	add	r7, sp, #0
 8015684:	6078      	str	r0, [r7, #4]
 8015686:	6039      	str	r1, [r7, #0]
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6839      	ldr	r1, [r7, #0]
 801568c:	4618      	mov	r0, r3
 801568e:	f000 f883 	bl	8015798 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	4618      	mov	r0, r3
 8015696:	3708      	adds	r7, #8
 8015698:	46bd      	mov	sp, r7
 801569a:	bd80      	pop	{r7, pc}

0801569c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801569c:	b580      	push	{r7, lr}
 801569e:	b084      	sub	sp, #16
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
 80156a4:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80156a6:	6839      	ldr	r1, [r7, #0]
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	f000 f887 	bl	80157bc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 80156ae:	eef0 7a40 	vmov.f32	s15, s0
 80156b2:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80156b6:	6839      	ldr	r1, [r7, #0]
 80156b8:	6878      	ldr	r0, [r7, #4]
 80156ba:	f000 f890 	bl	80157de <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 80156be:	eef0 7a40 	vmov.f32	s15, s0
 80156c2:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80156c6:	f107 020c 	add.w	r2, r7, #12
 80156ca:	f107 0308 	add.w	r3, r7, #8
 80156ce:	4619      	mov	r1, r3
 80156d0:	6838      	ldr	r0, [r7, #0]
 80156d2:	f7f3 fd74 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80156d6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80156da:	eeb0 0a67 	vmov.f32	s0, s15
 80156de:	3710      	adds	r7, #16
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}

080156e4 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	f000 f89a 	bl	8015826 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	4618      	mov	r0, r3
 80156f6:	3708      	adds	r7, #8
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bd80      	pop	{r7, pc}

080156fc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b084      	sub	sp, #16
 8015700:	af00      	add	r7, sp, #0
 8015702:	60f8      	str	r0, [r7, #12]
 8015704:	60b9      	str	r1, [r7, #8]
 8015706:	607a      	str	r2, [r7, #4]
 8015708:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 801570a:	68f8      	ldr	r0, [r7, #12]
 801570c:	f7ff ffea 	bl	80156e4 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	68ba      	ldr	r2, [r7, #8]
 8015714:	601a      	str	r2, [r3, #0]
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	3304      	adds	r3, #4
 801571a:	6879      	ldr	r1, [r7, #4]
 801571c:	4618      	mov	r0, r3
 801571e:	f7f1 f963 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	3305      	adds	r3, #5
 8015726:	6839      	ldr	r1, [r7, #0]
 8015728:	4618      	mov	r0, r3
 801572a:	f7f1 f943 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      eigen_assert( (dataPtr == 0)
 801572e:	68bb      	ldr	r3, [r7, #8]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d011      	beq.n	8015758 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	2b00      	cmp	r3, #0
 8015738:	db08      	blt.n	801574c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	2b01      	cmp	r3, #1
 801573e:	d105      	bne.n	801574c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015740:	683b      	ldr	r3, [r7, #0]
 8015742:	2b00      	cmp	r3, #0
 8015744:	db02      	blt.n	801574c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015746:	683b      	ldr	r3, [r7, #0]
 8015748:	2b03      	cmp	r3, #3
 801574a:	d005      	beq.n	8015758 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 801574c:	4b07      	ldr	r3, [pc, #28]	; (801576c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x70>)
 801574e:	4a08      	ldr	r2, [pc, #32]	; (8015770 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x74>)
 8015750:	21b0      	movs	r1, #176	; 0xb0
 8015752:	4808      	ldr	r0, [pc, #32]	; (8015774 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x78>)
 8015754:	f008 fa9a 	bl	801dc8c <__assert_func>
      checkSanity<Derived>();
 8015758:	2100      	movs	r1, #0
 801575a:	68f8      	ldr	r0, [r7, #12]
 801575c:	f000 f86e 	bl	801583c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	4618      	mov	r0, r3
 8015764:	3710      	adds	r7, #16
 8015766:	46bd      	mov	sp, r7
 8015768:	bd80      	pop	{r7, pc}
 801576a:	bf00      	nop
 801576c:	08026218 	.word	0x08026218
 8015770:	08029be0 	.word	0x08029be0
 8015774:	080263c8 	.word	0x080263c8

08015778 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>:
    void init()
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	689b      	ldr	r3, [r3, #8]
 8015784:	4618      	mov	r0, r3
 8015786:	f7fd f9e3 	bl	8012b50 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 801578a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	615a      	str	r2, [r3, #20]
    }
 8015790:	bf00      	nop
 8015792:	3708      	adds	r7, #8
 8015794:	46bd      	mov	sp, r7
 8015796:	bd80      	pop	{r7, pc}

08015798 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8015798:	b580      	push	{r7, lr}
 801579a:	b082      	sub	sp, #8
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
 80157a0:	6039      	str	r1, [r7, #0]
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f000 f855 	bl	8015852 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	6839      	ldr	r1, [r7, #0]
 80157ac:	4618      	mov	r0, r3
 80157ae:	f000 f85b 	bl	8015868 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	4618      	mov	r0, r3
 80157b6:	3708      	adds	r7, #8
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}

080157bc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80157bc:	b580      	push	{r7, lr}
 80157be:	b082      	sub	sp, #8
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
 80157c4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80157c6:	2200      	movs	r2, #0
 80157c8:	2100      	movs	r1, #0
 80157ca:	6878      	ldr	r0, [r7, #4]
 80157cc:	f000 f874 	bl	80158b8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80157d0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80157d4:	eeb0 0a67 	vmov.f32	s0, s15
 80157d8:	3708      	adds	r7, #8
 80157da:	46bd      	mov	sp, r7
 80157dc:	bd80      	pop	{r7, pc}

080157de <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80157de:	b580      	push	{r7, lr}
 80157e0:	b084      	sub	sp, #16
 80157e2:	af00      	add	r7, sp, #0
 80157e4:	6078      	str	r0, [r7, #4]
 80157e6:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80157e8:	6839      	ldr	r1, [r7, #0]
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f000 f877 	bl	80158de <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 80157f0:	eef0 7a40 	vmov.f32	s15, s0
 80157f4:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80157f8:	6839      	ldr	r1, [r7, #0]
 80157fa:	6878      	ldr	r0, [r7, #4]
 80157fc:	f000 f880 	bl	8015900 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 8015800:	eef0 7a40 	vmov.f32	s15, s0
 8015804:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015808:	f107 020c 	add.w	r2, r7, #12
 801580c:	f107 0308 	add.w	r3, r7, #8
 8015810:	4619      	mov	r1, r3
 8015812:	6838      	ldr	r0, [r7, #0]
 8015814:	f7f3 fcd3 	bl	80091be <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8015818:	eef0 7a40 	vmov.f32	s15, s0
  }
 801581c:	eeb0 0a67 	vmov.f32	s0, s15
 8015820:	3710      	adds	r7, #16
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}

08015826 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8015826:	b480      	push	{r7}
 8015828:	b083      	sub	sp, #12
 801582a:	af00      	add	r7, sp, #0
 801582c:	6078      	str	r0, [r7, #4]
    }
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	4618      	mov	r0, r3
 8015832:	370c      	adds	r7, #12
 8015834:	46bd      	mov	sp, r7
 8015836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583a:	4770      	bx	lr

0801583c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 801583c:	b480      	push	{r7}
 801583e:	b083      	sub	sp, #12
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
 8015844:	6039      	str	r1, [r7, #0]
    {}
 8015846:	bf00      	nop
 8015848:	370c      	adds	r7, #12
 801584a:	46bd      	mov	sp, r7
 801584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015850:	4770      	bx	lr

08015852 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015852:	b480      	push	{r7}
 8015854:	b083      	sub	sp, #12
 8015856:	af00      	add	r7, sp, #0
 8015858:	6078      	str	r0, [r7, #4]
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	4618      	mov	r0, r3
 801585e:	370c      	adds	r7, #12
 8015860:	46bd      	mov	sp, r7
 8015862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015866:	4770      	bx	lr

08015868 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8015868:	b590      	push	{r4, r7, lr}
 801586a:	b083      	sub	sp, #12
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	6039      	str	r1, [r7, #0]
 8015872:	687c      	ldr	r4, [r7, #4]
 8015874:	6838      	ldr	r0, [r7, #0]
 8015876:	f000 f854 	bl	8015922 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>
 801587a:	4603      	mov	r3, r0
 801587c:	4619      	mov	r1, r3
 801587e:	4620      	mov	r0, r4
 8015880:	f7ef fe38 	bl	80054f4 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	1d1c      	adds	r4, r3, #4
 8015888:	6838      	ldr	r0, [r7, #0]
 801588a:	f000 f856 	bl	801593a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>
 801588e:	4603      	mov	r3, r0
 8015890:	4619      	mov	r1, r3
 8015892:	4620      	mov	r0, r4
 8015894:	f000 f868 	bl	8015968 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	f103 040c 	add.w	r4, r3, #12
 801589e:	6838      	ldr	r0, [r7, #0]
 80158a0:	f000 f856 	bl	8015950 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>
 80158a4:	4603      	mov	r3, r0
 80158a6:	4619      	mov	r1, r3
 80158a8:	4620      	mov	r0, r4
 80158aa:	f7fa f995 	bl	800fbd8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	4618      	mov	r0, r3
 80158b2:	370c      	adds	r7, #12
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd90      	pop	{r4, r7, pc}

080158b8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b084      	sub	sp, #16
 80158bc:	af00      	add	r7, sp, #0
 80158be:	60f8      	str	r0, [r7, #12]
 80158c0:	60b9      	str	r1, [r7, #8]
 80158c2:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	68ba      	ldr	r2, [r7, #8]
 80158c8:	6879      	ldr	r1, [r7, #4]
 80158ca:	4618      	mov	r0, r3
 80158cc:	f000 f85b 	bl	8015986 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 80158d0:	eef0 7a40 	vmov.f32	s15, s0
 80158d4:	eeb0 0a67 	vmov.f32	s0, s15
 80158d8:	3710      	adds	r7, #16
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd80      	pop	{r7, pc}

080158de <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80158de:	b580      	push	{r7, lr}
 80158e0:	b082      	sub	sp, #8
 80158e2:	af00      	add	r7, sp, #0
 80158e4:	6078      	str	r0, [r7, #4]
 80158e6:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80158e8:	2201      	movs	r2, #1
 80158ea:	2100      	movs	r1, #0
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f7ff ffe3 	bl	80158b8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80158f2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80158f6:	eeb0 0a67 	vmov.f32	s0, s15
 80158fa:	3708      	adds	r7, #8
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}

08015900 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015900:	b580      	push	{r7, lr}
 8015902:	b082      	sub	sp, #8
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
 8015908:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801590a:	2202      	movs	r2, #2
 801590c:	2100      	movs	r1, #0
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f7ff ffd2 	bl	80158b8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015914:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015918:	eeb0 0a67 	vmov.f32	s0, s15
 801591c:	3708      	adds	r7, #8
 801591e:	46bd      	mov	sp, r7
 8015920:	bd80      	pop	{r7, pc}

08015922 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8015922:	b480      	push	{r7}
 8015924:	b083      	sub	sp, #12
 8015926:	af00      	add	r7, sp, #0
 8015928:	6078      	str	r0, [r7, #4]
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	3330      	adds	r3, #48	; 0x30
 801592e:	4618      	mov	r0, r3
 8015930:	370c      	adds	r7, #12
 8015932:	46bd      	mov	sp, r7
 8015934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015938:	4770      	bx	lr

0801593a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 801593a:	b480      	push	{r7}
 801593c:	b083      	sub	sp, #12
 801593e:	af00      	add	r7, sp, #0
 8015940:	6078      	str	r0, [r7, #4]
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	4618      	mov	r0, r3
 8015946:	370c      	adds	r7, #12
 8015948:	46bd      	mov	sp, r7
 801594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594e:	4770      	bx	lr

08015950 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8015950:	b480      	push	{r7}
 8015952:	b083      	sub	sp, #12
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	3318      	adds	r3, #24
 801595c:	4618      	mov	r0, r3
 801595e:	370c      	adds	r7, #12
 8015960:	46bd      	mov	sp, r7
 8015962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015966:	4770      	bx	lr

08015968 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
 8015970:	6039      	str	r1, [r7, #0]
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	6839      	ldr	r1, [r7, #0]
 8015976:	4618      	mov	r0, r3
 8015978:	f000 f835 	bl	80159e6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	4618      	mov	r0, r3
 8015980:	3708      	adds	r7, #8
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}

08015986 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015986:	b590      	push	{r4, r7, lr}
 8015988:	b087      	sub	sp, #28
 801598a:	af00      	add	r7, sp, #0
 801598c:	60f8      	str	r0, [r7, #12]
 801598e:	60b9      	str	r1, [r7, #8]
 8015990:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	4618      	mov	r0, r3
 8015996:	f000 f835 	bl	8015a04 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 801599a:	4604      	mov	r4, r0
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	3304      	adds	r3, #4
 80159a0:	687a      	ldr	r2, [r7, #4]
 80159a2:	68b9      	ldr	r1, [r7, #8]
 80159a4:	4618      	mov	r0, r3
 80159a6:	f000 f838 	bl	8015a1a <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>
 80159aa:	eef0 7a40 	vmov.f32	s15, s0
 80159ae:	edc7 7a04 	vstr	s15, [r7, #16]
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	330c      	adds	r3, #12
 80159b6:	687a      	ldr	r2, [r7, #4]
 80159b8:	68b9      	ldr	r1, [r7, #8]
 80159ba:	4618      	mov	r0, r3
 80159bc:	f7fa fd4e 	bl	801045c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 80159c0:	eef0 7a40 	vmov.f32	s15, s0
 80159c4:	edc7 7a05 	vstr	s15, [r7, #20]
 80159c8:	f107 0214 	add.w	r2, r7, #20
 80159cc:	f107 0310 	add.w	r3, r7, #16
 80159d0:	4619      	mov	r1, r3
 80159d2:	4620      	mov	r0, r4
 80159d4:	f7f9 fc34 	bl	800f240 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80159d8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80159dc:	eeb0 0a67 	vmov.f32	s0, s15
 80159e0:	371c      	adds	r7, #28
 80159e2:	46bd      	mov	sp, r7
 80159e4:	bd90      	pop	{r4, r7, pc}

080159e6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 80159e6:	b580      	push	{r7, lr}
 80159e8:	b082      	sub	sp, #8
 80159ea:	af00      	add	r7, sp, #0
 80159ec:	6078      	str	r0, [r7, #4]
 80159ee:	6039      	str	r1, [r7, #0]
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	6839      	ldr	r1, [r7, #0]
 80159f4:	4618      	mov	r0, r3
 80159f6:	f000 f823 	bl	8015a40 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	4618      	mov	r0, r3
 80159fe:	3708      	adds	r7, #8
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bd80      	pop	{r7, pc}

08015a04 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8015a04:	b480      	push	{r7}
 8015a06:	b083      	sub	sp, #12
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	4618      	mov	r0, r3
 8015a10:	370c      	adds	r7, #12
 8015a12:	46bd      	mov	sp, r7
 8015a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a18:	4770      	bx	lr

08015a1a <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015a1a:	b580      	push	{r7, lr}
 8015a1c:	b084      	sub	sp, #16
 8015a1e:	af00      	add	r7, sp, #0
 8015a20:	60f8      	str	r0, [r7, #12]
 8015a22:	60b9      	str	r1, [r7, #8]
 8015a24:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	68ba      	ldr	r2, [r7, #8]
 8015a2a:	6879      	ldr	r1, [r7, #4]
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f000 f81d 	bl	8015a6c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>
 8015a32:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015a36:	eeb0 0a67 	vmov.f32	s0, s15
 8015a3a:	3710      	adds	r7, #16
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}

08015a40 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8015a40:	b590      	push	{r4, r7, lr}
 8015a42:	b083      	sub	sp, #12
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
 8015a48:	6039      	str	r1, [r7, #0]
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f000 f83a 	bl	8015ac4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015a50:	687c      	ldr	r4, [r7, #4]
 8015a52:	6838      	ldr	r0, [r7, #0]
 8015a54:	f000 f82b 	bl	8015aae <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	4619      	mov	r1, r3
 8015a5c:	4620      	mov	r0, r4
 8015a5e:	f000 f83c 	bl	8015ada <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	4618      	mov	r0, r3
 8015a66:	370c      	adds	r7, #12
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	bd90      	pop	{r4, r7, pc}

08015a6c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015a6c:	b5b0      	push	{r4, r5, r7, lr}
 8015a6e:	b084      	sub	sp, #16
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	60f8      	str	r0, [r7, #12]
 8015a74:	60b9      	str	r1, [r7, #8]
 8015a76:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	681c      	ldr	r4, [r3, #0]
 8015a7c:	68f8      	ldr	r0, [r7, #12]
 8015a7e:	f000 f83b 	bl	8015af8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>
 8015a82:	4602      	mov	r2, r0
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	fb03 f502 	mul.w	r5, r3, r2
 8015a8a:	68f8      	ldr	r0, [r7, #12]
 8015a8c:	f000 f83f 	bl	8015b0e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>
 8015a90:	4602      	mov	r2, r0
 8015a92:	68bb      	ldr	r3, [r7, #8]
 8015a94:	fb02 f303 	mul.w	r3, r2, r3
 8015a98:	442b      	add	r3, r5
 8015a9a:	009b      	lsls	r3, r3, #2
 8015a9c:	4423      	add	r3, r4
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	ee07 3a90 	vmov	s15, r3
  }
 8015aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8015aa8:	3710      	adds	r7, #16
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bdb0      	pop	{r4, r5, r7, pc}

08015aae <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8015aae:	b480      	push	{r7}
 8015ab0:	b083      	sub	sp, #12
 8015ab2:	af00      	add	r7, sp, #0
 8015ab4:	6078      	str	r0, [r7, #4]
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	4618      	mov	r0, r3
 8015aba:	370c      	adds	r7, #12
 8015abc:	46bd      	mov	sp, r7
 8015abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac2:	4770      	bx	lr

08015ac4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015ac4:	b480      	push	{r7}
 8015ac6:	b083      	sub	sp, #12
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	4618      	mov	r0, r3
 8015ad0:	370c      	adds	r7, #12
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad8:	4770      	bx	lr

08015ada <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8015ada:	b580      	push	{r7, lr}
 8015adc:	b082      	sub	sp, #8
 8015ade:	af00      	add	r7, sp, #0
 8015ae0:	6078      	str	r0, [r7, #4]
 8015ae2:	6039      	str	r1, [r7, #0]
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	6839      	ldr	r1, [r7, #0]
 8015ae8:	4618      	mov	r0, r3
 8015aea:	f000 f81b 	bl	8015b24 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	4618      	mov	r0, r3
 8015af2:	3708      	adds	r7, #8
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}

08015af8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b082      	sub	sp, #8
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8015b00:	f7f0 ff9f 	bl	8006a42 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8015b04:	4603      	mov	r3, r0
  }
 8015b06:	4618      	mov	r0, r3
 8015b08:	3708      	adds	r7, #8
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}

08015b0e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8015b0e:	b580      	push	{r7, lr}
 8015b10:	b082      	sub	sp, #8
 8015b12:	af00      	add	r7, sp, #0
 8015b14:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8015b16:	f7f0 ff8c 	bl	8006a32 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8015b1a:	4603      	mov	r3, r0
  }
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	3708      	adds	r7, #8
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd80      	pop	{r7, pc}

08015b24 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b082      	sub	sp, #8
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
 8015b2c:	6039      	str	r1, [r7, #0]
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	6839      	ldr	r1, [r7, #0]
 8015b32:	4618      	mov	r0, r3
 8015b34:	f000 f805 	bl	8015b42 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>
  }
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	3708      	adds	r7, #8
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bd80      	pop	{r7, pc}

08015b42 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8015b42:	b580      	push	{r7, lr}
 8015b44:	b082      	sub	sp, #8
 8015b46:	af00      	add	r7, sp, #0
 8015b48:	6078      	str	r0, [r7, #4]
 8015b4a:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	6839      	ldr	r1, [r7, #0]
 8015b50:	4618      	mov	r0, r3
 8015b52:	f000 f80a 	bl	8015b6a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8015b56:	683b      	ldr	r3, [r7, #0]
 8015b58:	4618      	mov	r0, r3
 8015b5a:	f000 f830 	bl	8015bbe <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8015b5e:	bf00      	nop
  }
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	4618      	mov	r0, r3
 8015b64:	3708      	adds	r7, #8
 8015b66:	46bd      	mov	sp, r7
 8015b68:	bd80      	pop	{r7, pc}

08015b6a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8015b6a:	b590      	push	{r4, r7, lr}
 8015b6c:	b083      	sub	sp, #12
 8015b6e:	af00      	add	r7, sp, #0
 8015b70:	6078      	str	r0, [r7, #4]
 8015b72:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8015b74:	6878      	ldr	r0, [r7, #4]
 8015b76:	f000 f84a 	bl	8015c0e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	f000 f81e 	bl	8015bbe <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8015b82:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	601a      	str	r2, [r3, #0]
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	1d1c      	adds	r4, r3, #4
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f000 f821 	bl	8015bd6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>
 8015b94:	4603      	mov	r3, r0
 8015b96:	4619      	mov	r1, r3
 8015b98:	4620      	mov	r0, r4
 8015b9a:	f7f0 ff25 	bl	80069e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	1d5c      	adds	r4, r3, #5
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f000 f824 	bl	8015bf2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>
 8015baa:	4603      	mov	r3, r0
 8015bac:	4619      	mov	r1, r3
 8015bae:	4620      	mov	r0, r4
 8015bb0:	f7f0 ff00 	bl	80069b4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	370c      	adds	r7, #12
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bd90      	pop	{r4, r7, pc}

08015bbe <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8015bbe:	b480      	push	{r7}
 8015bc0:	b083      	sub	sp, #12
 8015bc2:	af00      	add	r7, sp, #0
 8015bc4:	6078      	str	r0, [r7, #4]
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	370c      	adds	r7, #12
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd4:	4770      	bx	lr

08015bd6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8015bd6:	b580      	push	{r7, lr}
 8015bd8:	b082      	sub	sp, #8
 8015bda:	af00      	add	r7, sp, #0
 8015bdc:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	689b      	ldr	r3, [r3, #8]
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7fd fcf8 	bl	80135d8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8015be8:	4603      	mov	r3, r0
    }
 8015bea:	4618      	mov	r0, r3
 8015bec:	3708      	adds	r7, #8
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}

08015bf2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8015bf2:	b580      	push	{r7, lr}
 8015bf4:	b082      	sub	sp, #8
 8015bf6:	af00      	add	r7, sp, #0
 8015bf8:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	689b      	ldr	r3, [r3, #8]
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7fc ffa6 	bl	8012b50 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015c04:	4603      	mov	r3, r0
    }
 8015c06:	4618      	mov	r0, r3
 8015c08:	3708      	adds	r7, #8
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	bd80      	pop	{r7, pc}

08015c0e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015c0e:	b480      	push	{r7}
 8015c10:	b083      	sub	sp, #12
 8015c12:	af00      	add	r7, sp, #0
 8015c14:	6078      	str	r0, [r7, #4]
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	4618      	mov	r0, r3
 8015c1a:	370c      	adds	r7, #12
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c22:	4770      	bx	lr

08015c24 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8015c24:	b590      	push	{r4, r7, lr}
 8015c26:	b083      	sub	sp, #12
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
 8015c2c:	6039      	str	r1, [r7, #0]
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	2b01      	cmp	r3, #1
 8015c32:	d141      	bne.n	8015cb8 <_Z41__static_initialization_and_destruction_0ii+0x94>
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015c3a:	4293      	cmp	r3, r2
 8015c3c:	d13c      	bne.n	8015cb8 <_Z41__static_initialization_and_destruction_0ii+0x94>
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 8015c3e:	4820      	ldr	r0, [pc, #128]	; (8015cc0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8015c40:	f7ee f9fb 	bl	800403a <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 8015c44:	481f      	ldr	r0, [pc, #124]	; (8015cc4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8015c46:	f7ee fa03 	bl	8004050 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 8015c4a:	481e      	ldr	r0, [pc, #120]	; (8015cc4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8015c4c:	f7ee fa0b 	bl	8004066 <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 8015c50:	4621      	mov	r1, r4
 8015c52:	481b      	ldr	r0, [pc, #108]	; (8015cc0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8015c54:	f7ee fa12 	bl	800407c <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 8015c58:	481b      	ldr	r0, [pc, #108]	; (8015cc8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8015c5a:	f7eb f96b 	bl	8000f34 <_ZN5Eigen8internal5all_tC1Ev>
Matrix <float,3,3> A ;
 8015c5e:	481b      	ldr	r0, [pc, #108]	; (8015ccc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8015c60:	f7ee fa31 	bl	80040c6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> P ;
 8015c64:	481a      	ldr	r0, [pc, #104]	; (8015cd0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8015c66:	f7ee fa2e 	bl	80040c6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> O ;
 8015c6a:	481a      	ldr	r0, [pc, #104]	; (8015cd4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8015c6c:	f7ee fa2b 	bl	80040c6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> I ;
 8015c70:	4819      	ldr	r0, [pc, #100]	; (8015cd8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8015c72:	f7ee fa28 	bl	80040c6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,1,1> S ;
 8015c76:	4819      	ldr	r0, [pc, #100]	; (8015cdc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8015c78:	f7ee fa34 	bl	80040e4 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> R ;
 8015c7c:	4818      	ldr	r0, [pc, #96]	; (8015ce0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8015c7e:	f7ee fa31 	bl	80040e4 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> D ;
 8015c82:	4818      	ldr	r0, [pc, #96]	; (8015ce4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8015c84:	f7ee fa2e 	bl	80040e4 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> Z ;
 8015c88:	4817      	ldr	r0, [pc, #92]	; (8015ce8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8015c8a:	f7ee fa2b 	bl	80040e4 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,3,1> K ;
 8015c8e:	4817      	ldr	r0, [pc, #92]	; (8015cec <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8015c90:	f7ee fa37 	bl	8004102 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,1,3> C ;
 8015c94:	4816      	ldr	r0, [pc, #88]	; (8015cf0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8015c96:	f7ee fa43 	bl	8004120 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>
Matrix <float,3,1> G ;
 8015c9a:	4816      	ldr	r0, [pc, #88]	; (8015cf4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8015c9c:	f7ee fa31 	bl	8004102 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,3,3> Q ;
 8015ca0:	4815      	ldr	r0, [pc, #84]	; (8015cf8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8015ca2:	f7ee fa10 	bl	80040c6 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Vector3f X;
 8015ca6:	4815      	ldr	r0, [pc, #84]	; (8015cfc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8015ca8:	f7ee fa2b 	bl	8004102 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f X1;
 8015cac:	4814      	ldr	r0, [pc, #80]	; (8015d00 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8015cae:	f7ee fa28 	bl	8004102 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f B;
 8015cb2:	4814      	ldr	r0, [pc, #80]	; (8015d04 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8015cb4:	f7ee fa25 	bl	8004102 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
}
 8015cb8:	bf00      	nop
 8015cba:	370c      	adds	r7, #12
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	bd90      	pop	{r4, r7, pc}
 8015cc0:	20000274 	.word	0x20000274
 8015cc4:	200007f4 	.word	0x200007f4
 8015cc8:	20000278 	.word	0x20000278
 8015ccc:	200005cc 	.word	0x200005cc
 8015cd0:	200005f0 	.word	0x200005f0
 8015cd4:	20000614 	.word	0x20000614
 8015cd8:	20000638 	.word	0x20000638
 8015cdc:	2000065c 	.word	0x2000065c
 8015ce0:	20000660 	.word	0x20000660
 8015ce4:	20000664 	.word	0x20000664
 8015ce8:	20000668 	.word	0x20000668
 8015cec:	2000066c 	.word	0x2000066c
 8015cf0:	20000678 	.word	0x20000678
 8015cf4:	20000684 	.word	0x20000684
 8015cf8:	20000690 	.word	0x20000690
 8015cfc:	200006b4 	.word	0x200006b4
 8015d00:	200006c0 	.word	0x200006c0
 8015d04:	200006cc 	.word	0x200006cc

08015d08 <_GLOBAL__sub_I_hi2c1>:
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	af00      	add	r7, sp, #0
 8015d0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015d10:	2001      	movs	r0, #1
 8015d12:	f7ff ff87 	bl	8015c24 <_Z41__static_initialization_and_destruction_0ii>
 8015d16:	bd80      	pop	{r7, pc}

08015d18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b082      	sub	sp, #8
 8015d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015d1e:	2300      	movs	r3, #0
 8015d20:	607b      	str	r3, [r7, #4]
 8015d22:	4b10      	ldr	r3, [pc, #64]	; (8015d64 <HAL_MspInit+0x4c>)
 8015d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d26:	4a0f      	ldr	r2, [pc, #60]	; (8015d64 <HAL_MspInit+0x4c>)
 8015d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8015d2e:	4b0d      	ldr	r3, [pc, #52]	; (8015d64 <HAL_MspInit+0x4c>)
 8015d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015d36:	607b      	str	r3, [r7, #4]
 8015d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	603b      	str	r3, [r7, #0]
 8015d3e:	4b09      	ldr	r3, [pc, #36]	; (8015d64 <HAL_MspInit+0x4c>)
 8015d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d42:	4a08      	ldr	r2, [pc, #32]	; (8015d64 <HAL_MspInit+0x4c>)
 8015d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015d48:	6413      	str	r3, [r2, #64]	; 0x40
 8015d4a:	4b06      	ldr	r3, [pc, #24]	; (8015d64 <HAL_MspInit+0x4c>)
 8015d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015d52:	603b      	str	r3, [r7, #0]
 8015d54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8015d56:	2007      	movs	r0, #7
 8015d58:	f000 fd14 	bl	8016784 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015d5c:	bf00      	nop
 8015d5e:	3708      	adds	r7, #8
 8015d60:	46bd      	mov	sp, r7
 8015d62:	bd80      	pop	{r7, pc}
 8015d64:	40023800 	.word	0x40023800

08015d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b08c      	sub	sp, #48	; 0x30
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015d70:	f107 031c 	add.w	r3, r7, #28
 8015d74:	2200      	movs	r2, #0
 8015d76:	601a      	str	r2, [r3, #0]
 8015d78:	605a      	str	r2, [r3, #4]
 8015d7a:	609a      	str	r2, [r3, #8]
 8015d7c:	60da      	str	r2, [r3, #12]
 8015d7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	4a52      	ldr	r2, [pc, #328]	; (8015ed0 <HAL_I2C_MspInit+0x168>)
 8015d86:	4293      	cmp	r3, r2
 8015d88:	d13d      	bne.n	8015e06 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	61bb      	str	r3, [r7, #24]
 8015d8e:	4b51      	ldr	r3, [pc, #324]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d92:	4a50      	ldr	r2, [pc, #320]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015d94:	f043 0302 	orr.w	r3, r3, #2
 8015d98:	6313      	str	r3, [r2, #48]	; 0x30
 8015d9a:	4b4e      	ldr	r3, [pc, #312]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d9e:	f003 0302 	and.w	r3, r3, #2
 8015da2:	61bb      	str	r3, [r7, #24]
 8015da4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8015da6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8015daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015dac:	2312      	movs	r3, #18
 8015dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015db0:	2300      	movs	r3, #0
 8015db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015db4:	2303      	movs	r3, #3
 8015db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015db8:	2304      	movs	r3, #4
 8015dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015dbc:	f107 031c 	add.w	r3, r7, #28
 8015dc0:	4619      	mov	r1, r3
 8015dc2:	4845      	ldr	r0, [pc, #276]	; (8015ed8 <HAL_I2C_MspInit+0x170>)
 8015dc4:	f001 f930 	bl	8017028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8015dc8:	2300      	movs	r3, #0
 8015dca:	617b      	str	r3, [r7, #20]
 8015dcc:	4b41      	ldr	r3, [pc, #260]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dd0:	4a40      	ldr	r2, [pc, #256]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015dd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8015dd8:	4b3e      	ldr	r3, [pc, #248]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015de0:	617b      	str	r3, [r7, #20]
 8015de2:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8015de4:	2200      	movs	r2, #0
 8015de6:	2100      	movs	r1, #0
 8015de8:	201f      	movs	r0, #31
 8015dea:	f000 fcd6 	bl	801679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8015dee:	201f      	movs	r0, #31
 8015df0:	f000 fcef 	bl	80167d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8015df4:	2200      	movs	r2, #0
 8015df6:	2100      	movs	r1, #0
 8015df8:	2020      	movs	r0, #32
 8015dfa:	f000 fcce 	bl	801679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8015dfe:	2020      	movs	r0, #32
 8015e00:	f000 fce7 	bl	80167d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8015e04:	e060      	b.n	8015ec8 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	4a34      	ldr	r2, [pc, #208]	; (8015edc <HAL_I2C_MspInit+0x174>)
 8015e0c:	4293      	cmp	r3, r2
 8015e0e:	d15b      	bne.n	8015ec8 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015e10:	2300      	movs	r3, #0
 8015e12:	613b      	str	r3, [r7, #16]
 8015e14:	4b2f      	ldr	r3, [pc, #188]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e18:	4a2e      	ldr	r2, [pc, #184]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015e1a:	f043 0304 	orr.w	r3, r3, #4
 8015e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8015e20:	4b2c      	ldr	r3, [pc, #176]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e24:	f003 0304 	and.w	r3, r3, #4
 8015e28:	613b      	str	r3, [r7, #16]
 8015e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	60fb      	str	r3, [r7, #12]
 8015e30:	4b28      	ldr	r3, [pc, #160]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e34:	4a27      	ldr	r2, [pc, #156]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015e36:	f043 0301 	orr.w	r3, r3, #1
 8015e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8015e3c:	4b25      	ldr	r3, [pc, #148]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e40:	f003 0301 	and.w	r3, r3, #1
 8015e44:	60fb      	str	r3, [r7, #12]
 8015e46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8015e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015e4e:	2312      	movs	r3, #18
 8015e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e52:	2300      	movs	r3, #0
 8015e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e56:	2303      	movs	r3, #3
 8015e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8015e5a:	2304      	movs	r3, #4
 8015e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015e5e:	f107 031c 	add.w	r3, r7, #28
 8015e62:	4619      	mov	r1, r3
 8015e64:	481e      	ldr	r0, [pc, #120]	; (8015ee0 <HAL_I2C_MspInit+0x178>)
 8015e66:	f001 f8df 	bl	8017028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8015e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015e70:	2312      	movs	r3, #18
 8015e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e74:	2300      	movs	r3, #0
 8015e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e78:	2303      	movs	r3, #3
 8015e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8015e7c:	2304      	movs	r3, #4
 8015e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015e80:	f107 031c 	add.w	r3, r7, #28
 8015e84:	4619      	mov	r1, r3
 8015e86:	4817      	ldr	r0, [pc, #92]	; (8015ee4 <HAL_I2C_MspInit+0x17c>)
 8015e88:	f001 f8ce 	bl	8017028 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	60bb      	str	r3, [r7, #8]
 8015e90:	4b10      	ldr	r3, [pc, #64]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e94:	4a0f      	ldr	r2, [pc, #60]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015e96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8015e9c:	4b0d      	ldr	r3, [pc, #52]	; (8015ed4 <HAL_I2C_MspInit+0x16c>)
 8015e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015ea4:	60bb      	str	r3, [r7, #8]
 8015ea6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	2100      	movs	r1, #0
 8015eac:	2048      	movs	r0, #72	; 0x48
 8015eae:	f000 fc74 	bl	801679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8015eb2:	2048      	movs	r0, #72	; 0x48
 8015eb4:	f000 fc8d 	bl	80167d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8015eb8:	2200      	movs	r2, #0
 8015eba:	2100      	movs	r1, #0
 8015ebc:	2049      	movs	r0, #73	; 0x49
 8015ebe:	f000 fc6c 	bl	801679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8015ec2:	2049      	movs	r0, #73	; 0x49
 8015ec4:	f000 fc85 	bl	80167d2 <HAL_NVIC_EnableIRQ>
}
 8015ec8:	bf00      	nop
 8015eca:	3730      	adds	r7, #48	; 0x30
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd80      	pop	{r7, pc}
 8015ed0:	40005400 	.word	0x40005400
 8015ed4:	40023800 	.word	0x40023800
 8015ed8:	40020400 	.word	0x40020400
 8015edc:	40005c00 	.word	0x40005c00
 8015ee0:	40020800 	.word	0x40020800
 8015ee4:	40020000 	.word	0x40020000

08015ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b086      	sub	sp, #24
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	4a26      	ldr	r2, [pc, #152]	; (8015f90 <HAL_TIM_Base_MspInit+0xa8>)
 8015ef6:	4293      	cmp	r3, r2
 8015ef8:	d10e      	bne.n	8015f18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8015efa:	2300      	movs	r3, #0
 8015efc:	617b      	str	r3, [r7, #20]
 8015efe:	4b25      	ldr	r3, [pc, #148]	; (8015f94 <HAL_TIM_Base_MspInit+0xac>)
 8015f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f02:	4a24      	ldr	r2, [pc, #144]	; (8015f94 <HAL_TIM_Base_MspInit+0xac>)
 8015f04:	f043 0304 	orr.w	r3, r3, #4
 8015f08:	6413      	str	r3, [r2, #64]	; 0x40
 8015f0a:	4b22      	ldr	r3, [pc, #136]	; (8015f94 <HAL_TIM_Base_MspInit+0xac>)
 8015f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f0e:	f003 0304 	and.w	r3, r3, #4
 8015f12:	617b      	str	r3, [r7, #20]
 8015f14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8015f16:	e036      	b.n	8015f86 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	4a1e      	ldr	r2, [pc, #120]	; (8015f98 <HAL_TIM_Base_MspInit+0xb0>)
 8015f1e:	4293      	cmp	r3, r2
 8015f20:	d116      	bne.n	8015f50 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8015f22:	2300      	movs	r3, #0
 8015f24:	613b      	str	r3, [r7, #16]
 8015f26:	4b1b      	ldr	r3, [pc, #108]	; (8015f94 <HAL_TIM_Base_MspInit+0xac>)
 8015f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f2a:	4a1a      	ldr	r2, [pc, #104]	; (8015f94 <HAL_TIM_Base_MspInit+0xac>)
 8015f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015f30:	6453      	str	r3, [r2, #68]	; 0x44
 8015f32:	4b18      	ldr	r3, [pc, #96]	; (8015f94 <HAL_TIM_Base_MspInit+0xac>)
 8015f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015f3a:	613b      	str	r3, [r7, #16]
 8015f3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8015f3e:	2200      	movs	r2, #0
 8015f40:	2100      	movs	r1, #0
 8015f42:	2019      	movs	r0, #25
 8015f44:	f000 fc29 	bl	801679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8015f48:	2019      	movs	r0, #25
 8015f4a:	f000 fc42 	bl	80167d2 <HAL_NVIC_EnableIRQ>
}
 8015f4e:	e01a      	b.n	8015f86 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	4a11      	ldr	r2, [pc, #68]	; (8015f9c <HAL_TIM_Base_MspInit+0xb4>)
 8015f56:	4293      	cmp	r3, r2
 8015f58:	d115      	bne.n	8015f86 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	60fb      	str	r3, [r7, #12]
 8015f5e:	4b0d      	ldr	r3, [pc, #52]	; (8015f94 <HAL_TIM_Base_MspInit+0xac>)
 8015f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f62:	4a0c      	ldr	r2, [pc, #48]	; (8015f94 <HAL_TIM_Base_MspInit+0xac>)
 8015f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015f68:	6453      	str	r3, [r2, #68]	; 0x44
 8015f6a:	4b0a      	ldr	r3, [pc, #40]	; (8015f94 <HAL_TIM_Base_MspInit+0xac>)
 8015f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015f72:	60fb      	str	r3, [r7, #12]
 8015f74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8015f76:	2200      	movs	r2, #0
 8015f78:	2100      	movs	r1, #0
 8015f7a:	201a      	movs	r0, #26
 8015f7c:	f000 fc0d 	bl	801679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8015f80:	201a      	movs	r0, #26
 8015f82:	f000 fc26 	bl	80167d2 <HAL_NVIC_EnableIRQ>
}
 8015f86:	bf00      	nop
 8015f88:	3718      	adds	r7, #24
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	bd80      	pop	{r7, pc}
 8015f8e:	bf00      	nop
 8015f90:	40000800 	.word	0x40000800
 8015f94:	40023800 	.word	0x40023800
 8015f98:	40014400 	.word	0x40014400
 8015f9c:	40014800 	.word	0x40014800

08015fa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b088      	sub	sp, #32
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015fa8:	f107 030c 	add.w	r3, r7, #12
 8015fac:	2200      	movs	r2, #0
 8015fae:	601a      	str	r2, [r3, #0]
 8015fb0:	605a      	str	r2, [r3, #4]
 8015fb2:	609a      	str	r2, [r3, #8]
 8015fb4:	60da      	str	r2, [r3, #12]
 8015fb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	4a12      	ldr	r2, [pc, #72]	; (8016008 <HAL_TIM_MspPostInit+0x68>)
 8015fbe:	4293      	cmp	r3, r2
 8015fc0:	d11d      	bne.n	8015ffe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	60bb      	str	r3, [r7, #8]
 8015fc6:	4b11      	ldr	r3, [pc, #68]	; (801600c <HAL_TIM_MspPostInit+0x6c>)
 8015fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fca:	4a10      	ldr	r2, [pc, #64]	; (801600c <HAL_TIM_MspPostInit+0x6c>)
 8015fcc:	f043 0302 	orr.w	r3, r3, #2
 8015fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8015fd2:	4b0e      	ldr	r3, [pc, #56]	; (801600c <HAL_TIM_MspPostInit+0x6c>)
 8015fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fd6:	f003 0302 	and.w	r3, r3, #2
 8015fda:	60bb      	str	r3, [r7, #8]
 8015fdc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 8015fde:	2340      	movs	r3, #64	; 0x40
 8015fe0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015fe2:	2302      	movs	r3, #2
 8015fe4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015fea:	2300      	movs	r3, #0
 8015fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8015fee:	2302      	movs	r3, #2
 8015ff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 8015ff2:	f107 030c 	add.w	r3, r7, #12
 8015ff6:	4619      	mov	r1, r3
 8015ff8:	4805      	ldr	r0, [pc, #20]	; (8016010 <HAL_TIM_MspPostInit+0x70>)
 8015ffa:	f001 f815 	bl	8017028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8015ffe:	bf00      	nop
 8016000:	3720      	adds	r7, #32
 8016002:	46bd      	mov	sp, r7
 8016004:	bd80      	pop	{r7, pc}
 8016006:	bf00      	nop
 8016008:	40000800 	.word	0x40000800
 801600c:	40023800 	.word	0x40023800
 8016010:	40020400 	.word	0x40020400

08016014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b08a      	sub	sp, #40	; 0x28
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801601c:	f107 0314 	add.w	r3, r7, #20
 8016020:	2200      	movs	r2, #0
 8016022:	601a      	str	r2, [r3, #0]
 8016024:	605a      	str	r2, [r3, #4]
 8016026:	609a      	str	r2, [r3, #8]
 8016028:	60da      	str	r2, [r3, #12]
 801602a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	4a4b      	ldr	r2, [pc, #300]	; (8016160 <HAL_UART_MspInit+0x14c>)
 8016032:	4293      	cmp	r3, r2
 8016034:	f040 8090 	bne.w	8016158 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8016038:	2300      	movs	r3, #0
 801603a:	613b      	str	r3, [r7, #16]
 801603c:	4b49      	ldr	r3, [pc, #292]	; (8016164 <HAL_UART_MspInit+0x150>)
 801603e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016040:	4a48      	ldr	r2, [pc, #288]	; (8016164 <HAL_UART_MspInit+0x150>)
 8016042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016046:	6413      	str	r3, [r2, #64]	; 0x40
 8016048:	4b46      	ldr	r3, [pc, #280]	; (8016164 <HAL_UART_MspInit+0x150>)
 801604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801604c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016050:	613b      	str	r3, [r7, #16]
 8016052:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016054:	2300      	movs	r3, #0
 8016056:	60fb      	str	r3, [r7, #12]
 8016058:	4b42      	ldr	r3, [pc, #264]	; (8016164 <HAL_UART_MspInit+0x150>)
 801605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801605c:	4a41      	ldr	r2, [pc, #260]	; (8016164 <HAL_UART_MspInit+0x150>)
 801605e:	f043 0301 	orr.w	r3, r3, #1
 8016062:	6313      	str	r3, [r2, #48]	; 0x30
 8016064:	4b3f      	ldr	r3, [pc, #252]	; (8016164 <HAL_UART_MspInit+0x150>)
 8016066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016068:	f003 0301 	and.w	r3, r3, #1
 801606c:	60fb      	str	r3, [r7, #12]
 801606e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8016070:	230c      	movs	r3, #12
 8016072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016074:	2302      	movs	r3, #2
 8016076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016078:	2300      	movs	r3, #0
 801607a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801607c:	2303      	movs	r3, #3
 801607e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8016080:	2307      	movs	r3, #7
 8016082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016084:	f107 0314 	add.w	r3, r7, #20
 8016088:	4619      	mov	r1, r3
 801608a:	4837      	ldr	r0, [pc, #220]	; (8016168 <HAL_UART_MspInit+0x154>)
 801608c:	f000 ffcc 	bl	8017028 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream7;
 8016090:	4b36      	ldr	r3, [pc, #216]	; (801616c <HAL_UART_MspInit+0x158>)
 8016092:	4a37      	ldr	r2, [pc, #220]	; (8016170 <HAL_UART_MspInit+0x15c>)
 8016094:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 8016096:	4b35      	ldr	r3, [pc, #212]	; (801616c <HAL_UART_MspInit+0x158>)
 8016098:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 801609c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801609e:	4b33      	ldr	r3, [pc, #204]	; (801616c <HAL_UART_MspInit+0x158>)
 80160a0:	2200      	movs	r2, #0
 80160a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80160a4:	4b31      	ldr	r3, [pc, #196]	; (801616c <HAL_UART_MspInit+0x158>)
 80160a6:	2200      	movs	r2, #0
 80160a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80160aa:	4b30      	ldr	r3, [pc, #192]	; (801616c <HAL_UART_MspInit+0x158>)
 80160ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80160b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80160b2:	4b2e      	ldr	r3, [pc, #184]	; (801616c <HAL_UART_MspInit+0x158>)
 80160b4:	2200      	movs	r2, #0
 80160b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80160b8:	4b2c      	ldr	r3, [pc, #176]	; (801616c <HAL_UART_MspInit+0x158>)
 80160ba:	2200      	movs	r2, #0
 80160bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80160be:	4b2b      	ldr	r3, [pc, #172]	; (801616c <HAL_UART_MspInit+0x158>)
 80160c0:	2200      	movs	r2, #0
 80160c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80160c4:	4b29      	ldr	r3, [pc, #164]	; (801616c <HAL_UART_MspInit+0x158>)
 80160c6:	2200      	movs	r2, #0
 80160c8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80160ca:	4b28      	ldr	r3, [pc, #160]	; (801616c <HAL_UART_MspInit+0x158>)
 80160cc:	2200      	movs	r2, #0
 80160ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80160d0:	4826      	ldr	r0, [pc, #152]	; (801616c <HAL_UART_MspInit+0x158>)
 80160d2:	f000 fb99 	bl	8016808 <HAL_DMA_Init>
 80160d6:	4603      	mov	r3, r0
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d001      	beq.n	80160e0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80160dc:	f7ed ffa8 	bl	8004030 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	4a22      	ldr	r2, [pc, #136]	; (801616c <HAL_UART_MspInit+0x158>)
 80160e4:	639a      	str	r2, [r3, #56]	; 0x38
 80160e6:	4a21      	ldr	r2, [pc, #132]	; (801616c <HAL_UART_MspInit+0x158>)
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80160ec:	4b21      	ldr	r3, [pc, #132]	; (8016174 <HAL_UART_MspInit+0x160>)
 80160ee:	4a22      	ldr	r2, [pc, #136]	; (8016178 <HAL_UART_MspInit+0x164>)
 80160f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80160f2:	4b20      	ldr	r3, [pc, #128]	; (8016174 <HAL_UART_MspInit+0x160>)
 80160f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80160f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80160fa:	4b1e      	ldr	r3, [pc, #120]	; (8016174 <HAL_UART_MspInit+0x160>)
 80160fc:	2240      	movs	r2, #64	; 0x40
 80160fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016100:	4b1c      	ldr	r3, [pc, #112]	; (8016174 <HAL_UART_MspInit+0x160>)
 8016102:	2200      	movs	r2, #0
 8016104:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8016106:	4b1b      	ldr	r3, [pc, #108]	; (8016174 <HAL_UART_MspInit+0x160>)
 8016108:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801610c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801610e:	4b19      	ldr	r3, [pc, #100]	; (8016174 <HAL_UART_MspInit+0x160>)
 8016110:	2200      	movs	r2, #0
 8016112:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8016114:	4b17      	ldr	r3, [pc, #92]	; (8016174 <HAL_UART_MspInit+0x160>)
 8016116:	2200      	movs	r2, #0
 8016118:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 801611a:	4b16      	ldr	r3, [pc, #88]	; (8016174 <HAL_UART_MspInit+0x160>)
 801611c:	2200      	movs	r2, #0
 801611e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8016120:	4b14      	ldr	r3, [pc, #80]	; (8016174 <HAL_UART_MspInit+0x160>)
 8016122:	2200      	movs	r2, #0
 8016124:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8016126:	4b13      	ldr	r3, [pc, #76]	; (8016174 <HAL_UART_MspInit+0x160>)
 8016128:	2200      	movs	r2, #0
 801612a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 801612c:	4811      	ldr	r0, [pc, #68]	; (8016174 <HAL_UART_MspInit+0x160>)
 801612e:	f000 fb6b 	bl	8016808 <HAL_DMA_Init>
 8016132:	4603      	mov	r3, r0
 8016134:	2b00      	cmp	r3, #0
 8016136:	d001      	beq.n	801613c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8016138:	f7ed ff7a 	bl	8004030 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	4a0d      	ldr	r2, [pc, #52]	; (8016174 <HAL_UART_MspInit+0x160>)
 8016140:	635a      	str	r2, [r3, #52]	; 0x34
 8016142:	4a0c      	ldr	r2, [pc, #48]	; (8016174 <HAL_UART_MspInit+0x160>)
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8016148:	2200      	movs	r2, #0
 801614a:	2100      	movs	r1, #0
 801614c:	2026      	movs	r0, #38	; 0x26
 801614e:	f000 fb24 	bl	801679a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8016152:	2026      	movs	r0, #38	; 0x26
 8016154:	f000 fb3d 	bl	80167d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8016158:	bf00      	nop
 801615a:	3728      	adds	r7, #40	; 0x28
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}
 8016160:	40004400 	.word	0x40004400
 8016164:	40023800 	.word	0x40023800
 8016168:	40020000 	.word	0x40020000
 801616c:	20000440 	.word	0x20000440
 8016170:	400260b8 	.word	0x400260b8
 8016174:	200004a0 	.word	0x200004a0
 8016178:	400260a0 	.word	0x400260a0

0801617c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801617c:	b480      	push	{r7}
 801617e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8016180:	e7fe      	b.n	8016180 <NMI_Handler+0x4>

08016182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8016182:	b480      	push	{r7}
 8016184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8016186:	e7fe      	b.n	8016186 <HardFault_Handler+0x4>

08016188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8016188:	b480      	push	{r7}
 801618a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801618c:	e7fe      	b.n	801618c <MemManage_Handler+0x4>

0801618e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801618e:	b480      	push	{r7}
 8016190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8016192:	e7fe      	b.n	8016192 <BusFault_Handler+0x4>

08016194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8016194:	b480      	push	{r7}
 8016196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8016198:	e7fe      	b.n	8016198 <UsageFault_Handler+0x4>

0801619a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801619a:	b480      	push	{r7}
 801619c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801619e:	bf00      	nop
 80161a0:	46bd      	mov	sp, r7
 80161a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a6:	4770      	bx	lr

080161a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80161a8:	b480      	push	{r7}
 80161aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80161ac:	bf00      	nop
 80161ae:	46bd      	mov	sp, r7
 80161b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b4:	4770      	bx	lr

080161b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80161b6:	b480      	push	{r7}
 80161b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80161ba:	bf00      	nop
 80161bc:	46bd      	mov	sp, r7
 80161be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c2:	4770      	bx	lr

080161c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80161c8:	f000 f9c8 	bl	801655c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80161cc:	bf00      	nop
 80161ce:	bd80      	pop	{r7, pc}

080161d0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80161d0:	b580      	push	{r7, lr}
 80161d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 80161d4:	2004      	movs	r0, #4
 80161d6:	f001 f8dd 	bl	8017394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80161da:	bf00      	nop
 80161dc:	bd80      	pop	{r7, pc}
	...

080161e0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80161e4:	4802      	ldr	r0, [pc, #8]	; (80161f0 <DMA1_Stream6_IRQHandler+0x10>)
 80161e6:	f000 fca7 	bl	8016b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80161ea:	bf00      	nop
 80161ec:	bd80      	pop	{r7, pc}
 80161ee:	bf00      	nop
 80161f0:	200004a0 	.word	0x200004a0

080161f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80161f8:	4802      	ldr	r0, [pc, #8]	; (8016204 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80161fa:	f004 fdef 	bl	801addc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80161fe:	bf00      	nop
 8016200:	bd80      	pop	{r7, pc}
 8016202:	bf00      	nop
 8016204:	2000036c 	.word	0x2000036c

08016208 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 801620c:	4802      	ldr	r0, [pc, #8]	; (8016218 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 801620e:	f004 fde5 	bl	801addc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8016212:	bf00      	nop
 8016214:	bd80      	pop	{r7, pc}
 8016216:	bf00      	nop
 8016218:	200003b4 	.word	0x200003b4

0801621c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8016220:	4802      	ldr	r0, [pc, #8]	; (801622c <I2C1_EV_IRQHandler+0x10>)
 8016222:	f001 fef7 	bl	8018014 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8016226:	bf00      	nop
 8016228:	bd80      	pop	{r7, pc}
 801622a:	bf00      	nop
 801622c:	2000027c 	.word	0x2000027c

08016230 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8016234:	4802      	ldr	r0, [pc, #8]	; (8016240 <I2C1_ER_IRQHandler+0x10>)
 8016236:	f002 f85e 	bl	80182f6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 801623a:	bf00      	nop
 801623c:	bd80      	pop	{r7, pc}
 801623e:	bf00      	nop
 8016240:	2000027c 	.word	0x2000027c

08016244 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8016248:	4802      	ldr	r0, [pc, #8]	; (8016254 <USART2_IRQHandler+0x10>)
 801624a:	f005 fd13 	bl	801bc74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 801624e:	bf00      	nop
 8016250:	bd80      	pop	{r7, pc}
 8016252:	bf00      	nop
 8016254:	200003fc 	.word	0x200003fc

08016258 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 801625c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8016260:	f001 f898 	bl	8017394 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 8016264:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8016268:	f001 f894 	bl	8017394 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 801626c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8016270:	f001 f890 	bl	8017394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8016274:	bf00      	nop
 8016276:	bd80      	pop	{r7, pc}

08016278 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 801627c:	4802      	ldr	r0, [pc, #8]	; (8016288 <DMA1_Stream7_IRQHandler+0x10>)
 801627e:	f000 fc5b 	bl	8016b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8016282:	bf00      	nop
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop
 8016288:	20000440 	.word	0x20000440

0801628c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8016290:	4802      	ldr	r0, [pc, #8]	; (801629c <I2C3_EV_IRQHandler+0x10>)
 8016292:	f001 febf 	bl	8018014 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8016296:	bf00      	nop
 8016298:	bd80      	pop	{r7, pc}
 801629a:	bf00      	nop
 801629c:	200002d0 	.word	0x200002d0

080162a0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80162a4:	4802      	ldr	r0, [pc, #8]	; (80162b0 <I2C3_ER_IRQHandler+0x10>)
 80162a6:	f002 f826 	bl	80182f6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80162aa:	bf00      	nop
 80162ac:	bd80      	pop	{r7, pc}
 80162ae:	bf00      	nop
 80162b0:	200002d0 	.word	0x200002d0

080162b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80162b4:	b480      	push	{r7}
 80162b6:	af00      	add	r7, sp, #0
	return 1;
 80162b8:	2301      	movs	r3, #1
}
 80162ba:	4618      	mov	r0, r3
 80162bc:	46bd      	mov	sp, r7
 80162be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c2:	4770      	bx	lr

080162c4 <_kill>:

int _kill(int pid, int sig)
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b082      	sub	sp, #8
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	6078      	str	r0, [r7, #4]
 80162cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80162ce:	f007 fcfb 	bl	801dcc8 <__errno>
 80162d2:	4603      	mov	r3, r0
 80162d4:	2216      	movs	r2, #22
 80162d6:	601a      	str	r2, [r3, #0]
	return -1;
 80162d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80162dc:	4618      	mov	r0, r3
 80162de:	3708      	adds	r7, #8
 80162e0:	46bd      	mov	sp, r7
 80162e2:	bd80      	pop	{r7, pc}

080162e4 <_exit>:

void _exit (int status)
{
 80162e4:	b580      	push	{r7, lr}
 80162e6:	b082      	sub	sp, #8
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80162ec:	f04f 31ff 	mov.w	r1, #4294967295
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	f7ff ffe7 	bl	80162c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80162f6:	e7fe      	b.n	80162f6 <_exit+0x12>

080162f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b086      	sub	sp, #24
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	60f8      	str	r0, [r7, #12]
 8016300:	60b9      	str	r1, [r7, #8]
 8016302:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016304:	2300      	movs	r3, #0
 8016306:	617b      	str	r3, [r7, #20]
 8016308:	e00a      	b.n	8016320 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801630a:	f3af 8000 	nop.w
 801630e:	4601      	mov	r1, r0
 8016310:	68bb      	ldr	r3, [r7, #8]
 8016312:	1c5a      	adds	r2, r3, #1
 8016314:	60ba      	str	r2, [r7, #8]
 8016316:	b2ca      	uxtb	r2, r1
 8016318:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801631a:	697b      	ldr	r3, [r7, #20]
 801631c:	3301      	adds	r3, #1
 801631e:	617b      	str	r3, [r7, #20]
 8016320:	697a      	ldr	r2, [r7, #20]
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	429a      	cmp	r2, r3
 8016326:	dbf0      	blt.n	801630a <_read+0x12>
	}

return len;
 8016328:	687b      	ldr	r3, [r7, #4]
}
 801632a:	4618      	mov	r0, r3
 801632c:	3718      	adds	r7, #24
 801632e:	46bd      	mov	sp, r7
 8016330:	bd80      	pop	{r7, pc}

08016332 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8016332:	b580      	push	{r7, lr}
 8016334:	b086      	sub	sp, #24
 8016336:	af00      	add	r7, sp, #0
 8016338:	60f8      	str	r0, [r7, #12]
 801633a:	60b9      	str	r1, [r7, #8]
 801633c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801633e:	2300      	movs	r3, #0
 8016340:	617b      	str	r3, [r7, #20]
 8016342:	e009      	b.n	8016358 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8016344:	68bb      	ldr	r3, [r7, #8]
 8016346:	1c5a      	adds	r2, r3, #1
 8016348:	60ba      	str	r2, [r7, #8]
 801634a:	781b      	ldrb	r3, [r3, #0]
 801634c:	4618      	mov	r0, r3
 801634e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016352:	697b      	ldr	r3, [r7, #20]
 8016354:	3301      	adds	r3, #1
 8016356:	617b      	str	r3, [r7, #20]
 8016358:	697a      	ldr	r2, [r7, #20]
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	429a      	cmp	r2, r3
 801635e:	dbf1      	blt.n	8016344 <_write+0x12>
	}
	return len;
 8016360:	687b      	ldr	r3, [r7, #4]
}
 8016362:	4618      	mov	r0, r3
 8016364:	3718      	adds	r7, #24
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}

0801636a <_close>:

int _close(int file)
{
 801636a:	b480      	push	{r7}
 801636c:	b083      	sub	sp, #12
 801636e:	af00      	add	r7, sp, #0
 8016370:	6078      	str	r0, [r7, #4]
	return -1;
 8016372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016376:	4618      	mov	r0, r3
 8016378:	370c      	adds	r7, #12
 801637a:	46bd      	mov	sp, r7
 801637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016380:	4770      	bx	lr

08016382 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8016382:	b480      	push	{r7}
 8016384:	b083      	sub	sp, #12
 8016386:	af00      	add	r7, sp, #0
 8016388:	6078      	str	r0, [r7, #4]
 801638a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801638c:	683b      	ldr	r3, [r7, #0]
 801638e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8016392:	605a      	str	r2, [r3, #4]
	return 0;
 8016394:	2300      	movs	r3, #0
}
 8016396:	4618      	mov	r0, r3
 8016398:	370c      	adds	r7, #12
 801639a:	46bd      	mov	sp, r7
 801639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a0:	4770      	bx	lr

080163a2 <_isatty>:

int _isatty(int file)
{
 80163a2:	b480      	push	{r7}
 80163a4:	b083      	sub	sp, #12
 80163a6:	af00      	add	r7, sp, #0
 80163a8:	6078      	str	r0, [r7, #4]
	return 1;
 80163aa:	2301      	movs	r3, #1
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	370c      	adds	r7, #12
 80163b0:	46bd      	mov	sp, r7
 80163b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b6:	4770      	bx	lr

080163b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80163b8:	b480      	push	{r7}
 80163ba:	b085      	sub	sp, #20
 80163bc:	af00      	add	r7, sp, #0
 80163be:	60f8      	str	r0, [r7, #12]
 80163c0:	60b9      	str	r1, [r7, #8]
 80163c2:	607a      	str	r2, [r7, #4]
	return 0;
 80163c4:	2300      	movs	r3, #0
}
 80163c6:	4618      	mov	r0, r3
 80163c8:	3714      	adds	r7, #20
 80163ca:	46bd      	mov	sp, r7
 80163cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d0:	4770      	bx	lr
	...

080163d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b086      	sub	sp, #24
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80163dc:	4a14      	ldr	r2, [pc, #80]	; (8016430 <_sbrk+0x5c>)
 80163de:	4b15      	ldr	r3, [pc, #84]	; (8016434 <_sbrk+0x60>)
 80163e0:	1ad3      	subs	r3, r2, r3
 80163e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80163e4:	697b      	ldr	r3, [r7, #20]
 80163e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80163e8:	4b13      	ldr	r3, [pc, #76]	; (8016438 <_sbrk+0x64>)
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d102      	bne.n	80163f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80163f0:	4b11      	ldr	r3, [pc, #68]	; (8016438 <_sbrk+0x64>)
 80163f2:	4a12      	ldr	r2, [pc, #72]	; (801643c <_sbrk+0x68>)
 80163f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80163f6:	4b10      	ldr	r3, [pc, #64]	; (8016438 <_sbrk+0x64>)
 80163f8:	681a      	ldr	r2, [r3, #0]
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	4413      	add	r3, r2
 80163fe:	693a      	ldr	r2, [r7, #16]
 8016400:	429a      	cmp	r2, r3
 8016402:	d207      	bcs.n	8016414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8016404:	f007 fc60 	bl	801dcc8 <__errno>
 8016408:	4603      	mov	r3, r0
 801640a:	220c      	movs	r2, #12
 801640c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801640e:	f04f 33ff 	mov.w	r3, #4294967295
 8016412:	e009      	b.n	8016428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8016414:	4b08      	ldr	r3, [pc, #32]	; (8016438 <_sbrk+0x64>)
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801641a:	4b07      	ldr	r3, [pc, #28]	; (8016438 <_sbrk+0x64>)
 801641c:	681a      	ldr	r2, [r3, #0]
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	4413      	add	r3, r2
 8016422:	4a05      	ldr	r2, [pc, #20]	; (8016438 <_sbrk+0x64>)
 8016424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8016426:	68fb      	ldr	r3, [r7, #12]
}
 8016428:	4618      	mov	r0, r3
 801642a:	3718      	adds	r7, #24
 801642c:	46bd      	mov	sp, r7
 801642e:	bd80      	pop	{r7, pc}
 8016430:	20020000 	.word	0x20020000
 8016434:	00000400 	.word	0x00000400
 8016438:	200007f8 	.word	0x200007f8
 801643c:	20000810 	.word	0x20000810

08016440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8016440:	b480      	push	{r7}
 8016442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8016444:	4b06      	ldr	r3, [pc, #24]	; (8016460 <SystemInit+0x20>)
 8016446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801644a:	4a05      	ldr	r2, [pc, #20]	; (8016460 <SystemInit+0x20>)
 801644c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8016454:	bf00      	nop
 8016456:	46bd      	mov	sp, r7
 8016458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645c:	4770      	bx	lr
 801645e:	bf00      	nop
 8016460:	e000ed00 	.word	0xe000ed00

08016464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8016464:	f8df d034 	ldr.w	sp, [pc, #52]	; 801649c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8016468:	480d      	ldr	r0, [pc, #52]	; (80164a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801646a:	490e      	ldr	r1, [pc, #56]	; (80164a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 801646c:	4a0e      	ldr	r2, [pc, #56]	; (80164a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801646e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8016470:	e002      	b.n	8016478 <LoopCopyDataInit>

08016472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8016472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8016474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8016476:	3304      	adds	r3, #4

08016478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8016478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801647a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801647c:	d3f9      	bcc.n	8016472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801647e:	4a0b      	ldr	r2, [pc, #44]	; (80164ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8016480:	4c0b      	ldr	r4, [pc, #44]	; (80164b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8016482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8016484:	e001      	b.n	801648a <LoopFillZerobss>

08016486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8016486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8016488:	3204      	adds	r2, #4

0801648a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801648a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801648c:	d3fb      	bcc.n	8016486 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801648e:	f7ff ffd7 	bl	8016440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8016492:	f007 fc31 	bl	801dcf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8016496:	f7eb fa85 	bl	80019a4 <main>
  bx  lr    
 801649a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 801649c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80164a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80164a4:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 80164a8:	08029e20 	.word	0x08029e20
  ldr r2, =_sbss
 80164ac:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80164b0:	20000810 	.word	0x20000810

080164b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80164b4:	e7fe      	b.n	80164b4 <ADC_IRQHandler>
	...

080164b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80164bc:	4b0e      	ldr	r3, [pc, #56]	; (80164f8 <HAL_Init+0x40>)
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	4a0d      	ldr	r2, [pc, #52]	; (80164f8 <HAL_Init+0x40>)
 80164c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80164c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80164c8:	4b0b      	ldr	r3, [pc, #44]	; (80164f8 <HAL_Init+0x40>)
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	4a0a      	ldr	r2, [pc, #40]	; (80164f8 <HAL_Init+0x40>)
 80164ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80164d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80164d4:	4b08      	ldr	r3, [pc, #32]	; (80164f8 <HAL_Init+0x40>)
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	4a07      	ldr	r2, [pc, #28]	; (80164f8 <HAL_Init+0x40>)
 80164da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80164de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80164e0:	2003      	movs	r0, #3
 80164e2:	f000 f94f 	bl	8016784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80164e6:	2000      	movs	r0, #0
 80164e8:	f000 f808 	bl	80164fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80164ec:	f7ff fc14 	bl	8015d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80164f0:	2300      	movs	r3, #0
}
 80164f2:	4618      	mov	r0, r3
 80164f4:	bd80      	pop	{r7, pc}
 80164f6:	bf00      	nop
 80164f8:	40023c00 	.word	0x40023c00

080164fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b082      	sub	sp, #8
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8016504:	4b12      	ldr	r3, [pc, #72]	; (8016550 <HAL_InitTick+0x54>)
 8016506:	681a      	ldr	r2, [r3, #0]
 8016508:	4b12      	ldr	r3, [pc, #72]	; (8016554 <HAL_InitTick+0x58>)
 801650a:	781b      	ldrb	r3, [r3, #0]
 801650c:	4619      	mov	r1, r3
 801650e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016512:	fbb3 f3f1 	udiv	r3, r3, r1
 8016516:	fbb2 f3f3 	udiv	r3, r2, r3
 801651a:	4618      	mov	r0, r3
 801651c:	f000 f967 	bl	80167ee <HAL_SYSTICK_Config>
 8016520:	4603      	mov	r3, r0
 8016522:	2b00      	cmp	r3, #0
 8016524:	d001      	beq.n	801652a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8016526:	2301      	movs	r3, #1
 8016528:	e00e      	b.n	8016548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	2b0f      	cmp	r3, #15
 801652e:	d80a      	bhi.n	8016546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8016530:	2200      	movs	r2, #0
 8016532:	6879      	ldr	r1, [r7, #4]
 8016534:	f04f 30ff 	mov.w	r0, #4294967295
 8016538:	f000 f92f 	bl	801679a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801653c:	4a06      	ldr	r2, [pc, #24]	; (8016558 <HAL_InitTick+0x5c>)
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8016542:	2300      	movs	r3, #0
 8016544:	e000      	b.n	8016548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8016546:	2301      	movs	r3, #1
}
 8016548:	4618      	mov	r0, r3
 801654a:	3708      	adds	r7, #8
 801654c:	46bd      	mov	sp, r7
 801654e:	bd80      	pop	{r7, pc}
 8016550:	200001e4 	.word	0x200001e4
 8016554:	200001ec 	.word	0x200001ec
 8016558:	200001e8 	.word	0x200001e8

0801655c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801655c:	b480      	push	{r7}
 801655e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8016560:	4b06      	ldr	r3, [pc, #24]	; (801657c <HAL_IncTick+0x20>)
 8016562:	781b      	ldrb	r3, [r3, #0]
 8016564:	461a      	mov	r2, r3
 8016566:	4b06      	ldr	r3, [pc, #24]	; (8016580 <HAL_IncTick+0x24>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	4413      	add	r3, r2
 801656c:	4a04      	ldr	r2, [pc, #16]	; (8016580 <HAL_IncTick+0x24>)
 801656e:	6013      	str	r3, [r2, #0]
}
 8016570:	bf00      	nop
 8016572:	46bd      	mov	sp, r7
 8016574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016578:	4770      	bx	lr
 801657a:	bf00      	nop
 801657c:	200001ec 	.word	0x200001ec
 8016580:	200007fc 	.word	0x200007fc

08016584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8016584:	b480      	push	{r7}
 8016586:	af00      	add	r7, sp, #0
  return uwTick;
 8016588:	4b03      	ldr	r3, [pc, #12]	; (8016598 <HAL_GetTick+0x14>)
 801658a:	681b      	ldr	r3, [r3, #0]
}
 801658c:	4618      	mov	r0, r3
 801658e:	46bd      	mov	sp, r7
 8016590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016594:	4770      	bx	lr
 8016596:	bf00      	nop
 8016598:	200007fc 	.word	0x200007fc

0801659c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801659c:	b580      	push	{r7, lr}
 801659e:	b084      	sub	sp, #16
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80165a4:	f7ff ffee 	bl	8016584 <HAL_GetTick>
 80165a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165b4:	d005      	beq.n	80165c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80165b6:	4b0a      	ldr	r3, [pc, #40]	; (80165e0 <HAL_Delay+0x44>)
 80165b8:	781b      	ldrb	r3, [r3, #0]
 80165ba:	461a      	mov	r2, r3
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	4413      	add	r3, r2
 80165c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80165c2:	bf00      	nop
 80165c4:	f7ff ffde 	bl	8016584 <HAL_GetTick>
 80165c8:	4602      	mov	r2, r0
 80165ca:	68bb      	ldr	r3, [r7, #8]
 80165cc:	1ad3      	subs	r3, r2, r3
 80165ce:	68fa      	ldr	r2, [r7, #12]
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d8f7      	bhi.n	80165c4 <HAL_Delay+0x28>
  {
  }
}
 80165d4:	bf00      	nop
 80165d6:	bf00      	nop
 80165d8:	3710      	adds	r7, #16
 80165da:	46bd      	mov	sp, r7
 80165dc:	bd80      	pop	{r7, pc}
 80165de:	bf00      	nop
 80165e0:	200001ec 	.word	0x200001ec

080165e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80165e4:	b480      	push	{r7}
 80165e6:	b085      	sub	sp, #20
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	f003 0307 	and.w	r3, r3, #7
 80165f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80165f4:	4b0c      	ldr	r3, [pc, #48]	; (8016628 <__NVIC_SetPriorityGrouping+0x44>)
 80165f6:	68db      	ldr	r3, [r3, #12]
 80165f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80165fa:	68ba      	ldr	r2, [r7, #8]
 80165fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8016600:	4013      	ands	r3, r2
 8016602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016608:	68bb      	ldr	r3, [r7, #8]
 801660a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801660c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8016610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8016616:	4a04      	ldr	r2, [pc, #16]	; (8016628 <__NVIC_SetPriorityGrouping+0x44>)
 8016618:	68bb      	ldr	r3, [r7, #8]
 801661a:	60d3      	str	r3, [r2, #12]
}
 801661c:	bf00      	nop
 801661e:	3714      	adds	r7, #20
 8016620:	46bd      	mov	sp, r7
 8016622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016626:	4770      	bx	lr
 8016628:	e000ed00 	.word	0xe000ed00

0801662c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801662c:	b480      	push	{r7}
 801662e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016630:	4b04      	ldr	r3, [pc, #16]	; (8016644 <__NVIC_GetPriorityGrouping+0x18>)
 8016632:	68db      	ldr	r3, [r3, #12]
 8016634:	0a1b      	lsrs	r3, r3, #8
 8016636:	f003 0307 	and.w	r3, r3, #7
}
 801663a:	4618      	mov	r0, r3
 801663c:	46bd      	mov	sp, r7
 801663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016642:	4770      	bx	lr
 8016644:	e000ed00 	.word	0xe000ed00

08016648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016648:	b480      	push	{r7}
 801664a:	b083      	sub	sp, #12
 801664c:	af00      	add	r7, sp, #0
 801664e:	4603      	mov	r3, r0
 8016650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016656:	2b00      	cmp	r3, #0
 8016658:	db0b      	blt.n	8016672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801665a:	79fb      	ldrb	r3, [r7, #7]
 801665c:	f003 021f 	and.w	r2, r3, #31
 8016660:	4907      	ldr	r1, [pc, #28]	; (8016680 <__NVIC_EnableIRQ+0x38>)
 8016662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016666:	095b      	lsrs	r3, r3, #5
 8016668:	2001      	movs	r0, #1
 801666a:	fa00 f202 	lsl.w	r2, r0, r2
 801666e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8016672:	bf00      	nop
 8016674:	370c      	adds	r7, #12
 8016676:	46bd      	mov	sp, r7
 8016678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667c:	4770      	bx	lr
 801667e:	bf00      	nop
 8016680:	e000e100 	.word	0xe000e100

08016684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8016684:	b480      	push	{r7}
 8016686:	b083      	sub	sp, #12
 8016688:	af00      	add	r7, sp, #0
 801668a:	4603      	mov	r3, r0
 801668c:	6039      	str	r1, [r7, #0]
 801668e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016694:	2b00      	cmp	r3, #0
 8016696:	db0a      	blt.n	80166ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016698:	683b      	ldr	r3, [r7, #0]
 801669a:	b2da      	uxtb	r2, r3
 801669c:	490c      	ldr	r1, [pc, #48]	; (80166d0 <__NVIC_SetPriority+0x4c>)
 801669e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166a2:	0112      	lsls	r2, r2, #4
 80166a4:	b2d2      	uxtb	r2, r2
 80166a6:	440b      	add	r3, r1
 80166a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80166ac:	e00a      	b.n	80166c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80166ae:	683b      	ldr	r3, [r7, #0]
 80166b0:	b2da      	uxtb	r2, r3
 80166b2:	4908      	ldr	r1, [pc, #32]	; (80166d4 <__NVIC_SetPriority+0x50>)
 80166b4:	79fb      	ldrb	r3, [r7, #7]
 80166b6:	f003 030f 	and.w	r3, r3, #15
 80166ba:	3b04      	subs	r3, #4
 80166bc:	0112      	lsls	r2, r2, #4
 80166be:	b2d2      	uxtb	r2, r2
 80166c0:	440b      	add	r3, r1
 80166c2:	761a      	strb	r2, [r3, #24]
}
 80166c4:	bf00      	nop
 80166c6:	370c      	adds	r7, #12
 80166c8:	46bd      	mov	sp, r7
 80166ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ce:	4770      	bx	lr
 80166d0:	e000e100 	.word	0xe000e100
 80166d4:	e000ed00 	.word	0xe000ed00

080166d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80166d8:	b480      	push	{r7}
 80166da:	b089      	sub	sp, #36	; 0x24
 80166dc:	af00      	add	r7, sp, #0
 80166de:	60f8      	str	r0, [r7, #12]
 80166e0:	60b9      	str	r1, [r7, #8]
 80166e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	f003 0307 	and.w	r3, r3, #7
 80166ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80166ec:	69fb      	ldr	r3, [r7, #28]
 80166ee:	f1c3 0307 	rsb	r3, r3, #7
 80166f2:	2b04      	cmp	r3, #4
 80166f4:	bf28      	it	cs
 80166f6:	2304      	movcs	r3, #4
 80166f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80166fa:	69fb      	ldr	r3, [r7, #28]
 80166fc:	3304      	adds	r3, #4
 80166fe:	2b06      	cmp	r3, #6
 8016700:	d902      	bls.n	8016708 <NVIC_EncodePriority+0x30>
 8016702:	69fb      	ldr	r3, [r7, #28]
 8016704:	3b03      	subs	r3, #3
 8016706:	e000      	b.n	801670a <NVIC_EncodePriority+0x32>
 8016708:	2300      	movs	r3, #0
 801670a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801670c:	f04f 32ff 	mov.w	r2, #4294967295
 8016710:	69bb      	ldr	r3, [r7, #24]
 8016712:	fa02 f303 	lsl.w	r3, r2, r3
 8016716:	43da      	mvns	r2, r3
 8016718:	68bb      	ldr	r3, [r7, #8]
 801671a:	401a      	ands	r2, r3
 801671c:	697b      	ldr	r3, [r7, #20]
 801671e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016720:	f04f 31ff 	mov.w	r1, #4294967295
 8016724:	697b      	ldr	r3, [r7, #20]
 8016726:	fa01 f303 	lsl.w	r3, r1, r3
 801672a:	43d9      	mvns	r1, r3
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016730:	4313      	orrs	r3, r2
         );
}
 8016732:	4618      	mov	r0, r3
 8016734:	3724      	adds	r7, #36	; 0x24
 8016736:	46bd      	mov	sp, r7
 8016738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673c:	4770      	bx	lr
	...

08016740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b082      	sub	sp, #8
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	3b01      	subs	r3, #1
 801674c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016750:	d301      	bcc.n	8016756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8016752:	2301      	movs	r3, #1
 8016754:	e00f      	b.n	8016776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8016756:	4a0a      	ldr	r2, [pc, #40]	; (8016780 <SysTick_Config+0x40>)
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	3b01      	subs	r3, #1
 801675c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801675e:	210f      	movs	r1, #15
 8016760:	f04f 30ff 	mov.w	r0, #4294967295
 8016764:	f7ff ff8e 	bl	8016684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016768:	4b05      	ldr	r3, [pc, #20]	; (8016780 <SysTick_Config+0x40>)
 801676a:	2200      	movs	r2, #0
 801676c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801676e:	4b04      	ldr	r3, [pc, #16]	; (8016780 <SysTick_Config+0x40>)
 8016770:	2207      	movs	r2, #7
 8016772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016774:	2300      	movs	r3, #0
}
 8016776:	4618      	mov	r0, r3
 8016778:	3708      	adds	r7, #8
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}
 801677e:	bf00      	nop
 8016780:	e000e010 	.word	0xe000e010

08016784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b082      	sub	sp, #8
 8016788:	af00      	add	r7, sp, #0
 801678a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801678c:	6878      	ldr	r0, [r7, #4]
 801678e:	f7ff ff29 	bl	80165e4 <__NVIC_SetPriorityGrouping>
}
 8016792:	bf00      	nop
 8016794:	3708      	adds	r7, #8
 8016796:	46bd      	mov	sp, r7
 8016798:	bd80      	pop	{r7, pc}

0801679a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801679a:	b580      	push	{r7, lr}
 801679c:	b086      	sub	sp, #24
 801679e:	af00      	add	r7, sp, #0
 80167a0:	4603      	mov	r3, r0
 80167a2:	60b9      	str	r1, [r7, #8]
 80167a4:	607a      	str	r2, [r7, #4]
 80167a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80167a8:	2300      	movs	r3, #0
 80167aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80167ac:	f7ff ff3e 	bl	801662c <__NVIC_GetPriorityGrouping>
 80167b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80167b2:	687a      	ldr	r2, [r7, #4]
 80167b4:	68b9      	ldr	r1, [r7, #8]
 80167b6:	6978      	ldr	r0, [r7, #20]
 80167b8:	f7ff ff8e 	bl	80166d8 <NVIC_EncodePriority>
 80167bc:	4602      	mov	r2, r0
 80167be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167c2:	4611      	mov	r1, r2
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7ff ff5d 	bl	8016684 <__NVIC_SetPriority>
}
 80167ca:	bf00      	nop
 80167cc:	3718      	adds	r7, #24
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}

080167d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80167d2:	b580      	push	{r7, lr}
 80167d4:	b082      	sub	sp, #8
 80167d6:	af00      	add	r7, sp, #0
 80167d8:	4603      	mov	r3, r0
 80167da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80167dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80167e0:	4618      	mov	r0, r3
 80167e2:	f7ff ff31 	bl	8016648 <__NVIC_EnableIRQ>
}
 80167e6:	bf00      	nop
 80167e8:	3708      	adds	r7, #8
 80167ea:	46bd      	mov	sp, r7
 80167ec:	bd80      	pop	{r7, pc}

080167ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80167ee:	b580      	push	{r7, lr}
 80167f0:	b082      	sub	sp, #8
 80167f2:	af00      	add	r7, sp, #0
 80167f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	f7ff ffa2 	bl	8016740 <SysTick_Config>
 80167fc:	4603      	mov	r3, r0
}
 80167fe:	4618      	mov	r0, r3
 8016800:	3708      	adds	r7, #8
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}
	...

08016808 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b086      	sub	sp, #24
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8016810:	2300      	movs	r3, #0
 8016812:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8016814:	f7ff feb6 	bl	8016584 <HAL_GetTick>
 8016818:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d101      	bne.n	8016824 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8016820:	2301      	movs	r3, #1
 8016822:	e099      	b.n	8016958 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	2202      	movs	r2, #2
 8016828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	2200      	movs	r2, #0
 8016830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	681a      	ldr	r2, [r3, #0]
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	f022 0201 	bic.w	r2, r2, #1
 8016842:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016844:	e00f      	b.n	8016866 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016846:	f7ff fe9d 	bl	8016584 <HAL_GetTick>
 801684a:	4602      	mov	r2, r0
 801684c:	693b      	ldr	r3, [r7, #16]
 801684e:	1ad3      	subs	r3, r2, r3
 8016850:	2b05      	cmp	r3, #5
 8016852:	d908      	bls.n	8016866 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	2220      	movs	r2, #32
 8016858:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	2203      	movs	r2, #3
 801685e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8016862:	2303      	movs	r3, #3
 8016864:	e078      	b.n	8016958 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	f003 0301 	and.w	r3, r3, #1
 8016870:	2b00      	cmp	r3, #0
 8016872:	d1e8      	bne.n	8016846 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801687c:	697a      	ldr	r2, [r7, #20]
 801687e:	4b38      	ldr	r3, [pc, #224]	; (8016960 <HAL_DMA_Init+0x158>)
 8016880:	4013      	ands	r3, r2
 8016882:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	685a      	ldr	r2, [r3, #4]
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	689b      	ldr	r3, [r3, #8]
 801688c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016892:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	691b      	ldr	r3, [r3, #16]
 8016898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801689e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	699b      	ldr	r3, [r3, #24]
 80168a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80168aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	6a1b      	ldr	r3, [r3, #32]
 80168b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80168b2:	697a      	ldr	r2, [r7, #20]
 80168b4:	4313      	orrs	r3, r2
 80168b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168bc:	2b04      	cmp	r3, #4
 80168be:	d107      	bne.n	80168d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168c8:	4313      	orrs	r3, r2
 80168ca:	697a      	ldr	r2, [r7, #20]
 80168cc:	4313      	orrs	r3, r2
 80168ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	697a      	ldr	r2, [r7, #20]
 80168d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	695b      	ldr	r3, [r3, #20]
 80168de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80168e0:	697b      	ldr	r3, [r7, #20]
 80168e2:	f023 0307 	bic.w	r3, r3, #7
 80168e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168ec:	697a      	ldr	r2, [r7, #20]
 80168ee:	4313      	orrs	r3, r2
 80168f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168f6:	2b04      	cmp	r3, #4
 80168f8:	d117      	bne.n	801692a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168fe:	697a      	ldr	r2, [r7, #20]
 8016900:	4313      	orrs	r3, r2
 8016902:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016908:	2b00      	cmp	r3, #0
 801690a:	d00e      	beq.n	801692a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f000 fb0f 	bl	8016f30 <DMA_CheckFifoParam>
 8016912:	4603      	mov	r3, r0
 8016914:	2b00      	cmp	r3, #0
 8016916:	d008      	beq.n	801692a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2240      	movs	r2, #64	; 0x40
 801691c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2201      	movs	r2, #1
 8016922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8016926:	2301      	movs	r3, #1
 8016928:	e016      	b.n	8016958 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	697a      	ldr	r2, [r7, #20]
 8016930:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8016932:	6878      	ldr	r0, [r7, #4]
 8016934:	f000 fac6 	bl	8016ec4 <DMA_CalcBaseAndBitshift>
 8016938:	4603      	mov	r3, r0
 801693a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016940:	223f      	movs	r2, #63	; 0x3f
 8016942:	409a      	lsls	r2, r3
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2200      	movs	r2, #0
 801694c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	2201      	movs	r2, #1
 8016952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8016956:	2300      	movs	r3, #0
}
 8016958:	4618      	mov	r0, r3
 801695a:	3718      	adds	r7, #24
 801695c:	46bd      	mov	sp, r7
 801695e:	bd80      	pop	{r7, pc}
 8016960:	f010803f 	.word	0xf010803f

08016964 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016964:	b580      	push	{r7, lr}
 8016966:	b086      	sub	sp, #24
 8016968:	af00      	add	r7, sp, #0
 801696a:	60f8      	str	r0, [r7, #12]
 801696c:	60b9      	str	r1, [r7, #8]
 801696e:	607a      	str	r2, [r7, #4]
 8016970:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016972:	2300      	movs	r3, #0
 8016974:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801697a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016982:	2b01      	cmp	r3, #1
 8016984:	d101      	bne.n	801698a <HAL_DMA_Start_IT+0x26>
 8016986:	2302      	movs	r3, #2
 8016988:	e040      	b.n	8016a0c <HAL_DMA_Start_IT+0xa8>
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	2201      	movs	r2, #1
 801698e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016998:	b2db      	uxtb	r3, r3
 801699a:	2b01      	cmp	r3, #1
 801699c:	d12f      	bne.n	80169fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	2202      	movs	r2, #2
 80169a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	2200      	movs	r2, #0
 80169aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80169ac:	683b      	ldr	r3, [r7, #0]
 80169ae:	687a      	ldr	r2, [r7, #4]
 80169b0:	68b9      	ldr	r1, [r7, #8]
 80169b2:	68f8      	ldr	r0, [r7, #12]
 80169b4:	f000 fa58 	bl	8016e68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80169bc:	223f      	movs	r2, #63	; 0x3f
 80169be:	409a      	lsls	r2, r3
 80169c0:	693b      	ldr	r3, [r7, #16]
 80169c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	681a      	ldr	r2, [r3, #0]
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	f042 0216 	orr.w	r2, r2, #22
 80169d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d007      	beq.n	80169ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	681a      	ldr	r2, [r3, #0]
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	f042 0208 	orr.w	r2, r2, #8
 80169ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	681a      	ldr	r2, [r3, #0]
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	f042 0201 	orr.w	r2, r2, #1
 80169fa:	601a      	str	r2, [r3, #0]
 80169fc:	e005      	b.n	8016a0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	2200      	movs	r2, #0
 8016a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8016a06:	2302      	movs	r3, #2
 8016a08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8016a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	3718      	adds	r7, #24
 8016a10:	46bd      	mov	sp, r7
 8016a12:	bd80      	pop	{r7, pc}

08016a14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b084      	sub	sp, #16
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016a20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8016a22:	f7ff fdaf 	bl	8016584 <HAL_GetTick>
 8016a26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016a2e:	b2db      	uxtb	r3, r3
 8016a30:	2b02      	cmp	r3, #2
 8016a32:	d008      	beq.n	8016a46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	2280      	movs	r2, #128	; 0x80
 8016a38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	2200      	movs	r2, #0
 8016a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8016a42:	2301      	movs	r3, #1
 8016a44:	e052      	b.n	8016aec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	681a      	ldr	r2, [r3, #0]
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	f022 0216 	bic.w	r2, r2, #22
 8016a54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	695a      	ldr	r2, [r3, #20]
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016a64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d103      	bne.n	8016a76 <HAL_DMA_Abort+0x62>
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d007      	beq.n	8016a86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	681a      	ldr	r2, [r3, #0]
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	f022 0208 	bic.w	r2, r2, #8
 8016a84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	681a      	ldr	r2, [r3, #0]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	f022 0201 	bic.w	r2, r2, #1
 8016a94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016a96:	e013      	b.n	8016ac0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016a98:	f7ff fd74 	bl	8016584 <HAL_GetTick>
 8016a9c:	4602      	mov	r2, r0
 8016a9e:	68bb      	ldr	r3, [r7, #8]
 8016aa0:	1ad3      	subs	r3, r2, r3
 8016aa2:	2b05      	cmp	r3, #5
 8016aa4:	d90c      	bls.n	8016ac0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	2220      	movs	r2, #32
 8016aaa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	2203      	movs	r2, #3
 8016ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8016abc:	2303      	movs	r3, #3
 8016abe:	e015      	b.n	8016aec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	f003 0301 	and.w	r3, r3, #1
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d1e4      	bne.n	8016a98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ad2:	223f      	movs	r2, #63	; 0x3f
 8016ad4:	409a      	lsls	r2, r3
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	2201      	movs	r2, #1
 8016ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	2200      	movs	r2, #0
 8016ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8016aea:	2300      	movs	r3, #0
}
 8016aec:	4618      	mov	r0, r3
 8016aee:	3710      	adds	r7, #16
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd80      	pop	{r7, pc}

08016af4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016af4:	b480      	push	{r7}
 8016af6:	b083      	sub	sp, #12
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016b02:	b2db      	uxtb	r3, r3
 8016b04:	2b02      	cmp	r3, #2
 8016b06:	d004      	beq.n	8016b12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	2280      	movs	r2, #128	; 0x80
 8016b0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8016b0e:	2301      	movs	r3, #1
 8016b10:	e00c      	b.n	8016b2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	2205      	movs	r2, #5
 8016b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	681a      	ldr	r2, [r3, #0]
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	f022 0201 	bic.w	r2, r2, #1
 8016b28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8016b2a:	2300      	movs	r3, #0
}
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	370c      	adds	r7, #12
 8016b30:	46bd      	mov	sp, r7
 8016b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b36:	4770      	bx	lr

08016b38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b086      	sub	sp, #24
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8016b40:	2300      	movs	r3, #0
 8016b42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8016b44:	4b8e      	ldr	r3, [pc, #568]	; (8016d80 <HAL_DMA_IRQHandler+0x248>)
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	4a8e      	ldr	r2, [pc, #568]	; (8016d84 <HAL_DMA_IRQHandler+0x24c>)
 8016b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8016b4e:	0a9b      	lsrs	r3, r3, #10
 8016b50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016b56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8016b58:	693b      	ldr	r3, [r7, #16]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b62:	2208      	movs	r2, #8
 8016b64:	409a      	lsls	r2, r3
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	4013      	ands	r3, r2
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d01a      	beq.n	8016ba4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	f003 0304 	and.w	r3, r3, #4
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d013      	beq.n	8016ba4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	681a      	ldr	r2, [r3, #0]
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	f022 0204 	bic.w	r2, r2, #4
 8016b8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b90:	2208      	movs	r2, #8
 8016b92:	409a      	lsls	r2, r3
 8016b94:	693b      	ldr	r3, [r7, #16]
 8016b96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016b9c:	f043 0201 	orr.w	r2, r3, #1
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ba8:	2201      	movs	r2, #1
 8016baa:	409a      	lsls	r2, r3
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	4013      	ands	r3, r2
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d012      	beq.n	8016bda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	695b      	ldr	r3, [r3, #20]
 8016bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d00b      	beq.n	8016bda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016bc6:	2201      	movs	r2, #1
 8016bc8:	409a      	lsls	r2, r3
 8016bca:	693b      	ldr	r3, [r7, #16]
 8016bcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016bd2:	f043 0202 	orr.w	r2, r3, #2
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016bde:	2204      	movs	r2, #4
 8016be0:	409a      	lsls	r2, r3
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	4013      	ands	r3, r2
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d012      	beq.n	8016c10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	f003 0302 	and.w	r3, r3, #2
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d00b      	beq.n	8016c10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016bfc:	2204      	movs	r2, #4
 8016bfe:	409a      	lsls	r2, r3
 8016c00:	693b      	ldr	r3, [r7, #16]
 8016c02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016c08:	f043 0204 	orr.w	r2, r3, #4
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016c14:	2210      	movs	r2, #16
 8016c16:	409a      	lsls	r2, r3
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	4013      	ands	r3, r2
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d043      	beq.n	8016ca8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	f003 0308 	and.w	r3, r3, #8
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d03c      	beq.n	8016ca8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016c32:	2210      	movs	r2, #16
 8016c34:	409a      	lsls	r2, r3
 8016c36:	693b      	ldr	r3, [r7, #16]
 8016c38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d018      	beq.n	8016c7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d108      	bne.n	8016c68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d024      	beq.n	8016ca8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c62:	6878      	ldr	r0, [r7, #4]
 8016c64:	4798      	blx	r3
 8016c66:	e01f      	b.n	8016ca8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d01b      	beq.n	8016ca8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	4798      	blx	r3
 8016c78:	e016      	b.n	8016ca8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d107      	bne.n	8016c98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	681a      	ldr	r2, [r3, #0]
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	f022 0208 	bic.w	r2, r2, #8
 8016c96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d003      	beq.n	8016ca8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ca4:	6878      	ldr	r0, [r7, #4]
 8016ca6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016cac:	2220      	movs	r2, #32
 8016cae:	409a      	lsls	r2, r3
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	4013      	ands	r3, r2
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	f000 808f 	beq.w	8016dd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	f003 0310 	and.w	r3, r3, #16
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	f000 8087 	beq.w	8016dd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016cce:	2220      	movs	r2, #32
 8016cd0:	409a      	lsls	r2, r3
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016cdc:	b2db      	uxtb	r3, r3
 8016cde:	2b05      	cmp	r3, #5
 8016ce0:	d136      	bne.n	8016d50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	681a      	ldr	r2, [r3, #0]
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	f022 0216 	bic.w	r2, r2, #22
 8016cf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	695a      	ldr	r2, [r3, #20]
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016d00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d103      	bne.n	8016d12 <HAL_DMA_IRQHandler+0x1da>
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d007      	beq.n	8016d22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	681a      	ldr	r2, [r3, #0]
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	f022 0208 	bic.w	r2, r2, #8
 8016d20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d26:	223f      	movs	r2, #63	; 0x3f
 8016d28:	409a      	lsls	r2, r3
 8016d2a:	693b      	ldr	r3, [r7, #16]
 8016d2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	2201      	movs	r2, #1
 8016d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	2200      	movs	r2, #0
 8016d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d07e      	beq.n	8016e44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d4a:	6878      	ldr	r0, [r7, #4]
 8016d4c:	4798      	blx	r3
        }
        return;
 8016d4e:	e079      	b.n	8016e44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d01d      	beq.n	8016d9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d10d      	bne.n	8016d88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d031      	beq.n	8016dd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d78:	6878      	ldr	r0, [r7, #4]
 8016d7a:	4798      	blx	r3
 8016d7c:	e02c      	b.n	8016dd8 <HAL_DMA_IRQHandler+0x2a0>
 8016d7e:	bf00      	nop
 8016d80:	200001e4 	.word	0x200001e4
 8016d84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d023      	beq.n	8016dd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d94:	6878      	ldr	r0, [r7, #4]
 8016d96:	4798      	blx	r3
 8016d98:	e01e      	b.n	8016dd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d10f      	bne.n	8016dc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	681a      	ldr	r2, [r3, #0]
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	f022 0210 	bic.w	r2, r2, #16
 8016db6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	2201      	movs	r2, #1
 8016dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d003      	beq.n	8016dd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016dd4:	6878      	ldr	r0, [r7, #4]
 8016dd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d032      	beq.n	8016e46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016de4:	f003 0301 	and.w	r3, r3, #1
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d022      	beq.n	8016e32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	2205      	movs	r2, #5
 8016df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	681a      	ldr	r2, [r3, #0]
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	f022 0201 	bic.w	r2, r2, #1
 8016e02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8016e04:	68bb      	ldr	r3, [r7, #8]
 8016e06:	3301      	adds	r3, #1
 8016e08:	60bb      	str	r3, [r7, #8]
 8016e0a:	697a      	ldr	r2, [r7, #20]
 8016e0c:	429a      	cmp	r2, r3
 8016e0e:	d307      	bcc.n	8016e20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	f003 0301 	and.w	r3, r3, #1
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d1f2      	bne.n	8016e04 <HAL_DMA_IRQHandler+0x2cc>
 8016e1e:	e000      	b.n	8016e22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8016e20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	2201      	movs	r2, #1
 8016e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	2200      	movs	r2, #0
 8016e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d005      	beq.n	8016e46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016e3e:	6878      	ldr	r0, [r7, #4]
 8016e40:	4798      	blx	r3
 8016e42:	e000      	b.n	8016e46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8016e44:	bf00      	nop
    }
  }
}
 8016e46:	3718      	adds	r7, #24
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	bd80      	pop	{r7, pc}

08016e4c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8016e4c:	b480      	push	{r7}
 8016e4e:	b083      	sub	sp, #12
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016e5a:	b2db      	uxtb	r3, r3
}
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	370c      	adds	r7, #12
 8016e60:	46bd      	mov	sp, r7
 8016e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e66:	4770      	bx	lr

08016e68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016e68:	b480      	push	{r7}
 8016e6a:	b085      	sub	sp, #20
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	60f8      	str	r0, [r7, #12]
 8016e70:	60b9      	str	r1, [r7, #8]
 8016e72:	607a      	str	r2, [r7, #4]
 8016e74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	681a      	ldr	r2, [r3, #0]
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8016e84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	683a      	ldr	r2, [r7, #0]
 8016e8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	689b      	ldr	r3, [r3, #8]
 8016e92:	2b40      	cmp	r3, #64	; 0x40
 8016e94:	d108      	bne.n	8016ea8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	687a      	ldr	r2, [r7, #4]
 8016e9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	68ba      	ldr	r2, [r7, #8]
 8016ea4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8016ea6:	e007      	b.n	8016eb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	68ba      	ldr	r2, [r7, #8]
 8016eae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	687a      	ldr	r2, [r7, #4]
 8016eb6:	60da      	str	r2, [r3, #12]
}
 8016eb8:	bf00      	nop
 8016eba:	3714      	adds	r7, #20
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec2:	4770      	bx	lr

08016ec4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8016ec4:	b480      	push	{r7}
 8016ec6:	b085      	sub	sp, #20
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	b2db      	uxtb	r3, r3
 8016ed2:	3b10      	subs	r3, #16
 8016ed4:	4a14      	ldr	r2, [pc, #80]	; (8016f28 <DMA_CalcBaseAndBitshift+0x64>)
 8016ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8016eda:	091b      	lsrs	r3, r3, #4
 8016edc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8016ede:	4a13      	ldr	r2, [pc, #76]	; (8016f2c <DMA_CalcBaseAndBitshift+0x68>)
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	4413      	add	r3, r2
 8016ee4:	781b      	ldrb	r3, [r3, #0]
 8016ee6:	461a      	mov	r2, r3
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	2b03      	cmp	r3, #3
 8016ef0:	d909      	bls.n	8016f06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8016efa:	f023 0303 	bic.w	r3, r3, #3
 8016efe:	1d1a      	adds	r2, r3, #4
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	659a      	str	r2, [r3, #88]	; 0x58
 8016f04:	e007      	b.n	8016f16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8016f0e:	f023 0303 	bic.w	r3, r3, #3
 8016f12:	687a      	ldr	r2, [r7, #4]
 8016f14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	3714      	adds	r7, #20
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f24:	4770      	bx	lr
 8016f26:	bf00      	nop
 8016f28:	aaaaaaab 	.word	0xaaaaaaab
 8016f2c:	08029cfc 	.word	0x08029cfc

08016f30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8016f30:	b480      	push	{r7}
 8016f32:	b085      	sub	sp, #20
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016f38:	2300      	movs	r3, #0
 8016f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	699b      	ldr	r3, [r3, #24]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d11f      	bne.n	8016f8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8016f4a:	68bb      	ldr	r3, [r7, #8]
 8016f4c:	2b03      	cmp	r3, #3
 8016f4e:	d856      	bhi.n	8016ffe <DMA_CheckFifoParam+0xce>
 8016f50:	a201      	add	r2, pc, #4	; (adr r2, 8016f58 <DMA_CheckFifoParam+0x28>)
 8016f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f56:	bf00      	nop
 8016f58:	08016f69 	.word	0x08016f69
 8016f5c:	08016f7b 	.word	0x08016f7b
 8016f60:	08016f69 	.word	0x08016f69
 8016f64:	08016fff 	.word	0x08016fff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d046      	beq.n	8017002 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8016f74:	2301      	movs	r3, #1
 8016f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016f78:	e043      	b.n	8017002 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8016f82:	d140      	bne.n	8017006 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8016f84:	2301      	movs	r3, #1
 8016f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016f88:	e03d      	b.n	8017006 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	699b      	ldr	r3, [r3, #24]
 8016f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016f92:	d121      	bne.n	8016fd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8016f94:	68bb      	ldr	r3, [r7, #8]
 8016f96:	2b03      	cmp	r3, #3
 8016f98:	d837      	bhi.n	801700a <DMA_CheckFifoParam+0xda>
 8016f9a:	a201      	add	r2, pc, #4	; (adr r2, 8016fa0 <DMA_CheckFifoParam+0x70>)
 8016f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fa0:	08016fb1 	.word	0x08016fb1
 8016fa4:	08016fb7 	.word	0x08016fb7
 8016fa8:	08016fb1 	.word	0x08016fb1
 8016fac:	08016fc9 	.word	0x08016fc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8016fb0:	2301      	movs	r3, #1
 8016fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8016fb4:	e030      	b.n	8017018 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d025      	beq.n	801700e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8016fc2:	2301      	movs	r3, #1
 8016fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016fc6:	e022      	b.n	801700e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8016fd0:	d11f      	bne.n	8017012 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8016fd2:	2301      	movs	r3, #1
 8016fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8016fd6:	e01c      	b.n	8017012 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8016fd8:	68bb      	ldr	r3, [r7, #8]
 8016fda:	2b02      	cmp	r3, #2
 8016fdc:	d903      	bls.n	8016fe6 <DMA_CheckFifoParam+0xb6>
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	2b03      	cmp	r3, #3
 8016fe2:	d003      	beq.n	8016fec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8016fe4:	e018      	b.n	8017018 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8016fe6:	2301      	movs	r3, #1
 8016fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8016fea:	e015      	b.n	8017018 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d00e      	beq.n	8017016 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8016ff8:	2301      	movs	r3, #1
 8016ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8016ffc:	e00b      	b.n	8017016 <DMA_CheckFifoParam+0xe6>
      break;
 8016ffe:	bf00      	nop
 8017000:	e00a      	b.n	8017018 <DMA_CheckFifoParam+0xe8>
      break;
 8017002:	bf00      	nop
 8017004:	e008      	b.n	8017018 <DMA_CheckFifoParam+0xe8>
      break;
 8017006:	bf00      	nop
 8017008:	e006      	b.n	8017018 <DMA_CheckFifoParam+0xe8>
      break;
 801700a:	bf00      	nop
 801700c:	e004      	b.n	8017018 <DMA_CheckFifoParam+0xe8>
      break;
 801700e:	bf00      	nop
 8017010:	e002      	b.n	8017018 <DMA_CheckFifoParam+0xe8>
      break;   
 8017012:	bf00      	nop
 8017014:	e000      	b.n	8017018 <DMA_CheckFifoParam+0xe8>
      break;
 8017016:	bf00      	nop
    }
  } 
  
  return status; 
 8017018:	7bfb      	ldrb	r3, [r7, #15]
}
 801701a:	4618      	mov	r0, r3
 801701c:	3714      	adds	r7, #20
 801701e:	46bd      	mov	sp, r7
 8017020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017024:	4770      	bx	lr
 8017026:	bf00      	nop

08017028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8017028:	b480      	push	{r7}
 801702a:	b089      	sub	sp, #36	; 0x24
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
 8017030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8017032:	2300      	movs	r3, #0
 8017034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8017036:	2300      	movs	r3, #0
 8017038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801703a:	2300      	movs	r3, #0
 801703c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801703e:	2300      	movs	r3, #0
 8017040:	61fb      	str	r3, [r7, #28]
 8017042:	e159      	b.n	80172f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8017044:	2201      	movs	r2, #1
 8017046:	69fb      	ldr	r3, [r7, #28]
 8017048:	fa02 f303 	lsl.w	r3, r2, r3
 801704c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	697a      	ldr	r2, [r7, #20]
 8017054:	4013      	ands	r3, r2
 8017056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8017058:	693a      	ldr	r2, [r7, #16]
 801705a:	697b      	ldr	r3, [r7, #20]
 801705c:	429a      	cmp	r2, r3
 801705e:	f040 8148 	bne.w	80172f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	685b      	ldr	r3, [r3, #4]
 8017066:	f003 0303 	and.w	r3, r3, #3
 801706a:	2b01      	cmp	r3, #1
 801706c:	d005      	beq.n	801707a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801706e:	683b      	ldr	r3, [r7, #0]
 8017070:	685b      	ldr	r3, [r3, #4]
 8017072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8017076:	2b02      	cmp	r3, #2
 8017078:	d130      	bne.n	80170dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	689b      	ldr	r3, [r3, #8]
 801707e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8017080:	69fb      	ldr	r3, [r7, #28]
 8017082:	005b      	lsls	r3, r3, #1
 8017084:	2203      	movs	r2, #3
 8017086:	fa02 f303 	lsl.w	r3, r2, r3
 801708a:	43db      	mvns	r3, r3
 801708c:	69ba      	ldr	r2, [r7, #24]
 801708e:	4013      	ands	r3, r2
 8017090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8017092:	683b      	ldr	r3, [r7, #0]
 8017094:	68da      	ldr	r2, [r3, #12]
 8017096:	69fb      	ldr	r3, [r7, #28]
 8017098:	005b      	lsls	r3, r3, #1
 801709a:	fa02 f303 	lsl.w	r3, r2, r3
 801709e:	69ba      	ldr	r2, [r7, #24]
 80170a0:	4313      	orrs	r3, r2
 80170a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	69ba      	ldr	r2, [r7, #24]
 80170a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	685b      	ldr	r3, [r3, #4]
 80170ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80170b0:	2201      	movs	r2, #1
 80170b2:	69fb      	ldr	r3, [r7, #28]
 80170b4:	fa02 f303 	lsl.w	r3, r2, r3
 80170b8:	43db      	mvns	r3, r3
 80170ba:	69ba      	ldr	r2, [r7, #24]
 80170bc:	4013      	ands	r3, r2
 80170be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80170c0:	683b      	ldr	r3, [r7, #0]
 80170c2:	685b      	ldr	r3, [r3, #4]
 80170c4:	091b      	lsrs	r3, r3, #4
 80170c6:	f003 0201 	and.w	r2, r3, #1
 80170ca:	69fb      	ldr	r3, [r7, #28]
 80170cc:	fa02 f303 	lsl.w	r3, r2, r3
 80170d0:	69ba      	ldr	r2, [r7, #24]
 80170d2:	4313      	orrs	r3, r2
 80170d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	69ba      	ldr	r2, [r7, #24]
 80170da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80170dc:	683b      	ldr	r3, [r7, #0]
 80170de:	685b      	ldr	r3, [r3, #4]
 80170e0:	f003 0303 	and.w	r3, r3, #3
 80170e4:	2b03      	cmp	r3, #3
 80170e6:	d017      	beq.n	8017118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	68db      	ldr	r3, [r3, #12]
 80170ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80170ee:	69fb      	ldr	r3, [r7, #28]
 80170f0:	005b      	lsls	r3, r3, #1
 80170f2:	2203      	movs	r2, #3
 80170f4:	fa02 f303 	lsl.w	r3, r2, r3
 80170f8:	43db      	mvns	r3, r3
 80170fa:	69ba      	ldr	r2, [r7, #24]
 80170fc:	4013      	ands	r3, r2
 80170fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8017100:	683b      	ldr	r3, [r7, #0]
 8017102:	689a      	ldr	r2, [r3, #8]
 8017104:	69fb      	ldr	r3, [r7, #28]
 8017106:	005b      	lsls	r3, r3, #1
 8017108:	fa02 f303 	lsl.w	r3, r2, r3
 801710c:	69ba      	ldr	r2, [r7, #24]
 801710e:	4313      	orrs	r3, r2
 8017110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	69ba      	ldr	r2, [r7, #24]
 8017116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8017118:	683b      	ldr	r3, [r7, #0]
 801711a:	685b      	ldr	r3, [r3, #4]
 801711c:	f003 0303 	and.w	r3, r3, #3
 8017120:	2b02      	cmp	r3, #2
 8017122:	d123      	bne.n	801716c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8017124:	69fb      	ldr	r3, [r7, #28]
 8017126:	08da      	lsrs	r2, r3, #3
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	3208      	adds	r2, #8
 801712c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8017132:	69fb      	ldr	r3, [r7, #28]
 8017134:	f003 0307 	and.w	r3, r3, #7
 8017138:	009b      	lsls	r3, r3, #2
 801713a:	220f      	movs	r2, #15
 801713c:	fa02 f303 	lsl.w	r3, r2, r3
 8017140:	43db      	mvns	r3, r3
 8017142:	69ba      	ldr	r2, [r7, #24]
 8017144:	4013      	ands	r3, r2
 8017146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	691a      	ldr	r2, [r3, #16]
 801714c:	69fb      	ldr	r3, [r7, #28]
 801714e:	f003 0307 	and.w	r3, r3, #7
 8017152:	009b      	lsls	r3, r3, #2
 8017154:	fa02 f303 	lsl.w	r3, r2, r3
 8017158:	69ba      	ldr	r2, [r7, #24]
 801715a:	4313      	orrs	r3, r2
 801715c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801715e:	69fb      	ldr	r3, [r7, #28]
 8017160:	08da      	lsrs	r2, r3, #3
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	3208      	adds	r2, #8
 8017166:	69b9      	ldr	r1, [r7, #24]
 8017168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8017172:	69fb      	ldr	r3, [r7, #28]
 8017174:	005b      	lsls	r3, r3, #1
 8017176:	2203      	movs	r2, #3
 8017178:	fa02 f303 	lsl.w	r3, r2, r3
 801717c:	43db      	mvns	r3, r3
 801717e:	69ba      	ldr	r2, [r7, #24]
 8017180:	4013      	ands	r3, r2
 8017182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	685b      	ldr	r3, [r3, #4]
 8017188:	f003 0203 	and.w	r2, r3, #3
 801718c:	69fb      	ldr	r3, [r7, #28]
 801718e:	005b      	lsls	r3, r3, #1
 8017190:	fa02 f303 	lsl.w	r3, r2, r3
 8017194:	69ba      	ldr	r2, [r7, #24]
 8017196:	4313      	orrs	r3, r2
 8017198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	69ba      	ldr	r2, [r7, #24]
 801719e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80171a0:	683b      	ldr	r3, [r7, #0]
 80171a2:	685b      	ldr	r3, [r3, #4]
 80171a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	f000 80a2 	beq.w	80172f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80171ae:	2300      	movs	r3, #0
 80171b0:	60fb      	str	r3, [r7, #12]
 80171b2:	4b57      	ldr	r3, [pc, #348]	; (8017310 <HAL_GPIO_Init+0x2e8>)
 80171b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171b6:	4a56      	ldr	r2, [pc, #344]	; (8017310 <HAL_GPIO_Init+0x2e8>)
 80171b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80171bc:	6453      	str	r3, [r2, #68]	; 0x44
 80171be:	4b54      	ldr	r3, [pc, #336]	; (8017310 <HAL_GPIO_Init+0x2e8>)
 80171c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80171c6:	60fb      	str	r3, [r7, #12]
 80171c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80171ca:	4a52      	ldr	r2, [pc, #328]	; (8017314 <HAL_GPIO_Init+0x2ec>)
 80171cc:	69fb      	ldr	r3, [r7, #28]
 80171ce:	089b      	lsrs	r3, r3, #2
 80171d0:	3302      	adds	r3, #2
 80171d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80171d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80171d8:	69fb      	ldr	r3, [r7, #28]
 80171da:	f003 0303 	and.w	r3, r3, #3
 80171de:	009b      	lsls	r3, r3, #2
 80171e0:	220f      	movs	r2, #15
 80171e2:	fa02 f303 	lsl.w	r3, r2, r3
 80171e6:	43db      	mvns	r3, r3
 80171e8:	69ba      	ldr	r2, [r7, #24]
 80171ea:	4013      	ands	r3, r2
 80171ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	4a49      	ldr	r2, [pc, #292]	; (8017318 <HAL_GPIO_Init+0x2f0>)
 80171f2:	4293      	cmp	r3, r2
 80171f4:	d019      	beq.n	801722a <HAL_GPIO_Init+0x202>
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	4a48      	ldr	r2, [pc, #288]	; (801731c <HAL_GPIO_Init+0x2f4>)
 80171fa:	4293      	cmp	r3, r2
 80171fc:	d013      	beq.n	8017226 <HAL_GPIO_Init+0x1fe>
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	4a47      	ldr	r2, [pc, #284]	; (8017320 <HAL_GPIO_Init+0x2f8>)
 8017202:	4293      	cmp	r3, r2
 8017204:	d00d      	beq.n	8017222 <HAL_GPIO_Init+0x1fa>
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	4a46      	ldr	r2, [pc, #280]	; (8017324 <HAL_GPIO_Init+0x2fc>)
 801720a:	4293      	cmp	r3, r2
 801720c:	d007      	beq.n	801721e <HAL_GPIO_Init+0x1f6>
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	4a45      	ldr	r2, [pc, #276]	; (8017328 <HAL_GPIO_Init+0x300>)
 8017212:	4293      	cmp	r3, r2
 8017214:	d101      	bne.n	801721a <HAL_GPIO_Init+0x1f2>
 8017216:	2304      	movs	r3, #4
 8017218:	e008      	b.n	801722c <HAL_GPIO_Init+0x204>
 801721a:	2307      	movs	r3, #7
 801721c:	e006      	b.n	801722c <HAL_GPIO_Init+0x204>
 801721e:	2303      	movs	r3, #3
 8017220:	e004      	b.n	801722c <HAL_GPIO_Init+0x204>
 8017222:	2302      	movs	r3, #2
 8017224:	e002      	b.n	801722c <HAL_GPIO_Init+0x204>
 8017226:	2301      	movs	r3, #1
 8017228:	e000      	b.n	801722c <HAL_GPIO_Init+0x204>
 801722a:	2300      	movs	r3, #0
 801722c:	69fa      	ldr	r2, [r7, #28]
 801722e:	f002 0203 	and.w	r2, r2, #3
 8017232:	0092      	lsls	r2, r2, #2
 8017234:	4093      	lsls	r3, r2
 8017236:	69ba      	ldr	r2, [r7, #24]
 8017238:	4313      	orrs	r3, r2
 801723a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801723c:	4935      	ldr	r1, [pc, #212]	; (8017314 <HAL_GPIO_Init+0x2ec>)
 801723e:	69fb      	ldr	r3, [r7, #28]
 8017240:	089b      	lsrs	r3, r3, #2
 8017242:	3302      	adds	r3, #2
 8017244:	69ba      	ldr	r2, [r7, #24]
 8017246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801724a:	4b38      	ldr	r3, [pc, #224]	; (801732c <HAL_GPIO_Init+0x304>)
 801724c:	689b      	ldr	r3, [r3, #8]
 801724e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017250:	693b      	ldr	r3, [r7, #16]
 8017252:	43db      	mvns	r3, r3
 8017254:	69ba      	ldr	r2, [r7, #24]
 8017256:	4013      	ands	r3, r2
 8017258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801725a:	683b      	ldr	r3, [r7, #0]
 801725c:	685b      	ldr	r3, [r3, #4]
 801725e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017262:	2b00      	cmp	r3, #0
 8017264:	d003      	beq.n	801726e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8017266:	69ba      	ldr	r2, [r7, #24]
 8017268:	693b      	ldr	r3, [r7, #16]
 801726a:	4313      	orrs	r3, r2
 801726c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801726e:	4a2f      	ldr	r2, [pc, #188]	; (801732c <HAL_GPIO_Init+0x304>)
 8017270:	69bb      	ldr	r3, [r7, #24]
 8017272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8017274:	4b2d      	ldr	r3, [pc, #180]	; (801732c <HAL_GPIO_Init+0x304>)
 8017276:	68db      	ldr	r3, [r3, #12]
 8017278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801727a:	693b      	ldr	r3, [r7, #16]
 801727c:	43db      	mvns	r3, r3
 801727e:	69ba      	ldr	r2, [r7, #24]
 8017280:	4013      	ands	r3, r2
 8017282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8017284:	683b      	ldr	r3, [r7, #0]
 8017286:	685b      	ldr	r3, [r3, #4]
 8017288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801728c:	2b00      	cmp	r3, #0
 801728e:	d003      	beq.n	8017298 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8017290:	69ba      	ldr	r2, [r7, #24]
 8017292:	693b      	ldr	r3, [r7, #16]
 8017294:	4313      	orrs	r3, r2
 8017296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8017298:	4a24      	ldr	r2, [pc, #144]	; (801732c <HAL_GPIO_Init+0x304>)
 801729a:	69bb      	ldr	r3, [r7, #24]
 801729c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801729e:	4b23      	ldr	r3, [pc, #140]	; (801732c <HAL_GPIO_Init+0x304>)
 80172a0:	685b      	ldr	r3, [r3, #4]
 80172a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80172a4:	693b      	ldr	r3, [r7, #16]
 80172a6:	43db      	mvns	r3, r3
 80172a8:	69ba      	ldr	r2, [r7, #24]
 80172aa:	4013      	ands	r3, r2
 80172ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80172ae:	683b      	ldr	r3, [r7, #0]
 80172b0:	685b      	ldr	r3, [r3, #4]
 80172b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d003      	beq.n	80172c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80172ba:	69ba      	ldr	r2, [r7, #24]
 80172bc:	693b      	ldr	r3, [r7, #16]
 80172be:	4313      	orrs	r3, r2
 80172c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80172c2:	4a1a      	ldr	r2, [pc, #104]	; (801732c <HAL_GPIO_Init+0x304>)
 80172c4:	69bb      	ldr	r3, [r7, #24]
 80172c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80172c8:	4b18      	ldr	r3, [pc, #96]	; (801732c <HAL_GPIO_Init+0x304>)
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80172ce:	693b      	ldr	r3, [r7, #16]
 80172d0:	43db      	mvns	r3, r3
 80172d2:	69ba      	ldr	r2, [r7, #24]
 80172d4:	4013      	ands	r3, r2
 80172d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80172d8:	683b      	ldr	r3, [r7, #0]
 80172da:	685b      	ldr	r3, [r3, #4]
 80172dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d003      	beq.n	80172ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80172e4:	69ba      	ldr	r2, [r7, #24]
 80172e6:	693b      	ldr	r3, [r7, #16]
 80172e8:	4313      	orrs	r3, r2
 80172ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80172ec:	4a0f      	ldr	r2, [pc, #60]	; (801732c <HAL_GPIO_Init+0x304>)
 80172ee:	69bb      	ldr	r3, [r7, #24]
 80172f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80172f2:	69fb      	ldr	r3, [r7, #28]
 80172f4:	3301      	adds	r3, #1
 80172f6:	61fb      	str	r3, [r7, #28]
 80172f8:	69fb      	ldr	r3, [r7, #28]
 80172fa:	2b0f      	cmp	r3, #15
 80172fc:	f67f aea2 	bls.w	8017044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8017300:	bf00      	nop
 8017302:	bf00      	nop
 8017304:	3724      	adds	r7, #36	; 0x24
 8017306:	46bd      	mov	sp, r7
 8017308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730c:	4770      	bx	lr
 801730e:	bf00      	nop
 8017310:	40023800 	.word	0x40023800
 8017314:	40013800 	.word	0x40013800
 8017318:	40020000 	.word	0x40020000
 801731c:	40020400 	.word	0x40020400
 8017320:	40020800 	.word	0x40020800
 8017324:	40020c00 	.word	0x40020c00
 8017328:	40021000 	.word	0x40021000
 801732c:	40013c00 	.word	0x40013c00

08017330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017330:	b480      	push	{r7}
 8017332:	b085      	sub	sp, #20
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
 8017338:	460b      	mov	r3, r1
 801733a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	691a      	ldr	r2, [r3, #16]
 8017340:	887b      	ldrh	r3, [r7, #2]
 8017342:	4013      	ands	r3, r2
 8017344:	2b00      	cmp	r3, #0
 8017346:	d002      	beq.n	801734e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8017348:	2301      	movs	r3, #1
 801734a:	73fb      	strb	r3, [r7, #15]
 801734c:	e001      	b.n	8017352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801734e:	2300      	movs	r3, #0
 8017350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8017352:	7bfb      	ldrb	r3, [r7, #15]
}
 8017354:	4618      	mov	r0, r3
 8017356:	3714      	adds	r7, #20
 8017358:	46bd      	mov	sp, r7
 801735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735e:	4770      	bx	lr

08017360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017360:	b480      	push	{r7}
 8017362:	b083      	sub	sp, #12
 8017364:	af00      	add	r7, sp, #0
 8017366:	6078      	str	r0, [r7, #4]
 8017368:	460b      	mov	r3, r1
 801736a:	807b      	strh	r3, [r7, #2]
 801736c:	4613      	mov	r3, r2
 801736e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017370:	787b      	ldrb	r3, [r7, #1]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d003      	beq.n	801737e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8017376:	887a      	ldrh	r2, [r7, #2]
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801737c:	e003      	b.n	8017386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801737e:	887b      	ldrh	r3, [r7, #2]
 8017380:	041a      	lsls	r2, r3, #16
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	619a      	str	r2, [r3, #24]
}
 8017386:	bf00      	nop
 8017388:	370c      	adds	r7, #12
 801738a:	46bd      	mov	sp, r7
 801738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017390:	4770      	bx	lr
	...

08017394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b082      	sub	sp, #8
 8017398:	af00      	add	r7, sp, #0
 801739a:	4603      	mov	r3, r0
 801739c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801739e:	4b08      	ldr	r3, [pc, #32]	; (80173c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80173a0:	695a      	ldr	r2, [r3, #20]
 80173a2:	88fb      	ldrh	r3, [r7, #6]
 80173a4:	4013      	ands	r3, r2
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d006      	beq.n	80173b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80173aa:	4a05      	ldr	r2, [pc, #20]	; (80173c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80173ac:	88fb      	ldrh	r3, [r7, #6]
 80173ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80173b0:	88fb      	ldrh	r3, [r7, #6]
 80173b2:	4618      	mov	r0, r3
 80173b4:	f7ec fd8c 	bl	8003ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 80173b8:	bf00      	nop
 80173ba:	3708      	adds	r7, #8
 80173bc:	46bd      	mov	sp, r7
 80173be:	bd80      	pop	{r7, pc}
 80173c0:	40013c00 	.word	0x40013c00

080173c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b084      	sub	sp, #16
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d101      	bne.n	80173d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80173d2:	2301      	movs	r3, #1
 80173d4:	e12b      	b.n	801762e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80173dc:	b2db      	uxtb	r3, r3
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d106      	bne.n	80173f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	2200      	movs	r2, #0
 80173e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80173ea:	6878      	ldr	r0, [r7, #4]
 80173ec:	f7fe fcbc 	bl	8015d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	2224      	movs	r2, #36	; 0x24
 80173f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	681a      	ldr	r2, [r3, #0]
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	f022 0201 	bic.w	r2, r2, #1
 8017406:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	681a      	ldr	r2, [r3, #0]
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017416:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	681a      	ldr	r2, [r3, #0]
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8017426:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8017428:	f003 fa9a 	bl	801a960 <HAL_RCC_GetPCLK1Freq>
 801742c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	685b      	ldr	r3, [r3, #4]
 8017432:	4a81      	ldr	r2, [pc, #516]	; (8017638 <HAL_I2C_Init+0x274>)
 8017434:	4293      	cmp	r3, r2
 8017436:	d807      	bhi.n	8017448 <HAL_I2C_Init+0x84>
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	4a80      	ldr	r2, [pc, #512]	; (801763c <HAL_I2C_Init+0x278>)
 801743c:	4293      	cmp	r3, r2
 801743e:	bf94      	ite	ls
 8017440:	2301      	movls	r3, #1
 8017442:	2300      	movhi	r3, #0
 8017444:	b2db      	uxtb	r3, r3
 8017446:	e006      	b.n	8017456 <HAL_I2C_Init+0x92>
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	4a7d      	ldr	r2, [pc, #500]	; (8017640 <HAL_I2C_Init+0x27c>)
 801744c:	4293      	cmp	r3, r2
 801744e:	bf94      	ite	ls
 8017450:	2301      	movls	r3, #1
 8017452:	2300      	movhi	r3, #0
 8017454:	b2db      	uxtb	r3, r3
 8017456:	2b00      	cmp	r3, #0
 8017458:	d001      	beq.n	801745e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801745a:	2301      	movs	r3, #1
 801745c:	e0e7      	b.n	801762e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	4a78      	ldr	r2, [pc, #480]	; (8017644 <HAL_I2C_Init+0x280>)
 8017462:	fba2 2303 	umull	r2, r3, r2, r3
 8017466:	0c9b      	lsrs	r3, r3, #18
 8017468:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	685b      	ldr	r3, [r3, #4]
 8017470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	68ba      	ldr	r2, [r7, #8]
 801747a:	430a      	orrs	r2, r1
 801747c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	6a1b      	ldr	r3, [r3, #32]
 8017484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	685b      	ldr	r3, [r3, #4]
 801748c:	4a6a      	ldr	r2, [pc, #424]	; (8017638 <HAL_I2C_Init+0x274>)
 801748e:	4293      	cmp	r3, r2
 8017490:	d802      	bhi.n	8017498 <HAL_I2C_Init+0xd4>
 8017492:	68bb      	ldr	r3, [r7, #8]
 8017494:	3301      	adds	r3, #1
 8017496:	e009      	b.n	80174ac <HAL_I2C_Init+0xe8>
 8017498:	68bb      	ldr	r3, [r7, #8]
 801749a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801749e:	fb02 f303 	mul.w	r3, r2, r3
 80174a2:	4a69      	ldr	r2, [pc, #420]	; (8017648 <HAL_I2C_Init+0x284>)
 80174a4:	fba2 2303 	umull	r2, r3, r2, r3
 80174a8:	099b      	lsrs	r3, r3, #6
 80174aa:	3301      	adds	r3, #1
 80174ac:	687a      	ldr	r2, [r7, #4]
 80174ae:	6812      	ldr	r2, [r2, #0]
 80174b0:	430b      	orrs	r3, r1
 80174b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	69db      	ldr	r3, [r3, #28]
 80174ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80174be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	685b      	ldr	r3, [r3, #4]
 80174c6:	495c      	ldr	r1, [pc, #368]	; (8017638 <HAL_I2C_Init+0x274>)
 80174c8:	428b      	cmp	r3, r1
 80174ca:	d819      	bhi.n	8017500 <HAL_I2C_Init+0x13c>
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	1e59      	subs	r1, r3, #1
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	685b      	ldr	r3, [r3, #4]
 80174d4:	005b      	lsls	r3, r3, #1
 80174d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80174da:	1c59      	adds	r1, r3, #1
 80174dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80174e0:	400b      	ands	r3, r1
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d00a      	beq.n	80174fc <HAL_I2C_Init+0x138>
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	1e59      	subs	r1, r3, #1
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	685b      	ldr	r3, [r3, #4]
 80174ee:	005b      	lsls	r3, r3, #1
 80174f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80174f4:	3301      	adds	r3, #1
 80174f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80174fa:	e051      	b.n	80175a0 <HAL_I2C_Init+0x1dc>
 80174fc:	2304      	movs	r3, #4
 80174fe:	e04f      	b.n	80175a0 <HAL_I2C_Init+0x1dc>
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	689b      	ldr	r3, [r3, #8]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d111      	bne.n	801752c <HAL_I2C_Init+0x168>
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	1e58      	subs	r0, r3, #1
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	6859      	ldr	r1, [r3, #4]
 8017510:	460b      	mov	r3, r1
 8017512:	005b      	lsls	r3, r3, #1
 8017514:	440b      	add	r3, r1
 8017516:	fbb0 f3f3 	udiv	r3, r0, r3
 801751a:	3301      	adds	r3, #1
 801751c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017520:	2b00      	cmp	r3, #0
 8017522:	bf0c      	ite	eq
 8017524:	2301      	moveq	r3, #1
 8017526:	2300      	movne	r3, #0
 8017528:	b2db      	uxtb	r3, r3
 801752a:	e012      	b.n	8017552 <HAL_I2C_Init+0x18e>
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	1e58      	subs	r0, r3, #1
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	6859      	ldr	r1, [r3, #4]
 8017534:	460b      	mov	r3, r1
 8017536:	009b      	lsls	r3, r3, #2
 8017538:	440b      	add	r3, r1
 801753a:	0099      	lsls	r1, r3, #2
 801753c:	440b      	add	r3, r1
 801753e:	fbb0 f3f3 	udiv	r3, r0, r3
 8017542:	3301      	adds	r3, #1
 8017544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017548:	2b00      	cmp	r3, #0
 801754a:	bf0c      	ite	eq
 801754c:	2301      	moveq	r3, #1
 801754e:	2300      	movne	r3, #0
 8017550:	b2db      	uxtb	r3, r3
 8017552:	2b00      	cmp	r3, #0
 8017554:	d001      	beq.n	801755a <HAL_I2C_Init+0x196>
 8017556:	2301      	movs	r3, #1
 8017558:	e022      	b.n	80175a0 <HAL_I2C_Init+0x1dc>
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	689b      	ldr	r3, [r3, #8]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d10e      	bne.n	8017580 <HAL_I2C_Init+0x1bc>
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	1e58      	subs	r0, r3, #1
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	6859      	ldr	r1, [r3, #4]
 801756a:	460b      	mov	r3, r1
 801756c:	005b      	lsls	r3, r3, #1
 801756e:	440b      	add	r3, r1
 8017570:	fbb0 f3f3 	udiv	r3, r0, r3
 8017574:	3301      	adds	r3, #1
 8017576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801757a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801757e:	e00f      	b.n	80175a0 <HAL_I2C_Init+0x1dc>
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	1e58      	subs	r0, r3, #1
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	6859      	ldr	r1, [r3, #4]
 8017588:	460b      	mov	r3, r1
 801758a:	009b      	lsls	r3, r3, #2
 801758c:	440b      	add	r3, r1
 801758e:	0099      	lsls	r1, r3, #2
 8017590:	440b      	add	r3, r1
 8017592:	fbb0 f3f3 	udiv	r3, r0, r3
 8017596:	3301      	adds	r3, #1
 8017598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801759c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80175a0:	6879      	ldr	r1, [r7, #4]
 80175a2:	6809      	ldr	r1, [r1, #0]
 80175a4:	4313      	orrs	r3, r2
 80175a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	69da      	ldr	r2, [r3, #28]
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	6a1b      	ldr	r3, [r3, #32]
 80175ba:	431a      	orrs	r2, r3
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	430a      	orrs	r2, r1
 80175c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	689b      	ldr	r3, [r3, #8]
 80175ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80175ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80175d2:	687a      	ldr	r2, [r7, #4]
 80175d4:	6911      	ldr	r1, [r2, #16]
 80175d6:	687a      	ldr	r2, [r7, #4]
 80175d8:	68d2      	ldr	r2, [r2, #12]
 80175da:	4311      	orrs	r1, r2
 80175dc:	687a      	ldr	r2, [r7, #4]
 80175de:	6812      	ldr	r2, [r2, #0]
 80175e0:	430b      	orrs	r3, r1
 80175e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	68db      	ldr	r3, [r3, #12]
 80175ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	695a      	ldr	r2, [r3, #20]
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	699b      	ldr	r3, [r3, #24]
 80175f6:	431a      	orrs	r2, r3
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	430a      	orrs	r2, r1
 80175fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	681a      	ldr	r2, [r3, #0]
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	f042 0201 	orr.w	r2, r2, #1
 801760e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	2200      	movs	r2, #0
 8017614:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	2220      	movs	r2, #32
 801761a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	2200      	movs	r2, #0
 8017622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	2200      	movs	r2, #0
 8017628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801762c:	2300      	movs	r3, #0
}
 801762e:	4618      	mov	r0, r3
 8017630:	3710      	adds	r7, #16
 8017632:	46bd      	mov	sp, r7
 8017634:	bd80      	pop	{r7, pc}
 8017636:	bf00      	nop
 8017638:	000186a0 	.word	0x000186a0
 801763c:	001e847f 	.word	0x001e847f
 8017640:	003d08ff 	.word	0x003d08ff
 8017644:	431bde83 	.word	0x431bde83
 8017648:	10624dd3 	.word	0x10624dd3

0801764c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b088      	sub	sp, #32
 8017650:	af02      	add	r7, sp, #8
 8017652:	60f8      	str	r0, [r7, #12]
 8017654:	4608      	mov	r0, r1
 8017656:	4611      	mov	r1, r2
 8017658:	461a      	mov	r2, r3
 801765a:	4603      	mov	r3, r0
 801765c:	817b      	strh	r3, [r7, #10]
 801765e:	460b      	mov	r3, r1
 8017660:	813b      	strh	r3, [r7, #8]
 8017662:	4613      	mov	r3, r2
 8017664:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8017666:	f7fe ff8d 	bl	8016584 <HAL_GetTick>
 801766a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017672:	b2db      	uxtb	r3, r3
 8017674:	2b20      	cmp	r3, #32
 8017676:	f040 80d9 	bne.w	801782c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801767a:	697b      	ldr	r3, [r7, #20]
 801767c:	9300      	str	r3, [sp, #0]
 801767e:	2319      	movs	r3, #25
 8017680:	2201      	movs	r2, #1
 8017682:	496d      	ldr	r1, [pc, #436]	; (8017838 <HAL_I2C_Mem_Write+0x1ec>)
 8017684:	68f8      	ldr	r0, [r7, #12]
 8017686:	f002 fad1 	bl	8019c2c <I2C_WaitOnFlagUntilTimeout>
 801768a:	4603      	mov	r3, r0
 801768c:	2b00      	cmp	r3, #0
 801768e:	d001      	beq.n	8017694 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8017690:	2302      	movs	r3, #2
 8017692:	e0cc      	b.n	801782e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801769a:	2b01      	cmp	r3, #1
 801769c:	d101      	bne.n	80176a2 <HAL_I2C_Mem_Write+0x56>
 801769e:	2302      	movs	r3, #2
 80176a0:	e0c5      	b.n	801782e <HAL_I2C_Mem_Write+0x1e2>
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	2201      	movs	r2, #1
 80176a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	f003 0301 	and.w	r3, r3, #1
 80176b4:	2b01      	cmp	r3, #1
 80176b6:	d007      	beq.n	80176c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	681a      	ldr	r2, [r3, #0]
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	f042 0201 	orr.w	r2, r2, #1
 80176c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	681a      	ldr	r2, [r3, #0]
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80176d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	2221      	movs	r2, #33	; 0x21
 80176dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	2240      	movs	r2, #64	; 0x40
 80176e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	2200      	movs	r2, #0
 80176ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	6a3a      	ldr	r2, [r7, #32]
 80176f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80176f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80176fe:	b29a      	uxth	r2, r3
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	4a4d      	ldr	r2, [pc, #308]	; (801783c <HAL_I2C_Mem_Write+0x1f0>)
 8017708:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801770a:	88f8      	ldrh	r0, [r7, #6]
 801770c:	893a      	ldrh	r2, [r7, #8]
 801770e:	8979      	ldrh	r1, [r7, #10]
 8017710:	697b      	ldr	r3, [r7, #20]
 8017712:	9301      	str	r3, [sp, #4]
 8017714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017716:	9300      	str	r3, [sp, #0]
 8017718:	4603      	mov	r3, r0
 801771a:	68f8      	ldr	r0, [r7, #12]
 801771c:	f002 f860 	bl	80197e0 <I2C_RequestMemoryWrite>
 8017720:	4603      	mov	r3, r0
 8017722:	2b00      	cmp	r3, #0
 8017724:	d052      	beq.n	80177cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8017726:	2301      	movs	r3, #1
 8017728:	e081      	b.n	801782e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801772a:	697a      	ldr	r2, [r7, #20]
 801772c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801772e:	68f8      	ldr	r0, [r7, #12]
 8017730:	f002 fb52 	bl	8019dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8017734:	4603      	mov	r3, r0
 8017736:	2b00      	cmp	r3, #0
 8017738:	d00d      	beq.n	8017756 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801773e:	2b04      	cmp	r3, #4
 8017740:	d107      	bne.n	8017752 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	681a      	ldr	r2, [r3, #0]
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017750:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8017752:	2301      	movs	r3, #1
 8017754:	e06b      	b.n	801782e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801775a:	781a      	ldrb	r2, [r3, #0]
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017766:	1c5a      	adds	r2, r3, #1
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017770:	3b01      	subs	r3, #1
 8017772:	b29a      	uxth	r2, r3
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801777c:	b29b      	uxth	r3, r3
 801777e:	3b01      	subs	r3, #1
 8017780:	b29a      	uxth	r2, r3
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	695b      	ldr	r3, [r3, #20]
 801778c:	f003 0304 	and.w	r3, r3, #4
 8017790:	2b04      	cmp	r3, #4
 8017792:	d11b      	bne.n	80177cc <HAL_I2C_Mem_Write+0x180>
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017798:	2b00      	cmp	r3, #0
 801779a:	d017      	beq.n	80177cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177a0:	781a      	ldrb	r2, [r3, #0]
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177ac:	1c5a      	adds	r2, r3, #1
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80177b6:	3b01      	subs	r3, #1
 80177b8:	b29a      	uxth	r2, r3
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80177c2:	b29b      	uxth	r3, r3
 80177c4:	3b01      	subs	r3, #1
 80177c6:	b29a      	uxth	r2, r3
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d1aa      	bne.n	801772a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80177d4:	697a      	ldr	r2, [r7, #20]
 80177d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80177d8:	68f8      	ldr	r0, [r7, #12]
 80177da:	f002 fb3e 	bl	8019e5a <I2C_WaitOnBTFFlagUntilTimeout>
 80177de:	4603      	mov	r3, r0
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d00d      	beq.n	8017800 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177e8:	2b04      	cmp	r3, #4
 80177ea:	d107      	bne.n	80177fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	681a      	ldr	r2, [r3, #0]
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80177fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80177fc:	2301      	movs	r3, #1
 80177fe:	e016      	b.n	801782e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	681a      	ldr	r2, [r3, #0]
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801780e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	2220      	movs	r2, #32
 8017814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	2200      	movs	r2, #0
 801781c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	2200      	movs	r2, #0
 8017824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017828:	2300      	movs	r3, #0
 801782a:	e000      	b.n	801782e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 801782c:	2302      	movs	r3, #2
  }
}
 801782e:	4618      	mov	r0, r3
 8017830:	3718      	adds	r7, #24
 8017832:	46bd      	mov	sp, r7
 8017834:	bd80      	pop	{r7, pc}
 8017836:	bf00      	nop
 8017838:	00100002 	.word	0x00100002
 801783c:	ffff0000 	.word	0xffff0000

08017840 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b08c      	sub	sp, #48	; 0x30
 8017844:	af02      	add	r7, sp, #8
 8017846:	60f8      	str	r0, [r7, #12]
 8017848:	4608      	mov	r0, r1
 801784a:	4611      	mov	r1, r2
 801784c:	461a      	mov	r2, r3
 801784e:	4603      	mov	r3, r0
 8017850:	817b      	strh	r3, [r7, #10]
 8017852:	460b      	mov	r3, r1
 8017854:	813b      	strh	r3, [r7, #8]
 8017856:	4613      	mov	r3, r2
 8017858:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801785a:	f7fe fe93 	bl	8016584 <HAL_GetTick>
 801785e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017866:	b2db      	uxtb	r3, r3
 8017868:	2b20      	cmp	r3, #32
 801786a:	f040 8208 	bne.w	8017c7e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017870:	9300      	str	r3, [sp, #0]
 8017872:	2319      	movs	r3, #25
 8017874:	2201      	movs	r2, #1
 8017876:	497b      	ldr	r1, [pc, #492]	; (8017a64 <HAL_I2C_Mem_Read+0x224>)
 8017878:	68f8      	ldr	r0, [r7, #12]
 801787a:	f002 f9d7 	bl	8019c2c <I2C_WaitOnFlagUntilTimeout>
 801787e:	4603      	mov	r3, r0
 8017880:	2b00      	cmp	r3, #0
 8017882:	d001      	beq.n	8017888 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8017884:	2302      	movs	r3, #2
 8017886:	e1fb      	b.n	8017c80 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801788e:	2b01      	cmp	r3, #1
 8017890:	d101      	bne.n	8017896 <HAL_I2C_Mem_Read+0x56>
 8017892:	2302      	movs	r3, #2
 8017894:	e1f4      	b.n	8017c80 <HAL_I2C_Mem_Read+0x440>
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	2201      	movs	r2, #1
 801789a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	f003 0301 	and.w	r3, r3, #1
 80178a8:	2b01      	cmp	r3, #1
 80178aa:	d007      	beq.n	80178bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	681a      	ldr	r2, [r3, #0]
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	f042 0201 	orr.w	r2, r2, #1
 80178ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	681a      	ldr	r2, [r3, #0]
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80178ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	2222      	movs	r2, #34	; 0x22
 80178d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	2240      	movs	r2, #64	; 0x40
 80178d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	2200      	movs	r2, #0
 80178e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80178ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80178f2:	b29a      	uxth	r2, r3
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	4a5b      	ldr	r2, [pc, #364]	; (8017a68 <HAL_I2C_Mem_Read+0x228>)
 80178fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80178fe:	88f8      	ldrh	r0, [r7, #6]
 8017900:	893a      	ldrh	r2, [r7, #8]
 8017902:	8979      	ldrh	r1, [r7, #10]
 8017904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017906:	9301      	str	r3, [sp, #4]
 8017908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801790a:	9300      	str	r3, [sp, #0]
 801790c:	4603      	mov	r3, r0
 801790e:	68f8      	ldr	r0, [r7, #12]
 8017910:	f001 fffc 	bl	801990c <I2C_RequestMemoryRead>
 8017914:	4603      	mov	r3, r0
 8017916:	2b00      	cmp	r3, #0
 8017918:	d001      	beq.n	801791e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 801791a:	2301      	movs	r3, #1
 801791c:	e1b0      	b.n	8017c80 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017922:	2b00      	cmp	r3, #0
 8017924:	d113      	bne.n	801794e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017926:	2300      	movs	r3, #0
 8017928:	623b      	str	r3, [r7, #32]
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	695b      	ldr	r3, [r3, #20]
 8017930:	623b      	str	r3, [r7, #32]
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	699b      	ldr	r3, [r3, #24]
 8017938:	623b      	str	r3, [r7, #32]
 801793a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	681a      	ldr	r2, [r3, #0]
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801794a:	601a      	str	r2, [r3, #0]
 801794c:	e184      	b.n	8017c58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017952:	2b01      	cmp	r3, #1
 8017954:	d11b      	bne.n	801798e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	681a      	ldr	r2, [r3, #0]
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017964:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017966:	2300      	movs	r3, #0
 8017968:	61fb      	str	r3, [r7, #28]
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	695b      	ldr	r3, [r3, #20]
 8017970:	61fb      	str	r3, [r7, #28]
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	699b      	ldr	r3, [r3, #24]
 8017978:	61fb      	str	r3, [r7, #28]
 801797a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	681a      	ldr	r2, [r3, #0]
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801798a:	601a      	str	r2, [r3, #0]
 801798c:	e164      	b.n	8017c58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017992:	2b02      	cmp	r3, #2
 8017994:	d11b      	bne.n	80179ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	681a      	ldr	r2, [r3, #0]
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80179a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	681a      	ldr	r2, [r3, #0]
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80179b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80179b6:	2300      	movs	r3, #0
 80179b8:	61bb      	str	r3, [r7, #24]
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	695b      	ldr	r3, [r3, #20]
 80179c0:	61bb      	str	r3, [r7, #24]
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	699b      	ldr	r3, [r3, #24]
 80179c8:	61bb      	str	r3, [r7, #24]
 80179ca:	69bb      	ldr	r3, [r7, #24]
 80179cc:	e144      	b.n	8017c58 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80179ce:	2300      	movs	r3, #0
 80179d0:	617b      	str	r3, [r7, #20]
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	695b      	ldr	r3, [r3, #20]
 80179d8:	617b      	str	r3, [r7, #20]
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	699b      	ldr	r3, [r3, #24]
 80179e0:	617b      	str	r3, [r7, #20]
 80179e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80179e4:	e138      	b.n	8017c58 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80179ea:	2b03      	cmp	r3, #3
 80179ec:	f200 80f1 	bhi.w	8017bd2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80179f4:	2b01      	cmp	r3, #1
 80179f6:	d123      	bne.n	8017a40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80179f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80179fc:	68f8      	ldr	r0, [r7, #12]
 80179fe:	f002 fa9f 	bl	8019f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8017a02:	4603      	mov	r3, r0
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d001      	beq.n	8017a0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8017a08:	2301      	movs	r3, #1
 8017a0a:	e139      	b.n	8017c80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	691a      	ldr	r2, [r3, #16]
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a16:	b2d2      	uxtb	r2, r2
 8017a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a1e:	1c5a      	adds	r2, r3, #1
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a28:	3b01      	subs	r3, #1
 8017a2a:	b29a      	uxth	r2, r3
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a34:	b29b      	uxth	r3, r3
 8017a36:	3b01      	subs	r3, #1
 8017a38:	b29a      	uxth	r2, r3
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017a3e:	e10b      	b.n	8017c58 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a44:	2b02      	cmp	r3, #2
 8017a46:	d14e      	bne.n	8017ae6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a4a:	9300      	str	r3, [sp, #0]
 8017a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a4e:	2200      	movs	r2, #0
 8017a50:	4906      	ldr	r1, [pc, #24]	; (8017a6c <HAL_I2C_Mem_Read+0x22c>)
 8017a52:	68f8      	ldr	r0, [r7, #12]
 8017a54:	f002 f8ea 	bl	8019c2c <I2C_WaitOnFlagUntilTimeout>
 8017a58:	4603      	mov	r3, r0
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d008      	beq.n	8017a70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8017a5e:	2301      	movs	r3, #1
 8017a60:	e10e      	b.n	8017c80 <HAL_I2C_Mem_Read+0x440>
 8017a62:	bf00      	nop
 8017a64:	00100002 	.word	0x00100002
 8017a68:	ffff0000 	.word	0xffff0000
 8017a6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	681a      	ldr	r2, [r3, #0]
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	691a      	ldr	r2, [r3, #16]
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a8a:	b2d2      	uxtb	r2, r2
 8017a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a92:	1c5a      	adds	r2, r3, #1
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a9c:	3b01      	subs	r3, #1
 8017a9e:	b29a      	uxth	r2, r3
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017aa8:	b29b      	uxth	r3, r3
 8017aaa:	3b01      	subs	r3, #1
 8017aac:	b29a      	uxth	r2, r3
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	691a      	ldr	r2, [r3, #16]
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017abc:	b2d2      	uxtb	r2, r2
 8017abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ac4:	1c5a      	adds	r2, r3, #1
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017ace:	3b01      	subs	r3, #1
 8017ad0:	b29a      	uxth	r2, r3
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017ada:	b29b      	uxth	r3, r3
 8017adc:	3b01      	subs	r3, #1
 8017ade:	b29a      	uxth	r2, r3
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017ae4:	e0b8      	b.n	8017c58 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ae8:	9300      	str	r3, [sp, #0]
 8017aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017aec:	2200      	movs	r2, #0
 8017aee:	4966      	ldr	r1, [pc, #408]	; (8017c88 <HAL_I2C_Mem_Read+0x448>)
 8017af0:	68f8      	ldr	r0, [r7, #12]
 8017af2:	f002 f89b 	bl	8019c2c <I2C_WaitOnFlagUntilTimeout>
 8017af6:	4603      	mov	r3, r0
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d001      	beq.n	8017b00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8017afc:	2301      	movs	r3, #1
 8017afe:	e0bf      	b.n	8017c80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	681a      	ldr	r2, [r3, #0]
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	691a      	ldr	r2, [r3, #16]
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b1a:	b2d2      	uxtb	r2, r2
 8017b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b22:	1c5a      	adds	r2, r3, #1
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b2c:	3b01      	subs	r3, #1
 8017b2e:	b29a      	uxth	r2, r3
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017b38:	b29b      	uxth	r3, r3
 8017b3a:	3b01      	subs	r3, #1
 8017b3c:	b29a      	uxth	r2, r3
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b44:	9300      	str	r3, [sp, #0]
 8017b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b48:	2200      	movs	r2, #0
 8017b4a:	494f      	ldr	r1, [pc, #316]	; (8017c88 <HAL_I2C_Mem_Read+0x448>)
 8017b4c:	68f8      	ldr	r0, [r7, #12]
 8017b4e:	f002 f86d 	bl	8019c2c <I2C_WaitOnFlagUntilTimeout>
 8017b52:	4603      	mov	r3, r0
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d001      	beq.n	8017b5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8017b58:	2301      	movs	r3, #1
 8017b5a:	e091      	b.n	8017c80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	681a      	ldr	r2, [r3, #0]
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	691a      	ldr	r2, [r3, #16]
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b76:	b2d2      	uxtb	r2, r2
 8017b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b7e:	1c5a      	adds	r2, r3, #1
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b88:	3b01      	subs	r3, #1
 8017b8a:	b29a      	uxth	r2, r3
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017b94:	b29b      	uxth	r3, r3
 8017b96:	3b01      	subs	r3, #1
 8017b98:	b29a      	uxth	r2, r3
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	691a      	ldr	r2, [r3, #16]
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ba8:	b2d2      	uxtb	r2, r2
 8017baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bb0:	1c5a      	adds	r2, r3, #1
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bba:	3b01      	subs	r3, #1
 8017bbc:	b29a      	uxth	r2, r3
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017bc6:	b29b      	uxth	r3, r3
 8017bc8:	3b01      	subs	r3, #1
 8017bca:	b29a      	uxth	r2, r3
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017bd0:	e042      	b.n	8017c58 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017bd6:	68f8      	ldr	r0, [r7, #12]
 8017bd8:	f002 f9b2 	bl	8019f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8017bdc:	4603      	mov	r3, r0
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d001      	beq.n	8017be6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8017be2:	2301      	movs	r3, #1
 8017be4:	e04c      	b.n	8017c80 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	691a      	ldr	r2, [r3, #16]
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bf0:	b2d2      	uxtb	r2, r2
 8017bf2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bf8:	1c5a      	adds	r2, r3, #1
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c02:	3b01      	subs	r3, #1
 8017c04:	b29a      	uxth	r2, r3
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017c0e:	b29b      	uxth	r3, r3
 8017c10:	3b01      	subs	r3, #1
 8017c12:	b29a      	uxth	r2, r3
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	695b      	ldr	r3, [r3, #20]
 8017c1e:	f003 0304 	and.w	r3, r3, #4
 8017c22:	2b04      	cmp	r3, #4
 8017c24:	d118      	bne.n	8017c58 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	691a      	ldr	r2, [r3, #16]
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c30:	b2d2      	uxtb	r2, r2
 8017c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c38:	1c5a      	adds	r2, r3, #1
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c42:	3b01      	subs	r3, #1
 8017c44:	b29a      	uxth	r2, r3
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017c4e:	b29b      	uxth	r3, r3
 8017c50:	3b01      	subs	r3, #1
 8017c52:	b29a      	uxth	r2, r3
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	f47f aec2 	bne.w	80179e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	2220      	movs	r2, #32
 8017c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017c6a:	68fb      	ldr	r3, [r7, #12]
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	2200      	movs	r2, #0
 8017c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	e000      	b.n	8017c80 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8017c7e:	2302      	movs	r3, #2
  }
}
 8017c80:	4618      	mov	r0, r3
 8017c82:	3728      	adds	r7, #40	; 0x28
 8017c84:	46bd      	mov	sp, r7
 8017c86:	bd80      	pop	{r7, pc}
 8017c88:	00010004 	.word	0x00010004

08017c8c <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017c8c:	b480      	push	{r7}
 8017c8e:	b087      	sub	sp, #28
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	60f8      	str	r0, [r7, #12]
 8017c94:	607a      	str	r2, [r7, #4]
 8017c96:	461a      	mov	r2, r3
 8017c98:	460b      	mov	r3, r1
 8017c9a:	817b      	strh	r3, [r7, #10]
 8017c9c:	4613      	mov	r3, r2
 8017c9e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017cae:	b2db      	uxtb	r3, r3
 8017cb0:	2b20      	cmp	r3, #32
 8017cb2:	f040 80a6 	bne.w	8017e02 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017cc4:	d005      	beq.n	8017cd2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017cc6:	6a3b      	ldr	r3, [r7, #32]
 8017cc8:	2b08      	cmp	r3, #8
 8017cca:	d002      	beq.n	8017cd2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017ccc:	6a3b      	ldr	r3, [r7, #32]
 8017cce:	2b01      	cmp	r3, #1
 8017cd0:	d130      	bne.n	8017d34 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8017cd2:	4b4f      	ldr	r3, [pc, #316]	; (8017e10 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	08db      	lsrs	r3, r3, #3
 8017cd8:	4a4e      	ldr	r2, [pc, #312]	; (8017e14 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8017cda:	fba2 2303 	umull	r2, r3, r2, r3
 8017cde:	0a1a      	lsrs	r2, r3, #8
 8017ce0:	4613      	mov	r3, r2
 8017ce2:	009b      	lsls	r3, r3, #2
 8017ce4:	4413      	add	r3, r2
 8017ce6:	009a      	lsls	r2, r3, #2
 8017ce8:	4413      	add	r3, r2
 8017cea:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8017cec:	693b      	ldr	r3, [r7, #16]
 8017cee:	3b01      	subs	r3, #1
 8017cf0:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8017cf2:	693b      	ldr	r3, [r7, #16]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d116      	bne.n	8017d26 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	2220      	movs	r2, #32
 8017d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	2200      	movs	r2, #0
 8017d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d12:	f043 0220 	orr.w	r2, r3, #32
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	2200      	movs	r2, #0
 8017d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8017d22:	2301      	movs	r3, #1
 8017d24:	e06e      	b.n	8017e04 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	699b      	ldr	r3, [r3, #24]
 8017d2c:	f003 0302 	and.w	r3, r3, #2
 8017d30:	2b02      	cmp	r3, #2
 8017d32:	d0db      	beq.n	8017cec <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017d3a:	2b01      	cmp	r3, #1
 8017d3c:	d101      	bne.n	8017d42 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8017d3e:	2302      	movs	r3, #2
 8017d40:	e060      	b.n	8017e04 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	2201      	movs	r2, #1
 8017d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	f003 0301 	and.w	r3, r3, #1
 8017d54:	2b01      	cmp	r3, #1
 8017d56:	d007      	beq.n	8017d68 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	681a      	ldr	r2, [r3, #0]
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	f042 0201 	orr.w	r2, r2, #1
 8017d66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	681a      	ldr	r2, [r3, #0]
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017d76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	2221      	movs	r2, #33	; 0x21
 8017d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	2210      	movs	r2, #16
 8017d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	687a      	ldr	r2, [r7, #4]
 8017d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	893a      	ldrh	r2, [r7, #8]
 8017d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d9e:	b29a      	uxth	r2, r3
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	6a3a      	ldr	r2, [r7, #32]
 8017da8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8017daa:	897a      	ldrh	r2, [r7, #10]
 8017dac:	68fb      	ldr	r3, [r7, #12]
 8017dae:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017db4:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8017db6:	697b      	ldr	r3, [r7, #20]
 8017db8:	2b11      	cmp	r3, #17
 8017dba:	d10c      	bne.n	8017dd6 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8017dbc:	6a3b      	ldr	r3, [r7, #32]
 8017dbe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017dc2:	d003      	beq.n	8017dcc <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8017dc4:	6a3b      	ldr	r3, [r7, #32]
 8017dc6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017dca:	d101      	bne.n	8017dd0 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8017dcc:	2301      	movs	r3, #1
 8017dce:	e000      	b.n	8017dd2 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	2b01      	cmp	r3, #1
 8017dd4:	d107      	bne.n	8017de6 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	681a      	ldr	r2, [r3, #0]
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017de4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	2200      	movs	r2, #0
 8017dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	685a      	ldr	r2, [r3, #4]
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8017dfc:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8017dfe:	2300      	movs	r3, #0
 8017e00:	e000      	b.n	8017e04 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8017e02:	2302      	movs	r3, #2
  }
}
 8017e04:	4618      	mov	r0, r3
 8017e06:	371c      	adds	r7, #28
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e0e:	4770      	bx	lr
 8017e10:	200001e4 	.word	0x200001e4
 8017e14:	14f8b589 	.word	0x14f8b589

08017e18 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017e18:	b480      	push	{r7}
 8017e1a:	b089      	sub	sp, #36	; 0x24
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	60f8      	str	r0, [r7, #12]
 8017e20:	607a      	str	r2, [r7, #4]
 8017e22:	461a      	mov	r2, r3
 8017e24:	460b      	mov	r3, r1
 8017e26:	817b      	strh	r3, [r7, #10]
 8017e28:	4613      	mov	r3, r2
 8017e2a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8017e30:	2300      	movs	r3, #0
 8017e32:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017e34:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8017e38:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017e40:	b2db      	uxtb	r3, r3
 8017e42:	2b20      	cmp	r3, #32
 8017e44:	f040 80da 	bne.w	8017ffc <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e56:	d005      	beq.n	8017e64 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8017e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e5a:	2b08      	cmp	r3, #8
 8017e5c:	d002      	beq.n	8017e64 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8017e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e60:	2b01      	cmp	r3, #1
 8017e62:	d130      	bne.n	8017ec6 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8017e64:	4b69      	ldr	r3, [pc, #420]	; (801800c <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	08db      	lsrs	r3, r3, #3
 8017e6a:	4a69      	ldr	r2, [pc, #420]	; (8018010 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8017e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8017e70:	0a1a      	lsrs	r2, r3, #8
 8017e72:	4613      	mov	r3, r2
 8017e74:	009b      	lsls	r3, r3, #2
 8017e76:	4413      	add	r3, r2
 8017e78:	009a      	lsls	r2, r3, #2
 8017e7a:	4413      	add	r3, r2
 8017e7c:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8017e7e:	697b      	ldr	r3, [r7, #20]
 8017e80:	3b01      	subs	r3, #1
 8017e82:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8017e84:	697b      	ldr	r3, [r7, #20]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d116      	bne.n	8017eb8 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	2220      	movs	r2, #32
 8017e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ea4:	f043 0220 	orr.w	r2, r3, #32
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	2200      	movs	r2, #0
 8017eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8017eb4:	2301      	movs	r3, #1
 8017eb6:	e0a2      	b.n	8017ffe <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	699b      	ldr	r3, [r3, #24]
 8017ebe:	f003 0302 	and.w	r3, r3, #2
 8017ec2:	2b02      	cmp	r3, #2
 8017ec4:	d0db      	beq.n	8017e7e <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017ecc:	2b01      	cmp	r3, #1
 8017ece:	d101      	bne.n	8017ed4 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8017ed0:	2302      	movs	r3, #2
 8017ed2:	e094      	b.n	8017ffe <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	2201      	movs	r2, #1
 8017ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	f003 0301 	and.w	r3, r3, #1
 8017ee6:	2b01      	cmp	r3, #1
 8017ee8:	d007      	beq.n	8017efa <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	681a      	ldr	r2, [r3, #0]
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	f042 0201 	orr.w	r2, r2, #1
 8017ef8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	681a      	ldr	r2, [r3, #0]
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017f08:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	2222      	movs	r2, #34	; 0x22
 8017f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	2210      	movs	r2, #16
 8017f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	2200      	movs	r2, #0
 8017f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	687a      	ldr	r2, [r7, #4]
 8017f24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	893a      	ldrh	r2, [r7, #8]
 8017f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f30:	b29a      	uxth	r2, r3
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8017f3c:	897a      	ldrh	r2, [r7, #10]
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f46:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f4c:	b29b      	uxth	r3, r3
 8017f4e:	2b02      	cmp	r3, #2
 8017f50:	d126      	bne.n	8017fa0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8017f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f54:	2b20      	cmp	r3, #32
 8017f56:	d002      	beq.n	8017f5e <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8017f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f5a:	2b10      	cmp	r3, #16
 8017f5c:	d120      	bne.n	8017fa0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017f5e:	69bb      	ldr	r3, [r7, #24]
 8017f60:	2b12      	cmp	r3, #18
 8017f62:	d114      	bne.n	8017f8e <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	681a      	ldr	r2, [r3, #0]
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017f72:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	681a      	ldr	r2, [r3, #0]
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017f82:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8017f84:	69fb      	ldr	r3, [r7, #28]
 8017f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017f8a:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017f8c:	e010      	b.n	8017fb0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	681a      	ldr	r2, [r3, #0]
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017f9c:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017f9e:	e007      	b.n	8017fb0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	681a      	ldr	r2, [r3, #0]
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017fae:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8017fb0:	69bb      	ldr	r3, [r7, #24]
 8017fb2:	2b12      	cmp	r3, #18
 8017fb4:	d10c      	bne.n	8017fd0 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8017fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fb8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017fbc:	d003      	beq.n	8017fc6 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8017fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fc0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017fc4:	d101      	bne.n	8017fca <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8017fc6:	2301      	movs	r3, #1
 8017fc8:	e000      	b.n	8017fcc <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8017fca:	2300      	movs	r3, #0
 8017fcc:	2b01      	cmp	r3, #1
 8017fce:	d107      	bne.n	8017fe0 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	681a      	ldr	r2, [r3, #0]
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017fde:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	6859      	ldr	r1, [r3, #4]
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	69fa      	ldr	r2, [r7, #28]
 8017ff4:	430a      	orrs	r2, r1
 8017ff6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	e000      	b.n	8017ffe <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8017ffc:	2302      	movs	r3, #2
  }
}
 8017ffe:	4618      	mov	r0, r3
 8018000:	3724      	adds	r7, #36	; 0x24
 8018002:	46bd      	mov	sp, r7
 8018004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018008:	4770      	bx	lr
 801800a:	bf00      	nop
 801800c:	200001e4 	.word	0x200001e4
 8018010:	14f8b589 	.word	0x14f8b589

08018014 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8018014:	b580      	push	{r7, lr}
 8018016:	b088      	sub	sp, #32
 8018018:	af00      	add	r7, sp, #0
 801801a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 801801c:	2300      	movs	r3, #0
 801801e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	685b      	ldr	r3, [r3, #4]
 8018026:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801802c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018034:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801803c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801803e:	7bfb      	ldrb	r3, [r7, #15]
 8018040:	2b10      	cmp	r3, #16
 8018042:	d003      	beq.n	801804c <HAL_I2C_EV_IRQHandler+0x38>
 8018044:	7bfb      	ldrb	r3, [r7, #15]
 8018046:	2b40      	cmp	r3, #64	; 0x40
 8018048:	f040 80c1 	bne.w	80181ce <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	699b      	ldr	r3, [r3, #24]
 8018052:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	695b      	ldr	r3, [r3, #20]
 801805a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801805c:	69fb      	ldr	r3, [r7, #28]
 801805e:	f003 0301 	and.w	r3, r3, #1
 8018062:	2b00      	cmp	r3, #0
 8018064:	d10d      	bne.n	8018082 <HAL_I2C_EV_IRQHandler+0x6e>
 8018066:	693b      	ldr	r3, [r7, #16]
 8018068:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801806c:	d003      	beq.n	8018076 <HAL_I2C_EV_IRQHandler+0x62>
 801806e:	693b      	ldr	r3, [r7, #16]
 8018070:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8018074:	d101      	bne.n	801807a <HAL_I2C_EV_IRQHandler+0x66>
 8018076:	2301      	movs	r3, #1
 8018078:	e000      	b.n	801807c <HAL_I2C_EV_IRQHandler+0x68>
 801807a:	2300      	movs	r3, #0
 801807c:	2b01      	cmp	r3, #1
 801807e:	f000 8132 	beq.w	80182e6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018082:	69fb      	ldr	r3, [r7, #28]
 8018084:	f003 0301 	and.w	r3, r3, #1
 8018088:	2b00      	cmp	r3, #0
 801808a:	d00c      	beq.n	80180a6 <HAL_I2C_EV_IRQHandler+0x92>
 801808c:	697b      	ldr	r3, [r7, #20]
 801808e:	0a5b      	lsrs	r3, r3, #9
 8018090:	f003 0301 	and.w	r3, r3, #1
 8018094:	2b00      	cmp	r3, #0
 8018096:	d006      	beq.n	80180a6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8018098:	6878      	ldr	r0, [r7, #4]
 801809a:	f001 ffd6 	bl	801a04a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801809e:	6878      	ldr	r0, [r7, #4]
 80180a0:	f000 fd83 	bl	8018baa <I2C_Master_SB>
 80180a4:	e092      	b.n	80181cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80180a6:	69fb      	ldr	r3, [r7, #28]
 80180a8:	08db      	lsrs	r3, r3, #3
 80180aa:	f003 0301 	and.w	r3, r3, #1
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d009      	beq.n	80180c6 <HAL_I2C_EV_IRQHandler+0xb2>
 80180b2:	697b      	ldr	r3, [r7, #20]
 80180b4:	0a5b      	lsrs	r3, r3, #9
 80180b6:	f003 0301 	and.w	r3, r3, #1
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d003      	beq.n	80180c6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80180be:	6878      	ldr	r0, [r7, #4]
 80180c0:	f000 fdf9 	bl	8018cb6 <I2C_Master_ADD10>
 80180c4:	e082      	b.n	80181cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80180c6:	69fb      	ldr	r3, [r7, #28]
 80180c8:	085b      	lsrs	r3, r3, #1
 80180ca:	f003 0301 	and.w	r3, r3, #1
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d009      	beq.n	80180e6 <HAL_I2C_EV_IRQHandler+0xd2>
 80180d2:	697b      	ldr	r3, [r7, #20]
 80180d4:	0a5b      	lsrs	r3, r3, #9
 80180d6:	f003 0301 	and.w	r3, r3, #1
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d003      	beq.n	80180e6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80180de:	6878      	ldr	r0, [r7, #4]
 80180e0:	f000 fe13 	bl	8018d0a <I2C_Master_ADDR>
 80180e4:	e072      	b.n	80181cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80180e6:	69bb      	ldr	r3, [r7, #24]
 80180e8:	089b      	lsrs	r3, r3, #2
 80180ea:	f003 0301 	and.w	r3, r3, #1
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d03b      	beq.n	801816a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	685b      	ldr	r3, [r3, #4]
 80180f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80180fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018100:	f000 80f3 	beq.w	80182ea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018104:	69fb      	ldr	r3, [r7, #28]
 8018106:	09db      	lsrs	r3, r3, #7
 8018108:	f003 0301 	and.w	r3, r3, #1
 801810c:	2b00      	cmp	r3, #0
 801810e:	d00f      	beq.n	8018130 <HAL_I2C_EV_IRQHandler+0x11c>
 8018110:	697b      	ldr	r3, [r7, #20]
 8018112:	0a9b      	lsrs	r3, r3, #10
 8018114:	f003 0301 	and.w	r3, r3, #1
 8018118:	2b00      	cmp	r3, #0
 801811a:	d009      	beq.n	8018130 <HAL_I2C_EV_IRQHandler+0x11c>
 801811c:	69fb      	ldr	r3, [r7, #28]
 801811e:	089b      	lsrs	r3, r3, #2
 8018120:	f003 0301 	and.w	r3, r3, #1
 8018124:	2b00      	cmp	r3, #0
 8018126:	d103      	bne.n	8018130 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8018128:	6878      	ldr	r0, [r7, #4]
 801812a:	f000 f9f3 	bl	8018514 <I2C_MasterTransmit_TXE>
 801812e:	e04d      	b.n	80181cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018130:	69fb      	ldr	r3, [r7, #28]
 8018132:	089b      	lsrs	r3, r3, #2
 8018134:	f003 0301 	and.w	r3, r3, #1
 8018138:	2b00      	cmp	r3, #0
 801813a:	f000 80d6 	beq.w	80182ea <HAL_I2C_EV_IRQHandler+0x2d6>
 801813e:	697b      	ldr	r3, [r7, #20]
 8018140:	0a5b      	lsrs	r3, r3, #9
 8018142:	f003 0301 	and.w	r3, r3, #1
 8018146:	2b00      	cmp	r3, #0
 8018148:	f000 80cf 	beq.w	80182ea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801814c:	7bbb      	ldrb	r3, [r7, #14]
 801814e:	2b21      	cmp	r3, #33	; 0x21
 8018150:	d103      	bne.n	801815a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8018152:	6878      	ldr	r0, [r7, #4]
 8018154:	f000 fa7a 	bl	801864c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018158:	e0c7      	b.n	80182ea <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 801815a:	7bfb      	ldrb	r3, [r7, #15]
 801815c:	2b40      	cmp	r3, #64	; 0x40
 801815e:	f040 80c4 	bne.w	80182ea <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8018162:	6878      	ldr	r0, [r7, #4]
 8018164:	f000 fae8 	bl	8018738 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018168:	e0bf      	b.n	80182ea <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	685b      	ldr	r3, [r3, #4]
 8018170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018178:	f000 80b7 	beq.w	80182ea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801817c:	69fb      	ldr	r3, [r7, #28]
 801817e:	099b      	lsrs	r3, r3, #6
 8018180:	f003 0301 	and.w	r3, r3, #1
 8018184:	2b00      	cmp	r3, #0
 8018186:	d00f      	beq.n	80181a8 <HAL_I2C_EV_IRQHandler+0x194>
 8018188:	697b      	ldr	r3, [r7, #20]
 801818a:	0a9b      	lsrs	r3, r3, #10
 801818c:	f003 0301 	and.w	r3, r3, #1
 8018190:	2b00      	cmp	r3, #0
 8018192:	d009      	beq.n	80181a8 <HAL_I2C_EV_IRQHandler+0x194>
 8018194:	69fb      	ldr	r3, [r7, #28]
 8018196:	089b      	lsrs	r3, r3, #2
 8018198:	f003 0301 	and.w	r3, r3, #1
 801819c:	2b00      	cmp	r3, #0
 801819e:	d103      	bne.n	80181a8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80181a0:	6878      	ldr	r0, [r7, #4]
 80181a2:	f000 fb5d 	bl	8018860 <I2C_MasterReceive_RXNE>
 80181a6:	e011      	b.n	80181cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80181a8:	69fb      	ldr	r3, [r7, #28]
 80181aa:	089b      	lsrs	r3, r3, #2
 80181ac:	f003 0301 	and.w	r3, r3, #1
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	f000 809a 	beq.w	80182ea <HAL_I2C_EV_IRQHandler+0x2d6>
 80181b6:	697b      	ldr	r3, [r7, #20]
 80181b8:	0a5b      	lsrs	r3, r3, #9
 80181ba:	f003 0301 	and.w	r3, r3, #1
 80181be:	2b00      	cmp	r3, #0
 80181c0:	f000 8093 	beq.w	80182ea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80181c4:	6878      	ldr	r0, [r7, #4]
 80181c6:	f000 fc06 	bl	80189d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80181ca:	e08e      	b.n	80182ea <HAL_I2C_EV_IRQHandler+0x2d6>
 80181cc:	e08d      	b.n	80182ea <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d004      	beq.n	80181e0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	695b      	ldr	r3, [r3, #20]
 80181dc:	61fb      	str	r3, [r7, #28]
 80181de:	e007      	b.n	80181f0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	699b      	ldr	r3, [r3, #24]
 80181e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	695b      	ldr	r3, [r3, #20]
 80181ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80181f0:	69fb      	ldr	r3, [r7, #28]
 80181f2:	085b      	lsrs	r3, r3, #1
 80181f4:	f003 0301 	and.w	r3, r3, #1
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d012      	beq.n	8018222 <HAL_I2C_EV_IRQHandler+0x20e>
 80181fc:	697b      	ldr	r3, [r7, #20]
 80181fe:	0a5b      	lsrs	r3, r3, #9
 8018200:	f003 0301 	and.w	r3, r3, #1
 8018204:	2b00      	cmp	r3, #0
 8018206:	d00c      	beq.n	8018222 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801820c:	2b00      	cmp	r3, #0
 801820e:	d003      	beq.n	8018218 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	699b      	ldr	r3, [r3, #24]
 8018216:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8018218:	69b9      	ldr	r1, [r7, #24]
 801821a:	6878      	ldr	r0, [r7, #4]
 801821c:	f000 ffc4 	bl	80191a8 <I2C_Slave_ADDR>
 8018220:	e066      	b.n	80182f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018222:	69fb      	ldr	r3, [r7, #28]
 8018224:	091b      	lsrs	r3, r3, #4
 8018226:	f003 0301 	and.w	r3, r3, #1
 801822a:	2b00      	cmp	r3, #0
 801822c:	d009      	beq.n	8018242 <HAL_I2C_EV_IRQHandler+0x22e>
 801822e:	697b      	ldr	r3, [r7, #20]
 8018230:	0a5b      	lsrs	r3, r3, #9
 8018232:	f003 0301 	and.w	r3, r3, #1
 8018236:	2b00      	cmp	r3, #0
 8018238:	d003      	beq.n	8018242 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 801823a:	6878      	ldr	r0, [r7, #4]
 801823c:	f000 fffe 	bl	801923c <I2C_Slave_STOPF>
 8018240:	e056      	b.n	80182f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8018242:	7bbb      	ldrb	r3, [r7, #14]
 8018244:	2b21      	cmp	r3, #33	; 0x21
 8018246:	d002      	beq.n	801824e <HAL_I2C_EV_IRQHandler+0x23a>
 8018248:	7bbb      	ldrb	r3, [r7, #14]
 801824a:	2b29      	cmp	r3, #41	; 0x29
 801824c:	d125      	bne.n	801829a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801824e:	69fb      	ldr	r3, [r7, #28]
 8018250:	09db      	lsrs	r3, r3, #7
 8018252:	f003 0301 	and.w	r3, r3, #1
 8018256:	2b00      	cmp	r3, #0
 8018258:	d00f      	beq.n	801827a <HAL_I2C_EV_IRQHandler+0x266>
 801825a:	697b      	ldr	r3, [r7, #20]
 801825c:	0a9b      	lsrs	r3, r3, #10
 801825e:	f003 0301 	and.w	r3, r3, #1
 8018262:	2b00      	cmp	r3, #0
 8018264:	d009      	beq.n	801827a <HAL_I2C_EV_IRQHandler+0x266>
 8018266:	69fb      	ldr	r3, [r7, #28]
 8018268:	089b      	lsrs	r3, r3, #2
 801826a:	f003 0301 	and.w	r3, r3, #1
 801826e:	2b00      	cmp	r3, #0
 8018270:	d103      	bne.n	801827a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8018272:	6878      	ldr	r0, [r7, #4]
 8018274:	f000 feda 	bl	801902c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018278:	e039      	b.n	80182ee <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801827a:	69fb      	ldr	r3, [r7, #28]
 801827c:	089b      	lsrs	r3, r3, #2
 801827e:	f003 0301 	and.w	r3, r3, #1
 8018282:	2b00      	cmp	r3, #0
 8018284:	d033      	beq.n	80182ee <HAL_I2C_EV_IRQHandler+0x2da>
 8018286:	697b      	ldr	r3, [r7, #20]
 8018288:	0a5b      	lsrs	r3, r3, #9
 801828a:	f003 0301 	and.w	r3, r3, #1
 801828e:	2b00      	cmp	r3, #0
 8018290:	d02d      	beq.n	80182ee <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8018292:	6878      	ldr	r0, [r7, #4]
 8018294:	f000 ff07 	bl	80190a6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018298:	e029      	b.n	80182ee <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801829a:	69fb      	ldr	r3, [r7, #28]
 801829c:	099b      	lsrs	r3, r3, #6
 801829e:	f003 0301 	and.w	r3, r3, #1
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d00f      	beq.n	80182c6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80182a6:	697b      	ldr	r3, [r7, #20]
 80182a8:	0a9b      	lsrs	r3, r3, #10
 80182aa:	f003 0301 	and.w	r3, r3, #1
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d009      	beq.n	80182c6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80182b2:	69fb      	ldr	r3, [r7, #28]
 80182b4:	089b      	lsrs	r3, r3, #2
 80182b6:	f003 0301 	and.w	r3, r3, #1
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d103      	bne.n	80182c6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80182be:	6878      	ldr	r0, [r7, #4]
 80182c0:	f000 ff12 	bl	80190e8 <I2C_SlaveReceive_RXNE>
 80182c4:	e014      	b.n	80182f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80182c6:	69fb      	ldr	r3, [r7, #28]
 80182c8:	089b      	lsrs	r3, r3, #2
 80182ca:	f003 0301 	and.w	r3, r3, #1
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d00e      	beq.n	80182f0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80182d2:	697b      	ldr	r3, [r7, #20]
 80182d4:	0a5b      	lsrs	r3, r3, #9
 80182d6:	f003 0301 	and.w	r3, r3, #1
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d008      	beq.n	80182f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80182de:	6878      	ldr	r0, [r7, #4]
 80182e0:	f000 ff40 	bl	8019164 <I2C_SlaveReceive_BTF>
 80182e4:	e004      	b.n	80182f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80182e6:	bf00      	nop
 80182e8:	e002      	b.n	80182f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80182ea:	bf00      	nop
 80182ec:	e000      	b.n	80182f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80182ee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80182f0:	3720      	adds	r7, #32
 80182f2:	46bd      	mov	sp, r7
 80182f4:	bd80      	pop	{r7, pc}

080182f6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80182f6:	b580      	push	{r7, lr}
 80182f8:	b08a      	sub	sp, #40	; 0x28
 80182fa:	af00      	add	r7, sp, #0
 80182fc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	695b      	ldr	r3, [r3, #20]
 8018304:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	685b      	ldr	r3, [r3, #4]
 801830c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801830e:	2300      	movs	r3, #0
 8018310:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018318:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801831a:	6a3b      	ldr	r3, [r7, #32]
 801831c:	0a1b      	lsrs	r3, r3, #8
 801831e:	f003 0301 	and.w	r3, r3, #1
 8018322:	2b00      	cmp	r3, #0
 8018324:	d00e      	beq.n	8018344 <HAL_I2C_ER_IRQHandler+0x4e>
 8018326:	69fb      	ldr	r3, [r7, #28]
 8018328:	0a1b      	lsrs	r3, r3, #8
 801832a:	f003 0301 	and.w	r3, r3, #1
 801832e:	2b00      	cmp	r3, #0
 8018330:	d008      	beq.n	8018344 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8018332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018334:	f043 0301 	orr.w	r3, r3, #1
 8018338:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8018342:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8018344:	6a3b      	ldr	r3, [r7, #32]
 8018346:	0a5b      	lsrs	r3, r3, #9
 8018348:	f003 0301 	and.w	r3, r3, #1
 801834c:	2b00      	cmp	r3, #0
 801834e:	d00e      	beq.n	801836e <HAL_I2C_ER_IRQHandler+0x78>
 8018350:	69fb      	ldr	r3, [r7, #28]
 8018352:	0a1b      	lsrs	r3, r3, #8
 8018354:	f003 0301 	and.w	r3, r3, #1
 8018358:	2b00      	cmp	r3, #0
 801835a:	d008      	beq.n	801836e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 801835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801835e:	f043 0302 	orr.w	r3, r3, #2
 8018362:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	f46f 7200 	mvn.w	r2, #512	; 0x200
 801836c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801836e:	6a3b      	ldr	r3, [r7, #32]
 8018370:	0a9b      	lsrs	r3, r3, #10
 8018372:	f003 0301 	and.w	r3, r3, #1
 8018376:	2b00      	cmp	r3, #0
 8018378:	d03f      	beq.n	80183fa <HAL_I2C_ER_IRQHandler+0x104>
 801837a:	69fb      	ldr	r3, [r7, #28]
 801837c:	0a1b      	lsrs	r3, r3, #8
 801837e:	f003 0301 	and.w	r3, r3, #1
 8018382:	2b00      	cmp	r3, #0
 8018384:	d039      	beq.n	80183fa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8018386:	7efb      	ldrb	r3, [r7, #27]
 8018388:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801838e:	b29b      	uxth	r3, r3
 8018390:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018398:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801839e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80183a0:	7ebb      	ldrb	r3, [r7, #26]
 80183a2:	2b20      	cmp	r3, #32
 80183a4:	d112      	bne.n	80183cc <HAL_I2C_ER_IRQHandler+0xd6>
 80183a6:	697b      	ldr	r3, [r7, #20]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d10f      	bne.n	80183cc <HAL_I2C_ER_IRQHandler+0xd6>
 80183ac:	7cfb      	ldrb	r3, [r7, #19]
 80183ae:	2b21      	cmp	r3, #33	; 0x21
 80183b0:	d008      	beq.n	80183c4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80183b2:	7cfb      	ldrb	r3, [r7, #19]
 80183b4:	2b29      	cmp	r3, #41	; 0x29
 80183b6:	d005      	beq.n	80183c4 <HAL_I2C_ER_IRQHandler+0xce>
 80183b8:	7cfb      	ldrb	r3, [r7, #19]
 80183ba:	2b28      	cmp	r3, #40	; 0x28
 80183bc:	d106      	bne.n	80183cc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	2b21      	cmp	r3, #33	; 0x21
 80183c2:	d103      	bne.n	80183cc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80183c4:	6878      	ldr	r0, [r7, #4]
 80183c6:	f001 f869 	bl	801949c <I2C_Slave_AF>
 80183ca:	e016      	b.n	80183fa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80183d4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80183d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183d8:	f043 0304 	orr.w	r3, r3, #4
 80183dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80183de:	7efb      	ldrb	r3, [r7, #27]
 80183e0:	2b10      	cmp	r3, #16
 80183e2:	d002      	beq.n	80183ea <HAL_I2C_ER_IRQHandler+0xf4>
 80183e4:	7efb      	ldrb	r3, [r7, #27]
 80183e6:	2b40      	cmp	r3, #64	; 0x40
 80183e8:	d107      	bne.n	80183fa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	681a      	ldr	r2, [r3, #0]
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80183f8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80183fa:	6a3b      	ldr	r3, [r7, #32]
 80183fc:	0adb      	lsrs	r3, r3, #11
 80183fe:	f003 0301 	and.w	r3, r3, #1
 8018402:	2b00      	cmp	r3, #0
 8018404:	d00e      	beq.n	8018424 <HAL_I2C_ER_IRQHandler+0x12e>
 8018406:	69fb      	ldr	r3, [r7, #28]
 8018408:	0a1b      	lsrs	r3, r3, #8
 801840a:	f003 0301 	and.w	r3, r3, #1
 801840e:	2b00      	cmp	r3, #0
 8018410:	d008      	beq.n	8018424 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8018412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018414:	f043 0308 	orr.w	r3, r3, #8
 8018418:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8018422:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8018424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018426:	2b00      	cmp	r3, #0
 8018428:	d008      	beq.n	801843c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018430:	431a      	orrs	r2, r3
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8018436:	6878      	ldr	r0, [r7, #4]
 8018438:	f001 f8a0 	bl	801957c <I2C_ITError>
  }
}
 801843c:	bf00      	nop
 801843e:	3728      	adds	r7, #40	; 0x28
 8018440:	46bd      	mov	sp, r7
 8018442:	bd80      	pop	{r7, pc}

08018444 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018444:	b480      	push	{r7}
 8018446:	b083      	sub	sp, #12
 8018448:	af00      	add	r7, sp, #0
 801844a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801844c:	bf00      	nop
 801844e:	370c      	adds	r7, #12
 8018450:	46bd      	mov	sp, r7
 8018452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018456:	4770      	bx	lr

08018458 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018458:	b480      	push	{r7}
 801845a:	b083      	sub	sp, #12
 801845c:	af00      	add	r7, sp, #0
 801845e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8018460:	bf00      	nop
 8018462:	370c      	adds	r7, #12
 8018464:	46bd      	mov	sp, r7
 8018466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801846a:	4770      	bx	lr

0801846c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801846c:	b480      	push	{r7}
 801846e:	b083      	sub	sp, #12
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8018474:	bf00      	nop
 8018476:	370c      	adds	r7, #12
 8018478:	46bd      	mov	sp, r7
 801847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847e:	4770      	bx	lr

08018480 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018480:	b480      	push	{r7}
 8018482:	b083      	sub	sp, #12
 8018484:	af00      	add	r7, sp, #0
 8018486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8018488:	bf00      	nop
 801848a:	370c      	adds	r7, #12
 801848c:	46bd      	mov	sp, r7
 801848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018492:	4770      	bx	lr

08018494 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8018494:	b480      	push	{r7}
 8018496:	b083      	sub	sp, #12
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]
 801849c:	460b      	mov	r3, r1
 801849e:	70fb      	strb	r3, [r7, #3]
 80184a0:	4613      	mov	r3, r2
 80184a2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80184a4:	bf00      	nop
 80184a6:	370c      	adds	r7, #12
 80184a8:	46bd      	mov	sp, r7
 80184aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ae:	4770      	bx	lr

080184b0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80184b0:	b480      	push	{r7}
 80184b2:	b083      	sub	sp, #12
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80184b8:	bf00      	nop
 80184ba:	370c      	adds	r7, #12
 80184bc:	46bd      	mov	sp, r7
 80184be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c2:	4770      	bx	lr

080184c4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80184c4:	b480      	push	{r7}
 80184c6:	b083      	sub	sp, #12
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80184cc:	bf00      	nop
 80184ce:	370c      	adds	r7, #12
 80184d0:	46bd      	mov	sp, r7
 80184d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184d6:	4770      	bx	lr

080184d8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80184d8:	b480      	push	{r7}
 80184da:	b083      	sub	sp, #12
 80184dc:	af00      	add	r7, sp, #0
 80184de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80184e0:	bf00      	nop
 80184e2:	370c      	adds	r7, #12
 80184e4:	46bd      	mov	sp, r7
 80184e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ea:	4770      	bx	lr

080184ec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80184ec:	b480      	push	{r7}
 80184ee:	b083      	sub	sp, #12
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80184f4:	bf00      	nop
 80184f6:	370c      	adds	r7, #12
 80184f8:	46bd      	mov	sp, r7
 80184fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184fe:	4770      	bx	lr

08018500 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018500:	b480      	push	{r7}
 8018502:	b083      	sub	sp, #12
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8018508:	bf00      	nop
 801850a:	370c      	adds	r7, #12
 801850c:	46bd      	mov	sp, r7
 801850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018512:	4770      	bx	lr

08018514 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b084      	sub	sp, #16
 8018518:	af00      	add	r7, sp, #0
 801851a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018522:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801852a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018530:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018536:	2b00      	cmp	r3, #0
 8018538:	d150      	bne.n	80185dc <I2C_MasterTransmit_TXE+0xc8>
 801853a:	7bfb      	ldrb	r3, [r7, #15]
 801853c:	2b21      	cmp	r3, #33	; 0x21
 801853e:	d14d      	bne.n	80185dc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018540:	68bb      	ldr	r3, [r7, #8]
 8018542:	2b08      	cmp	r3, #8
 8018544:	d01d      	beq.n	8018582 <I2C_MasterTransmit_TXE+0x6e>
 8018546:	68bb      	ldr	r3, [r7, #8]
 8018548:	2b20      	cmp	r3, #32
 801854a:	d01a      	beq.n	8018582 <I2C_MasterTransmit_TXE+0x6e>
 801854c:	68bb      	ldr	r3, [r7, #8]
 801854e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018552:	d016      	beq.n	8018582 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	685a      	ldr	r2, [r3, #4]
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018562:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	2211      	movs	r2, #17
 8018568:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	2200      	movs	r2, #0
 801856e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	2220      	movs	r2, #32
 8018576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801857a:	6878      	ldr	r0, [r7, #4]
 801857c:	f7ff ff62 	bl	8018444 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018580:	e060      	b.n	8018644 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	685a      	ldr	r2, [r3, #4]
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018590:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	681a      	ldr	r2, [r3, #0]
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80185a0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	2200      	movs	r2, #0
 80185a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	2220      	movs	r2, #32
 80185ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80185b6:	b2db      	uxtb	r3, r3
 80185b8:	2b40      	cmp	r3, #64	; 0x40
 80185ba:	d107      	bne.n	80185cc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	2200      	movs	r2, #0
 80185c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80185c4:	6878      	ldr	r0, [r7, #4]
 80185c6:	f7ff ff7d 	bl	80184c4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80185ca:	e03b      	b.n	8018644 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	2200      	movs	r2, #0
 80185d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80185d4:	6878      	ldr	r0, [r7, #4]
 80185d6:	f7ff ff35 	bl	8018444 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80185da:	e033      	b.n	8018644 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80185dc:	7bfb      	ldrb	r3, [r7, #15]
 80185de:	2b21      	cmp	r3, #33	; 0x21
 80185e0:	d005      	beq.n	80185ee <I2C_MasterTransmit_TXE+0xda>
 80185e2:	7bbb      	ldrb	r3, [r7, #14]
 80185e4:	2b40      	cmp	r3, #64	; 0x40
 80185e6:	d12d      	bne.n	8018644 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80185e8:	7bfb      	ldrb	r3, [r7, #15]
 80185ea:	2b22      	cmp	r3, #34	; 0x22
 80185ec:	d12a      	bne.n	8018644 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80185f2:	b29b      	uxth	r3, r3
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d108      	bne.n	801860a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	685a      	ldr	r2, [r3, #4]
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018606:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8018608:	e01c      	b.n	8018644 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018610:	b2db      	uxtb	r3, r3
 8018612:	2b40      	cmp	r3, #64	; 0x40
 8018614:	d103      	bne.n	801861e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8018616:	6878      	ldr	r0, [r7, #4]
 8018618:	f000 f88e 	bl	8018738 <I2C_MemoryTransmit_TXE_BTF>
}
 801861c:	e012      	b.n	8018644 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018622:	781a      	ldrb	r2, [r3, #0]
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801862e:	1c5a      	adds	r2, r3, #1
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018638:	b29b      	uxth	r3, r3
 801863a:	3b01      	subs	r3, #1
 801863c:	b29a      	uxth	r2, r3
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018642:	e7ff      	b.n	8018644 <I2C_MasterTransmit_TXE+0x130>
 8018644:	bf00      	nop
 8018646:	3710      	adds	r7, #16
 8018648:	46bd      	mov	sp, r7
 801864a:	bd80      	pop	{r7, pc}

0801864c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b084      	sub	sp, #16
 8018650:	af00      	add	r7, sp, #0
 8018652:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018658:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018660:	b2db      	uxtb	r3, r3
 8018662:	2b21      	cmp	r3, #33	; 0x21
 8018664:	d164      	bne.n	8018730 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801866a:	b29b      	uxth	r3, r3
 801866c:	2b00      	cmp	r3, #0
 801866e:	d012      	beq.n	8018696 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018674:	781a      	ldrb	r2, [r3, #0]
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018680:	1c5a      	adds	r2, r3, #1
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801868a:	b29b      	uxth	r3, r3
 801868c:	3b01      	subs	r3, #1
 801868e:	b29a      	uxth	r2, r3
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8018694:	e04c      	b.n	8018730 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	2b08      	cmp	r3, #8
 801869a:	d01d      	beq.n	80186d8 <I2C_MasterTransmit_BTF+0x8c>
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	2b20      	cmp	r3, #32
 80186a0:	d01a      	beq.n	80186d8 <I2C_MasterTransmit_BTF+0x8c>
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80186a8:	d016      	beq.n	80186d8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	685a      	ldr	r2, [r3, #4]
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80186b8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	2211      	movs	r2, #17
 80186be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	2200      	movs	r2, #0
 80186c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	2220      	movs	r2, #32
 80186cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80186d0:	6878      	ldr	r0, [r7, #4]
 80186d2:	f7ff feb7 	bl	8018444 <HAL_I2C_MasterTxCpltCallback>
}
 80186d6:	e02b      	b.n	8018730 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	685a      	ldr	r2, [r3, #4]
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80186e6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	681a      	ldr	r2, [r3, #0]
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80186f6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	2200      	movs	r2, #0
 80186fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	2220      	movs	r2, #32
 8018702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801870c:	b2db      	uxtb	r3, r3
 801870e:	2b40      	cmp	r3, #64	; 0x40
 8018710:	d107      	bne.n	8018722 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	2200      	movs	r2, #0
 8018716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801871a:	6878      	ldr	r0, [r7, #4]
 801871c:	f7ff fed2 	bl	80184c4 <HAL_I2C_MemTxCpltCallback>
}
 8018720:	e006      	b.n	8018730 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	2200      	movs	r2, #0
 8018726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801872a:	6878      	ldr	r0, [r7, #4]
 801872c:	f7ff fe8a 	bl	8018444 <HAL_I2C_MasterTxCpltCallback>
}
 8018730:	bf00      	nop
 8018732:	3710      	adds	r7, #16
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}

08018738 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b084      	sub	sp, #16
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018746:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801874c:	2b00      	cmp	r3, #0
 801874e:	d11d      	bne.n	801878c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018754:	2b01      	cmp	r3, #1
 8018756:	d10b      	bne.n	8018770 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801875c:	b2da      	uxtb	r2, r3
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018768:	1c9a      	adds	r2, r3, #2
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801876e:	e073      	b.n	8018858 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018774:	b29b      	uxth	r3, r3
 8018776:	121b      	asrs	r3, r3, #8
 8018778:	b2da      	uxtb	r2, r3
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018784:	1c5a      	adds	r2, r3, #1
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	651a      	str	r2, [r3, #80]	; 0x50
}
 801878a:	e065      	b.n	8018858 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018790:	2b01      	cmp	r3, #1
 8018792:	d10b      	bne.n	80187ac <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018798:	b2da      	uxtb	r2, r3
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80187a4:	1c5a      	adds	r2, r3, #1
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80187aa:	e055      	b.n	8018858 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80187b0:	2b02      	cmp	r3, #2
 80187b2:	d151      	bne.n	8018858 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80187b4:	7bfb      	ldrb	r3, [r7, #15]
 80187b6:	2b22      	cmp	r3, #34	; 0x22
 80187b8:	d10d      	bne.n	80187d6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	681a      	ldr	r2, [r3, #0]
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80187c8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80187ce:	1c5a      	adds	r2, r3, #1
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80187d4:	e040      	b.n	8018858 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187da:	b29b      	uxth	r3, r3
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d015      	beq.n	801880c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80187e0:	7bfb      	ldrb	r3, [r7, #15]
 80187e2:	2b21      	cmp	r3, #33	; 0x21
 80187e4:	d112      	bne.n	801880c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187ea:	781a      	ldrb	r2, [r3, #0]
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187f6:	1c5a      	adds	r2, r3, #1
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018800:	b29b      	uxth	r3, r3
 8018802:	3b01      	subs	r3, #1
 8018804:	b29a      	uxth	r2, r3
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801880a:	e025      	b.n	8018858 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018810:	b29b      	uxth	r3, r3
 8018812:	2b00      	cmp	r3, #0
 8018814:	d120      	bne.n	8018858 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8018816:	7bfb      	ldrb	r3, [r7, #15]
 8018818:	2b21      	cmp	r3, #33	; 0x21
 801881a:	d11d      	bne.n	8018858 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	685a      	ldr	r2, [r3, #4]
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801882a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	681a      	ldr	r2, [r3, #0]
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801883a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	2200      	movs	r2, #0
 8018840:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	2220      	movs	r2, #32
 8018846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	2200      	movs	r2, #0
 801884e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8018852:	6878      	ldr	r0, [r7, #4]
 8018854:	f7ff fe36 	bl	80184c4 <HAL_I2C_MemTxCpltCallback>
}
 8018858:	bf00      	nop
 801885a:	3710      	adds	r7, #16
 801885c:	46bd      	mov	sp, r7
 801885e:	bd80      	pop	{r7, pc}

08018860 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018860:	b580      	push	{r7, lr}
 8018862:	b084      	sub	sp, #16
 8018864:	af00      	add	r7, sp, #0
 8018866:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801886e:	b2db      	uxtb	r3, r3
 8018870:	2b22      	cmp	r3, #34	; 0x22
 8018872:	f040 80ac 	bne.w	80189ce <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801887a:	b29b      	uxth	r3, r3
 801887c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	2b03      	cmp	r3, #3
 8018882:	d921      	bls.n	80188c8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	691a      	ldr	r2, [r3, #16]
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801888e:	b2d2      	uxtb	r2, r2
 8018890:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018896:	1c5a      	adds	r2, r3, #1
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80188a0:	b29b      	uxth	r3, r3
 80188a2:	3b01      	subs	r3, #1
 80188a4:	b29a      	uxth	r2, r3
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80188ae:	b29b      	uxth	r3, r3
 80188b0:	2b03      	cmp	r3, #3
 80188b2:	f040 808c 	bne.w	80189ce <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	685a      	ldr	r2, [r3, #4]
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80188c4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80188c6:	e082      	b.n	80189ce <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188cc:	2b02      	cmp	r3, #2
 80188ce:	d075      	beq.n	80189bc <I2C_MasterReceive_RXNE+0x15c>
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	2b01      	cmp	r3, #1
 80188d4:	d002      	beq.n	80188dc <I2C_MasterReceive_RXNE+0x7c>
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d16f      	bne.n	80189bc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80188dc:	6878      	ldr	r0, [r7, #4]
 80188de:	f001 fafd 	bl	8019edc <I2C_WaitOnSTOPRequestThroughIT>
 80188e2:	4603      	mov	r3, r0
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d142      	bne.n	801896e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	681a      	ldr	r2, [r3, #0]
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80188f6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	685a      	ldr	r2, [r3, #4]
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018906:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	691a      	ldr	r2, [r3, #16]
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018912:	b2d2      	uxtb	r2, r2
 8018914:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801891a:	1c5a      	adds	r2, r3, #1
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018924:	b29b      	uxth	r3, r3
 8018926:	3b01      	subs	r3, #1
 8018928:	b29a      	uxth	r2, r3
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	2220      	movs	r2, #32
 8018932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801893c:	b2db      	uxtb	r3, r3
 801893e:	2b40      	cmp	r3, #64	; 0x40
 8018940:	d10a      	bne.n	8018958 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	2200      	movs	r2, #0
 8018946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	2200      	movs	r2, #0
 801894e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8018950:	6878      	ldr	r0, [r7, #4]
 8018952:	f7ff fdc1 	bl	80184d8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018956:	e03a      	b.n	80189ce <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	2200      	movs	r2, #0
 801895c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	2212      	movs	r2, #18
 8018964:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8018966:	6878      	ldr	r0, [r7, #4]
 8018968:	f7ff fd76 	bl	8018458 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801896c:	e02f      	b.n	80189ce <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	685a      	ldr	r2, [r3, #4]
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801897c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	691a      	ldr	r2, [r3, #16]
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018988:	b2d2      	uxtb	r2, r2
 801898a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018990:	1c5a      	adds	r2, r3, #1
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801899a:	b29b      	uxth	r3, r3
 801899c:	3b01      	subs	r3, #1
 801899e:	b29a      	uxth	r2, r3
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	2220      	movs	r2, #32
 80189a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	2200      	movs	r2, #0
 80189b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80189b4:	6878      	ldr	r0, [r7, #4]
 80189b6:	f7ff fd99 	bl	80184ec <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80189ba:	e008      	b.n	80189ce <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	685a      	ldr	r2, [r3, #4]
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80189ca:	605a      	str	r2, [r3, #4]
}
 80189cc:	e7ff      	b.n	80189ce <I2C_MasterReceive_RXNE+0x16e>
 80189ce:	bf00      	nop
 80189d0:	3710      	adds	r7, #16
 80189d2:	46bd      	mov	sp, r7
 80189d4:	bd80      	pop	{r7, pc}

080189d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80189d6:	b580      	push	{r7, lr}
 80189d8:	b084      	sub	sp, #16
 80189da:	af00      	add	r7, sp, #0
 80189dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189e8:	b29b      	uxth	r3, r3
 80189ea:	2b04      	cmp	r3, #4
 80189ec:	d11b      	bne.n	8018a26 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	685a      	ldr	r2, [r3, #4]
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80189fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	691a      	ldr	r2, [r3, #16]
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a08:	b2d2      	uxtb	r2, r2
 8018a0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a10:	1c5a      	adds	r2, r3, #1
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a1a:	b29b      	uxth	r3, r3
 8018a1c:	3b01      	subs	r3, #1
 8018a1e:	b29a      	uxth	r2, r3
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8018a24:	e0bd      	b.n	8018ba2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a2a:	b29b      	uxth	r3, r3
 8018a2c:	2b03      	cmp	r3, #3
 8018a2e:	d129      	bne.n	8018a84 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	685a      	ldr	r2, [r3, #4]
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018a3e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	2b04      	cmp	r3, #4
 8018a44:	d00a      	beq.n	8018a5c <I2C_MasterReceive_BTF+0x86>
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	2b02      	cmp	r3, #2
 8018a4a:	d007      	beq.n	8018a5c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	681a      	ldr	r2, [r3, #0]
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018a5a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	691a      	ldr	r2, [r3, #16]
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a66:	b2d2      	uxtb	r2, r2
 8018a68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a6e:	1c5a      	adds	r2, r3, #1
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a78:	b29b      	uxth	r3, r3
 8018a7a:	3b01      	subs	r3, #1
 8018a7c:	b29a      	uxth	r2, r3
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018a82:	e08e      	b.n	8018ba2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a88:	b29b      	uxth	r3, r3
 8018a8a:	2b02      	cmp	r3, #2
 8018a8c:	d176      	bne.n	8018b7c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	2b01      	cmp	r3, #1
 8018a92:	d002      	beq.n	8018a9a <I2C_MasterReceive_BTF+0xc4>
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	2b10      	cmp	r3, #16
 8018a98:	d108      	bne.n	8018aac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	681a      	ldr	r2, [r3, #0]
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018aa8:	601a      	str	r2, [r3, #0]
 8018aaa:	e019      	b.n	8018ae0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	2b04      	cmp	r3, #4
 8018ab0:	d002      	beq.n	8018ab8 <I2C_MasterReceive_BTF+0xe2>
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	2b02      	cmp	r3, #2
 8018ab6:	d108      	bne.n	8018aca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	681a      	ldr	r2, [r3, #0]
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018ac6:	601a      	str	r2, [r3, #0]
 8018ac8:	e00a      	b.n	8018ae0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	2b10      	cmp	r3, #16
 8018ace:	d007      	beq.n	8018ae0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	681a      	ldr	r2, [r3, #0]
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018ade:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	691a      	ldr	r2, [r3, #16]
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018aea:	b2d2      	uxtb	r2, r2
 8018aec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018af2:	1c5a      	adds	r2, r3, #1
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018afc:	b29b      	uxth	r3, r3
 8018afe:	3b01      	subs	r3, #1
 8018b00:	b29a      	uxth	r2, r3
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	691a      	ldr	r2, [r3, #16]
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b10:	b2d2      	uxtb	r2, r2
 8018b12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b18:	1c5a      	adds	r2, r3, #1
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b22:	b29b      	uxth	r3, r3
 8018b24:	3b01      	subs	r3, #1
 8018b26:	b29a      	uxth	r2, r3
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	685a      	ldr	r2, [r3, #4]
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8018b3a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	2220      	movs	r2, #32
 8018b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018b4a:	b2db      	uxtb	r3, r3
 8018b4c:	2b40      	cmp	r3, #64	; 0x40
 8018b4e:	d10a      	bne.n	8018b66 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	2200      	movs	r2, #0
 8018b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8018b5e:	6878      	ldr	r0, [r7, #4]
 8018b60:	f7ff fcba 	bl	80184d8 <HAL_I2C_MemRxCpltCallback>
}
 8018b64:	e01d      	b.n	8018ba2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	2200      	movs	r2, #0
 8018b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	2212      	movs	r2, #18
 8018b72:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8018b74:	6878      	ldr	r0, [r7, #4]
 8018b76:	f7ff fc6f 	bl	8018458 <HAL_I2C_MasterRxCpltCallback>
}
 8018b7a:	e012      	b.n	8018ba2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	691a      	ldr	r2, [r3, #16]
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b86:	b2d2      	uxtb	r2, r2
 8018b88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b8e:	1c5a      	adds	r2, r3, #1
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b98:	b29b      	uxth	r3, r3
 8018b9a:	3b01      	subs	r3, #1
 8018b9c:	b29a      	uxth	r2, r3
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018ba2:	bf00      	nop
 8018ba4:	3710      	adds	r7, #16
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}

08018baa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8018baa:	b480      	push	{r7}
 8018bac:	b083      	sub	sp, #12
 8018bae:	af00      	add	r7, sp, #0
 8018bb0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018bb8:	b2db      	uxtb	r3, r3
 8018bba:	2b40      	cmp	r3, #64	; 0x40
 8018bbc:	d117      	bne.n	8018bee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d109      	bne.n	8018bda <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bca:	b2db      	uxtb	r3, r3
 8018bcc:	461a      	mov	r2, r3
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018bd6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8018bd8:	e067      	b.n	8018caa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bde:	b2db      	uxtb	r3, r3
 8018be0:	f043 0301 	orr.w	r3, r3, #1
 8018be4:	b2da      	uxtb	r2, r3
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	611a      	str	r2, [r3, #16]
}
 8018bec:	e05d      	b.n	8018caa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	691b      	ldr	r3, [r3, #16]
 8018bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018bf6:	d133      	bne.n	8018c60 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018bfe:	b2db      	uxtb	r3, r3
 8018c00:	2b21      	cmp	r3, #33	; 0x21
 8018c02:	d109      	bne.n	8018c18 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c08:	b2db      	uxtb	r3, r3
 8018c0a:	461a      	mov	r2, r3
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018c14:	611a      	str	r2, [r3, #16]
 8018c16:	e008      	b.n	8018c2a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c1c:	b2db      	uxtb	r3, r3
 8018c1e:	f043 0301 	orr.w	r3, r3, #1
 8018c22:	b2da      	uxtb	r2, r3
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d004      	beq.n	8018c3c <I2C_Master_SB+0x92>
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d108      	bne.n	8018c4e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d032      	beq.n	8018caa <I2C_Master_SB+0x100>
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d02d      	beq.n	8018caa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	685a      	ldr	r2, [r3, #4]
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018c5c:	605a      	str	r2, [r3, #4]
}
 8018c5e:	e024      	b.n	8018caa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d10e      	bne.n	8018c86 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c6c:	b29b      	uxth	r3, r3
 8018c6e:	11db      	asrs	r3, r3, #7
 8018c70:	b2db      	uxtb	r3, r3
 8018c72:	f003 0306 	and.w	r3, r3, #6
 8018c76:	b2db      	uxtb	r3, r3
 8018c78:	f063 030f 	orn	r3, r3, #15
 8018c7c:	b2da      	uxtb	r2, r3
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	611a      	str	r2, [r3, #16]
}
 8018c84:	e011      	b.n	8018caa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c8a:	2b01      	cmp	r3, #1
 8018c8c:	d10d      	bne.n	8018caa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c92:	b29b      	uxth	r3, r3
 8018c94:	11db      	asrs	r3, r3, #7
 8018c96:	b2db      	uxtb	r3, r3
 8018c98:	f003 0306 	and.w	r3, r3, #6
 8018c9c:	b2db      	uxtb	r3, r3
 8018c9e:	f063 030e 	orn	r3, r3, #14
 8018ca2:	b2da      	uxtb	r2, r3
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	611a      	str	r2, [r3, #16]
}
 8018caa:	bf00      	nop
 8018cac:	370c      	adds	r7, #12
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb4:	4770      	bx	lr

08018cb6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8018cb6:	b480      	push	{r7}
 8018cb8:	b083      	sub	sp, #12
 8018cba:	af00      	add	r7, sp, #0
 8018cbc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018cc2:	b2da      	uxtb	r2, r3
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d004      	beq.n	8018cdc <I2C_Master_ADD10+0x26>
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d108      	bne.n	8018cee <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d00c      	beq.n	8018cfe <I2C_Master_ADD10+0x48>
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d007      	beq.n	8018cfe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	685a      	ldr	r2, [r3, #4]
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018cfc:	605a      	str	r2, [r3, #4]
  }
}
 8018cfe:	bf00      	nop
 8018d00:	370c      	adds	r7, #12
 8018d02:	46bd      	mov	sp, r7
 8018d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d08:	4770      	bx	lr

08018d0a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8018d0a:	b480      	push	{r7}
 8018d0c:	b091      	sub	sp, #68	; 0x44
 8018d0e:	af00      	add	r7, sp, #0
 8018d10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018d18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d20:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d26:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018d2e:	b2db      	uxtb	r3, r3
 8018d30:	2b22      	cmp	r3, #34	; 0x22
 8018d32:	f040 8169 	bne.w	8019008 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d10f      	bne.n	8018d5e <I2C_Master_ADDR+0x54>
 8018d3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018d42:	2b40      	cmp	r3, #64	; 0x40
 8018d44:	d10b      	bne.n	8018d5e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018d46:	2300      	movs	r3, #0
 8018d48:	633b      	str	r3, [r7, #48]	; 0x30
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	695b      	ldr	r3, [r3, #20]
 8018d50:	633b      	str	r3, [r7, #48]	; 0x30
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	699b      	ldr	r3, [r3, #24]
 8018d58:	633b      	str	r3, [r7, #48]	; 0x30
 8018d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d5c:	e160      	b.n	8019020 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d11d      	bne.n	8018da2 <I2C_Master_ADDR+0x98>
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	691b      	ldr	r3, [r3, #16]
 8018d6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8018d6e:	d118      	bne.n	8018da2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018d70:	2300      	movs	r3, #0
 8018d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	695b      	ldr	r3, [r3, #20]
 8018d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	699b      	ldr	r3, [r3, #24]
 8018d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	681a      	ldr	r2, [r3, #0]
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	681b      	ldr	r3, [r3, #0]
 8018d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018d94:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d9a:	1c5a      	adds	r2, r3, #1
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	651a      	str	r2, [r3, #80]	; 0x50
 8018da0:	e13e      	b.n	8019020 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018da6:	b29b      	uxth	r3, r3
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d113      	bne.n	8018dd4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018dac:	2300      	movs	r3, #0
 8018dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	695b      	ldr	r3, [r3, #20]
 8018db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	699b      	ldr	r3, [r3, #24]
 8018dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8018dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	681a      	ldr	r2, [r3, #0]
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018dd0:	601a      	str	r2, [r3, #0]
 8018dd2:	e115      	b.n	8019000 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018dd8:	b29b      	uxth	r3, r3
 8018dda:	2b01      	cmp	r3, #1
 8018ddc:	f040 808a 	bne.w	8018ef4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8018de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018de2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018de6:	d137      	bne.n	8018e58 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	681a      	ldr	r2, [r3, #0]
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018df6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	685b      	ldr	r3, [r3, #4]
 8018dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018e06:	d113      	bne.n	8018e30 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	681a      	ldr	r2, [r3, #0]
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018e16:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018e18:	2300      	movs	r3, #0
 8018e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	695b      	ldr	r3, [r3, #20]
 8018e22:	627b      	str	r3, [r7, #36]	; 0x24
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	699b      	ldr	r3, [r3, #24]
 8018e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8018e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e2e:	e0e7      	b.n	8019000 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018e30:	2300      	movs	r3, #0
 8018e32:	623b      	str	r3, [r7, #32]
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	695b      	ldr	r3, [r3, #20]
 8018e3a:	623b      	str	r3, [r7, #32]
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	699b      	ldr	r3, [r3, #24]
 8018e42:	623b      	str	r3, [r7, #32]
 8018e44:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	681a      	ldr	r2, [r3, #0]
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018e54:	601a      	str	r2, [r3, #0]
 8018e56:	e0d3      	b.n	8019000 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8018e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e5a:	2b08      	cmp	r3, #8
 8018e5c:	d02e      	beq.n	8018ebc <I2C_Master_ADDR+0x1b2>
 8018e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e60:	2b20      	cmp	r3, #32
 8018e62:	d02b      	beq.n	8018ebc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8018e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e66:	2b12      	cmp	r3, #18
 8018e68:	d102      	bne.n	8018e70 <I2C_Master_ADDR+0x166>
 8018e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e6c:	2b01      	cmp	r3, #1
 8018e6e:	d125      	bne.n	8018ebc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8018e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e72:	2b04      	cmp	r3, #4
 8018e74:	d00e      	beq.n	8018e94 <I2C_Master_ADDR+0x18a>
 8018e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e78:	2b02      	cmp	r3, #2
 8018e7a:	d00b      	beq.n	8018e94 <I2C_Master_ADDR+0x18a>
 8018e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e7e:	2b10      	cmp	r3, #16
 8018e80:	d008      	beq.n	8018e94 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	681a      	ldr	r2, [r3, #0]
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018e90:	601a      	str	r2, [r3, #0]
 8018e92:	e007      	b.n	8018ea4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	681a      	ldr	r2, [r3, #0]
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018ea2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	61fb      	str	r3, [r7, #28]
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	695b      	ldr	r3, [r3, #20]
 8018eae:	61fb      	str	r3, [r7, #28]
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	699b      	ldr	r3, [r3, #24]
 8018eb6:	61fb      	str	r3, [r7, #28]
 8018eb8:	69fb      	ldr	r3, [r7, #28]
 8018eba:	e0a1      	b.n	8019000 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	681a      	ldr	r2, [r3, #0]
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018eca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018ecc:	2300      	movs	r3, #0
 8018ece:	61bb      	str	r3, [r7, #24]
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	695b      	ldr	r3, [r3, #20]
 8018ed6:	61bb      	str	r3, [r7, #24]
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	699b      	ldr	r3, [r3, #24]
 8018ede:	61bb      	str	r3, [r7, #24]
 8018ee0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	681a      	ldr	r2, [r3, #0]
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018ef0:	601a      	str	r2, [r3, #0]
 8018ef2:	e085      	b.n	8019000 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ef8:	b29b      	uxth	r3, r3
 8018efa:	2b02      	cmp	r3, #2
 8018efc:	d14d      	bne.n	8018f9a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8018efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f00:	2b04      	cmp	r3, #4
 8018f02:	d016      	beq.n	8018f32 <I2C_Master_ADDR+0x228>
 8018f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f06:	2b02      	cmp	r3, #2
 8018f08:	d013      	beq.n	8018f32 <I2C_Master_ADDR+0x228>
 8018f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f0c:	2b10      	cmp	r3, #16
 8018f0e:	d010      	beq.n	8018f32 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	681a      	ldr	r2, [r3, #0]
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018f1e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	681a      	ldr	r2, [r3, #0]
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018f2e:	601a      	str	r2, [r3, #0]
 8018f30:	e007      	b.n	8018f42 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	681a      	ldr	r2, [r3, #0]
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018f40:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	685b      	ldr	r3, [r3, #4]
 8018f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018f50:	d117      	bne.n	8018f82 <I2C_Master_ADDR+0x278>
 8018f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018f58:	d00b      	beq.n	8018f72 <I2C_Master_ADDR+0x268>
 8018f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f5c:	2b01      	cmp	r3, #1
 8018f5e:	d008      	beq.n	8018f72 <I2C_Master_ADDR+0x268>
 8018f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f62:	2b08      	cmp	r3, #8
 8018f64:	d005      	beq.n	8018f72 <I2C_Master_ADDR+0x268>
 8018f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f68:	2b10      	cmp	r3, #16
 8018f6a:	d002      	beq.n	8018f72 <I2C_Master_ADDR+0x268>
 8018f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f6e:	2b20      	cmp	r3, #32
 8018f70:	d107      	bne.n	8018f82 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	685a      	ldr	r2, [r3, #4]
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018f80:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018f82:	2300      	movs	r3, #0
 8018f84:	617b      	str	r3, [r7, #20]
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	695b      	ldr	r3, [r3, #20]
 8018f8c:	617b      	str	r3, [r7, #20]
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	699b      	ldr	r3, [r3, #24]
 8018f94:	617b      	str	r3, [r7, #20]
 8018f96:	697b      	ldr	r3, [r7, #20]
 8018f98:	e032      	b.n	8019000 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	681a      	ldr	r2, [r3, #0]
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018fa8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	685b      	ldr	r3, [r3, #4]
 8018fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018fb8:	d117      	bne.n	8018fea <I2C_Master_ADDR+0x2e0>
 8018fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018fc0:	d00b      	beq.n	8018fda <I2C_Master_ADDR+0x2d0>
 8018fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fc4:	2b01      	cmp	r3, #1
 8018fc6:	d008      	beq.n	8018fda <I2C_Master_ADDR+0x2d0>
 8018fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fca:	2b08      	cmp	r3, #8
 8018fcc:	d005      	beq.n	8018fda <I2C_Master_ADDR+0x2d0>
 8018fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fd0:	2b10      	cmp	r3, #16
 8018fd2:	d002      	beq.n	8018fda <I2C_Master_ADDR+0x2d0>
 8018fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fd6:	2b20      	cmp	r3, #32
 8018fd8:	d107      	bne.n	8018fea <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	685a      	ldr	r2, [r3, #4]
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018fe8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018fea:	2300      	movs	r3, #0
 8018fec:	613b      	str	r3, [r7, #16]
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	695b      	ldr	r3, [r3, #20]
 8018ff4:	613b      	str	r3, [r7, #16]
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	699b      	ldr	r3, [r3, #24]
 8018ffc:	613b      	str	r3, [r7, #16]
 8018ffe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	2200      	movs	r2, #0
 8019004:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8019006:	e00b      	b.n	8019020 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019008:	2300      	movs	r3, #0
 801900a:	60fb      	str	r3, [r7, #12]
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	695b      	ldr	r3, [r3, #20]
 8019012:	60fb      	str	r3, [r7, #12]
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	699b      	ldr	r3, [r3, #24]
 801901a:	60fb      	str	r3, [r7, #12]
 801901c:	68fb      	ldr	r3, [r7, #12]
}
 801901e:	e7ff      	b.n	8019020 <I2C_Master_ADDR+0x316>
 8019020:	bf00      	nop
 8019022:	3744      	adds	r7, #68	; 0x44
 8019024:	46bd      	mov	sp, r7
 8019026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801902a:	4770      	bx	lr

0801902c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b084      	sub	sp, #16
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801903a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019040:	b29b      	uxth	r3, r3
 8019042:	2b00      	cmp	r3, #0
 8019044:	d02b      	beq.n	801909e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801904a:	781a      	ldrb	r2, [r3, #0]
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019056:	1c5a      	adds	r2, r3, #1
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019060:	b29b      	uxth	r3, r3
 8019062:	3b01      	subs	r3, #1
 8019064:	b29a      	uxth	r2, r3
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801906e:	b29b      	uxth	r3, r3
 8019070:	2b00      	cmp	r3, #0
 8019072:	d114      	bne.n	801909e <I2C_SlaveTransmit_TXE+0x72>
 8019074:	7bfb      	ldrb	r3, [r7, #15]
 8019076:	2b29      	cmp	r3, #41	; 0x29
 8019078:	d111      	bne.n	801909e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	685a      	ldr	r2, [r3, #4]
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019088:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	2221      	movs	r2, #33	; 0x21
 801908e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	2228      	movs	r2, #40	; 0x28
 8019094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8019098:	6878      	ldr	r0, [r7, #4]
 801909a:	f7ff f9e7 	bl	801846c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801909e:	bf00      	nop
 80190a0:	3710      	adds	r7, #16
 80190a2:	46bd      	mov	sp, r7
 80190a4:	bd80      	pop	{r7, pc}

080190a6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80190a6:	b480      	push	{r7}
 80190a8:	b083      	sub	sp, #12
 80190aa:	af00      	add	r7, sp, #0
 80190ac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80190b2:	b29b      	uxth	r3, r3
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d011      	beq.n	80190dc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190bc:	781a      	ldrb	r2, [r3, #0]
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190c8:	1c5a      	adds	r2, r3, #1
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80190d2:	b29b      	uxth	r3, r3
 80190d4:	3b01      	subs	r3, #1
 80190d6:	b29a      	uxth	r2, r3
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80190dc:	bf00      	nop
 80190de:	370c      	adds	r7, #12
 80190e0:	46bd      	mov	sp, r7
 80190e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e6:	4770      	bx	lr

080190e8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80190e8:	b580      	push	{r7, lr}
 80190ea:	b084      	sub	sp, #16
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80190f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80190fc:	b29b      	uxth	r3, r3
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d02c      	beq.n	801915c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	691a      	ldr	r2, [r3, #16]
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801910c:	b2d2      	uxtb	r2, r2
 801910e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019114:	1c5a      	adds	r2, r3, #1
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801911e:	b29b      	uxth	r3, r3
 8019120:	3b01      	subs	r3, #1
 8019122:	b29a      	uxth	r2, r3
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801912c:	b29b      	uxth	r3, r3
 801912e:	2b00      	cmp	r3, #0
 8019130:	d114      	bne.n	801915c <I2C_SlaveReceive_RXNE+0x74>
 8019132:	7bfb      	ldrb	r3, [r7, #15]
 8019134:	2b2a      	cmp	r3, #42	; 0x2a
 8019136:	d111      	bne.n	801915c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	685a      	ldr	r2, [r3, #4]
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019146:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	2222      	movs	r2, #34	; 0x22
 801914c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	2228      	movs	r2, #40	; 0x28
 8019152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019156:	6878      	ldr	r0, [r7, #4]
 8019158:	f7ff f992 	bl	8018480 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801915c:	bf00      	nop
 801915e:	3710      	adds	r7, #16
 8019160:	46bd      	mov	sp, r7
 8019162:	bd80      	pop	{r7, pc}

08019164 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8019164:	b480      	push	{r7}
 8019166:	b083      	sub	sp, #12
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019170:	b29b      	uxth	r3, r3
 8019172:	2b00      	cmp	r3, #0
 8019174:	d012      	beq.n	801919c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	691a      	ldr	r2, [r3, #16]
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019180:	b2d2      	uxtb	r2, r2
 8019182:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019188:	1c5a      	adds	r2, r3, #1
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019192:	b29b      	uxth	r3, r3
 8019194:	3b01      	subs	r3, #1
 8019196:	b29a      	uxth	r2, r3
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801919c:	bf00      	nop
 801919e:	370c      	adds	r7, #12
 80191a0:	46bd      	mov	sp, r7
 80191a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a6:	4770      	bx	lr

080191a8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80191a8:	b580      	push	{r7, lr}
 80191aa:	b084      	sub	sp, #16
 80191ac:	af00      	add	r7, sp, #0
 80191ae:	6078      	str	r0, [r7, #4]
 80191b0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80191b2:	2300      	movs	r3, #0
 80191b4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80191bc:	b2db      	uxtb	r3, r3
 80191be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80191c2:	2b28      	cmp	r3, #40	; 0x28
 80191c4:	d127      	bne.n	8019216 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	685a      	ldr	r2, [r3, #4]
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80191d4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80191d6:	683b      	ldr	r3, [r7, #0]
 80191d8:	089b      	lsrs	r3, r3, #2
 80191da:	f003 0301 	and.w	r3, r3, #1
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d101      	bne.n	80191e6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80191e2:	2301      	movs	r3, #1
 80191e4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80191e6:	683b      	ldr	r3, [r7, #0]
 80191e8:	09db      	lsrs	r3, r3, #7
 80191ea:	f003 0301 	and.w	r3, r3, #1
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d103      	bne.n	80191fa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	68db      	ldr	r3, [r3, #12]
 80191f6:	81bb      	strh	r3, [r7, #12]
 80191f8:	e002      	b.n	8019200 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	699b      	ldr	r3, [r3, #24]
 80191fe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	2200      	movs	r2, #0
 8019204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8019208:	89ba      	ldrh	r2, [r7, #12]
 801920a:	7bfb      	ldrb	r3, [r7, #15]
 801920c:	4619      	mov	r1, r3
 801920e:	6878      	ldr	r0, [r7, #4]
 8019210:	f7ff f940 	bl	8018494 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8019214:	e00e      	b.n	8019234 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019216:	2300      	movs	r3, #0
 8019218:	60bb      	str	r3, [r7, #8]
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	695b      	ldr	r3, [r3, #20]
 8019220:	60bb      	str	r3, [r7, #8]
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	699b      	ldr	r3, [r3, #24]
 8019228:	60bb      	str	r3, [r7, #8]
 801922a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	2200      	movs	r2, #0
 8019230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8019234:	bf00      	nop
 8019236:	3710      	adds	r7, #16
 8019238:	46bd      	mov	sp, r7
 801923a:	bd80      	pop	{r7, pc}

0801923c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b084      	sub	sp, #16
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801924a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	685a      	ldr	r2, [r3, #4]
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801925a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 801925c:	2300      	movs	r3, #0
 801925e:	60bb      	str	r3, [r7, #8]
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	695b      	ldr	r3, [r3, #20]
 8019266:	60bb      	str	r3, [r7, #8]
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	681a      	ldr	r2, [r3, #0]
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	f042 0201 	orr.w	r2, r2, #1
 8019276:	601a      	str	r2, [r3, #0]
 8019278:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	681a      	ldr	r2, [r3, #0]
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019288:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	685b      	ldr	r3, [r3, #4]
 8019290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019298:	d172      	bne.n	8019380 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801929a:	7bfb      	ldrb	r3, [r7, #15]
 801929c:	2b22      	cmp	r3, #34	; 0x22
 801929e:	d002      	beq.n	80192a6 <I2C_Slave_STOPF+0x6a>
 80192a0:	7bfb      	ldrb	r3, [r7, #15]
 80192a2:	2b2a      	cmp	r3, #42	; 0x2a
 80192a4:	d135      	bne.n	8019312 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	685b      	ldr	r3, [r3, #4]
 80192ae:	b29a      	uxth	r2, r3
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192b8:	b29b      	uxth	r3, r3
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d005      	beq.n	80192ca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192c2:	f043 0204 	orr.w	r2, r3, #4
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	685a      	ldr	r2, [r3, #4]
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80192d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192de:	4618      	mov	r0, r3
 80192e0:	f7fd fdb4 	bl	8016e4c <HAL_DMA_GetState>
 80192e4:	4603      	mov	r3, r0
 80192e6:	2b01      	cmp	r3, #1
 80192e8:	d049      	beq.n	801937e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192ee:	4a69      	ldr	r2, [pc, #420]	; (8019494 <I2C_Slave_STOPF+0x258>)
 80192f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192f6:	4618      	mov	r0, r3
 80192f8:	f7fd fbfc 	bl	8016af4 <HAL_DMA_Abort_IT>
 80192fc:	4603      	mov	r3, r0
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d03d      	beq.n	801937e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019308:	687a      	ldr	r2, [r7, #4]
 801930a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801930c:	4610      	mov	r0, r2
 801930e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8019310:	e035      	b.n	801937e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	685b      	ldr	r3, [r3, #4]
 801931a:	b29a      	uxth	r2, r3
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019324:	b29b      	uxth	r3, r3
 8019326:	2b00      	cmp	r3, #0
 8019328:	d005      	beq.n	8019336 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801932e:	f043 0204 	orr.w	r2, r3, #4
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	685a      	ldr	r2, [r3, #4]
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019344:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801934a:	4618      	mov	r0, r3
 801934c:	f7fd fd7e 	bl	8016e4c <HAL_DMA_GetState>
 8019350:	4603      	mov	r3, r0
 8019352:	2b01      	cmp	r3, #1
 8019354:	d014      	beq.n	8019380 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801935a:	4a4e      	ldr	r2, [pc, #312]	; (8019494 <I2C_Slave_STOPF+0x258>)
 801935c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019362:	4618      	mov	r0, r3
 8019364:	f7fd fbc6 	bl	8016af4 <HAL_DMA_Abort_IT>
 8019368:	4603      	mov	r3, r0
 801936a:	2b00      	cmp	r3, #0
 801936c:	d008      	beq.n	8019380 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019374:	687a      	ldr	r2, [r7, #4]
 8019376:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8019378:	4610      	mov	r0, r2
 801937a:	4798      	blx	r3
 801937c:	e000      	b.n	8019380 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801937e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019384:	b29b      	uxth	r3, r3
 8019386:	2b00      	cmp	r3, #0
 8019388:	d03e      	beq.n	8019408 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	695b      	ldr	r3, [r3, #20]
 8019390:	f003 0304 	and.w	r3, r3, #4
 8019394:	2b04      	cmp	r3, #4
 8019396:	d112      	bne.n	80193be <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	691a      	ldr	r2, [r3, #16]
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193a2:	b2d2      	uxtb	r2, r2
 80193a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193aa:	1c5a      	adds	r2, r3, #1
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80193b4:	b29b      	uxth	r3, r3
 80193b6:	3b01      	subs	r3, #1
 80193b8:	b29a      	uxth	r2, r3
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	695b      	ldr	r3, [r3, #20]
 80193c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80193c8:	2b40      	cmp	r3, #64	; 0x40
 80193ca:	d112      	bne.n	80193f2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	691a      	ldr	r2, [r3, #16]
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193d6:	b2d2      	uxtb	r2, r2
 80193d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193de:	1c5a      	adds	r2, r3, #1
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80193e8:	b29b      	uxth	r3, r3
 80193ea:	3b01      	subs	r3, #1
 80193ec:	b29a      	uxth	r2, r3
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80193f6:	b29b      	uxth	r3, r3
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d005      	beq.n	8019408 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019400:	f043 0204 	orr.w	r2, r3, #4
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801940c:	2b00      	cmp	r3, #0
 801940e:	d003      	beq.n	8019418 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8019410:	6878      	ldr	r0, [r7, #4]
 8019412:	f000 f8b3 	bl	801957c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8019416:	e039      	b.n	801948c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8019418:	7bfb      	ldrb	r3, [r7, #15]
 801941a:	2b2a      	cmp	r3, #42	; 0x2a
 801941c:	d109      	bne.n	8019432 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	2200      	movs	r2, #0
 8019422:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	2228      	movs	r2, #40	; 0x28
 8019428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801942c:	6878      	ldr	r0, [r7, #4]
 801942e:	f7ff f827 	bl	8018480 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019438:	b2db      	uxtb	r3, r3
 801943a:	2b28      	cmp	r3, #40	; 0x28
 801943c:	d111      	bne.n	8019462 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	4a15      	ldr	r2, [pc, #84]	; (8019498 <I2C_Slave_STOPF+0x25c>)
 8019442:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	2200      	movs	r2, #0
 8019448:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	2220      	movs	r2, #32
 801944e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	2200      	movs	r2, #0
 8019456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801945a:	6878      	ldr	r0, [r7, #4]
 801945c:	f7ff f828 	bl	80184b0 <HAL_I2C_ListenCpltCallback>
}
 8019460:	e014      	b.n	801948c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019466:	2b22      	cmp	r3, #34	; 0x22
 8019468:	d002      	beq.n	8019470 <I2C_Slave_STOPF+0x234>
 801946a:	7bfb      	ldrb	r3, [r7, #15]
 801946c:	2b22      	cmp	r3, #34	; 0x22
 801946e:	d10d      	bne.n	801948c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	2200      	movs	r2, #0
 8019474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	2220      	movs	r2, #32
 801947a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	2200      	movs	r2, #0
 8019482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019486:	6878      	ldr	r0, [r7, #4]
 8019488:	f7fe fffa 	bl	8018480 <HAL_I2C_SlaveRxCpltCallback>
}
 801948c:	bf00      	nop
 801948e:	3710      	adds	r7, #16
 8019490:	46bd      	mov	sp, r7
 8019492:	bd80      	pop	{r7, pc}
 8019494:	08019add 	.word	0x08019add
 8019498:	ffff0000 	.word	0xffff0000

0801949c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 801949c:	b580      	push	{r7, lr}
 801949e:	b084      	sub	sp, #16
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80194aa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194b0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80194b2:	68bb      	ldr	r3, [r7, #8]
 80194b4:	2b08      	cmp	r3, #8
 80194b6:	d002      	beq.n	80194be <I2C_Slave_AF+0x22>
 80194b8:	68bb      	ldr	r3, [r7, #8]
 80194ba:	2b20      	cmp	r3, #32
 80194bc:	d129      	bne.n	8019512 <I2C_Slave_AF+0x76>
 80194be:	7bfb      	ldrb	r3, [r7, #15]
 80194c0:	2b28      	cmp	r3, #40	; 0x28
 80194c2:	d126      	bne.n	8019512 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	4a2c      	ldr	r2, [pc, #176]	; (8019578 <I2C_Slave_AF+0xdc>)
 80194c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	685a      	ldr	r2, [r3, #4]
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80194d8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80194e2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	681a      	ldr	r2, [r3, #0]
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80194f2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	2200      	movs	r2, #0
 80194f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	2220      	movs	r2, #32
 80194fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	2200      	movs	r2, #0
 8019506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801950a:	6878      	ldr	r0, [r7, #4]
 801950c:	f7fe ffd0 	bl	80184b0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8019510:	e02e      	b.n	8019570 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8019512:	7bfb      	ldrb	r3, [r7, #15]
 8019514:	2b21      	cmp	r3, #33	; 0x21
 8019516:	d126      	bne.n	8019566 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	4a17      	ldr	r2, [pc, #92]	; (8019578 <I2C_Slave_AF+0xdc>)
 801951c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	2221      	movs	r2, #33	; 0x21
 8019522:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	2220      	movs	r2, #32
 8019528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	2200      	movs	r2, #0
 8019530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	685a      	ldr	r2, [r3, #4]
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019542:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801954c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	681a      	ldr	r2, [r3, #0]
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801955c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801955e:	6878      	ldr	r0, [r7, #4]
 8019560:	f7fe ff84 	bl	801846c <HAL_I2C_SlaveTxCpltCallback>
}
 8019564:	e004      	b.n	8019570 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801956e:	615a      	str	r2, [r3, #20]
}
 8019570:	bf00      	nop
 8019572:	3710      	adds	r7, #16
 8019574:	46bd      	mov	sp, r7
 8019576:	bd80      	pop	{r7, pc}
 8019578:	ffff0000 	.word	0xffff0000

0801957c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 801957c:	b580      	push	{r7, lr}
 801957e:	b084      	sub	sp, #16
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801958a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019592:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8019594:	7bbb      	ldrb	r3, [r7, #14]
 8019596:	2b10      	cmp	r3, #16
 8019598:	d002      	beq.n	80195a0 <I2C_ITError+0x24>
 801959a:	7bbb      	ldrb	r3, [r7, #14]
 801959c:	2b40      	cmp	r3, #64	; 0x40
 801959e:	d10a      	bne.n	80195b6 <I2C_ITError+0x3a>
 80195a0:	7bfb      	ldrb	r3, [r7, #15]
 80195a2:	2b22      	cmp	r3, #34	; 0x22
 80195a4:	d107      	bne.n	80195b6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	681a      	ldr	r2, [r3, #0]
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80195b4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80195b6:	7bfb      	ldrb	r3, [r7, #15]
 80195b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80195bc:	2b28      	cmp	r3, #40	; 0x28
 80195be:	d107      	bne.n	80195d0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	2200      	movs	r2, #0
 80195c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	2228      	movs	r2, #40	; 0x28
 80195ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80195ce:	e015      	b.n	80195fc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	685b      	ldr	r3, [r3, #4]
 80195d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80195da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80195de:	d00a      	beq.n	80195f6 <I2C_ITError+0x7a>
 80195e0:	7bfb      	ldrb	r3, [r7, #15]
 80195e2:	2b60      	cmp	r3, #96	; 0x60
 80195e4:	d007      	beq.n	80195f6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	2220      	movs	r2, #32
 80195ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	2200      	movs	r2, #0
 80195f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	2200      	movs	r2, #0
 80195fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	685b      	ldr	r3, [r3, #4]
 8019602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801960a:	d162      	bne.n	80196d2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	685a      	ldr	r2, [r3, #4]
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801961a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019624:	b2db      	uxtb	r3, r3
 8019626:	2b01      	cmp	r3, #1
 8019628:	d020      	beq.n	801966c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801962e:	4a6a      	ldr	r2, [pc, #424]	; (80197d8 <I2C_ITError+0x25c>)
 8019630:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019636:	4618      	mov	r0, r3
 8019638:	f7fd fa5c 	bl	8016af4 <HAL_DMA_Abort_IT>
 801963c:	4603      	mov	r3, r0
 801963e:	2b00      	cmp	r3, #0
 8019640:	f000 8089 	beq.w	8019756 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	681a      	ldr	r2, [r3, #0]
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	f022 0201 	bic.w	r2, r2, #1
 8019652:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	2220      	movs	r2, #32
 8019658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019662:	687a      	ldr	r2, [r7, #4]
 8019664:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8019666:	4610      	mov	r0, r2
 8019668:	4798      	blx	r3
 801966a:	e074      	b.n	8019756 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019670:	4a59      	ldr	r2, [pc, #356]	; (80197d8 <I2C_ITError+0x25c>)
 8019672:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019678:	4618      	mov	r0, r3
 801967a:	f7fd fa3b 	bl	8016af4 <HAL_DMA_Abort_IT>
 801967e:	4603      	mov	r3, r0
 8019680:	2b00      	cmp	r3, #0
 8019682:	d068      	beq.n	8019756 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	695b      	ldr	r3, [r3, #20]
 801968a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801968e:	2b40      	cmp	r3, #64	; 0x40
 8019690:	d10b      	bne.n	80196aa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	691a      	ldr	r2, [r3, #16]
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801969c:	b2d2      	uxtb	r2, r2
 801969e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196a4:	1c5a      	adds	r2, r3, #1
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	681a      	ldr	r2, [r3, #0]
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	f022 0201 	bic.w	r2, r2, #1
 80196b8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	2220      	movs	r2, #32
 80196be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80196c8:	687a      	ldr	r2, [r7, #4]
 80196ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80196cc:	4610      	mov	r0, r2
 80196ce:	4798      	blx	r3
 80196d0:	e041      	b.n	8019756 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80196d8:	b2db      	uxtb	r3, r3
 80196da:	2b60      	cmp	r3, #96	; 0x60
 80196dc:	d125      	bne.n	801972a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	2220      	movs	r2, #32
 80196e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	2200      	movs	r2, #0
 80196ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	695b      	ldr	r3, [r3, #20]
 80196f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80196f6:	2b40      	cmp	r3, #64	; 0x40
 80196f8:	d10b      	bne.n	8019712 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	691a      	ldr	r2, [r3, #16]
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019704:	b2d2      	uxtb	r2, r2
 8019706:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801970c:	1c5a      	adds	r2, r3, #1
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	681a      	ldr	r2, [r3, #0]
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	f022 0201 	bic.w	r2, r2, #1
 8019720:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8019722:	6878      	ldr	r0, [r7, #4]
 8019724:	f7fe feec 	bl	8018500 <HAL_I2C_AbortCpltCallback>
 8019728:	e015      	b.n	8019756 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	695b      	ldr	r3, [r3, #20]
 8019730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019734:	2b40      	cmp	r3, #64	; 0x40
 8019736:	d10b      	bne.n	8019750 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	691a      	ldr	r2, [r3, #16]
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019742:	b2d2      	uxtb	r2, r2
 8019744:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801974a:	1c5a      	adds	r2, r3, #1
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8019750:	6878      	ldr	r0, [r7, #4]
 8019752:	f7fe fecb 	bl	80184ec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801975a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801975c:	68bb      	ldr	r3, [r7, #8]
 801975e:	f003 0301 	and.w	r3, r3, #1
 8019762:	2b00      	cmp	r3, #0
 8019764:	d10e      	bne.n	8019784 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8019766:	68bb      	ldr	r3, [r7, #8]
 8019768:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801976c:	2b00      	cmp	r3, #0
 801976e:	d109      	bne.n	8019784 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019770:	68bb      	ldr	r3, [r7, #8]
 8019772:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8019776:	2b00      	cmp	r3, #0
 8019778:	d104      	bne.n	8019784 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801977a:	68bb      	ldr	r3, [r7, #8]
 801977c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019780:	2b00      	cmp	r3, #0
 8019782:	d007      	beq.n	8019794 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	685a      	ldr	r2, [r3, #4]
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019792:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801979a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197a0:	f003 0304 	and.w	r3, r3, #4
 80197a4:	2b04      	cmp	r3, #4
 80197a6:	d113      	bne.n	80197d0 <I2C_ITError+0x254>
 80197a8:	7bfb      	ldrb	r3, [r7, #15]
 80197aa:	2b28      	cmp	r3, #40	; 0x28
 80197ac:	d110      	bne.n	80197d0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	4a0a      	ldr	r2, [pc, #40]	; (80197dc <I2C_ITError+0x260>)
 80197b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	2200      	movs	r2, #0
 80197b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	2220      	movs	r2, #32
 80197be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	2200      	movs	r2, #0
 80197c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80197ca:	6878      	ldr	r0, [r7, #4]
 80197cc:	f7fe fe70 	bl	80184b0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80197d0:	bf00      	nop
 80197d2:	3710      	adds	r7, #16
 80197d4:	46bd      	mov	sp, r7
 80197d6:	bd80      	pop	{r7, pc}
 80197d8:	08019add 	.word	0x08019add
 80197dc:	ffff0000 	.word	0xffff0000

080197e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80197e0:	b580      	push	{r7, lr}
 80197e2:	b088      	sub	sp, #32
 80197e4:	af02      	add	r7, sp, #8
 80197e6:	60f8      	str	r0, [r7, #12]
 80197e8:	4608      	mov	r0, r1
 80197ea:	4611      	mov	r1, r2
 80197ec:	461a      	mov	r2, r3
 80197ee:	4603      	mov	r3, r0
 80197f0:	817b      	strh	r3, [r7, #10]
 80197f2:	460b      	mov	r3, r1
 80197f4:	813b      	strh	r3, [r7, #8]
 80197f6:	4613      	mov	r3, r2
 80197f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	681a      	ldr	r2, [r3, #0]
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019808:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801980c:	9300      	str	r3, [sp, #0]
 801980e:	6a3b      	ldr	r3, [r7, #32]
 8019810:	2200      	movs	r2, #0
 8019812:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019816:	68f8      	ldr	r0, [r7, #12]
 8019818:	f000 fa08 	bl	8019c2c <I2C_WaitOnFlagUntilTimeout>
 801981c:	4603      	mov	r3, r0
 801981e:	2b00      	cmp	r3, #0
 8019820:	d00d      	beq.n	801983e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801982c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019830:	d103      	bne.n	801983a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019838:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801983a:	2303      	movs	r3, #3
 801983c:	e05f      	b.n	80198fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801983e:	897b      	ldrh	r3, [r7, #10]
 8019840:	b2db      	uxtb	r3, r3
 8019842:	461a      	mov	r2, r3
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801984c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019850:	6a3a      	ldr	r2, [r7, #32]
 8019852:	492d      	ldr	r1, [pc, #180]	; (8019908 <I2C_RequestMemoryWrite+0x128>)
 8019854:	68f8      	ldr	r0, [r7, #12]
 8019856:	f000 fa40 	bl	8019cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801985a:	4603      	mov	r3, r0
 801985c:	2b00      	cmp	r3, #0
 801985e:	d001      	beq.n	8019864 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8019860:	2301      	movs	r3, #1
 8019862:	e04c      	b.n	80198fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019864:	2300      	movs	r3, #0
 8019866:	617b      	str	r3, [r7, #20]
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	695b      	ldr	r3, [r3, #20]
 801986e:	617b      	str	r3, [r7, #20]
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	699b      	ldr	r3, [r3, #24]
 8019876:	617b      	str	r3, [r7, #20]
 8019878:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801987a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801987c:	6a39      	ldr	r1, [r7, #32]
 801987e:	68f8      	ldr	r0, [r7, #12]
 8019880:	f000 faaa 	bl	8019dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8019884:	4603      	mov	r3, r0
 8019886:	2b00      	cmp	r3, #0
 8019888:	d00d      	beq.n	80198a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801988e:	2b04      	cmp	r3, #4
 8019890:	d107      	bne.n	80198a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	681a      	ldr	r2, [r3, #0]
 8019898:	68fb      	ldr	r3, [r7, #12]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80198a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80198a2:	2301      	movs	r3, #1
 80198a4:	e02b      	b.n	80198fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80198a6:	88fb      	ldrh	r3, [r7, #6]
 80198a8:	2b01      	cmp	r3, #1
 80198aa:	d105      	bne.n	80198b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80198ac:	893b      	ldrh	r3, [r7, #8]
 80198ae:	b2da      	uxtb	r2, r3
 80198b0:	68fb      	ldr	r3, [r7, #12]
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	611a      	str	r2, [r3, #16]
 80198b6:	e021      	b.n	80198fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80198b8:	893b      	ldrh	r3, [r7, #8]
 80198ba:	0a1b      	lsrs	r3, r3, #8
 80198bc:	b29b      	uxth	r3, r3
 80198be:	b2da      	uxtb	r2, r3
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80198c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198c8:	6a39      	ldr	r1, [r7, #32]
 80198ca:	68f8      	ldr	r0, [r7, #12]
 80198cc:	f000 fa84 	bl	8019dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80198d0:	4603      	mov	r3, r0
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d00d      	beq.n	80198f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198da:	2b04      	cmp	r3, #4
 80198dc:	d107      	bne.n	80198ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	681a      	ldr	r2, [r3, #0]
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80198ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80198ee:	2301      	movs	r3, #1
 80198f0:	e005      	b.n	80198fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80198f2:	893b      	ldrh	r3, [r7, #8]
 80198f4:	b2da      	uxtb	r2, r3
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80198fc:	2300      	movs	r3, #0
}
 80198fe:	4618      	mov	r0, r3
 8019900:	3718      	adds	r7, #24
 8019902:	46bd      	mov	sp, r7
 8019904:	bd80      	pop	{r7, pc}
 8019906:	bf00      	nop
 8019908:	00010002 	.word	0x00010002

0801990c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801990c:	b580      	push	{r7, lr}
 801990e:	b088      	sub	sp, #32
 8019910:	af02      	add	r7, sp, #8
 8019912:	60f8      	str	r0, [r7, #12]
 8019914:	4608      	mov	r0, r1
 8019916:	4611      	mov	r1, r2
 8019918:	461a      	mov	r2, r3
 801991a:	4603      	mov	r3, r0
 801991c:	817b      	strh	r3, [r7, #10]
 801991e:	460b      	mov	r3, r1
 8019920:	813b      	strh	r3, [r7, #8]
 8019922:	4613      	mov	r3, r2
 8019924:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019926:	68fb      	ldr	r3, [r7, #12]
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	681a      	ldr	r2, [r3, #0]
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019934:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	681a      	ldr	r2, [r3, #0]
 801993c:	68fb      	ldr	r3, [r7, #12]
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019944:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019948:	9300      	str	r3, [sp, #0]
 801994a:	6a3b      	ldr	r3, [r7, #32]
 801994c:	2200      	movs	r2, #0
 801994e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019952:	68f8      	ldr	r0, [r7, #12]
 8019954:	f000 f96a 	bl	8019c2c <I2C_WaitOnFlagUntilTimeout>
 8019958:	4603      	mov	r3, r0
 801995a:	2b00      	cmp	r3, #0
 801995c:	d00d      	beq.n	801997a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801996c:	d103      	bne.n	8019976 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019974:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019976:	2303      	movs	r3, #3
 8019978:	e0aa      	b.n	8019ad0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801997a:	897b      	ldrh	r3, [r7, #10]
 801997c:	b2db      	uxtb	r3, r3
 801997e:	461a      	mov	r2, r3
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019988:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801998c:	6a3a      	ldr	r2, [r7, #32]
 801998e:	4952      	ldr	r1, [pc, #328]	; (8019ad8 <I2C_RequestMemoryRead+0x1cc>)
 8019990:	68f8      	ldr	r0, [r7, #12]
 8019992:	f000 f9a2 	bl	8019cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019996:	4603      	mov	r3, r0
 8019998:	2b00      	cmp	r3, #0
 801999a:	d001      	beq.n	80199a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 801999c:	2301      	movs	r3, #1
 801999e:	e097      	b.n	8019ad0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80199a0:	2300      	movs	r3, #0
 80199a2:	617b      	str	r3, [r7, #20]
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	695b      	ldr	r3, [r3, #20]
 80199aa:	617b      	str	r3, [r7, #20]
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	699b      	ldr	r3, [r3, #24]
 80199b2:	617b      	str	r3, [r7, #20]
 80199b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80199b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80199b8:	6a39      	ldr	r1, [r7, #32]
 80199ba:	68f8      	ldr	r0, [r7, #12]
 80199bc:	f000 fa0c 	bl	8019dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80199c0:	4603      	mov	r3, r0
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d00d      	beq.n	80199e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80199ca:	2b04      	cmp	r3, #4
 80199cc:	d107      	bne.n	80199de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	681a      	ldr	r2, [r3, #0]
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80199dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80199de:	2301      	movs	r3, #1
 80199e0:	e076      	b.n	8019ad0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80199e2:	88fb      	ldrh	r3, [r7, #6]
 80199e4:	2b01      	cmp	r3, #1
 80199e6:	d105      	bne.n	80199f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80199e8:	893b      	ldrh	r3, [r7, #8]
 80199ea:	b2da      	uxtb	r2, r3
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	611a      	str	r2, [r3, #16]
 80199f2:	e021      	b.n	8019a38 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80199f4:	893b      	ldrh	r3, [r7, #8]
 80199f6:	0a1b      	lsrs	r3, r3, #8
 80199f8:	b29b      	uxth	r3, r3
 80199fa:	b2da      	uxtb	r2, r3
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a04:	6a39      	ldr	r1, [r7, #32]
 8019a06:	68f8      	ldr	r0, [r7, #12]
 8019a08:	f000 f9e6 	bl	8019dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8019a0c:	4603      	mov	r3, r0
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	d00d      	beq.n	8019a2e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a16:	2b04      	cmp	r3, #4
 8019a18:	d107      	bne.n	8019a2a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	681a      	ldr	r2, [r3, #0]
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019a28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8019a2a:	2301      	movs	r3, #1
 8019a2c:	e050      	b.n	8019ad0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019a2e:	893b      	ldrh	r3, [r7, #8]
 8019a30:	b2da      	uxtb	r2, r3
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a3a:	6a39      	ldr	r1, [r7, #32]
 8019a3c:	68f8      	ldr	r0, [r7, #12]
 8019a3e:	f000 f9cb 	bl	8019dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8019a42:	4603      	mov	r3, r0
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d00d      	beq.n	8019a64 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a4c:	2b04      	cmp	r3, #4
 8019a4e:	d107      	bne.n	8019a60 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	681a      	ldr	r2, [r3, #0]
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019a5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019a60:	2301      	movs	r3, #1
 8019a62:	e035      	b.n	8019ad0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	681a      	ldr	r2, [r3, #0]
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019a72:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a76:	9300      	str	r3, [sp, #0]
 8019a78:	6a3b      	ldr	r3, [r7, #32]
 8019a7a:	2200      	movs	r2, #0
 8019a7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019a80:	68f8      	ldr	r0, [r7, #12]
 8019a82:	f000 f8d3 	bl	8019c2c <I2C_WaitOnFlagUntilTimeout>
 8019a86:	4603      	mov	r3, r0
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d00d      	beq.n	8019aa8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019a9a:	d103      	bne.n	8019aa4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019aa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019aa4:	2303      	movs	r3, #3
 8019aa6:	e013      	b.n	8019ad0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8019aa8:	897b      	ldrh	r3, [r7, #10]
 8019aaa:	b2db      	uxtb	r3, r3
 8019aac:	f043 0301 	orr.w	r3, r3, #1
 8019ab0:	b2da      	uxtb	r2, r3
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aba:	6a3a      	ldr	r2, [r7, #32]
 8019abc:	4906      	ldr	r1, [pc, #24]	; (8019ad8 <I2C_RequestMemoryRead+0x1cc>)
 8019abe:	68f8      	ldr	r0, [r7, #12]
 8019ac0:	f000 f90b 	bl	8019cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019ac4:	4603      	mov	r3, r0
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d001      	beq.n	8019ace <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8019aca:	2301      	movs	r3, #1
 8019acc:	e000      	b.n	8019ad0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8019ace:	2300      	movs	r3, #0
}
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	3718      	adds	r7, #24
 8019ad4:	46bd      	mov	sp, r7
 8019ad6:	bd80      	pop	{r7, pc}
 8019ad8:	00010002 	.word	0x00010002

08019adc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8019adc:	b580      	push	{r7, lr}
 8019ade:	b086      	sub	sp, #24
 8019ae0:	af00      	add	r7, sp, #0
 8019ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019aec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019aee:	697b      	ldr	r3, [r7, #20]
 8019af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019af4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8019af6:	4b4b      	ldr	r3, [pc, #300]	; (8019c24 <I2C_DMAAbort+0x148>)
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	08db      	lsrs	r3, r3, #3
 8019afc:	4a4a      	ldr	r2, [pc, #296]	; (8019c28 <I2C_DMAAbort+0x14c>)
 8019afe:	fba2 2303 	umull	r2, r3, r2, r3
 8019b02:	0a1a      	lsrs	r2, r3, #8
 8019b04:	4613      	mov	r3, r2
 8019b06:	009b      	lsls	r3, r3, #2
 8019b08:	4413      	add	r3, r2
 8019b0a:	00da      	lsls	r2, r3, #3
 8019b0c:	1ad3      	subs	r3, r2, r3
 8019b0e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d106      	bne.n	8019b24 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019b16:	697b      	ldr	r3, [r7, #20]
 8019b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b1a:	f043 0220 	orr.w	r2, r3, #32
 8019b1e:	697b      	ldr	r3, [r7, #20]
 8019b20:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8019b22:	e00a      	b.n	8019b3a <I2C_DMAAbort+0x5e>
    }
    count--;
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	3b01      	subs	r3, #1
 8019b28:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019b2a:	697b      	ldr	r3, [r7, #20]
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019b38:	d0ea      	beq.n	8019b10 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8019b3a:	697b      	ldr	r3, [r7, #20]
 8019b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d003      	beq.n	8019b4a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8019b42:	697b      	ldr	r3, [r7, #20]
 8019b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b46:	2200      	movs	r2, #0
 8019b48:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8019b4a:	697b      	ldr	r3, [r7, #20]
 8019b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d003      	beq.n	8019b5a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8019b52:	697b      	ldr	r3, [r7, #20]
 8019b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b56:	2200      	movs	r2, #0
 8019b58:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019b5a:	697b      	ldr	r3, [r7, #20]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	681a      	ldr	r2, [r3, #0]
 8019b60:	697b      	ldr	r3, [r7, #20]
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019b68:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8019b6a:	697b      	ldr	r3, [r7, #20]
 8019b6c:	2200      	movs	r2, #0
 8019b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8019b70:	697b      	ldr	r3, [r7, #20]
 8019b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d003      	beq.n	8019b80 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8019b78:	697b      	ldr	r3, [r7, #20]
 8019b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b7c:	2200      	movs	r2, #0
 8019b7e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8019b80:	697b      	ldr	r3, [r7, #20]
 8019b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d003      	beq.n	8019b90 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8019b88:	697b      	ldr	r3, [r7, #20]
 8019b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b8c:	2200      	movs	r2, #0
 8019b8e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8019b90:	697b      	ldr	r3, [r7, #20]
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	681a      	ldr	r2, [r3, #0]
 8019b96:	697b      	ldr	r3, [r7, #20]
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	f022 0201 	bic.w	r2, r2, #1
 8019b9e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8019ba0:	697b      	ldr	r3, [r7, #20]
 8019ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019ba6:	b2db      	uxtb	r3, r3
 8019ba8:	2b60      	cmp	r3, #96	; 0x60
 8019baa:	d10e      	bne.n	8019bca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8019bac:	697b      	ldr	r3, [r7, #20]
 8019bae:	2220      	movs	r2, #32
 8019bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019bb4:	697b      	ldr	r3, [r7, #20]
 8019bb6:	2200      	movs	r2, #0
 8019bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8019bbc:	697b      	ldr	r3, [r7, #20]
 8019bbe:	2200      	movs	r2, #0
 8019bc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8019bc2:	6978      	ldr	r0, [r7, #20]
 8019bc4:	f7fe fc9c 	bl	8018500 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019bc8:	e027      	b.n	8019c1a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8019bca:	7cfb      	ldrb	r3, [r7, #19]
 8019bcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019bd0:	2b28      	cmp	r3, #40	; 0x28
 8019bd2:	d117      	bne.n	8019c04 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8019bd4:	697b      	ldr	r3, [r7, #20]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	681a      	ldr	r2, [r3, #0]
 8019bda:	697b      	ldr	r3, [r7, #20]
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	f042 0201 	orr.w	r2, r2, #1
 8019be2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019be4:	697b      	ldr	r3, [r7, #20]
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	681a      	ldr	r2, [r3, #0]
 8019bea:	697b      	ldr	r3, [r7, #20]
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019bf2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8019bf4:	697b      	ldr	r3, [r7, #20]
 8019bf6:	2200      	movs	r2, #0
 8019bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019bfa:	697b      	ldr	r3, [r7, #20]
 8019bfc:	2228      	movs	r2, #40	; 0x28
 8019bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8019c02:	e007      	b.n	8019c14 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8019c04:	697b      	ldr	r3, [r7, #20]
 8019c06:	2220      	movs	r2, #32
 8019c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019c0c:	697b      	ldr	r3, [r7, #20]
 8019c0e:	2200      	movs	r2, #0
 8019c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8019c14:	6978      	ldr	r0, [r7, #20]
 8019c16:	f7fe fc69 	bl	80184ec <HAL_I2C_ErrorCallback>
}
 8019c1a:	bf00      	nop
 8019c1c:	3718      	adds	r7, #24
 8019c1e:	46bd      	mov	sp, r7
 8019c20:	bd80      	pop	{r7, pc}
 8019c22:	bf00      	nop
 8019c24:	200001e4 	.word	0x200001e4
 8019c28:	14f8b589 	.word	0x14f8b589

08019c2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8019c2c:	b580      	push	{r7, lr}
 8019c2e:	b084      	sub	sp, #16
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	60f8      	str	r0, [r7, #12]
 8019c34:	60b9      	str	r1, [r7, #8]
 8019c36:	603b      	str	r3, [r7, #0]
 8019c38:	4613      	mov	r3, r2
 8019c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019c3c:	e025      	b.n	8019c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019c3e:	683b      	ldr	r3, [r7, #0]
 8019c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c44:	d021      	beq.n	8019c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019c46:	f7fc fc9d 	bl	8016584 <HAL_GetTick>
 8019c4a:	4602      	mov	r2, r0
 8019c4c:	69bb      	ldr	r3, [r7, #24]
 8019c4e:	1ad3      	subs	r3, r2, r3
 8019c50:	683a      	ldr	r2, [r7, #0]
 8019c52:	429a      	cmp	r2, r3
 8019c54:	d302      	bcc.n	8019c5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8019c56:	683b      	ldr	r3, [r7, #0]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d116      	bne.n	8019c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	2200      	movs	r2, #0
 8019c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	2220      	movs	r2, #32
 8019c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	2200      	movs	r2, #0
 8019c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8019c72:	68fb      	ldr	r3, [r7, #12]
 8019c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c76:	f043 0220 	orr.w	r2, r3, #32
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	2200      	movs	r2, #0
 8019c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019c86:	2301      	movs	r3, #1
 8019c88:	e023      	b.n	8019cd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019c8a:	68bb      	ldr	r3, [r7, #8]
 8019c8c:	0c1b      	lsrs	r3, r3, #16
 8019c8e:	b2db      	uxtb	r3, r3
 8019c90:	2b01      	cmp	r3, #1
 8019c92:	d10d      	bne.n	8019cb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	695b      	ldr	r3, [r3, #20]
 8019c9a:	43da      	mvns	r2, r3
 8019c9c:	68bb      	ldr	r3, [r7, #8]
 8019c9e:	4013      	ands	r3, r2
 8019ca0:	b29b      	uxth	r3, r3
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	bf0c      	ite	eq
 8019ca6:	2301      	moveq	r3, #1
 8019ca8:	2300      	movne	r3, #0
 8019caa:	b2db      	uxtb	r3, r3
 8019cac:	461a      	mov	r2, r3
 8019cae:	e00c      	b.n	8019cca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	699b      	ldr	r3, [r3, #24]
 8019cb6:	43da      	mvns	r2, r3
 8019cb8:	68bb      	ldr	r3, [r7, #8]
 8019cba:	4013      	ands	r3, r2
 8019cbc:	b29b      	uxth	r3, r3
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	bf0c      	ite	eq
 8019cc2:	2301      	moveq	r3, #1
 8019cc4:	2300      	movne	r3, #0
 8019cc6:	b2db      	uxtb	r3, r3
 8019cc8:	461a      	mov	r2, r3
 8019cca:	79fb      	ldrb	r3, [r7, #7]
 8019ccc:	429a      	cmp	r2, r3
 8019cce:	d0b6      	beq.n	8019c3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8019cd0:	2300      	movs	r3, #0
}
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	3710      	adds	r7, #16
 8019cd6:	46bd      	mov	sp, r7
 8019cd8:	bd80      	pop	{r7, pc}

08019cda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8019cda:	b580      	push	{r7, lr}
 8019cdc:	b084      	sub	sp, #16
 8019cde:	af00      	add	r7, sp, #0
 8019ce0:	60f8      	str	r0, [r7, #12]
 8019ce2:	60b9      	str	r1, [r7, #8]
 8019ce4:	607a      	str	r2, [r7, #4]
 8019ce6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8019ce8:	e051      	b.n	8019d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	695b      	ldr	r3, [r3, #20]
 8019cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019cf8:	d123      	bne.n	8019d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	681a      	ldr	r2, [r3, #0]
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019d08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019d12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8019d14:	68fb      	ldr	r3, [r7, #12]
 8019d16:	2200      	movs	r2, #0
 8019d18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	2220      	movs	r2, #32
 8019d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	2200      	movs	r2, #0
 8019d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d2e:	f043 0204 	orr.w	r2, r3, #4
 8019d32:	68fb      	ldr	r3, [r7, #12]
 8019d34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	2200      	movs	r2, #0
 8019d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019d3e:	2301      	movs	r3, #1
 8019d40:	e046      	b.n	8019dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d48:	d021      	beq.n	8019d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019d4a:	f7fc fc1b 	bl	8016584 <HAL_GetTick>
 8019d4e:	4602      	mov	r2, r0
 8019d50:	683b      	ldr	r3, [r7, #0]
 8019d52:	1ad3      	subs	r3, r2, r3
 8019d54:	687a      	ldr	r2, [r7, #4]
 8019d56:	429a      	cmp	r2, r3
 8019d58:	d302      	bcc.n	8019d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d116      	bne.n	8019d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	2200      	movs	r2, #0
 8019d64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	2220      	movs	r2, #32
 8019d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	2200      	movs	r2, #0
 8019d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d7a:	f043 0220 	orr.w	r2, r3, #32
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	2200      	movs	r2, #0
 8019d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019d8a:	2301      	movs	r3, #1
 8019d8c:	e020      	b.n	8019dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8019d8e:	68bb      	ldr	r3, [r7, #8]
 8019d90:	0c1b      	lsrs	r3, r3, #16
 8019d92:	b2db      	uxtb	r3, r3
 8019d94:	2b01      	cmp	r3, #1
 8019d96:	d10c      	bne.n	8019db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	695b      	ldr	r3, [r3, #20]
 8019d9e:	43da      	mvns	r2, r3
 8019da0:	68bb      	ldr	r3, [r7, #8]
 8019da2:	4013      	ands	r3, r2
 8019da4:	b29b      	uxth	r3, r3
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	bf14      	ite	ne
 8019daa:	2301      	movne	r3, #1
 8019dac:	2300      	moveq	r3, #0
 8019dae:	b2db      	uxtb	r3, r3
 8019db0:	e00b      	b.n	8019dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	699b      	ldr	r3, [r3, #24]
 8019db8:	43da      	mvns	r2, r3
 8019dba:	68bb      	ldr	r3, [r7, #8]
 8019dbc:	4013      	ands	r3, r2
 8019dbe:	b29b      	uxth	r3, r3
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	bf14      	ite	ne
 8019dc4:	2301      	movne	r3, #1
 8019dc6:	2300      	moveq	r3, #0
 8019dc8:	b2db      	uxtb	r3, r3
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d18d      	bne.n	8019cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8019dce:	2300      	movs	r3, #0
}
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	3710      	adds	r7, #16
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	bd80      	pop	{r7, pc}

08019dd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b084      	sub	sp, #16
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	60f8      	str	r0, [r7, #12]
 8019de0:	60b9      	str	r1, [r7, #8]
 8019de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8019de4:	e02d      	b.n	8019e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019de6:	68f8      	ldr	r0, [r7, #12]
 8019de8:	f000 f900 	bl	8019fec <I2C_IsAcknowledgeFailed>
 8019dec:	4603      	mov	r3, r0
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d001      	beq.n	8019df6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8019df2:	2301      	movs	r3, #1
 8019df4:	e02d      	b.n	8019e52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019df6:	68bb      	ldr	r3, [r7, #8]
 8019df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019dfc:	d021      	beq.n	8019e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019dfe:	f7fc fbc1 	bl	8016584 <HAL_GetTick>
 8019e02:	4602      	mov	r2, r0
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	1ad3      	subs	r3, r2, r3
 8019e08:	68ba      	ldr	r2, [r7, #8]
 8019e0a:	429a      	cmp	r2, r3
 8019e0c:	d302      	bcc.n	8019e14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8019e0e:	68bb      	ldr	r3, [r7, #8]
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d116      	bne.n	8019e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	2200      	movs	r2, #0
 8019e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019e1a:	68fb      	ldr	r3, [r7, #12]
 8019e1c:	2220      	movs	r2, #32
 8019e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	2200      	movs	r2, #0
 8019e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e2e:	f043 0220 	orr.w	r2, r3, #32
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	2200      	movs	r2, #0
 8019e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019e3e:	2301      	movs	r3, #1
 8019e40:	e007      	b.n	8019e52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	695b      	ldr	r3, [r3, #20]
 8019e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019e4c:	2b80      	cmp	r3, #128	; 0x80
 8019e4e:	d1ca      	bne.n	8019de6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8019e50:	2300      	movs	r3, #0
}
 8019e52:	4618      	mov	r0, r3
 8019e54:	3710      	adds	r7, #16
 8019e56:	46bd      	mov	sp, r7
 8019e58:	bd80      	pop	{r7, pc}

08019e5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019e5a:	b580      	push	{r7, lr}
 8019e5c:	b084      	sub	sp, #16
 8019e5e:	af00      	add	r7, sp, #0
 8019e60:	60f8      	str	r0, [r7, #12]
 8019e62:	60b9      	str	r1, [r7, #8]
 8019e64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8019e66:	e02d      	b.n	8019ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019e68:	68f8      	ldr	r0, [r7, #12]
 8019e6a:	f000 f8bf 	bl	8019fec <I2C_IsAcknowledgeFailed>
 8019e6e:	4603      	mov	r3, r0
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d001      	beq.n	8019e78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8019e74:	2301      	movs	r3, #1
 8019e76:	e02d      	b.n	8019ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019e78:	68bb      	ldr	r3, [r7, #8]
 8019e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e7e:	d021      	beq.n	8019ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019e80:	f7fc fb80 	bl	8016584 <HAL_GetTick>
 8019e84:	4602      	mov	r2, r0
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	1ad3      	subs	r3, r2, r3
 8019e8a:	68ba      	ldr	r2, [r7, #8]
 8019e8c:	429a      	cmp	r2, r3
 8019e8e:	d302      	bcc.n	8019e96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8019e90:	68bb      	ldr	r3, [r7, #8]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d116      	bne.n	8019ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	2200      	movs	r2, #0
 8019e9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	2220      	movs	r2, #32
 8019ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	2200      	movs	r2, #0
 8019ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019eb0:	f043 0220 	orr.w	r2, r3, #32
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	2200      	movs	r2, #0
 8019ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019ec0:	2301      	movs	r3, #1
 8019ec2:	e007      	b.n	8019ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	695b      	ldr	r3, [r3, #20]
 8019eca:	f003 0304 	and.w	r3, r3, #4
 8019ece:	2b04      	cmp	r3, #4
 8019ed0:	d1ca      	bne.n	8019e68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8019ed2:	2300      	movs	r3, #0
}
 8019ed4:	4618      	mov	r0, r3
 8019ed6:	3710      	adds	r7, #16
 8019ed8:	46bd      	mov	sp, r7
 8019eda:	bd80      	pop	{r7, pc}

08019edc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8019edc:	b480      	push	{r7}
 8019ede:	b085      	sub	sp, #20
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8019ee8:	4b13      	ldr	r3, [pc, #76]	; (8019f38 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	08db      	lsrs	r3, r3, #3
 8019eee:	4a13      	ldr	r2, [pc, #76]	; (8019f3c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8019ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8019ef4:	0a1a      	lsrs	r2, r3, #8
 8019ef6:	4613      	mov	r3, r2
 8019ef8:	009b      	lsls	r3, r3, #2
 8019efa:	4413      	add	r3, r2
 8019efc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8019efe:	68fb      	ldr	r3, [r7, #12]
 8019f00:	3b01      	subs	r3, #1
 8019f02:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d107      	bne.n	8019f1a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f0e:	f043 0220 	orr.w	r2, r3, #32
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8019f16:	2301      	movs	r3, #1
 8019f18:	e008      	b.n	8019f2c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019f28:	d0e9      	beq.n	8019efe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8019f2a:	2300      	movs	r3, #0
}
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	3714      	adds	r7, #20
 8019f30:	46bd      	mov	sp, r7
 8019f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f36:	4770      	bx	lr
 8019f38:	200001e4 	.word	0x200001e4
 8019f3c:	14f8b589 	.word	0x14f8b589

08019f40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b084      	sub	sp, #16
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	60f8      	str	r0, [r7, #12]
 8019f48:	60b9      	str	r1, [r7, #8]
 8019f4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019f4c:	e042      	b.n	8019fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	695b      	ldr	r3, [r3, #20]
 8019f54:	f003 0310 	and.w	r3, r3, #16
 8019f58:	2b10      	cmp	r3, #16
 8019f5a:	d119      	bne.n	8019f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	f06f 0210 	mvn.w	r2, #16
 8019f64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	2200      	movs	r2, #0
 8019f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	2220      	movs	r2, #32
 8019f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	2200      	movs	r2, #0
 8019f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	2200      	movs	r2, #0
 8019f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019f8c:	2301      	movs	r3, #1
 8019f8e:	e029      	b.n	8019fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019f90:	f7fc faf8 	bl	8016584 <HAL_GetTick>
 8019f94:	4602      	mov	r2, r0
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	1ad3      	subs	r3, r2, r3
 8019f9a:	68ba      	ldr	r2, [r7, #8]
 8019f9c:	429a      	cmp	r2, r3
 8019f9e:	d302      	bcc.n	8019fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8019fa0:	68bb      	ldr	r3, [r7, #8]
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d116      	bne.n	8019fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8019fa6:	68fb      	ldr	r3, [r7, #12]
 8019fa8:	2200      	movs	r2, #0
 8019faa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	2220      	movs	r2, #32
 8019fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	2200      	movs	r2, #0
 8019fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019fc0:	f043 0220 	orr.w	r2, r3, #32
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	2200      	movs	r2, #0
 8019fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019fd0:	2301      	movs	r3, #1
 8019fd2:	e007      	b.n	8019fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019fd4:	68fb      	ldr	r3, [r7, #12]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	695b      	ldr	r3, [r3, #20]
 8019fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019fde:	2b40      	cmp	r3, #64	; 0x40
 8019fe0:	d1b5      	bne.n	8019f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8019fe2:	2300      	movs	r3, #0
}
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	3710      	adds	r7, #16
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bd80      	pop	{r7, pc}

08019fec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8019fec:	b480      	push	{r7}
 8019fee:	b083      	sub	sp, #12
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	695b      	ldr	r3, [r3, #20]
 8019ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a002:	d11b      	bne.n	801a03c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801a00c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	2200      	movs	r2, #0
 801a012:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	2220      	movs	r2, #32
 801a018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	2200      	movs	r2, #0
 801a020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a028:	f043 0204 	orr.w	r2, r3, #4
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	2200      	movs	r2, #0
 801a034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801a038:	2301      	movs	r3, #1
 801a03a:	e000      	b.n	801a03e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801a03c:	2300      	movs	r3, #0
}
 801a03e:	4618      	mov	r0, r3
 801a040:	370c      	adds	r7, #12
 801a042:	46bd      	mov	sp, r7
 801a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a048:	4770      	bx	lr

0801a04a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801a04a:	b480      	push	{r7}
 801a04c:	b083      	sub	sp, #12
 801a04e:	af00      	add	r7, sp, #0
 801a050:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a056:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801a05a:	d103      	bne.n	801a064 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	2201      	movs	r2, #1
 801a060:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801a062:	e007      	b.n	801a074 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a068:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801a06c:	d102      	bne.n	801a074 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	2208      	movs	r2, #8
 801a072:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801a074:	bf00      	nop
 801a076:	370c      	adds	r7, #12
 801a078:	46bd      	mov	sp, r7
 801a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a07e:	4770      	bx	lr

0801a080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a080:	b580      	push	{r7, lr}
 801a082:	b086      	sub	sp, #24
 801a084:	af00      	add	r7, sp, #0
 801a086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d101      	bne.n	801a092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801a08e:	2301      	movs	r3, #1
 801a090:	e267      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	f003 0301 	and.w	r3, r3, #1
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d075      	beq.n	801a18a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801a09e:	4b88      	ldr	r3, [pc, #544]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a0a0:	689b      	ldr	r3, [r3, #8]
 801a0a2:	f003 030c 	and.w	r3, r3, #12
 801a0a6:	2b04      	cmp	r3, #4
 801a0a8:	d00c      	beq.n	801a0c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801a0aa:	4b85      	ldr	r3, [pc, #532]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a0ac:	689b      	ldr	r3, [r3, #8]
 801a0ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801a0b2:	2b08      	cmp	r3, #8
 801a0b4:	d112      	bne.n	801a0dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801a0b6:	4b82      	ldr	r3, [pc, #520]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a0b8:	685b      	ldr	r3, [r3, #4]
 801a0ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a0be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801a0c2:	d10b      	bne.n	801a0dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a0c4:	4b7e      	ldr	r3, [pc, #504]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d05b      	beq.n	801a188 <HAL_RCC_OscConfig+0x108>
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	685b      	ldr	r3, [r3, #4]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d157      	bne.n	801a188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801a0d8:	2301      	movs	r3, #1
 801a0da:	e242      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	685b      	ldr	r3, [r3, #4]
 801a0e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a0e4:	d106      	bne.n	801a0f4 <HAL_RCC_OscConfig+0x74>
 801a0e6:	4b76      	ldr	r3, [pc, #472]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	4a75      	ldr	r2, [pc, #468]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a0ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a0f0:	6013      	str	r3, [r2, #0]
 801a0f2:	e01d      	b.n	801a130 <HAL_RCC_OscConfig+0xb0>
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	685b      	ldr	r3, [r3, #4]
 801a0f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801a0fc:	d10c      	bne.n	801a118 <HAL_RCC_OscConfig+0x98>
 801a0fe:	4b70      	ldr	r3, [pc, #448]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	4a6f      	ldr	r2, [pc, #444]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a108:	6013      	str	r3, [r2, #0]
 801a10a:	4b6d      	ldr	r3, [pc, #436]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	4a6c      	ldr	r2, [pc, #432]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a114:	6013      	str	r3, [r2, #0]
 801a116:	e00b      	b.n	801a130 <HAL_RCC_OscConfig+0xb0>
 801a118:	4b69      	ldr	r3, [pc, #420]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	4a68      	ldr	r2, [pc, #416]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a11e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a122:	6013      	str	r3, [r2, #0]
 801a124:	4b66      	ldr	r3, [pc, #408]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	4a65      	ldr	r2, [pc, #404]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a12a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801a12e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	685b      	ldr	r3, [r3, #4]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d013      	beq.n	801a160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a138:	f7fc fa24 	bl	8016584 <HAL_GetTick>
 801a13c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a13e:	e008      	b.n	801a152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a140:	f7fc fa20 	bl	8016584 <HAL_GetTick>
 801a144:	4602      	mov	r2, r0
 801a146:	693b      	ldr	r3, [r7, #16]
 801a148:	1ad3      	subs	r3, r2, r3
 801a14a:	2b64      	cmp	r3, #100	; 0x64
 801a14c:	d901      	bls.n	801a152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801a14e:	2303      	movs	r3, #3
 801a150:	e207      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a152:	4b5b      	ldr	r3, [pc, #364]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d0f0      	beq.n	801a140 <HAL_RCC_OscConfig+0xc0>
 801a15e:	e014      	b.n	801a18a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a160:	f7fc fa10 	bl	8016584 <HAL_GetTick>
 801a164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801a166:	e008      	b.n	801a17a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a168:	f7fc fa0c 	bl	8016584 <HAL_GetTick>
 801a16c:	4602      	mov	r2, r0
 801a16e:	693b      	ldr	r3, [r7, #16]
 801a170:	1ad3      	subs	r3, r2, r3
 801a172:	2b64      	cmp	r3, #100	; 0x64
 801a174:	d901      	bls.n	801a17a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801a176:	2303      	movs	r3, #3
 801a178:	e1f3      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801a17a:	4b51      	ldr	r3, [pc, #324]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a182:	2b00      	cmp	r3, #0
 801a184:	d1f0      	bne.n	801a168 <HAL_RCC_OscConfig+0xe8>
 801a186:	e000      	b.n	801a18a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	f003 0302 	and.w	r3, r3, #2
 801a192:	2b00      	cmp	r3, #0
 801a194:	d063      	beq.n	801a25e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801a196:	4b4a      	ldr	r3, [pc, #296]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a198:	689b      	ldr	r3, [r3, #8]
 801a19a:	f003 030c 	and.w	r3, r3, #12
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d00b      	beq.n	801a1ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801a1a2:	4b47      	ldr	r3, [pc, #284]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a1a4:	689b      	ldr	r3, [r3, #8]
 801a1a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801a1aa:	2b08      	cmp	r3, #8
 801a1ac:	d11c      	bne.n	801a1e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801a1ae:	4b44      	ldr	r3, [pc, #272]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a1b0:	685b      	ldr	r3, [r3, #4]
 801a1b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d116      	bne.n	801a1e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801a1ba:	4b41      	ldr	r3, [pc, #260]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	f003 0302 	and.w	r3, r3, #2
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d005      	beq.n	801a1d2 <HAL_RCC_OscConfig+0x152>
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	68db      	ldr	r3, [r3, #12]
 801a1ca:	2b01      	cmp	r3, #1
 801a1cc:	d001      	beq.n	801a1d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801a1ce:	2301      	movs	r3, #1
 801a1d0:	e1c7      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a1d2:	4b3b      	ldr	r3, [pc, #236]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	691b      	ldr	r3, [r3, #16]
 801a1de:	00db      	lsls	r3, r3, #3
 801a1e0:	4937      	ldr	r1, [pc, #220]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a1e2:	4313      	orrs	r3, r2
 801a1e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801a1e6:	e03a      	b.n	801a25e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	68db      	ldr	r3, [r3, #12]
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d020      	beq.n	801a232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801a1f0:	4b34      	ldr	r3, [pc, #208]	; (801a2c4 <HAL_RCC_OscConfig+0x244>)
 801a1f2:	2201      	movs	r2, #1
 801a1f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a1f6:	f7fc f9c5 	bl	8016584 <HAL_GetTick>
 801a1fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a1fc:	e008      	b.n	801a210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a1fe:	f7fc f9c1 	bl	8016584 <HAL_GetTick>
 801a202:	4602      	mov	r2, r0
 801a204:	693b      	ldr	r3, [r7, #16]
 801a206:	1ad3      	subs	r3, r2, r3
 801a208:	2b02      	cmp	r3, #2
 801a20a:	d901      	bls.n	801a210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801a20c:	2303      	movs	r3, #3
 801a20e:	e1a8      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a210:	4b2b      	ldr	r3, [pc, #172]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	f003 0302 	and.w	r3, r3, #2
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d0f0      	beq.n	801a1fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a21c:	4b28      	ldr	r3, [pc, #160]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	691b      	ldr	r3, [r3, #16]
 801a228:	00db      	lsls	r3, r3, #3
 801a22a:	4925      	ldr	r1, [pc, #148]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a22c:	4313      	orrs	r3, r2
 801a22e:	600b      	str	r3, [r1, #0]
 801a230:	e015      	b.n	801a25e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a232:	4b24      	ldr	r3, [pc, #144]	; (801a2c4 <HAL_RCC_OscConfig+0x244>)
 801a234:	2200      	movs	r2, #0
 801a236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a238:	f7fc f9a4 	bl	8016584 <HAL_GetTick>
 801a23c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a23e:	e008      	b.n	801a252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a240:	f7fc f9a0 	bl	8016584 <HAL_GetTick>
 801a244:	4602      	mov	r2, r0
 801a246:	693b      	ldr	r3, [r7, #16]
 801a248:	1ad3      	subs	r3, r2, r3
 801a24a:	2b02      	cmp	r3, #2
 801a24c:	d901      	bls.n	801a252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801a24e:	2303      	movs	r3, #3
 801a250:	e187      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a252:	4b1b      	ldr	r3, [pc, #108]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	f003 0302 	and.w	r3, r3, #2
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d1f0      	bne.n	801a240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	f003 0308 	and.w	r3, r3, #8
 801a266:	2b00      	cmp	r3, #0
 801a268:	d036      	beq.n	801a2d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	695b      	ldr	r3, [r3, #20]
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d016      	beq.n	801a2a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a272:	4b15      	ldr	r3, [pc, #84]	; (801a2c8 <HAL_RCC_OscConfig+0x248>)
 801a274:	2201      	movs	r2, #1
 801a276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a278:	f7fc f984 	bl	8016584 <HAL_GetTick>
 801a27c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a27e:	e008      	b.n	801a292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a280:	f7fc f980 	bl	8016584 <HAL_GetTick>
 801a284:	4602      	mov	r2, r0
 801a286:	693b      	ldr	r3, [r7, #16]
 801a288:	1ad3      	subs	r3, r2, r3
 801a28a:	2b02      	cmp	r3, #2
 801a28c:	d901      	bls.n	801a292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801a28e:	2303      	movs	r3, #3
 801a290:	e167      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a292:	4b0b      	ldr	r3, [pc, #44]	; (801a2c0 <HAL_RCC_OscConfig+0x240>)
 801a294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a296:	f003 0302 	and.w	r3, r3, #2
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d0f0      	beq.n	801a280 <HAL_RCC_OscConfig+0x200>
 801a29e:	e01b      	b.n	801a2d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a2a0:	4b09      	ldr	r3, [pc, #36]	; (801a2c8 <HAL_RCC_OscConfig+0x248>)
 801a2a2:	2200      	movs	r2, #0
 801a2a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a2a6:	f7fc f96d 	bl	8016584 <HAL_GetTick>
 801a2aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a2ac:	e00e      	b.n	801a2cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a2ae:	f7fc f969 	bl	8016584 <HAL_GetTick>
 801a2b2:	4602      	mov	r2, r0
 801a2b4:	693b      	ldr	r3, [r7, #16]
 801a2b6:	1ad3      	subs	r3, r2, r3
 801a2b8:	2b02      	cmp	r3, #2
 801a2ba:	d907      	bls.n	801a2cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801a2bc:	2303      	movs	r3, #3
 801a2be:	e150      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
 801a2c0:	40023800 	.word	0x40023800
 801a2c4:	42470000 	.word	0x42470000
 801a2c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a2cc:	4b88      	ldr	r3, [pc, #544]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a2ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a2d0:	f003 0302 	and.w	r3, r3, #2
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d1ea      	bne.n	801a2ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	f003 0304 	and.w	r3, r3, #4
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	f000 8097 	beq.w	801a414 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a2ea:	4b81      	ldr	r3, [pc, #516]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d10f      	bne.n	801a316 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	60bb      	str	r3, [r7, #8]
 801a2fa:	4b7d      	ldr	r3, [pc, #500]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2fe:	4a7c      	ldr	r2, [pc, #496]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a304:	6413      	str	r3, [r2, #64]	; 0x40
 801a306:	4b7a      	ldr	r3, [pc, #488]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a30a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a30e:	60bb      	str	r3, [r7, #8]
 801a310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801a312:	2301      	movs	r3, #1
 801a314:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a316:	4b77      	ldr	r3, [pc, #476]	; (801a4f4 <HAL_RCC_OscConfig+0x474>)
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d118      	bne.n	801a354 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a322:	4b74      	ldr	r3, [pc, #464]	; (801a4f4 <HAL_RCC_OscConfig+0x474>)
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	4a73      	ldr	r2, [pc, #460]	; (801a4f4 <HAL_RCC_OscConfig+0x474>)
 801a328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a32c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a32e:	f7fc f929 	bl	8016584 <HAL_GetTick>
 801a332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a334:	e008      	b.n	801a348 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a336:	f7fc f925 	bl	8016584 <HAL_GetTick>
 801a33a:	4602      	mov	r2, r0
 801a33c:	693b      	ldr	r3, [r7, #16]
 801a33e:	1ad3      	subs	r3, r2, r3
 801a340:	2b02      	cmp	r3, #2
 801a342:	d901      	bls.n	801a348 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801a344:	2303      	movs	r3, #3
 801a346:	e10c      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a348:	4b6a      	ldr	r3, [pc, #424]	; (801a4f4 <HAL_RCC_OscConfig+0x474>)
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a350:	2b00      	cmp	r3, #0
 801a352:	d0f0      	beq.n	801a336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	689b      	ldr	r3, [r3, #8]
 801a358:	2b01      	cmp	r3, #1
 801a35a:	d106      	bne.n	801a36a <HAL_RCC_OscConfig+0x2ea>
 801a35c:	4b64      	ldr	r3, [pc, #400]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a35e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a360:	4a63      	ldr	r2, [pc, #396]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a362:	f043 0301 	orr.w	r3, r3, #1
 801a366:	6713      	str	r3, [r2, #112]	; 0x70
 801a368:	e01c      	b.n	801a3a4 <HAL_RCC_OscConfig+0x324>
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	689b      	ldr	r3, [r3, #8]
 801a36e:	2b05      	cmp	r3, #5
 801a370:	d10c      	bne.n	801a38c <HAL_RCC_OscConfig+0x30c>
 801a372:	4b5f      	ldr	r3, [pc, #380]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a376:	4a5e      	ldr	r2, [pc, #376]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a378:	f043 0304 	orr.w	r3, r3, #4
 801a37c:	6713      	str	r3, [r2, #112]	; 0x70
 801a37e:	4b5c      	ldr	r3, [pc, #368]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a382:	4a5b      	ldr	r2, [pc, #364]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a384:	f043 0301 	orr.w	r3, r3, #1
 801a388:	6713      	str	r3, [r2, #112]	; 0x70
 801a38a:	e00b      	b.n	801a3a4 <HAL_RCC_OscConfig+0x324>
 801a38c:	4b58      	ldr	r3, [pc, #352]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a38e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a390:	4a57      	ldr	r2, [pc, #348]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a392:	f023 0301 	bic.w	r3, r3, #1
 801a396:	6713      	str	r3, [r2, #112]	; 0x70
 801a398:	4b55      	ldr	r3, [pc, #340]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a39a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a39c:	4a54      	ldr	r2, [pc, #336]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a39e:	f023 0304 	bic.w	r3, r3, #4
 801a3a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	689b      	ldr	r3, [r3, #8]
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d015      	beq.n	801a3d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a3ac:	f7fc f8ea 	bl	8016584 <HAL_GetTick>
 801a3b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a3b2:	e00a      	b.n	801a3ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a3b4:	f7fc f8e6 	bl	8016584 <HAL_GetTick>
 801a3b8:	4602      	mov	r2, r0
 801a3ba:	693b      	ldr	r3, [r7, #16]
 801a3bc:	1ad3      	subs	r3, r2, r3
 801a3be:	f241 3288 	movw	r2, #5000	; 0x1388
 801a3c2:	4293      	cmp	r3, r2
 801a3c4:	d901      	bls.n	801a3ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801a3c6:	2303      	movs	r3, #3
 801a3c8:	e0cb      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a3ca:	4b49      	ldr	r3, [pc, #292]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a3cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a3ce:	f003 0302 	and.w	r3, r3, #2
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d0ee      	beq.n	801a3b4 <HAL_RCC_OscConfig+0x334>
 801a3d6:	e014      	b.n	801a402 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a3d8:	f7fc f8d4 	bl	8016584 <HAL_GetTick>
 801a3dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a3de:	e00a      	b.n	801a3f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a3e0:	f7fc f8d0 	bl	8016584 <HAL_GetTick>
 801a3e4:	4602      	mov	r2, r0
 801a3e6:	693b      	ldr	r3, [r7, #16]
 801a3e8:	1ad3      	subs	r3, r2, r3
 801a3ea:	f241 3288 	movw	r2, #5000	; 0x1388
 801a3ee:	4293      	cmp	r3, r2
 801a3f0:	d901      	bls.n	801a3f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801a3f2:	2303      	movs	r3, #3
 801a3f4:	e0b5      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a3f6:	4b3e      	ldr	r3, [pc, #248]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a3fa:	f003 0302 	and.w	r3, r3, #2
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d1ee      	bne.n	801a3e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801a402:	7dfb      	ldrb	r3, [r7, #23]
 801a404:	2b01      	cmp	r3, #1
 801a406:	d105      	bne.n	801a414 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a408:	4b39      	ldr	r3, [pc, #228]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a40c:	4a38      	ldr	r2, [pc, #224]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a40e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a412:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	699b      	ldr	r3, [r3, #24]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	f000 80a1 	beq.w	801a560 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801a41e:	4b34      	ldr	r3, [pc, #208]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a420:	689b      	ldr	r3, [r3, #8]
 801a422:	f003 030c 	and.w	r3, r3, #12
 801a426:	2b08      	cmp	r3, #8
 801a428:	d05c      	beq.n	801a4e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	699b      	ldr	r3, [r3, #24]
 801a42e:	2b02      	cmp	r3, #2
 801a430:	d141      	bne.n	801a4b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a432:	4b31      	ldr	r3, [pc, #196]	; (801a4f8 <HAL_RCC_OscConfig+0x478>)
 801a434:	2200      	movs	r2, #0
 801a436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a438:	f7fc f8a4 	bl	8016584 <HAL_GetTick>
 801a43c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a43e:	e008      	b.n	801a452 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a440:	f7fc f8a0 	bl	8016584 <HAL_GetTick>
 801a444:	4602      	mov	r2, r0
 801a446:	693b      	ldr	r3, [r7, #16]
 801a448:	1ad3      	subs	r3, r2, r3
 801a44a:	2b02      	cmp	r3, #2
 801a44c:	d901      	bls.n	801a452 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801a44e:	2303      	movs	r3, #3
 801a450:	e087      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a452:	4b27      	ldr	r3, [pc, #156]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d1f0      	bne.n	801a440 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	69da      	ldr	r2, [r3, #28]
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	6a1b      	ldr	r3, [r3, #32]
 801a466:	431a      	orrs	r2, r3
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a46c:	019b      	lsls	r3, r3, #6
 801a46e:	431a      	orrs	r2, r3
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a474:	085b      	lsrs	r3, r3, #1
 801a476:	3b01      	subs	r3, #1
 801a478:	041b      	lsls	r3, r3, #16
 801a47a:	431a      	orrs	r2, r3
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a480:	061b      	lsls	r3, r3, #24
 801a482:	491b      	ldr	r1, [pc, #108]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a484:	4313      	orrs	r3, r2
 801a486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801a488:	4b1b      	ldr	r3, [pc, #108]	; (801a4f8 <HAL_RCC_OscConfig+0x478>)
 801a48a:	2201      	movs	r2, #1
 801a48c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a48e:	f7fc f879 	bl	8016584 <HAL_GetTick>
 801a492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a494:	e008      	b.n	801a4a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a496:	f7fc f875 	bl	8016584 <HAL_GetTick>
 801a49a:	4602      	mov	r2, r0
 801a49c:	693b      	ldr	r3, [r7, #16]
 801a49e:	1ad3      	subs	r3, r2, r3
 801a4a0:	2b02      	cmp	r3, #2
 801a4a2:	d901      	bls.n	801a4a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801a4a4:	2303      	movs	r3, #3
 801a4a6:	e05c      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a4a8:	4b11      	ldr	r3, [pc, #68]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d0f0      	beq.n	801a496 <HAL_RCC_OscConfig+0x416>
 801a4b4:	e054      	b.n	801a560 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a4b6:	4b10      	ldr	r3, [pc, #64]	; (801a4f8 <HAL_RCC_OscConfig+0x478>)
 801a4b8:	2200      	movs	r2, #0
 801a4ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a4bc:	f7fc f862 	bl	8016584 <HAL_GetTick>
 801a4c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a4c2:	e008      	b.n	801a4d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a4c4:	f7fc f85e 	bl	8016584 <HAL_GetTick>
 801a4c8:	4602      	mov	r2, r0
 801a4ca:	693b      	ldr	r3, [r7, #16]
 801a4cc:	1ad3      	subs	r3, r2, r3
 801a4ce:	2b02      	cmp	r3, #2
 801a4d0:	d901      	bls.n	801a4d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801a4d2:	2303      	movs	r3, #3
 801a4d4:	e045      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a4d6:	4b06      	ldr	r3, [pc, #24]	; (801a4f0 <HAL_RCC_OscConfig+0x470>)
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d1f0      	bne.n	801a4c4 <HAL_RCC_OscConfig+0x444>
 801a4e2:	e03d      	b.n	801a560 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	699b      	ldr	r3, [r3, #24]
 801a4e8:	2b01      	cmp	r3, #1
 801a4ea:	d107      	bne.n	801a4fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801a4ec:	2301      	movs	r3, #1
 801a4ee:	e038      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
 801a4f0:	40023800 	.word	0x40023800
 801a4f4:	40007000 	.word	0x40007000
 801a4f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801a4fc:	4b1b      	ldr	r3, [pc, #108]	; (801a56c <HAL_RCC_OscConfig+0x4ec>)
 801a4fe:	685b      	ldr	r3, [r3, #4]
 801a500:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	699b      	ldr	r3, [r3, #24]
 801a506:	2b01      	cmp	r3, #1
 801a508:	d028      	beq.n	801a55c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a514:	429a      	cmp	r2, r3
 801a516:	d121      	bne.n	801a55c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a522:	429a      	cmp	r2, r3
 801a524:	d11a      	bne.n	801a55c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a526:	68fa      	ldr	r2, [r7, #12]
 801a528:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801a52c:	4013      	ands	r3, r2
 801a52e:	687a      	ldr	r2, [r7, #4]
 801a530:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801a532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a534:	4293      	cmp	r3, r2
 801a536:	d111      	bne.n	801a55c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a538:	68fb      	ldr	r3, [r7, #12]
 801a53a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a542:	085b      	lsrs	r3, r3, #1
 801a544:	3b01      	subs	r3, #1
 801a546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a548:	429a      	cmp	r2, r3
 801a54a:	d107      	bne.n	801a55c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a558:	429a      	cmp	r2, r3
 801a55a:	d001      	beq.n	801a560 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801a55c:	2301      	movs	r3, #1
 801a55e:	e000      	b.n	801a562 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801a560:	2300      	movs	r3, #0
}
 801a562:	4618      	mov	r0, r3
 801a564:	3718      	adds	r7, #24
 801a566:	46bd      	mov	sp, r7
 801a568:	bd80      	pop	{r7, pc}
 801a56a:	bf00      	nop
 801a56c:	40023800 	.word	0x40023800

0801a570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a570:	b580      	push	{r7, lr}
 801a572:	b084      	sub	sp, #16
 801a574:	af00      	add	r7, sp, #0
 801a576:	6078      	str	r0, [r7, #4]
 801a578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d101      	bne.n	801a584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a580:	2301      	movs	r3, #1
 801a582:	e0cc      	b.n	801a71e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801a584:	4b68      	ldr	r3, [pc, #416]	; (801a728 <HAL_RCC_ClockConfig+0x1b8>)
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	f003 0307 	and.w	r3, r3, #7
 801a58c:	683a      	ldr	r2, [r7, #0]
 801a58e:	429a      	cmp	r2, r3
 801a590:	d90c      	bls.n	801a5ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a592:	4b65      	ldr	r3, [pc, #404]	; (801a728 <HAL_RCC_ClockConfig+0x1b8>)
 801a594:	683a      	ldr	r2, [r7, #0]
 801a596:	b2d2      	uxtb	r2, r2
 801a598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a59a:	4b63      	ldr	r3, [pc, #396]	; (801a728 <HAL_RCC_ClockConfig+0x1b8>)
 801a59c:	681b      	ldr	r3, [r3, #0]
 801a59e:	f003 0307 	and.w	r3, r3, #7
 801a5a2:	683a      	ldr	r2, [r7, #0]
 801a5a4:	429a      	cmp	r2, r3
 801a5a6:	d001      	beq.n	801a5ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801a5a8:	2301      	movs	r3, #1
 801a5aa:	e0b8      	b.n	801a71e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	f003 0302 	and.w	r3, r3, #2
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d020      	beq.n	801a5fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	f003 0304 	and.w	r3, r3, #4
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d005      	beq.n	801a5d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801a5c4:	4b59      	ldr	r3, [pc, #356]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a5c6:	689b      	ldr	r3, [r3, #8]
 801a5c8:	4a58      	ldr	r2, [pc, #352]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a5ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801a5ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	f003 0308 	and.w	r3, r3, #8
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d005      	beq.n	801a5e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801a5dc:	4b53      	ldr	r3, [pc, #332]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a5de:	689b      	ldr	r3, [r3, #8]
 801a5e0:	4a52      	ldr	r2, [pc, #328]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a5e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801a5e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a5e8:	4b50      	ldr	r3, [pc, #320]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a5ea:	689b      	ldr	r3, [r3, #8]
 801a5ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	689b      	ldr	r3, [r3, #8]
 801a5f4:	494d      	ldr	r1, [pc, #308]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a5f6:	4313      	orrs	r3, r2
 801a5f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	f003 0301 	and.w	r3, r3, #1
 801a602:	2b00      	cmp	r3, #0
 801a604:	d044      	beq.n	801a690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	685b      	ldr	r3, [r3, #4]
 801a60a:	2b01      	cmp	r3, #1
 801a60c:	d107      	bne.n	801a61e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a60e:	4b47      	ldr	r3, [pc, #284]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a616:	2b00      	cmp	r3, #0
 801a618:	d119      	bne.n	801a64e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a61a:	2301      	movs	r3, #1
 801a61c:	e07f      	b.n	801a71e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	685b      	ldr	r3, [r3, #4]
 801a622:	2b02      	cmp	r3, #2
 801a624:	d003      	beq.n	801a62e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a62a:	2b03      	cmp	r3, #3
 801a62c:	d107      	bne.n	801a63e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a62e:	4b3f      	ldr	r3, [pc, #252]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a636:	2b00      	cmp	r3, #0
 801a638:	d109      	bne.n	801a64e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a63a:	2301      	movs	r3, #1
 801a63c:	e06f      	b.n	801a71e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a63e:	4b3b      	ldr	r3, [pc, #236]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	f003 0302 	and.w	r3, r3, #2
 801a646:	2b00      	cmp	r3, #0
 801a648:	d101      	bne.n	801a64e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a64a:	2301      	movs	r3, #1
 801a64c:	e067      	b.n	801a71e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801a64e:	4b37      	ldr	r3, [pc, #220]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a650:	689b      	ldr	r3, [r3, #8]
 801a652:	f023 0203 	bic.w	r2, r3, #3
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	685b      	ldr	r3, [r3, #4]
 801a65a:	4934      	ldr	r1, [pc, #208]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a65c:	4313      	orrs	r3, r2
 801a65e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801a660:	f7fb ff90 	bl	8016584 <HAL_GetTick>
 801a664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a666:	e00a      	b.n	801a67e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a668:	f7fb ff8c 	bl	8016584 <HAL_GetTick>
 801a66c:	4602      	mov	r2, r0
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	1ad3      	subs	r3, r2, r3
 801a672:	f241 3288 	movw	r2, #5000	; 0x1388
 801a676:	4293      	cmp	r3, r2
 801a678:	d901      	bls.n	801a67e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801a67a:	2303      	movs	r3, #3
 801a67c:	e04f      	b.n	801a71e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a67e:	4b2b      	ldr	r3, [pc, #172]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a680:	689b      	ldr	r3, [r3, #8]
 801a682:	f003 020c 	and.w	r2, r3, #12
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	685b      	ldr	r3, [r3, #4]
 801a68a:	009b      	lsls	r3, r3, #2
 801a68c:	429a      	cmp	r2, r3
 801a68e:	d1eb      	bne.n	801a668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801a690:	4b25      	ldr	r3, [pc, #148]	; (801a728 <HAL_RCC_ClockConfig+0x1b8>)
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	f003 0307 	and.w	r3, r3, #7
 801a698:	683a      	ldr	r2, [r7, #0]
 801a69a:	429a      	cmp	r2, r3
 801a69c:	d20c      	bcs.n	801a6b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a69e:	4b22      	ldr	r3, [pc, #136]	; (801a728 <HAL_RCC_ClockConfig+0x1b8>)
 801a6a0:	683a      	ldr	r2, [r7, #0]
 801a6a2:	b2d2      	uxtb	r2, r2
 801a6a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a6a6:	4b20      	ldr	r3, [pc, #128]	; (801a728 <HAL_RCC_ClockConfig+0x1b8>)
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	f003 0307 	and.w	r3, r3, #7
 801a6ae:	683a      	ldr	r2, [r7, #0]
 801a6b0:	429a      	cmp	r2, r3
 801a6b2:	d001      	beq.n	801a6b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801a6b4:	2301      	movs	r3, #1
 801a6b6:	e032      	b.n	801a71e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	f003 0304 	and.w	r3, r3, #4
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	d008      	beq.n	801a6d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801a6c4:	4b19      	ldr	r3, [pc, #100]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a6c6:	689b      	ldr	r3, [r3, #8]
 801a6c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	68db      	ldr	r3, [r3, #12]
 801a6d0:	4916      	ldr	r1, [pc, #88]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a6d2:	4313      	orrs	r3, r2
 801a6d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	f003 0308 	and.w	r3, r3, #8
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d009      	beq.n	801a6f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801a6e2:	4b12      	ldr	r3, [pc, #72]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a6e4:	689b      	ldr	r3, [r3, #8]
 801a6e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	691b      	ldr	r3, [r3, #16]
 801a6ee:	00db      	lsls	r3, r3, #3
 801a6f0:	490e      	ldr	r1, [pc, #56]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a6f2:	4313      	orrs	r3, r2
 801a6f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a6f6:	f000 f821 	bl	801a73c <HAL_RCC_GetSysClockFreq>
 801a6fa:	4602      	mov	r2, r0
 801a6fc:	4b0b      	ldr	r3, [pc, #44]	; (801a72c <HAL_RCC_ClockConfig+0x1bc>)
 801a6fe:	689b      	ldr	r3, [r3, #8]
 801a700:	091b      	lsrs	r3, r3, #4
 801a702:	f003 030f 	and.w	r3, r3, #15
 801a706:	490a      	ldr	r1, [pc, #40]	; (801a730 <HAL_RCC_ClockConfig+0x1c0>)
 801a708:	5ccb      	ldrb	r3, [r1, r3]
 801a70a:	fa22 f303 	lsr.w	r3, r2, r3
 801a70e:	4a09      	ldr	r2, [pc, #36]	; (801a734 <HAL_RCC_ClockConfig+0x1c4>)
 801a710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801a712:	4b09      	ldr	r3, [pc, #36]	; (801a738 <HAL_RCC_ClockConfig+0x1c8>)
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	4618      	mov	r0, r3
 801a718:	f7fb fef0 	bl	80164fc <HAL_InitTick>

  return HAL_OK;
 801a71c:	2300      	movs	r3, #0
}
 801a71e:	4618      	mov	r0, r3
 801a720:	3710      	adds	r7, #16
 801a722:	46bd      	mov	sp, r7
 801a724:	bd80      	pop	{r7, pc}
 801a726:	bf00      	nop
 801a728:	40023c00 	.word	0x40023c00
 801a72c:	40023800 	.word	0x40023800
 801a730:	08029ce4 	.word	0x08029ce4
 801a734:	200001e4 	.word	0x200001e4
 801a738:	200001e8 	.word	0x200001e8

0801a73c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a73c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a740:	b094      	sub	sp, #80	; 0x50
 801a742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801a744:	2300      	movs	r3, #0
 801a746:	647b      	str	r3, [r7, #68]	; 0x44
 801a748:	2300      	movs	r3, #0
 801a74a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a74c:	2300      	movs	r3, #0
 801a74e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801a750:	2300      	movs	r3, #0
 801a752:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801a754:	4b79      	ldr	r3, [pc, #484]	; (801a93c <HAL_RCC_GetSysClockFreq+0x200>)
 801a756:	689b      	ldr	r3, [r3, #8]
 801a758:	f003 030c 	and.w	r3, r3, #12
 801a75c:	2b08      	cmp	r3, #8
 801a75e:	d00d      	beq.n	801a77c <HAL_RCC_GetSysClockFreq+0x40>
 801a760:	2b08      	cmp	r3, #8
 801a762:	f200 80e1 	bhi.w	801a928 <HAL_RCC_GetSysClockFreq+0x1ec>
 801a766:	2b00      	cmp	r3, #0
 801a768:	d002      	beq.n	801a770 <HAL_RCC_GetSysClockFreq+0x34>
 801a76a:	2b04      	cmp	r3, #4
 801a76c:	d003      	beq.n	801a776 <HAL_RCC_GetSysClockFreq+0x3a>
 801a76e:	e0db      	b.n	801a928 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801a770:	4b73      	ldr	r3, [pc, #460]	; (801a940 <HAL_RCC_GetSysClockFreq+0x204>)
 801a772:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801a774:	e0db      	b.n	801a92e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801a776:	4b73      	ldr	r3, [pc, #460]	; (801a944 <HAL_RCC_GetSysClockFreq+0x208>)
 801a778:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a77a:	e0d8      	b.n	801a92e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801a77c:	4b6f      	ldr	r3, [pc, #444]	; (801a93c <HAL_RCC_GetSysClockFreq+0x200>)
 801a77e:	685b      	ldr	r3, [r3, #4]
 801a780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a784:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801a786:	4b6d      	ldr	r3, [pc, #436]	; (801a93c <HAL_RCC_GetSysClockFreq+0x200>)
 801a788:	685b      	ldr	r3, [r3, #4]
 801a78a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d063      	beq.n	801a85a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a792:	4b6a      	ldr	r3, [pc, #424]	; (801a93c <HAL_RCC_GetSysClockFreq+0x200>)
 801a794:	685b      	ldr	r3, [r3, #4]
 801a796:	099b      	lsrs	r3, r3, #6
 801a798:	2200      	movs	r2, #0
 801a79a:	63bb      	str	r3, [r7, #56]	; 0x38
 801a79c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801a79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a7a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a7a4:	633b      	str	r3, [r7, #48]	; 0x30
 801a7a6:	2300      	movs	r3, #0
 801a7a8:	637b      	str	r3, [r7, #52]	; 0x34
 801a7aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801a7ae:	4622      	mov	r2, r4
 801a7b0:	462b      	mov	r3, r5
 801a7b2:	f04f 0000 	mov.w	r0, #0
 801a7b6:	f04f 0100 	mov.w	r1, #0
 801a7ba:	0159      	lsls	r1, r3, #5
 801a7bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801a7c0:	0150      	lsls	r0, r2, #5
 801a7c2:	4602      	mov	r2, r0
 801a7c4:	460b      	mov	r3, r1
 801a7c6:	4621      	mov	r1, r4
 801a7c8:	1a51      	subs	r1, r2, r1
 801a7ca:	6139      	str	r1, [r7, #16]
 801a7cc:	4629      	mov	r1, r5
 801a7ce:	eb63 0301 	sbc.w	r3, r3, r1
 801a7d2:	617b      	str	r3, [r7, #20]
 801a7d4:	f04f 0200 	mov.w	r2, #0
 801a7d8:	f04f 0300 	mov.w	r3, #0
 801a7dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801a7e0:	4659      	mov	r1, fp
 801a7e2:	018b      	lsls	r3, r1, #6
 801a7e4:	4651      	mov	r1, sl
 801a7e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801a7ea:	4651      	mov	r1, sl
 801a7ec:	018a      	lsls	r2, r1, #6
 801a7ee:	4651      	mov	r1, sl
 801a7f0:	ebb2 0801 	subs.w	r8, r2, r1
 801a7f4:	4659      	mov	r1, fp
 801a7f6:	eb63 0901 	sbc.w	r9, r3, r1
 801a7fa:	f04f 0200 	mov.w	r2, #0
 801a7fe:	f04f 0300 	mov.w	r3, #0
 801a802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801a806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801a80a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801a80e:	4690      	mov	r8, r2
 801a810:	4699      	mov	r9, r3
 801a812:	4623      	mov	r3, r4
 801a814:	eb18 0303 	adds.w	r3, r8, r3
 801a818:	60bb      	str	r3, [r7, #8]
 801a81a:	462b      	mov	r3, r5
 801a81c:	eb49 0303 	adc.w	r3, r9, r3
 801a820:	60fb      	str	r3, [r7, #12]
 801a822:	f04f 0200 	mov.w	r2, #0
 801a826:	f04f 0300 	mov.w	r3, #0
 801a82a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801a82e:	4629      	mov	r1, r5
 801a830:	024b      	lsls	r3, r1, #9
 801a832:	4621      	mov	r1, r4
 801a834:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801a838:	4621      	mov	r1, r4
 801a83a:	024a      	lsls	r2, r1, #9
 801a83c:	4610      	mov	r0, r2
 801a83e:	4619      	mov	r1, r3
 801a840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a842:	2200      	movs	r2, #0
 801a844:	62bb      	str	r3, [r7, #40]	; 0x28
 801a846:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801a84c:	f7e6 f9d4 	bl	8000bf8 <__aeabi_uldivmod>
 801a850:	4602      	mov	r2, r0
 801a852:	460b      	mov	r3, r1
 801a854:	4613      	mov	r3, r2
 801a856:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a858:	e058      	b.n	801a90c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a85a:	4b38      	ldr	r3, [pc, #224]	; (801a93c <HAL_RCC_GetSysClockFreq+0x200>)
 801a85c:	685b      	ldr	r3, [r3, #4]
 801a85e:	099b      	lsrs	r3, r3, #6
 801a860:	2200      	movs	r2, #0
 801a862:	4618      	mov	r0, r3
 801a864:	4611      	mov	r1, r2
 801a866:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801a86a:	623b      	str	r3, [r7, #32]
 801a86c:	2300      	movs	r3, #0
 801a86e:	627b      	str	r3, [r7, #36]	; 0x24
 801a870:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801a874:	4642      	mov	r2, r8
 801a876:	464b      	mov	r3, r9
 801a878:	f04f 0000 	mov.w	r0, #0
 801a87c:	f04f 0100 	mov.w	r1, #0
 801a880:	0159      	lsls	r1, r3, #5
 801a882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801a886:	0150      	lsls	r0, r2, #5
 801a888:	4602      	mov	r2, r0
 801a88a:	460b      	mov	r3, r1
 801a88c:	4641      	mov	r1, r8
 801a88e:	ebb2 0a01 	subs.w	sl, r2, r1
 801a892:	4649      	mov	r1, r9
 801a894:	eb63 0b01 	sbc.w	fp, r3, r1
 801a898:	f04f 0200 	mov.w	r2, #0
 801a89c:	f04f 0300 	mov.w	r3, #0
 801a8a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801a8a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801a8a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801a8ac:	ebb2 040a 	subs.w	r4, r2, sl
 801a8b0:	eb63 050b 	sbc.w	r5, r3, fp
 801a8b4:	f04f 0200 	mov.w	r2, #0
 801a8b8:	f04f 0300 	mov.w	r3, #0
 801a8bc:	00eb      	lsls	r3, r5, #3
 801a8be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801a8c2:	00e2      	lsls	r2, r4, #3
 801a8c4:	4614      	mov	r4, r2
 801a8c6:	461d      	mov	r5, r3
 801a8c8:	4643      	mov	r3, r8
 801a8ca:	18e3      	adds	r3, r4, r3
 801a8cc:	603b      	str	r3, [r7, #0]
 801a8ce:	464b      	mov	r3, r9
 801a8d0:	eb45 0303 	adc.w	r3, r5, r3
 801a8d4:	607b      	str	r3, [r7, #4]
 801a8d6:	f04f 0200 	mov.w	r2, #0
 801a8da:	f04f 0300 	mov.w	r3, #0
 801a8de:	e9d7 4500 	ldrd	r4, r5, [r7]
 801a8e2:	4629      	mov	r1, r5
 801a8e4:	028b      	lsls	r3, r1, #10
 801a8e6:	4621      	mov	r1, r4
 801a8e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801a8ec:	4621      	mov	r1, r4
 801a8ee:	028a      	lsls	r2, r1, #10
 801a8f0:	4610      	mov	r0, r2
 801a8f2:	4619      	mov	r1, r3
 801a8f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a8f6:	2200      	movs	r2, #0
 801a8f8:	61bb      	str	r3, [r7, #24]
 801a8fa:	61fa      	str	r2, [r7, #28]
 801a8fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a900:	f7e6 f97a 	bl	8000bf8 <__aeabi_uldivmod>
 801a904:	4602      	mov	r2, r0
 801a906:	460b      	mov	r3, r1
 801a908:	4613      	mov	r3, r2
 801a90a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801a90c:	4b0b      	ldr	r3, [pc, #44]	; (801a93c <HAL_RCC_GetSysClockFreq+0x200>)
 801a90e:	685b      	ldr	r3, [r3, #4]
 801a910:	0c1b      	lsrs	r3, r3, #16
 801a912:	f003 0303 	and.w	r3, r3, #3
 801a916:	3301      	adds	r3, #1
 801a918:	005b      	lsls	r3, r3, #1
 801a91a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801a91c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a91e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a920:	fbb2 f3f3 	udiv	r3, r2, r3
 801a924:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a926:	e002      	b.n	801a92e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801a928:	4b05      	ldr	r3, [pc, #20]	; (801a940 <HAL_RCC_GetSysClockFreq+0x204>)
 801a92a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a92c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801a92e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801a930:	4618      	mov	r0, r3
 801a932:	3750      	adds	r7, #80	; 0x50
 801a934:	46bd      	mov	sp, r7
 801a936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a93a:	bf00      	nop
 801a93c:	40023800 	.word	0x40023800
 801a940:	00f42400 	.word	0x00f42400
 801a944:	007a1200 	.word	0x007a1200

0801a948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801a948:	b480      	push	{r7}
 801a94a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801a94c:	4b03      	ldr	r3, [pc, #12]	; (801a95c <HAL_RCC_GetHCLKFreq+0x14>)
 801a94e:	681b      	ldr	r3, [r3, #0]
}
 801a950:	4618      	mov	r0, r3
 801a952:	46bd      	mov	sp, r7
 801a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a958:	4770      	bx	lr
 801a95a:	bf00      	nop
 801a95c:	200001e4 	.word	0x200001e4

0801a960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801a960:	b580      	push	{r7, lr}
 801a962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801a964:	f7ff fff0 	bl	801a948 <HAL_RCC_GetHCLKFreq>
 801a968:	4602      	mov	r2, r0
 801a96a:	4b05      	ldr	r3, [pc, #20]	; (801a980 <HAL_RCC_GetPCLK1Freq+0x20>)
 801a96c:	689b      	ldr	r3, [r3, #8]
 801a96e:	0a9b      	lsrs	r3, r3, #10
 801a970:	f003 0307 	and.w	r3, r3, #7
 801a974:	4903      	ldr	r1, [pc, #12]	; (801a984 <HAL_RCC_GetPCLK1Freq+0x24>)
 801a976:	5ccb      	ldrb	r3, [r1, r3]
 801a978:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a97c:	4618      	mov	r0, r3
 801a97e:	bd80      	pop	{r7, pc}
 801a980:	40023800 	.word	0x40023800
 801a984:	08029cf4 	.word	0x08029cf4

0801a988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801a988:	b580      	push	{r7, lr}
 801a98a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801a98c:	f7ff ffdc 	bl	801a948 <HAL_RCC_GetHCLKFreq>
 801a990:	4602      	mov	r2, r0
 801a992:	4b05      	ldr	r3, [pc, #20]	; (801a9a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 801a994:	689b      	ldr	r3, [r3, #8]
 801a996:	0b5b      	lsrs	r3, r3, #13
 801a998:	f003 0307 	and.w	r3, r3, #7
 801a99c:	4903      	ldr	r1, [pc, #12]	; (801a9ac <HAL_RCC_GetPCLK2Freq+0x24>)
 801a99e:	5ccb      	ldrb	r3, [r1, r3]
 801a9a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	bd80      	pop	{r7, pc}
 801a9a8:	40023800 	.word	0x40023800
 801a9ac:	08029cf4 	.word	0x08029cf4

0801a9b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a9b0:	b580      	push	{r7, lr}
 801a9b2:	b082      	sub	sp, #8
 801a9b4:	af00      	add	r7, sp, #0
 801a9b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d101      	bne.n	801a9c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a9be:	2301      	movs	r3, #1
 801a9c0:	e041      	b.n	801aa46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a9c8:	b2db      	uxtb	r3, r3
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d106      	bne.n	801a9dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a9d6:	6878      	ldr	r0, [r7, #4]
 801a9d8:	f7fb fa86 	bl	8015ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	2202      	movs	r2, #2
 801a9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	681a      	ldr	r2, [r3, #0]
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	3304      	adds	r3, #4
 801a9ec:	4619      	mov	r1, r3
 801a9ee:	4610      	mov	r0, r2
 801a9f0:	f000 fcae 	bl	801b350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	2201      	movs	r2, #1
 801a9f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	2201      	movs	r2, #1
 801aa00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	2201      	movs	r2, #1
 801aa08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	2201      	movs	r2, #1
 801aa10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	2201      	movs	r2, #1
 801aa18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	2201      	movs	r2, #1
 801aa20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	2201      	movs	r2, #1
 801aa28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	2201      	movs	r2, #1
 801aa30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	2201      	movs	r2, #1
 801aa38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	2201      	movs	r2, #1
 801aa40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801aa44:	2300      	movs	r3, #0
}
 801aa46:	4618      	mov	r0, r3
 801aa48:	3708      	adds	r7, #8
 801aa4a:	46bd      	mov	sp, r7
 801aa4c:	bd80      	pop	{r7, pc}
	...

0801aa50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801aa50:	b480      	push	{r7}
 801aa52:	b085      	sub	sp, #20
 801aa54:	af00      	add	r7, sp, #0
 801aa56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801aa5e:	b2db      	uxtb	r3, r3
 801aa60:	2b01      	cmp	r3, #1
 801aa62:	d001      	beq.n	801aa68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801aa64:	2301      	movs	r3, #1
 801aa66:	e03c      	b.n	801aae2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	2202      	movs	r2, #2
 801aa6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	4a1e      	ldr	r2, [pc, #120]	; (801aaf0 <HAL_TIM_Base_Start+0xa0>)
 801aa76:	4293      	cmp	r3, r2
 801aa78:	d018      	beq.n	801aaac <HAL_TIM_Base_Start+0x5c>
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801aa82:	d013      	beq.n	801aaac <HAL_TIM_Base_Start+0x5c>
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	4a1a      	ldr	r2, [pc, #104]	; (801aaf4 <HAL_TIM_Base_Start+0xa4>)
 801aa8a:	4293      	cmp	r3, r2
 801aa8c:	d00e      	beq.n	801aaac <HAL_TIM_Base_Start+0x5c>
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	4a19      	ldr	r2, [pc, #100]	; (801aaf8 <HAL_TIM_Base_Start+0xa8>)
 801aa94:	4293      	cmp	r3, r2
 801aa96:	d009      	beq.n	801aaac <HAL_TIM_Base_Start+0x5c>
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	4a17      	ldr	r2, [pc, #92]	; (801aafc <HAL_TIM_Base_Start+0xac>)
 801aa9e:	4293      	cmp	r3, r2
 801aaa0:	d004      	beq.n	801aaac <HAL_TIM_Base_Start+0x5c>
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	4a16      	ldr	r2, [pc, #88]	; (801ab00 <HAL_TIM_Base_Start+0xb0>)
 801aaa8:	4293      	cmp	r3, r2
 801aaaa:	d111      	bne.n	801aad0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	689b      	ldr	r3, [r3, #8]
 801aab2:	f003 0307 	and.w	r3, r3, #7
 801aab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	2b06      	cmp	r3, #6
 801aabc:	d010      	beq.n	801aae0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	681a      	ldr	r2, [r3, #0]
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	f042 0201 	orr.w	r2, r2, #1
 801aacc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801aace:	e007      	b.n	801aae0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	681a      	ldr	r2, [r3, #0]
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	f042 0201 	orr.w	r2, r2, #1
 801aade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801aae0:	2300      	movs	r3, #0
}
 801aae2:	4618      	mov	r0, r3
 801aae4:	3714      	adds	r7, #20
 801aae6:	46bd      	mov	sp, r7
 801aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaec:	4770      	bx	lr
 801aaee:	bf00      	nop
 801aaf0:	40010000 	.word	0x40010000
 801aaf4:	40000400 	.word	0x40000400
 801aaf8:	40000800 	.word	0x40000800
 801aafc:	40000c00 	.word	0x40000c00
 801ab00:	40014000 	.word	0x40014000

0801ab04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801ab04:	b480      	push	{r7}
 801ab06:	b085      	sub	sp, #20
 801ab08:	af00      	add	r7, sp, #0
 801ab0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ab12:	b2db      	uxtb	r3, r3
 801ab14:	2b01      	cmp	r3, #1
 801ab16:	d001      	beq.n	801ab1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801ab18:	2301      	movs	r3, #1
 801ab1a:	e044      	b.n	801aba6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	2202      	movs	r2, #2
 801ab20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	68da      	ldr	r2, [r3, #12]
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	f042 0201 	orr.w	r2, r2, #1
 801ab32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	4a1e      	ldr	r2, [pc, #120]	; (801abb4 <HAL_TIM_Base_Start_IT+0xb0>)
 801ab3a:	4293      	cmp	r3, r2
 801ab3c:	d018      	beq.n	801ab70 <HAL_TIM_Base_Start_IT+0x6c>
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ab46:	d013      	beq.n	801ab70 <HAL_TIM_Base_Start_IT+0x6c>
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	4a1a      	ldr	r2, [pc, #104]	; (801abb8 <HAL_TIM_Base_Start_IT+0xb4>)
 801ab4e:	4293      	cmp	r3, r2
 801ab50:	d00e      	beq.n	801ab70 <HAL_TIM_Base_Start_IT+0x6c>
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	4a19      	ldr	r2, [pc, #100]	; (801abbc <HAL_TIM_Base_Start_IT+0xb8>)
 801ab58:	4293      	cmp	r3, r2
 801ab5a:	d009      	beq.n	801ab70 <HAL_TIM_Base_Start_IT+0x6c>
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	4a17      	ldr	r2, [pc, #92]	; (801abc0 <HAL_TIM_Base_Start_IT+0xbc>)
 801ab62:	4293      	cmp	r3, r2
 801ab64:	d004      	beq.n	801ab70 <HAL_TIM_Base_Start_IT+0x6c>
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	4a16      	ldr	r2, [pc, #88]	; (801abc4 <HAL_TIM_Base_Start_IT+0xc0>)
 801ab6c:	4293      	cmp	r3, r2
 801ab6e:	d111      	bne.n	801ab94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	689b      	ldr	r3, [r3, #8]
 801ab76:	f003 0307 	and.w	r3, r3, #7
 801ab7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	2b06      	cmp	r3, #6
 801ab80:	d010      	beq.n	801aba4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	681a      	ldr	r2, [r3, #0]
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	f042 0201 	orr.w	r2, r2, #1
 801ab90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ab92:	e007      	b.n	801aba4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	681a      	ldr	r2, [r3, #0]
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	f042 0201 	orr.w	r2, r2, #1
 801aba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801aba4:	2300      	movs	r3, #0
}
 801aba6:	4618      	mov	r0, r3
 801aba8:	3714      	adds	r7, #20
 801abaa:	46bd      	mov	sp, r7
 801abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb0:	4770      	bx	lr
 801abb2:	bf00      	nop
 801abb4:	40010000 	.word	0x40010000
 801abb8:	40000400 	.word	0x40000400
 801abbc:	40000800 	.word	0x40000800
 801abc0:	40000c00 	.word	0x40000c00
 801abc4:	40014000 	.word	0x40014000

0801abc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801abc8:	b580      	push	{r7, lr}
 801abca:	b082      	sub	sp, #8
 801abcc:	af00      	add	r7, sp, #0
 801abce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d101      	bne.n	801abda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801abd6:	2301      	movs	r3, #1
 801abd8:	e041      	b.n	801ac5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801abe0:	b2db      	uxtb	r3, r3
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d106      	bne.n	801abf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	2200      	movs	r2, #0
 801abea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801abee:	6878      	ldr	r0, [r7, #4]
 801abf0:	f000 f839 	bl	801ac66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	2202      	movs	r2, #2
 801abf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	681a      	ldr	r2, [r3, #0]
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	3304      	adds	r3, #4
 801ac04:	4619      	mov	r1, r3
 801ac06:	4610      	mov	r0, r2
 801ac08:	f000 fba2 	bl	801b350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	2201      	movs	r2, #1
 801ac10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	2201      	movs	r2, #1
 801ac18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	2201      	movs	r2, #1
 801ac20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	2201      	movs	r2, #1
 801ac28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	2201      	movs	r2, #1
 801ac30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	2201      	movs	r2, #1
 801ac38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	2201      	movs	r2, #1
 801ac40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	2201      	movs	r2, #1
 801ac48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	2201      	movs	r2, #1
 801ac50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	2201      	movs	r2, #1
 801ac58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ac5c:	2300      	movs	r3, #0
}
 801ac5e:	4618      	mov	r0, r3
 801ac60:	3708      	adds	r7, #8
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bd80      	pop	{r7, pc}

0801ac66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801ac66:	b480      	push	{r7}
 801ac68:	b083      	sub	sp, #12
 801ac6a:	af00      	add	r7, sp, #0
 801ac6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801ac6e:	bf00      	nop
 801ac70:	370c      	adds	r7, #12
 801ac72:	46bd      	mov	sp, r7
 801ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac78:	4770      	bx	lr
	...

0801ac7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ac7c:	b580      	push	{r7, lr}
 801ac7e:	b084      	sub	sp, #16
 801ac80:	af00      	add	r7, sp, #0
 801ac82:	6078      	str	r0, [r7, #4]
 801ac84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801ac86:	683b      	ldr	r3, [r7, #0]
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d109      	bne.n	801aca0 <HAL_TIM_PWM_Start+0x24>
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ac92:	b2db      	uxtb	r3, r3
 801ac94:	2b01      	cmp	r3, #1
 801ac96:	bf14      	ite	ne
 801ac98:	2301      	movne	r3, #1
 801ac9a:	2300      	moveq	r3, #0
 801ac9c:	b2db      	uxtb	r3, r3
 801ac9e:	e022      	b.n	801ace6 <HAL_TIM_PWM_Start+0x6a>
 801aca0:	683b      	ldr	r3, [r7, #0]
 801aca2:	2b04      	cmp	r3, #4
 801aca4:	d109      	bne.n	801acba <HAL_TIM_PWM_Start+0x3e>
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801acac:	b2db      	uxtb	r3, r3
 801acae:	2b01      	cmp	r3, #1
 801acb0:	bf14      	ite	ne
 801acb2:	2301      	movne	r3, #1
 801acb4:	2300      	moveq	r3, #0
 801acb6:	b2db      	uxtb	r3, r3
 801acb8:	e015      	b.n	801ace6 <HAL_TIM_PWM_Start+0x6a>
 801acba:	683b      	ldr	r3, [r7, #0]
 801acbc:	2b08      	cmp	r3, #8
 801acbe:	d109      	bne.n	801acd4 <HAL_TIM_PWM_Start+0x58>
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801acc6:	b2db      	uxtb	r3, r3
 801acc8:	2b01      	cmp	r3, #1
 801acca:	bf14      	ite	ne
 801accc:	2301      	movne	r3, #1
 801acce:	2300      	moveq	r3, #0
 801acd0:	b2db      	uxtb	r3, r3
 801acd2:	e008      	b.n	801ace6 <HAL_TIM_PWM_Start+0x6a>
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801acda:	b2db      	uxtb	r3, r3
 801acdc:	2b01      	cmp	r3, #1
 801acde:	bf14      	ite	ne
 801ace0:	2301      	movne	r3, #1
 801ace2:	2300      	moveq	r3, #0
 801ace4:	b2db      	uxtb	r3, r3
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d001      	beq.n	801acee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801acea:	2301      	movs	r3, #1
 801acec:	e068      	b.n	801adc0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801acee:	683b      	ldr	r3, [r7, #0]
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d104      	bne.n	801acfe <HAL_TIM_PWM_Start+0x82>
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	2202      	movs	r2, #2
 801acf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801acfc:	e013      	b.n	801ad26 <HAL_TIM_PWM_Start+0xaa>
 801acfe:	683b      	ldr	r3, [r7, #0]
 801ad00:	2b04      	cmp	r3, #4
 801ad02:	d104      	bne.n	801ad0e <HAL_TIM_PWM_Start+0x92>
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	2202      	movs	r2, #2
 801ad08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ad0c:	e00b      	b.n	801ad26 <HAL_TIM_PWM_Start+0xaa>
 801ad0e:	683b      	ldr	r3, [r7, #0]
 801ad10:	2b08      	cmp	r3, #8
 801ad12:	d104      	bne.n	801ad1e <HAL_TIM_PWM_Start+0xa2>
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	2202      	movs	r2, #2
 801ad18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ad1c:	e003      	b.n	801ad26 <HAL_TIM_PWM_Start+0xaa>
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	2202      	movs	r2, #2
 801ad22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	2201      	movs	r2, #1
 801ad2c:	6839      	ldr	r1, [r7, #0]
 801ad2e:	4618      	mov	r0, r3
 801ad30:	f000 fdb4 	bl	801b89c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	4a23      	ldr	r2, [pc, #140]	; (801adc8 <HAL_TIM_PWM_Start+0x14c>)
 801ad3a:	4293      	cmp	r3, r2
 801ad3c:	d107      	bne.n	801ad4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ad4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	4a1d      	ldr	r2, [pc, #116]	; (801adc8 <HAL_TIM_PWM_Start+0x14c>)
 801ad54:	4293      	cmp	r3, r2
 801ad56:	d018      	beq.n	801ad8a <HAL_TIM_PWM_Start+0x10e>
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ad60:	d013      	beq.n	801ad8a <HAL_TIM_PWM_Start+0x10e>
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	4a19      	ldr	r2, [pc, #100]	; (801adcc <HAL_TIM_PWM_Start+0x150>)
 801ad68:	4293      	cmp	r3, r2
 801ad6a:	d00e      	beq.n	801ad8a <HAL_TIM_PWM_Start+0x10e>
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	4a17      	ldr	r2, [pc, #92]	; (801add0 <HAL_TIM_PWM_Start+0x154>)
 801ad72:	4293      	cmp	r3, r2
 801ad74:	d009      	beq.n	801ad8a <HAL_TIM_PWM_Start+0x10e>
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	4a16      	ldr	r2, [pc, #88]	; (801add4 <HAL_TIM_PWM_Start+0x158>)
 801ad7c:	4293      	cmp	r3, r2
 801ad7e:	d004      	beq.n	801ad8a <HAL_TIM_PWM_Start+0x10e>
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	4a14      	ldr	r2, [pc, #80]	; (801add8 <HAL_TIM_PWM_Start+0x15c>)
 801ad86:	4293      	cmp	r3, r2
 801ad88:	d111      	bne.n	801adae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	689b      	ldr	r3, [r3, #8]
 801ad90:	f003 0307 	and.w	r3, r3, #7
 801ad94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	2b06      	cmp	r3, #6
 801ad9a:	d010      	beq.n	801adbe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	681a      	ldr	r2, [r3, #0]
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	f042 0201 	orr.w	r2, r2, #1
 801adaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801adac:	e007      	b.n	801adbe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	681a      	ldr	r2, [r3, #0]
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	f042 0201 	orr.w	r2, r2, #1
 801adbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801adbe:	2300      	movs	r3, #0
}
 801adc0:	4618      	mov	r0, r3
 801adc2:	3710      	adds	r7, #16
 801adc4:	46bd      	mov	sp, r7
 801adc6:	bd80      	pop	{r7, pc}
 801adc8:	40010000 	.word	0x40010000
 801adcc:	40000400 	.word	0x40000400
 801add0:	40000800 	.word	0x40000800
 801add4:	40000c00 	.word	0x40000c00
 801add8:	40014000 	.word	0x40014000

0801addc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801addc:	b580      	push	{r7, lr}
 801adde:	b082      	sub	sp, #8
 801ade0:	af00      	add	r7, sp, #0
 801ade2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	691b      	ldr	r3, [r3, #16]
 801adea:	f003 0302 	and.w	r3, r3, #2
 801adee:	2b02      	cmp	r3, #2
 801adf0:	d122      	bne.n	801ae38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	68db      	ldr	r3, [r3, #12]
 801adf8:	f003 0302 	and.w	r3, r3, #2
 801adfc:	2b02      	cmp	r3, #2
 801adfe:	d11b      	bne.n	801ae38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	f06f 0202 	mvn.w	r2, #2
 801ae08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	2201      	movs	r2, #1
 801ae0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	699b      	ldr	r3, [r3, #24]
 801ae16:	f003 0303 	and.w	r3, r3, #3
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	d003      	beq.n	801ae26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801ae1e:	6878      	ldr	r0, [r7, #4]
 801ae20:	f000 fa77 	bl	801b312 <HAL_TIM_IC_CaptureCallback>
 801ae24:	e005      	b.n	801ae32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801ae26:	6878      	ldr	r0, [r7, #4]
 801ae28:	f000 fa69 	bl	801b2fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ae2c:	6878      	ldr	r0, [r7, #4]
 801ae2e:	f000 fa7a 	bl	801b326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	2200      	movs	r2, #0
 801ae36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	691b      	ldr	r3, [r3, #16]
 801ae3e:	f003 0304 	and.w	r3, r3, #4
 801ae42:	2b04      	cmp	r3, #4
 801ae44:	d122      	bne.n	801ae8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	68db      	ldr	r3, [r3, #12]
 801ae4c:	f003 0304 	and.w	r3, r3, #4
 801ae50:	2b04      	cmp	r3, #4
 801ae52:	d11b      	bne.n	801ae8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	f06f 0204 	mvn.w	r2, #4
 801ae5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	2202      	movs	r2, #2
 801ae62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	699b      	ldr	r3, [r3, #24]
 801ae6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d003      	beq.n	801ae7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ae72:	6878      	ldr	r0, [r7, #4]
 801ae74:	f000 fa4d 	bl	801b312 <HAL_TIM_IC_CaptureCallback>
 801ae78:	e005      	b.n	801ae86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ae7a:	6878      	ldr	r0, [r7, #4]
 801ae7c:	f000 fa3f 	bl	801b2fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ae80:	6878      	ldr	r0, [r7, #4]
 801ae82:	f000 fa50 	bl	801b326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	2200      	movs	r2, #0
 801ae8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	691b      	ldr	r3, [r3, #16]
 801ae92:	f003 0308 	and.w	r3, r3, #8
 801ae96:	2b08      	cmp	r3, #8
 801ae98:	d122      	bne.n	801aee0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	68db      	ldr	r3, [r3, #12]
 801aea0:	f003 0308 	and.w	r3, r3, #8
 801aea4:	2b08      	cmp	r3, #8
 801aea6:	d11b      	bne.n	801aee0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	f06f 0208 	mvn.w	r2, #8
 801aeb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	2204      	movs	r2, #4
 801aeb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	69db      	ldr	r3, [r3, #28]
 801aebe:	f003 0303 	and.w	r3, r3, #3
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d003      	beq.n	801aece <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801aec6:	6878      	ldr	r0, [r7, #4]
 801aec8:	f000 fa23 	bl	801b312 <HAL_TIM_IC_CaptureCallback>
 801aecc:	e005      	b.n	801aeda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801aece:	6878      	ldr	r0, [r7, #4]
 801aed0:	f000 fa15 	bl	801b2fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801aed4:	6878      	ldr	r0, [r7, #4]
 801aed6:	f000 fa26 	bl	801b326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	2200      	movs	r2, #0
 801aede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	691b      	ldr	r3, [r3, #16]
 801aee6:	f003 0310 	and.w	r3, r3, #16
 801aeea:	2b10      	cmp	r3, #16
 801aeec:	d122      	bne.n	801af34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	68db      	ldr	r3, [r3, #12]
 801aef4:	f003 0310 	and.w	r3, r3, #16
 801aef8:	2b10      	cmp	r3, #16
 801aefa:	d11b      	bne.n	801af34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	f06f 0210 	mvn.w	r2, #16
 801af04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	2208      	movs	r2, #8
 801af0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	69db      	ldr	r3, [r3, #28]
 801af12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801af16:	2b00      	cmp	r3, #0
 801af18:	d003      	beq.n	801af22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801af1a:	6878      	ldr	r0, [r7, #4]
 801af1c:	f000 f9f9 	bl	801b312 <HAL_TIM_IC_CaptureCallback>
 801af20:	e005      	b.n	801af2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801af22:	6878      	ldr	r0, [r7, #4]
 801af24:	f000 f9eb 	bl	801b2fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801af28:	6878      	ldr	r0, [r7, #4]
 801af2a:	f000 f9fc 	bl	801b326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	2200      	movs	r2, #0
 801af32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	691b      	ldr	r3, [r3, #16]
 801af3a:	f003 0301 	and.w	r3, r3, #1
 801af3e:	2b01      	cmp	r3, #1
 801af40:	d10e      	bne.n	801af60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	68db      	ldr	r3, [r3, #12]
 801af48:	f003 0301 	and.w	r3, r3, #1
 801af4c:	2b01      	cmp	r3, #1
 801af4e:	d107      	bne.n	801af60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	f06f 0201 	mvn.w	r2, #1
 801af58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801af5a:	6878      	ldr	r0, [r7, #4]
 801af5c:	f7e9 f83e 	bl	8003fdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	691b      	ldr	r3, [r3, #16]
 801af66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801af6a:	2b80      	cmp	r3, #128	; 0x80
 801af6c:	d10e      	bne.n	801af8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	68db      	ldr	r3, [r3, #12]
 801af74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801af78:	2b80      	cmp	r3, #128	; 0x80
 801af7a:	d107      	bne.n	801af8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801af84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801af86:	6878      	ldr	r0, [r7, #4]
 801af88:	f000 fd26 	bl	801b9d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	691b      	ldr	r3, [r3, #16]
 801af92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801af96:	2b40      	cmp	r3, #64	; 0x40
 801af98:	d10e      	bne.n	801afb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	68db      	ldr	r3, [r3, #12]
 801afa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801afa4:	2b40      	cmp	r3, #64	; 0x40
 801afa6:	d107      	bne.n	801afb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801afb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801afb2:	6878      	ldr	r0, [r7, #4]
 801afb4:	f000 f9c1 	bl	801b33a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	691b      	ldr	r3, [r3, #16]
 801afbe:	f003 0320 	and.w	r3, r3, #32
 801afc2:	2b20      	cmp	r3, #32
 801afc4:	d10e      	bne.n	801afe4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	68db      	ldr	r3, [r3, #12]
 801afcc:	f003 0320 	and.w	r3, r3, #32
 801afd0:	2b20      	cmp	r3, #32
 801afd2:	d107      	bne.n	801afe4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	f06f 0220 	mvn.w	r2, #32
 801afdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801afde:	6878      	ldr	r0, [r7, #4]
 801afe0:	f000 fcf0 	bl	801b9c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801afe4:	bf00      	nop
 801afe6:	3708      	adds	r7, #8
 801afe8:	46bd      	mov	sp, r7
 801afea:	bd80      	pop	{r7, pc}

0801afec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801afec:	b580      	push	{r7, lr}
 801afee:	b086      	sub	sp, #24
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	60f8      	str	r0, [r7, #12]
 801aff4:	60b9      	str	r1, [r7, #8]
 801aff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801aff8:	2300      	movs	r3, #0
 801affa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b002:	2b01      	cmp	r3, #1
 801b004:	d101      	bne.n	801b00a <HAL_TIM_PWM_ConfigChannel+0x1e>
 801b006:	2302      	movs	r3, #2
 801b008:	e0ae      	b.n	801b168 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	2201      	movs	r2, #1
 801b00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	2b0c      	cmp	r3, #12
 801b016:	f200 809f 	bhi.w	801b158 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801b01a:	a201      	add	r2, pc, #4	; (adr r2, 801b020 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801b01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b020:	0801b055 	.word	0x0801b055
 801b024:	0801b159 	.word	0x0801b159
 801b028:	0801b159 	.word	0x0801b159
 801b02c:	0801b159 	.word	0x0801b159
 801b030:	0801b095 	.word	0x0801b095
 801b034:	0801b159 	.word	0x0801b159
 801b038:	0801b159 	.word	0x0801b159
 801b03c:	0801b159 	.word	0x0801b159
 801b040:	0801b0d7 	.word	0x0801b0d7
 801b044:	0801b159 	.word	0x0801b159
 801b048:	0801b159 	.word	0x0801b159
 801b04c:	0801b159 	.word	0x0801b159
 801b050:	0801b117 	.word	0x0801b117
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801b054:	68fb      	ldr	r3, [r7, #12]
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	68b9      	ldr	r1, [r7, #8]
 801b05a:	4618      	mov	r0, r3
 801b05c:	f000 f9f8 	bl	801b450 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	699a      	ldr	r2, [r3, #24]
 801b066:	68fb      	ldr	r3, [r7, #12]
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	f042 0208 	orr.w	r2, r2, #8
 801b06e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801b070:	68fb      	ldr	r3, [r7, #12]
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	699a      	ldr	r2, [r3, #24]
 801b076:	68fb      	ldr	r3, [r7, #12]
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	f022 0204 	bic.w	r2, r2, #4
 801b07e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	6999      	ldr	r1, [r3, #24]
 801b086:	68bb      	ldr	r3, [r7, #8]
 801b088:	691a      	ldr	r2, [r3, #16]
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	430a      	orrs	r2, r1
 801b090:	619a      	str	r2, [r3, #24]
      break;
 801b092:	e064      	b.n	801b15e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801b094:	68fb      	ldr	r3, [r7, #12]
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	68b9      	ldr	r1, [r7, #8]
 801b09a:	4618      	mov	r0, r3
 801b09c:	f000 fa3e 	bl	801b51c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	699a      	ldr	r2, [r3, #24]
 801b0a6:	68fb      	ldr	r3, [r7, #12]
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b0ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801b0b0:	68fb      	ldr	r3, [r7, #12]
 801b0b2:	681b      	ldr	r3, [r3, #0]
 801b0b4:	699a      	ldr	r2, [r3, #24]
 801b0b6:	68fb      	ldr	r3, [r7, #12]
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b0be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	6999      	ldr	r1, [r3, #24]
 801b0c6:	68bb      	ldr	r3, [r7, #8]
 801b0c8:	691b      	ldr	r3, [r3, #16]
 801b0ca:	021a      	lsls	r2, r3, #8
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	681b      	ldr	r3, [r3, #0]
 801b0d0:	430a      	orrs	r2, r1
 801b0d2:	619a      	str	r2, [r3, #24]
      break;
 801b0d4:	e043      	b.n	801b15e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801b0d6:	68fb      	ldr	r3, [r7, #12]
 801b0d8:	681b      	ldr	r3, [r3, #0]
 801b0da:	68b9      	ldr	r1, [r7, #8]
 801b0dc:	4618      	mov	r0, r3
 801b0de:	f000 fa89 	bl	801b5f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	69da      	ldr	r2, [r3, #28]
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	f042 0208 	orr.w	r2, r2, #8
 801b0f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	69da      	ldr	r2, [r3, #28]
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	f022 0204 	bic.w	r2, r2, #4
 801b100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801b102:	68fb      	ldr	r3, [r7, #12]
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	69d9      	ldr	r1, [r3, #28]
 801b108:	68bb      	ldr	r3, [r7, #8]
 801b10a:	691a      	ldr	r2, [r3, #16]
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	430a      	orrs	r2, r1
 801b112:	61da      	str	r2, [r3, #28]
      break;
 801b114:	e023      	b.n	801b15e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801b116:	68fb      	ldr	r3, [r7, #12]
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	68b9      	ldr	r1, [r7, #8]
 801b11c:	4618      	mov	r0, r3
 801b11e:	f000 fad3 	bl	801b6c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801b122:	68fb      	ldr	r3, [r7, #12]
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	69da      	ldr	r2, [r3, #28]
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	69da      	ldr	r2, [r3, #28]
 801b138:	68fb      	ldr	r3, [r7, #12]
 801b13a:	681b      	ldr	r3, [r3, #0]
 801b13c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	681b      	ldr	r3, [r3, #0]
 801b146:	69d9      	ldr	r1, [r3, #28]
 801b148:	68bb      	ldr	r3, [r7, #8]
 801b14a:	691b      	ldr	r3, [r3, #16]
 801b14c:	021a      	lsls	r2, r3, #8
 801b14e:	68fb      	ldr	r3, [r7, #12]
 801b150:	681b      	ldr	r3, [r3, #0]
 801b152:	430a      	orrs	r2, r1
 801b154:	61da      	str	r2, [r3, #28]
      break;
 801b156:	e002      	b.n	801b15e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801b158:	2301      	movs	r3, #1
 801b15a:	75fb      	strb	r3, [r7, #23]
      break;
 801b15c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801b15e:	68fb      	ldr	r3, [r7, #12]
 801b160:	2200      	movs	r2, #0
 801b162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b166:	7dfb      	ldrb	r3, [r7, #23]
}
 801b168:	4618      	mov	r0, r3
 801b16a:	3718      	adds	r7, #24
 801b16c:	46bd      	mov	sp, r7
 801b16e:	bd80      	pop	{r7, pc}

0801b170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801b170:	b580      	push	{r7, lr}
 801b172:	b084      	sub	sp, #16
 801b174:	af00      	add	r7, sp, #0
 801b176:	6078      	str	r0, [r7, #4]
 801b178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b17a:	2300      	movs	r3, #0
 801b17c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b184:	2b01      	cmp	r3, #1
 801b186:	d101      	bne.n	801b18c <HAL_TIM_ConfigClockSource+0x1c>
 801b188:	2302      	movs	r3, #2
 801b18a:	e0b4      	b.n	801b2f6 <HAL_TIM_ConfigClockSource+0x186>
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	2201      	movs	r2, #1
 801b190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	2202      	movs	r2, #2
 801b198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	689b      	ldr	r3, [r3, #8]
 801b1a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801b1a4:	68bb      	ldr	r3, [r7, #8]
 801b1a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801b1aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b1ac:	68bb      	ldr	r3, [r7, #8]
 801b1ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b1b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	68ba      	ldr	r2, [r7, #8]
 801b1ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801b1bc:	683b      	ldr	r3, [r7, #0]
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b1c4:	d03e      	beq.n	801b244 <HAL_TIM_ConfigClockSource+0xd4>
 801b1c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b1ca:	f200 8087 	bhi.w	801b2dc <HAL_TIM_ConfigClockSource+0x16c>
 801b1ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b1d2:	f000 8086 	beq.w	801b2e2 <HAL_TIM_ConfigClockSource+0x172>
 801b1d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b1da:	d87f      	bhi.n	801b2dc <HAL_TIM_ConfigClockSource+0x16c>
 801b1dc:	2b70      	cmp	r3, #112	; 0x70
 801b1de:	d01a      	beq.n	801b216 <HAL_TIM_ConfigClockSource+0xa6>
 801b1e0:	2b70      	cmp	r3, #112	; 0x70
 801b1e2:	d87b      	bhi.n	801b2dc <HAL_TIM_ConfigClockSource+0x16c>
 801b1e4:	2b60      	cmp	r3, #96	; 0x60
 801b1e6:	d050      	beq.n	801b28a <HAL_TIM_ConfigClockSource+0x11a>
 801b1e8:	2b60      	cmp	r3, #96	; 0x60
 801b1ea:	d877      	bhi.n	801b2dc <HAL_TIM_ConfigClockSource+0x16c>
 801b1ec:	2b50      	cmp	r3, #80	; 0x50
 801b1ee:	d03c      	beq.n	801b26a <HAL_TIM_ConfigClockSource+0xfa>
 801b1f0:	2b50      	cmp	r3, #80	; 0x50
 801b1f2:	d873      	bhi.n	801b2dc <HAL_TIM_ConfigClockSource+0x16c>
 801b1f4:	2b40      	cmp	r3, #64	; 0x40
 801b1f6:	d058      	beq.n	801b2aa <HAL_TIM_ConfigClockSource+0x13a>
 801b1f8:	2b40      	cmp	r3, #64	; 0x40
 801b1fa:	d86f      	bhi.n	801b2dc <HAL_TIM_ConfigClockSource+0x16c>
 801b1fc:	2b30      	cmp	r3, #48	; 0x30
 801b1fe:	d064      	beq.n	801b2ca <HAL_TIM_ConfigClockSource+0x15a>
 801b200:	2b30      	cmp	r3, #48	; 0x30
 801b202:	d86b      	bhi.n	801b2dc <HAL_TIM_ConfigClockSource+0x16c>
 801b204:	2b20      	cmp	r3, #32
 801b206:	d060      	beq.n	801b2ca <HAL_TIM_ConfigClockSource+0x15a>
 801b208:	2b20      	cmp	r3, #32
 801b20a:	d867      	bhi.n	801b2dc <HAL_TIM_ConfigClockSource+0x16c>
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d05c      	beq.n	801b2ca <HAL_TIM_ConfigClockSource+0x15a>
 801b210:	2b10      	cmp	r3, #16
 801b212:	d05a      	beq.n	801b2ca <HAL_TIM_ConfigClockSource+0x15a>
 801b214:	e062      	b.n	801b2dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	6818      	ldr	r0, [r3, #0]
 801b21a:	683b      	ldr	r3, [r7, #0]
 801b21c:	6899      	ldr	r1, [r3, #8]
 801b21e:	683b      	ldr	r3, [r7, #0]
 801b220:	685a      	ldr	r2, [r3, #4]
 801b222:	683b      	ldr	r3, [r7, #0]
 801b224:	68db      	ldr	r3, [r3, #12]
 801b226:	f000 fb19 	bl	801b85c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	689b      	ldr	r3, [r3, #8]
 801b230:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801b232:	68bb      	ldr	r3, [r7, #8]
 801b234:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801b238:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	68ba      	ldr	r2, [r7, #8]
 801b240:	609a      	str	r2, [r3, #8]
      break;
 801b242:	e04f      	b.n	801b2e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	6818      	ldr	r0, [r3, #0]
 801b248:	683b      	ldr	r3, [r7, #0]
 801b24a:	6899      	ldr	r1, [r3, #8]
 801b24c:	683b      	ldr	r3, [r7, #0]
 801b24e:	685a      	ldr	r2, [r3, #4]
 801b250:	683b      	ldr	r3, [r7, #0]
 801b252:	68db      	ldr	r3, [r3, #12]
 801b254:	f000 fb02 	bl	801b85c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	689a      	ldr	r2, [r3, #8]
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b266:	609a      	str	r2, [r3, #8]
      break;
 801b268:	e03c      	b.n	801b2e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	6818      	ldr	r0, [r3, #0]
 801b26e:	683b      	ldr	r3, [r7, #0]
 801b270:	6859      	ldr	r1, [r3, #4]
 801b272:	683b      	ldr	r3, [r7, #0]
 801b274:	68db      	ldr	r3, [r3, #12]
 801b276:	461a      	mov	r2, r3
 801b278:	f000 fa76 	bl	801b768 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	2150      	movs	r1, #80	; 0x50
 801b282:	4618      	mov	r0, r3
 801b284:	f000 facf 	bl	801b826 <TIM_ITRx_SetConfig>
      break;
 801b288:	e02c      	b.n	801b2e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	6818      	ldr	r0, [r3, #0]
 801b28e:	683b      	ldr	r3, [r7, #0]
 801b290:	6859      	ldr	r1, [r3, #4]
 801b292:	683b      	ldr	r3, [r7, #0]
 801b294:	68db      	ldr	r3, [r3, #12]
 801b296:	461a      	mov	r2, r3
 801b298:	f000 fa95 	bl	801b7c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	2160      	movs	r1, #96	; 0x60
 801b2a2:	4618      	mov	r0, r3
 801b2a4:	f000 fabf 	bl	801b826 <TIM_ITRx_SetConfig>
      break;
 801b2a8:	e01c      	b.n	801b2e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	6818      	ldr	r0, [r3, #0]
 801b2ae:	683b      	ldr	r3, [r7, #0]
 801b2b0:	6859      	ldr	r1, [r3, #4]
 801b2b2:	683b      	ldr	r3, [r7, #0]
 801b2b4:	68db      	ldr	r3, [r3, #12]
 801b2b6:	461a      	mov	r2, r3
 801b2b8:	f000 fa56 	bl	801b768 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	2140      	movs	r1, #64	; 0x40
 801b2c2:	4618      	mov	r0, r3
 801b2c4:	f000 faaf 	bl	801b826 <TIM_ITRx_SetConfig>
      break;
 801b2c8:	e00c      	b.n	801b2e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	681a      	ldr	r2, [r3, #0]
 801b2ce:	683b      	ldr	r3, [r7, #0]
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	4619      	mov	r1, r3
 801b2d4:	4610      	mov	r0, r2
 801b2d6:	f000 faa6 	bl	801b826 <TIM_ITRx_SetConfig>
      break;
 801b2da:	e003      	b.n	801b2e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801b2dc:	2301      	movs	r3, #1
 801b2de:	73fb      	strb	r3, [r7, #15]
      break;
 801b2e0:	e000      	b.n	801b2e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801b2e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	2201      	movs	r2, #1
 801b2e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	2200      	movs	r2, #0
 801b2f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 801b2f6:	4618      	mov	r0, r3
 801b2f8:	3710      	adds	r7, #16
 801b2fa:	46bd      	mov	sp, r7
 801b2fc:	bd80      	pop	{r7, pc}

0801b2fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b2fe:	b480      	push	{r7}
 801b300:	b083      	sub	sp, #12
 801b302:	af00      	add	r7, sp, #0
 801b304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b306:	bf00      	nop
 801b308:	370c      	adds	r7, #12
 801b30a:	46bd      	mov	sp, r7
 801b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b310:	4770      	bx	lr

0801b312 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801b312:	b480      	push	{r7}
 801b314:	b083      	sub	sp, #12
 801b316:	af00      	add	r7, sp, #0
 801b318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801b31a:	bf00      	nop
 801b31c:	370c      	adds	r7, #12
 801b31e:	46bd      	mov	sp, r7
 801b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b324:	4770      	bx	lr

0801b326 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b326:	b480      	push	{r7}
 801b328:	b083      	sub	sp, #12
 801b32a:	af00      	add	r7, sp, #0
 801b32c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b32e:	bf00      	nop
 801b330:	370c      	adds	r7, #12
 801b332:	46bd      	mov	sp, r7
 801b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b338:	4770      	bx	lr

0801b33a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b33a:	b480      	push	{r7}
 801b33c:	b083      	sub	sp, #12
 801b33e:	af00      	add	r7, sp, #0
 801b340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b342:	bf00      	nop
 801b344:	370c      	adds	r7, #12
 801b346:	46bd      	mov	sp, r7
 801b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b34c:	4770      	bx	lr
	...

0801b350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801b350:	b480      	push	{r7}
 801b352:	b085      	sub	sp, #20
 801b354:	af00      	add	r7, sp, #0
 801b356:	6078      	str	r0, [r7, #4]
 801b358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	4a34      	ldr	r2, [pc, #208]	; (801b434 <TIM_Base_SetConfig+0xe4>)
 801b364:	4293      	cmp	r3, r2
 801b366:	d00f      	beq.n	801b388 <TIM_Base_SetConfig+0x38>
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b36e:	d00b      	beq.n	801b388 <TIM_Base_SetConfig+0x38>
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	4a31      	ldr	r2, [pc, #196]	; (801b438 <TIM_Base_SetConfig+0xe8>)
 801b374:	4293      	cmp	r3, r2
 801b376:	d007      	beq.n	801b388 <TIM_Base_SetConfig+0x38>
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	4a30      	ldr	r2, [pc, #192]	; (801b43c <TIM_Base_SetConfig+0xec>)
 801b37c:	4293      	cmp	r3, r2
 801b37e:	d003      	beq.n	801b388 <TIM_Base_SetConfig+0x38>
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	4a2f      	ldr	r2, [pc, #188]	; (801b440 <TIM_Base_SetConfig+0xf0>)
 801b384:	4293      	cmp	r3, r2
 801b386:	d108      	bne.n	801b39a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b38e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b390:	683b      	ldr	r3, [r7, #0]
 801b392:	685b      	ldr	r3, [r3, #4]
 801b394:	68fa      	ldr	r2, [r7, #12]
 801b396:	4313      	orrs	r3, r2
 801b398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	4a25      	ldr	r2, [pc, #148]	; (801b434 <TIM_Base_SetConfig+0xe4>)
 801b39e:	4293      	cmp	r3, r2
 801b3a0:	d01b      	beq.n	801b3da <TIM_Base_SetConfig+0x8a>
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b3a8:	d017      	beq.n	801b3da <TIM_Base_SetConfig+0x8a>
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	4a22      	ldr	r2, [pc, #136]	; (801b438 <TIM_Base_SetConfig+0xe8>)
 801b3ae:	4293      	cmp	r3, r2
 801b3b0:	d013      	beq.n	801b3da <TIM_Base_SetConfig+0x8a>
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	4a21      	ldr	r2, [pc, #132]	; (801b43c <TIM_Base_SetConfig+0xec>)
 801b3b6:	4293      	cmp	r3, r2
 801b3b8:	d00f      	beq.n	801b3da <TIM_Base_SetConfig+0x8a>
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	4a20      	ldr	r2, [pc, #128]	; (801b440 <TIM_Base_SetConfig+0xf0>)
 801b3be:	4293      	cmp	r3, r2
 801b3c0:	d00b      	beq.n	801b3da <TIM_Base_SetConfig+0x8a>
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	4a1f      	ldr	r2, [pc, #124]	; (801b444 <TIM_Base_SetConfig+0xf4>)
 801b3c6:	4293      	cmp	r3, r2
 801b3c8:	d007      	beq.n	801b3da <TIM_Base_SetConfig+0x8a>
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	4a1e      	ldr	r2, [pc, #120]	; (801b448 <TIM_Base_SetConfig+0xf8>)
 801b3ce:	4293      	cmp	r3, r2
 801b3d0:	d003      	beq.n	801b3da <TIM_Base_SetConfig+0x8a>
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	4a1d      	ldr	r2, [pc, #116]	; (801b44c <TIM_Base_SetConfig+0xfc>)
 801b3d6:	4293      	cmp	r3, r2
 801b3d8:	d108      	bne.n	801b3ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b3da:	68fb      	ldr	r3, [r7, #12]
 801b3dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b3e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b3e2:	683b      	ldr	r3, [r7, #0]
 801b3e4:	68db      	ldr	r3, [r3, #12]
 801b3e6:	68fa      	ldr	r2, [r7, #12]
 801b3e8:	4313      	orrs	r3, r2
 801b3ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b3ec:	68fb      	ldr	r3, [r7, #12]
 801b3ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b3f2:	683b      	ldr	r3, [r7, #0]
 801b3f4:	695b      	ldr	r3, [r3, #20]
 801b3f6:	4313      	orrs	r3, r2
 801b3f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	68fa      	ldr	r2, [r7, #12]
 801b3fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b400:	683b      	ldr	r3, [r7, #0]
 801b402:	689a      	ldr	r2, [r3, #8]
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b408:	683b      	ldr	r3, [r7, #0]
 801b40a:	681a      	ldr	r2, [r3, #0]
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	4a08      	ldr	r2, [pc, #32]	; (801b434 <TIM_Base_SetConfig+0xe4>)
 801b414:	4293      	cmp	r3, r2
 801b416:	d103      	bne.n	801b420 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b418:	683b      	ldr	r3, [r7, #0]
 801b41a:	691a      	ldr	r2, [r3, #16]
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	2201      	movs	r2, #1
 801b424:	615a      	str	r2, [r3, #20]
}
 801b426:	bf00      	nop
 801b428:	3714      	adds	r7, #20
 801b42a:	46bd      	mov	sp, r7
 801b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b430:	4770      	bx	lr
 801b432:	bf00      	nop
 801b434:	40010000 	.word	0x40010000
 801b438:	40000400 	.word	0x40000400
 801b43c:	40000800 	.word	0x40000800
 801b440:	40000c00 	.word	0x40000c00
 801b444:	40014000 	.word	0x40014000
 801b448:	40014400 	.word	0x40014400
 801b44c:	40014800 	.word	0x40014800

0801b450 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b450:	b480      	push	{r7}
 801b452:	b087      	sub	sp, #28
 801b454:	af00      	add	r7, sp, #0
 801b456:	6078      	str	r0, [r7, #4]
 801b458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	6a1b      	ldr	r3, [r3, #32]
 801b45e:	f023 0201 	bic.w	r2, r3, #1
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	6a1b      	ldr	r3, [r3, #32]
 801b46a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	685b      	ldr	r3, [r3, #4]
 801b470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	699b      	ldr	r3, [r3, #24]
 801b476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801b478:	68fb      	ldr	r3, [r7, #12]
 801b47a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b47e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801b480:	68fb      	ldr	r3, [r7, #12]
 801b482:	f023 0303 	bic.w	r3, r3, #3
 801b486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b488:	683b      	ldr	r3, [r7, #0]
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	68fa      	ldr	r2, [r7, #12]
 801b48e:	4313      	orrs	r3, r2
 801b490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801b492:	697b      	ldr	r3, [r7, #20]
 801b494:	f023 0302 	bic.w	r3, r3, #2
 801b498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801b49a:	683b      	ldr	r3, [r7, #0]
 801b49c:	689b      	ldr	r3, [r3, #8]
 801b49e:	697a      	ldr	r2, [r7, #20]
 801b4a0:	4313      	orrs	r3, r2
 801b4a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	4a1c      	ldr	r2, [pc, #112]	; (801b518 <TIM_OC1_SetConfig+0xc8>)
 801b4a8:	4293      	cmp	r3, r2
 801b4aa:	d10c      	bne.n	801b4c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801b4ac:	697b      	ldr	r3, [r7, #20]
 801b4ae:	f023 0308 	bic.w	r3, r3, #8
 801b4b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801b4b4:	683b      	ldr	r3, [r7, #0]
 801b4b6:	68db      	ldr	r3, [r3, #12]
 801b4b8:	697a      	ldr	r2, [r7, #20]
 801b4ba:	4313      	orrs	r3, r2
 801b4bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801b4be:	697b      	ldr	r3, [r7, #20]
 801b4c0:	f023 0304 	bic.w	r3, r3, #4
 801b4c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	4a13      	ldr	r2, [pc, #76]	; (801b518 <TIM_OC1_SetConfig+0xc8>)
 801b4ca:	4293      	cmp	r3, r2
 801b4cc:	d111      	bne.n	801b4f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801b4ce:	693b      	ldr	r3, [r7, #16]
 801b4d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b4d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801b4d6:	693b      	ldr	r3, [r7, #16]
 801b4d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b4dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801b4de:	683b      	ldr	r3, [r7, #0]
 801b4e0:	695b      	ldr	r3, [r3, #20]
 801b4e2:	693a      	ldr	r2, [r7, #16]
 801b4e4:	4313      	orrs	r3, r2
 801b4e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801b4e8:	683b      	ldr	r3, [r7, #0]
 801b4ea:	699b      	ldr	r3, [r3, #24]
 801b4ec:	693a      	ldr	r2, [r7, #16]
 801b4ee:	4313      	orrs	r3, r2
 801b4f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	693a      	ldr	r2, [r7, #16]
 801b4f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	68fa      	ldr	r2, [r7, #12]
 801b4fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801b4fe:	683b      	ldr	r3, [r7, #0]
 801b500:	685a      	ldr	r2, [r3, #4]
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	697a      	ldr	r2, [r7, #20]
 801b50a:	621a      	str	r2, [r3, #32]
}
 801b50c:	bf00      	nop
 801b50e:	371c      	adds	r7, #28
 801b510:	46bd      	mov	sp, r7
 801b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b516:	4770      	bx	lr
 801b518:	40010000 	.word	0x40010000

0801b51c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b51c:	b480      	push	{r7}
 801b51e:	b087      	sub	sp, #28
 801b520:	af00      	add	r7, sp, #0
 801b522:	6078      	str	r0, [r7, #4]
 801b524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	6a1b      	ldr	r3, [r3, #32]
 801b52a:	f023 0210 	bic.w	r2, r3, #16
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	6a1b      	ldr	r3, [r3, #32]
 801b536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	685b      	ldr	r3, [r3, #4]
 801b53c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	699b      	ldr	r3, [r3, #24]
 801b542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b54a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b54c:	68fb      	ldr	r3, [r7, #12]
 801b54e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b554:	683b      	ldr	r3, [r7, #0]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	021b      	lsls	r3, r3, #8
 801b55a:	68fa      	ldr	r2, [r7, #12]
 801b55c:	4313      	orrs	r3, r2
 801b55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b560:	697b      	ldr	r3, [r7, #20]
 801b562:	f023 0320 	bic.w	r3, r3, #32
 801b566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b568:	683b      	ldr	r3, [r7, #0]
 801b56a:	689b      	ldr	r3, [r3, #8]
 801b56c:	011b      	lsls	r3, r3, #4
 801b56e:	697a      	ldr	r2, [r7, #20]
 801b570:	4313      	orrs	r3, r2
 801b572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	4a1e      	ldr	r2, [pc, #120]	; (801b5f0 <TIM_OC2_SetConfig+0xd4>)
 801b578:	4293      	cmp	r3, r2
 801b57a:	d10d      	bne.n	801b598 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801b57c:	697b      	ldr	r3, [r7, #20]
 801b57e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801b584:	683b      	ldr	r3, [r7, #0]
 801b586:	68db      	ldr	r3, [r3, #12]
 801b588:	011b      	lsls	r3, r3, #4
 801b58a:	697a      	ldr	r2, [r7, #20]
 801b58c:	4313      	orrs	r3, r2
 801b58e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801b590:	697b      	ldr	r3, [r7, #20]
 801b592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b596:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	4a15      	ldr	r2, [pc, #84]	; (801b5f0 <TIM_OC2_SetConfig+0xd4>)
 801b59c:	4293      	cmp	r3, r2
 801b59e:	d113      	bne.n	801b5c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801b5a0:	693b      	ldr	r3, [r7, #16]
 801b5a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b5a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801b5a8:	693b      	ldr	r3, [r7, #16]
 801b5aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b5ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801b5b0:	683b      	ldr	r3, [r7, #0]
 801b5b2:	695b      	ldr	r3, [r3, #20]
 801b5b4:	009b      	lsls	r3, r3, #2
 801b5b6:	693a      	ldr	r2, [r7, #16]
 801b5b8:	4313      	orrs	r3, r2
 801b5ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801b5bc:	683b      	ldr	r3, [r7, #0]
 801b5be:	699b      	ldr	r3, [r3, #24]
 801b5c0:	009b      	lsls	r3, r3, #2
 801b5c2:	693a      	ldr	r2, [r7, #16]
 801b5c4:	4313      	orrs	r3, r2
 801b5c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	693a      	ldr	r2, [r7, #16]
 801b5cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	68fa      	ldr	r2, [r7, #12]
 801b5d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801b5d4:	683b      	ldr	r3, [r7, #0]
 801b5d6:	685a      	ldr	r2, [r3, #4]
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	697a      	ldr	r2, [r7, #20]
 801b5e0:	621a      	str	r2, [r3, #32]
}
 801b5e2:	bf00      	nop
 801b5e4:	371c      	adds	r7, #28
 801b5e6:	46bd      	mov	sp, r7
 801b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ec:	4770      	bx	lr
 801b5ee:	bf00      	nop
 801b5f0:	40010000 	.word	0x40010000

0801b5f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b5f4:	b480      	push	{r7}
 801b5f6:	b087      	sub	sp, #28
 801b5f8:	af00      	add	r7, sp, #0
 801b5fa:	6078      	str	r0, [r7, #4]
 801b5fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	6a1b      	ldr	r3, [r3, #32]
 801b602:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	6a1b      	ldr	r3, [r3, #32]
 801b60e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	685b      	ldr	r3, [r3, #4]
 801b614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	69db      	ldr	r3, [r3, #28]
 801b61a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801b624:	68fb      	ldr	r3, [r7, #12]
 801b626:	f023 0303 	bic.w	r3, r3, #3
 801b62a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b62c:	683b      	ldr	r3, [r7, #0]
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	68fa      	ldr	r2, [r7, #12]
 801b632:	4313      	orrs	r3, r2
 801b634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801b636:	697b      	ldr	r3, [r7, #20]
 801b638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b63c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801b63e:	683b      	ldr	r3, [r7, #0]
 801b640:	689b      	ldr	r3, [r3, #8]
 801b642:	021b      	lsls	r3, r3, #8
 801b644:	697a      	ldr	r2, [r7, #20]
 801b646:	4313      	orrs	r3, r2
 801b648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	4a1d      	ldr	r2, [pc, #116]	; (801b6c4 <TIM_OC3_SetConfig+0xd0>)
 801b64e:	4293      	cmp	r3, r2
 801b650:	d10d      	bne.n	801b66e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801b652:	697b      	ldr	r3, [r7, #20]
 801b654:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b658:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801b65a:	683b      	ldr	r3, [r7, #0]
 801b65c:	68db      	ldr	r3, [r3, #12]
 801b65e:	021b      	lsls	r3, r3, #8
 801b660:	697a      	ldr	r2, [r7, #20]
 801b662:	4313      	orrs	r3, r2
 801b664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801b666:	697b      	ldr	r3, [r7, #20]
 801b668:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b66c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	4a14      	ldr	r2, [pc, #80]	; (801b6c4 <TIM_OC3_SetConfig+0xd0>)
 801b672:	4293      	cmp	r3, r2
 801b674:	d113      	bne.n	801b69e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801b676:	693b      	ldr	r3, [r7, #16]
 801b678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b67c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801b67e:	693b      	ldr	r3, [r7, #16]
 801b680:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801b686:	683b      	ldr	r3, [r7, #0]
 801b688:	695b      	ldr	r3, [r3, #20]
 801b68a:	011b      	lsls	r3, r3, #4
 801b68c:	693a      	ldr	r2, [r7, #16]
 801b68e:	4313      	orrs	r3, r2
 801b690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801b692:	683b      	ldr	r3, [r7, #0]
 801b694:	699b      	ldr	r3, [r3, #24]
 801b696:	011b      	lsls	r3, r3, #4
 801b698:	693a      	ldr	r2, [r7, #16]
 801b69a:	4313      	orrs	r3, r2
 801b69c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	693a      	ldr	r2, [r7, #16]
 801b6a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	68fa      	ldr	r2, [r7, #12]
 801b6a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801b6aa:	683b      	ldr	r3, [r7, #0]
 801b6ac:	685a      	ldr	r2, [r3, #4]
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	697a      	ldr	r2, [r7, #20]
 801b6b6:	621a      	str	r2, [r3, #32]
}
 801b6b8:	bf00      	nop
 801b6ba:	371c      	adds	r7, #28
 801b6bc:	46bd      	mov	sp, r7
 801b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6c2:	4770      	bx	lr
 801b6c4:	40010000 	.word	0x40010000

0801b6c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b6c8:	b480      	push	{r7}
 801b6ca:	b087      	sub	sp, #28
 801b6cc:	af00      	add	r7, sp, #0
 801b6ce:	6078      	str	r0, [r7, #4]
 801b6d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	6a1b      	ldr	r3, [r3, #32]
 801b6d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	6a1b      	ldr	r3, [r3, #32]
 801b6e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	685b      	ldr	r3, [r3, #4]
 801b6e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	69db      	ldr	r3, [r3, #28]
 801b6ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b6f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801b6f8:	68fb      	ldr	r3, [r7, #12]
 801b6fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b6fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b700:	683b      	ldr	r3, [r7, #0]
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	021b      	lsls	r3, r3, #8
 801b706:	68fa      	ldr	r2, [r7, #12]
 801b708:	4313      	orrs	r3, r2
 801b70a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801b70c:	693b      	ldr	r3, [r7, #16]
 801b70e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801b714:	683b      	ldr	r3, [r7, #0]
 801b716:	689b      	ldr	r3, [r3, #8]
 801b718:	031b      	lsls	r3, r3, #12
 801b71a:	693a      	ldr	r2, [r7, #16]
 801b71c:	4313      	orrs	r3, r2
 801b71e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	4a10      	ldr	r2, [pc, #64]	; (801b764 <TIM_OC4_SetConfig+0x9c>)
 801b724:	4293      	cmp	r3, r2
 801b726:	d109      	bne.n	801b73c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801b728:	697b      	ldr	r3, [r7, #20]
 801b72a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b72e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801b730:	683b      	ldr	r3, [r7, #0]
 801b732:	695b      	ldr	r3, [r3, #20]
 801b734:	019b      	lsls	r3, r3, #6
 801b736:	697a      	ldr	r2, [r7, #20]
 801b738:	4313      	orrs	r3, r2
 801b73a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	697a      	ldr	r2, [r7, #20]
 801b740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	68fa      	ldr	r2, [r7, #12]
 801b746:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801b748:	683b      	ldr	r3, [r7, #0]
 801b74a:	685a      	ldr	r2, [r3, #4]
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	693a      	ldr	r2, [r7, #16]
 801b754:	621a      	str	r2, [r3, #32]
}
 801b756:	bf00      	nop
 801b758:	371c      	adds	r7, #28
 801b75a:	46bd      	mov	sp, r7
 801b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b760:	4770      	bx	lr
 801b762:	bf00      	nop
 801b764:	40010000 	.word	0x40010000

0801b768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b768:	b480      	push	{r7}
 801b76a:	b087      	sub	sp, #28
 801b76c:	af00      	add	r7, sp, #0
 801b76e:	60f8      	str	r0, [r7, #12]
 801b770:	60b9      	str	r1, [r7, #8]
 801b772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	6a1b      	ldr	r3, [r3, #32]
 801b778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	6a1b      	ldr	r3, [r3, #32]
 801b77e:	f023 0201 	bic.w	r2, r3, #1
 801b782:	68fb      	ldr	r3, [r7, #12]
 801b784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b786:	68fb      	ldr	r3, [r7, #12]
 801b788:	699b      	ldr	r3, [r3, #24]
 801b78a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b78c:	693b      	ldr	r3, [r7, #16]
 801b78e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	011b      	lsls	r3, r3, #4
 801b798:	693a      	ldr	r2, [r7, #16]
 801b79a:	4313      	orrs	r3, r2
 801b79c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b79e:	697b      	ldr	r3, [r7, #20]
 801b7a0:	f023 030a 	bic.w	r3, r3, #10
 801b7a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801b7a6:	697a      	ldr	r2, [r7, #20]
 801b7a8:	68bb      	ldr	r3, [r7, #8]
 801b7aa:	4313      	orrs	r3, r2
 801b7ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b7ae:	68fb      	ldr	r3, [r7, #12]
 801b7b0:	693a      	ldr	r2, [r7, #16]
 801b7b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b7b4:	68fb      	ldr	r3, [r7, #12]
 801b7b6:	697a      	ldr	r2, [r7, #20]
 801b7b8:	621a      	str	r2, [r3, #32]
}
 801b7ba:	bf00      	nop
 801b7bc:	371c      	adds	r7, #28
 801b7be:	46bd      	mov	sp, r7
 801b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7c4:	4770      	bx	lr

0801b7c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b7c6:	b480      	push	{r7}
 801b7c8:	b087      	sub	sp, #28
 801b7ca:	af00      	add	r7, sp, #0
 801b7cc:	60f8      	str	r0, [r7, #12]
 801b7ce:	60b9      	str	r1, [r7, #8]
 801b7d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	6a1b      	ldr	r3, [r3, #32]
 801b7d6:	f023 0210 	bic.w	r2, r3, #16
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b7de:	68fb      	ldr	r3, [r7, #12]
 801b7e0:	699b      	ldr	r3, [r3, #24]
 801b7e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b7e4:	68fb      	ldr	r3, [r7, #12]
 801b7e6:	6a1b      	ldr	r3, [r3, #32]
 801b7e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b7ea:	697b      	ldr	r3, [r7, #20]
 801b7ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b7f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	031b      	lsls	r3, r3, #12
 801b7f6:	697a      	ldr	r2, [r7, #20]
 801b7f8:	4313      	orrs	r3, r2
 801b7fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b7fc:	693b      	ldr	r3, [r7, #16]
 801b7fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801b802:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801b804:	68bb      	ldr	r3, [r7, #8]
 801b806:	011b      	lsls	r3, r3, #4
 801b808:	693a      	ldr	r2, [r7, #16]
 801b80a:	4313      	orrs	r3, r2
 801b80c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b80e:	68fb      	ldr	r3, [r7, #12]
 801b810:	697a      	ldr	r2, [r7, #20]
 801b812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	693a      	ldr	r2, [r7, #16]
 801b818:	621a      	str	r2, [r3, #32]
}
 801b81a:	bf00      	nop
 801b81c:	371c      	adds	r7, #28
 801b81e:	46bd      	mov	sp, r7
 801b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b824:	4770      	bx	lr

0801b826 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801b826:	b480      	push	{r7}
 801b828:	b085      	sub	sp, #20
 801b82a:	af00      	add	r7, sp, #0
 801b82c:	6078      	str	r0, [r7, #4]
 801b82e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	689b      	ldr	r3, [r3, #8]
 801b834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801b836:	68fb      	ldr	r3, [r7, #12]
 801b838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b83c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801b83e:	683a      	ldr	r2, [r7, #0]
 801b840:	68fb      	ldr	r3, [r7, #12]
 801b842:	4313      	orrs	r3, r2
 801b844:	f043 0307 	orr.w	r3, r3, #7
 801b848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	68fa      	ldr	r2, [r7, #12]
 801b84e:	609a      	str	r2, [r3, #8]
}
 801b850:	bf00      	nop
 801b852:	3714      	adds	r7, #20
 801b854:	46bd      	mov	sp, r7
 801b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b85a:	4770      	bx	lr

0801b85c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801b85c:	b480      	push	{r7}
 801b85e:	b087      	sub	sp, #28
 801b860:	af00      	add	r7, sp, #0
 801b862:	60f8      	str	r0, [r7, #12]
 801b864:	60b9      	str	r1, [r7, #8]
 801b866:	607a      	str	r2, [r7, #4]
 801b868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801b86a:	68fb      	ldr	r3, [r7, #12]
 801b86c:	689b      	ldr	r3, [r3, #8]
 801b86e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b870:	697b      	ldr	r3, [r7, #20]
 801b872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801b878:	683b      	ldr	r3, [r7, #0]
 801b87a:	021a      	lsls	r2, r3, #8
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	431a      	orrs	r2, r3
 801b880:	68bb      	ldr	r3, [r7, #8]
 801b882:	4313      	orrs	r3, r2
 801b884:	697a      	ldr	r2, [r7, #20]
 801b886:	4313      	orrs	r3, r2
 801b888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b88a:	68fb      	ldr	r3, [r7, #12]
 801b88c:	697a      	ldr	r2, [r7, #20]
 801b88e:	609a      	str	r2, [r3, #8]
}
 801b890:	bf00      	nop
 801b892:	371c      	adds	r7, #28
 801b894:	46bd      	mov	sp, r7
 801b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b89a:	4770      	bx	lr

0801b89c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801b89c:	b480      	push	{r7}
 801b89e:	b087      	sub	sp, #28
 801b8a0:	af00      	add	r7, sp, #0
 801b8a2:	60f8      	str	r0, [r7, #12]
 801b8a4:	60b9      	str	r1, [r7, #8]
 801b8a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801b8a8:	68bb      	ldr	r3, [r7, #8]
 801b8aa:	f003 031f 	and.w	r3, r3, #31
 801b8ae:	2201      	movs	r2, #1
 801b8b0:	fa02 f303 	lsl.w	r3, r2, r3
 801b8b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801b8b6:	68fb      	ldr	r3, [r7, #12]
 801b8b8:	6a1a      	ldr	r2, [r3, #32]
 801b8ba:	697b      	ldr	r3, [r7, #20]
 801b8bc:	43db      	mvns	r3, r3
 801b8be:	401a      	ands	r2, r3
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	6a1a      	ldr	r2, [r3, #32]
 801b8c8:	68bb      	ldr	r3, [r7, #8]
 801b8ca:	f003 031f 	and.w	r3, r3, #31
 801b8ce:	6879      	ldr	r1, [r7, #4]
 801b8d0:	fa01 f303 	lsl.w	r3, r1, r3
 801b8d4:	431a      	orrs	r2, r3
 801b8d6:	68fb      	ldr	r3, [r7, #12]
 801b8d8:	621a      	str	r2, [r3, #32]
}
 801b8da:	bf00      	nop
 801b8dc:	371c      	adds	r7, #28
 801b8de:	46bd      	mov	sp, r7
 801b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8e4:	4770      	bx	lr
	...

0801b8e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801b8e8:	b480      	push	{r7}
 801b8ea:	b085      	sub	sp, #20
 801b8ec:	af00      	add	r7, sp, #0
 801b8ee:	6078      	str	r0, [r7, #4]
 801b8f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b8f8:	2b01      	cmp	r3, #1
 801b8fa:	d101      	bne.n	801b900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801b8fc:	2302      	movs	r3, #2
 801b8fe:	e050      	b.n	801b9a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	2201      	movs	r2, #1
 801b904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	2202      	movs	r2, #2
 801b90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	685b      	ldr	r3, [r3, #4]
 801b916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	689b      	ldr	r3, [r3, #8]
 801b91e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801b920:	68fb      	ldr	r3, [r7, #12]
 801b922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801b928:	683b      	ldr	r3, [r7, #0]
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	68fa      	ldr	r2, [r7, #12]
 801b92e:	4313      	orrs	r3, r2
 801b930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	68fa      	ldr	r2, [r7, #12]
 801b938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	4a1c      	ldr	r2, [pc, #112]	; (801b9b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801b940:	4293      	cmp	r3, r2
 801b942:	d018      	beq.n	801b976 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	681b      	ldr	r3, [r3, #0]
 801b948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b94c:	d013      	beq.n	801b976 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	4a18      	ldr	r2, [pc, #96]	; (801b9b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801b954:	4293      	cmp	r3, r2
 801b956:	d00e      	beq.n	801b976 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	681b      	ldr	r3, [r3, #0]
 801b95c:	4a16      	ldr	r2, [pc, #88]	; (801b9b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801b95e:	4293      	cmp	r3, r2
 801b960:	d009      	beq.n	801b976 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	4a15      	ldr	r2, [pc, #84]	; (801b9bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801b968:	4293      	cmp	r3, r2
 801b96a:	d004      	beq.n	801b976 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	4a13      	ldr	r2, [pc, #76]	; (801b9c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801b972:	4293      	cmp	r3, r2
 801b974:	d10c      	bne.n	801b990 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801b976:	68bb      	ldr	r3, [r7, #8]
 801b978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b97c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801b97e:	683b      	ldr	r3, [r7, #0]
 801b980:	685b      	ldr	r3, [r3, #4]
 801b982:	68ba      	ldr	r2, [r7, #8]
 801b984:	4313      	orrs	r3, r2
 801b986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	68ba      	ldr	r2, [r7, #8]
 801b98e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	2201      	movs	r2, #1
 801b994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	2200      	movs	r2, #0
 801b99c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b9a0:	2300      	movs	r3, #0
}
 801b9a2:	4618      	mov	r0, r3
 801b9a4:	3714      	adds	r7, #20
 801b9a6:	46bd      	mov	sp, r7
 801b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ac:	4770      	bx	lr
 801b9ae:	bf00      	nop
 801b9b0:	40010000 	.word	0x40010000
 801b9b4:	40000400 	.word	0x40000400
 801b9b8:	40000800 	.word	0x40000800
 801b9bc:	40000c00 	.word	0x40000c00
 801b9c0:	40014000 	.word	0x40014000

0801b9c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801b9c4:	b480      	push	{r7}
 801b9c6:	b083      	sub	sp, #12
 801b9c8:	af00      	add	r7, sp, #0
 801b9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801b9cc:	bf00      	nop
 801b9ce:	370c      	adds	r7, #12
 801b9d0:	46bd      	mov	sp, r7
 801b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9d6:	4770      	bx	lr

0801b9d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801b9d8:	b480      	push	{r7}
 801b9da:	b083      	sub	sp, #12
 801b9dc:	af00      	add	r7, sp, #0
 801b9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801b9e0:	bf00      	nop
 801b9e2:	370c      	adds	r7, #12
 801b9e4:	46bd      	mov	sp, r7
 801b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ea:	4770      	bx	lr

0801b9ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b9ec:	b580      	push	{r7, lr}
 801b9ee:	b082      	sub	sp, #8
 801b9f0:	af00      	add	r7, sp, #0
 801b9f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d101      	bne.n	801b9fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b9fa:	2301      	movs	r3, #1
 801b9fc:	e03f      	b.n	801ba7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ba04:	b2db      	uxtb	r3, r3
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d106      	bne.n	801ba18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	2200      	movs	r2, #0
 801ba0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801ba12:	6878      	ldr	r0, [r7, #4]
 801ba14:	f7fa fafe 	bl	8016014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	2224      	movs	r2, #36	; 0x24
 801ba1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	68da      	ldr	r2, [r3, #12]
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801ba2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801ba30:	6878      	ldr	r0, [r7, #4]
 801ba32:	f000 ff9b 	bl	801c96c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	691a      	ldr	r2, [r3, #16]
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801ba44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	695a      	ldr	r2, [r3, #20]
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801ba54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	68da      	ldr	r2, [r3, #12]
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ba64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	2200      	movs	r2, #0
 801ba6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	2220      	movs	r2, #32
 801ba70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	2220      	movs	r2, #32
 801ba78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801ba7c:	2300      	movs	r3, #0
}
 801ba7e:	4618      	mov	r0, r3
 801ba80:	3708      	adds	r7, #8
 801ba82:	46bd      	mov	sp, r7
 801ba84:	bd80      	pop	{r7, pc}

0801ba86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ba86:	b580      	push	{r7, lr}
 801ba88:	b08a      	sub	sp, #40	; 0x28
 801ba8a:	af02      	add	r7, sp, #8
 801ba8c:	60f8      	str	r0, [r7, #12]
 801ba8e:	60b9      	str	r1, [r7, #8]
 801ba90:	603b      	str	r3, [r7, #0]
 801ba92:	4613      	mov	r3, r2
 801ba94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801ba96:	2300      	movs	r3, #0
 801ba98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ba9a:	68fb      	ldr	r3, [r7, #12]
 801ba9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801baa0:	b2db      	uxtb	r3, r3
 801baa2:	2b20      	cmp	r3, #32
 801baa4:	d17c      	bne.n	801bba0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801baa6:	68bb      	ldr	r3, [r7, #8]
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d002      	beq.n	801bab2 <HAL_UART_Transmit+0x2c>
 801baac:	88fb      	ldrh	r3, [r7, #6]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d101      	bne.n	801bab6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801bab2:	2301      	movs	r3, #1
 801bab4:	e075      	b.n	801bba2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801bab6:	68fb      	ldr	r3, [r7, #12]
 801bab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801babc:	2b01      	cmp	r3, #1
 801babe:	d101      	bne.n	801bac4 <HAL_UART_Transmit+0x3e>
 801bac0:	2302      	movs	r3, #2
 801bac2:	e06e      	b.n	801bba2 <HAL_UART_Transmit+0x11c>
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	2201      	movs	r2, #1
 801bac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	2200      	movs	r2, #0
 801bad0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	2221      	movs	r2, #33	; 0x21
 801bad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801bada:	f7fa fd53 	bl	8016584 <HAL_GetTick>
 801bade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801bae0:	68fb      	ldr	r3, [r7, #12]
 801bae2:	88fa      	ldrh	r2, [r7, #6]
 801bae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801bae6:	68fb      	ldr	r3, [r7, #12]
 801bae8:	88fa      	ldrh	r2, [r7, #6]
 801baea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	689b      	ldr	r3, [r3, #8]
 801baf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801baf4:	d108      	bne.n	801bb08 <HAL_UART_Transmit+0x82>
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	691b      	ldr	r3, [r3, #16]
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d104      	bne.n	801bb08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801bafe:	2300      	movs	r3, #0
 801bb00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801bb02:	68bb      	ldr	r3, [r7, #8]
 801bb04:	61bb      	str	r3, [r7, #24]
 801bb06:	e003      	b.n	801bb10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801bb08:	68bb      	ldr	r3, [r7, #8]
 801bb0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801bb0c:	2300      	movs	r3, #0
 801bb0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	2200      	movs	r2, #0
 801bb14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801bb18:	e02a      	b.n	801bb70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801bb1a:	683b      	ldr	r3, [r7, #0]
 801bb1c:	9300      	str	r3, [sp, #0]
 801bb1e:	697b      	ldr	r3, [r7, #20]
 801bb20:	2200      	movs	r2, #0
 801bb22:	2180      	movs	r1, #128	; 0x80
 801bb24:	68f8      	ldr	r0, [r7, #12]
 801bb26:	f000 fc53 	bl	801c3d0 <UART_WaitOnFlagUntilTimeout>
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d001      	beq.n	801bb34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801bb30:	2303      	movs	r3, #3
 801bb32:	e036      	b.n	801bba2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801bb34:	69fb      	ldr	r3, [r7, #28]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d10b      	bne.n	801bb52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801bb3a:	69bb      	ldr	r3, [r7, #24]
 801bb3c:	881b      	ldrh	r3, [r3, #0]
 801bb3e:	461a      	mov	r2, r3
 801bb40:	68fb      	ldr	r3, [r7, #12]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801bb48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801bb4a:	69bb      	ldr	r3, [r7, #24]
 801bb4c:	3302      	adds	r3, #2
 801bb4e:	61bb      	str	r3, [r7, #24]
 801bb50:	e007      	b.n	801bb62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801bb52:	69fb      	ldr	r3, [r7, #28]
 801bb54:	781a      	ldrb	r2, [r3, #0]
 801bb56:	68fb      	ldr	r3, [r7, #12]
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801bb5c:	69fb      	ldr	r3, [r7, #28]
 801bb5e:	3301      	adds	r3, #1
 801bb60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801bb62:	68fb      	ldr	r3, [r7, #12]
 801bb64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801bb66:	b29b      	uxth	r3, r3
 801bb68:	3b01      	subs	r3, #1
 801bb6a:	b29a      	uxth	r2, r3
 801bb6c:	68fb      	ldr	r3, [r7, #12]
 801bb6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801bb74:	b29b      	uxth	r3, r3
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d1cf      	bne.n	801bb1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801bb7a:	683b      	ldr	r3, [r7, #0]
 801bb7c:	9300      	str	r3, [sp, #0]
 801bb7e:	697b      	ldr	r3, [r7, #20]
 801bb80:	2200      	movs	r2, #0
 801bb82:	2140      	movs	r1, #64	; 0x40
 801bb84:	68f8      	ldr	r0, [r7, #12]
 801bb86:	f000 fc23 	bl	801c3d0 <UART_WaitOnFlagUntilTimeout>
 801bb8a:	4603      	mov	r3, r0
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d001      	beq.n	801bb94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801bb90:	2303      	movs	r3, #3
 801bb92:	e006      	b.n	801bba2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801bb94:	68fb      	ldr	r3, [r7, #12]
 801bb96:	2220      	movs	r2, #32
 801bb98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801bb9c:	2300      	movs	r3, #0
 801bb9e:	e000      	b.n	801bba2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801bba0:	2302      	movs	r3, #2
  }
}
 801bba2:	4618      	mov	r0, r3
 801bba4:	3720      	adds	r7, #32
 801bba6:	46bd      	mov	sp, r7
 801bba8:	bd80      	pop	{r7, pc}

0801bbaa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bbaa:	b580      	push	{r7, lr}
 801bbac:	b08c      	sub	sp, #48	; 0x30
 801bbae:	af00      	add	r7, sp, #0
 801bbb0:	60f8      	str	r0, [r7, #12]
 801bbb2:	60b9      	str	r1, [r7, #8]
 801bbb4:	4613      	mov	r3, r2
 801bbb6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801bbbe:	b2db      	uxtb	r3, r3
 801bbc0:	2b20      	cmp	r3, #32
 801bbc2:	d152      	bne.n	801bc6a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 801bbc4:	68bb      	ldr	r3, [r7, #8]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d002      	beq.n	801bbd0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 801bbca:	88fb      	ldrh	r3, [r7, #6]
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	d101      	bne.n	801bbd4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801bbd0:	2301      	movs	r3, #1
 801bbd2:	e04b      	b.n	801bc6c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bbda:	2b01      	cmp	r3, #1
 801bbdc:	d101      	bne.n	801bbe2 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801bbde:	2302      	movs	r3, #2
 801bbe0:	e044      	b.n	801bc6c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	2201      	movs	r2, #1
 801bbe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801bbea:	68fb      	ldr	r3, [r7, #12]
 801bbec:	2201      	movs	r2, #1
 801bbee:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801bbf0:	88fb      	ldrh	r3, [r7, #6]
 801bbf2:	461a      	mov	r2, r3
 801bbf4:	68b9      	ldr	r1, [r7, #8]
 801bbf6:	68f8      	ldr	r0, [r7, #12]
 801bbf8:	f000 fc58 	bl	801c4ac <UART_Start_Receive_DMA>
 801bbfc:	4603      	mov	r3, r0
 801bbfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801bc02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	d12c      	bne.n	801bc64 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bc0a:	68fb      	ldr	r3, [r7, #12]
 801bc0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc0e:	2b01      	cmp	r3, #1
 801bc10:	d125      	bne.n	801bc5e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801bc12:	2300      	movs	r3, #0
 801bc14:	613b      	str	r3, [r7, #16]
 801bc16:	68fb      	ldr	r3, [r7, #12]
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	681b      	ldr	r3, [r3, #0]
 801bc1c:	613b      	str	r3, [r7, #16]
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	681b      	ldr	r3, [r3, #0]
 801bc22:	685b      	ldr	r3, [r3, #4]
 801bc24:	613b      	str	r3, [r7, #16]
 801bc26:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bc28:	68fb      	ldr	r3, [r7, #12]
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	330c      	adds	r3, #12
 801bc2e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bc30:	69bb      	ldr	r3, [r7, #24]
 801bc32:	e853 3f00 	ldrex	r3, [r3]
 801bc36:	617b      	str	r3, [r7, #20]
   return(result);
 801bc38:	697b      	ldr	r3, [r7, #20]
 801bc3a:	f043 0310 	orr.w	r3, r3, #16
 801bc3e:	62bb      	str	r3, [r7, #40]	; 0x28
 801bc40:	68fb      	ldr	r3, [r7, #12]
 801bc42:	681b      	ldr	r3, [r3, #0]
 801bc44:	330c      	adds	r3, #12
 801bc46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bc48:	627a      	str	r2, [r7, #36]	; 0x24
 801bc4a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bc4c:	6a39      	ldr	r1, [r7, #32]
 801bc4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bc50:	e841 2300 	strex	r3, r2, [r1]
 801bc54:	61fb      	str	r3, [r7, #28]
   return(result);
 801bc56:	69fb      	ldr	r3, [r7, #28]
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d1e5      	bne.n	801bc28 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 801bc5c:	e002      	b.n	801bc64 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801bc5e:	2301      	movs	r3, #1
 801bc60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801bc64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801bc68:	e000      	b.n	801bc6c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 801bc6a:	2302      	movs	r3, #2
  }
}
 801bc6c:	4618      	mov	r0, r3
 801bc6e:	3730      	adds	r7, #48	; 0x30
 801bc70:	46bd      	mov	sp, r7
 801bc72:	bd80      	pop	{r7, pc}

0801bc74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801bc74:	b580      	push	{r7, lr}
 801bc76:	b0ba      	sub	sp, #232	; 0xe8
 801bc78:	af00      	add	r7, sp, #0
 801bc7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	681b      	ldr	r3, [r3, #0]
 801bc80:	681b      	ldr	r3, [r3, #0]
 801bc82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	68db      	ldr	r3, [r3, #12]
 801bc8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	695b      	ldr	r3, [r3, #20]
 801bc96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801bc9a:	2300      	movs	r3, #0
 801bc9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801bca0:	2300      	movs	r3, #0
 801bca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801bca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bcaa:	f003 030f 	and.w	r3, r3, #15
 801bcae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801bcb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d10f      	bne.n	801bcda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bcba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bcbe:	f003 0320 	and.w	r3, r3, #32
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d009      	beq.n	801bcda <HAL_UART_IRQHandler+0x66>
 801bcc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bcca:	f003 0320 	and.w	r3, r3, #32
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d003      	beq.n	801bcda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801bcd2:	6878      	ldr	r0, [r7, #4]
 801bcd4:	f000 fd8f 	bl	801c7f6 <UART_Receive_IT>
      return;
 801bcd8:	e256      	b.n	801c188 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801bcda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	f000 80de 	beq.w	801bea0 <HAL_UART_IRQHandler+0x22c>
 801bce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bce8:	f003 0301 	and.w	r3, r3, #1
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d106      	bne.n	801bcfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801bcf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bcf4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	f000 80d1 	beq.w	801bea0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801bcfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bd02:	f003 0301 	and.w	r3, r3, #1
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	d00b      	beq.n	801bd22 <HAL_UART_IRQHandler+0xae>
 801bd0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bd0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d005      	beq.n	801bd22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd1a:	f043 0201 	orr.w	r2, r3, #1
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bd22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bd26:	f003 0304 	and.w	r3, r3, #4
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d00b      	beq.n	801bd46 <HAL_UART_IRQHandler+0xd2>
 801bd2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bd32:	f003 0301 	and.w	r3, r3, #1
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d005      	beq.n	801bd46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd3e:	f043 0202 	orr.w	r2, r3, #2
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bd46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bd4a:	f003 0302 	and.w	r3, r3, #2
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d00b      	beq.n	801bd6a <HAL_UART_IRQHandler+0xf6>
 801bd52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bd56:	f003 0301 	and.w	r3, r3, #1
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d005      	beq.n	801bd6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd62:	f043 0204 	orr.w	r2, r3, #4
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801bd6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bd6e:	f003 0308 	and.w	r3, r3, #8
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d011      	beq.n	801bd9a <HAL_UART_IRQHandler+0x126>
 801bd76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bd7a:	f003 0320 	and.w	r3, r3, #32
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d105      	bne.n	801bd8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801bd82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bd86:	f003 0301 	and.w	r3, r3, #1
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d005      	beq.n	801bd9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd92:	f043 0208 	orr.w	r2, r3, #8
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	f000 81ed 	beq.w	801c17e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bda4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bda8:	f003 0320 	and.w	r3, r3, #32
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d008      	beq.n	801bdc2 <HAL_UART_IRQHandler+0x14e>
 801bdb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bdb4:	f003 0320 	and.w	r3, r3, #32
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	d002      	beq.n	801bdc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801bdbc:	6878      	ldr	r0, [r7, #4]
 801bdbe:	f000 fd1a 	bl	801c7f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	695b      	ldr	r3, [r3, #20]
 801bdc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bdcc:	2b40      	cmp	r3, #64	; 0x40
 801bdce:	bf0c      	ite	eq
 801bdd0:	2301      	moveq	r3, #1
 801bdd2:	2300      	movne	r3, #0
 801bdd4:	b2db      	uxtb	r3, r3
 801bdd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdde:	f003 0308 	and.w	r3, r3, #8
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	d103      	bne.n	801bdee <HAL_UART_IRQHandler+0x17a>
 801bde6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d04f      	beq.n	801be8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801bdee:	6878      	ldr	r0, [r7, #4]
 801bdf0:	f000 fc22 	bl	801c638 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	681b      	ldr	r3, [r3, #0]
 801bdf8:	695b      	ldr	r3, [r3, #20]
 801bdfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bdfe:	2b40      	cmp	r3, #64	; 0x40
 801be00:	d141      	bne.n	801be86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	3314      	adds	r3, #20
 801be08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801be10:	e853 3f00 	ldrex	r3, [r3]
 801be14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801be18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801be1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801be20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	681b      	ldr	r3, [r3, #0]
 801be28:	3314      	adds	r3, #20
 801be2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801be2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801be32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801be3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801be3e:	e841 2300 	strex	r3, r2, [r1]
 801be42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801be46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	d1d9      	bne.n	801be02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801be52:	2b00      	cmp	r3, #0
 801be54:	d013      	beq.n	801be7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801be5a:	4a7d      	ldr	r2, [pc, #500]	; (801c050 <HAL_UART_IRQHandler+0x3dc>)
 801be5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801be62:	4618      	mov	r0, r3
 801be64:	f7fa fe46 	bl	8016af4 <HAL_DMA_Abort_IT>
 801be68:	4603      	mov	r3, r0
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d016      	beq.n	801be9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801be72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801be74:	687a      	ldr	r2, [r7, #4]
 801be76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801be78:	4610      	mov	r0, r2
 801be7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801be7c:	e00e      	b.n	801be9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801be7e:	6878      	ldr	r0, [r7, #4]
 801be80:	f000 f9a4 	bl	801c1cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801be84:	e00a      	b.n	801be9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801be86:	6878      	ldr	r0, [r7, #4]
 801be88:	f000 f9a0 	bl	801c1cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801be8c:	e006      	b.n	801be9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801be8e:	6878      	ldr	r0, [r7, #4]
 801be90:	f000 f99c 	bl	801c1cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	2200      	movs	r2, #0
 801be98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801be9a:	e170      	b.n	801c17e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801be9c:	bf00      	nop
    return;
 801be9e:	e16e      	b.n	801c17e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bea4:	2b01      	cmp	r3, #1
 801bea6:	f040 814a 	bne.w	801c13e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801beaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801beae:	f003 0310 	and.w	r3, r3, #16
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	f000 8143 	beq.w	801c13e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801beb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bebc:	f003 0310 	and.w	r3, r3, #16
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	f000 813c 	beq.w	801c13e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801bec6:	2300      	movs	r3, #0
 801bec8:	60bb      	str	r3, [r7, #8]
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	681b      	ldr	r3, [r3, #0]
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	60bb      	str	r3, [r7, #8]
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	685b      	ldr	r3, [r3, #4]
 801bed8:	60bb      	str	r3, [r7, #8]
 801beda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	681b      	ldr	r3, [r3, #0]
 801bee0:	695b      	ldr	r3, [r3, #20]
 801bee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bee6:	2b40      	cmp	r3, #64	; 0x40
 801bee8:	f040 80b4 	bne.w	801c054 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	685b      	ldr	r3, [r3, #4]
 801bef4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801bef8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801befc:	2b00      	cmp	r3, #0
 801befe:	f000 8140 	beq.w	801c182 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801bf02:	687b      	ldr	r3, [r7, #4]
 801bf04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801bf06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801bf0a:	429a      	cmp	r2, r3
 801bf0c:	f080 8139 	bcs.w	801c182 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801bf16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf1c:	69db      	ldr	r3, [r3, #28]
 801bf1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bf22:	f000 8088 	beq.w	801c036 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	330c      	adds	r3, #12
 801bf2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bf34:	e853 3f00 	ldrex	r3, [r3]
 801bf38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801bf3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801bf40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bf44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	330c      	adds	r3, #12
 801bf4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801bf52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801bf56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801bf5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801bf62:	e841 2300 	strex	r3, r2, [r1]
 801bf66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801bf6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d1d9      	bne.n	801bf26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	681b      	ldr	r3, [r3, #0]
 801bf76:	3314      	adds	r3, #20
 801bf78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bf7c:	e853 3f00 	ldrex	r3, [r3]
 801bf80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801bf82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bf84:	f023 0301 	bic.w	r3, r3, #1
 801bf88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	3314      	adds	r3, #20
 801bf92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801bf96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801bf9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801bf9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801bfa2:	e841 2300 	strex	r3, r2, [r1]
 801bfa6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801bfa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d1e1      	bne.n	801bf72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	681b      	ldr	r3, [r3, #0]
 801bfb2:	3314      	adds	r3, #20
 801bfb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bfb8:	e853 3f00 	ldrex	r3, [r3]
 801bfbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801bfbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bfc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bfc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	3314      	adds	r3, #20
 801bfce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801bfd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 801bfd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bfd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801bfd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801bfda:	e841 2300 	strex	r3, r2, [r1]
 801bfde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801bfe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d1e3      	bne.n	801bfae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	2220      	movs	r2, #32
 801bfea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	2200      	movs	r2, #0
 801bff2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	681b      	ldr	r3, [r3, #0]
 801bff8:	330c      	adds	r3, #12
 801bffa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bffe:	e853 3f00 	ldrex	r3, [r3]
 801c002:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c006:	f023 0310 	bic.w	r3, r3, #16
 801c00a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	681b      	ldr	r3, [r3, #0]
 801c012:	330c      	adds	r3, #12
 801c014:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801c018:	65ba      	str	r2, [r7, #88]	; 0x58
 801c01a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c01c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c01e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c020:	e841 2300 	strex	r3, r2, [r1]
 801c024:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d1e3      	bne.n	801bff4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c030:	4618      	mov	r0, r3
 801c032:	f7fa fcef 	bl	8016a14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c03e:	b29b      	uxth	r3, r3
 801c040:	1ad3      	subs	r3, r2, r3
 801c042:	b29b      	uxth	r3, r3
 801c044:	4619      	mov	r1, r3
 801c046:	6878      	ldr	r0, [r7, #4]
 801c048:	f7e4 ff80 	bl	8000f4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801c04c:	e099      	b.n	801c182 <HAL_UART_IRQHandler+0x50e>
 801c04e:	bf00      	nop
 801c050:	0801c6ff 	.word	0x0801c6ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c05c:	b29b      	uxth	r3, r3
 801c05e:	1ad3      	subs	r3, r2, r3
 801c060:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c068:	b29b      	uxth	r3, r3
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	f000 808b 	beq.w	801c186 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801c070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c074:	2b00      	cmp	r3, #0
 801c076:	f000 8086 	beq.w	801c186 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	330c      	adds	r3, #12
 801c080:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c084:	e853 3f00 	ldrex	r3, [r3]
 801c088:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c08c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c090:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	681b      	ldr	r3, [r3, #0]
 801c098:	330c      	adds	r3, #12
 801c09a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801c09e:	647a      	str	r2, [r7, #68]	; 0x44
 801c0a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c0a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c0a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c0a6:	e841 2300 	strex	r3, r2, [r1]
 801c0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d1e3      	bne.n	801c07a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	3314      	adds	r3, #20
 801c0b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0bc:	e853 3f00 	ldrex	r3, [r3]
 801c0c0:	623b      	str	r3, [r7, #32]
   return(result);
 801c0c2:	6a3b      	ldr	r3, [r7, #32]
 801c0c4:	f023 0301 	bic.w	r3, r3, #1
 801c0c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	681b      	ldr	r3, [r3, #0]
 801c0d0:	3314      	adds	r3, #20
 801c0d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801c0d6:	633a      	str	r2, [r7, #48]	; 0x30
 801c0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c0da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c0de:	e841 2300 	strex	r3, r2, [r1]
 801c0e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	d1e3      	bne.n	801c0b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	2220      	movs	r2, #32
 801c0ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	2200      	movs	r2, #0
 801c0f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	330c      	adds	r3, #12
 801c0fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c100:	693b      	ldr	r3, [r7, #16]
 801c102:	e853 3f00 	ldrex	r3, [r3]
 801c106:	60fb      	str	r3, [r7, #12]
   return(result);
 801c108:	68fb      	ldr	r3, [r7, #12]
 801c10a:	f023 0310 	bic.w	r3, r3, #16
 801c10e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	330c      	adds	r3, #12
 801c118:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801c11c:	61fa      	str	r2, [r7, #28]
 801c11e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c120:	69b9      	ldr	r1, [r7, #24]
 801c122:	69fa      	ldr	r2, [r7, #28]
 801c124:	e841 2300 	strex	r3, r2, [r1]
 801c128:	617b      	str	r3, [r7, #20]
   return(result);
 801c12a:	697b      	ldr	r3, [r7, #20]
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d1e3      	bne.n	801c0f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801c130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c134:	4619      	mov	r1, r3
 801c136:	6878      	ldr	r0, [r7, #4]
 801c138:	f7e4 ff08 	bl	8000f4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801c13c:	e023      	b.n	801c186 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801c13e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c146:	2b00      	cmp	r3, #0
 801c148:	d009      	beq.n	801c15e <HAL_UART_IRQHandler+0x4ea>
 801c14a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c152:	2b00      	cmp	r3, #0
 801c154:	d003      	beq.n	801c15e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801c156:	6878      	ldr	r0, [r7, #4]
 801c158:	f000 fae5 	bl	801c726 <UART_Transmit_IT>
    return;
 801c15c:	e014      	b.n	801c188 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801c15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c166:	2b00      	cmp	r3, #0
 801c168:	d00e      	beq.n	801c188 <HAL_UART_IRQHandler+0x514>
 801c16a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c172:	2b00      	cmp	r3, #0
 801c174:	d008      	beq.n	801c188 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801c176:	6878      	ldr	r0, [r7, #4]
 801c178:	f000 fb25 	bl	801c7c6 <UART_EndTransmit_IT>
    return;
 801c17c:	e004      	b.n	801c188 <HAL_UART_IRQHandler+0x514>
    return;
 801c17e:	bf00      	nop
 801c180:	e002      	b.n	801c188 <HAL_UART_IRQHandler+0x514>
      return;
 801c182:	bf00      	nop
 801c184:	e000      	b.n	801c188 <HAL_UART_IRQHandler+0x514>
      return;
 801c186:	bf00      	nop
  }
}
 801c188:	37e8      	adds	r7, #232	; 0xe8
 801c18a:	46bd      	mov	sp, r7
 801c18c:	bd80      	pop	{r7, pc}
 801c18e:	bf00      	nop

0801c190 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801c190:	b480      	push	{r7}
 801c192:	b083      	sub	sp, #12
 801c194:	af00      	add	r7, sp, #0
 801c196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801c198:	bf00      	nop
 801c19a:	370c      	adds	r7, #12
 801c19c:	46bd      	mov	sp, r7
 801c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1a2:	4770      	bx	lr

0801c1a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801c1a4:	b480      	push	{r7}
 801c1a6:	b083      	sub	sp, #12
 801c1a8:	af00      	add	r7, sp, #0
 801c1aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801c1ac:	bf00      	nop
 801c1ae:	370c      	adds	r7, #12
 801c1b0:	46bd      	mov	sp, r7
 801c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1b6:	4770      	bx	lr

0801c1b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801c1b8:	b480      	push	{r7}
 801c1ba:	b083      	sub	sp, #12
 801c1bc:	af00      	add	r7, sp, #0
 801c1be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801c1c0:	bf00      	nop
 801c1c2:	370c      	adds	r7, #12
 801c1c4:	46bd      	mov	sp, r7
 801c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ca:	4770      	bx	lr

0801c1cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801c1cc:	b480      	push	{r7}
 801c1ce:	b083      	sub	sp, #12
 801c1d0:	af00      	add	r7, sp, #0
 801c1d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801c1d4:	bf00      	nop
 801c1d6:	370c      	adds	r7, #12
 801c1d8:	46bd      	mov	sp, r7
 801c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1de:	4770      	bx	lr

0801c1e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801c1e0:	b580      	push	{r7, lr}
 801c1e2:	b09c      	sub	sp, #112	; 0x70
 801c1e4:	af00      	add	r7, sp, #0
 801c1e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	681b      	ldr	r3, [r3, #0]
 801c1f2:	681b      	ldr	r3, [r3, #0]
 801c1f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d172      	bne.n	801c2e2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801c1fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c1fe:	2200      	movs	r2, #0
 801c200:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	330c      	adds	r3, #12
 801c208:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c20a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c20c:	e853 3f00 	ldrex	r3, [r3]
 801c210:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c218:	66bb      	str	r3, [r7, #104]	; 0x68
 801c21a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	330c      	adds	r3, #12
 801c220:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c222:	65ba      	str	r2, [r7, #88]	; 0x58
 801c224:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c226:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c228:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c22a:	e841 2300 	strex	r3, r2, [r1]
 801c22e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c232:	2b00      	cmp	r3, #0
 801c234:	d1e5      	bne.n	801c202 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c238:	681b      	ldr	r3, [r3, #0]
 801c23a:	3314      	adds	r3, #20
 801c23c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c240:	e853 3f00 	ldrex	r3, [r3]
 801c244:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c248:	f023 0301 	bic.w	r3, r3, #1
 801c24c:	667b      	str	r3, [r7, #100]	; 0x64
 801c24e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	3314      	adds	r3, #20
 801c254:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c256:	647a      	str	r2, [r7, #68]	; 0x44
 801c258:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c25a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c25c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c25e:	e841 2300 	strex	r3, r2, [r1]
 801c262:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c266:	2b00      	cmp	r3, #0
 801c268:	d1e5      	bne.n	801c236 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c26a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c26c:	681b      	ldr	r3, [r3, #0]
 801c26e:	3314      	adds	r3, #20
 801c270:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c274:	e853 3f00 	ldrex	r3, [r3]
 801c278:	623b      	str	r3, [r7, #32]
   return(result);
 801c27a:	6a3b      	ldr	r3, [r7, #32]
 801c27c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c280:	663b      	str	r3, [r7, #96]	; 0x60
 801c282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c284:	681b      	ldr	r3, [r3, #0]
 801c286:	3314      	adds	r3, #20
 801c288:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c28a:	633a      	str	r2, [r7, #48]	; 0x30
 801c28c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c28e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c292:	e841 2300 	strex	r3, r2, [r1]
 801c296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d1e5      	bne.n	801c26a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801c29e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c2a0:	2220      	movs	r2, #32
 801c2a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c2a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2aa:	2b01      	cmp	r3, #1
 801c2ac:	d119      	bne.n	801c2e2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c2ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c2b0:	681b      	ldr	r3, [r3, #0]
 801c2b2:	330c      	adds	r3, #12
 801c2b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2b6:	693b      	ldr	r3, [r7, #16]
 801c2b8:	e853 3f00 	ldrex	r3, [r3]
 801c2bc:	60fb      	str	r3, [r7, #12]
   return(result);
 801c2be:	68fb      	ldr	r3, [r7, #12]
 801c2c0:	f023 0310 	bic.w	r3, r3, #16
 801c2c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c2c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c2c8:	681b      	ldr	r3, [r3, #0]
 801c2ca:	330c      	adds	r3, #12
 801c2cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c2ce:	61fa      	str	r2, [r7, #28]
 801c2d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2d2:	69b9      	ldr	r1, [r7, #24]
 801c2d4:	69fa      	ldr	r2, [r7, #28]
 801c2d6:	e841 2300 	strex	r3, r2, [r1]
 801c2da:	617b      	str	r3, [r7, #20]
   return(result);
 801c2dc:	697b      	ldr	r3, [r7, #20]
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	d1e5      	bne.n	801c2ae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c2e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2e6:	2b01      	cmp	r3, #1
 801c2e8:	d106      	bne.n	801c2f8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c2ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c2ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c2ee:	4619      	mov	r1, r3
 801c2f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c2f2:	f7e4 fe2b 	bl	8000f4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c2f6:	e002      	b.n	801c2fe <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801c2f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c2fa:	f7ff ff53 	bl	801c1a4 <HAL_UART_RxCpltCallback>
}
 801c2fe:	bf00      	nop
 801c300:	3770      	adds	r7, #112	; 0x70
 801c302:	46bd      	mov	sp, r7
 801c304:	bd80      	pop	{r7, pc}

0801c306 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c306:	b580      	push	{r7, lr}
 801c308:	b084      	sub	sp, #16
 801c30a:	af00      	add	r7, sp, #0
 801c30c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c312:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c318:	2b01      	cmp	r3, #1
 801c31a:	d108      	bne.n	801c32e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801c31c:	68fb      	ldr	r3, [r7, #12]
 801c31e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c320:	085b      	lsrs	r3, r3, #1
 801c322:	b29b      	uxth	r3, r3
 801c324:	4619      	mov	r1, r3
 801c326:	68f8      	ldr	r0, [r7, #12]
 801c328:	f7e4 fe10 	bl	8000f4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c32c:	e002      	b.n	801c334 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801c32e:	68f8      	ldr	r0, [r7, #12]
 801c330:	f7ff ff42 	bl	801c1b8 <HAL_UART_RxHalfCpltCallback>
}
 801c334:	bf00      	nop
 801c336:	3710      	adds	r7, #16
 801c338:	46bd      	mov	sp, r7
 801c33a:	bd80      	pop	{r7, pc}

0801c33c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c33c:	b580      	push	{r7, lr}
 801c33e:	b084      	sub	sp, #16
 801c340:	af00      	add	r7, sp, #0
 801c342:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801c344:	2300      	movs	r3, #0
 801c346:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c34c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801c34e:	68bb      	ldr	r3, [r7, #8]
 801c350:	681b      	ldr	r3, [r3, #0]
 801c352:	695b      	ldr	r3, [r3, #20]
 801c354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c358:	2b80      	cmp	r3, #128	; 0x80
 801c35a:	bf0c      	ite	eq
 801c35c:	2301      	moveq	r3, #1
 801c35e:	2300      	movne	r3, #0
 801c360:	b2db      	uxtb	r3, r3
 801c362:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801c364:	68bb      	ldr	r3, [r7, #8]
 801c366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c36a:	b2db      	uxtb	r3, r3
 801c36c:	2b21      	cmp	r3, #33	; 0x21
 801c36e:	d108      	bne.n	801c382 <UART_DMAError+0x46>
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	2b00      	cmp	r3, #0
 801c374:	d005      	beq.n	801c382 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801c376:	68bb      	ldr	r3, [r7, #8]
 801c378:	2200      	movs	r2, #0
 801c37a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801c37c:	68b8      	ldr	r0, [r7, #8]
 801c37e:	f000 f933 	bl	801c5e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801c382:	68bb      	ldr	r3, [r7, #8]
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	695b      	ldr	r3, [r3, #20]
 801c388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c38c:	2b40      	cmp	r3, #64	; 0x40
 801c38e:	bf0c      	ite	eq
 801c390:	2301      	moveq	r3, #1
 801c392:	2300      	movne	r3, #0
 801c394:	b2db      	uxtb	r3, r3
 801c396:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801c398:	68bb      	ldr	r3, [r7, #8]
 801c39a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c39e:	b2db      	uxtb	r3, r3
 801c3a0:	2b22      	cmp	r3, #34	; 0x22
 801c3a2:	d108      	bne.n	801c3b6 <UART_DMAError+0x7a>
 801c3a4:	68fb      	ldr	r3, [r7, #12]
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d005      	beq.n	801c3b6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801c3aa:	68bb      	ldr	r3, [r7, #8]
 801c3ac:	2200      	movs	r2, #0
 801c3ae:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801c3b0:	68b8      	ldr	r0, [r7, #8]
 801c3b2:	f000 f941 	bl	801c638 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c3b6:	68bb      	ldr	r3, [r7, #8]
 801c3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3ba:	f043 0210 	orr.w	r2, r3, #16
 801c3be:	68bb      	ldr	r3, [r7, #8]
 801c3c0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c3c2:	68b8      	ldr	r0, [r7, #8]
 801c3c4:	f7ff ff02 	bl	801c1cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c3c8:	bf00      	nop
 801c3ca:	3710      	adds	r7, #16
 801c3cc:	46bd      	mov	sp, r7
 801c3ce:	bd80      	pop	{r7, pc}

0801c3d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801c3d0:	b580      	push	{r7, lr}
 801c3d2:	b090      	sub	sp, #64	; 0x40
 801c3d4:	af00      	add	r7, sp, #0
 801c3d6:	60f8      	str	r0, [r7, #12]
 801c3d8:	60b9      	str	r1, [r7, #8]
 801c3da:	603b      	str	r3, [r7, #0]
 801c3dc:	4613      	mov	r3, r2
 801c3de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c3e0:	e050      	b.n	801c484 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c3e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3e8:	d04c      	beq.n	801c484 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801c3ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d007      	beq.n	801c400 <UART_WaitOnFlagUntilTimeout+0x30>
 801c3f0:	f7fa f8c8 	bl	8016584 <HAL_GetTick>
 801c3f4:	4602      	mov	r2, r0
 801c3f6:	683b      	ldr	r3, [r7, #0]
 801c3f8:	1ad3      	subs	r3, r2, r3
 801c3fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c3fc:	429a      	cmp	r2, r3
 801c3fe:	d241      	bcs.n	801c484 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c400:	68fb      	ldr	r3, [r7, #12]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	330c      	adds	r3, #12
 801c406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c40a:	e853 3f00 	ldrex	r3, [r3]
 801c40e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c412:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c416:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c418:	68fb      	ldr	r3, [r7, #12]
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	330c      	adds	r3, #12
 801c41e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c420:	637a      	str	r2, [r7, #52]	; 0x34
 801c422:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c424:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c428:	e841 2300 	strex	r3, r2, [r1]
 801c42c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c430:	2b00      	cmp	r3, #0
 801c432:	d1e5      	bne.n	801c400 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c434:	68fb      	ldr	r3, [r7, #12]
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	3314      	adds	r3, #20
 801c43a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c43c:	697b      	ldr	r3, [r7, #20]
 801c43e:	e853 3f00 	ldrex	r3, [r3]
 801c442:	613b      	str	r3, [r7, #16]
   return(result);
 801c444:	693b      	ldr	r3, [r7, #16]
 801c446:	f023 0301 	bic.w	r3, r3, #1
 801c44a:	63bb      	str	r3, [r7, #56]	; 0x38
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	3314      	adds	r3, #20
 801c452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c454:	623a      	str	r2, [r7, #32]
 801c456:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c458:	69f9      	ldr	r1, [r7, #28]
 801c45a:	6a3a      	ldr	r2, [r7, #32]
 801c45c:	e841 2300 	strex	r3, r2, [r1]
 801c460:	61bb      	str	r3, [r7, #24]
   return(result);
 801c462:	69bb      	ldr	r3, [r7, #24]
 801c464:	2b00      	cmp	r3, #0
 801c466:	d1e5      	bne.n	801c434 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801c468:	68fb      	ldr	r3, [r7, #12]
 801c46a:	2220      	movs	r2, #32
 801c46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	2220      	movs	r2, #32
 801c474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	2200      	movs	r2, #0
 801c47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801c480:	2303      	movs	r3, #3
 801c482:	e00f      	b.n	801c4a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c484:	68fb      	ldr	r3, [r7, #12]
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	681a      	ldr	r2, [r3, #0]
 801c48a:	68bb      	ldr	r3, [r7, #8]
 801c48c:	4013      	ands	r3, r2
 801c48e:	68ba      	ldr	r2, [r7, #8]
 801c490:	429a      	cmp	r2, r3
 801c492:	bf0c      	ite	eq
 801c494:	2301      	moveq	r3, #1
 801c496:	2300      	movne	r3, #0
 801c498:	b2db      	uxtb	r3, r3
 801c49a:	461a      	mov	r2, r3
 801c49c:	79fb      	ldrb	r3, [r7, #7]
 801c49e:	429a      	cmp	r2, r3
 801c4a0:	d09f      	beq.n	801c3e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c4a2:	2300      	movs	r3, #0
}
 801c4a4:	4618      	mov	r0, r3
 801c4a6:	3740      	adds	r7, #64	; 0x40
 801c4a8:	46bd      	mov	sp, r7
 801c4aa:	bd80      	pop	{r7, pc}

0801c4ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c4ac:	b580      	push	{r7, lr}
 801c4ae:	b098      	sub	sp, #96	; 0x60
 801c4b0:	af00      	add	r7, sp, #0
 801c4b2:	60f8      	str	r0, [r7, #12]
 801c4b4:	60b9      	str	r1, [r7, #8]
 801c4b6:	4613      	mov	r3, r2
 801c4b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801c4ba:	68ba      	ldr	r2, [r7, #8]
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	88fa      	ldrh	r2, [r7, #6]
 801c4c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c4c6:	68fb      	ldr	r3, [r7, #12]
 801c4c8:	2200      	movs	r2, #0
 801c4ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	2222      	movs	r2, #34	; 0x22
 801c4d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801c4d4:	68fb      	ldr	r3, [r7, #12]
 801c4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c4d8:	4a40      	ldr	r2, [pc, #256]	; (801c5dc <UART_Start_Receive_DMA+0x130>)
 801c4da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c4e0:	4a3f      	ldr	r2, [pc, #252]	; (801c5e0 <UART_Start_Receive_DMA+0x134>)
 801c4e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c4e8:	4a3e      	ldr	r2, [pc, #248]	; (801c5e4 <UART_Start_Receive_DMA+0x138>)
 801c4ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c4f0:	2200      	movs	r2, #0
 801c4f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801c4f4:	f107 0308 	add.w	r3, r7, #8
 801c4f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c4fe:	68fb      	ldr	r3, [r7, #12]
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	3304      	adds	r3, #4
 801c504:	4619      	mov	r1, r3
 801c506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c508:	681a      	ldr	r2, [r3, #0]
 801c50a:	88fb      	ldrh	r3, [r7, #6]
 801c50c:	f7fa fa2a 	bl	8016964 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801c510:	2300      	movs	r3, #0
 801c512:	613b      	str	r3, [r7, #16]
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	681b      	ldr	r3, [r3, #0]
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	613b      	str	r3, [r7, #16]
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	685b      	ldr	r3, [r3, #4]
 801c522:	613b      	str	r3, [r7, #16]
 801c524:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	2200      	movs	r2, #0
 801c52a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	691b      	ldr	r3, [r3, #16]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d019      	beq.n	801c56a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	681b      	ldr	r3, [r3, #0]
 801c53a:	330c      	adds	r3, #12
 801c53c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c53e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c540:	e853 3f00 	ldrex	r3, [r3]
 801c544:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c54c:	65bb      	str	r3, [r7, #88]	; 0x58
 801c54e:	68fb      	ldr	r3, [r7, #12]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	330c      	adds	r3, #12
 801c554:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c556:	64fa      	str	r2, [r7, #76]	; 0x4c
 801c558:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c55a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801c55c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c55e:	e841 2300 	strex	r3, r2, [r1]
 801c562:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801c564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c566:	2b00      	cmp	r3, #0
 801c568:	d1e5      	bne.n	801c536 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c56a:	68fb      	ldr	r3, [r7, #12]
 801c56c:	681b      	ldr	r3, [r3, #0]
 801c56e:	3314      	adds	r3, #20
 801c570:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c574:	e853 3f00 	ldrex	r3, [r3]
 801c578:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c57c:	f043 0301 	orr.w	r3, r3, #1
 801c580:	657b      	str	r3, [r7, #84]	; 0x54
 801c582:	68fb      	ldr	r3, [r7, #12]
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	3314      	adds	r3, #20
 801c588:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c58a:	63ba      	str	r2, [r7, #56]	; 0x38
 801c58c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c58e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c592:	e841 2300 	strex	r3, r2, [r1]
 801c596:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d1e5      	bne.n	801c56a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c59e:	68fb      	ldr	r3, [r7, #12]
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	3314      	adds	r3, #20
 801c5a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c5a6:	69bb      	ldr	r3, [r7, #24]
 801c5a8:	e853 3f00 	ldrex	r3, [r3]
 801c5ac:	617b      	str	r3, [r7, #20]
   return(result);
 801c5ae:	697b      	ldr	r3, [r7, #20]
 801c5b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c5b4:	653b      	str	r3, [r7, #80]	; 0x50
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	681b      	ldr	r3, [r3, #0]
 801c5ba:	3314      	adds	r3, #20
 801c5bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c5be:	627a      	str	r2, [r7, #36]	; 0x24
 801c5c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c5c2:	6a39      	ldr	r1, [r7, #32]
 801c5c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c5c6:	e841 2300 	strex	r3, r2, [r1]
 801c5ca:	61fb      	str	r3, [r7, #28]
   return(result);
 801c5cc:	69fb      	ldr	r3, [r7, #28]
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	d1e5      	bne.n	801c59e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 801c5d2:	2300      	movs	r3, #0
}
 801c5d4:	4618      	mov	r0, r3
 801c5d6:	3760      	adds	r7, #96	; 0x60
 801c5d8:	46bd      	mov	sp, r7
 801c5da:	bd80      	pop	{r7, pc}
 801c5dc:	0801c1e1 	.word	0x0801c1e1
 801c5e0:	0801c307 	.word	0x0801c307
 801c5e4:	0801c33d 	.word	0x0801c33d

0801c5e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c5e8:	b480      	push	{r7}
 801c5ea:	b089      	sub	sp, #36	; 0x24
 801c5ec:	af00      	add	r7, sp, #0
 801c5ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	330c      	adds	r3, #12
 801c5f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	e853 3f00 	ldrex	r3, [r3]
 801c5fe:	60bb      	str	r3, [r7, #8]
   return(result);
 801c600:	68bb      	ldr	r3, [r7, #8]
 801c602:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801c606:	61fb      	str	r3, [r7, #28]
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	330c      	adds	r3, #12
 801c60e:	69fa      	ldr	r2, [r7, #28]
 801c610:	61ba      	str	r2, [r7, #24]
 801c612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c614:	6979      	ldr	r1, [r7, #20]
 801c616:	69ba      	ldr	r2, [r7, #24]
 801c618:	e841 2300 	strex	r3, r2, [r1]
 801c61c:	613b      	str	r3, [r7, #16]
   return(result);
 801c61e:	693b      	ldr	r3, [r7, #16]
 801c620:	2b00      	cmp	r3, #0
 801c622:	d1e5      	bne.n	801c5f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	2220      	movs	r2, #32
 801c628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801c62c:	bf00      	nop
 801c62e:	3724      	adds	r7, #36	; 0x24
 801c630:	46bd      	mov	sp, r7
 801c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c636:	4770      	bx	lr

0801c638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c638:	b480      	push	{r7}
 801c63a:	b095      	sub	sp, #84	; 0x54
 801c63c:	af00      	add	r7, sp, #0
 801c63e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	330c      	adds	r3, #12
 801c646:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c64a:	e853 3f00 	ldrex	r3, [r3]
 801c64e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c652:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c656:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	330c      	adds	r3, #12
 801c65e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c660:	643a      	str	r2, [r7, #64]	; 0x40
 801c662:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c664:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c666:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c668:	e841 2300 	strex	r3, r2, [r1]
 801c66c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c670:	2b00      	cmp	r3, #0
 801c672:	d1e5      	bne.n	801c640 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	681b      	ldr	r3, [r3, #0]
 801c678:	3314      	adds	r3, #20
 801c67a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c67c:	6a3b      	ldr	r3, [r7, #32]
 801c67e:	e853 3f00 	ldrex	r3, [r3]
 801c682:	61fb      	str	r3, [r7, #28]
   return(result);
 801c684:	69fb      	ldr	r3, [r7, #28]
 801c686:	f023 0301 	bic.w	r3, r3, #1
 801c68a:	64bb      	str	r3, [r7, #72]	; 0x48
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	3314      	adds	r3, #20
 801c692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c694:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c69a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c69c:	e841 2300 	strex	r3, r2, [r1]
 801c6a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d1e5      	bne.n	801c674 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6ac:	2b01      	cmp	r3, #1
 801c6ae:	d119      	bne.n	801c6e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	330c      	adds	r3, #12
 801c6b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c6b8:	68fb      	ldr	r3, [r7, #12]
 801c6ba:	e853 3f00 	ldrex	r3, [r3]
 801c6be:	60bb      	str	r3, [r7, #8]
   return(result);
 801c6c0:	68bb      	ldr	r3, [r7, #8]
 801c6c2:	f023 0310 	bic.w	r3, r3, #16
 801c6c6:	647b      	str	r3, [r7, #68]	; 0x44
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	330c      	adds	r3, #12
 801c6ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c6d0:	61ba      	str	r2, [r7, #24]
 801c6d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c6d4:	6979      	ldr	r1, [r7, #20]
 801c6d6:	69ba      	ldr	r2, [r7, #24]
 801c6d8:	e841 2300 	strex	r3, r2, [r1]
 801c6dc:	613b      	str	r3, [r7, #16]
   return(result);
 801c6de:	693b      	ldr	r3, [r7, #16]
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d1e5      	bne.n	801c6b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	2220      	movs	r2, #32
 801c6e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	2200      	movs	r2, #0
 801c6f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 801c6f2:	bf00      	nop
 801c6f4:	3754      	adds	r7, #84	; 0x54
 801c6f6:	46bd      	mov	sp, r7
 801c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6fc:	4770      	bx	lr

0801c6fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c6fe:	b580      	push	{r7, lr}
 801c700:	b084      	sub	sp, #16
 801c702:	af00      	add	r7, sp, #0
 801c704:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c70a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	2200      	movs	r2, #0
 801c710:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	2200      	movs	r2, #0
 801c716:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c718:	68f8      	ldr	r0, [r7, #12]
 801c71a:	f7ff fd57 	bl	801c1cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c71e:	bf00      	nop
 801c720:	3710      	adds	r7, #16
 801c722:	46bd      	mov	sp, r7
 801c724:	bd80      	pop	{r7, pc}

0801c726 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801c726:	b480      	push	{r7}
 801c728:	b085      	sub	sp, #20
 801c72a:	af00      	add	r7, sp, #0
 801c72c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c734:	b2db      	uxtb	r3, r3
 801c736:	2b21      	cmp	r3, #33	; 0x21
 801c738:	d13e      	bne.n	801c7b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	689b      	ldr	r3, [r3, #8]
 801c73e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c742:	d114      	bne.n	801c76e <UART_Transmit_IT+0x48>
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	691b      	ldr	r3, [r3, #16]
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d110      	bne.n	801c76e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	6a1b      	ldr	r3, [r3, #32]
 801c750:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	881b      	ldrh	r3, [r3, #0]
 801c756:	461a      	mov	r2, r3
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c760:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	6a1b      	ldr	r3, [r3, #32]
 801c766:	1c9a      	adds	r2, r3, #2
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	621a      	str	r2, [r3, #32]
 801c76c:	e008      	b.n	801c780 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	6a1b      	ldr	r3, [r3, #32]
 801c772:	1c59      	adds	r1, r3, #1
 801c774:	687a      	ldr	r2, [r7, #4]
 801c776:	6211      	str	r1, [r2, #32]
 801c778:	781a      	ldrb	r2, [r3, #0]
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	681b      	ldr	r3, [r3, #0]
 801c77e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c784:	b29b      	uxth	r3, r3
 801c786:	3b01      	subs	r3, #1
 801c788:	b29b      	uxth	r3, r3
 801c78a:	687a      	ldr	r2, [r7, #4]
 801c78c:	4619      	mov	r1, r3
 801c78e:	84d1      	strh	r1, [r2, #38]	; 0x26
 801c790:	2b00      	cmp	r3, #0
 801c792:	d10f      	bne.n	801c7b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801c794:	687b      	ldr	r3, [r7, #4]
 801c796:	681b      	ldr	r3, [r3, #0]
 801c798:	68da      	ldr	r2, [r3, #12]
 801c79a:	687b      	ldr	r3, [r7, #4]
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c7a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	68da      	ldr	r2, [r3, #12]
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c7b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801c7b4:	2300      	movs	r3, #0
 801c7b6:	e000      	b.n	801c7ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801c7b8:	2302      	movs	r3, #2
  }
}
 801c7ba:	4618      	mov	r0, r3
 801c7bc:	3714      	adds	r7, #20
 801c7be:	46bd      	mov	sp, r7
 801c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7c4:	4770      	bx	lr

0801c7c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c7c6:	b580      	push	{r7, lr}
 801c7c8:	b082      	sub	sp, #8
 801c7ca:	af00      	add	r7, sp, #0
 801c7cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	68da      	ldr	r2, [r3, #12]
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c7dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c7de:	687b      	ldr	r3, [r7, #4]
 801c7e0:	2220      	movs	r2, #32
 801c7e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801c7e6:	6878      	ldr	r0, [r7, #4]
 801c7e8:	f7ff fcd2 	bl	801c190 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801c7ec:	2300      	movs	r3, #0
}
 801c7ee:	4618      	mov	r0, r3
 801c7f0:	3708      	adds	r7, #8
 801c7f2:	46bd      	mov	sp, r7
 801c7f4:	bd80      	pop	{r7, pc}

0801c7f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801c7f6:	b580      	push	{r7, lr}
 801c7f8:	b08c      	sub	sp, #48	; 0x30
 801c7fa:	af00      	add	r7, sp, #0
 801c7fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c804:	b2db      	uxtb	r3, r3
 801c806:	2b22      	cmp	r3, #34	; 0x22
 801c808:	f040 80ab 	bne.w	801c962 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	689b      	ldr	r3, [r3, #8]
 801c810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c814:	d117      	bne.n	801c846 <UART_Receive_IT+0x50>
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	691b      	ldr	r3, [r3, #16]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d113      	bne.n	801c846 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801c81e:	2300      	movs	r3, #0
 801c820:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c826:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	685b      	ldr	r3, [r3, #4]
 801c82e:	b29b      	uxth	r3, r3
 801c830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c834:	b29a      	uxth	r2, r3
 801c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c838:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801c83a:	687b      	ldr	r3, [r7, #4]
 801c83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c83e:	1c9a      	adds	r2, r3, #2
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	629a      	str	r2, [r3, #40]	; 0x28
 801c844:	e026      	b.n	801c894 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c84a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801c84c:	2300      	movs	r3, #0
 801c84e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	689b      	ldr	r3, [r3, #8]
 801c854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c858:	d007      	beq.n	801c86a <UART_Receive_IT+0x74>
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	689b      	ldr	r3, [r3, #8]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d10a      	bne.n	801c878 <UART_Receive_IT+0x82>
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	691b      	ldr	r3, [r3, #16]
 801c866:	2b00      	cmp	r3, #0
 801c868:	d106      	bne.n	801c878 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	681b      	ldr	r3, [r3, #0]
 801c86e:	685b      	ldr	r3, [r3, #4]
 801c870:	b2da      	uxtb	r2, r3
 801c872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c874:	701a      	strb	r2, [r3, #0]
 801c876:	e008      	b.n	801c88a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	685b      	ldr	r3, [r3, #4]
 801c87e:	b2db      	uxtb	r3, r3
 801c880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c884:	b2da      	uxtb	r2, r3
 801c886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c888:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c88e:	1c5a      	adds	r2, r3, #1
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c898:	b29b      	uxth	r3, r3
 801c89a:	3b01      	subs	r3, #1
 801c89c:	b29b      	uxth	r3, r3
 801c89e:	687a      	ldr	r2, [r7, #4]
 801c8a0:	4619      	mov	r1, r3
 801c8a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d15a      	bne.n	801c95e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	681b      	ldr	r3, [r3, #0]
 801c8ac:	68da      	ldr	r2, [r3, #12]
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	f022 0220 	bic.w	r2, r2, #32
 801c8b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	68da      	ldr	r2, [r3, #12]
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	681b      	ldr	r3, [r3, #0]
 801c8c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c8c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	681b      	ldr	r3, [r3, #0]
 801c8cc:	695a      	ldr	r2, [r3, #20]
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	f022 0201 	bic.w	r2, r2, #1
 801c8d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	2220      	movs	r2, #32
 801c8dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c8e4:	2b01      	cmp	r3, #1
 801c8e6:	d135      	bne.n	801c954 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	2200      	movs	r2, #0
 801c8ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	330c      	adds	r3, #12
 801c8f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c8f6:	697b      	ldr	r3, [r7, #20]
 801c8f8:	e853 3f00 	ldrex	r3, [r3]
 801c8fc:	613b      	str	r3, [r7, #16]
   return(result);
 801c8fe:	693b      	ldr	r3, [r7, #16]
 801c900:	f023 0310 	bic.w	r3, r3, #16
 801c904:	627b      	str	r3, [r7, #36]	; 0x24
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	681b      	ldr	r3, [r3, #0]
 801c90a:	330c      	adds	r3, #12
 801c90c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c90e:	623a      	str	r2, [r7, #32]
 801c910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c912:	69f9      	ldr	r1, [r7, #28]
 801c914:	6a3a      	ldr	r2, [r7, #32]
 801c916:	e841 2300 	strex	r3, r2, [r1]
 801c91a:	61bb      	str	r3, [r7, #24]
   return(result);
 801c91c:	69bb      	ldr	r3, [r7, #24]
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d1e5      	bne.n	801c8ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	f003 0310 	and.w	r3, r3, #16
 801c92c:	2b10      	cmp	r3, #16
 801c92e:	d10a      	bne.n	801c946 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801c930:	2300      	movs	r3, #0
 801c932:	60fb      	str	r3, [r7, #12]
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	60fb      	str	r3, [r7, #12]
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	685b      	ldr	r3, [r3, #4]
 801c942:	60fb      	str	r3, [r7, #12]
 801c944:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c946:	687b      	ldr	r3, [r7, #4]
 801c948:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c94a:	4619      	mov	r1, r3
 801c94c:	6878      	ldr	r0, [r7, #4]
 801c94e:	f7e4 fafd 	bl	8000f4c <HAL_UARTEx_RxEventCallback>
 801c952:	e002      	b.n	801c95a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801c954:	6878      	ldr	r0, [r7, #4]
 801c956:	f7ff fc25 	bl	801c1a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801c95a:	2300      	movs	r3, #0
 801c95c:	e002      	b.n	801c964 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801c95e:	2300      	movs	r3, #0
 801c960:	e000      	b.n	801c964 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801c962:	2302      	movs	r3, #2
  }
}
 801c964:	4618      	mov	r0, r3
 801c966:	3730      	adds	r7, #48	; 0x30
 801c968:	46bd      	mov	sp, r7
 801c96a:	bd80      	pop	{r7, pc}

0801c96c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801c96c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c970:	b0c0      	sub	sp, #256	; 0x100
 801c972:	af00      	add	r7, sp, #0
 801c974:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801c978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c97c:	681b      	ldr	r3, [r3, #0]
 801c97e:	691b      	ldr	r3, [r3, #16]
 801c980:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801c984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c988:	68d9      	ldr	r1, [r3, #12]
 801c98a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c98e:	681a      	ldr	r2, [r3, #0]
 801c990:	ea40 0301 	orr.w	r3, r0, r1
 801c994:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801c996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c99a:	689a      	ldr	r2, [r3, #8]
 801c99c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c9a0:	691b      	ldr	r3, [r3, #16]
 801c9a2:	431a      	orrs	r2, r3
 801c9a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c9a8:	695b      	ldr	r3, [r3, #20]
 801c9aa:	431a      	orrs	r2, r3
 801c9ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c9b0:	69db      	ldr	r3, [r3, #28]
 801c9b2:	4313      	orrs	r3, r2
 801c9b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801c9b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	68db      	ldr	r3, [r3, #12]
 801c9c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801c9c4:	f021 010c 	bic.w	r1, r1, #12
 801c9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c9cc:	681a      	ldr	r2, [r3, #0]
 801c9ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801c9d2:	430b      	orrs	r3, r1
 801c9d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801c9d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c9da:	681b      	ldr	r3, [r3, #0]
 801c9dc:	695b      	ldr	r3, [r3, #20]
 801c9de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801c9e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c9e6:	6999      	ldr	r1, [r3, #24]
 801c9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c9ec:	681a      	ldr	r2, [r3, #0]
 801c9ee:	ea40 0301 	orr.w	r3, r0, r1
 801c9f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801c9f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c9f8:	681a      	ldr	r2, [r3, #0]
 801c9fa:	4b8f      	ldr	r3, [pc, #572]	; (801cc38 <UART_SetConfig+0x2cc>)
 801c9fc:	429a      	cmp	r2, r3
 801c9fe:	d005      	beq.n	801ca0c <UART_SetConfig+0xa0>
 801ca00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ca04:	681a      	ldr	r2, [r3, #0]
 801ca06:	4b8d      	ldr	r3, [pc, #564]	; (801cc3c <UART_SetConfig+0x2d0>)
 801ca08:	429a      	cmp	r2, r3
 801ca0a:	d104      	bne.n	801ca16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801ca0c:	f7fd ffbc 	bl	801a988 <HAL_RCC_GetPCLK2Freq>
 801ca10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801ca14:	e003      	b.n	801ca1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801ca16:	f7fd ffa3 	bl	801a960 <HAL_RCC_GetPCLK1Freq>
 801ca1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801ca1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ca22:	69db      	ldr	r3, [r3, #28]
 801ca24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ca28:	f040 810c 	bne.w	801cc44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801ca2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ca30:	2200      	movs	r2, #0
 801ca32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801ca36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801ca3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801ca3e:	4622      	mov	r2, r4
 801ca40:	462b      	mov	r3, r5
 801ca42:	1891      	adds	r1, r2, r2
 801ca44:	65b9      	str	r1, [r7, #88]	; 0x58
 801ca46:	415b      	adcs	r3, r3
 801ca48:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ca4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801ca4e:	4621      	mov	r1, r4
 801ca50:	eb12 0801 	adds.w	r8, r2, r1
 801ca54:	4629      	mov	r1, r5
 801ca56:	eb43 0901 	adc.w	r9, r3, r1
 801ca5a:	f04f 0200 	mov.w	r2, #0
 801ca5e:	f04f 0300 	mov.w	r3, #0
 801ca62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801ca66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801ca6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801ca6e:	4690      	mov	r8, r2
 801ca70:	4699      	mov	r9, r3
 801ca72:	4623      	mov	r3, r4
 801ca74:	eb18 0303 	adds.w	r3, r8, r3
 801ca78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801ca7c:	462b      	mov	r3, r5
 801ca7e:	eb49 0303 	adc.w	r3, r9, r3
 801ca82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801ca86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ca8a:	685b      	ldr	r3, [r3, #4]
 801ca8c:	2200      	movs	r2, #0
 801ca8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801ca92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801ca96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801ca9a:	460b      	mov	r3, r1
 801ca9c:	18db      	adds	r3, r3, r3
 801ca9e:	653b      	str	r3, [r7, #80]	; 0x50
 801caa0:	4613      	mov	r3, r2
 801caa2:	eb42 0303 	adc.w	r3, r2, r3
 801caa6:	657b      	str	r3, [r7, #84]	; 0x54
 801caa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801caac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801cab0:	f7e4 f8a2 	bl	8000bf8 <__aeabi_uldivmod>
 801cab4:	4602      	mov	r2, r0
 801cab6:	460b      	mov	r3, r1
 801cab8:	4b61      	ldr	r3, [pc, #388]	; (801cc40 <UART_SetConfig+0x2d4>)
 801caba:	fba3 2302 	umull	r2, r3, r3, r2
 801cabe:	095b      	lsrs	r3, r3, #5
 801cac0:	011c      	lsls	r4, r3, #4
 801cac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cac6:	2200      	movs	r2, #0
 801cac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801cacc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801cad0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801cad4:	4642      	mov	r2, r8
 801cad6:	464b      	mov	r3, r9
 801cad8:	1891      	adds	r1, r2, r2
 801cada:	64b9      	str	r1, [r7, #72]	; 0x48
 801cadc:	415b      	adcs	r3, r3
 801cade:	64fb      	str	r3, [r7, #76]	; 0x4c
 801cae0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801cae4:	4641      	mov	r1, r8
 801cae6:	eb12 0a01 	adds.w	sl, r2, r1
 801caea:	4649      	mov	r1, r9
 801caec:	eb43 0b01 	adc.w	fp, r3, r1
 801caf0:	f04f 0200 	mov.w	r2, #0
 801caf4:	f04f 0300 	mov.w	r3, #0
 801caf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801cafc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801cb00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801cb04:	4692      	mov	sl, r2
 801cb06:	469b      	mov	fp, r3
 801cb08:	4643      	mov	r3, r8
 801cb0a:	eb1a 0303 	adds.w	r3, sl, r3
 801cb0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801cb12:	464b      	mov	r3, r9
 801cb14:	eb4b 0303 	adc.w	r3, fp, r3
 801cb18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801cb1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb20:	685b      	ldr	r3, [r3, #4]
 801cb22:	2200      	movs	r2, #0
 801cb24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801cb28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801cb2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801cb30:	460b      	mov	r3, r1
 801cb32:	18db      	adds	r3, r3, r3
 801cb34:	643b      	str	r3, [r7, #64]	; 0x40
 801cb36:	4613      	mov	r3, r2
 801cb38:	eb42 0303 	adc.w	r3, r2, r3
 801cb3c:	647b      	str	r3, [r7, #68]	; 0x44
 801cb3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801cb42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801cb46:	f7e4 f857 	bl	8000bf8 <__aeabi_uldivmod>
 801cb4a:	4602      	mov	r2, r0
 801cb4c:	460b      	mov	r3, r1
 801cb4e:	4611      	mov	r1, r2
 801cb50:	4b3b      	ldr	r3, [pc, #236]	; (801cc40 <UART_SetConfig+0x2d4>)
 801cb52:	fba3 2301 	umull	r2, r3, r3, r1
 801cb56:	095b      	lsrs	r3, r3, #5
 801cb58:	2264      	movs	r2, #100	; 0x64
 801cb5a:	fb02 f303 	mul.w	r3, r2, r3
 801cb5e:	1acb      	subs	r3, r1, r3
 801cb60:	00db      	lsls	r3, r3, #3
 801cb62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801cb66:	4b36      	ldr	r3, [pc, #216]	; (801cc40 <UART_SetConfig+0x2d4>)
 801cb68:	fba3 2302 	umull	r2, r3, r3, r2
 801cb6c:	095b      	lsrs	r3, r3, #5
 801cb6e:	005b      	lsls	r3, r3, #1
 801cb70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801cb74:	441c      	add	r4, r3
 801cb76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cb7a:	2200      	movs	r2, #0
 801cb7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801cb80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801cb84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801cb88:	4642      	mov	r2, r8
 801cb8a:	464b      	mov	r3, r9
 801cb8c:	1891      	adds	r1, r2, r2
 801cb8e:	63b9      	str	r1, [r7, #56]	; 0x38
 801cb90:	415b      	adcs	r3, r3
 801cb92:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cb94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801cb98:	4641      	mov	r1, r8
 801cb9a:	1851      	adds	r1, r2, r1
 801cb9c:	6339      	str	r1, [r7, #48]	; 0x30
 801cb9e:	4649      	mov	r1, r9
 801cba0:	414b      	adcs	r3, r1
 801cba2:	637b      	str	r3, [r7, #52]	; 0x34
 801cba4:	f04f 0200 	mov.w	r2, #0
 801cba8:	f04f 0300 	mov.w	r3, #0
 801cbac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801cbb0:	4659      	mov	r1, fp
 801cbb2:	00cb      	lsls	r3, r1, #3
 801cbb4:	4651      	mov	r1, sl
 801cbb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cbba:	4651      	mov	r1, sl
 801cbbc:	00ca      	lsls	r2, r1, #3
 801cbbe:	4610      	mov	r0, r2
 801cbc0:	4619      	mov	r1, r3
 801cbc2:	4603      	mov	r3, r0
 801cbc4:	4642      	mov	r2, r8
 801cbc6:	189b      	adds	r3, r3, r2
 801cbc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801cbcc:	464b      	mov	r3, r9
 801cbce:	460a      	mov	r2, r1
 801cbd0:	eb42 0303 	adc.w	r3, r2, r3
 801cbd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801cbd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cbdc:	685b      	ldr	r3, [r3, #4]
 801cbde:	2200      	movs	r2, #0
 801cbe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801cbe4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801cbe8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801cbec:	460b      	mov	r3, r1
 801cbee:	18db      	adds	r3, r3, r3
 801cbf0:	62bb      	str	r3, [r7, #40]	; 0x28
 801cbf2:	4613      	mov	r3, r2
 801cbf4:	eb42 0303 	adc.w	r3, r2, r3
 801cbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cbfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801cbfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801cc02:	f7e3 fff9 	bl	8000bf8 <__aeabi_uldivmod>
 801cc06:	4602      	mov	r2, r0
 801cc08:	460b      	mov	r3, r1
 801cc0a:	4b0d      	ldr	r3, [pc, #52]	; (801cc40 <UART_SetConfig+0x2d4>)
 801cc0c:	fba3 1302 	umull	r1, r3, r3, r2
 801cc10:	095b      	lsrs	r3, r3, #5
 801cc12:	2164      	movs	r1, #100	; 0x64
 801cc14:	fb01 f303 	mul.w	r3, r1, r3
 801cc18:	1ad3      	subs	r3, r2, r3
 801cc1a:	00db      	lsls	r3, r3, #3
 801cc1c:	3332      	adds	r3, #50	; 0x32
 801cc1e:	4a08      	ldr	r2, [pc, #32]	; (801cc40 <UART_SetConfig+0x2d4>)
 801cc20:	fba2 2303 	umull	r2, r3, r2, r3
 801cc24:	095b      	lsrs	r3, r3, #5
 801cc26:	f003 0207 	and.w	r2, r3, #7
 801cc2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	4422      	add	r2, r4
 801cc32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801cc34:	e105      	b.n	801ce42 <UART_SetConfig+0x4d6>
 801cc36:	bf00      	nop
 801cc38:	40011000 	.word	0x40011000
 801cc3c:	40011400 	.word	0x40011400
 801cc40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801cc44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cc48:	2200      	movs	r2, #0
 801cc4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801cc4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801cc52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801cc56:	4642      	mov	r2, r8
 801cc58:	464b      	mov	r3, r9
 801cc5a:	1891      	adds	r1, r2, r2
 801cc5c:	6239      	str	r1, [r7, #32]
 801cc5e:	415b      	adcs	r3, r3
 801cc60:	627b      	str	r3, [r7, #36]	; 0x24
 801cc62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801cc66:	4641      	mov	r1, r8
 801cc68:	1854      	adds	r4, r2, r1
 801cc6a:	4649      	mov	r1, r9
 801cc6c:	eb43 0501 	adc.w	r5, r3, r1
 801cc70:	f04f 0200 	mov.w	r2, #0
 801cc74:	f04f 0300 	mov.w	r3, #0
 801cc78:	00eb      	lsls	r3, r5, #3
 801cc7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801cc7e:	00e2      	lsls	r2, r4, #3
 801cc80:	4614      	mov	r4, r2
 801cc82:	461d      	mov	r5, r3
 801cc84:	4643      	mov	r3, r8
 801cc86:	18e3      	adds	r3, r4, r3
 801cc88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801cc8c:	464b      	mov	r3, r9
 801cc8e:	eb45 0303 	adc.w	r3, r5, r3
 801cc92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801cc96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cc9a:	685b      	ldr	r3, [r3, #4]
 801cc9c:	2200      	movs	r2, #0
 801cc9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cca2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801cca6:	f04f 0200 	mov.w	r2, #0
 801ccaa:	f04f 0300 	mov.w	r3, #0
 801ccae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801ccb2:	4629      	mov	r1, r5
 801ccb4:	008b      	lsls	r3, r1, #2
 801ccb6:	4621      	mov	r1, r4
 801ccb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801ccbc:	4621      	mov	r1, r4
 801ccbe:	008a      	lsls	r2, r1, #2
 801ccc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801ccc4:	f7e3 ff98 	bl	8000bf8 <__aeabi_uldivmod>
 801ccc8:	4602      	mov	r2, r0
 801ccca:	460b      	mov	r3, r1
 801cccc:	4b60      	ldr	r3, [pc, #384]	; (801ce50 <UART_SetConfig+0x4e4>)
 801ccce:	fba3 2302 	umull	r2, r3, r3, r2
 801ccd2:	095b      	lsrs	r3, r3, #5
 801ccd4:	011c      	lsls	r4, r3, #4
 801ccd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ccda:	2200      	movs	r2, #0
 801ccdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801cce0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801cce4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801cce8:	4642      	mov	r2, r8
 801ccea:	464b      	mov	r3, r9
 801ccec:	1891      	adds	r1, r2, r2
 801ccee:	61b9      	str	r1, [r7, #24]
 801ccf0:	415b      	adcs	r3, r3
 801ccf2:	61fb      	str	r3, [r7, #28]
 801ccf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ccf8:	4641      	mov	r1, r8
 801ccfa:	1851      	adds	r1, r2, r1
 801ccfc:	6139      	str	r1, [r7, #16]
 801ccfe:	4649      	mov	r1, r9
 801cd00:	414b      	adcs	r3, r1
 801cd02:	617b      	str	r3, [r7, #20]
 801cd04:	f04f 0200 	mov.w	r2, #0
 801cd08:	f04f 0300 	mov.w	r3, #0
 801cd0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801cd10:	4659      	mov	r1, fp
 801cd12:	00cb      	lsls	r3, r1, #3
 801cd14:	4651      	mov	r1, sl
 801cd16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cd1a:	4651      	mov	r1, sl
 801cd1c:	00ca      	lsls	r2, r1, #3
 801cd1e:	4610      	mov	r0, r2
 801cd20:	4619      	mov	r1, r3
 801cd22:	4603      	mov	r3, r0
 801cd24:	4642      	mov	r2, r8
 801cd26:	189b      	adds	r3, r3, r2
 801cd28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801cd2c:	464b      	mov	r3, r9
 801cd2e:	460a      	mov	r2, r1
 801cd30:	eb42 0303 	adc.w	r3, r2, r3
 801cd34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cd38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd3c:	685b      	ldr	r3, [r3, #4]
 801cd3e:	2200      	movs	r2, #0
 801cd40:	67bb      	str	r3, [r7, #120]	; 0x78
 801cd42:	67fa      	str	r2, [r7, #124]	; 0x7c
 801cd44:	f04f 0200 	mov.w	r2, #0
 801cd48:	f04f 0300 	mov.w	r3, #0
 801cd4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801cd50:	4649      	mov	r1, r9
 801cd52:	008b      	lsls	r3, r1, #2
 801cd54:	4641      	mov	r1, r8
 801cd56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cd5a:	4641      	mov	r1, r8
 801cd5c:	008a      	lsls	r2, r1, #2
 801cd5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801cd62:	f7e3 ff49 	bl	8000bf8 <__aeabi_uldivmod>
 801cd66:	4602      	mov	r2, r0
 801cd68:	460b      	mov	r3, r1
 801cd6a:	4b39      	ldr	r3, [pc, #228]	; (801ce50 <UART_SetConfig+0x4e4>)
 801cd6c:	fba3 1302 	umull	r1, r3, r3, r2
 801cd70:	095b      	lsrs	r3, r3, #5
 801cd72:	2164      	movs	r1, #100	; 0x64
 801cd74:	fb01 f303 	mul.w	r3, r1, r3
 801cd78:	1ad3      	subs	r3, r2, r3
 801cd7a:	011b      	lsls	r3, r3, #4
 801cd7c:	3332      	adds	r3, #50	; 0x32
 801cd7e:	4a34      	ldr	r2, [pc, #208]	; (801ce50 <UART_SetConfig+0x4e4>)
 801cd80:	fba2 2303 	umull	r2, r3, r2, r3
 801cd84:	095b      	lsrs	r3, r3, #5
 801cd86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cd8a:	441c      	add	r4, r3
 801cd8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cd90:	2200      	movs	r2, #0
 801cd92:	673b      	str	r3, [r7, #112]	; 0x70
 801cd94:	677a      	str	r2, [r7, #116]	; 0x74
 801cd96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801cd9a:	4642      	mov	r2, r8
 801cd9c:	464b      	mov	r3, r9
 801cd9e:	1891      	adds	r1, r2, r2
 801cda0:	60b9      	str	r1, [r7, #8]
 801cda2:	415b      	adcs	r3, r3
 801cda4:	60fb      	str	r3, [r7, #12]
 801cda6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cdaa:	4641      	mov	r1, r8
 801cdac:	1851      	adds	r1, r2, r1
 801cdae:	6039      	str	r1, [r7, #0]
 801cdb0:	4649      	mov	r1, r9
 801cdb2:	414b      	adcs	r3, r1
 801cdb4:	607b      	str	r3, [r7, #4]
 801cdb6:	f04f 0200 	mov.w	r2, #0
 801cdba:	f04f 0300 	mov.w	r3, #0
 801cdbe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801cdc2:	4659      	mov	r1, fp
 801cdc4:	00cb      	lsls	r3, r1, #3
 801cdc6:	4651      	mov	r1, sl
 801cdc8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cdcc:	4651      	mov	r1, sl
 801cdce:	00ca      	lsls	r2, r1, #3
 801cdd0:	4610      	mov	r0, r2
 801cdd2:	4619      	mov	r1, r3
 801cdd4:	4603      	mov	r3, r0
 801cdd6:	4642      	mov	r2, r8
 801cdd8:	189b      	adds	r3, r3, r2
 801cdda:	66bb      	str	r3, [r7, #104]	; 0x68
 801cddc:	464b      	mov	r3, r9
 801cdde:	460a      	mov	r2, r1
 801cde0:	eb42 0303 	adc.w	r3, r2, r3
 801cde4:	66fb      	str	r3, [r7, #108]	; 0x6c
 801cde6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cdea:	685b      	ldr	r3, [r3, #4]
 801cdec:	2200      	movs	r2, #0
 801cdee:	663b      	str	r3, [r7, #96]	; 0x60
 801cdf0:	667a      	str	r2, [r7, #100]	; 0x64
 801cdf2:	f04f 0200 	mov.w	r2, #0
 801cdf6:	f04f 0300 	mov.w	r3, #0
 801cdfa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801cdfe:	4649      	mov	r1, r9
 801ce00:	008b      	lsls	r3, r1, #2
 801ce02:	4641      	mov	r1, r8
 801ce04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801ce08:	4641      	mov	r1, r8
 801ce0a:	008a      	lsls	r2, r1, #2
 801ce0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801ce10:	f7e3 fef2 	bl	8000bf8 <__aeabi_uldivmod>
 801ce14:	4602      	mov	r2, r0
 801ce16:	460b      	mov	r3, r1
 801ce18:	4b0d      	ldr	r3, [pc, #52]	; (801ce50 <UART_SetConfig+0x4e4>)
 801ce1a:	fba3 1302 	umull	r1, r3, r3, r2
 801ce1e:	095b      	lsrs	r3, r3, #5
 801ce20:	2164      	movs	r1, #100	; 0x64
 801ce22:	fb01 f303 	mul.w	r3, r1, r3
 801ce26:	1ad3      	subs	r3, r2, r3
 801ce28:	011b      	lsls	r3, r3, #4
 801ce2a:	3332      	adds	r3, #50	; 0x32
 801ce2c:	4a08      	ldr	r2, [pc, #32]	; (801ce50 <UART_SetConfig+0x4e4>)
 801ce2e:	fba2 2303 	umull	r2, r3, r2, r3
 801ce32:	095b      	lsrs	r3, r3, #5
 801ce34:	f003 020f 	and.w	r2, r3, #15
 801ce38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ce3c:	681b      	ldr	r3, [r3, #0]
 801ce3e:	4422      	add	r2, r4
 801ce40:	609a      	str	r2, [r3, #8]
}
 801ce42:	bf00      	nop
 801ce44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801ce48:	46bd      	mov	sp, r7
 801ce4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ce4e:	bf00      	nop
 801ce50:	51eb851f 	.word	0x51eb851f

0801ce54 <pow>:
 801ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce56:	ed2d 8b02 	vpush	{d8}
 801ce5a:	eeb0 8a40 	vmov.f32	s16, s0
 801ce5e:	eef0 8a60 	vmov.f32	s17, s1
 801ce62:	ec55 4b11 	vmov	r4, r5, d1
 801ce66:	f000 f867 	bl	801cf38 <__ieee754_pow>
 801ce6a:	4622      	mov	r2, r4
 801ce6c:	462b      	mov	r3, r5
 801ce6e:	4620      	mov	r0, r4
 801ce70:	4629      	mov	r1, r5
 801ce72:	ec57 6b10 	vmov	r6, r7, d0
 801ce76:	f7e3 fe59 	bl	8000b2c <__aeabi_dcmpun>
 801ce7a:	2800      	cmp	r0, #0
 801ce7c:	d13b      	bne.n	801cef6 <pow+0xa2>
 801ce7e:	ec51 0b18 	vmov	r0, r1, d8
 801ce82:	2200      	movs	r2, #0
 801ce84:	2300      	movs	r3, #0
 801ce86:	f7e3 fe1f 	bl	8000ac8 <__aeabi_dcmpeq>
 801ce8a:	b1b8      	cbz	r0, 801cebc <pow+0x68>
 801ce8c:	2200      	movs	r2, #0
 801ce8e:	2300      	movs	r3, #0
 801ce90:	4620      	mov	r0, r4
 801ce92:	4629      	mov	r1, r5
 801ce94:	f7e3 fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 801ce98:	2800      	cmp	r0, #0
 801ce9a:	d146      	bne.n	801cf2a <pow+0xd6>
 801ce9c:	ec45 4b10 	vmov	d0, r4, r5
 801cea0:	f000 fe63 	bl	801db6a <finite>
 801cea4:	b338      	cbz	r0, 801cef6 <pow+0xa2>
 801cea6:	2200      	movs	r2, #0
 801cea8:	2300      	movs	r3, #0
 801ceaa:	4620      	mov	r0, r4
 801ceac:	4629      	mov	r1, r5
 801ceae:	f7e3 fe15 	bl	8000adc <__aeabi_dcmplt>
 801ceb2:	b300      	cbz	r0, 801cef6 <pow+0xa2>
 801ceb4:	f000 ff08 	bl	801dcc8 <__errno>
 801ceb8:	2322      	movs	r3, #34	; 0x22
 801ceba:	e01b      	b.n	801cef4 <pow+0xa0>
 801cebc:	ec47 6b10 	vmov	d0, r6, r7
 801cec0:	f000 fe53 	bl	801db6a <finite>
 801cec4:	b9e0      	cbnz	r0, 801cf00 <pow+0xac>
 801cec6:	eeb0 0a48 	vmov.f32	s0, s16
 801ceca:	eef0 0a68 	vmov.f32	s1, s17
 801cece:	f000 fe4c 	bl	801db6a <finite>
 801ced2:	b1a8      	cbz	r0, 801cf00 <pow+0xac>
 801ced4:	ec45 4b10 	vmov	d0, r4, r5
 801ced8:	f000 fe47 	bl	801db6a <finite>
 801cedc:	b180      	cbz	r0, 801cf00 <pow+0xac>
 801cede:	4632      	mov	r2, r6
 801cee0:	463b      	mov	r3, r7
 801cee2:	4630      	mov	r0, r6
 801cee4:	4639      	mov	r1, r7
 801cee6:	f7e3 fe21 	bl	8000b2c <__aeabi_dcmpun>
 801ceea:	2800      	cmp	r0, #0
 801ceec:	d0e2      	beq.n	801ceb4 <pow+0x60>
 801ceee:	f000 feeb 	bl	801dcc8 <__errno>
 801cef2:	2321      	movs	r3, #33	; 0x21
 801cef4:	6003      	str	r3, [r0, #0]
 801cef6:	ecbd 8b02 	vpop	{d8}
 801cefa:	ec47 6b10 	vmov	d0, r6, r7
 801cefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf00:	2200      	movs	r2, #0
 801cf02:	2300      	movs	r3, #0
 801cf04:	4630      	mov	r0, r6
 801cf06:	4639      	mov	r1, r7
 801cf08:	f7e3 fdde 	bl	8000ac8 <__aeabi_dcmpeq>
 801cf0c:	2800      	cmp	r0, #0
 801cf0e:	d0f2      	beq.n	801cef6 <pow+0xa2>
 801cf10:	eeb0 0a48 	vmov.f32	s0, s16
 801cf14:	eef0 0a68 	vmov.f32	s1, s17
 801cf18:	f000 fe27 	bl	801db6a <finite>
 801cf1c:	2800      	cmp	r0, #0
 801cf1e:	d0ea      	beq.n	801cef6 <pow+0xa2>
 801cf20:	ec45 4b10 	vmov	d0, r4, r5
 801cf24:	f000 fe21 	bl	801db6a <finite>
 801cf28:	e7c3      	b.n	801ceb2 <pow+0x5e>
 801cf2a:	4f01      	ldr	r7, [pc, #4]	; (801cf30 <pow+0xdc>)
 801cf2c:	2600      	movs	r6, #0
 801cf2e:	e7e2      	b.n	801cef6 <pow+0xa2>
 801cf30:	3ff00000 	.word	0x3ff00000
 801cf34:	00000000 	.word	0x00000000

0801cf38 <__ieee754_pow>:
 801cf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf3c:	ed2d 8b06 	vpush	{d8-d10}
 801cf40:	b089      	sub	sp, #36	; 0x24
 801cf42:	ed8d 1b00 	vstr	d1, [sp]
 801cf46:	e9dd 2900 	ldrd	r2, r9, [sp]
 801cf4a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801cf4e:	ea58 0102 	orrs.w	r1, r8, r2
 801cf52:	ec57 6b10 	vmov	r6, r7, d0
 801cf56:	d115      	bne.n	801cf84 <__ieee754_pow+0x4c>
 801cf58:	19b3      	adds	r3, r6, r6
 801cf5a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801cf5e:	4152      	adcs	r2, r2
 801cf60:	4299      	cmp	r1, r3
 801cf62:	4b89      	ldr	r3, [pc, #548]	; (801d188 <__ieee754_pow+0x250>)
 801cf64:	4193      	sbcs	r3, r2
 801cf66:	f080 84d2 	bcs.w	801d90e <__ieee754_pow+0x9d6>
 801cf6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cf6e:	4630      	mov	r0, r6
 801cf70:	4639      	mov	r1, r7
 801cf72:	f7e3 f98b 	bl	800028c <__adddf3>
 801cf76:	ec41 0b10 	vmov	d0, r0, r1
 801cf7a:	b009      	add	sp, #36	; 0x24
 801cf7c:	ecbd 8b06 	vpop	{d8-d10}
 801cf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf84:	4b81      	ldr	r3, [pc, #516]	; (801d18c <__ieee754_pow+0x254>)
 801cf86:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801cf8a:	429c      	cmp	r4, r3
 801cf8c:	ee10 aa10 	vmov	sl, s0
 801cf90:	463d      	mov	r5, r7
 801cf92:	dc06      	bgt.n	801cfa2 <__ieee754_pow+0x6a>
 801cf94:	d101      	bne.n	801cf9a <__ieee754_pow+0x62>
 801cf96:	2e00      	cmp	r6, #0
 801cf98:	d1e7      	bne.n	801cf6a <__ieee754_pow+0x32>
 801cf9a:	4598      	cmp	r8, r3
 801cf9c:	dc01      	bgt.n	801cfa2 <__ieee754_pow+0x6a>
 801cf9e:	d10f      	bne.n	801cfc0 <__ieee754_pow+0x88>
 801cfa0:	b172      	cbz	r2, 801cfc0 <__ieee754_pow+0x88>
 801cfa2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801cfa6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801cfaa:	ea55 050a 	orrs.w	r5, r5, sl
 801cfae:	d1dc      	bne.n	801cf6a <__ieee754_pow+0x32>
 801cfb0:	e9dd 3200 	ldrd	r3, r2, [sp]
 801cfb4:	18db      	adds	r3, r3, r3
 801cfb6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801cfba:	4152      	adcs	r2, r2
 801cfbc:	429d      	cmp	r5, r3
 801cfbe:	e7d0      	b.n	801cf62 <__ieee754_pow+0x2a>
 801cfc0:	2d00      	cmp	r5, #0
 801cfc2:	da3b      	bge.n	801d03c <__ieee754_pow+0x104>
 801cfc4:	4b72      	ldr	r3, [pc, #456]	; (801d190 <__ieee754_pow+0x258>)
 801cfc6:	4598      	cmp	r8, r3
 801cfc8:	dc51      	bgt.n	801d06e <__ieee754_pow+0x136>
 801cfca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801cfce:	4598      	cmp	r8, r3
 801cfd0:	f340 84ac 	ble.w	801d92c <__ieee754_pow+0x9f4>
 801cfd4:	ea4f 5328 	mov.w	r3, r8, asr #20
 801cfd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801cfdc:	2b14      	cmp	r3, #20
 801cfde:	dd0f      	ble.n	801d000 <__ieee754_pow+0xc8>
 801cfe0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801cfe4:	fa22 f103 	lsr.w	r1, r2, r3
 801cfe8:	fa01 f303 	lsl.w	r3, r1, r3
 801cfec:	4293      	cmp	r3, r2
 801cfee:	f040 849d 	bne.w	801d92c <__ieee754_pow+0x9f4>
 801cff2:	f001 0101 	and.w	r1, r1, #1
 801cff6:	f1c1 0302 	rsb	r3, r1, #2
 801cffa:	9304      	str	r3, [sp, #16]
 801cffc:	b182      	cbz	r2, 801d020 <__ieee754_pow+0xe8>
 801cffe:	e05f      	b.n	801d0c0 <__ieee754_pow+0x188>
 801d000:	2a00      	cmp	r2, #0
 801d002:	d15b      	bne.n	801d0bc <__ieee754_pow+0x184>
 801d004:	f1c3 0314 	rsb	r3, r3, #20
 801d008:	fa48 f103 	asr.w	r1, r8, r3
 801d00c:	fa01 f303 	lsl.w	r3, r1, r3
 801d010:	4543      	cmp	r3, r8
 801d012:	f040 8488 	bne.w	801d926 <__ieee754_pow+0x9ee>
 801d016:	f001 0101 	and.w	r1, r1, #1
 801d01a:	f1c1 0302 	rsb	r3, r1, #2
 801d01e:	9304      	str	r3, [sp, #16]
 801d020:	4b5c      	ldr	r3, [pc, #368]	; (801d194 <__ieee754_pow+0x25c>)
 801d022:	4598      	cmp	r8, r3
 801d024:	d132      	bne.n	801d08c <__ieee754_pow+0x154>
 801d026:	f1b9 0f00 	cmp.w	r9, #0
 801d02a:	f280 8478 	bge.w	801d91e <__ieee754_pow+0x9e6>
 801d02e:	4959      	ldr	r1, [pc, #356]	; (801d194 <__ieee754_pow+0x25c>)
 801d030:	4632      	mov	r2, r6
 801d032:	463b      	mov	r3, r7
 801d034:	2000      	movs	r0, #0
 801d036:	f7e3 fc09 	bl	800084c <__aeabi_ddiv>
 801d03a:	e79c      	b.n	801cf76 <__ieee754_pow+0x3e>
 801d03c:	2300      	movs	r3, #0
 801d03e:	9304      	str	r3, [sp, #16]
 801d040:	2a00      	cmp	r2, #0
 801d042:	d13d      	bne.n	801d0c0 <__ieee754_pow+0x188>
 801d044:	4b51      	ldr	r3, [pc, #324]	; (801d18c <__ieee754_pow+0x254>)
 801d046:	4598      	cmp	r8, r3
 801d048:	d1ea      	bne.n	801d020 <__ieee754_pow+0xe8>
 801d04a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801d04e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801d052:	ea53 030a 	orrs.w	r3, r3, sl
 801d056:	f000 845a 	beq.w	801d90e <__ieee754_pow+0x9d6>
 801d05a:	4b4f      	ldr	r3, [pc, #316]	; (801d198 <__ieee754_pow+0x260>)
 801d05c:	429c      	cmp	r4, r3
 801d05e:	dd08      	ble.n	801d072 <__ieee754_pow+0x13a>
 801d060:	f1b9 0f00 	cmp.w	r9, #0
 801d064:	f2c0 8457 	blt.w	801d916 <__ieee754_pow+0x9de>
 801d068:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d06c:	e783      	b.n	801cf76 <__ieee754_pow+0x3e>
 801d06e:	2302      	movs	r3, #2
 801d070:	e7e5      	b.n	801d03e <__ieee754_pow+0x106>
 801d072:	f1b9 0f00 	cmp.w	r9, #0
 801d076:	f04f 0000 	mov.w	r0, #0
 801d07a:	f04f 0100 	mov.w	r1, #0
 801d07e:	f6bf af7a 	bge.w	801cf76 <__ieee754_pow+0x3e>
 801d082:	e9dd 0300 	ldrd	r0, r3, [sp]
 801d086:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801d08a:	e774      	b.n	801cf76 <__ieee754_pow+0x3e>
 801d08c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801d090:	d106      	bne.n	801d0a0 <__ieee754_pow+0x168>
 801d092:	4632      	mov	r2, r6
 801d094:	463b      	mov	r3, r7
 801d096:	4630      	mov	r0, r6
 801d098:	4639      	mov	r1, r7
 801d09a:	f7e3 faad 	bl	80005f8 <__aeabi_dmul>
 801d09e:	e76a      	b.n	801cf76 <__ieee754_pow+0x3e>
 801d0a0:	4b3e      	ldr	r3, [pc, #248]	; (801d19c <__ieee754_pow+0x264>)
 801d0a2:	4599      	cmp	r9, r3
 801d0a4:	d10c      	bne.n	801d0c0 <__ieee754_pow+0x188>
 801d0a6:	2d00      	cmp	r5, #0
 801d0a8:	db0a      	blt.n	801d0c0 <__ieee754_pow+0x188>
 801d0aa:	ec47 6b10 	vmov	d0, r6, r7
 801d0ae:	b009      	add	sp, #36	; 0x24
 801d0b0:	ecbd 8b06 	vpop	{d8-d10}
 801d0b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0b8:	f000 bc6c 	b.w	801d994 <__ieee754_sqrt>
 801d0bc:	2300      	movs	r3, #0
 801d0be:	9304      	str	r3, [sp, #16]
 801d0c0:	ec47 6b10 	vmov	d0, r6, r7
 801d0c4:	f000 fd48 	bl	801db58 <fabs>
 801d0c8:	ec51 0b10 	vmov	r0, r1, d0
 801d0cc:	f1ba 0f00 	cmp.w	sl, #0
 801d0d0:	d129      	bne.n	801d126 <__ieee754_pow+0x1ee>
 801d0d2:	b124      	cbz	r4, 801d0de <__ieee754_pow+0x1a6>
 801d0d4:	4b2f      	ldr	r3, [pc, #188]	; (801d194 <__ieee754_pow+0x25c>)
 801d0d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801d0da:	429a      	cmp	r2, r3
 801d0dc:	d123      	bne.n	801d126 <__ieee754_pow+0x1ee>
 801d0de:	f1b9 0f00 	cmp.w	r9, #0
 801d0e2:	da05      	bge.n	801d0f0 <__ieee754_pow+0x1b8>
 801d0e4:	4602      	mov	r2, r0
 801d0e6:	460b      	mov	r3, r1
 801d0e8:	2000      	movs	r0, #0
 801d0ea:	492a      	ldr	r1, [pc, #168]	; (801d194 <__ieee754_pow+0x25c>)
 801d0ec:	f7e3 fbae 	bl	800084c <__aeabi_ddiv>
 801d0f0:	2d00      	cmp	r5, #0
 801d0f2:	f6bf af40 	bge.w	801cf76 <__ieee754_pow+0x3e>
 801d0f6:	9b04      	ldr	r3, [sp, #16]
 801d0f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801d0fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801d100:	4323      	orrs	r3, r4
 801d102:	d108      	bne.n	801d116 <__ieee754_pow+0x1de>
 801d104:	4602      	mov	r2, r0
 801d106:	460b      	mov	r3, r1
 801d108:	4610      	mov	r0, r2
 801d10a:	4619      	mov	r1, r3
 801d10c:	f7e3 f8bc 	bl	8000288 <__aeabi_dsub>
 801d110:	4602      	mov	r2, r0
 801d112:	460b      	mov	r3, r1
 801d114:	e78f      	b.n	801d036 <__ieee754_pow+0xfe>
 801d116:	9b04      	ldr	r3, [sp, #16]
 801d118:	2b01      	cmp	r3, #1
 801d11a:	f47f af2c 	bne.w	801cf76 <__ieee754_pow+0x3e>
 801d11e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d122:	4619      	mov	r1, r3
 801d124:	e727      	b.n	801cf76 <__ieee754_pow+0x3e>
 801d126:	0feb      	lsrs	r3, r5, #31
 801d128:	3b01      	subs	r3, #1
 801d12a:	9306      	str	r3, [sp, #24]
 801d12c:	9a06      	ldr	r2, [sp, #24]
 801d12e:	9b04      	ldr	r3, [sp, #16]
 801d130:	4313      	orrs	r3, r2
 801d132:	d102      	bne.n	801d13a <__ieee754_pow+0x202>
 801d134:	4632      	mov	r2, r6
 801d136:	463b      	mov	r3, r7
 801d138:	e7e6      	b.n	801d108 <__ieee754_pow+0x1d0>
 801d13a:	4b19      	ldr	r3, [pc, #100]	; (801d1a0 <__ieee754_pow+0x268>)
 801d13c:	4598      	cmp	r8, r3
 801d13e:	f340 80fb 	ble.w	801d338 <__ieee754_pow+0x400>
 801d142:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801d146:	4598      	cmp	r8, r3
 801d148:	4b13      	ldr	r3, [pc, #76]	; (801d198 <__ieee754_pow+0x260>)
 801d14a:	dd0c      	ble.n	801d166 <__ieee754_pow+0x22e>
 801d14c:	429c      	cmp	r4, r3
 801d14e:	dc0f      	bgt.n	801d170 <__ieee754_pow+0x238>
 801d150:	f1b9 0f00 	cmp.w	r9, #0
 801d154:	da0f      	bge.n	801d176 <__ieee754_pow+0x23e>
 801d156:	2000      	movs	r0, #0
 801d158:	b009      	add	sp, #36	; 0x24
 801d15a:	ecbd 8b06 	vpop	{d8-d10}
 801d15e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d162:	f000 bcf0 	b.w	801db46 <__math_oflow>
 801d166:	429c      	cmp	r4, r3
 801d168:	dbf2      	blt.n	801d150 <__ieee754_pow+0x218>
 801d16a:	4b0a      	ldr	r3, [pc, #40]	; (801d194 <__ieee754_pow+0x25c>)
 801d16c:	429c      	cmp	r4, r3
 801d16e:	dd19      	ble.n	801d1a4 <__ieee754_pow+0x26c>
 801d170:	f1b9 0f00 	cmp.w	r9, #0
 801d174:	dcef      	bgt.n	801d156 <__ieee754_pow+0x21e>
 801d176:	2000      	movs	r0, #0
 801d178:	b009      	add	sp, #36	; 0x24
 801d17a:	ecbd 8b06 	vpop	{d8-d10}
 801d17e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d182:	f000 bcd7 	b.w	801db34 <__math_uflow>
 801d186:	bf00      	nop
 801d188:	fff00000 	.word	0xfff00000
 801d18c:	7ff00000 	.word	0x7ff00000
 801d190:	433fffff 	.word	0x433fffff
 801d194:	3ff00000 	.word	0x3ff00000
 801d198:	3fefffff 	.word	0x3fefffff
 801d19c:	3fe00000 	.word	0x3fe00000
 801d1a0:	41e00000 	.word	0x41e00000
 801d1a4:	4b60      	ldr	r3, [pc, #384]	; (801d328 <__ieee754_pow+0x3f0>)
 801d1a6:	2200      	movs	r2, #0
 801d1a8:	f7e3 f86e 	bl	8000288 <__aeabi_dsub>
 801d1ac:	a354      	add	r3, pc, #336	; (adr r3, 801d300 <__ieee754_pow+0x3c8>)
 801d1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1b2:	4604      	mov	r4, r0
 801d1b4:	460d      	mov	r5, r1
 801d1b6:	f7e3 fa1f 	bl	80005f8 <__aeabi_dmul>
 801d1ba:	a353      	add	r3, pc, #332	; (adr r3, 801d308 <__ieee754_pow+0x3d0>)
 801d1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1c0:	4606      	mov	r6, r0
 801d1c2:	460f      	mov	r7, r1
 801d1c4:	4620      	mov	r0, r4
 801d1c6:	4629      	mov	r1, r5
 801d1c8:	f7e3 fa16 	bl	80005f8 <__aeabi_dmul>
 801d1cc:	4b57      	ldr	r3, [pc, #348]	; (801d32c <__ieee754_pow+0x3f4>)
 801d1ce:	4682      	mov	sl, r0
 801d1d0:	468b      	mov	fp, r1
 801d1d2:	2200      	movs	r2, #0
 801d1d4:	4620      	mov	r0, r4
 801d1d6:	4629      	mov	r1, r5
 801d1d8:	f7e3 fa0e 	bl	80005f8 <__aeabi_dmul>
 801d1dc:	4602      	mov	r2, r0
 801d1de:	460b      	mov	r3, r1
 801d1e0:	a14b      	add	r1, pc, #300	; (adr r1, 801d310 <__ieee754_pow+0x3d8>)
 801d1e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d1e6:	f7e3 f84f 	bl	8000288 <__aeabi_dsub>
 801d1ea:	4622      	mov	r2, r4
 801d1ec:	462b      	mov	r3, r5
 801d1ee:	f7e3 fa03 	bl	80005f8 <__aeabi_dmul>
 801d1f2:	4602      	mov	r2, r0
 801d1f4:	460b      	mov	r3, r1
 801d1f6:	2000      	movs	r0, #0
 801d1f8:	494d      	ldr	r1, [pc, #308]	; (801d330 <__ieee754_pow+0x3f8>)
 801d1fa:	f7e3 f845 	bl	8000288 <__aeabi_dsub>
 801d1fe:	4622      	mov	r2, r4
 801d200:	4680      	mov	r8, r0
 801d202:	4689      	mov	r9, r1
 801d204:	462b      	mov	r3, r5
 801d206:	4620      	mov	r0, r4
 801d208:	4629      	mov	r1, r5
 801d20a:	f7e3 f9f5 	bl	80005f8 <__aeabi_dmul>
 801d20e:	4602      	mov	r2, r0
 801d210:	460b      	mov	r3, r1
 801d212:	4640      	mov	r0, r8
 801d214:	4649      	mov	r1, r9
 801d216:	f7e3 f9ef 	bl	80005f8 <__aeabi_dmul>
 801d21a:	a33f      	add	r3, pc, #252	; (adr r3, 801d318 <__ieee754_pow+0x3e0>)
 801d21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d220:	f7e3 f9ea 	bl	80005f8 <__aeabi_dmul>
 801d224:	4602      	mov	r2, r0
 801d226:	460b      	mov	r3, r1
 801d228:	4650      	mov	r0, sl
 801d22a:	4659      	mov	r1, fp
 801d22c:	f7e3 f82c 	bl	8000288 <__aeabi_dsub>
 801d230:	4602      	mov	r2, r0
 801d232:	460b      	mov	r3, r1
 801d234:	4680      	mov	r8, r0
 801d236:	4689      	mov	r9, r1
 801d238:	4630      	mov	r0, r6
 801d23a:	4639      	mov	r1, r7
 801d23c:	f7e3 f826 	bl	800028c <__adddf3>
 801d240:	2000      	movs	r0, #0
 801d242:	4632      	mov	r2, r6
 801d244:	463b      	mov	r3, r7
 801d246:	4604      	mov	r4, r0
 801d248:	460d      	mov	r5, r1
 801d24a:	f7e3 f81d 	bl	8000288 <__aeabi_dsub>
 801d24e:	4602      	mov	r2, r0
 801d250:	460b      	mov	r3, r1
 801d252:	4640      	mov	r0, r8
 801d254:	4649      	mov	r1, r9
 801d256:	f7e3 f817 	bl	8000288 <__aeabi_dsub>
 801d25a:	9b04      	ldr	r3, [sp, #16]
 801d25c:	9a06      	ldr	r2, [sp, #24]
 801d25e:	3b01      	subs	r3, #1
 801d260:	4313      	orrs	r3, r2
 801d262:	4682      	mov	sl, r0
 801d264:	468b      	mov	fp, r1
 801d266:	f040 81e7 	bne.w	801d638 <__ieee754_pow+0x700>
 801d26a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801d320 <__ieee754_pow+0x3e8>
 801d26e:	eeb0 8a47 	vmov.f32	s16, s14
 801d272:	eef0 8a67 	vmov.f32	s17, s15
 801d276:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d27a:	2600      	movs	r6, #0
 801d27c:	4632      	mov	r2, r6
 801d27e:	463b      	mov	r3, r7
 801d280:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d284:	f7e3 f800 	bl	8000288 <__aeabi_dsub>
 801d288:	4622      	mov	r2, r4
 801d28a:	462b      	mov	r3, r5
 801d28c:	f7e3 f9b4 	bl	80005f8 <__aeabi_dmul>
 801d290:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d294:	4680      	mov	r8, r0
 801d296:	4689      	mov	r9, r1
 801d298:	4650      	mov	r0, sl
 801d29a:	4659      	mov	r1, fp
 801d29c:	f7e3 f9ac 	bl	80005f8 <__aeabi_dmul>
 801d2a0:	4602      	mov	r2, r0
 801d2a2:	460b      	mov	r3, r1
 801d2a4:	4640      	mov	r0, r8
 801d2a6:	4649      	mov	r1, r9
 801d2a8:	f7e2 fff0 	bl	800028c <__adddf3>
 801d2ac:	4632      	mov	r2, r6
 801d2ae:	463b      	mov	r3, r7
 801d2b0:	4680      	mov	r8, r0
 801d2b2:	4689      	mov	r9, r1
 801d2b4:	4620      	mov	r0, r4
 801d2b6:	4629      	mov	r1, r5
 801d2b8:	f7e3 f99e 	bl	80005f8 <__aeabi_dmul>
 801d2bc:	460b      	mov	r3, r1
 801d2be:	4604      	mov	r4, r0
 801d2c0:	460d      	mov	r5, r1
 801d2c2:	4602      	mov	r2, r0
 801d2c4:	4649      	mov	r1, r9
 801d2c6:	4640      	mov	r0, r8
 801d2c8:	f7e2 ffe0 	bl	800028c <__adddf3>
 801d2cc:	4b19      	ldr	r3, [pc, #100]	; (801d334 <__ieee754_pow+0x3fc>)
 801d2ce:	4299      	cmp	r1, r3
 801d2d0:	ec45 4b19 	vmov	d9, r4, r5
 801d2d4:	4606      	mov	r6, r0
 801d2d6:	460f      	mov	r7, r1
 801d2d8:	468b      	mov	fp, r1
 801d2da:	f340 82f1 	ble.w	801d8c0 <__ieee754_pow+0x988>
 801d2de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801d2e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801d2e6:	4303      	orrs	r3, r0
 801d2e8:	f000 81e4 	beq.w	801d6b4 <__ieee754_pow+0x77c>
 801d2ec:	ec51 0b18 	vmov	r0, r1, d8
 801d2f0:	2200      	movs	r2, #0
 801d2f2:	2300      	movs	r3, #0
 801d2f4:	f7e3 fbf2 	bl	8000adc <__aeabi_dcmplt>
 801d2f8:	3800      	subs	r0, #0
 801d2fa:	bf18      	it	ne
 801d2fc:	2001      	movne	r0, #1
 801d2fe:	e72b      	b.n	801d158 <__ieee754_pow+0x220>
 801d300:	60000000 	.word	0x60000000
 801d304:	3ff71547 	.word	0x3ff71547
 801d308:	f85ddf44 	.word	0xf85ddf44
 801d30c:	3e54ae0b 	.word	0x3e54ae0b
 801d310:	55555555 	.word	0x55555555
 801d314:	3fd55555 	.word	0x3fd55555
 801d318:	652b82fe 	.word	0x652b82fe
 801d31c:	3ff71547 	.word	0x3ff71547
 801d320:	00000000 	.word	0x00000000
 801d324:	bff00000 	.word	0xbff00000
 801d328:	3ff00000 	.word	0x3ff00000
 801d32c:	3fd00000 	.word	0x3fd00000
 801d330:	3fe00000 	.word	0x3fe00000
 801d334:	408fffff 	.word	0x408fffff
 801d338:	4bd5      	ldr	r3, [pc, #852]	; (801d690 <__ieee754_pow+0x758>)
 801d33a:	402b      	ands	r3, r5
 801d33c:	2200      	movs	r2, #0
 801d33e:	b92b      	cbnz	r3, 801d34c <__ieee754_pow+0x414>
 801d340:	4bd4      	ldr	r3, [pc, #848]	; (801d694 <__ieee754_pow+0x75c>)
 801d342:	f7e3 f959 	bl	80005f8 <__aeabi_dmul>
 801d346:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801d34a:	460c      	mov	r4, r1
 801d34c:	1523      	asrs	r3, r4, #20
 801d34e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d352:	4413      	add	r3, r2
 801d354:	9305      	str	r3, [sp, #20]
 801d356:	4bd0      	ldr	r3, [pc, #832]	; (801d698 <__ieee754_pow+0x760>)
 801d358:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d35c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801d360:	429c      	cmp	r4, r3
 801d362:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d366:	dd08      	ble.n	801d37a <__ieee754_pow+0x442>
 801d368:	4bcc      	ldr	r3, [pc, #816]	; (801d69c <__ieee754_pow+0x764>)
 801d36a:	429c      	cmp	r4, r3
 801d36c:	f340 8162 	ble.w	801d634 <__ieee754_pow+0x6fc>
 801d370:	9b05      	ldr	r3, [sp, #20]
 801d372:	3301      	adds	r3, #1
 801d374:	9305      	str	r3, [sp, #20]
 801d376:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801d37a:	2400      	movs	r4, #0
 801d37c:	00e3      	lsls	r3, r4, #3
 801d37e:	9307      	str	r3, [sp, #28]
 801d380:	4bc7      	ldr	r3, [pc, #796]	; (801d6a0 <__ieee754_pow+0x768>)
 801d382:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d386:	ed93 7b00 	vldr	d7, [r3]
 801d38a:	4629      	mov	r1, r5
 801d38c:	ec53 2b17 	vmov	r2, r3, d7
 801d390:	eeb0 9a47 	vmov.f32	s18, s14
 801d394:	eef0 9a67 	vmov.f32	s19, s15
 801d398:	4682      	mov	sl, r0
 801d39a:	f7e2 ff75 	bl	8000288 <__aeabi_dsub>
 801d39e:	4652      	mov	r2, sl
 801d3a0:	4606      	mov	r6, r0
 801d3a2:	460f      	mov	r7, r1
 801d3a4:	462b      	mov	r3, r5
 801d3a6:	ec51 0b19 	vmov	r0, r1, d9
 801d3aa:	f7e2 ff6f 	bl	800028c <__adddf3>
 801d3ae:	4602      	mov	r2, r0
 801d3b0:	460b      	mov	r3, r1
 801d3b2:	2000      	movs	r0, #0
 801d3b4:	49bb      	ldr	r1, [pc, #748]	; (801d6a4 <__ieee754_pow+0x76c>)
 801d3b6:	f7e3 fa49 	bl	800084c <__aeabi_ddiv>
 801d3ba:	ec41 0b1a 	vmov	d10, r0, r1
 801d3be:	4602      	mov	r2, r0
 801d3c0:	460b      	mov	r3, r1
 801d3c2:	4630      	mov	r0, r6
 801d3c4:	4639      	mov	r1, r7
 801d3c6:	f7e3 f917 	bl	80005f8 <__aeabi_dmul>
 801d3ca:	2300      	movs	r3, #0
 801d3cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d3d0:	9302      	str	r3, [sp, #8]
 801d3d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d3d6:	46ab      	mov	fp, r5
 801d3d8:	106d      	asrs	r5, r5, #1
 801d3da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801d3de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801d3e2:	ec41 0b18 	vmov	d8, r0, r1
 801d3e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801d3ea:	2200      	movs	r2, #0
 801d3ec:	4640      	mov	r0, r8
 801d3ee:	4649      	mov	r1, r9
 801d3f0:	4614      	mov	r4, r2
 801d3f2:	461d      	mov	r5, r3
 801d3f4:	f7e3 f900 	bl	80005f8 <__aeabi_dmul>
 801d3f8:	4602      	mov	r2, r0
 801d3fa:	460b      	mov	r3, r1
 801d3fc:	4630      	mov	r0, r6
 801d3fe:	4639      	mov	r1, r7
 801d400:	f7e2 ff42 	bl	8000288 <__aeabi_dsub>
 801d404:	ec53 2b19 	vmov	r2, r3, d9
 801d408:	4606      	mov	r6, r0
 801d40a:	460f      	mov	r7, r1
 801d40c:	4620      	mov	r0, r4
 801d40e:	4629      	mov	r1, r5
 801d410:	f7e2 ff3a 	bl	8000288 <__aeabi_dsub>
 801d414:	4602      	mov	r2, r0
 801d416:	460b      	mov	r3, r1
 801d418:	4650      	mov	r0, sl
 801d41a:	4659      	mov	r1, fp
 801d41c:	f7e2 ff34 	bl	8000288 <__aeabi_dsub>
 801d420:	4642      	mov	r2, r8
 801d422:	464b      	mov	r3, r9
 801d424:	f7e3 f8e8 	bl	80005f8 <__aeabi_dmul>
 801d428:	4602      	mov	r2, r0
 801d42a:	460b      	mov	r3, r1
 801d42c:	4630      	mov	r0, r6
 801d42e:	4639      	mov	r1, r7
 801d430:	f7e2 ff2a 	bl	8000288 <__aeabi_dsub>
 801d434:	ec53 2b1a 	vmov	r2, r3, d10
 801d438:	f7e3 f8de 	bl	80005f8 <__aeabi_dmul>
 801d43c:	ec53 2b18 	vmov	r2, r3, d8
 801d440:	ec41 0b19 	vmov	d9, r0, r1
 801d444:	ec51 0b18 	vmov	r0, r1, d8
 801d448:	f7e3 f8d6 	bl	80005f8 <__aeabi_dmul>
 801d44c:	a37c      	add	r3, pc, #496	; (adr r3, 801d640 <__ieee754_pow+0x708>)
 801d44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d452:	4604      	mov	r4, r0
 801d454:	460d      	mov	r5, r1
 801d456:	f7e3 f8cf 	bl	80005f8 <__aeabi_dmul>
 801d45a:	a37b      	add	r3, pc, #492	; (adr r3, 801d648 <__ieee754_pow+0x710>)
 801d45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d460:	f7e2 ff14 	bl	800028c <__adddf3>
 801d464:	4622      	mov	r2, r4
 801d466:	462b      	mov	r3, r5
 801d468:	f7e3 f8c6 	bl	80005f8 <__aeabi_dmul>
 801d46c:	a378      	add	r3, pc, #480	; (adr r3, 801d650 <__ieee754_pow+0x718>)
 801d46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d472:	f7e2 ff0b 	bl	800028c <__adddf3>
 801d476:	4622      	mov	r2, r4
 801d478:	462b      	mov	r3, r5
 801d47a:	f7e3 f8bd 	bl	80005f8 <__aeabi_dmul>
 801d47e:	a376      	add	r3, pc, #472	; (adr r3, 801d658 <__ieee754_pow+0x720>)
 801d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d484:	f7e2 ff02 	bl	800028c <__adddf3>
 801d488:	4622      	mov	r2, r4
 801d48a:	462b      	mov	r3, r5
 801d48c:	f7e3 f8b4 	bl	80005f8 <__aeabi_dmul>
 801d490:	a373      	add	r3, pc, #460	; (adr r3, 801d660 <__ieee754_pow+0x728>)
 801d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d496:	f7e2 fef9 	bl	800028c <__adddf3>
 801d49a:	4622      	mov	r2, r4
 801d49c:	462b      	mov	r3, r5
 801d49e:	f7e3 f8ab 	bl	80005f8 <__aeabi_dmul>
 801d4a2:	a371      	add	r3, pc, #452	; (adr r3, 801d668 <__ieee754_pow+0x730>)
 801d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4a8:	f7e2 fef0 	bl	800028c <__adddf3>
 801d4ac:	4622      	mov	r2, r4
 801d4ae:	4606      	mov	r6, r0
 801d4b0:	460f      	mov	r7, r1
 801d4b2:	462b      	mov	r3, r5
 801d4b4:	4620      	mov	r0, r4
 801d4b6:	4629      	mov	r1, r5
 801d4b8:	f7e3 f89e 	bl	80005f8 <__aeabi_dmul>
 801d4bc:	4602      	mov	r2, r0
 801d4be:	460b      	mov	r3, r1
 801d4c0:	4630      	mov	r0, r6
 801d4c2:	4639      	mov	r1, r7
 801d4c4:	f7e3 f898 	bl	80005f8 <__aeabi_dmul>
 801d4c8:	4642      	mov	r2, r8
 801d4ca:	4604      	mov	r4, r0
 801d4cc:	460d      	mov	r5, r1
 801d4ce:	464b      	mov	r3, r9
 801d4d0:	ec51 0b18 	vmov	r0, r1, d8
 801d4d4:	f7e2 feda 	bl	800028c <__adddf3>
 801d4d8:	ec53 2b19 	vmov	r2, r3, d9
 801d4dc:	f7e3 f88c 	bl	80005f8 <__aeabi_dmul>
 801d4e0:	4622      	mov	r2, r4
 801d4e2:	462b      	mov	r3, r5
 801d4e4:	f7e2 fed2 	bl	800028c <__adddf3>
 801d4e8:	4642      	mov	r2, r8
 801d4ea:	4682      	mov	sl, r0
 801d4ec:	468b      	mov	fp, r1
 801d4ee:	464b      	mov	r3, r9
 801d4f0:	4640      	mov	r0, r8
 801d4f2:	4649      	mov	r1, r9
 801d4f4:	f7e3 f880 	bl	80005f8 <__aeabi_dmul>
 801d4f8:	4b6b      	ldr	r3, [pc, #428]	; (801d6a8 <__ieee754_pow+0x770>)
 801d4fa:	2200      	movs	r2, #0
 801d4fc:	4606      	mov	r6, r0
 801d4fe:	460f      	mov	r7, r1
 801d500:	f7e2 fec4 	bl	800028c <__adddf3>
 801d504:	4652      	mov	r2, sl
 801d506:	465b      	mov	r3, fp
 801d508:	f7e2 fec0 	bl	800028c <__adddf3>
 801d50c:	2000      	movs	r0, #0
 801d50e:	4604      	mov	r4, r0
 801d510:	460d      	mov	r5, r1
 801d512:	4602      	mov	r2, r0
 801d514:	460b      	mov	r3, r1
 801d516:	4640      	mov	r0, r8
 801d518:	4649      	mov	r1, r9
 801d51a:	f7e3 f86d 	bl	80005f8 <__aeabi_dmul>
 801d51e:	4b62      	ldr	r3, [pc, #392]	; (801d6a8 <__ieee754_pow+0x770>)
 801d520:	4680      	mov	r8, r0
 801d522:	4689      	mov	r9, r1
 801d524:	2200      	movs	r2, #0
 801d526:	4620      	mov	r0, r4
 801d528:	4629      	mov	r1, r5
 801d52a:	f7e2 fead 	bl	8000288 <__aeabi_dsub>
 801d52e:	4632      	mov	r2, r6
 801d530:	463b      	mov	r3, r7
 801d532:	f7e2 fea9 	bl	8000288 <__aeabi_dsub>
 801d536:	4602      	mov	r2, r0
 801d538:	460b      	mov	r3, r1
 801d53a:	4650      	mov	r0, sl
 801d53c:	4659      	mov	r1, fp
 801d53e:	f7e2 fea3 	bl	8000288 <__aeabi_dsub>
 801d542:	ec53 2b18 	vmov	r2, r3, d8
 801d546:	f7e3 f857 	bl	80005f8 <__aeabi_dmul>
 801d54a:	4622      	mov	r2, r4
 801d54c:	4606      	mov	r6, r0
 801d54e:	460f      	mov	r7, r1
 801d550:	462b      	mov	r3, r5
 801d552:	ec51 0b19 	vmov	r0, r1, d9
 801d556:	f7e3 f84f 	bl	80005f8 <__aeabi_dmul>
 801d55a:	4602      	mov	r2, r0
 801d55c:	460b      	mov	r3, r1
 801d55e:	4630      	mov	r0, r6
 801d560:	4639      	mov	r1, r7
 801d562:	f7e2 fe93 	bl	800028c <__adddf3>
 801d566:	4606      	mov	r6, r0
 801d568:	460f      	mov	r7, r1
 801d56a:	4602      	mov	r2, r0
 801d56c:	460b      	mov	r3, r1
 801d56e:	4640      	mov	r0, r8
 801d570:	4649      	mov	r1, r9
 801d572:	f7e2 fe8b 	bl	800028c <__adddf3>
 801d576:	a33e      	add	r3, pc, #248	; (adr r3, 801d670 <__ieee754_pow+0x738>)
 801d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d57c:	2000      	movs	r0, #0
 801d57e:	4604      	mov	r4, r0
 801d580:	460d      	mov	r5, r1
 801d582:	f7e3 f839 	bl	80005f8 <__aeabi_dmul>
 801d586:	4642      	mov	r2, r8
 801d588:	ec41 0b18 	vmov	d8, r0, r1
 801d58c:	464b      	mov	r3, r9
 801d58e:	4620      	mov	r0, r4
 801d590:	4629      	mov	r1, r5
 801d592:	f7e2 fe79 	bl	8000288 <__aeabi_dsub>
 801d596:	4602      	mov	r2, r0
 801d598:	460b      	mov	r3, r1
 801d59a:	4630      	mov	r0, r6
 801d59c:	4639      	mov	r1, r7
 801d59e:	f7e2 fe73 	bl	8000288 <__aeabi_dsub>
 801d5a2:	a335      	add	r3, pc, #212	; (adr r3, 801d678 <__ieee754_pow+0x740>)
 801d5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5a8:	f7e3 f826 	bl	80005f8 <__aeabi_dmul>
 801d5ac:	a334      	add	r3, pc, #208	; (adr r3, 801d680 <__ieee754_pow+0x748>)
 801d5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5b2:	4606      	mov	r6, r0
 801d5b4:	460f      	mov	r7, r1
 801d5b6:	4620      	mov	r0, r4
 801d5b8:	4629      	mov	r1, r5
 801d5ba:	f7e3 f81d 	bl	80005f8 <__aeabi_dmul>
 801d5be:	4602      	mov	r2, r0
 801d5c0:	460b      	mov	r3, r1
 801d5c2:	4630      	mov	r0, r6
 801d5c4:	4639      	mov	r1, r7
 801d5c6:	f7e2 fe61 	bl	800028c <__adddf3>
 801d5ca:	9a07      	ldr	r2, [sp, #28]
 801d5cc:	4b37      	ldr	r3, [pc, #220]	; (801d6ac <__ieee754_pow+0x774>)
 801d5ce:	4413      	add	r3, r2
 801d5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5d4:	f7e2 fe5a 	bl	800028c <__adddf3>
 801d5d8:	4682      	mov	sl, r0
 801d5da:	9805      	ldr	r0, [sp, #20]
 801d5dc:	468b      	mov	fp, r1
 801d5de:	f7e2 ffa1 	bl	8000524 <__aeabi_i2d>
 801d5e2:	9a07      	ldr	r2, [sp, #28]
 801d5e4:	4b32      	ldr	r3, [pc, #200]	; (801d6b0 <__ieee754_pow+0x778>)
 801d5e6:	4413      	add	r3, r2
 801d5e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d5ec:	4606      	mov	r6, r0
 801d5ee:	460f      	mov	r7, r1
 801d5f0:	4652      	mov	r2, sl
 801d5f2:	465b      	mov	r3, fp
 801d5f4:	ec51 0b18 	vmov	r0, r1, d8
 801d5f8:	f7e2 fe48 	bl	800028c <__adddf3>
 801d5fc:	4642      	mov	r2, r8
 801d5fe:	464b      	mov	r3, r9
 801d600:	f7e2 fe44 	bl	800028c <__adddf3>
 801d604:	4632      	mov	r2, r6
 801d606:	463b      	mov	r3, r7
 801d608:	f7e2 fe40 	bl	800028c <__adddf3>
 801d60c:	2000      	movs	r0, #0
 801d60e:	4632      	mov	r2, r6
 801d610:	463b      	mov	r3, r7
 801d612:	4604      	mov	r4, r0
 801d614:	460d      	mov	r5, r1
 801d616:	f7e2 fe37 	bl	8000288 <__aeabi_dsub>
 801d61a:	4642      	mov	r2, r8
 801d61c:	464b      	mov	r3, r9
 801d61e:	f7e2 fe33 	bl	8000288 <__aeabi_dsub>
 801d622:	ec53 2b18 	vmov	r2, r3, d8
 801d626:	f7e2 fe2f 	bl	8000288 <__aeabi_dsub>
 801d62a:	4602      	mov	r2, r0
 801d62c:	460b      	mov	r3, r1
 801d62e:	4650      	mov	r0, sl
 801d630:	4659      	mov	r1, fp
 801d632:	e610      	b.n	801d256 <__ieee754_pow+0x31e>
 801d634:	2401      	movs	r4, #1
 801d636:	e6a1      	b.n	801d37c <__ieee754_pow+0x444>
 801d638:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801d688 <__ieee754_pow+0x750>
 801d63c:	e617      	b.n	801d26e <__ieee754_pow+0x336>
 801d63e:	bf00      	nop
 801d640:	4a454eef 	.word	0x4a454eef
 801d644:	3fca7e28 	.word	0x3fca7e28
 801d648:	93c9db65 	.word	0x93c9db65
 801d64c:	3fcd864a 	.word	0x3fcd864a
 801d650:	a91d4101 	.word	0xa91d4101
 801d654:	3fd17460 	.word	0x3fd17460
 801d658:	518f264d 	.word	0x518f264d
 801d65c:	3fd55555 	.word	0x3fd55555
 801d660:	db6fabff 	.word	0xdb6fabff
 801d664:	3fdb6db6 	.word	0x3fdb6db6
 801d668:	33333303 	.word	0x33333303
 801d66c:	3fe33333 	.word	0x3fe33333
 801d670:	e0000000 	.word	0xe0000000
 801d674:	3feec709 	.word	0x3feec709
 801d678:	dc3a03fd 	.word	0xdc3a03fd
 801d67c:	3feec709 	.word	0x3feec709
 801d680:	145b01f5 	.word	0x145b01f5
 801d684:	be3e2fe0 	.word	0xbe3e2fe0
 801d688:	00000000 	.word	0x00000000
 801d68c:	3ff00000 	.word	0x3ff00000
 801d690:	7ff00000 	.word	0x7ff00000
 801d694:	43400000 	.word	0x43400000
 801d698:	0003988e 	.word	0x0003988e
 801d69c:	000bb679 	.word	0x000bb679
 801d6a0:	08029d08 	.word	0x08029d08
 801d6a4:	3ff00000 	.word	0x3ff00000
 801d6a8:	40080000 	.word	0x40080000
 801d6ac:	08029d28 	.word	0x08029d28
 801d6b0:	08029d18 	.word	0x08029d18
 801d6b4:	a3b5      	add	r3, pc, #724	; (adr r3, 801d98c <__ieee754_pow+0xa54>)
 801d6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6ba:	4640      	mov	r0, r8
 801d6bc:	4649      	mov	r1, r9
 801d6be:	f7e2 fde5 	bl	800028c <__adddf3>
 801d6c2:	4622      	mov	r2, r4
 801d6c4:	ec41 0b1a 	vmov	d10, r0, r1
 801d6c8:	462b      	mov	r3, r5
 801d6ca:	4630      	mov	r0, r6
 801d6cc:	4639      	mov	r1, r7
 801d6ce:	f7e2 fddb 	bl	8000288 <__aeabi_dsub>
 801d6d2:	4602      	mov	r2, r0
 801d6d4:	460b      	mov	r3, r1
 801d6d6:	ec51 0b1a 	vmov	r0, r1, d10
 801d6da:	f7e3 fa1d 	bl	8000b18 <__aeabi_dcmpgt>
 801d6de:	2800      	cmp	r0, #0
 801d6e0:	f47f ae04 	bne.w	801d2ec <__ieee754_pow+0x3b4>
 801d6e4:	4aa4      	ldr	r2, [pc, #656]	; (801d978 <__ieee754_pow+0xa40>)
 801d6e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d6ea:	4293      	cmp	r3, r2
 801d6ec:	f340 8108 	ble.w	801d900 <__ieee754_pow+0x9c8>
 801d6f0:	151b      	asrs	r3, r3, #20
 801d6f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801d6f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801d6fa:	fa4a f303 	asr.w	r3, sl, r3
 801d6fe:	445b      	add	r3, fp
 801d700:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801d704:	4e9d      	ldr	r6, [pc, #628]	; (801d97c <__ieee754_pow+0xa44>)
 801d706:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801d70a:	4116      	asrs	r6, r2
 801d70c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801d710:	2000      	movs	r0, #0
 801d712:	ea23 0106 	bic.w	r1, r3, r6
 801d716:	f1c2 0214 	rsb	r2, r2, #20
 801d71a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801d71e:	fa4a fa02 	asr.w	sl, sl, r2
 801d722:	f1bb 0f00 	cmp.w	fp, #0
 801d726:	4602      	mov	r2, r0
 801d728:	460b      	mov	r3, r1
 801d72a:	4620      	mov	r0, r4
 801d72c:	4629      	mov	r1, r5
 801d72e:	bfb8      	it	lt
 801d730:	f1ca 0a00 	rsblt	sl, sl, #0
 801d734:	f7e2 fda8 	bl	8000288 <__aeabi_dsub>
 801d738:	ec41 0b19 	vmov	d9, r0, r1
 801d73c:	4642      	mov	r2, r8
 801d73e:	464b      	mov	r3, r9
 801d740:	ec51 0b19 	vmov	r0, r1, d9
 801d744:	f7e2 fda2 	bl	800028c <__adddf3>
 801d748:	a37b      	add	r3, pc, #492	; (adr r3, 801d938 <__ieee754_pow+0xa00>)
 801d74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d74e:	2000      	movs	r0, #0
 801d750:	4604      	mov	r4, r0
 801d752:	460d      	mov	r5, r1
 801d754:	f7e2 ff50 	bl	80005f8 <__aeabi_dmul>
 801d758:	ec53 2b19 	vmov	r2, r3, d9
 801d75c:	4606      	mov	r6, r0
 801d75e:	460f      	mov	r7, r1
 801d760:	4620      	mov	r0, r4
 801d762:	4629      	mov	r1, r5
 801d764:	f7e2 fd90 	bl	8000288 <__aeabi_dsub>
 801d768:	4602      	mov	r2, r0
 801d76a:	460b      	mov	r3, r1
 801d76c:	4640      	mov	r0, r8
 801d76e:	4649      	mov	r1, r9
 801d770:	f7e2 fd8a 	bl	8000288 <__aeabi_dsub>
 801d774:	a372      	add	r3, pc, #456	; (adr r3, 801d940 <__ieee754_pow+0xa08>)
 801d776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d77a:	f7e2 ff3d 	bl	80005f8 <__aeabi_dmul>
 801d77e:	a372      	add	r3, pc, #456	; (adr r3, 801d948 <__ieee754_pow+0xa10>)
 801d780:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d784:	4680      	mov	r8, r0
 801d786:	4689      	mov	r9, r1
 801d788:	4620      	mov	r0, r4
 801d78a:	4629      	mov	r1, r5
 801d78c:	f7e2 ff34 	bl	80005f8 <__aeabi_dmul>
 801d790:	4602      	mov	r2, r0
 801d792:	460b      	mov	r3, r1
 801d794:	4640      	mov	r0, r8
 801d796:	4649      	mov	r1, r9
 801d798:	f7e2 fd78 	bl	800028c <__adddf3>
 801d79c:	4604      	mov	r4, r0
 801d79e:	460d      	mov	r5, r1
 801d7a0:	4602      	mov	r2, r0
 801d7a2:	460b      	mov	r3, r1
 801d7a4:	4630      	mov	r0, r6
 801d7a6:	4639      	mov	r1, r7
 801d7a8:	f7e2 fd70 	bl	800028c <__adddf3>
 801d7ac:	4632      	mov	r2, r6
 801d7ae:	463b      	mov	r3, r7
 801d7b0:	4680      	mov	r8, r0
 801d7b2:	4689      	mov	r9, r1
 801d7b4:	f7e2 fd68 	bl	8000288 <__aeabi_dsub>
 801d7b8:	4602      	mov	r2, r0
 801d7ba:	460b      	mov	r3, r1
 801d7bc:	4620      	mov	r0, r4
 801d7be:	4629      	mov	r1, r5
 801d7c0:	f7e2 fd62 	bl	8000288 <__aeabi_dsub>
 801d7c4:	4642      	mov	r2, r8
 801d7c6:	4606      	mov	r6, r0
 801d7c8:	460f      	mov	r7, r1
 801d7ca:	464b      	mov	r3, r9
 801d7cc:	4640      	mov	r0, r8
 801d7ce:	4649      	mov	r1, r9
 801d7d0:	f7e2 ff12 	bl	80005f8 <__aeabi_dmul>
 801d7d4:	a35e      	add	r3, pc, #376	; (adr r3, 801d950 <__ieee754_pow+0xa18>)
 801d7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7da:	4604      	mov	r4, r0
 801d7dc:	460d      	mov	r5, r1
 801d7de:	f7e2 ff0b 	bl	80005f8 <__aeabi_dmul>
 801d7e2:	a35d      	add	r3, pc, #372	; (adr r3, 801d958 <__ieee754_pow+0xa20>)
 801d7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7e8:	f7e2 fd4e 	bl	8000288 <__aeabi_dsub>
 801d7ec:	4622      	mov	r2, r4
 801d7ee:	462b      	mov	r3, r5
 801d7f0:	f7e2 ff02 	bl	80005f8 <__aeabi_dmul>
 801d7f4:	a35a      	add	r3, pc, #360	; (adr r3, 801d960 <__ieee754_pow+0xa28>)
 801d7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7fa:	f7e2 fd47 	bl	800028c <__adddf3>
 801d7fe:	4622      	mov	r2, r4
 801d800:	462b      	mov	r3, r5
 801d802:	f7e2 fef9 	bl	80005f8 <__aeabi_dmul>
 801d806:	a358      	add	r3, pc, #352	; (adr r3, 801d968 <__ieee754_pow+0xa30>)
 801d808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d80c:	f7e2 fd3c 	bl	8000288 <__aeabi_dsub>
 801d810:	4622      	mov	r2, r4
 801d812:	462b      	mov	r3, r5
 801d814:	f7e2 fef0 	bl	80005f8 <__aeabi_dmul>
 801d818:	a355      	add	r3, pc, #340	; (adr r3, 801d970 <__ieee754_pow+0xa38>)
 801d81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d81e:	f7e2 fd35 	bl	800028c <__adddf3>
 801d822:	4622      	mov	r2, r4
 801d824:	462b      	mov	r3, r5
 801d826:	f7e2 fee7 	bl	80005f8 <__aeabi_dmul>
 801d82a:	4602      	mov	r2, r0
 801d82c:	460b      	mov	r3, r1
 801d82e:	4640      	mov	r0, r8
 801d830:	4649      	mov	r1, r9
 801d832:	f7e2 fd29 	bl	8000288 <__aeabi_dsub>
 801d836:	4604      	mov	r4, r0
 801d838:	460d      	mov	r5, r1
 801d83a:	4602      	mov	r2, r0
 801d83c:	460b      	mov	r3, r1
 801d83e:	4640      	mov	r0, r8
 801d840:	4649      	mov	r1, r9
 801d842:	f7e2 fed9 	bl	80005f8 <__aeabi_dmul>
 801d846:	2200      	movs	r2, #0
 801d848:	ec41 0b19 	vmov	d9, r0, r1
 801d84c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d850:	4620      	mov	r0, r4
 801d852:	4629      	mov	r1, r5
 801d854:	f7e2 fd18 	bl	8000288 <__aeabi_dsub>
 801d858:	4602      	mov	r2, r0
 801d85a:	460b      	mov	r3, r1
 801d85c:	ec51 0b19 	vmov	r0, r1, d9
 801d860:	f7e2 fff4 	bl	800084c <__aeabi_ddiv>
 801d864:	4632      	mov	r2, r6
 801d866:	4604      	mov	r4, r0
 801d868:	460d      	mov	r5, r1
 801d86a:	463b      	mov	r3, r7
 801d86c:	4640      	mov	r0, r8
 801d86e:	4649      	mov	r1, r9
 801d870:	f7e2 fec2 	bl	80005f8 <__aeabi_dmul>
 801d874:	4632      	mov	r2, r6
 801d876:	463b      	mov	r3, r7
 801d878:	f7e2 fd08 	bl	800028c <__adddf3>
 801d87c:	4602      	mov	r2, r0
 801d87e:	460b      	mov	r3, r1
 801d880:	4620      	mov	r0, r4
 801d882:	4629      	mov	r1, r5
 801d884:	f7e2 fd00 	bl	8000288 <__aeabi_dsub>
 801d888:	4642      	mov	r2, r8
 801d88a:	464b      	mov	r3, r9
 801d88c:	f7e2 fcfc 	bl	8000288 <__aeabi_dsub>
 801d890:	460b      	mov	r3, r1
 801d892:	4602      	mov	r2, r0
 801d894:	493a      	ldr	r1, [pc, #232]	; (801d980 <__ieee754_pow+0xa48>)
 801d896:	2000      	movs	r0, #0
 801d898:	f7e2 fcf6 	bl	8000288 <__aeabi_dsub>
 801d89c:	ec41 0b10 	vmov	d0, r0, r1
 801d8a0:	ee10 3a90 	vmov	r3, s1
 801d8a4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801d8a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d8ac:	da2b      	bge.n	801d906 <__ieee754_pow+0x9ce>
 801d8ae:	4650      	mov	r0, sl
 801d8b0:	f000 f966 	bl	801db80 <scalbn>
 801d8b4:	ec51 0b10 	vmov	r0, r1, d0
 801d8b8:	ec53 2b18 	vmov	r2, r3, d8
 801d8bc:	f7ff bbed 	b.w	801d09a <__ieee754_pow+0x162>
 801d8c0:	4b30      	ldr	r3, [pc, #192]	; (801d984 <__ieee754_pow+0xa4c>)
 801d8c2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801d8c6:	429e      	cmp	r6, r3
 801d8c8:	f77f af0c 	ble.w	801d6e4 <__ieee754_pow+0x7ac>
 801d8cc:	4b2e      	ldr	r3, [pc, #184]	; (801d988 <__ieee754_pow+0xa50>)
 801d8ce:	440b      	add	r3, r1
 801d8d0:	4303      	orrs	r3, r0
 801d8d2:	d009      	beq.n	801d8e8 <__ieee754_pow+0x9b0>
 801d8d4:	ec51 0b18 	vmov	r0, r1, d8
 801d8d8:	2200      	movs	r2, #0
 801d8da:	2300      	movs	r3, #0
 801d8dc:	f7e3 f8fe 	bl	8000adc <__aeabi_dcmplt>
 801d8e0:	3800      	subs	r0, #0
 801d8e2:	bf18      	it	ne
 801d8e4:	2001      	movne	r0, #1
 801d8e6:	e447      	b.n	801d178 <__ieee754_pow+0x240>
 801d8e8:	4622      	mov	r2, r4
 801d8ea:	462b      	mov	r3, r5
 801d8ec:	f7e2 fccc 	bl	8000288 <__aeabi_dsub>
 801d8f0:	4642      	mov	r2, r8
 801d8f2:	464b      	mov	r3, r9
 801d8f4:	f7e3 f906 	bl	8000b04 <__aeabi_dcmpge>
 801d8f8:	2800      	cmp	r0, #0
 801d8fa:	f43f aef3 	beq.w	801d6e4 <__ieee754_pow+0x7ac>
 801d8fe:	e7e9      	b.n	801d8d4 <__ieee754_pow+0x99c>
 801d900:	f04f 0a00 	mov.w	sl, #0
 801d904:	e71a      	b.n	801d73c <__ieee754_pow+0x804>
 801d906:	ec51 0b10 	vmov	r0, r1, d0
 801d90a:	4619      	mov	r1, r3
 801d90c:	e7d4      	b.n	801d8b8 <__ieee754_pow+0x980>
 801d90e:	491c      	ldr	r1, [pc, #112]	; (801d980 <__ieee754_pow+0xa48>)
 801d910:	2000      	movs	r0, #0
 801d912:	f7ff bb30 	b.w	801cf76 <__ieee754_pow+0x3e>
 801d916:	2000      	movs	r0, #0
 801d918:	2100      	movs	r1, #0
 801d91a:	f7ff bb2c 	b.w	801cf76 <__ieee754_pow+0x3e>
 801d91e:	4630      	mov	r0, r6
 801d920:	4639      	mov	r1, r7
 801d922:	f7ff bb28 	b.w	801cf76 <__ieee754_pow+0x3e>
 801d926:	9204      	str	r2, [sp, #16]
 801d928:	f7ff bb7a 	b.w	801d020 <__ieee754_pow+0xe8>
 801d92c:	2300      	movs	r3, #0
 801d92e:	f7ff bb64 	b.w	801cffa <__ieee754_pow+0xc2>
 801d932:	bf00      	nop
 801d934:	f3af 8000 	nop.w
 801d938:	00000000 	.word	0x00000000
 801d93c:	3fe62e43 	.word	0x3fe62e43
 801d940:	fefa39ef 	.word	0xfefa39ef
 801d944:	3fe62e42 	.word	0x3fe62e42
 801d948:	0ca86c39 	.word	0x0ca86c39
 801d94c:	be205c61 	.word	0xbe205c61
 801d950:	72bea4d0 	.word	0x72bea4d0
 801d954:	3e663769 	.word	0x3e663769
 801d958:	c5d26bf1 	.word	0xc5d26bf1
 801d95c:	3ebbbd41 	.word	0x3ebbbd41
 801d960:	af25de2c 	.word	0xaf25de2c
 801d964:	3f11566a 	.word	0x3f11566a
 801d968:	16bebd93 	.word	0x16bebd93
 801d96c:	3f66c16c 	.word	0x3f66c16c
 801d970:	5555553e 	.word	0x5555553e
 801d974:	3fc55555 	.word	0x3fc55555
 801d978:	3fe00000 	.word	0x3fe00000
 801d97c:	000fffff 	.word	0x000fffff
 801d980:	3ff00000 	.word	0x3ff00000
 801d984:	4090cbff 	.word	0x4090cbff
 801d988:	3f6f3400 	.word	0x3f6f3400
 801d98c:	652b82fe 	.word	0x652b82fe
 801d990:	3c971547 	.word	0x3c971547

0801d994 <__ieee754_sqrt>:
 801d994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d998:	ec55 4b10 	vmov	r4, r5, d0
 801d99c:	4e55      	ldr	r6, [pc, #340]	; (801daf4 <__ieee754_sqrt+0x160>)
 801d99e:	43ae      	bics	r6, r5
 801d9a0:	ee10 0a10 	vmov	r0, s0
 801d9a4:	ee10 3a10 	vmov	r3, s0
 801d9a8:	462a      	mov	r2, r5
 801d9aa:	4629      	mov	r1, r5
 801d9ac:	d110      	bne.n	801d9d0 <__ieee754_sqrt+0x3c>
 801d9ae:	ee10 2a10 	vmov	r2, s0
 801d9b2:	462b      	mov	r3, r5
 801d9b4:	f7e2 fe20 	bl	80005f8 <__aeabi_dmul>
 801d9b8:	4602      	mov	r2, r0
 801d9ba:	460b      	mov	r3, r1
 801d9bc:	4620      	mov	r0, r4
 801d9be:	4629      	mov	r1, r5
 801d9c0:	f7e2 fc64 	bl	800028c <__adddf3>
 801d9c4:	4604      	mov	r4, r0
 801d9c6:	460d      	mov	r5, r1
 801d9c8:	ec45 4b10 	vmov	d0, r4, r5
 801d9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9d0:	2d00      	cmp	r5, #0
 801d9d2:	dc10      	bgt.n	801d9f6 <__ieee754_sqrt+0x62>
 801d9d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d9d8:	4330      	orrs	r0, r6
 801d9da:	d0f5      	beq.n	801d9c8 <__ieee754_sqrt+0x34>
 801d9dc:	b15d      	cbz	r5, 801d9f6 <__ieee754_sqrt+0x62>
 801d9de:	ee10 2a10 	vmov	r2, s0
 801d9e2:	462b      	mov	r3, r5
 801d9e4:	ee10 0a10 	vmov	r0, s0
 801d9e8:	f7e2 fc4e 	bl	8000288 <__aeabi_dsub>
 801d9ec:	4602      	mov	r2, r0
 801d9ee:	460b      	mov	r3, r1
 801d9f0:	f7e2 ff2c 	bl	800084c <__aeabi_ddiv>
 801d9f4:	e7e6      	b.n	801d9c4 <__ieee754_sqrt+0x30>
 801d9f6:	1512      	asrs	r2, r2, #20
 801d9f8:	d074      	beq.n	801dae4 <__ieee754_sqrt+0x150>
 801d9fa:	07d4      	lsls	r4, r2, #31
 801d9fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801da00:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801da04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801da08:	bf5e      	ittt	pl
 801da0a:	0fda      	lsrpl	r2, r3, #31
 801da0c:	005b      	lslpl	r3, r3, #1
 801da0e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801da12:	2400      	movs	r4, #0
 801da14:	0fda      	lsrs	r2, r3, #31
 801da16:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801da1a:	107f      	asrs	r7, r7, #1
 801da1c:	005b      	lsls	r3, r3, #1
 801da1e:	2516      	movs	r5, #22
 801da20:	4620      	mov	r0, r4
 801da22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801da26:	1886      	adds	r6, r0, r2
 801da28:	428e      	cmp	r6, r1
 801da2a:	bfde      	ittt	le
 801da2c:	1b89      	suble	r1, r1, r6
 801da2e:	18b0      	addle	r0, r6, r2
 801da30:	18a4      	addle	r4, r4, r2
 801da32:	0049      	lsls	r1, r1, #1
 801da34:	3d01      	subs	r5, #1
 801da36:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801da3a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801da3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801da42:	d1f0      	bne.n	801da26 <__ieee754_sqrt+0x92>
 801da44:	462a      	mov	r2, r5
 801da46:	f04f 0e20 	mov.w	lr, #32
 801da4a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801da4e:	4281      	cmp	r1, r0
 801da50:	eb06 0c05 	add.w	ip, r6, r5
 801da54:	dc02      	bgt.n	801da5c <__ieee754_sqrt+0xc8>
 801da56:	d113      	bne.n	801da80 <__ieee754_sqrt+0xec>
 801da58:	459c      	cmp	ip, r3
 801da5a:	d811      	bhi.n	801da80 <__ieee754_sqrt+0xec>
 801da5c:	f1bc 0f00 	cmp.w	ip, #0
 801da60:	eb0c 0506 	add.w	r5, ip, r6
 801da64:	da43      	bge.n	801daee <__ieee754_sqrt+0x15a>
 801da66:	2d00      	cmp	r5, #0
 801da68:	db41      	blt.n	801daee <__ieee754_sqrt+0x15a>
 801da6a:	f100 0801 	add.w	r8, r0, #1
 801da6e:	1a09      	subs	r1, r1, r0
 801da70:	459c      	cmp	ip, r3
 801da72:	bf88      	it	hi
 801da74:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801da78:	eba3 030c 	sub.w	r3, r3, ip
 801da7c:	4432      	add	r2, r6
 801da7e:	4640      	mov	r0, r8
 801da80:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801da84:	f1be 0e01 	subs.w	lr, lr, #1
 801da88:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801da8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801da90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801da94:	d1db      	bne.n	801da4e <__ieee754_sqrt+0xba>
 801da96:	430b      	orrs	r3, r1
 801da98:	d006      	beq.n	801daa8 <__ieee754_sqrt+0x114>
 801da9a:	1c50      	adds	r0, r2, #1
 801da9c:	bf13      	iteet	ne
 801da9e:	3201      	addne	r2, #1
 801daa0:	3401      	addeq	r4, #1
 801daa2:	4672      	moveq	r2, lr
 801daa4:	f022 0201 	bicne.w	r2, r2, #1
 801daa8:	1063      	asrs	r3, r4, #1
 801daaa:	0852      	lsrs	r2, r2, #1
 801daac:	07e1      	lsls	r1, r4, #31
 801daae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801dab2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801dab6:	bf48      	it	mi
 801dab8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801dabc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801dac0:	4614      	mov	r4, r2
 801dac2:	e781      	b.n	801d9c8 <__ieee754_sqrt+0x34>
 801dac4:	0ad9      	lsrs	r1, r3, #11
 801dac6:	3815      	subs	r0, #21
 801dac8:	055b      	lsls	r3, r3, #21
 801daca:	2900      	cmp	r1, #0
 801dacc:	d0fa      	beq.n	801dac4 <__ieee754_sqrt+0x130>
 801dace:	02cd      	lsls	r5, r1, #11
 801dad0:	d50a      	bpl.n	801dae8 <__ieee754_sqrt+0x154>
 801dad2:	f1c2 0420 	rsb	r4, r2, #32
 801dad6:	fa23 f404 	lsr.w	r4, r3, r4
 801dada:	1e55      	subs	r5, r2, #1
 801dadc:	4093      	lsls	r3, r2
 801dade:	4321      	orrs	r1, r4
 801dae0:	1b42      	subs	r2, r0, r5
 801dae2:	e78a      	b.n	801d9fa <__ieee754_sqrt+0x66>
 801dae4:	4610      	mov	r0, r2
 801dae6:	e7f0      	b.n	801daca <__ieee754_sqrt+0x136>
 801dae8:	0049      	lsls	r1, r1, #1
 801daea:	3201      	adds	r2, #1
 801daec:	e7ef      	b.n	801dace <__ieee754_sqrt+0x13a>
 801daee:	4680      	mov	r8, r0
 801daf0:	e7bd      	b.n	801da6e <__ieee754_sqrt+0xda>
 801daf2:	bf00      	nop
 801daf4:	7ff00000 	.word	0x7ff00000

0801daf8 <with_errno>:
 801daf8:	b570      	push	{r4, r5, r6, lr}
 801dafa:	4604      	mov	r4, r0
 801dafc:	460d      	mov	r5, r1
 801dafe:	4616      	mov	r6, r2
 801db00:	f000 f8e2 	bl	801dcc8 <__errno>
 801db04:	4629      	mov	r1, r5
 801db06:	6006      	str	r6, [r0, #0]
 801db08:	4620      	mov	r0, r4
 801db0a:	bd70      	pop	{r4, r5, r6, pc}

0801db0c <xflow>:
 801db0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801db0e:	4614      	mov	r4, r2
 801db10:	461d      	mov	r5, r3
 801db12:	b108      	cbz	r0, 801db18 <xflow+0xc>
 801db14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801db18:	e9cd 2300 	strd	r2, r3, [sp]
 801db1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801db20:	4620      	mov	r0, r4
 801db22:	4629      	mov	r1, r5
 801db24:	f7e2 fd68 	bl	80005f8 <__aeabi_dmul>
 801db28:	2222      	movs	r2, #34	; 0x22
 801db2a:	b003      	add	sp, #12
 801db2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801db30:	f7ff bfe2 	b.w	801daf8 <with_errno>

0801db34 <__math_uflow>:
 801db34:	b508      	push	{r3, lr}
 801db36:	2200      	movs	r2, #0
 801db38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801db3c:	f7ff ffe6 	bl	801db0c <xflow>
 801db40:	ec41 0b10 	vmov	d0, r0, r1
 801db44:	bd08      	pop	{r3, pc}

0801db46 <__math_oflow>:
 801db46:	b508      	push	{r3, lr}
 801db48:	2200      	movs	r2, #0
 801db4a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801db4e:	f7ff ffdd 	bl	801db0c <xflow>
 801db52:	ec41 0b10 	vmov	d0, r0, r1
 801db56:	bd08      	pop	{r3, pc}

0801db58 <fabs>:
 801db58:	ec51 0b10 	vmov	r0, r1, d0
 801db5c:	ee10 2a10 	vmov	r2, s0
 801db60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801db64:	ec43 2b10 	vmov	d0, r2, r3
 801db68:	4770      	bx	lr

0801db6a <finite>:
 801db6a:	b082      	sub	sp, #8
 801db6c:	ed8d 0b00 	vstr	d0, [sp]
 801db70:	9801      	ldr	r0, [sp, #4]
 801db72:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801db76:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801db7a:	0fc0      	lsrs	r0, r0, #31
 801db7c:	b002      	add	sp, #8
 801db7e:	4770      	bx	lr

0801db80 <scalbn>:
 801db80:	b570      	push	{r4, r5, r6, lr}
 801db82:	ec55 4b10 	vmov	r4, r5, d0
 801db86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801db8a:	4606      	mov	r6, r0
 801db8c:	462b      	mov	r3, r5
 801db8e:	b99a      	cbnz	r2, 801dbb8 <scalbn+0x38>
 801db90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801db94:	4323      	orrs	r3, r4
 801db96:	d036      	beq.n	801dc06 <scalbn+0x86>
 801db98:	4b39      	ldr	r3, [pc, #228]	; (801dc80 <scalbn+0x100>)
 801db9a:	4629      	mov	r1, r5
 801db9c:	ee10 0a10 	vmov	r0, s0
 801dba0:	2200      	movs	r2, #0
 801dba2:	f7e2 fd29 	bl	80005f8 <__aeabi_dmul>
 801dba6:	4b37      	ldr	r3, [pc, #220]	; (801dc84 <scalbn+0x104>)
 801dba8:	429e      	cmp	r6, r3
 801dbaa:	4604      	mov	r4, r0
 801dbac:	460d      	mov	r5, r1
 801dbae:	da10      	bge.n	801dbd2 <scalbn+0x52>
 801dbb0:	a32b      	add	r3, pc, #172	; (adr r3, 801dc60 <scalbn+0xe0>)
 801dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbb6:	e03a      	b.n	801dc2e <scalbn+0xae>
 801dbb8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801dbbc:	428a      	cmp	r2, r1
 801dbbe:	d10c      	bne.n	801dbda <scalbn+0x5a>
 801dbc0:	ee10 2a10 	vmov	r2, s0
 801dbc4:	4620      	mov	r0, r4
 801dbc6:	4629      	mov	r1, r5
 801dbc8:	f7e2 fb60 	bl	800028c <__adddf3>
 801dbcc:	4604      	mov	r4, r0
 801dbce:	460d      	mov	r5, r1
 801dbd0:	e019      	b.n	801dc06 <scalbn+0x86>
 801dbd2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801dbd6:	460b      	mov	r3, r1
 801dbd8:	3a36      	subs	r2, #54	; 0x36
 801dbda:	4432      	add	r2, r6
 801dbdc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801dbe0:	428a      	cmp	r2, r1
 801dbe2:	dd08      	ble.n	801dbf6 <scalbn+0x76>
 801dbe4:	2d00      	cmp	r5, #0
 801dbe6:	a120      	add	r1, pc, #128	; (adr r1, 801dc68 <scalbn+0xe8>)
 801dbe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dbec:	da1c      	bge.n	801dc28 <scalbn+0xa8>
 801dbee:	a120      	add	r1, pc, #128	; (adr r1, 801dc70 <scalbn+0xf0>)
 801dbf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dbf4:	e018      	b.n	801dc28 <scalbn+0xa8>
 801dbf6:	2a00      	cmp	r2, #0
 801dbf8:	dd08      	ble.n	801dc0c <scalbn+0x8c>
 801dbfa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801dbfe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801dc02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801dc06:	ec45 4b10 	vmov	d0, r4, r5
 801dc0a:	bd70      	pop	{r4, r5, r6, pc}
 801dc0c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801dc10:	da19      	bge.n	801dc46 <scalbn+0xc6>
 801dc12:	f24c 3350 	movw	r3, #50000	; 0xc350
 801dc16:	429e      	cmp	r6, r3
 801dc18:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801dc1c:	dd0a      	ble.n	801dc34 <scalbn+0xb4>
 801dc1e:	a112      	add	r1, pc, #72	; (adr r1, 801dc68 <scalbn+0xe8>)
 801dc20:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	d1e2      	bne.n	801dbee <scalbn+0x6e>
 801dc28:	a30f      	add	r3, pc, #60	; (adr r3, 801dc68 <scalbn+0xe8>)
 801dc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc2e:	f7e2 fce3 	bl	80005f8 <__aeabi_dmul>
 801dc32:	e7cb      	b.n	801dbcc <scalbn+0x4c>
 801dc34:	a10a      	add	r1, pc, #40	; (adr r1, 801dc60 <scalbn+0xe0>)
 801dc36:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dc3a:	2b00      	cmp	r3, #0
 801dc3c:	d0b8      	beq.n	801dbb0 <scalbn+0x30>
 801dc3e:	a10e      	add	r1, pc, #56	; (adr r1, 801dc78 <scalbn+0xf8>)
 801dc40:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dc44:	e7b4      	b.n	801dbb0 <scalbn+0x30>
 801dc46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801dc4a:	3236      	adds	r2, #54	; 0x36
 801dc4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801dc50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801dc54:	4620      	mov	r0, r4
 801dc56:	4b0c      	ldr	r3, [pc, #48]	; (801dc88 <scalbn+0x108>)
 801dc58:	2200      	movs	r2, #0
 801dc5a:	e7e8      	b.n	801dc2e <scalbn+0xae>
 801dc5c:	f3af 8000 	nop.w
 801dc60:	c2f8f359 	.word	0xc2f8f359
 801dc64:	01a56e1f 	.word	0x01a56e1f
 801dc68:	8800759c 	.word	0x8800759c
 801dc6c:	7e37e43c 	.word	0x7e37e43c
 801dc70:	8800759c 	.word	0x8800759c
 801dc74:	fe37e43c 	.word	0xfe37e43c
 801dc78:	c2f8f359 	.word	0xc2f8f359
 801dc7c:	81a56e1f 	.word	0x81a56e1f
 801dc80:	43500000 	.word	0x43500000
 801dc84:	ffff3cb0 	.word	0xffff3cb0
 801dc88:	3c900000 	.word	0x3c900000

0801dc8c <__assert_func>:
 801dc8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dc8e:	4614      	mov	r4, r2
 801dc90:	461a      	mov	r2, r3
 801dc92:	4b09      	ldr	r3, [pc, #36]	; (801dcb8 <__assert_func+0x2c>)
 801dc94:	681b      	ldr	r3, [r3, #0]
 801dc96:	4605      	mov	r5, r0
 801dc98:	68d8      	ldr	r0, [r3, #12]
 801dc9a:	b14c      	cbz	r4, 801dcb0 <__assert_func+0x24>
 801dc9c:	4b07      	ldr	r3, [pc, #28]	; (801dcbc <__assert_func+0x30>)
 801dc9e:	9100      	str	r1, [sp, #0]
 801dca0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dca4:	4906      	ldr	r1, [pc, #24]	; (801dcc0 <__assert_func+0x34>)
 801dca6:	462b      	mov	r3, r5
 801dca8:	f000 f814 	bl	801dcd4 <fiprintf>
 801dcac:	f000 fc0c 	bl	801e4c8 <abort>
 801dcb0:	4b04      	ldr	r3, [pc, #16]	; (801dcc4 <__assert_func+0x38>)
 801dcb2:	461c      	mov	r4, r3
 801dcb4:	e7f3      	b.n	801dc9e <__assert_func+0x12>
 801dcb6:	bf00      	nop
 801dcb8:	200001f0 	.word	0x200001f0
 801dcbc:	08029d38 	.word	0x08029d38
 801dcc0:	08029d45 	.word	0x08029d45
 801dcc4:	08029d73 	.word	0x08029d73

0801dcc8 <__errno>:
 801dcc8:	4b01      	ldr	r3, [pc, #4]	; (801dcd0 <__errno+0x8>)
 801dcca:	6818      	ldr	r0, [r3, #0]
 801dccc:	4770      	bx	lr
 801dcce:	bf00      	nop
 801dcd0:	200001f0 	.word	0x200001f0

0801dcd4 <fiprintf>:
 801dcd4:	b40e      	push	{r1, r2, r3}
 801dcd6:	b503      	push	{r0, r1, lr}
 801dcd8:	4601      	mov	r1, r0
 801dcda:	ab03      	add	r3, sp, #12
 801dcdc:	4805      	ldr	r0, [pc, #20]	; (801dcf4 <fiprintf+0x20>)
 801dcde:	f853 2b04 	ldr.w	r2, [r3], #4
 801dce2:	6800      	ldr	r0, [r0, #0]
 801dce4:	9301      	str	r3, [sp, #4]
 801dce6:	f000 f86b 	bl	801ddc0 <_vfiprintf_r>
 801dcea:	b002      	add	sp, #8
 801dcec:	f85d eb04 	ldr.w	lr, [sp], #4
 801dcf0:	b003      	add	sp, #12
 801dcf2:	4770      	bx	lr
 801dcf4:	200001f0 	.word	0x200001f0

0801dcf8 <__libc_init_array>:
 801dcf8:	b570      	push	{r4, r5, r6, lr}
 801dcfa:	4d0d      	ldr	r5, [pc, #52]	; (801dd30 <__libc_init_array+0x38>)
 801dcfc:	4c0d      	ldr	r4, [pc, #52]	; (801dd34 <__libc_init_array+0x3c>)
 801dcfe:	1b64      	subs	r4, r4, r5
 801dd00:	10a4      	asrs	r4, r4, #2
 801dd02:	2600      	movs	r6, #0
 801dd04:	42a6      	cmp	r6, r4
 801dd06:	d109      	bne.n	801dd1c <__libc_init_array+0x24>
 801dd08:	4d0b      	ldr	r5, [pc, #44]	; (801dd38 <__libc_init_array+0x40>)
 801dd0a:	4c0c      	ldr	r4, [pc, #48]	; (801dd3c <__libc_init_array+0x44>)
 801dd0c:	f000 fff0 	bl	801ecf0 <_init>
 801dd10:	1b64      	subs	r4, r4, r5
 801dd12:	10a4      	asrs	r4, r4, #2
 801dd14:	2600      	movs	r6, #0
 801dd16:	42a6      	cmp	r6, r4
 801dd18:	d105      	bne.n	801dd26 <__libc_init_array+0x2e>
 801dd1a:	bd70      	pop	{r4, r5, r6, pc}
 801dd1c:	f855 3b04 	ldr.w	r3, [r5], #4
 801dd20:	4798      	blx	r3
 801dd22:	3601      	adds	r6, #1
 801dd24:	e7ee      	b.n	801dd04 <__libc_init_array+0xc>
 801dd26:	f855 3b04 	ldr.w	r3, [r5], #4
 801dd2a:	4798      	blx	r3
 801dd2c:	3601      	adds	r6, #1
 801dd2e:	e7f2      	b.n	801dd16 <__libc_init_array+0x1e>
 801dd30:	08029e14 	.word	0x08029e14
 801dd34:	08029e14 	.word	0x08029e14
 801dd38:	08029e14 	.word	0x08029e14
 801dd3c:	08029e1c 	.word	0x08029e1c

0801dd40 <memcpy>:
 801dd40:	440a      	add	r2, r1
 801dd42:	4291      	cmp	r1, r2
 801dd44:	f100 33ff 	add.w	r3, r0, #4294967295
 801dd48:	d100      	bne.n	801dd4c <memcpy+0xc>
 801dd4a:	4770      	bx	lr
 801dd4c:	b510      	push	{r4, lr}
 801dd4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dd52:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dd56:	4291      	cmp	r1, r2
 801dd58:	d1f9      	bne.n	801dd4e <memcpy+0xe>
 801dd5a:	bd10      	pop	{r4, pc}

0801dd5c <memset>:
 801dd5c:	4402      	add	r2, r0
 801dd5e:	4603      	mov	r3, r0
 801dd60:	4293      	cmp	r3, r2
 801dd62:	d100      	bne.n	801dd66 <memset+0xa>
 801dd64:	4770      	bx	lr
 801dd66:	f803 1b01 	strb.w	r1, [r3], #1
 801dd6a:	e7f9      	b.n	801dd60 <memset+0x4>

0801dd6c <__sfputc_r>:
 801dd6c:	6893      	ldr	r3, [r2, #8]
 801dd6e:	3b01      	subs	r3, #1
 801dd70:	2b00      	cmp	r3, #0
 801dd72:	b410      	push	{r4}
 801dd74:	6093      	str	r3, [r2, #8]
 801dd76:	da08      	bge.n	801dd8a <__sfputc_r+0x1e>
 801dd78:	6994      	ldr	r4, [r2, #24]
 801dd7a:	42a3      	cmp	r3, r4
 801dd7c:	db01      	blt.n	801dd82 <__sfputc_r+0x16>
 801dd7e:	290a      	cmp	r1, #10
 801dd80:	d103      	bne.n	801dd8a <__sfputc_r+0x1e>
 801dd82:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dd86:	f000 badf 	b.w	801e348 <__swbuf_r>
 801dd8a:	6813      	ldr	r3, [r2, #0]
 801dd8c:	1c58      	adds	r0, r3, #1
 801dd8e:	6010      	str	r0, [r2, #0]
 801dd90:	7019      	strb	r1, [r3, #0]
 801dd92:	4608      	mov	r0, r1
 801dd94:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dd98:	4770      	bx	lr

0801dd9a <__sfputs_r>:
 801dd9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd9c:	4606      	mov	r6, r0
 801dd9e:	460f      	mov	r7, r1
 801dda0:	4614      	mov	r4, r2
 801dda2:	18d5      	adds	r5, r2, r3
 801dda4:	42ac      	cmp	r4, r5
 801dda6:	d101      	bne.n	801ddac <__sfputs_r+0x12>
 801dda8:	2000      	movs	r0, #0
 801ddaa:	e007      	b.n	801ddbc <__sfputs_r+0x22>
 801ddac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ddb0:	463a      	mov	r2, r7
 801ddb2:	4630      	mov	r0, r6
 801ddb4:	f7ff ffda 	bl	801dd6c <__sfputc_r>
 801ddb8:	1c43      	adds	r3, r0, #1
 801ddba:	d1f3      	bne.n	801dda4 <__sfputs_r+0xa>
 801ddbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ddc0 <_vfiprintf_r>:
 801ddc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddc4:	460d      	mov	r5, r1
 801ddc6:	b09d      	sub	sp, #116	; 0x74
 801ddc8:	4614      	mov	r4, r2
 801ddca:	4698      	mov	r8, r3
 801ddcc:	4606      	mov	r6, r0
 801ddce:	b118      	cbz	r0, 801ddd8 <_vfiprintf_r+0x18>
 801ddd0:	6983      	ldr	r3, [r0, #24]
 801ddd2:	b90b      	cbnz	r3, 801ddd8 <_vfiprintf_r+0x18>
 801ddd4:	f000 fc9a 	bl	801e70c <__sinit>
 801ddd8:	4b89      	ldr	r3, [pc, #548]	; (801e000 <_vfiprintf_r+0x240>)
 801ddda:	429d      	cmp	r5, r3
 801dddc:	d11b      	bne.n	801de16 <_vfiprintf_r+0x56>
 801ddde:	6875      	ldr	r5, [r6, #4]
 801dde0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dde2:	07d9      	lsls	r1, r3, #31
 801dde4:	d405      	bmi.n	801ddf2 <_vfiprintf_r+0x32>
 801dde6:	89ab      	ldrh	r3, [r5, #12]
 801dde8:	059a      	lsls	r2, r3, #22
 801ddea:	d402      	bmi.n	801ddf2 <_vfiprintf_r+0x32>
 801ddec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ddee:	f000 fd2b 	bl	801e848 <__retarget_lock_acquire_recursive>
 801ddf2:	89ab      	ldrh	r3, [r5, #12]
 801ddf4:	071b      	lsls	r3, r3, #28
 801ddf6:	d501      	bpl.n	801ddfc <_vfiprintf_r+0x3c>
 801ddf8:	692b      	ldr	r3, [r5, #16]
 801ddfa:	b9eb      	cbnz	r3, 801de38 <_vfiprintf_r+0x78>
 801ddfc:	4629      	mov	r1, r5
 801ddfe:	4630      	mov	r0, r6
 801de00:	f000 faf4 	bl	801e3ec <__swsetup_r>
 801de04:	b1c0      	cbz	r0, 801de38 <_vfiprintf_r+0x78>
 801de06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801de08:	07dc      	lsls	r4, r3, #31
 801de0a:	d50e      	bpl.n	801de2a <_vfiprintf_r+0x6a>
 801de0c:	f04f 30ff 	mov.w	r0, #4294967295
 801de10:	b01d      	add	sp, #116	; 0x74
 801de12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de16:	4b7b      	ldr	r3, [pc, #492]	; (801e004 <_vfiprintf_r+0x244>)
 801de18:	429d      	cmp	r5, r3
 801de1a:	d101      	bne.n	801de20 <_vfiprintf_r+0x60>
 801de1c:	68b5      	ldr	r5, [r6, #8]
 801de1e:	e7df      	b.n	801dde0 <_vfiprintf_r+0x20>
 801de20:	4b79      	ldr	r3, [pc, #484]	; (801e008 <_vfiprintf_r+0x248>)
 801de22:	429d      	cmp	r5, r3
 801de24:	bf08      	it	eq
 801de26:	68f5      	ldreq	r5, [r6, #12]
 801de28:	e7da      	b.n	801dde0 <_vfiprintf_r+0x20>
 801de2a:	89ab      	ldrh	r3, [r5, #12]
 801de2c:	0598      	lsls	r0, r3, #22
 801de2e:	d4ed      	bmi.n	801de0c <_vfiprintf_r+0x4c>
 801de30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801de32:	f000 fd0a 	bl	801e84a <__retarget_lock_release_recursive>
 801de36:	e7e9      	b.n	801de0c <_vfiprintf_r+0x4c>
 801de38:	2300      	movs	r3, #0
 801de3a:	9309      	str	r3, [sp, #36]	; 0x24
 801de3c:	2320      	movs	r3, #32
 801de3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801de42:	f8cd 800c 	str.w	r8, [sp, #12]
 801de46:	2330      	movs	r3, #48	; 0x30
 801de48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e00c <_vfiprintf_r+0x24c>
 801de4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801de50:	f04f 0901 	mov.w	r9, #1
 801de54:	4623      	mov	r3, r4
 801de56:	469a      	mov	sl, r3
 801de58:	f813 2b01 	ldrb.w	r2, [r3], #1
 801de5c:	b10a      	cbz	r2, 801de62 <_vfiprintf_r+0xa2>
 801de5e:	2a25      	cmp	r2, #37	; 0x25
 801de60:	d1f9      	bne.n	801de56 <_vfiprintf_r+0x96>
 801de62:	ebba 0b04 	subs.w	fp, sl, r4
 801de66:	d00b      	beq.n	801de80 <_vfiprintf_r+0xc0>
 801de68:	465b      	mov	r3, fp
 801de6a:	4622      	mov	r2, r4
 801de6c:	4629      	mov	r1, r5
 801de6e:	4630      	mov	r0, r6
 801de70:	f7ff ff93 	bl	801dd9a <__sfputs_r>
 801de74:	3001      	adds	r0, #1
 801de76:	f000 80aa 	beq.w	801dfce <_vfiprintf_r+0x20e>
 801de7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de7c:	445a      	add	r2, fp
 801de7e:	9209      	str	r2, [sp, #36]	; 0x24
 801de80:	f89a 3000 	ldrb.w	r3, [sl]
 801de84:	2b00      	cmp	r3, #0
 801de86:	f000 80a2 	beq.w	801dfce <_vfiprintf_r+0x20e>
 801de8a:	2300      	movs	r3, #0
 801de8c:	f04f 32ff 	mov.w	r2, #4294967295
 801de90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801de94:	f10a 0a01 	add.w	sl, sl, #1
 801de98:	9304      	str	r3, [sp, #16]
 801de9a:	9307      	str	r3, [sp, #28]
 801de9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dea0:	931a      	str	r3, [sp, #104]	; 0x68
 801dea2:	4654      	mov	r4, sl
 801dea4:	2205      	movs	r2, #5
 801dea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801deaa:	4858      	ldr	r0, [pc, #352]	; (801e00c <_vfiprintf_r+0x24c>)
 801deac:	f7e2 f998 	bl	80001e0 <memchr>
 801deb0:	9a04      	ldr	r2, [sp, #16]
 801deb2:	b9d8      	cbnz	r0, 801deec <_vfiprintf_r+0x12c>
 801deb4:	06d1      	lsls	r1, r2, #27
 801deb6:	bf44      	itt	mi
 801deb8:	2320      	movmi	r3, #32
 801deba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801debe:	0713      	lsls	r3, r2, #28
 801dec0:	bf44      	itt	mi
 801dec2:	232b      	movmi	r3, #43	; 0x2b
 801dec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dec8:	f89a 3000 	ldrb.w	r3, [sl]
 801decc:	2b2a      	cmp	r3, #42	; 0x2a
 801dece:	d015      	beq.n	801defc <_vfiprintf_r+0x13c>
 801ded0:	9a07      	ldr	r2, [sp, #28]
 801ded2:	4654      	mov	r4, sl
 801ded4:	2000      	movs	r0, #0
 801ded6:	f04f 0c0a 	mov.w	ip, #10
 801deda:	4621      	mov	r1, r4
 801dedc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dee0:	3b30      	subs	r3, #48	; 0x30
 801dee2:	2b09      	cmp	r3, #9
 801dee4:	d94e      	bls.n	801df84 <_vfiprintf_r+0x1c4>
 801dee6:	b1b0      	cbz	r0, 801df16 <_vfiprintf_r+0x156>
 801dee8:	9207      	str	r2, [sp, #28]
 801deea:	e014      	b.n	801df16 <_vfiprintf_r+0x156>
 801deec:	eba0 0308 	sub.w	r3, r0, r8
 801def0:	fa09 f303 	lsl.w	r3, r9, r3
 801def4:	4313      	orrs	r3, r2
 801def6:	9304      	str	r3, [sp, #16]
 801def8:	46a2      	mov	sl, r4
 801defa:	e7d2      	b.n	801dea2 <_vfiprintf_r+0xe2>
 801defc:	9b03      	ldr	r3, [sp, #12]
 801defe:	1d19      	adds	r1, r3, #4
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	9103      	str	r1, [sp, #12]
 801df04:	2b00      	cmp	r3, #0
 801df06:	bfbb      	ittet	lt
 801df08:	425b      	neglt	r3, r3
 801df0a:	f042 0202 	orrlt.w	r2, r2, #2
 801df0e:	9307      	strge	r3, [sp, #28]
 801df10:	9307      	strlt	r3, [sp, #28]
 801df12:	bfb8      	it	lt
 801df14:	9204      	strlt	r2, [sp, #16]
 801df16:	7823      	ldrb	r3, [r4, #0]
 801df18:	2b2e      	cmp	r3, #46	; 0x2e
 801df1a:	d10c      	bne.n	801df36 <_vfiprintf_r+0x176>
 801df1c:	7863      	ldrb	r3, [r4, #1]
 801df1e:	2b2a      	cmp	r3, #42	; 0x2a
 801df20:	d135      	bne.n	801df8e <_vfiprintf_r+0x1ce>
 801df22:	9b03      	ldr	r3, [sp, #12]
 801df24:	1d1a      	adds	r2, r3, #4
 801df26:	681b      	ldr	r3, [r3, #0]
 801df28:	9203      	str	r2, [sp, #12]
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	bfb8      	it	lt
 801df2e:	f04f 33ff 	movlt.w	r3, #4294967295
 801df32:	3402      	adds	r4, #2
 801df34:	9305      	str	r3, [sp, #20]
 801df36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e01c <_vfiprintf_r+0x25c>
 801df3a:	7821      	ldrb	r1, [r4, #0]
 801df3c:	2203      	movs	r2, #3
 801df3e:	4650      	mov	r0, sl
 801df40:	f7e2 f94e 	bl	80001e0 <memchr>
 801df44:	b140      	cbz	r0, 801df58 <_vfiprintf_r+0x198>
 801df46:	2340      	movs	r3, #64	; 0x40
 801df48:	eba0 000a 	sub.w	r0, r0, sl
 801df4c:	fa03 f000 	lsl.w	r0, r3, r0
 801df50:	9b04      	ldr	r3, [sp, #16]
 801df52:	4303      	orrs	r3, r0
 801df54:	3401      	adds	r4, #1
 801df56:	9304      	str	r3, [sp, #16]
 801df58:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df5c:	482c      	ldr	r0, [pc, #176]	; (801e010 <_vfiprintf_r+0x250>)
 801df5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801df62:	2206      	movs	r2, #6
 801df64:	f7e2 f93c 	bl	80001e0 <memchr>
 801df68:	2800      	cmp	r0, #0
 801df6a:	d03f      	beq.n	801dfec <_vfiprintf_r+0x22c>
 801df6c:	4b29      	ldr	r3, [pc, #164]	; (801e014 <_vfiprintf_r+0x254>)
 801df6e:	bb1b      	cbnz	r3, 801dfb8 <_vfiprintf_r+0x1f8>
 801df70:	9b03      	ldr	r3, [sp, #12]
 801df72:	3307      	adds	r3, #7
 801df74:	f023 0307 	bic.w	r3, r3, #7
 801df78:	3308      	adds	r3, #8
 801df7a:	9303      	str	r3, [sp, #12]
 801df7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df7e:	443b      	add	r3, r7
 801df80:	9309      	str	r3, [sp, #36]	; 0x24
 801df82:	e767      	b.n	801de54 <_vfiprintf_r+0x94>
 801df84:	fb0c 3202 	mla	r2, ip, r2, r3
 801df88:	460c      	mov	r4, r1
 801df8a:	2001      	movs	r0, #1
 801df8c:	e7a5      	b.n	801deda <_vfiprintf_r+0x11a>
 801df8e:	2300      	movs	r3, #0
 801df90:	3401      	adds	r4, #1
 801df92:	9305      	str	r3, [sp, #20]
 801df94:	4619      	mov	r1, r3
 801df96:	f04f 0c0a 	mov.w	ip, #10
 801df9a:	4620      	mov	r0, r4
 801df9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dfa0:	3a30      	subs	r2, #48	; 0x30
 801dfa2:	2a09      	cmp	r2, #9
 801dfa4:	d903      	bls.n	801dfae <_vfiprintf_r+0x1ee>
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	d0c5      	beq.n	801df36 <_vfiprintf_r+0x176>
 801dfaa:	9105      	str	r1, [sp, #20]
 801dfac:	e7c3      	b.n	801df36 <_vfiprintf_r+0x176>
 801dfae:	fb0c 2101 	mla	r1, ip, r1, r2
 801dfb2:	4604      	mov	r4, r0
 801dfb4:	2301      	movs	r3, #1
 801dfb6:	e7f0      	b.n	801df9a <_vfiprintf_r+0x1da>
 801dfb8:	ab03      	add	r3, sp, #12
 801dfba:	9300      	str	r3, [sp, #0]
 801dfbc:	462a      	mov	r2, r5
 801dfbe:	4b16      	ldr	r3, [pc, #88]	; (801e018 <_vfiprintf_r+0x258>)
 801dfc0:	a904      	add	r1, sp, #16
 801dfc2:	4630      	mov	r0, r6
 801dfc4:	f3af 8000 	nop.w
 801dfc8:	4607      	mov	r7, r0
 801dfca:	1c78      	adds	r0, r7, #1
 801dfcc:	d1d6      	bne.n	801df7c <_vfiprintf_r+0x1bc>
 801dfce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dfd0:	07d9      	lsls	r1, r3, #31
 801dfd2:	d405      	bmi.n	801dfe0 <_vfiprintf_r+0x220>
 801dfd4:	89ab      	ldrh	r3, [r5, #12]
 801dfd6:	059a      	lsls	r2, r3, #22
 801dfd8:	d402      	bmi.n	801dfe0 <_vfiprintf_r+0x220>
 801dfda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dfdc:	f000 fc35 	bl	801e84a <__retarget_lock_release_recursive>
 801dfe0:	89ab      	ldrh	r3, [r5, #12]
 801dfe2:	065b      	lsls	r3, r3, #25
 801dfe4:	f53f af12 	bmi.w	801de0c <_vfiprintf_r+0x4c>
 801dfe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dfea:	e711      	b.n	801de10 <_vfiprintf_r+0x50>
 801dfec:	ab03      	add	r3, sp, #12
 801dfee:	9300      	str	r3, [sp, #0]
 801dff0:	462a      	mov	r2, r5
 801dff2:	4b09      	ldr	r3, [pc, #36]	; (801e018 <_vfiprintf_r+0x258>)
 801dff4:	a904      	add	r1, sp, #16
 801dff6:	4630      	mov	r0, r6
 801dff8:	f000 f880 	bl	801e0fc <_printf_i>
 801dffc:	e7e4      	b.n	801dfc8 <_vfiprintf_r+0x208>
 801dffe:	bf00      	nop
 801e000:	08029dcc 	.word	0x08029dcc
 801e004:	08029dec 	.word	0x08029dec
 801e008:	08029dac 	.word	0x08029dac
 801e00c:	08029d78 	.word	0x08029d78
 801e010:	08029d82 	.word	0x08029d82
 801e014:	00000000 	.word	0x00000000
 801e018:	0801dd9b 	.word	0x0801dd9b
 801e01c:	08029d7e 	.word	0x08029d7e

0801e020 <_printf_common>:
 801e020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e024:	4616      	mov	r6, r2
 801e026:	4699      	mov	r9, r3
 801e028:	688a      	ldr	r2, [r1, #8]
 801e02a:	690b      	ldr	r3, [r1, #16]
 801e02c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e030:	4293      	cmp	r3, r2
 801e032:	bfb8      	it	lt
 801e034:	4613      	movlt	r3, r2
 801e036:	6033      	str	r3, [r6, #0]
 801e038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e03c:	4607      	mov	r7, r0
 801e03e:	460c      	mov	r4, r1
 801e040:	b10a      	cbz	r2, 801e046 <_printf_common+0x26>
 801e042:	3301      	adds	r3, #1
 801e044:	6033      	str	r3, [r6, #0]
 801e046:	6823      	ldr	r3, [r4, #0]
 801e048:	0699      	lsls	r1, r3, #26
 801e04a:	bf42      	ittt	mi
 801e04c:	6833      	ldrmi	r3, [r6, #0]
 801e04e:	3302      	addmi	r3, #2
 801e050:	6033      	strmi	r3, [r6, #0]
 801e052:	6825      	ldr	r5, [r4, #0]
 801e054:	f015 0506 	ands.w	r5, r5, #6
 801e058:	d106      	bne.n	801e068 <_printf_common+0x48>
 801e05a:	f104 0a19 	add.w	sl, r4, #25
 801e05e:	68e3      	ldr	r3, [r4, #12]
 801e060:	6832      	ldr	r2, [r6, #0]
 801e062:	1a9b      	subs	r3, r3, r2
 801e064:	42ab      	cmp	r3, r5
 801e066:	dc26      	bgt.n	801e0b6 <_printf_common+0x96>
 801e068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e06c:	1e13      	subs	r3, r2, #0
 801e06e:	6822      	ldr	r2, [r4, #0]
 801e070:	bf18      	it	ne
 801e072:	2301      	movne	r3, #1
 801e074:	0692      	lsls	r2, r2, #26
 801e076:	d42b      	bmi.n	801e0d0 <_printf_common+0xb0>
 801e078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e07c:	4649      	mov	r1, r9
 801e07e:	4638      	mov	r0, r7
 801e080:	47c0      	blx	r8
 801e082:	3001      	adds	r0, #1
 801e084:	d01e      	beq.n	801e0c4 <_printf_common+0xa4>
 801e086:	6823      	ldr	r3, [r4, #0]
 801e088:	68e5      	ldr	r5, [r4, #12]
 801e08a:	6832      	ldr	r2, [r6, #0]
 801e08c:	f003 0306 	and.w	r3, r3, #6
 801e090:	2b04      	cmp	r3, #4
 801e092:	bf08      	it	eq
 801e094:	1aad      	subeq	r5, r5, r2
 801e096:	68a3      	ldr	r3, [r4, #8]
 801e098:	6922      	ldr	r2, [r4, #16]
 801e09a:	bf0c      	ite	eq
 801e09c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e0a0:	2500      	movne	r5, #0
 801e0a2:	4293      	cmp	r3, r2
 801e0a4:	bfc4      	itt	gt
 801e0a6:	1a9b      	subgt	r3, r3, r2
 801e0a8:	18ed      	addgt	r5, r5, r3
 801e0aa:	2600      	movs	r6, #0
 801e0ac:	341a      	adds	r4, #26
 801e0ae:	42b5      	cmp	r5, r6
 801e0b0:	d11a      	bne.n	801e0e8 <_printf_common+0xc8>
 801e0b2:	2000      	movs	r0, #0
 801e0b4:	e008      	b.n	801e0c8 <_printf_common+0xa8>
 801e0b6:	2301      	movs	r3, #1
 801e0b8:	4652      	mov	r2, sl
 801e0ba:	4649      	mov	r1, r9
 801e0bc:	4638      	mov	r0, r7
 801e0be:	47c0      	blx	r8
 801e0c0:	3001      	adds	r0, #1
 801e0c2:	d103      	bne.n	801e0cc <_printf_common+0xac>
 801e0c4:	f04f 30ff 	mov.w	r0, #4294967295
 801e0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e0cc:	3501      	adds	r5, #1
 801e0ce:	e7c6      	b.n	801e05e <_printf_common+0x3e>
 801e0d0:	18e1      	adds	r1, r4, r3
 801e0d2:	1c5a      	adds	r2, r3, #1
 801e0d4:	2030      	movs	r0, #48	; 0x30
 801e0d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e0da:	4422      	add	r2, r4
 801e0dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e0e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e0e4:	3302      	adds	r3, #2
 801e0e6:	e7c7      	b.n	801e078 <_printf_common+0x58>
 801e0e8:	2301      	movs	r3, #1
 801e0ea:	4622      	mov	r2, r4
 801e0ec:	4649      	mov	r1, r9
 801e0ee:	4638      	mov	r0, r7
 801e0f0:	47c0      	blx	r8
 801e0f2:	3001      	adds	r0, #1
 801e0f4:	d0e6      	beq.n	801e0c4 <_printf_common+0xa4>
 801e0f6:	3601      	adds	r6, #1
 801e0f8:	e7d9      	b.n	801e0ae <_printf_common+0x8e>
	...

0801e0fc <_printf_i>:
 801e0fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e100:	7e0f      	ldrb	r7, [r1, #24]
 801e102:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e104:	2f78      	cmp	r7, #120	; 0x78
 801e106:	4691      	mov	r9, r2
 801e108:	4680      	mov	r8, r0
 801e10a:	460c      	mov	r4, r1
 801e10c:	469a      	mov	sl, r3
 801e10e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e112:	d807      	bhi.n	801e124 <_printf_i+0x28>
 801e114:	2f62      	cmp	r7, #98	; 0x62
 801e116:	d80a      	bhi.n	801e12e <_printf_i+0x32>
 801e118:	2f00      	cmp	r7, #0
 801e11a:	f000 80d8 	beq.w	801e2ce <_printf_i+0x1d2>
 801e11e:	2f58      	cmp	r7, #88	; 0x58
 801e120:	f000 80a3 	beq.w	801e26a <_printf_i+0x16e>
 801e124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e12c:	e03a      	b.n	801e1a4 <_printf_i+0xa8>
 801e12e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e132:	2b15      	cmp	r3, #21
 801e134:	d8f6      	bhi.n	801e124 <_printf_i+0x28>
 801e136:	a101      	add	r1, pc, #4	; (adr r1, 801e13c <_printf_i+0x40>)
 801e138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e13c:	0801e195 	.word	0x0801e195
 801e140:	0801e1a9 	.word	0x0801e1a9
 801e144:	0801e125 	.word	0x0801e125
 801e148:	0801e125 	.word	0x0801e125
 801e14c:	0801e125 	.word	0x0801e125
 801e150:	0801e125 	.word	0x0801e125
 801e154:	0801e1a9 	.word	0x0801e1a9
 801e158:	0801e125 	.word	0x0801e125
 801e15c:	0801e125 	.word	0x0801e125
 801e160:	0801e125 	.word	0x0801e125
 801e164:	0801e125 	.word	0x0801e125
 801e168:	0801e2b5 	.word	0x0801e2b5
 801e16c:	0801e1d9 	.word	0x0801e1d9
 801e170:	0801e297 	.word	0x0801e297
 801e174:	0801e125 	.word	0x0801e125
 801e178:	0801e125 	.word	0x0801e125
 801e17c:	0801e2d7 	.word	0x0801e2d7
 801e180:	0801e125 	.word	0x0801e125
 801e184:	0801e1d9 	.word	0x0801e1d9
 801e188:	0801e125 	.word	0x0801e125
 801e18c:	0801e125 	.word	0x0801e125
 801e190:	0801e29f 	.word	0x0801e29f
 801e194:	682b      	ldr	r3, [r5, #0]
 801e196:	1d1a      	adds	r2, r3, #4
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	602a      	str	r2, [r5, #0]
 801e19c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e1a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e1a4:	2301      	movs	r3, #1
 801e1a6:	e0a3      	b.n	801e2f0 <_printf_i+0x1f4>
 801e1a8:	6820      	ldr	r0, [r4, #0]
 801e1aa:	6829      	ldr	r1, [r5, #0]
 801e1ac:	0606      	lsls	r6, r0, #24
 801e1ae:	f101 0304 	add.w	r3, r1, #4
 801e1b2:	d50a      	bpl.n	801e1ca <_printf_i+0xce>
 801e1b4:	680e      	ldr	r6, [r1, #0]
 801e1b6:	602b      	str	r3, [r5, #0]
 801e1b8:	2e00      	cmp	r6, #0
 801e1ba:	da03      	bge.n	801e1c4 <_printf_i+0xc8>
 801e1bc:	232d      	movs	r3, #45	; 0x2d
 801e1be:	4276      	negs	r6, r6
 801e1c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e1c4:	485e      	ldr	r0, [pc, #376]	; (801e340 <_printf_i+0x244>)
 801e1c6:	230a      	movs	r3, #10
 801e1c8:	e019      	b.n	801e1fe <_printf_i+0x102>
 801e1ca:	680e      	ldr	r6, [r1, #0]
 801e1cc:	602b      	str	r3, [r5, #0]
 801e1ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e1d2:	bf18      	it	ne
 801e1d4:	b236      	sxthne	r6, r6
 801e1d6:	e7ef      	b.n	801e1b8 <_printf_i+0xbc>
 801e1d8:	682b      	ldr	r3, [r5, #0]
 801e1da:	6820      	ldr	r0, [r4, #0]
 801e1dc:	1d19      	adds	r1, r3, #4
 801e1de:	6029      	str	r1, [r5, #0]
 801e1e0:	0601      	lsls	r1, r0, #24
 801e1e2:	d501      	bpl.n	801e1e8 <_printf_i+0xec>
 801e1e4:	681e      	ldr	r6, [r3, #0]
 801e1e6:	e002      	b.n	801e1ee <_printf_i+0xf2>
 801e1e8:	0646      	lsls	r6, r0, #25
 801e1ea:	d5fb      	bpl.n	801e1e4 <_printf_i+0xe8>
 801e1ec:	881e      	ldrh	r6, [r3, #0]
 801e1ee:	4854      	ldr	r0, [pc, #336]	; (801e340 <_printf_i+0x244>)
 801e1f0:	2f6f      	cmp	r7, #111	; 0x6f
 801e1f2:	bf0c      	ite	eq
 801e1f4:	2308      	moveq	r3, #8
 801e1f6:	230a      	movne	r3, #10
 801e1f8:	2100      	movs	r1, #0
 801e1fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e1fe:	6865      	ldr	r5, [r4, #4]
 801e200:	60a5      	str	r5, [r4, #8]
 801e202:	2d00      	cmp	r5, #0
 801e204:	bfa2      	ittt	ge
 801e206:	6821      	ldrge	r1, [r4, #0]
 801e208:	f021 0104 	bicge.w	r1, r1, #4
 801e20c:	6021      	strge	r1, [r4, #0]
 801e20e:	b90e      	cbnz	r6, 801e214 <_printf_i+0x118>
 801e210:	2d00      	cmp	r5, #0
 801e212:	d04d      	beq.n	801e2b0 <_printf_i+0x1b4>
 801e214:	4615      	mov	r5, r2
 801e216:	fbb6 f1f3 	udiv	r1, r6, r3
 801e21a:	fb03 6711 	mls	r7, r3, r1, r6
 801e21e:	5dc7      	ldrb	r7, [r0, r7]
 801e220:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e224:	4637      	mov	r7, r6
 801e226:	42bb      	cmp	r3, r7
 801e228:	460e      	mov	r6, r1
 801e22a:	d9f4      	bls.n	801e216 <_printf_i+0x11a>
 801e22c:	2b08      	cmp	r3, #8
 801e22e:	d10b      	bne.n	801e248 <_printf_i+0x14c>
 801e230:	6823      	ldr	r3, [r4, #0]
 801e232:	07de      	lsls	r6, r3, #31
 801e234:	d508      	bpl.n	801e248 <_printf_i+0x14c>
 801e236:	6923      	ldr	r3, [r4, #16]
 801e238:	6861      	ldr	r1, [r4, #4]
 801e23a:	4299      	cmp	r1, r3
 801e23c:	bfde      	ittt	le
 801e23e:	2330      	movle	r3, #48	; 0x30
 801e240:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e244:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e248:	1b52      	subs	r2, r2, r5
 801e24a:	6122      	str	r2, [r4, #16]
 801e24c:	f8cd a000 	str.w	sl, [sp]
 801e250:	464b      	mov	r3, r9
 801e252:	aa03      	add	r2, sp, #12
 801e254:	4621      	mov	r1, r4
 801e256:	4640      	mov	r0, r8
 801e258:	f7ff fee2 	bl	801e020 <_printf_common>
 801e25c:	3001      	adds	r0, #1
 801e25e:	d14c      	bne.n	801e2fa <_printf_i+0x1fe>
 801e260:	f04f 30ff 	mov.w	r0, #4294967295
 801e264:	b004      	add	sp, #16
 801e266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e26a:	4835      	ldr	r0, [pc, #212]	; (801e340 <_printf_i+0x244>)
 801e26c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e270:	6829      	ldr	r1, [r5, #0]
 801e272:	6823      	ldr	r3, [r4, #0]
 801e274:	f851 6b04 	ldr.w	r6, [r1], #4
 801e278:	6029      	str	r1, [r5, #0]
 801e27a:	061d      	lsls	r5, r3, #24
 801e27c:	d514      	bpl.n	801e2a8 <_printf_i+0x1ac>
 801e27e:	07df      	lsls	r7, r3, #31
 801e280:	bf44      	itt	mi
 801e282:	f043 0320 	orrmi.w	r3, r3, #32
 801e286:	6023      	strmi	r3, [r4, #0]
 801e288:	b91e      	cbnz	r6, 801e292 <_printf_i+0x196>
 801e28a:	6823      	ldr	r3, [r4, #0]
 801e28c:	f023 0320 	bic.w	r3, r3, #32
 801e290:	6023      	str	r3, [r4, #0]
 801e292:	2310      	movs	r3, #16
 801e294:	e7b0      	b.n	801e1f8 <_printf_i+0xfc>
 801e296:	6823      	ldr	r3, [r4, #0]
 801e298:	f043 0320 	orr.w	r3, r3, #32
 801e29c:	6023      	str	r3, [r4, #0]
 801e29e:	2378      	movs	r3, #120	; 0x78
 801e2a0:	4828      	ldr	r0, [pc, #160]	; (801e344 <_printf_i+0x248>)
 801e2a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e2a6:	e7e3      	b.n	801e270 <_printf_i+0x174>
 801e2a8:	0659      	lsls	r1, r3, #25
 801e2aa:	bf48      	it	mi
 801e2ac:	b2b6      	uxthmi	r6, r6
 801e2ae:	e7e6      	b.n	801e27e <_printf_i+0x182>
 801e2b0:	4615      	mov	r5, r2
 801e2b2:	e7bb      	b.n	801e22c <_printf_i+0x130>
 801e2b4:	682b      	ldr	r3, [r5, #0]
 801e2b6:	6826      	ldr	r6, [r4, #0]
 801e2b8:	6961      	ldr	r1, [r4, #20]
 801e2ba:	1d18      	adds	r0, r3, #4
 801e2bc:	6028      	str	r0, [r5, #0]
 801e2be:	0635      	lsls	r5, r6, #24
 801e2c0:	681b      	ldr	r3, [r3, #0]
 801e2c2:	d501      	bpl.n	801e2c8 <_printf_i+0x1cc>
 801e2c4:	6019      	str	r1, [r3, #0]
 801e2c6:	e002      	b.n	801e2ce <_printf_i+0x1d2>
 801e2c8:	0670      	lsls	r0, r6, #25
 801e2ca:	d5fb      	bpl.n	801e2c4 <_printf_i+0x1c8>
 801e2cc:	8019      	strh	r1, [r3, #0]
 801e2ce:	2300      	movs	r3, #0
 801e2d0:	6123      	str	r3, [r4, #16]
 801e2d2:	4615      	mov	r5, r2
 801e2d4:	e7ba      	b.n	801e24c <_printf_i+0x150>
 801e2d6:	682b      	ldr	r3, [r5, #0]
 801e2d8:	1d1a      	adds	r2, r3, #4
 801e2da:	602a      	str	r2, [r5, #0]
 801e2dc:	681d      	ldr	r5, [r3, #0]
 801e2de:	6862      	ldr	r2, [r4, #4]
 801e2e0:	2100      	movs	r1, #0
 801e2e2:	4628      	mov	r0, r5
 801e2e4:	f7e1 ff7c 	bl	80001e0 <memchr>
 801e2e8:	b108      	cbz	r0, 801e2ee <_printf_i+0x1f2>
 801e2ea:	1b40      	subs	r0, r0, r5
 801e2ec:	6060      	str	r0, [r4, #4]
 801e2ee:	6863      	ldr	r3, [r4, #4]
 801e2f0:	6123      	str	r3, [r4, #16]
 801e2f2:	2300      	movs	r3, #0
 801e2f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e2f8:	e7a8      	b.n	801e24c <_printf_i+0x150>
 801e2fa:	6923      	ldr	r3, [r4, #16]
 801e2fc:	462a      	mov	r2, r5
 801e2fe:	4649      	mov	r1, r9
 801e300:	4640      	mov	r0, r8
 801e302:	47d0      	blx	sl
 801e304:	3001      	adds	r0, #1
 801e306:	d0ab      	beq.n	801e260 <_printf_i+0x164>
 801e308:	6823      	ldr	r3, [r4, #0]
 801e30a:	079b      	lsls	r3, r3, #30
 801e30c:	d413      	bmi.n	801e336 <_printf_i+0x23a>
 801e30e:	68e0      	ldr	r0, [r4, #12]
 801e310:	9b03      	ldr	r3, [sp, #12]
 801e312:	4298      	cmp	r0, r3
 801e314:	bfb8      	it	lt
 801e316:	4618      	movlt	r0, r3
 801e318:	e7a4      	b.n	801e264 <_printf_i+0x168>
 801e31a:	2301      	movs	r3, #1
 801e31c:	4632      	mov	r2, r6
 801e31e:	4649      	mov	r1, r9
 801e320:	4640      	mov	r0, r8
 801e322:	47d0      	blx	sl
 801e324:	3001      	adds	r0, #1
 801e326:	d09b      	beq.n	801e260 <_printf_i+0x164>
 801e328:	3501      	adds	r5, #1
 801e32a:	68e3      	ldr	r3, [r4, #12]
 801e32c:	9903      	ldr	r1, [sp, #12]
 801e32e:	1a5b      	subs	r3, r3, r1
 801e330:	42ab      	cmp	r3, r5
 801e332:	dcf2      	bgt.n	801e31a <_printf_i+0x21e>
 801e334:	e7eb      	b.n	801e30e <_printf_i+0x212>
 801e336:	2500      	movs	r5, #0
 801e338:	f104 0619 	add.w	r6, r4, #25
 801e33c:	e7f5      	b.n	801e32a <_printf_i+0x22e>
 801e33e:	bf00      	nop
 801e340:	08029d89 	.word	0x08029d89
 801e344:	08029d9a 	.word	0x08029d9a

0801e348 <__swbuf_r>:
 801e348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e34a:	460e      	mov	r6, r1
 801e34c:	4614      	mov	r4, r2
 801e34e:	4605      	mov	r5, r0
 801e350:	b118      	cbz	r0, 801e35a <__swbuf_r+0x12>
 801e352:	6983      	ldr	r3, [r0, #24]
 801e354:	b90b      	cbnz	r3, 801e35a <__swbuf_r+0x12>
 801e356:	f000 f9d9 	bl	801e70c <__sinit>
 801e35a:	4b21      	ldr	r3, [pc, #132]	; (801e3e0 <__swbuf_r+0x98>)
 801e35c:	429c      	cmp	r4, r3
 801e35e:	d12b      	bne.n	801e3b8 <__swbuf_r+0x70>
 801e360:	686c      	ldr	r4, [r5, #4]
 801e362:	69a3      	ldr	r3, [r4, #24]
 801e364:	60a3      	str	r3, [r4, #8]
 801e366:	89a3      	ldrh	r3, [r4, #12]
 801e368:	071a      	lsls	r2, r3, #28
 801e36a:	d52f      	bpl.n	801e3cc <__swbuf_r+0x84>
 801e36c:	6923      	ldr	r3, [r4, #16]
 801e36e:	b36b      	cbz	r3, 801e3cc <__swbuf_r+0x84>
 801e370:	6923      	ldr	r3, [r4, #16]
 801e372:	6820      	ldr	r0, [r4, #0]
 801e374:	1ac0      	subs	r0, r0, r3
 801e376:	6963      	ldr	r3, [r4, #20]
 801e378:	b2f6      	uxtb	r6, r6
 801e37a:	4283      	cmp	r3, r0
 801e37c:	4637      	mov	r7, r6
 801e37e:	dc04      	bgt.n	801e38a <__swbuf_r+0x42>
 801e380:	4621      	mov	r1, r4
 801e382:	4628      	mov	r0, r5
 801e384:	f000 f92e 	bl	801e5e4 <_fflush_r>
 801e388:	bb30      	cbnz	r0, 801e3d8 <__swbuf_r+0x90>
 801e38a:	68a3      	ldr	r3, [r4, #8]
 801e38c:	3b01      	subs	r3, #1
 801e38e:	60a3      	str	r3, [r4, #8]
 801e390:	6823      	ldr	r3, [r4, #0]
 801e392:	1c5a      	adds	r2, r3, #1
 801e394:	6022      	str	r2, [r4, #0]
 801e396:	701e      	strb	r6, [r3, #0]
 801e398:	6963      	ldr	r3, [r4, #20]
 801e39a:	3001      	adds	r0, #1
 801e39c:	4283      	cmp	r3, r0
 801e39e:	d004      	beq.n	801e3aa <__swbuf_r+0x62>
 801e3a0:	89a3      	ldrh	r3, [r4, #12]
 801e3a2:	07db      	lsls	r3, r3, #31
 801e3a4:	d506      	bpl.n	801e3b4 <__swbuf_r+0x6c>
 801e3a6:	2e0a      	cmp	r6, #10
 801e3a8:	d104      	bne.n	801e3b4 <__swbuf_r+0x6c>
 801e3aa:	4621      	mov	r1, r4
 801e3ac:	4628      	mov	r0, r5
 801e3ae:	f000 f919 	bl	801e5e4 <_fflush_r>
 801e3b2:	b988      	cbnz	r0, 801e3d8 <__swbuf_r+0x90>
 801e3b4:	4638      	mov	r0, r7
 801e3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e3b8:	4b0a      	ldr	r3, [pc, #40]	; (801e3e4 <__swbuf_r+0x9c>)
 801e3ba:	429c      	cmp	r4, r3
 801e3bc:	d101      	bne.n	801e3c2 <__swbuf_r+0x7a>
 801e3be:	68ac      	ldr	r4, [r5, #8]
 801e3c0:	e7cf      	b.n	801e362 <__swbuf_r+0x1a>
 801e3c2:	4b09      	ldr	r3, [pc, #36]	; (801e3e8 <__swbuf_r+0xa0>)
 801e3c4:	429c      	cmp	r4, r3
 801e3c6:	bf08      	it	eq
 801e3c8:	68ec      	ldreq	r4, [r5, #12]
 801e3ca:	e7ca      	b.n	801e362 <__swbuf_r+0x1a>
 801e3cc:	4621      	mov	r1, r4
 801e3ce:	4628      	mov	r0, r5
 801e3d0:	f000 f80c 	bl	801e3ec <__swsetup_r>
 801e3d4:	2800      	cmp	r0, #0
 801e3d6:	d0cb      	beq.n	801e370 <__swbuf_r+0x28>
 801e3d8:	f04f 37ff 	mov.w	r7, #4294967295
 801e3dc:	e7ea      	b.n	801e3b4 <__swbuf_r+0x6c>
 801e3de:	bf00      	nop
 801e3e0:	08029dcc 	.word	0x08029dcc
 801e3e4:	08029dec 	.word	0x08029dec
 801e3e8:	08029dac 	.word	0x08029dac

0801e3ec <__swsetup_r>:
 801e3ec:	4b32      	ldr	r3, [pc, #200]	; (801e4b8 <__swsetup_r+0xcc>)
 801e3ee:	b570      	push	{r4, r5, r6, lr}
 801e3f0:	681d      	ldr	r5, [r3, #0]
 801e3f2:	4606      	mov	r6, r0
 801e3f4:	460c      	mov	r4, r1
 801e3f6:	b125      	cbz	r5, 801e402 <__swsetup_r+0x16>
 801e3f8:	69ab      	ldr	r3, [r5, #24]
 801e3fa:	b913      	cbnz	r3, 801e402 <__swsetup_r+0x16>
 801e3fc:	4628      	mov	r0, r5
 801e3fe:	f000 f985 	bl	801e70c <__sinit>
 801e402:	4b2e      	ldr	r3, [pc, #184]	; (801e4bc <__swsetup_r+0xd0>)
 801e404:	429c      	cmp	r4, r3
 801e406:	d10f      	bne.n	801e428 <__swsetup_r+0x3c>
 801e408:	686c      	ldr	r4, [r5, #4]
 801e40a:	89a3      	ldrh	r3, [r4, #12]
 801e40c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e410:	0719      	lsls	r1, r3, #28
 801e412:	d42c      	bmi.n	801e46e <__swsetup_r+0x82>
 801e414:	06dd      	lsls	r5, r3, #27
 801e416:	d411      	bmi.n	801e43c <__swsetup_r+0x50>
 801e418:	2309      	movs	r3, #9
 801e41a:	6033      	str	r3, [r6, #0]
 801e41c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e420:	81a3      	strh	r3, [r4, #12]
 801e422:	f04f 30ff 	mov.w	r0, #4294967295
 801e426:	e03e      	b.n	801e4a6 <__swsetup_r+0xba>
 801e428:	4b25      	ldr	r3, [pc, #148]	; (801e4c0 <__swsetup_r+0xd4>)
 801e42a:	429c      	cmp	r4, r3
 801e42c:	d101      	bne.n	801e432 <__swsetup_r+0x46>
 801e42e:	68ac      	ldr	r4, [r5, #8]
 801e430:	e7eb      	b.n	801e40a <__swsetup_r+0x1e>
 801e432:	4b24      	ldr	r3, [pc, #144]	; (801e4c4 <__swsetup_r+0xd8>)
 801e434:	429c      	cmp	r4, r3
 801e436:	bf08      	it	eq
 801e438:	68ec      	ldreq	r4, [r5, #12]
 801e43a:	e7e6      	b.n	801e40a <__swsetup_r+0x1e>
 801e43c:	0758      	lsls	r0, r3, #29
 801e43e:	d512      	bpl.n	801e466 <__swsetup_r+0x7a>
 801e440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e442:	b141      	cbz	r1, 801e456 <__swsetup_r+0x6a>
 801e444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e448:	4299      	cmp	r1, r3
 801e44a:	d002      	beq.n	801e452 <__swsetup_r+0x66>
 801e44c:	4630      	mov	r0, r6
 801e44e:	f000 fa63 	bl	801e918 <_free_r>
 801e452:	2300      	movs	r3, #0
 801e454:	6363      	str	r3, [r4, #52]	; 0x34
 801e456:	89a3      	ldrh	r3, [r4, #12]
 801e458:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e45c:	81a3      	strh	r3, [r4, #12]
 801e45e:	2300      	movs	r3, #0
 801e460:	6063      	str	r3, [r4, #4]
 801e462:	6923      	ldr	r3, [r4, #16]
 801e464:	6023      	str	r3, [r4, #0]
 801e466:	89a3      	ldrh	r3, [r4, #12]
 801e468:	f043 0308 	orr.w	r3, r3, #8
 801e46c:	81a3      	strh	r3, [r4, #12]
 801e46e:	6923      	ldr	r3, [r4, #16]
 801e470:	b94b      	cbnz	r3, 801e486 <__swsetup_r+0x9a>
 801e472:	89a3      	ldrh	r3, [r4, #12]
 801e474:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e47c:	d003      	beq.n	801e486 <__swsetup_r+0x9a>
 801e47e:	4621      	mov	r1, r4
 801e480:	4630      	mov	r0, r6
 801e482:	f000 fa09 	bl	801e898 <__smakebuf_r>
 801e486:	89a0      	ldrh	r0, [r4, #12]
 801e488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e48c:	f010 0301 	ands.w	r3, r0, #1
 801e490:	d00a      	beq.n	801e4a8 <__swsetup_r+0xbc>
 801e492:	2300      	movs	r3, #0
 801e494:	60a3      	str	r3, [r4, #8]
 801e496:	6963      	ldr	r3, [r4, #20]
 801e498:	425b      	negs	r3, r3
 801e49a:	61a3      	str	r3, [r4, #24]
 801e49c:	6923      	ldr	r3, [r4, #16]
 801e49e:	b943      	cbnz	r3, 801e4b2 <__swsetup_r+0xc6>
 801e4a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e4a4:	d1ba      	bne.n	801e41c <__swsetup_r+0x30>
 801e4a6:	bd70      	pop	{r4, r5, r6, pc}
 801e4a8:	0781      	lsls	r1, r0, #30
 801e4aa:	bf58      	it	pl
 801e4ac:	6963      	ldrpl	r3, [r4, #20]
 801e4ae:	60a3      	str	r3, [r4, #8]
 801e4b0:	e7f4      	b.n	801e49c <__swsetup_r+0xb0>
 801e4b2:	2000      	movs	r0, #0
 801e4b4:	e7f7      	b.n	801e4a6 <__swsetup_r+0xba>
 801e4b6:	bf00      	nop
 801e4b8:	200001f0 	.word	0x200001f0
 801e4bc:	08029dcc 	.word	0x08029dcc
 801e4c0:	08029dec 	.word	0x08029dec
 801e4c4:	08029dac 	.word	0x08029dac

0801e4c8 <abort>:
 801e4c8:	b508      	push	{r3, lr}
 801e4ca:	2006      	movs	r0, #6
 801e4cc:	f000 fb3c 	bl	801eb48 <raise>
 801e4d0:	2001      	movs	r0, #1
 801e4d2:	f7f7 ff07 	bl	80162e4 <_exit>
	...

0801e4d8 <__sflush_r>:
 801e4d8:	898a      	ldrh	r2, [r1, #12]
 801e4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4de:	4605      	mov	r5, r0
 801e4e0:	0710      	lsls	r0, r2, #28
 801e4e2:	460c      	mov	r4, r1
 801e4e4:	d458      	bmi.n	801e598 <__sflush_r+0xc0>
 801e4e6:	684b      	ldr	r3, [r1, #4]
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	dc05      	bgt.n	801e4f8 <__sflush_r+0x20>
 801e4ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e4ee:	2b00      	cmp	r3, #0
 801e4f0:	dc02      	bgt.n	801e4f8 <__sflush_r+0x20>
 801e4f2:	2000      	movs	r0, #0
 801e4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e4f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e4fa:	2e00      	cmp	r6, #0
 801e4fc:	d0f9      	beq.n	801e4f2 <__sflush_r+0x1a>
 801e4fe:	2300      	movs	r3, #0
 801e500:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e504:	682f      	ldr	r7, [r5, #0]
 801e506:	602b      	str	r3, [r5, #0]
 801e508:	d032      	beq.n	801e570 <__sflush_r+0x98>
 801e50a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e50c:	89a3      	ldrh	r3, [r4, #12]
 801e50e:	075a      	lsls	r2, r3, #29
 801e510:	d505      	bpl.n	801e51e <__sflush_r+0x46>
 801e512:	6863      	ldr	r3, [r4, #4]
 801e514:	1ac0      	subs	r0, r0, r3
 801e516:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e518:	b10b      	cbz	r3, 801e51e <__sflush_r+0x46>
 801e51a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e51c:	1ac0      	subs	r0, r0, r3
 801e51e:	2300      	movs	r3, #0
 801e520:	4602      	mov	r2, r0
 801e522:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e524:	6a21      	ldr	r1, [r4, #32]
 801e526:	4628      	mov	r0, r5
 801e528:	47b0      	blx	r6
 801e52a:	1c43      	adds	r3, r0, #1
 801e52c:	89a3      	ldrh	r3, [r4, #12]
 801e52e:	d106      	bne.n	801e53e <__sflush_r+0x66>
 801e530:	6829      	ldr	r1, [r5, #0]
 801e532:	291d      	cmp	r1, #29
 801e534:	d82c      	bhi.n	801e590 <__sflush_r+0xb8>
 801e536:	4a2a      	ldr	r2, [pc, #168]	; (801e5e0 <__sflush_r+0x108>)
 801e538:	40ca      	lsrs	r2, r1
 801e53a:	07d6      	lsls	r6, r2, #31
 801e53c:	d528      	bpl.n	801e590 <__sflush_r+0xb8>
 801e53e:	2200      	movs	r2, #0
 801e540:	6062      	str	r2, [r4, #4]
 801e542:	04d9      	lsls	r1, r3, #19
 801e544:	6922      	ldr	r2, [r4, #16]
 801e546:	6022      	str	r2, [r4, #0]
 801e548:	d504      	bpl.n	801e554 <__sflush_r+0x7c>
 801e54a:	1c42      	adds	r2, r0, #1
 801e54c:	d101      	bne.n	801e552 <__sflush_r+0x7a>
 801e54e:	682b      	ldr	r3, [r5, #0]
 801e550:	b903      	cbnz	r3, 801e554 <__sflush_r+0x7c>
 801e552:	6560      	str	r0, [r4, #84]	; 0x54
 801e554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e556:	602f      	str	r7, [r5, #0]
 801e558:	2900      	cmp	r1, #0
 801e55a:	d0ca      	beq.n	801e4f2 <__sflush_r+0x1a>
 801e55c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e560:	4299      	cmp	r1, r3
 801e562:	d002      	beq.n	801e56a <__sflush_r+0x92>
 801e564:	4628      	mov	r0, r5
 801e566:	f000 f9d7 	bl	801e918 <_free_r>
 801e56a:	2000      	movs	r0, #0
 801e56c:	6360      	str	r0, [r4, #52]	; 0x34
 801e56e:	e7c1      	b.n	801e4f4 <__sflush_r+0x1c>
 801e570:	6a21      	ldr	r1, [r4, #32]
 801e572:	2301      	movs	r3, #1
 801e574:	4628      	mov	r0, r5
 801e576:	47b0      	blx	r6
 801e578:	1c41      	adds	r1, r0, #1
 801e57a:	d1c7      	bne.n	801e50c <__sflush_r+0x34>
 801e57c:	682b      	ldr	r3, [r5, #0]
 801e57e:	2b00      	cmp	r3, #0
 801e580:	d0c4      	beq.n	801e50c <__sflush_r+0x34>
 801e582:	2b1d      	cmp	r3, #29
 801e584:	d001      	beq.n	801e58a <__sflush_r+0xb2>
 801e586:	2b16      	cmp	r3, #22
 801e588:	d101      	bne.n	801e58e <__sflush_r+0xb6>
 801e58a:	602f      	str	r7, [r5, #0]
 801e58c:	e7b1      	b.n	801e4f2 <__sflush_r+0x1a>
 801e58e:	89a3      	ldrh	r3, [r4, #12]
 801e590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e594:	81a3      	strh	r3, [r4, #12]
 801e596:	e7ad      	b.n	801e4f4 <__sflush_r+0x1c>
 801e598:	690f      	ldr	r7, [r1, #16]
 801e59a:	2f00      	cmp	r7, #0
 801e59c:	d0a9      	beq.n	801e4f2 <__sflush_r+0x1a>
 801e59e:	0793      	lsls	r3, r2, #30
 801e5a0:	680e      	ldr	r6, [r1, #0]
 801e5a2:	bf08      	it	eq
 801e5a4:	694b      	ldreq	r3, [r1, #20]
 801e5a6:	600f      	str	r7, [r1, #0]
 801e5a8:	bf18      	it	ne
 801e5aa:	2300      	movne	r3, #0
 801e5ac:	eba6 0807 	sub.w	r8, r6, r7
 801e5b0:	608b      	str	r3, [r1, #8]
 801e5b2:	f1b8 0f00 	cmp.w	r8, #0
 801e5b6:	dd9c      	ble.n	801e4f2 <__sflush_r+0x1a>
 801e5b8:	6a21      	ldr	r1, [r4, #32]
 801e5ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e5bc:	4643      	mov	r3, r8
 801e5be:	463a      	mov	r2, r7
 801e5c0:	4628      	mov	r0, r5
 801e5c2:	47b0      	blx	r6
 801e5c4:	2800      	cmp	r0, #0
 801e5c6:	dc06      	bgt.n	801e5d6 <__sflush_r+0xfe>
 801e5c8:	89a3      	ldrh	r3, [r4, #12]
 801e5ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e5ce:	81a3      	strh	r3, [r4, #12]
 801e5d0:	f04f 30ff 	mov.w	r0, #4294967295
 801e5d4:	e78e      	b.n	801e4f4 <__sflush_r+0x1c>
 801e5d6:	4407      	add	r7, r0
 801e5d8:	eba8 0800 	sub.w	r8, r8, r0
 801e5dc:	e7e9      	b.n	801e5b2 <__sflush_r+0xda>
 801e5de:	bf00      	nop
 801e5e0:	20400001 	.word	0x20400001

0801e5e4 <_fflush_r>:
 801e5e4:	b538      	push	{r3, r4, r5, lr}
 801e5e6:	690b      	ldr	r3, [r1, #16]
 801e5e8:	4605      	mov	r5, r0
 801e5ea:	460c      	mov	r4, r1
 801e5ec:	b913      	cbnz	r3, 801e5f4 <_fflush_r+0x10>
 801e5ee:	2500      	movs	r5, #0
 801e5f0:	4628      	mov	r0, r5
 801e5f2:	bd38      	pop	{r3, r4, r5, pc}
 801e5f4:	b118      	cbz	r0, 801e5fe <_fflush_r+0x1a>
 801e5f6:	6983      	ldr	r3, [r0, #24]
 801e5f8:	b90b      	cbnz	r3, 801e5fe <_fflush_r+0x1a>
 801e5fa:	f000 f887 	bl	801e70c <__sinit>
 801e5fe:	4b14      	ldr	r3, [pc, #80]	; (801e650 <_fflush_r+0x6c>)
 801e600:	429c      	cmp	r4, r3
 801e602:	d11b      	bne.n	801e63c <_fflush_r+0x58>
 801e604:	686c      	ldr	r4, [r5, #4]
 801e606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	d0ef      	beq.n	801e5ee <_fflush_r+0xa>
 801e60e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e610:	07d0      	lsls	r0, r2, #31
 801e612:	d404      	bmi.n	801e61e <_fflush_r+0x3a>
 801e614:	0599      	lsls	r1, r3, #22
 801e616:	d402      	bmi.n	801e61e <_fflush_r+0x3a>
 801e618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e61a:	f000 f915 	bl	801e848 <__retarget_lock_acquire_recursive>
 801e61e:	4628      	mov	r0, r5
 801e620:	4621      	mov	r1, r4
 801e622:	f7ff ff59 	bl	801e4d8 <__sflush_r>
 801e626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e628:	07da      	lsls	r2, r3, #31
 801e62a:	4605      	mov	r5, r0
 801e62c:	d4e0      	bmi.n	801e5f0 <_fflush_r+0xc>
 801e62e:	89a3      	ldrh	r3, [r4, #12]
 801e630:	059b      	lsls	r3, r3, #22
 801e632:	d4dd      	bmi.n	801e5f0 <_fflush_r+0xc>
 801e634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e636:	f000 f908 	bl	801e84a <__retarget_lock_release_recursive>
 801e63a:	e7d9      	b.n	801e5f0 <_fflush_r+0xc>
 801e63c:	4b05      	ldr	r3, [pc, #20]	; (801e654 <_fflush_r+0x70>)
 801e63e:	429c      	cmp	r4, r3
 801e640:	d101      	bne.n	801e646 <_fflush_r+0x62>
 801e642:	68ac      	ldr	r4, [r5, #8]
 801e644:	e7df      	b.n	801e606 <_fflush_r+0x22>
 801e646:	4b04      	ldr	r3, [pc, #16]	; (801e658 <_fflush_r+0x74>)
 801e648:	429c      	cmp	r4, r3
 801e64a:	bf08      	it	eq
 801e64c:	68ec      	ldreq	r4, [r5, #12]
 801e64e:	e7da      	b.n	801e606 <_fflush_r+0x22>
 801e650:	08029dcc 	.word	0x08029dcc
 801e654:	08029dec 	.word	0x08029dec
 801e658:	08029dac 	.word	0x08029dac

0801e65c <std>:
 801e65c:	2300      	movs	r3, #0
 801e65e:	b510      	push	{r4, lr}
 801e660:	4604      	mov	r4, r0
 801e662:	e9c0 3300 	strd	r3, r3, [r0]
 801e666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e66a:	6083      	str	r3, [r0, #8]
 801e66c:	8181      	strh	r1, [r0, #12]
 801e66e:	6643      	str	r3, [r0, #100]	; 0x64
 801e670:	81c2      	strh	r2, [r0, #14]
 801e672:	6183      	str	r3, [r0, #24]
 801e674:	4619      	mov	r1, r3
 801e676:	2208      	movs	r2, #8
 801e678:	305c      	adds	r0, #92	; 0x5c
 801e67a:	f7ff fb6f 	bl	801dd5c <memset>
 801e67e:	4b05      	ldr	r3, [pc, #20]	; (801e694 <std+0x38>)
 801e680:	6263      	str	r3, [r4, #36]	; 0x24
 801e682:	4b05      	ldr	r3, [pc, #20]	; (801e698 <std+0x3c>)
 801e684:	62a3      	str	r3, [r4, #40]	; 0x28
 801e686:	4b05      	ldr	r3, [pc, #20]	; (801e69c <std+0x40>)
 801e688:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e68a:	4b05      	ldr	r3, [pc, #20]	; (801e6a0 <std+0x44>)
 801e68c:	6224      	str	r4, [r4, #32]
 801e68e:	6323      	str	r3, [r4, #48]	; 0x30
 801e690:	bd10      	pop	{r4, pc}
 801e692:	bf00      	nop
 801e694:	0801eb81 	.word	0x0801eb81
 801e698:	0801eba3 	.word	0x0801eba3
 801e69c:	0801ebdb 	.word	0x0801ebdb
 801e6a0:	0801ebff 	.word	0x0801ebff

0801e6a4 <_cleanup_r>:
 801e6a4:	4901      	ldr	r1, [pc, #4]	; (801e6ac <_cleanup_r+0x8>)
 801e6a6:	f000 b8af 	b.w	801e808 <_fwalk_reent>
 801e6aa:	bf00      	nop
 801e6ac:	0801e5e5 	.word	0x0801e5e5

0801e6b0 <__sfmoreglue>:
 801e6b0:	b570      	push	{r4, r5, r6, lr}
 801e6b2:	2268      	movs	r2, #104	; 0x68
 801e6b4:	1e4d      	subs	r5, r1, #1
 801e6b6:	4355      	muls	r5, r2
 801e6b8:	460e      	mov	r6, r1
 801e6ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e6be:	f000 f997 	bl	801e9f0 <_malloc_r>
 801e6c2:	4604      	mov	r4, r0
 801e6c4:	b140      	cbz	r0, 801e6d8 <__sfmoreglue+0x28>
 801e6c6:	2100      	movs	r1, #0
 801e6c8:	e9c0 1600 	strd	r1, r6, [r0]
 801e6cc:	300c      	adds	r0, #12
 801e6ce:	60a0      	str	r0, [r4, #8]
 801e6d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e6d4:	f7ff fb42 	bl	801dd5c <memset>
 801e6d8:	4620      	mov	r0, r4
 801e6da:	bd70      	pop	{r4, r5, r6, pc}

0801e6dc <__sfp_lock_acquire>:
 801e6dc:	4801      	ldr	r0, [pc, #4]	; (801e6e4 <__sfp_lock_acquire+0x8>)
 801e6de:	f000 b8b3 	b.w	801e848 <__retarget_lock_acquire_recursive>
 801e6e2:	bf00      	nop
 801e6e4:	20000801 	.word	0x20000801

0801e6e8 <__sfp_lock_release>:
 801e6e8:	4801      	ldr	r0, [pc, #4]	; (801e6f0 <__sfp_lock_release+0x8>)
 801e6ea:	f000 b8ae 	b.w	801e84a <__retarget_lock_release_recursive>
 801e6ee:	bf00      	nop
 801e6f0:	20000801 	.word	0x20000801

0801e6f4 <__sinit_lock_acquire>:
 801e6f4:	4801      	ldr	r0, [pc, #4]	; (801e6fc <__sinit_lock_acquire+0x8>)
 801e6f6:	f000 b8a7 	b.w	801e848 <__retarget_lock_acquire_recursive>
 801e6fa:	bf00      	nop
 801e6fc:	20000802 	.word	0x20000802

0801e700 <__sinit_lock_release>:
 801e700:	4801      	ldr	r0, [pc, #4]	; (801e708 <__sinit_lock_release+0x8>)
 801e702:	f000 b8a2 	b.w	801e84a <__retarget_lock_release_recursive>
 801e706:	bf00      	nop
 801e708:	20000802 	.word	0x20000802

0801e70c <__sinit>:
 801e70c:	b510      	push	{r4, lr}
 801e70e:	4604      	mov	r4, r0
 801e710:	f7ff fff0 	bl	801e6f4 <__sinit_lock_acquire>
 801e714:	69a3      	ldr	r3, [r4, #24]
 801e716:	b11b      	cbz	r3, 801e720 <__sinit+0x14>
 801e718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e71c:	f7ff bff0 	b.w	801e700 <__sinit_lock_release>
 801e720:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e724:	6523      	str	r3, [r4, #80]	; 0x50
 801e726:	4b13      	ldr	r3, [pc, #76]	; (801e774 <__sinit+0x68>)
 801e728:	4a13      	ldr	r2, [pc, #76]	; (801e778 <__sinit+0x6c>)
 801e72a:	681b      	ldr	r3, [r3, #0]
 801e72c:	62a2      	str	r2, [r4, #40]	; 0x28
 801e72e:	42a3      	cmp	r3, r4
 801e730:	bf04      	itt	eq
 801e732:	2301      	moveq	r3, #1
 801e734:	61a3      	streq	r3, [r4, #24]
 801e736:	4620      	mov	r0, r4
 801e738:	f000 f820 	bl	801e77c <__sfp>
 801e73c:	6060      	str	r0, [r4, #4]
 801e73e:	4620      	mov	r0, r4
 801e740:	f000 f81c 	bl	801e77c <__sfp>
 801e744:	60a0      	str	r0, [r4, #8]
 801e746:	4620      	mov	r0, r4
 801e748:	f000 f818 	bl	801e77c <__sfp>
 801e74c:	2200      	movs	r2, #0
 801e74e:	60e0      	str	r0, [r4, #12]
 801e750:	2104      	movs	r1, #4
 801e752:	6860      	ldr	r0, [r4, #4]
 801e754:	f7ff ff82 	bl	801e65c <std>
 801e758:	68a0      	ldr	r0, [r4, #8]
 801e75a:	2201      	movs	r2, #1
 801e75c:	2109      	movs	r1, #9
 801e75e:	f7ff ff7d 	bl	801e65c <std>
 801e762:	68e0      	ldr	r0, [r4, #12]
 801e764:	2202      	movs	r2, #2
 801e766:	2112      	movs	r1, #18
 801e768:	f7ff ff78 	bl	801e65c <std>
 801e76c:	2301      	movs	r3, #1
 801e76e:	61a3      	str	r3, [r4, #24]
 801e770:	e7d2      	b.n	801e718 <__sinit+0xc>
 801e772:	bf00      	nop
 801e774:	08029d74 	.word	0x08029d74
 801e778:	0801e6a5 	.word	0x0801e6a5

0801e77c <__sfp>:
 801e77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e77e:	4607      	mov	r7, r0
 801e780:	f7ff ffac 	bl	801e6dc <__sfp_lock_acquire>
 801e784:	4b1e      	ldr	r3, [pc, #120]	; (801e800 <__sfp+0x84>)
 801e786:	681e      	ldr	r6, [r3, #0]
 801e788:	69b3      	ldr	r3, [r6, #24]
 801e78a:	b913      	cbnz	r3, 801e792 <__sfp+0x16>
 801e78c:	4630      	mov	r0, r6
 801e78e:	f7ff ffbd 	bl	801e70c <__sinit>
 801e792:	3648      	adds	r6, #72	; 0x48
 801e794:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e798:	3b01      	subs	r3, #1
 801e79a:	d503      	bpl.n	801e7a4 <__sfp+0x28>
 801e79c:	6833      	ldr	r3, [r6, #0]
 801e79e:	b30b      	cbz	r3, 801e7e4 <__sfp+0x68>
 801e7a0:	6836      	ldr	r6, [r6, #0]
 801e7a2:	e7f7      	b.n	801e794 <__sfp+0x18>
 801e7a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e7a8:	b9d5      	cbnz	r5, 801e7e0 <__sfp+0x64>
 801e7aa:	4b16      	ldr	r3, [pc, #88]	; (801e804 <__sfp+0x88>)
 801e7ac:	60e3      	str	r3, [r4, #12]
 801e7ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e7b2:	6665      	str	r5, [r4, #100]	; 0x64
 801e7b4:	f000 f847 	bl	801e846 <__retarget_lock_init_recursive>
 801e7b8:	f7ff ff96 	bl	801e6e8 <__sfp_lock_release>
 801e7bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e7c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e7c4:	6025      	str	r5, [r4, #0]
 801e7c6:	61a5      	str	r5, [r4, #24]
 801e7c8:	2208      	movs	r2, #8
 801e7ca:	4629      	mov	r1, r5
 801e7cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e7d0:	f7ff fac4 	bl	801dd5c <memset>
 801e7d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e7d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e7dc:	4620      	mov	r0, r4
 801e7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7e0:	3468      	adds	r4, #104	; 0x68
 801e7e2:	e7d9      	b.n	801e798 <__sfp+0x1c>
 801e7e4:	2104      	movs	r1, #4
 801e7e6:	4638      	mov	r0, r7
 801e7e8:	f7ff ff62 	bl	801e6b0 <__sfmoreglue>
 801e7ec:	4604      	mov	r4, r0
 801e7ee:	6030      	str	r0, [r6, #0]
 801e7f0:	2800      	cmp	r0, #0
 801e7f2:	d1d5      	bne.n	801e7a0 <__sfp+0x24>
 801e7f4:	f7ff ff78 	bl	801e6e8 <__sfp_lock_release>
 801e7f8:	230c      	movs	r3, #12
 801e7fa:	603b      	str	r3, [r7, #0]
 801e7fc:	e7ee      	b.n	801e7dc <__sfp+0x60>
 801e7fe:	bf00      	nop
 801e800:	08029d74 	.word	0x08029d74
 801e804:	ffff0001 	.word	0xffff0001

0801e808 <_fwalk_reent>:
 801e808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e80c:	4606      	mov	r6, r0
 801e80e:	4688      	mov	r8, r1
 801e810:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e814:	2700      	movs	r7, #0
 801e816:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e81a:	f1b9 0901 	subs.w	r9, r9, #1
 801e81e:	d505      	bpl.n	801e82c <_fwalk_reent+0x24>
 801e820:	6824      	ldr	r4, [r4, #0]
 801e822:	2c00      	cmp	r4, #0
 801e824:	d1f7      	bne.n	801e816 <_fwalk_reent+0xe>
 801e826:	4638      	mov	r0, r7
 801e828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e82c:	89ab      	ldrh	r3, [r5, #12]
 801e82e:	2b01      	cmp	r3, #1
 801e830:	d907      	bls.n	801e842 <_fwalk_reent+0x3a>
 801e832:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e836:	3301      	adds	r3, #1
 801e838:	d003      	beq.n	801e842 <_fwalk_reent+0x3a>
 801e83a:	4629      	mov	r1, r5
 801e83c:	4630      	mov	r0, r6
 801e83e:	47c0      	blx	r8
 801e840:	4307      	orrs	r7, r0
 801e842:	3568      	adds	r5, #104	; 0x68
 801e844:	e7e9      	b.n	801e81a <_fwalk_reent+0x12>

0801e846 <__retarget_lock_init_recursive>:
 801e846:	4770      	bx	lr

0801e848 <__retarget_lock_acquire_recursive>:
 801e848:	4770      	bx	lr

0801e84a <__retarget_lock_release_recursive>:
 801e84a:	4770      	bx	lr

0801e84c <__swhatbuf_r>:
 801e84c:	b570      	push	{r4, r5, r6, lr}
 801e84e:	460e      	mov	r6, r1
 801e850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e854:	2900      	cmp	r1, #0
 801e856:	b096      	sub	sp, #88	; 0x58
 801e858:	4614      	mov	r4, r2
 801e85a:	461d      	mov	r5, r3
 801e85c:	da08      	bge.n	801e870 <__swhatbuf_r+0x24>
 801e85e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e862:	2200      	movs	r2, #0
 801e864:	602a      	str	r2, [r5, #0]
 801e866:	061a      	lsls	r2, r3, #24
 801e868:	d410      	bmi.n	801e88c <__swhatbuf_r+0x40>
 801e86a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e86e:	e00e      	b.n	801e88e <__swhatbuf_r+0x42>
 801e870:	466a      	mov	r2, sp
 801e872:	f000 f9eb 	bl	801ec4c <_fstat_r>
 801e876:	2800      	cmp	r0, #0
 801e878:	dbf1      	blt.n	801e85e <__swhatbuf_r+0x12>
 801e87a:	9a01      	ldr	r2, [sp, #4]
 801e87c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e880:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e884:	425a      	negs	r2, r3
 801e886:	415a      	adcs	r2, r3
 801e888:	602a      	str	r2, [r5, #0]
 801e88a:	e7ee      	b.n	801e86a <__swhatbuf_r+0x1e>
 801e88c:	2340      	movs	r3, #64	; 0x40
 801e88e:	2000      	movs	r0, #0
 801e890:	6023      	str	r3, [r4, #0]
 801e892:	b016      	add	sp, #88	; 0x58
 801e894:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e898 <__smakebuf_r>:
 801e898:	898b      	ldrh	r3, [r1, #12]
 801e89a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e89c:	079d      	lsls	r5, r3, #30
 801e89e:	4606      	mov	r6, r0
 801e8a0:	460c      	mov	r4, r1
 801e8a2:	d507      	bpl.n	801e8b4 <__smakebuf_r+0x1c>
 801e8a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e8a8:	6023      	str	r3, [r4, #0]
 801e8aa:	6123      	str	r3, [r4, #16]
 801e8ac:	2301      	movs	r3, #1
 801e8ae:	6163      	str	r3, [r4, #20]
 801e8b0:	b002      	add	sp, #8
 801e8b2:	bd70      	pop	{r4, r5, r6, pc}
 801e8b4:	ab01      	add	r3, sp, #4
 801e8b6:	466a      	mov	r2, sp
 801e8b8:	f7ff ffc8 	bl	801e84c <__swhatbuf_r>
 801e8bc:	9900      	ldr	r1, [sp, #0]
 801e8be:	4605      	mov	r5, r0
 801e8c0:	4630      	mov	r0, r6
 801e8c2:	f000 f895 	bl	801e9f0 <_malloc_r>
 801e8c6:	b948      	cbnz	r0, 801e8dc <__smakebuf_r+0x44>
 801e8c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e8cc:	059a      	lsls	r2, r3, #22
 801e8ce:	d4ef      	bmi.n	801e8b0 <__smakebuf_r+0x18>
 801e8d0:	f023 0303 	bic.w	r3, r3, #3
 801e8d4:	f043 0302 	orr.w	r3, r3, #2
 801e8d8:	81a3      	strh	r3, [r4, #12]
 801e8da:	e7e3      	b.n	801e8a4 <__smakebuf_r+0xc>
 801e8dc:	4b0d      	ldr	r3, [pc, #52]	; (801e914 <__smakebuf_r+0x7c>)
 801e8de:	62b3      	str	r3, [r6, #40]	; 0x28
 801e8e0:	89a3      	ldrh	r3, [r4, #12]
 801e8e2:	6020      	str	r0, [r4, #0]
 801e8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e8e8:	81a3      	strh	r3, [r4, #12]
 801e8ea:	9b00      	ldr	r3, [sp, #0]
 801e8ec:	6163      	str	r3, [r4, #20]
 801e8ee:	9b01      	ldr	r3, [sp, #4]
 801e8f0:	6120      	str	r0, [r4, #16]
 801e8f2:	b15b      	cbz	r3, 801e90c <__smakebuf_r+0x74>
 801e8f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e8f8:	4630      	mov	r0, r6
 801e8fa:	f000 f9b9 	bl	801ec70 <_isatty_r>
 801e8fe:	b128      	cbz	r0, 801e90c <__smakebuf_r+0x74>
 801e900:	89a3      	ldrh	r3, [r4, #12]
 801e902:	f023 0303 	bic.w	r3, r3, #3
 801e906:	f043 0301 	orr.w	r3, r3, #1
 801e90a:	81a3      	strh	r3, [r4, #12]
 801e90c:	89a0      	ldrh	r0, [r4, #12]
 801e90e:	4305      	orrs	r5, r0
 801e910:	81a5      	strh	r5, [r4, #12]
 801e912:	e7cd      	b.n	801e8b0 <__smakebuf_r+0x18>
 801e914:	0801e6a5 	.word	0x0801e6a5

0801e918 <_free_r>:
 801e918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e91a:	2900      	cmp	r1, #0
 801e91c:	d044      	beq.n	801e9a8 <_free_r+0x90>
 801e91e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e922:	9001      	str	r0, [sp, #4]
 801e924:	2b00      	cmp	r3, #0
 801e926:	f1a1 0404 	sub.w	r4, r1, #4
 801e92a:	bfb8      	it	lt
 801e92c:	18e4      	addlt	r4, r4, r3
 801e92e:	f000 f9c1 	bl	801ecb4 <__malloc_lock>
 801e932:	4a1e      	ldr	r2, [pc, #120]	; (801e9ac <_free_r+0x94>)
 801e934:	9801      	ldr	r0, [sp, #4]
 801e936:	6813      	ldr	r3, [r2, #0]
 801e938:	b933      	cbnz	r3, 801e948 <_free_r+0x30>
 801e93a:	6063      	str	r3, [r4, #4]
 801e93c:	6014      	str	r4, [r2, #0]
 801e93e:	b003      	add	sp, #12
 801e940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e944:	f000 b9bc 	b.w	801ecc0 <__malloc_unlock>
 801e948:	42a3      	cmp	r3, r4
 801e94a:	d908      	bls.n	801e95e <_free_r+0x46>
 801e94c:	6825      	ldr	r5, [r4, #0]
 801e94e:	1961      	adds	r1, r4, r5
 801e950:	428b      	cmp	r3, r1
 801e952:	bf01      	itttt	eq
 801e954:	6819      	ldreq	r1, [r3, #0]
 801e956:	685b      	ldreq	r3, [r3, #4]
 801e958:	1949      	addeq	r1, r1, r5
 801e95a:	6021      	streq	r1, [r4, #0]
 801e95c:	e7ed      	b.n	801e93a <_free_r+0x22>
 801e95e:	461a      	mov	r2, r3
 801e960:	685b      	ldr	r3, [r3, #4]
 801e962:	b10b      	cbz	r3, 801e968 <_free_r+0x50>
 801e964:	42a3      	cmp	r3, r4
 801e966:	d9fa      	bls.n	801e95e <_free_r+0x46>
 801e968:	6811      	ldr	r1, [r2, #0]
 801e96a:	1855      	adds	r5, r2, r1
 801e96c:	42a5      	cmp	r5, r4
 801e96e:	d10b      	bne.n	801e988 <_free_r+0x70>
 801e970:	6824      	ldr	r4, [r4, #0]
 801e972:	4421      	add	r1, r4
 801e974:	1854      	adds	r4, r2, r1
 801e976:	42a3      	cmp	r3, r4
 801e978:	6011      	str	r1, [r2, #0]
 801e97a:	d1e0      	bne.n	801e93e <_free_r+0x26>
 801e97c:	681c      	ldr	r4, [r3, #0]
 801e97e:	685b      	ldr	r3, [r3, #4]
 801e980:	6053      	str	r3, [r2, #4]
 801e982:	4421      	add	r1, r4
 801e984:	6011      	str	r1, [r2, #0]
 801e986:	e7da      	b.n	801e93e <_free_r+0x26>
 801e988:	d902      	bls.n	801e990 <_free_r+0x78>
 801e98a:	230c      	movs	r3, #12
 801e98c:	6003      	str	r3, [r0, #0]
 801e98e:	e7d6      	b.n	801e93e <_free_r+0x26>
 801e990:	6825      	ldr	r5, [r4, #0]
 801e992:	1961      	adds	r1, r4, r5
 801e994:	428b      	cmp	r3, r1
 801e996:	bf04      	itt	eq
 801e998:	6819      	ldreq	r1, [r3, #0]
 801e99a:	685b      	ldreq	r3, [r3, #4]
 801e99c:	6063      	str	r3, [r4, #4]
 801e99e:	bf04      	itt	eq
 801e9a0:	1949      	addeq	r1, r1, r5
 801e9a2:	6021      	streq	r1, [r4, #0]
 801e9a4:	6054      	str	r4, [r2, #4]
 801e9a6:	e7ca      	b.n	801e93e <_free_r+0x26>
 801e9a8:	b003      	add	sp, #12
 801e9aa:	bd30      	pop	{r4, r5, pc}
 801e9ac:	20000804 	.word	0x20000804

0801e9b0 <sbrk_aligned>:
 801e9b0:	b570      	push	{r4, r5, r6, lr}
 801e9b2:	4e0e      	ldr	r6, [pc, #56]	; (801e9ec <sbrk_aligned+0x3c>)
 801e9b4:	460c      	mov	r4, r1
 801e9b6:	6831      	ldr	r1, [r6, #0]
 801e9b8:	4605      	mov	r5, r0
 801e9ba:	b911      	cbnz	r1, 801e9c2 <sbrk_aligned+0x12>
 801e9bc:	f000 f88c 	bl	801ead8 <_sbrk_r>
 801e9c0:	6030      	str	r0, [r6, #0]
 801e9c2:	4621      	mov	r1, r4
 801e9c4:	4628      	mov	r0, r5
 801e9c6:	f000 f887 	bl	801ead8 <_sbrk_r>
 801e9ca:	1c43      	adds	r3, r0, #1
 801e9cc:	d00a      	beq.n	801e9e4 <sbrk_aligned+0x34>
 801e9ce:	1cc4      	adds	r4, r0, #3
 801e9d0:	f024 0403 	bic.w	r4, r4, #3
 801e9d4:	42a0      	cmp	r0, r4
 801e9d6:	d007      	beq.n	801e9e8 <sbrk_aligned+0x38>
 801e9d8:	1a21      	subs	r1, r4, r0
 801e9da:	4628      	mov	r0, r5
 801e9dc:	f000 f87c 	bl	801ead8 <_sbrk_r>
 801e9e0:	3001      	adds	r0, #1
 801e9e2:	d101      	bne.n	801e9e8 <sbrk_aligned+0x38>
 801e9e4:	f04f 34ff 	mov.w	r4, #4294967295
 801e9e8:	4620      	mov	r0, r4
 801e9ea:	bd70      	pop	{r4, r5, r6, pc}
 801e9ec:	20000808 	.word	0x20000808

0801e9f0 <_malloc_r>:
 801e9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9f4:	1ccd      	adds	r5, r1, #3
 801e9f6:	f025 0503 	bic.w	r5, r5, #3
 801e9fa:	3508      	adds	r5, #8
 801e9fc:	2d0c      	cmp	r5, #12
 801e9fe:	bf38      	it	cc
 801ea00:	250c      	movcc	r5, #12
 801ea02:	2d00      	cmp	r5, #0
 801ea04:	4607      	mov	r7, r0
 801ea06:	db01      	blt.n	801ea0c <_malloc_r+0x1c>
 801ea08:	42a9      	cmp	r1, r5
 801ea0a:	d905      	bls.n	801ea18 <_malloc_r+0x28>
 801ea0c:	230c      	movs	r3, #12
 801ea0e:	603b      	str	r3, [r7, #0]
 801ea10:	2600      	movs	r6, #0
 801ea12:	4630      	mov	r0, r6
 801ea14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea18:	4e2e      	ldr	r6, [pc, #184]	; (801ead4 <_malloc_r+0xe4>)
 801ea1a:	f000 f94b 	bl	801ecb4 <__malloc_lock>
 801ea1e:	6833      	ldr	r3, [r6, #0]
 801ea20:	461c      	mov	r4, r3
 801ea22:	bb34      	cbnz	r4, 801ea72 <_malloc_r+0x82>
 801ea24:	4629      	mov	r1, r5
 801ea26:	4638      	mov	r0, r7
 801ea28:	f7ff ffc2 	bl	801e9b0 <sbrk_aligned>
 801ea2c:	1c43      	adds	r3, r0, #1
 801ea2e:	4604      	mov	r4, r0
 801ea30:	d14d      	bne.n	801eace <_malloc_r+0xde>
 801ea32:	6834      	ldr	r4, [r6, #0]
 801ea34:	4626      	mov	r6, r4
 801ea36:	2e00      	cmp	r6, #0
 801ea38:	d140      	bne.n	801eabc <_malloc_r+0xcc>
 801ea3a:	6823      	ldr	r3, [r4, #0]
 801ea3c:	4631      	mov	r1, r6
 801ea3e:	4638      	mov	r0, r7
 801ea40:	eb04 0803 	add.w	r8, r4, r3
 801ea44:	f000 f848 	bl	801ead8 <_sbrk_r>
 801ea48:	4580      	cmp	r8, r0
 801ea4a:	d13a      	bne.n	801eac2 <_malloc_r+0xd2>
 801ea4c:	6821      	ldr	r1, [r4, #0]
 801ea4e:	3503      	adds	r5, #3
 801ea50:	1a6d      	subs	r5, r5, r1
 801ea52:	f025 0503 	bic.w	r5, r5, #3
 801ea56:	3508      	adds	r5, #8
 801ea58:	2d0c      	cmp	r5, #12
 801ea5a:	bf38      	it	cc
 801ea5c:	250c      	movcc	r5, #12
 801ea5e:	4629      	mov	r1, r5
 801ea60:	4638      	mov	r0, r7
 801ea62:	f7ff ffa5 	bl	801e9b0 <sbrk_aligned>
 801ea66:	3001      	adds	r0, #1
 801ea68:	d02b      	beq.n	801eac2 <_malloc_r+0xd2>
 801ea6a:	6823      	ldr	r3, [r4, #0]
 801ea6c:	442b      	add	r3, r5
 801ea6e:	6023      	str	r3, [r4, #0]
 801ea70:	e00e      	b.n	801ea90 <_malloc_r+0xa0>
 801ea72:	6822      	ldr	r2, [r4, #0]
 801ea74:	1b52      	subs	r2, r2, r5
 801ea76:	d41e      	bmi.n	801eab6 <_malloc_r+0xc6>
 801ea78:	2a0b      	cmp	r2, #11
 801ea7a:	d916      	bls.n	801eaaa <_malloc_r+0xba>
 801ea7c:	1961      	adds	r1, r4, r5
 801ea7e:	42a3      	cmp	r3, r4
 801ea80:	6025      	str	r5, [r4, #0]
 801ea82:	bf18      	it	ne
 801ea84:	6059      	strne	r1, [r3, #4]
 801ea86:	6863      	ldr	r3, [r4, #4]
 801ea88:	bf08      	it	eq
 801ea8a:	6031      	streq	r1, [r6, #0]
 801ea8c:	5162      	str	r2, [r4, r5]
 801ea8e:	604b      	str	r3, [r1, #4]
 801ea90:	4638      	mov	r0, r7
 801ea92:	f104 060b 	add.w	r6, r4, #11
 801ea96:	f000 f913 	bl	801ecc0 <__malloc_unlock>
 801ea9a:	f026 0607 	bic.w	r6, r6, #7
 801ea9e:	1d23      	adds	r3, r4, #4
 801eaa0:	1af2      	subs	r2, r6, r3
 801eaa2:	d0b6      	beq.n	801ea12 <_malloc_r+0x22>
 801eaa4:	1b9b      	subs	r3, r3, r6
 801eaa6:	50a3      	str	r3, [r4, r2]
 801eaa8:	e7b3      	b.n	801ea12 <_malloc_r+0x22>
 801eaaa:	6862      	ldr	r2, [r4, #4]
 801eaac:	42a3      	cmp	r3, r4
 801eaae:	bf0c      	ite	eq
 801eab0:	6032      	streq	r2, [r6, #0]
 801eab2:	605a      	strne	r2, [r3, #4]
 801eab4:	e7ec      	b.n	801ea90 <_malloc_r+0xa0>
 801eab6:	4623      	mov	r3, r4
 801eab8:	6864      	ldr	r4, [r4, #4]
 801eaba:	e7b2      	b.n	801ea22 <_malloc_r+0x32>
 801eabc:	4634      	mov	r4, r6
 801eabe:	6876      	ldr	r6, [r6, #4]
 801eac0:	e7b9      	b.n	801ea36 <_malloc_r+0x46>
 801eac2:	230c      	movs	r3, #12
 801eac4:	603b      	str	r3, [r7, #0]
 801eac6:	4638      	mov	r0, r7
 801eac8:	f000 f8fa 	bl	801ecc0 <__malloc_unlock>
 801eacc:	e7a1      	b.n	801ea12 <_malloc_r+0x22>
 801eace:	6025      	str	r5, [r4, #0]
 801ead0:	e7de      	b.n	801ea90 <_malloc_r+0xa0>
 801ead2:	bf00      	nop
 801ead4:	20000804 	.word	0x20000804

0801ead8 <_sbrk_r>:
 801ead8:	b538      	push	{r3, r4, r5, lr}
 801eada:	4d06      	ldr	r5, [pc, #24]	; (801eaf4 <_sbrk_r+0x1c>)
 801eadc:	2300      	movs	r3, #0
 801eade:	4604      	mov	r4, r0
 801eae0:	4608      	mov	r0, r1
 801eae2:	602b      	str	r3, [r5, #0]
 801eae4:	f7f7 fc76 	bl	80163d4 <_sbrk>
 801eae8:	1c43      	adds	r3, r0, #1
 801eaea:	d102      	bne.n	801eaf2 <_sbrk_r+0x1a>
 801eaec:	682b      	ldr	r3, [r5, #0]
 801eaee:	b103      	cbz	r3, 801eaf2 <_sbrk_r+0x1a>
 801eaf0:	6023      	str	r3, [r4, #0]
 801eaf2:	bd38      	pop	{r3, r4, r5, pc}
 801eaf4:	2000080c 	.word	0x2000080c

0801eaf8 <_raise_r>:
 801eaf8:	291f      	cmp	r1, #31
 801eafa:	b538      	push	{r3, r4, r5, lr}
 801eafc:	4604      	mov	r4, r0
 801eafe:	460d      	mov	r5, r1
 801eb00:	d904      	bls.n	801eb0c <_raise_r+0x14>
 801eb02:	2316      	movs	r3, #22
 801eb04:	6003      	str	r3, [r0, #0]
 801eb06:	f04f 30ff 	mov.w	r0, #4294967295
 801eb0a:	bd38      	pop	{r3, r4, r5, pc}
 801eb0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801eb0e:	b112      	cbz	r2, 801eb16 <_raise_r+0x1e>
 801eb10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801eb14:	b94b      	cbnz	r3, 801eb2a <_raise_r+0x32>
 801eb16:	4620      	mov	r0, r4
 801eb18:	f000 f830 	bl	801eb7c <_getpid_r>
 801eb1c:	462a      	mov	r2, r5
 801eb1e:	4601      	mov	r1, r0
 801eb20:	4620      	mov	r0, r4
 801eb22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eb26:	f000 b817 	b.w	801eb58 <_kill_r>
 801eb2a:	2b01      	cmp	r3, #1
 801eb2c:	d00a      	beq.n	801eb44 <_raise_r+0x4c>
 801eb2e:	1c59      	adds	r1, r3, #1
 801eb30:	d103      	bne.n	801eb3a <_raise_r+0x42>
 801eb32:	2316      	movs	r3, #22
 801eb34:	6003      	str	r3, [r0, #0]
 801eb36:	2001      	movs	r0, #1
 801eb38:	e7e7      	b.n	801eb0a <_raise_r+0x12>
 801eb3a:	2400      	movs	r4, #0
 801eb3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801eb40:	4628      	mov	r0, r5
 801eb42:	4798      	blx	r3
 801eb44:	2000      	movs	r0, #0
 801eb46:	e7e0      	b.n	801eb0a <_raise_r+0x12>

0801eb48 <raise>:
 801eb48:	4b02      	ldr	r3, [pc, #8]	; (801eb54 <raise+0xc>)
 801eb4a:	4601      	mov	r1, r0
 801eb4c:	6818      	ldr	r0, [r3, #0]
 801eb4e:	f7ff bfd3 	b.w	801eaf8 <_raise_r>
 801eb52:	bf00      	nop
 801eb54:	200001f0 	.word	0x200001f0

0801eb58 <_kill_r>:
 801eb58:	b538      	push	{r3, r4, r5, lr}
 801eb5a:	4d07      	ldr	r5, [pc, #28]	; (801eb78 <_kill_r+0x20>)
 801eb5c:	2300      	movs	r3, #0
 801eb5e:	4604      	mov	r4, r0
 801eb60:	4608      	mov	r0, r1
 801eb62:	4611      	mov	r1, r2
 801eb64:	602b      	str	r3, [r5, #0]
 801eb66:	f7f7 fbad 	bl	80162c4 <_kill>
 801eb6a:	1c43      	adds	r3, r0, #1
 801eb6c:	d102      	bne.n	801eb74 <_kill_r+0x1c>
 801eb6e:	682b      	ldr	r3, [r5, #0]
 801eb70:	b103      	cbz	r3, 801eb74 <_kill_r+0x1c>
 801eb72:	6023      	str	r3, [r4, #0]
 801eb74:	bd38      	pop	{r3, r4, r5, pc}
 801eb76:	bf00      	nop
 801eb78:	2000080c 	.word	0x2000080c

0801eb7c <_getpid_r>:
 801eb7c:	f7f7 bb9a 	b.w	80162b4 <_getpid>

0801eb80 <__sread>:
 801eb80:	b510      	push	{r4, lr}
 801eb82:	460c      	mov	r4, r1
 801eb84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb88:	f000 f8a0 	bl	801eccc <_read_r>
 801eb8c:	2800      	cmp	r0, #0
 801eb8e:	bfab      	itete	ge
 801eb90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801eb92:	89a3      	ldrhlt	r3, [r4, #12]
 801eb94:	181b      	addge	r3, r3, r0
 801eb96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801eb9a:	bfac      	ite	ge
 801eb9c:	6563      	strge	r3, [r4, #84]	; 0x54
 801eb9e:	81a3      	strhlt	r3, [r4, #12]
 801eba0:	bd10      	pop	{r4, pc}

0801eba2 <__swrite>:
 801eba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eba6:	461f      	mov	r7, r3
 801eba8:	898b      	ldrh	r3, [r1, #12]
 801ebaa:	05db      	lsls	r3, r3, #23
 801ebac:	4605      	mov	r5, r0
 801ebae:	460c      	mov	r4, r1
 801ebb0:	4616      	mov	r6, r2
 801ebb2:	d505      	bpl.n	801ebc0 <__swrite+0x1e>
 801ebb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebb8:	2302      	movs	r3, #2
 801ebba:	2200      	movs	r2, #0
 801ebbc:	f000 f868 	bl	801ec90 <_lseek_r>
 801ebc0:	89a3      	ldrh	r3, [r4, #12]
 801ebc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ebc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ebca:	81a3      	strh	r3, [r4, #12]
 801ebcc:	4632      	mov	r2, r6
 801ebce:	463b      	mov	r3, r7
 801ebd0:	4628      	mov	r0, r5
 801ebd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ebd6:	f000 b817 	b.w	801ec08 <_write_r>

0801ebda <__sseek>:
 801ebda:	b510      	push	{r4, lr}
 801ebdc:	460c      	mov	r4, r1
 801ebde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebe2:	f000 f855 	bl	801ec90 <_lseek_r>
 801ebe6:	1c43      	adds	r3, r0, #1
 801ebe8:	89a3      	ldrh	r3, [r4, #12]
 801ebea:	bf15      	itete	ne
 801ebec:	6560      	strne	r0, [r4, #84]	; 0x54
 801ebee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ebf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ebf6:	81a3      	strheq	r3, [r4, #12]
 801ebf8:	bf18      	it	ne
 801ebfa:	81a3      	strhne	r3, [r4, #12]
 801ebfc:	bd10      	pop	{r4, pc}

0801ebfe <__sclose>:
 801ebfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec02:	f000 b813 	b.w	801ec2c <_close_r>
	...

0801ec08 <_write_r>:
 801ec08:	b538      	push	{r3, r4, r5, lr}
 801ec0a:	4d07      	ldr	r5, [pc, #28]	; (801ec28 <_write_r+0x20>)
 801ec0c:	4604      	mov	r4, r0
 801ec0e:	4608      	mov	r0, r1
 801ec10:	4611      	mov	r1, r2
 801ec12:	2200      	movs	r2, #0
 801ec14:	602a      	str	r2, [r5, #0]
 801ec16:	461a      	mov	r2, r3
 801ec18:	f7f7 fb8b 	bl	8016332 <_write>
 801ec1c:	1c43      	adds	r3, r0, #1
 801ec1e:	d102      	bne.n	801ec26 <_write_r+0x1e>
 801ec20:	682b      	ldr	r3, [r5, #0]
 801ec22:	b103      	cbz	r3, 801ec26 <_write_r+0x1e>
 801ec24:	6023      	str	r3, [r4, #0]
 801ec26:	bd38      	pop	{r3, r4, r5, pc}
 801ec28:	2000080c 	.word	0x2000080c

0801ec2c <_close_r>:
 801ec2c:	b538      	push	{r3, r4, r5, lr}
 801ec2e:	4d06      	ldr	r5, [pc, #24]	; (801ec48 <_close_r+0x1c>)
 801ec30:	2300      	movs	r3, #0
 801ec32:	4604      	mov	r4, r0
 801ec34:	4608      	mov	r0, r1
 801ec36:	602b      	str	r3, [r5, #0]
 801ec38:	f7f7 fb97 	bl	801636a <_close>
 801ec3c:	1c43      	adds	r3, r0, #1
 801ec3e:	d102      	bne.n	801ec46 <_close_r+0x1a>
 801ec40:	682b      	ldr	r3, [r5, #0]
 801ec42:	b103      	cbz	r3, 801ec46 <_close_r+0x1a>
 801ec44:	6023      	str	r3, [r4, #0]
 801ec46:	bd38      	pop	{r3, r4, r5, pc}
 801ec48:	2000080c 	.word	0x2000080c

0801ec4c <_fstat_r>:
 801ec4c:	b538      	push	{r3, r4, r5, lr}
 801ec4e:	4d07      	ldr	r5, [pc, #28]	; (801ec6c <_fstat_r+0x20>)
 801ec50:	2300      	movs	r3, #0
 801ec52:	4604      	mov	r4, r0
 801ec54:	4608      	mov	r0, r1
 801ec56:	4611      	mov	r1, r2
 801ec58:	602b      	str	r3, [r5, #0]
 801ec5a:	f7f7 fb92 	bl	8016382 <_fstat>
 801ec5e:	1c43      	adds	r3, r0, #1
 801ec60:	d102      	bne.n	801ec68 <_fstat_r+0x1c>
 801ec62:	682b      	ldr	r3, [r5, #0]
 801ec64:	b103      	cbz	r3, 801ec68 <_fstat_r+0x1c>
 801ec66:	6023      	str	r3, [r4, #0]
 801ec68:	bd38      	pop	{r3, r4, r5, pc}
 801ec6a:	bf00      	nop
 801ec6c:	2000080c 	.word	0x2000080c

0801ec70 <_isatty_r>:
 801ec70:	b538      	push	{r3, r4, r5, lr}
 801ec72:	4d06      	ldr	r5, [pc, #24]	; (801ec8c <_isatty_r+0x1c>)
 801ec74:	2300      	movs	r3, #0
 801ec76:	4604      	mov	r4, r0
 801ec78:	4608      	mov	r0, r1
 801ec7a:	602b      	str	r3, [r5, #0]
 801ec7c:	f7f7 fb91 	bl	80163a2 <_isatty>
 801ec80:	1c43      	adds	r3, r0, #1
 801ec82:	d102      	bne.n	801ec8a <_isatty_r+0x1a>
 801ec84:	682b      	ldr	r3, [r5, #0]
 801ec86:	b103      	cbz	r3, 801ec8a <_isatty_r+0x1a>
 801ec88:	6023      	str	r3, [r4, #0]
 801ec8a:	bd38      	pop	{r3, r4, r5, pc}
 801ec8c:	2000080c 	.word	0x2000080c

0801ec90 <_lseek_r>:
 801ec90:	b538      	push	{r3, r4, r5, lr}
 801ec92:	4d07      	ldr	r5, [pc, #28]	; (801ecb0 <_lseek_r+0x20>)
 801ec94:	4604      	mov	r4, r0
 801ec96:	4608      	mov	r0, r1
 801ec98:	4611      	mov	r1, r2
 801ec9a:	2200      	movs	r2, #0
 801ec9c:	602a      	str	r2, [r5, #0]
 801ec9e:	461a      	mov	r2, r3
 801eca0:	f7f7 fb8a 	bl	80163b8 <_lseek>
 801eca4:	1c43      	adds	r3, r0, #1
 801eca6:	d102      	bne.n	801ecae <_lseek_r+0x1e>
 801eca8:	682b      	ldr	r3, [r5, #0]
 801ecaa:	b103      	cbz	r3, 801ecae <_lseek_r+0x1e>
 801ecac:	6023      	str	r3, [r4, #0]
 801ecae:	bd38      	pop	{r3, r4, r5, pc}
 801ecb0:	2000080c 	.word	0x2000080c

0801ecb4 <__malloc_lock>:
 801ecb4:	4801      	ldr	r0, [pc, #4]	; (801ecbc <__malloc_lock+0x8>)
 801ecb6:	f7ff bdc7 	b.w	801e848 <__retarget_lock_acquire_recursive>
 801ecba:	bf00      	nop
 801ecbc:	20000800 	.word	0x20000800

0801ecc0 <__malloc_unlock>:
 801ecc0:	4801      	ldr	r0, [pc, #4]	; (801ecc8 <__malloc_unlock+0x8>)
 801ecc2:	f7ff bdc2 	b.w	801e84a <__retarget_lock_release_recursive>
 801ecc6:	bf00      	nop
 801ecc8:	20000800 	.word	0x20000800

0801eccc <_read_r>:
 801eccc:	b538      	push	{r3, r4, r5, lr}
 801ecce:	4d07      	ldr	r5, [pc, #28]	; (801ecec <_read_r+0x20>)
 801ecd0:	4604      	mov	r4, r0
 801ecd2:	4608      	mov	r0, r1
 801ecd4:	4611      	mov	r1, r2
 801ecd6:	2200      	movs	r2, #0
 801ecd8:	602a      	str	r2, [r5, #0]
 801ecda:	461a      	mov	r2, r3
 801ecdc:	f7f7 fb0c 	bl	80162f8 <_read>
 801ece0:	1c43      	adds	r3, r0, #1
 801ece2:	d102      	bne.n	801ecea <_read_r+0x1e>
 801ece4:	682b      	ldr	r3, [r5, #0]
 801ece6:	b103      	cbz	r3, 801ecea <_read_r+0x1e>
 801ece8:	6023      	str	r3, [r4, #0]
 801ecea:	bd38      	pop	{r3, r4, r5, pc}
 801ecec:	2000080c 	.word	0x2000080c

0801ecf0 <_init>:
 801ecf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ecf2:	bf00      	nop
 801ecf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ecf6:	bc08      	pop	{r3}
 801ecf8:	469e      	mov	lr, r3
 801ecfa:	4770      	bx	lr

0801ecfc <_fini>:
 801ecfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ecfe:	bf00      	nop
 801ed00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed02:	bc08      	pop	{r3}
 801ed04:	469e      	mov	lr, r3
 801ed06:	4770      	bx	lr
