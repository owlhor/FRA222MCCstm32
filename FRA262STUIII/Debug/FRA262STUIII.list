
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009124  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080092bc  080092bc  000192bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092dc  080092dc  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  080092dc  080092dc  000192dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092e4  080092e4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092e4  080092e4  000192e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092e8  080092e8  000192e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080092ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000040  0800932c  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  0800932c  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001134b  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0d  00000000  00000000  000313bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  000332c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00034250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c46  00000000  00000000  00035148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c96  00000000  00000000  0004bd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009159e  00000000  00000000  0005da24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eefc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004330  00000000  00000000  000ef014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080092a4 	.word	0x080092a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	080092a4 	.word	0x080092a4

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	; 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	3a01      	subs	r2, #1
 8000292:	bf28      	it	cs
 8000294:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000298:	d2ed      	bcs.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_uldivmod>:
 80003f4:	b953      	cbnz	r3, 800040c <__aeabi_uldivmod+0x18>
 80003f6:	b94a      	cbnz	r2, 800040c <__aeabi_uldivmod+0x18>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	bf08      	it	eq
 80003fc:	2800      	cmpeq	r0, #0
 80003fe:	bf1c      	itt	ne
 8000400:	f04f 31ff 	movne.w	r1, #4294967295
 8000404:	f04f 30ff 	movne.w	r0, #4294967295
 8000408:	f000 b974 	b.w	80006f4 <__aeabi_idiv0>
 800040c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000410:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000414:	f000 f806 	bl	8000424 <__udivmoddi4>
 8000418:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr

08000424 <__udivmoddi4>:
 8000424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000428:	9d08      	ldr	r5, [sp, #32]
 800042a:	4604      	mov	r4, r0
 800042c:	468e      	mov	lr, r1
 800042e:	2b00      	cmp	r3, #0
 8000430:	d14d      	bne.n	80004ce <__udivmoddi4+0xaa>
 8000432:	428a      	cmp	r2, r1
 8000434:	4694      	mov	ip, r2
 8000436:	d969      	bls.n	800050c <__udivmoddi4+0xe8>
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	b152      	cbz	r2, 8000454 <__udivmoddi4+0x30>
 800043e:	fa01 f302 	lsl.w	r3, r1, r2
 8000442:	f1c2 0120 	rsb	r1, r2, #32
 8000446:	fa20 f101 	lsr.w	r1, r0, r1
 800044a:	fa0c fc02 	lsl.w	ip, ip, r2
 800044e:	ea41 0e03 	orr.w	lr, r1, r3
 8000452:	4094      	lsls	r4, r2
 8000454:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000458:	0c21      	lsrs	r1, r4, #16
 800045a:	fbbe f6f8 	udiv	r6, lr, r8
 800045e:	fa1f f78c 	uxth.w	r7, ip
 8000462:	fb08 e316 	mls	r3, r8, r6, lr
 8000466:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800046a:	fb06 f107 	mul.w	r1, r6, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d90a      	bls.n	8000488 <__udivmoddi4+0x64>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f106 30ff 	add.w	r0, r6, #4294967295
 800047a:	f080 811f 	bcs.w	80006bc <__udivmoddi4+0x298>
 800047e:	4299      	cmp	r1, r3
 8000480:	f240 811c 	bls.w	80006bc <__udivmoddi4+0x298>
 8000484:	3e02      	subs	r6, #2
 8000486:	4463      	add	r3, ip
 8000488:	1a5b      	subs	r3, r3, r1
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3310 	mls	r3, r8, r0, r3
 8000494:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000498:	fb00 f707 	mul.w	r7, r0, r7
 800049c:	42a7      	cmp	r7, r4
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x92>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a8:	f080 810a 	bcs.w	80006c0 <__udivmoddi4+0x29c>
 80004ac:	42a7      	cmp	r7, r4
 80004ae:	f240 8107 	bls.w	80006c0 <__udivmoddi4+0x29c>
 80004b2:	4464      	add	r4, ip
 80004b4:	3802      	subs	r0, #2
 80004b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ba:	1be4      	subs	r4, r4, r7
 80004bc:	2600      	movs	r6, #0
 80004be:	b11d      	cbz	r5, 80004c8 <__udivmoddi4+0xa4>
 80004c0:	40d4      	lsrs	r4, r2
 80004c2:	2300      	movs	r3, #0
 80004c4:	e9c5 4300 	strd	r4, r3, [r5]
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d909      	bls.n	80004e6 <__udivmoddi4+0xc2>
 80004d2:	2d00      	cmp	r5, #0
 80004d4:	f000 80ef 	beq.w	80006b6 <__udivmoddi4+0x292>
 80004d8:	2600      	movs	r6, #0
 80004da:	e9c5 0100 	strd	r0, r1, [r5]
 80004de:	4630      	mov	r0, r6
 80004e0:	4631      	mov	r1, r6
 80004e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e6:	fab3 f683 	clz	r6, r3
 80004ea:	2e00      	cmp	r6, #0
 80004ec:	d14a      	bne.n	8000584 <__udivmoddi4+0x160>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d302      	bcc.n	80004f8 <__udivmoddi4+0xd4>
 80004f2:	4282      	cmp	r2, r0
 80004f4:	f200 80f9 	bhi.w	80006ea <__udivmoddi4+0x2c6>
 80004f8:	1a84      	subs	r4, r0, r2
 80004fa:	eb61 0303 	sbc.w	r3, r1, r3
 80004fe:	2001      	movs	r0, #1
 8000500:	469e      	mov	lr, r3
 8000502:	2d00      	cmp	r5, #0
 8000504:	d0e0      	beq.n	80004c8 <__udivmoddi4+0xa4>
 8000506:	e9c5 4e00 	strd	r4, lr, [r5]
 800050a:	e7dd      	b.n	80004c8 <__udivmoddi4+0xa4>
 800050c:	b902      	cbnz	r2, 8000510 <__udivmoddi4+0xec>
 800050e:	deff      	udf	#255	; 0xff
 8000510:	fab2 f282 	clz	r2, r2
 8000514:	2a00      	cmp	r2, #0
 8000516:	f040 8092 	bne.w	800063e <__udivmoddi4+0x21a>
 800051a:	eba1 010c 	sub.w	r1, r1, ip
 800051e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000522:	fa1f fe8c 	uxth.w	lr, ip
 8000526:	2601      	movs	r6, #1
 8000528:	0c20      	lsrs	r0, r4, #16
 800052a:	fbb1 f3f7 	udiv	r3, r1, r7
 800052e:	fb07 1113 	mls	r1, r7, r3, r1
 8000532:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000536:	fb0e f003 	mul.w	r0, lr, r3
 800053a:	4288      	cmp	r0, r1
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x12c>
 800053e:	eb1c 0101 	adds.w	r1, ip, r1
 8000542:	f103 38ff 	add.w	r8, r3, #4294967295
 8000546:	d202      	bcs.n	800054e <__udivmoddi4+0x12a>
 8000548:	4288      	cmp	r0, r1
 800054a:	f200 80cb 	bhi.w	80006e4 <__udivmoddi4+0x2c0>
 800054e:	4643      	mov	r3, r8
 8000550:	1a09      	subs	r1, r1, r0
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb1 f0f7 	udiv	r0, r1, r7
 8000558:	fb07 1110 	mls	r1, r7, r0, r1
 800055c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000560:	fb0e fe00 	mul.w	lr, lr, r0
 8000564:	45a6      	cmp	lr, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x156>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000570:	d202      	bcs.n	8000578 <__udivmoddi4+0x154>
 8000572:	45a6      	cmp	lr, r4
 8000574:	f200 80bb 	bhi.w	80006ee <__udivmoddi4+0x2ca>
 8000578:	4608      	mov	r0, r1
 800057a:	eba4 040e 	sub.w	r4, r4, lr
 800057e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000582:	e79c      	b.n	80004be <__udivmoddi4+0x9a>
 8000584:	f1c6 0720 	rsb	r7, r6, #32
 8000588:	40b3      	lsls	r3, r6
 800058a:	fa22 fc07 	lsr.w	ip, r2, r7
 800058e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000592:	fa20 f407 	lsr.w	r4, r0, r7
 8000596:	fa01 f306 	lsl.w	r3, r1, r6
 800059a:	431c      	orrs	r4, r3
 800059c:	40f9      	lsrs	r1, r7
 800059e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005a2:	fa00 f306 	lsl.w	r3, r0, r6
 80005a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80005aa:	0c20      	lsrs	r0, r4, #16
 80005ac:	fa1f fe8c 	uxth.w	lr, ip
 80005b0:	fb09 1118 	mls	r1, r9, r8, r1
 80005b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005b8:	fb08 f00e 	mul.w	r0, r8, lr
 80005bc:	4288      	cmp	r0, r1
 80005be:	fa02 f206 	lsl.w	r2, r2, r6
 80005c2:	d90b      	bls.n	80005dc <__udivmoddi4+0x1b8>
 80005c4:	eb1c 0101 	adds.w	r1, ip, r1
 80005c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80005cc:	f080 8088 	bcs.w	80006e0 <__udivmoddi4+0x2bc>
 80005d0:	4288      	cmp	r0, r1
 80005d2:	f240 8085 	bls.w	80006e0 <__udivmoddi4+0x2bc>
 80005d6:	f1a8 0802 	sub.w	r8, r8, #2
 80005da:	4461      	add	r1, ip
 80005dc:	1a09      	subs	r1, r1, r0
 80005de:	b2a4      	uxth	r4, r4
 80005e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80005e4:	fb09 1110 	mls	r1, r9, r0, r1
 80005e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80005f0:	458e      	cmp	lr, r1
 80005f2:	d908      	bls.n	8000606 <__udivmoddi4+0x1e2>
 80005f4:	eb1c 0101 	adds.w	r1, ip, r1
 80005f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80005fc:	d26c      	bcs.n	80006d8 <__udivmoddi4+0x2b4>
 80005fe:	458e      	cmp	lr, r1
 8000600:	d96a      	bls.n	80006d8 <__udivmoddi4+0x2b4>
 8000602:	3802      	subs	r0, #2
 8000604:	4461      	add	r1, ip
 8000606:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800060a:	fba0 9402 	umull	r9, r4, r0, r2
 800060e:	eba1 010e 	sub.w	r1, r1, lr
 8000612:	42a1      	cmp	r1, r4
 8000614:	46c8      	mov	r8, r9
 8000616:	46a6      	mov	lr, r4
 8000618:	d356      	bcc.n	80006c8 <__udivmoddi4+0x2a4>
 800061a:	d053      	beq.n	80006c4 <__udivmoddi4+0x2a0>
 800061c:	b15d      	cbz	r5, 8000636 <__udivmoddi4+0x212>
 800061e:	ebb3 0208 	subs.w	r2, r3, r8
 8000622:	eb61 010e 	sbc.w	r1, r1, lr
 8000626:	fa01 f707 	lsl.w	r7, r1, r7
 800062a:	fa22 f306 	lsr.w	r3, r2, r6
 800062e:	40f1      	lsrs	r1, r6
 8000630:	431f      	orrs	r7, r3
 8000632:	e9c5 7100 	strd	r7, r1, [r5]
 8000636:	2600      	movs	r6, #0
 8000638:	4631      	mov	r1, r6
 800063a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	40d8      	lsrs	r0, r3
 8000644:	fa0c fc02 	lsl.w	ip, ip, r2
 8000648:	fa21 f303 	lsr.w	r3, r1, r3
 800064c:	4091      	lsls	r1, r2
 800064e:	4301      	orrs	r1, r0
 8000650:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000654:	fa1f fe8c 	uxth.w	lr, ip
 8000658:	fbb3 f0f7 	udiv	r0, r3, r7
 800065c:	fb07 3610 	mls	r6, r7, r0, r3
 8000660:	0c0b      	lsrs	r3, r1, #16
 8000662:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000666:	fb00 f60e 	mul.w	r6, r0, lr
 800066a:	429e      	cmp	r6, r3
 800066c:	fa04 f402 	lsl.w	r4, r4, r2
 8000670:	d908      	bls.n	8000684 <__udivmoddi4+0x260>
 8000672:	eb1c 0303 	adds.w	r3, ip, r3
 8000676:	f100 38ff 	add.w	r8, r0, #4294967295
 800067a:	d22f      	bcs.n	80006dc <__udivmoddi4+0x2b8>
 800067c:	429e      	cmp	r6, r3
 800067e:	d92d      	bls.n	80006dc <__udivmoddi4+0x2b8>
 8000680:	3802      	subs	r0, #2
 8000682:	4463      	add	r3, ip
 8000684:	1b9b      	subs	r3, r3, r6
 8000686:	b289      	uxth	r1, r1
 8000688:	fbb3 f6f7 	udiv	r6, r3, r7
 800068c:	fb07 3316 	mls	r3, r7, r6, r3
 8000690:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000694:	fb06 f30e 	mul.w	r3, r6, lr
 8000698:	428b      	cmp	r3, r1
 800069a:	d908      	bls.n	80006ae <__udivmoddi4+0x28a>
 800069c:	eb1c 0101 	adds.w	r1, ip, r1
 80006a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80006a4:	d216      	bcs.n	80006d4 <__udivmoddi4+0x2b0>
 80006a6:	428b      	cmp	r3, r1
 80006a8:	d914      	bls.n	80006d4 <__udivmoddi4+0x2b0>
 80006aa:	3e02      	subs	r6, #2
 80006ac:	4461      	add	r1, ip
 80006ae:	1ac9      	subs	r1, r1, r3
 80006b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006b4:	e738      	b.n	8000528 <__udivmoddi4+0x104>
 80006b6:	462e      	mov	r6, r5
 80006b8:	4628      	mov	r0, r5
 80006ba:	e705      	b.n	80004c8 <__udivmoddi4+0xa4>
 80006bc:	4606      	mov	r6, r0
 80006be:	e6e3      	b.n	8000488 <__udivmoddi4+0x64>
 80006c0:	4618      	mov	r0, r3
 80006c2:	e6f8      	b.n	80004b6 <__udivmoddi4+0x92>
 80006c4:	454b      	cmp	r3, r9
 80006c6:	d2a9      	bcs.n	800061c <__udivmoddi4+0x1f8>
 80006c8:	ebb9 0802 	subs.w	r8, r9, r2
 80006cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006d0:	3801      	subs	r0, #1
 80006d2:	e7a3      	b.n	800061c <__udivmoddi4+0x1f8>
 80006d4:	4646      	mov	r6, r8
 80006d6:	e7ea      	b.n	80006ae <__udivmoddi4+0x28a>
 80006d8:	4620      	mov	r0, r4
 80006da:	e794      	b.n	8000606 <__udivmoddi4+0x1e2>
 80006dc:	4640      	mov	r0, r8
 80006de:	e7d1      	b.n	8000684 <__udivmoddi4+0x260>
 80006e0:	46d0      	mov	r8, sl
 80006e2:	e77b      	b.n	80005dc <__udivmoddi4+0x1b8>
 80006e4:	3b02      	subs	r3, #2
 80006e6:	4461      	add	r1, ip
 80006e8:	e732      	b.n	8000550 <__udivmoddi4+0x12c>
 80006ea:	4630      	mov	r0, r6
 80006ec:	e709      	b.n	8000502 <__udivmoddi4+0xde>
 80006ee:	4464      	add	r4, ip
 80006f0:	3802      	subs	r0, #2
 80006f2:	e742      	b.n	800057a <__udivmoddi4+0x156>

080006f4 <__aeabi_idiv0>:
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80006fc:	b084      	sub	sp, #16
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000700:	f001 fde4 	bl	80022cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000704:	f000 f8dc 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000708:	f000 faf4 	bl	8000cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 800070c:	f000 fad2 	bl	8000cb4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000710:	f000 f93e 	bl	8000990 <MX_I2C1_Init>
  MX_TIM11_Init();
 8000714:	f000 fa7e 	bl	8000c14 <MX_TIM11_Init>
  MX_TIM2_Init();
 8000718:	f000 f996 	bl	8000a48 <MX_TIM2_Init>
  MX_TIM4_Init();
 800071c:	f000 fa04 	bl	8000b28 <MX_TIM4_Init>
  MX_I2C3_Init();
 8000720:	f000 f964 	bl	80009ec <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8000724:	f000 fa9a 	bl	8000c5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8000728:	4854      	ldr	r0, [pc, #336]	; (800087c <main+0x184>)
 800072a:	f006 f8f5 	bl	8006918 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start(&htim2); // Speed
 800072e:	4854      	ldr	r0, [pc, #336]	; (8000880 <main+0x188>)
 8000730:	f006 f898 	bl	8006864 <HAL_TIM_Base_Start>
    HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,
 8000734:	2310      	movs	r3, #16
 8000736:	4a53      	ldr	r2, [pc, #332]	; (8000884 <main+0x18c>)
 8000738:	2100      	movs	r1, #0
 800073a:	4851      	ldr	r0, [pc, #324]	; (8000880 <main+0x188>)
 800073c:	f006 fab2 	bl	8006ca4 <HAL_TIM_IC_Start_DMA>
    			CAPTURENUM);

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8000740:	4851      	ldr	r0, [pc, #324]	; (8000888 <main+0x190>)
 8000742:	f006 f88f 	bl	8006864 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000746:	2100      	movs	r1, #0
 8000748:	484f      	ldr	r0, [pc, #316]	; (8000888 <main+0x190>)
 800074a:	f006 f9a1 	bl	8006a90 <HAL_TIM_PWM_Start>

    //MCP23017 setting init
    HAL_Delay(50);
 800074e:	2032      	movs	r0, #50	; 0x32
 8000750:	f001 fe2e 	bl	80023b0 <HAL_Delay>
    IOExpenderInit();
 8000754:	f000 fdda 	bl	800130c <IOExpenderInit>
	  	  //if(micros() - TimeStampGrand >= 1000){
	  		//TimeStampGrand = micros();
	  	  //}
*/
	  	  // Encoder I2CRead
	  	  if (micros()-timeStampSR >= 1000)      // don't use 1
 8000758:	f001 fa98 	bl	8001c8c <micros>
 800075c:	4602      	mov	r2, r0
 800075e:	460b      	mov	r3, r1
 8000760:	494a      	ldr	r1, [pc, #296]	; (800088c <main+0x194>)
 8000762:	6809      	ldr	r1, [r1, #0]
 8000764:	2000      	movs	r0, #0
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	60f8      	str	r0, [r7, #12]
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	1a54      	subs	r4, r2, r1
 800076e:	68f9      	ldr	r1, [r7, #12]
 8000770:	eb63 0501 	sbc.w	r5, r3, r1
 8000774:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8000778:	f175 0300 	sbcs.w	r3, r5, #0
 800077c:	d312      	bcc.n	80007a4 <main+0xac>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 800077e:	f001 fa85 	bl	8001c8c <micros>
 8000782:	4602      	mov	r2, r0
 8000784:	460b      	mov	r3, r1
 8000786:	4b41      	ldr	r3, [pc, #260]	; (800088c <main+0x194>)
 8000788:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <main+0x198>)
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
	  	              pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8000790:	2102      	movs	r1, #2
 8000792:	4840      	ldr	r0, [pc, #256]	; (8000894 <main+0x19c>)
 8000794:	f002 fcd6 	bl	8003144 <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	4b3e      	ldr	r3, [pc, #248]	; (8000898 <main+0x1a0>)
 800079e:	701a      	strb	r2, [r3, #0]
	  	              GrandStatumix();
 80007a0:	f000 fb82 	bl	8000ea8 <GrandStatumix>
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 80007a4:	483d      	ldr	r0, [pc, #244]	; (800089c <main+0x1a4>)
 80007a6:	f000 fdc7 	bl	8001338 <AbsEncI2CReadx>
	  			  Speedsmoothfunc(RoundNumnd);
	  		 }
	   	   */
	  	  ///////////////////// 2KHz change PWM PB6////////////////////

	  	  if(micros() - timestampPWM >= 500){
 80007aa:	f001 fa6f 	bl	8001c8c <micros>
 80007ae:	4602      	mov	r2, r0
 80007b0:	460b      	mov	r3, r1
 80007b2:	493b      	ldr	r1, [pc, #236]	; (80008a0 <main+0x1a8>)
 80007b4:	6809      	ldr	r1, [r1, #0]
 80007b6:	2000      	movs	r0, #0
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6839      	ldr	r1, [r7, #0]
 80007be:	ebb2 0801 	subs.w	r8, r2, r1
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	eb63 0901 	sbc.w	r9, r3, r1
 80007c8:	f5b8 7ffa 	cmp.w	r8, #500	; 0x1f4
 80007cc:	f179 0300 	sbcs.w	r3, r9, #0
 80007d0:	d319      	bcc.n	8000806 <main+0x10e>
	  		  	  timestampPWM = micros(); // stamp
 80007d2:	f001 fa5b 	bl	8001c8c <micros>
 80007d6:	4602      	mov	r2, r0
 80007d8:	460b      	mov	r3, r1
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <main+0x1a8>)
 80007dc:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut); // dutycycle
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <main+0x1ac>)
 80007e0:	881a      	ldrh	r2, [r3, #0]
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <main+0x190>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		  //__HAL_TIM_SET_PRESCALER(&htim4, pscalr); // Set freq of pwm
	  	  		  //ADC_Target = ADCFeedx[1].datt;
	  	  		if (mot_dirctn == 0){
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <main+0x1b0>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d105      	bne.n	80007fc <main+0x104>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2104      	movs	r1, #4
 80007f4:	4827      	ldr	r0, [pc, #156]	; (8000894 <main+0x19c>)
 80007f6:	f002 fcbd 	bl	8003174 <HAL_GPIO_WritePin>
 80007fa:	e004      	b.n	8000806 <main+0x10e>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2104      	movs	r1, #4
 8000800:	4824      	ldr	r0, [pc, #144]	; (8000894 <main+0x19c>)
 8000802:	f002 fcb7 	bl	8003174 <HAL_GPIO_WritePin>
	  	  		}

	  	  	  }

	  	 if (grandState ==  work){
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <main+0x1b4>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d103      	bne.n	8000816 <main+0x11e>
	  		 PIDzero();
 800080e:	f000 fc8f 	bl	8001130 <PIDzero>
	  		 MotDrvCytron();
 8000812:	f000 fd17 	bl	8001244 <MotDrvCytron>
	  	 }

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 8000816:	f000 fdeb 	bl	80013f0 <Efft_activate>
	  	 Efft_read(&efft_status);
 800081a:	4825      	ldr	r0, [pc, #148]	; (80008b0 <main+0x1b8>)
 800081c:	f000 fe2e 	bl	800147c <Efft_read>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state
	  	 if(trig_efftRead != 0 && micros() - timestamp_efft >= 50000){
 8000820:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <main+0x1bc>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d01e      	beq.n	8000866 <main+0x16e>
 8000828:	f001 fa30 	bl	8001c8c <micros>
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <main+0x1c0>)
 800082e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000832:	ebb0 0a02 	subs.w	sl, r0, r2
 8000836:	eb61 0b03 	sbc.w	fp, r1, r3
 800083a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800083e:	459a      	cmp	sl, r3
 8000840:	f17b 0300 	sbcs.w	r3, fp, #0
 8000844:	d30f      	bcc.n	8000866 <main+0x16e>
	  		 timestamp_efft = micros();
 8000846:	f001 fa21 	bl	8001c8c <micros>
 800084a:	4602      	mov	r2, r0
 800084c:	460b      	mov	r3, r1
 800084e:	491a      	ldr	r1, [pc, #104]	; (80008b8 <main+0x1c0>)
 8000850:	e9c1 2300 	strd	r2, r3, [r1]
	  		 flag_efftRead = 1;
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <main+0x1c4>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
	  		 trig_efftRead++;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <main+0x1bc>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <main+0x1bc>)
 8000864:	701a      	strb	r2, [r3, #0]

	  	 }
	  	 //// disable this when run with laserwork
	  	 if(trig_efftRead >= 12){
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <main+0x1bc>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b0b      	cmp	r3, #11
 800086c:	d902      	bls.n	8000874 <main+0x17c>
	  		 trig_efftRead = 0;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <main+0x1bc>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
	  	 	 //flag_efftRead = 0;
	  		 } // read xx times

	  	 ////////// UART UI Base System //////////////
	  	 UARTRecieveIT();
 8000874:	f001 f970 	bl	8001b58 <UARTRecieveIT>
	  	  if (micros()-timeStampSR >= 1000)      // don't use 1
 8000878:	e76e      	b.n	8000758 <main+0x60>
 800087a:	bf00      	nop
 800087c:	20000194 	.word	0x20000194
 8000880:	20000104 	.word	0x20000104
 8000884:	200002a0 	.word	0x200002a0
 8000888:	2000014c 	.word	0x2000014c
 800088c:	20000294 	.word	0x20000294
 8000890:	2000029e 	.word	0x2000029e
 8000894:	40020400 	.word	0x40020400
 8000898:	20000281 	.word	0x20000281
 800089c:	20000298 	.word	0x20000298
 80008a0:	200002e0 	.word	0x200002e0
 80008a4:	2000000a 	.word	0x2000000a
 80008a8:	200002e4 	.word	0x200002e4
 80008ac:	20000280 	.word	0x20000280
 80008b0:	20000310 	.word	0x20000310
 80008b4:	20000313 	.word	0x20000313
 80008b8:	20000318 	.word	0x20000318
 80008bc:	20000312 	.word	0x20000312

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b094      	sub	sp, #80	; 0x50
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	2230      	movs	r2, #48	; 0x30
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f008 fce0 	bl	8009294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	4b27      	ldr	r3, [pc, #156]	; (8000988 <SystemClock_Config+0xc8>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	4a26      	ldr	r2, [pc, #152]	; (8000988 <SystemClock_Config+0xc8>)
 80008ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f2:	6413      	str	r3, [r2, #64]	; 0x40
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <SystemClock_Config+0xc8>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <SystemClock_Config+0xcc>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a20      	ldr	r2, [pc, #128]	; (800098c <SystemClock_Config+0xcc>)
 800090a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <SystemClock_Config+0xcc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	2301      	movs	r3, #1
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000924:	2310      	movs	r3, #16
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000928:	2302      	movs	r3, #2
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092c:	2300      	movs	r3, #0
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000930:	2308      	movs	r3, #8
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	4618      	mov	r0, r3
 8000946:	f005 faa5 	bl	8005e94 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000950:	f001 f9d2 	bl	8001cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2302      	movs	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2103      	movs	r1, #3
 8000970:	4618      	mov	r0, r3
 8000972:	f005 fd07 	bl	8006384 <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800097c:	f001 f9bc 	bl	8001cf8 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3750      	adds	r7, #80	; 0x50
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_I2C1_Init+0x50>)
 8000996:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <MX_I2C1_Init+0x54>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_I2C1_Init+0x50>)
 800099c:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_I2C1_Init+0x58>)
 800099e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_I2C1_Init+0x50>)
 80009ce:	f002 fc03 	bl	80031d8 <HAL_I2C_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009d8:	f001 f98e 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000005c 	.word	0x2000005c
 80009e4:	40005400 	.word	0x40005400
 80009e8:	00061a80 	.word	0x00061a80

080009ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_I2C3_Init+0x50>)
 80009f2:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <MX_I2C3_Init+0x54>)
 80009f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_I2C3_Init+0x50>)
 80009f8:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_I2C3_Init+0x58>)
 80009fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_I2C3_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_I2C3_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_I2C3_Init+0x50>)
 8000a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <MX_I2C3_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_I2C3_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <MX_I2C3_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_I2C3_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_I2C3_Init+0x50>)
 8000a2a:	f002 fbd5 	bl	80031d8 <HAL_I2C_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a34:	f001 f960 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000b0 	.word	0x200000b0
 8000a40:	40005c00 	.word	0x40005c00
 8000a44:	00061a80 	.word	0x00061a80

08000a48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0318 	add.w	r3, r7, #24
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a72:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000a7c:	2263      	movs	r2, #99	; 0x63
 8000a7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a86:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a9a:	4822      	ldr	r0, [pc, #136]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000a9c:	f005 fe92 	bl	80067c4 <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000aa6:	f001 f927 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481b      	ldr	r0, [pc, #108]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000ab8:	f006 fcf6 	bl	80074a8 <HAL_TIM_ConfigClockSource>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ac2:	f001 f919 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ac6:	4817      	ldr	r0, [pc, #92]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000ac8:	f006 f892 	bl	8006bf0 <HAL_TIM_IC_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ad2:	f001 f911 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480f      	ldr	r0, [pc, #60]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000ae6:	f007 faad 	bl	8008044 <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000af0:	f001 f902 	bl	8001cf8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000af4:	2300      	movs	r3, #0
 8000af6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000af8:	2301      	movs	r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b04:	463b      	mov	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <MX_TIM2_Init+0xdc>)
 8000b0c:	f006 fb6e 	bl	80071ec <HAL_TIM_IC_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000b16:	f001 f8ef 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	3728      	adds	r7, #40	; 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000104 	.word	0x20000104

08000b28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3c:	f107 0320 	add.w	r3, r7, #32
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b58:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b5a:	4a2d      	ldr	r2, [pc, #180]	; (8000c10 <MX_TIM4_Init+0xe8>)
 8000b5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000b6a:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b6c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b7e:	4823      	ldr	r0, [pc, #140]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b80:	f005 fe20 	bl	80067c4 <HAL_TIM_Base_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000b8a:	f001 f8b5 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	481c      	ldr	r0, [pc, #112]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000b9c:	f006 fc84 	bl	80074a8 <HAL_TIM_ConfigClockSource>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ba6:	f001 f8a7 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000baa:	4818      	ldr	r0, [pc, #96]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000bac:	f005 ff16 	bl	80069dc <HAL_TIM_PWM_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000bb6:	f001 f89f 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bc2:	f107 0320 	add.w	r3, r7, #32
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4810      	ldr	r0, [pc, #64]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000bca:	f007 fa3b 	bl	8008044 <HAL_TIMEx_MasterConfigSynchronization>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000bd4:	f001 f890 	bl	8001cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd8:	2360      	movs	r3, #96	; 0x60
 8000bda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	4619      	mov	r1, r3
 8000bee:	4807      	ldr	r0, [pc, #28]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000bf0:	f006 fb98 	bl	8007324 <HAL_TIM_PWM_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000bfa:	f001 f87d 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000bfe:	4803      	ldr	r0, [pc, #12]	; (8000c0c <MX_TIM4_Init+0xe4>)
 8000c00:	f001 fa16 	bl	8002030 <HAL_TIM_MspPostInit>

}
 8000c04:	bf00      	nop
 8000c06:	3738      	adds	r7, #56	; 0x38
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	2000014c 	.word	0x2000014c
 8000c10:	40000800 	.word	0x40000800

08000c14 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_TIM11_Init+0x40>)
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <MX_TIM11_Init+0x44>)
 8000c1c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <MX_TIM11_Init+0x40>)
 8000c20:	2263      	movs	r2, #99	; 0x63
 8000c22:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_TIM11_Init+0x40>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <MX_TIM11_Init+0x40>)
 8000c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c30:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_TIM11_Init+0x40>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_TIM11_Init+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_TIM11_Init+0x40>)
 8000c40:	f005 fdc0 	bl	80067c4 <HAL_TIM_Base_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000c4a:	f001 f855 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000194 	.word	0x20000194
 8000c58:	40014800 	.word	0x40014800

08000c5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c62:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <MX_USART2_UART_Init+0x54>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c68:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8000c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c74:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USART2_UART_Init+0x50>)
 8000c98:	f007 fa56 	bl	8008148 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000ca2:	f001 f829 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000023c 	.word	0x2000023c
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_DMA_Init+0x3c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <MX_DMA_Init+0x3c>)
 8000cc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_DMA_Init+0x3c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2010      	movs	r0, #16
 8000cdc:	f001 fc67 	bl	80025ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ce0:	2010      	movs	r0, #16
 8000ce2:	f001 fc80 	bl	80025e6 <HAL_NVIC_EnableIRQ>

}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b61      	ldr	r3, [pc, #388]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a60      	ldr	r2, [pc, #384]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b5e      	ldr	r3, [pc, #376]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b5a      	ldr	r3, [pc, #360]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a59      	ldr	r2, [pc, #356]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b57      	ldr	r3, [pc, #348]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a52      	ldr	r2, [pc, #328]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b50      	ldr	r3, [pc, #320]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b4c      	ldr	r3, [pc, #304]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a4b      	ldr	r2, [pc, #300]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b49      	ldr	r3, [pc, #292]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b45      	ldr	r3, [pc, #276]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a44      	ldr	r2, [pc, #272]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b42      	ldr	r3, [pc, #264]	; (8000e94 <MX_GPIO_Init+0x1a0>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2120      	movs	r1, #32
 8000d9a:	483f      	ldr	r0, [pc, #252]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000d9c:	f002 f9ea 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f24e 0104 	movw	r1, #57348	; 0xe004
 8000da6:	483d      	ldr	r0, [pc, #244]	; (8000e9c <MX_GPIO_Init+0x1a8>)
 8000da8:	f002 f9e4 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 8000dac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000db2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4837      	ldr	r0, [pc, #220]	; (8000ea0 <MX_GPIO_Init+0x1ac>)
 8000dc4:	f002 f83a 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dc8:	2320      	movs	r3, #32
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	482e      	ldr	r0, [pc, #184]	; (8000e98 <MX_GPIO_Init+0x1a4>)
 8000de0:	f002 f82c 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 8000de4:	2302      	movs	r3, #2
 8000de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4829      	ldr	r0, [pc, #164]	; (8000e9c <MX_GPIO_Init+0x1a8>)
 8000df8:	f002 f820 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 8000dfc:	f24e 0304 	movw	r3, #57348	; 0xe004
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4821      	ldr	r0, [pc, #132]	; (8000e9c <MX_GPIO_Init+0x1a8>)
 8000e16:	f002 f811 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 8000e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481b      	ldr	r0, [pc, #108]	; (8000ea0 <MX_GPIO_Init+0x1ac>)
 8000e32:	f002 f803 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4815      	ldr	r0, [pc, #84]	; (8000ea0 <MX_GPIO_Init+0x1ac>)
 8000e4c:	f001 fff6 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 8000e50:	2304      	movs	r3, #4
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <MX_GPIO_Init+0x1b0>)
 8000e66:	f001 ffe9 	bl	8002e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2008      	movs	r0, #8
 8000e70:	f001 fb9d 	bl	80025ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e74:	2008      	movs	r0, #8
 8000e76:	f001 fbb6 	bl	80025e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2028      	movs	r0, #40	; 0x28
 8000e80:	f001 fb95 	bl	80025ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e84:	2028      	movs	r0, #40	; 0x28
 8000e86:	f001 fbae 	bl	80025e6 <HAL_NVIC_EnableIRQ>

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020c00 	.word	0x40020c00

08000ea8 <GrandStatumix>:

/* USER CODE BEGIN 4 */
////////// Grand State //////////////////////////////////////////////////////
void GrandStatumix(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 8000eac:	4b62      	ldr	r3, [pc, #392]	; (8001038 <GrandStatumix+0x190>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d005      	beq.n	8000ec0 <GrandStatumix+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eba:	4860      	ldr	r0, [pc, #384]	; (800103c <GrandStatumix+0x194>)
 8000ebc:	f002 f95a 	bl	8003174 <HAL_GPIO_WritePin>
	}
	if (grandState != work){
 8000ec0:	4b5d      	ldr	r3, [pc, #372]	; (8001038 <GrandStatumix+0x190>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d005      	beq.n	8000ed4 <GrandStatumix+0x2c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ece:	485b      	ldr	r0, [pc, #364]	; (800103c <GrandStatumix+0x194>)
 8000ed0:	f002 f950 	bl	8003174 <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 8000ed4:	4b58      	ldr	r3, [pc, #352]	; (8001038 <GrandStatumix+0x190>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d103      	bne.n	8000ee4 <GrandStatumix+0x3c>
 8000edc:	4b56      	ldr	r3, [pc, #344]	; (8001038 <GrandStatumix+0x190>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	d005      	beq.n	8000ef0 <GrandStatumix+0x48>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eea:	4854      	ldr	r0, [pc, #336]	; (800103c <GrandStatumix+0x194>)
 8000eec:	f002 f942 	bl	8003174 <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8000ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef4:	4852      	ldr	r0, [pc, #328]	; (8001040 <GrandStatumix+0x198>)
 8000ef6:	f002 f925 	bl	8003144 <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b51      	ldr	r3, [pc, #324]	; (8001044 <GrandStatumix+0x19c>)
 8000f00:	701a      	strb	r2, [r3, #0]


	switch(grandState){
 8000f02:	4b4d      	ldr	r3, [pc, #308]	; (8001038 <GrandStatumix+0x190>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d80b      	bhi.n	8000f24 <GrandStatumix+0x7c>
 8000f0c:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <GrandStatumix+0x6c>)
 8000f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f12:	bf00      	nop
 8000f14:	08000f65 	.word	0x08000f65
 8000f18:	08000f9f 	.word	0x08000f9f
 8000f1c:	08001005 	.word	0x08001005
 8000f20:	08000fdb 	.word	0x08000fdb
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2a:	4844      	ldr	r0, [pc, #272]	; (800103c <GrandStatumix+0x194>)
 8000f2c:	f002 f922 	bl	8003174 <HAL_GPIO_WritePin>
		PWMOut = 1200;
 8000f30:	4b45      	ldr	r3, [pc, #276]	; (8001048 <GrandStatumix+0x1a0>)
 8000f32:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000f36:	801a      	strh	r2, [r3, #0]
		if (pwr_sense == 1){grandState = emer;}
 8000f38:	4b44      	ldr	r3, [pc, #272]	; (800104c <GrandStatumix+0x1a4>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d102      	bne.n	8000f46 <GrandStatumix+0x9e>
 8000f40:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <GrandStatumix+0x190>)
 8000f42:	2203      	movs	r2, #3
 8000f44:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 8000f46:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <GrandStatumix+0x19c>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d102      	bne.n	8000f54 <GrandStatumix+0xac>
 8000f4e:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <GrandStatumix+0x190>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	701a      	strb	r2, [r3, #0]
		if (bluecounter != 0){grandState = work;} // can go work from ready only
 8000f54:	4b3e      	ldr	r3, [pc, #248]	; (8001050 <GrandStatumix+0x1a8>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d062      	beq.n	8001022 <GrandStatumix+0x17a>
 8000f5c:	4b36      	ldr	r3, [pc, #216]	; (8001038 <GrandStatumix+0x190>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
	break;
 8000f62:	e05e      	b.n	8001022 <GrandStatumix+0x17a>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6a:	4834      	ldr	r0, [pc, #208]	; (800103c <GrandStatumix+0x194>)
 8000f6c:	f002 f902 	bl	8003174 <HAL_GPIO_WritePin>
		//LaserTrajex_workflow();

		if (pwr_sense == 1){
 8000f70:	4b36      	ldr	r3, [pc, #216]	; (800104c <GrandStatumix+0x1a4>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d106      	bne.n	8000f86 <GrandStatumix+0xde>
			grandState = emer;
 8000f78:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <GrandStatumix+0x190>)
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	701a      	strb	r2, [r3, #0]
			u_contr = 0;}
 8000f7e:	4b35      	ldr	r3, [pc, #212]	; (8001054 <GrandStatumix+0x1ac>)
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
		if (stop_sense == 0){
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <GrandStatumix+0x19c>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d14b      	bne.n	8001026 <GrandStatumix+0x17e>
			//PWMOut = 0;
			grandState = stopnd;
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <GrandStatumix+0x190>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	701a      	strb	r2, [r3, #0]
			u_contr = 0;}
 8000f94:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <GrandStatumix+0x1ac>)
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
	break;
 8000f9c:	e043      	b.n	8001026 <GrandStatumix+0x17e>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa4:	4825      	ldr	r0, [pc, #148]	; (800103c <GrandStatumix+0x194>)
 8000fa6:	f002 f8e5 	bl	8003174 <HAL_GPIO_WritePin>
		PWMOut = 0;
 8000faa:	4b27      	ldr	r3, [pc, #156]	; (8001048 <GrandStatumix+0x1a0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	801a      	strh	r2, [r3, #0]

		if (stop_sense == 1){
 8000fb0:	4b24      	ldr	r3, [pc, #144]	; (8001044 <GrandStatumix+0x19c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d138      	bne.n	800102a <GrandStatumix+0x182>
			grandState = Ready;
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <GrandStatumix+0x190>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]

			mot_dirctn++;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <GrandStatumix+0x1b0>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <GrandStatumix+0x1b0>)
 8000fc8:	701a      	strb	r2, [r3, #0]
			mot_dirctn%=2;
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <GrandStatumix+0x1b0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b20      	ldr	r3, [pc, #128]	; (8001058 <GrandStatumix+0x1b0>)
 8000fd6:	701a      	strb	r2, [r3, #0]
		}
	break;
 8000fd8:	e027      	b.n	800102a <GrandStatumix+0x182>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe0:	4816      	ldr	r0, [pc, #88]	; (800103c <GrandStatumix+0x194>)
 8000fe2:	f002 f8c7 	bl	8003174 <HAL_GPIO_WritePin>
			PWMOut = 0;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <GrandStatumix+0x1a0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	801a      	strh	r2, [r3, #0]
			Integral = 0;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <GrandStatumix+0x1b4>)
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]

			if (stop_sense == 1){
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <GrandStatumix+0x19c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d118      	bne.n	800102e <GrandStatumix+0x186>
				grandState = work;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <GrandStatumix+0x190>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001002:	e014      	b.n	800102e <GrandStatumix+0x186>

	case emer:
		ResetParam();
 8001004:	f000 f82c 	bl	8001060 <ResetParam>
		// Reset every variables at control
		if (pwr_sense == 0){
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <GrandStatumix+0x1a4>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d110      	bne.n	8001032 <GrandStatumix+0x18a>
			grandState = Ready;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <GrandStatumix+0x190>)
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8001016:	2064      	movs	r0, #100	; 0x64
 8001018:	f001 f9ca 	bl	80023b0 <HAL_Delay>
			IOExpenderInit();
 800101c:	f000 f976 	bl	800130c <IOExpenderInit>
		}
	break;
 8001020:	e007      	b.n	8001032 <GrandStatumix+0x18a>
	break;
 8001022:	bf00      	nop
 8001024:	e006      	b.n	8001034 <GrandStatumix+0x18c>
	break;
 8001026:	bf00      	nop
 8001028:	e004      	b.n	8001034 <GrandStatumix+0x18c>
	break;
 800102a:	bf00      	nop
 800102c:	e002      	b.n	8001034 <GrandStatumix+0x18c>
		break;
 800102e:	bf00      	nop
 8001030:	e000      	b.n	8001034 <GrandStatumix+0x18c>
	break;
 8001032:	bf00      	nop
	}
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000280 	.word	0x20000280
 800103c:	40020400 	.word	0x40020400
 8001040:	40020800 	.word	0x40020800
 8001044:	20000282 	.word	0x20000282
 8001048:	2000000a 	.word	0x2000000a
 800104c:	20000281 	.word	0x20000281
 8001050:	200002e5 	.word	0x200002e5
 8001054:	200002f4 	.word	0x200002f4
 8001058:	200002e4 	.word	0x200002e4
 800105c:	20000308 	.word	0x20000308

08001060 <ResetParam>:
		}
		break;
	}
}

void ResetParam(){
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
	// Reset every variables at control
	// reset position buffer
	PWMOut = 0;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <ResetParam+0x44>)
 8001068:	2200      	movs	r2, #0
 800106a:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	e008      	b.n	8001084 <ResetParam+0x24>
		positionlog[position_order] = -1;
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <ResetParam+0x48>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <ResetParam+0x4c>)
 800107a:	21ff      	movs	r1, #255	; 0xff
 800107c:	5499      	strb	r1, [r3, r2]
	for(int i = 0; i <= position_order; i++){
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3301      	adds	r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <ResetParam+0x48>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4293      	cmp	r3, r2
 800108e:	ddf0      	ble.n	8001072 <ResetParam+0x12>
	}
	position_order = 0;
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <ResetParam+0x48>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2000000a 	.word	0x2000000a
 80010a8:	20000291 	.word	0x20000291
 80010ac:	20000000 	.word	0x20000000

080010b0 <GraytoBinario>:
////////// Absolute Encoder ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 80010b0:	b480      	push	{r7}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	460a      	mov	r2, r1
 80010ba:	80fb      	strh	r3, [r7, #6]
 80010bc:	4613      	mov	r3, r2
 80010be:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 80010c4:	88fa      	ldrh	r2, [r7, #6]
 80010c6:	797b      	ldrb	r3, [r7, #5]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	fa42 f303 	asr.w	r3, r2, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 80010d6:	2301      	movs	r3, #1
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	e01d      	b.n	8001118 <GraytoBinario+0x68>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 80010dc:	8afb      	ldrh	r3, [r7, #22]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 80010e4:	88fa      	ldrh	r2, [r7, #6]
 80010e6:	7979      	ldrb	r1, [r7, #5]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	3301      	adds	r3, #1
 80010ec:	1acb      	subs	r3, r1, r3
 80010ee:	fa42 f303 	asr.w	r3, r2, r3
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d103      	bne.n	8001108 <GraytoBinario+0x58>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 8001100:	8afb      	ldrh	r3, [r7, #22]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	82fb      	strh	r3, [r7, #22]
 8001106:	e004      	b.n	8001112 <GraytoBinario+0x62>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8001108:	8afb      	ldrh	r3, [r7, #22]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	b29b      	uxth	r3, r3
 800110e:	3301      	adds	r3, #1
 8001110:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	3301      	adds	r3, #1
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	797b      	ldrb	r3, [r7, #5]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbdd      	blt.n	80010dc <GraytoBinario+0x2c>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 8001120:	8afb      	ldrh	r3, [r7, #22]
}
 8001122:	4618      	mov	r0, r3
 8001124:	371c      	adds	r7, #28
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <PIDzero>:
	}
	RoundNumnd_sm =  summa / (CAPTURENUM-errcut);
}
*/
///////////////////// PID Zero /////////////////////////////
void PIDzero(){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	CrrntTime = micros();
 8001134:	f000 fdaa 	bl	8001c8c <micros>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff f912 	bl	8000368 <__aeabi_ul2f>
 8001144:	4603      	mov	r3, r0
 8001146:	4a32      	ldr	r2, [pc, #200]	; (8001210 <PIDzero+0xe0>)
 8001148:	6013      	str	r3, [r2, #0]
	DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
 800114a:	4b31      	ldr	r3, [pc, #196]	; (8001210 <PIDzero+0xe0>)
 800114c:	ed93 7a00 	vldr	s14, [r3]
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <PIDzero+0xe4>)
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	ee37 7a67 	vsub.f32	s14, s14, s15
 800115a:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001218 <PIDzero+0xe8>
 800115e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001162:	4b2e      	ldr	r3, [pc, #184]	; (800121c <PIDzero+0xec>)
 8001164:	edc3 7a00 	vstr	s15, [r3]
	PreviTime = CrrntTime; // log previ here for next loop
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <PIDzero+0xe0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a29      	ldr	r2, [pc, #164]	; (8001214 <PIDzero+0xe4>)
 800116e:	6013      	str	r3, [r2, #0]

	ErrPos[0] = TargetDeg - BinPosXI;
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <PIDzero+0xf0>)
 8001172:	ed93 7a00 	vldr	s14, [r3]
 8001176:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <PIDzero+0xf4>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <PIDzero+0xf8>)
 8001188:	edc3 7a00 	vstr	s15, [r3]

	Propo = K_P * ErrPos[0];
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <PIDzero+0xf8>)
 800118e:	ed93 7a00 	vldr	s14, [r3]
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <PIDzero+0xfc>)
 8001194:	edd3 7a00 	vldr	s15, [r3]
 8001198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <PIDzero+0x100>)
 800119e:	edc3 7a00 	vstr	s15, [r3]

	Integral = Integral + ( ErrPos[0] * DeltaTime ); // Integral -Newton-Leibniz
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <PIDzero+0xf8>)
 80011a4:	ed93 7a00 	vldr	s14, [r3]
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <PIDzero+0xec>)
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <PIDzero+0x104>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <PIDzero+0x104>)
 80011be:	edc3 7a00 	vstr	s15, [r3]

	Derivate = (ErrPos[0]-ErrPos[1]) / DeltaTime; // d/dt position
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <PIDzero+0xf8>)
 80011c4:	ed93 7a00 	vldr	s14, [r3]
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <PIDzero+0xf8>)
 80011ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ce:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <PIDzero+0xec>)
 80011d4:	ed93 7a00 	vldr	s14, [r3]
 80011d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <PIDzero+0x108>)
 80011de:	edc3 7a00 	vstr	s15, [r3]

	u_contr = Propo + (K_I * Integral) ; // PID u[k] + (K_D * Derivate)
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <PIDzero+0x10c>)
 80011e4:	ed93 7a00 	vldr	s14, [r3]
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <PIDzero+0x104>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <PIDzero+0x100>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <PIDzero+0x110>)
 80011fe:	edc3 7a00 	vstr	s15, [r3]

	ErrPos[1] = ErrPos[0]; // log previous error
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <PIDzero+0xf8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <PIDzero+0xf8>)
 8001208:	6053      	str	r3, [r2, #4]
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000300 	.word	0x20000300
 8001214:	200002f8 	.word	0x200002f8
 8001218:	49742400 	.word	0x49742400
 800121c:	200002fc 	.word	0x200002fc
 8001220:	200002e8 	.word	0x200002e8
 8001224:	2000029c 	.word	0x2000029c
 8001228:	200002ec 	.word	0x200002ec
 800122c:	2000000c 	.word	0x2000000c
 8001230:	20000304 	.word	0x20000304
 8001234:	20000308 	.word	0x20000308
 8001238:	2000030c 	.word	0x2000030c
 800123c:	20000010 	.word	0x20000010
 8001240:	200002f4 	.word	0x200002f4

08001244 <MotDrvCytron>:

void MotDrvCytron(){
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

	//   direction chk
	if(u_contr < 0){mot_dirctn= 0;}
 8001248:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <MotDrvCytron+0xb8>)
 800124a:	edd3 7a00 	vldr	s15, [r3]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	d503      	bpl.n	8001260 <MotDrvCytron+0x1c>
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MotDrvCytron+0xbc>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
 800125e:	e00e      	b.n	800127e <MotDrvCytron+0x3a>
	else if(u_contr > 0) {mot_dirctn = 1;}
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <MotDrvCytron+0xb8>)
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	dd03      	ble.n	8001278 <MotDrvCytron+0x34>
 8001270:	4b23      	ldr	r3, [pc, #140]	; (8001300 <MotDrvCytron+0xbc>)
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	e002      	b.n	800127e <MotDrvCytron+0x3a>
	else{PWMOut = 0;}
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <MotDrvCytron+0xc0>)
 800127a:	2200      	movs	r2, #0
 800127c:	801a      	strh	r2, [r3, #0]


	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MotDrvCytron+0xb8>)
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	eef0 7ae7 	vabs.f32	s15, s15
 8001288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128c:	ee17 3a90 	vmov	r3, s15
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MotDrvCytron+0xc0>)
 8001294:	801a      	strh	r2, [r3, #0]
	if(PWMOut > 5000){PWMOut = 5000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MotDrvCytron+0xc0>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	f241 3288 	movw	r2, #5000	; 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d903      	bls.n	80012aa <MotDrvCytron+0x66>
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MotDrvCytron+0xc0>)
 80012a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a8:	801a      	strh	r2, [r3, #0]
	if(PWMOut < 1600 && fabsf(ErrPos[0]) >= 4){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MotDrvCytron+0xc0>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80012b2:	d20f      	bcs.n	80012d4 <MotDrvCytron+0x90>
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MotDrvCytron+0xc4>)
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	eef0 7ae7 	vabs.f32	s15, s15
 80012be:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80012c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	db03      	blt.n	80012d4 <MotDrvCytron+0x90>
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <MotDrvCytron+0xc0>)
 80012ce:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80012d2:	801a      	strh	r2, [r3, #0]
	if(ErrPos[0] < 2){PWMOut = 0;}
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MotDrvCytron+0xc4>)
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80012de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e6:	d400      	bmi.n	80012ea <MotDrvCytron+0xa6>
}
 80012e8:	e002      	b.n	80012f0 <MotDrvCytron+0xac>
	if(ErrPos[0] < 2){PWMOut = 0;}
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MotDrvCytron+0xc0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	801a      	strh	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200002f4 	.word	0x200002f4
 8001300:	200002e4 	.word	0x200002e4
 8001304:	2000000a 	.word	0x2000000a
 8001308:	200002ec 	.word	0x200002ec

0800130c <IOExpenderInit>:

/////////////////////Abs Encoder I2C////////////////////////////////////////////
void IOExpenderInit() {// call when start system
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 8001312:	2364      	movs	r3, #100	; 0x64
 8001314:	9302      	str	r3, [sp, #8]
 8001316:	2316      	movs	r3, #22
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <IOExpenderInit+0x24>)
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	2200      	movs	r2, #0
 8001322:	2140      	movs	r1, #64	; 0x40
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <IOExpenderInit+0x28>)
 8001326:	f002 f89b 	bl	8003460 <HAL_I2C_Mem_Write>
			0x16, 100);
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000001c 	.word	0x2000001c
 8001334:	2000005c 	.word	0x2000005c

08001338 <AbsEncI2CReadx>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af04      	add	r7, sp, #16
 800133e:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <AbsEncI2CReadx+0xa4>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d044      	beq.n	80013d2 <AbsEncI2CReadx+0x9a>
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <AbsEncI2CReadx+0xa8>)
 800134a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b20      	cmp	r3, #32
 8001352:	d13e      	bne.n	80013d2 <AbsEncI2CReadx+0x9a>
		switch(flag_absenc){
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <AbsEncI2CReadx+0xa4>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d002      	beq.n	8001362 <AbsEncI2CReadx+0x2a>
 800135c:	2b02      	cmp	r3, #2
 800135e:	d010      	beq.n	8001382 <AbsEncI2CReadx+0x4a>
		default:
			break;
 8001360:	e038      	b.n	80013d4 <AbsEncI2CReadx+0x9c>

		case 1:
			//HAL_I2C_Master_Receive(&hi2c1, ADDR_IOXT, GrayCBitx, 1, 100);
			//HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, Size, XferOptions);
			HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 8001362:	2364      	movs	r3, #100	; 0x64
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	2302      	movs	r3, #2
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	2212      	movs	r2, #18
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	481a      	ldr	r0, [pc, #104]	; (80013e0 <AbsEncI2CReadx+0xa8>)
 8001376:	f002 f96d 	bl	8003654 <HAL_I2C_Mem_Read>
						RawRAB, 2, 100);
			flag_absenc = 2;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <AbsEncI2CReadx+0xa4>)
 800137c:	2202      	movs	r2, #2
 800137e:	701a      	strb	r2, [r3, #0]
		break;
 8001380:	e028      	b.n	80013d4 <AbsEncI2CReadx+0x9c>

		case 2:
			//invert in IPOL
			GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <AbsEncI2CReadx+0xac>)
 8001384:	785b      	ldrb	r3, [r3, #1]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b21a      	sxth	r2, r3
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <AbsEncI2CReadx+0xac>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b21b      	sxth	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b21b      	sxth	r3, r3
 8001394:	b29a      	uxth	r2, r3
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <AbsEncI2CReadx+0xb0>)
 8001398:	801a      	strh	r2, [r3, #0]

			//GrayCBitXI = ~GrayCBitx - 0b1111110000000000; // invert and clear 6 high
			//GrayCBitXI = ~GrayCBitx & 0b0000001111111111;
			BinPosXI = GraytoBinario(GrayCBitXI, 10) + POSOFFSET;  //
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <AbsEncI2CReadx+0xb0>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	210a      	movs	r1, #10
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fe85 	bl	80010b0 <GraytoBinario>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f2a3 3341 	subw	r3, r3, #833	; 0x341
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <AbsEncI2CReadx+0xb4>)
 80013b0:	801a      	strh	r2, [r3, #0]
			if (BinPosXI >= 1024){BinPosXI = BinPosXI % 1024;}
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <AbsEncI2CReadx+0xb4>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ba:	d306      	bcc.n	80013ca <AbsEncI2CReadx+0x92>
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <AbsEncI2CReadx+0xb4>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <AbsEncI2CReadx+0xb4>)
 80013c8:	801a      	strh	r2, [r3, #0]
			flag_absenc = 0;
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <AbsEncI2CReadx+0xa4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
		break;
 80013d0:	e000      	b.n	80013d4 <AbsEncI2CReadx+0x9c>
		}
	}
 80013d2:	bf00      	nop
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000029e 	.word	0x2000029e
 80013e0:	2000005c 	.word	0x2000005c
 80013e4:	20000298 	.word	0x20000298
 80013e8:	2000029a 	.word	0x2000029a
 80013ec:	2000029c 	.word	0x2000029c

080013f0 <Efft_activate>:
//////////////// End Effector /////////////////////////////////
void Efft_activate(){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 80013f6:	2345      	movs	r3, #69	; 0x45
 80013f8:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;
	switch(efshoot){
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <Efft_activate+0x7c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d015      	beq.n	800142e <Efft_activate+0x3e>
	default:
	case ef_INIT:
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <Efft_activate+0x80>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d029      	beq.n	800145e <Efft_activate+0x6e>
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <Efft_activate+0x84>)
 800140c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b20      	cmp	r3, #32
 8001414:	d123      	bne.n	800145e <Efft_activate+0x6e>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 8001416:	1dfa      	adds	r2, r7, #7
 8001418:	2301      	movs	r3, #1
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2300      	movs	r3, #0
 800141e:	2146      	movs	r1, #70	; 0x46
 8001420:	4814      	ldr	r0, [pc, #80]	; (8001474 <Efft_activate+0x84>)
 8001422:	f002 fb3d 	bl	8003aa0 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <Efft_activate+0x7c>)
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
		}
	break;
 800142c:	e017      	b.n	800145e <Efft_activate+0x6e>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <Efft_activate+0x84>)
 8001430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b20      	cmp	r3, #32
 8001438:	d113      	bne.n	8001462 <Efft_activate+0x72>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 800143a:	1dfa      	adds	r2, r7, #7
 800143c:	2320      	movs	r3, #32
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	2146      	movs	r1, #70	; 0x46
 8001444:	480b      	ldr	r0, [pc, #44]	; (8001474 <Efft_activate+0x84>)
 8001446:	f002 fb2b 	bl	8003aa0 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <Efft_activate+0x7c>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <Efft_activate+0x80>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 1;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <Efft_activate+0x88>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
		}
	break;
 800145c:	e001      	b.n	8001462 <Efft_activate+0x72>
	break;
 800145e:	bf00      	nop
 8001460:	e000      	b.n	8001464 <Efft_activate+0x74>
	break;
 8001462:	bf00      	nop
	}

}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000355 	.word	0x20000355
 8001470:	20000311 	.word	0x20000311
 8001474:	200000b0 	.word	0x200000b0
 8001478:	20000313 	.word	0x20000313

0800147c <Efft_read>:
void Efft_read(uint8_t *Rddata){
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af02      	add	r7, sp, #8
 8001482:	6078      	str	r0, [r7, #4]
		HAL_I2C_Mem_Read_IT(&hi2c3, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1);
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	switch(efrdStatus){
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <Efft_read+0x74>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d015      	beq.n	80014b8 <Efft_read+0x3c>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <Efft_read+0x78>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d026      	beq.n	80014e2 <Efft_read+0x66>
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <Efft_read+0x7c>)
 8001496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b20      	cmp	r3, #32
 800149e:	d120      	bne.n	80014e2 <Efft_read+0x66>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 80014a0:	2302      	movs	r3, #2
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2301      	movs	r3, #1
 80014a6:	4a15      	ldr	r2, [pc, #84]	; (80014fc <Efft_read+0x80>)
 80014a8:	2146      	movs	r1, #70	; 0x46
 80014aa:	4813      	ldr	r0, [pc, #76]	; (80014f8 <Efft_read+0x7c>)
 80014ac:	f002 faf8 	bl	8003aa0 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <Efft_read+0x74>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
		}
	break;
 80014b6:	e014      	b.n	80014e2 <Efft_read+0x66>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <Efft_read+0x7c>)
 80014ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	d110      	bne.n	80014e6 <Efft_read+0x6a>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 80014c4:	2320      	movs	r3, #32
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2301      	movs	r3, #1
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	2146      	movs	r1, #70	; 0x46
 80014ce:	480a      	ldr	r0, [pc, #40]	; (80014f8 <Efft_read+0x7c>)
 80014d0:	f002 fbac 	bl	8003c2c <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <Efft_read+0x78>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <Efft_read+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
			}
	break;
 80014e0:	e001      	b.n	80014e6 <Efft_read+0x6a>
	break;
 80014e2:	bf00      	nop
 80014e4:	e000      	b.n	80014e8 <Efft_read+0x6c>
	break;
 80014e6:	bf00      	nop
	}

}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000356 	.word	0x20000356
 80014f4:	20000312 	.word	0x20000312
 80014f8:	200000b0 	.word	0x200000b0
 80014fc:	20000032 	.word	0x20000032

08001500 <All_mode_UARTUI>:
/////////////////UART UI Base System ////////////////////////////

void All_mode_UARTUI()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
	// DataIn = 1 byte Data from UART Recieve
	switch (chkM){				// Check mode State
 8001506:	4b83      	ldr	r3, [pc, #524]	; (8001714 <All_mode_UARTUI+0x214>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d015      	beq.n	800153a <All_mode_UARTUI+0x3a>
 800150e:	2b02      	cmp	r3, #2
 8001510:	d02b      	beq.n	800156a <All_mode_UARTUI+0x6a>
		default:
		case 0: 				// Check start INIT
			StartM = DataIn;    // 	Use in Checksum Frame 3
 8001512:	4b81      	ldr	r3, [pc, #516]	; (8001718 <All_mode_UARTUI+0x218>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b80      	ldr	r3, [pc, #512]	; (800171c <All_mode_UARTUI+0x21c>)
 800151a:	701a      	strb	r2, [r3, #0]
			uint8_t chkStart = DataIn >> 4;
 800151c:	4b7e      	ldr	r3, [pc, #504]	; (8001718 <All_mode_UARTUI+0x218>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	111b      	asrs	r3, r3, #4
 8001522:	71fb      	strb	r3, [r7, #7]
			if (chkStart == 9){ // 9 0b1001
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b09      	cmp	r3, #9
 8001528:	d103      	bne.n	8001532 <All_mode_UARTUI+0x32>
				chkM = 1;
 800152a:	4b7a      	ldr	r3, [pc, #488]	; (8001714 <All_mode_UARTUI+0x214>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
			}else{chkM = 0;}
			break;
 8001530:	e2f6      	b.n	8001b20 <All_mode_UARTUI+0x620>
			}else{chkM = 0;}
 8001532:	4b78      	ldr	r3, [pc, #480]	; (8001714 <All_mode_UARTUI+0x214>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
			break;
 8001538:	e2f2      	b.n	8001b20 <All_mode_UARTUI+0x620>

		case 1:					// Check if mode 1 - 14 or not
			NameM = (DataIn & 15); // 0b00001111
 800153a:	4b77      	ldr	r3, [pc, #476]	; (8001718 <All_mode_UARTUI+0x218>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4b76      	ldr	r3, [pc, #472]	; (8001720 <All_mode_UARTUI+0x220>)
 8001548:	701a      	strb	r2, [r3, #0]
			if (NameM >= 1 && NameM <= 14){
 800154a:	4b75      	ldr	r3, [pc, #468]	; (8001720 <All_mode_UARTUI+0x220>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d007      	beq.n	8001562 <All_mode_UARTUI+0x62>
 8001552:	4b73      	ldr	r3, [pc, #460]	; (8001720 <All_mode_UARTUI+0x220>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b0e      	cmp	r3, #14
 8001558:	d803      	bhi.n	8001562 <All_mode_UARTUI+0x62>
				chkM = 2;
 800155a:	4b6e      	ldr	r3, [pc, #440]	; (8001714 <All_mode_UARTUI+0x214>)
 800155c:	2202      	movs	r2, #2
 800155e:	701a      	strb	r2, [r3, #0]
			}
			else{chkM = 0;}
			break;
 8001560:	e2de      	b.n	8001b20 <All_mode_UARTUI+0x620>
			else{chkM = 0;}
 8001562:	4b6c      	ldr	r3, [pc, #432]	; (8001714 <All_mode_UARTUI+0x214>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
			break;
 8001568:	e2da      	b.n	8001b20 <All_mode_UARTUI+0x620>
		///////////////////////// // 14Mode work State //////////////////////////
		case 2:
		switch (NameM){			// 14Mode work State
 800156a:	4b6d      	ldr	r3, [pc, #436]	; (8001720 <All_mode_UARTUI+0x220>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	3b01      	subs	r3, #1
 8001570:	2b0d      	cmp	r3, #13
 8001572:	f200 82d4 	bhi.w	8001b1e <All_mode_UARTUI+0x61e>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <All_mode_UARTUI+0x7c>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	080015b5 	.word	0x080015b5
 8001580:	08001627 	.word	0x08001627
 8001584:	08001665 	.word	0x08001665
 8001588:	080016a3 	.word	0x080016a3
 800158c:	08001745 	.word	0x08001745
 8001590:	080017b7 	.word	0x080017b7
 8001594:	08001829 	.word	0x08001829
 8001598:	080018cb 	.word	0x080018cb
 800159c:	08001923 	.word	0x08001923
 80015a0:	08001961 	.word	0x08001961
 80015a4:	080019e5 	.word	0x080019e5
 80015a8:	08001a1f 	.word	0x08001a1f
 80015ac:	08001a61 	.word	0x08001a61
 80015b0:	08001aa9 	.word	0x08001aa9
				case 1:			// Check
					if (dataFN == 2){
 80015b4:	4b5b      	ldr	r3, [pc, #364]	; (8001724 <All_mode_UARTUI+0x224>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d104      	bne.n	80015c6 <All_mode_UARTUI+0xc6>
						dataF1 = DataIn;
 80015bc:	4b56      	ldr	r3, [pc, #344]	; (8001718 <All_mode_UARTUI+0x218>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b59      	ldr	r3, [pc, #356]	; (8001728 <All_mode_UARTUI+0x228>)
 80015c4:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 80015c6:	4b57      	ldr	r3, [pc, #348]	; (8001724 <All_mode_UARTUI+0x224>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d104      	bne.n	80015d8 <All_mode_UARTUI+0xd8>
						dataF2 = DataIn;
 80015ce:	4b52      	ldr	r3, [pc, #328]	; (8001718 <All_mode_UARTUI+0x218>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b55      	ldr	r3, [pc, #340]	; (800172c <All_mode_UARTUI+0x22c>)
 80015d6:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 80015d8:	4b4f      	ldr	r3, [pc, #316]	; (8001718 <All_mode_UARTUI+0x218>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b54      	ldr	r3, [pc, #336]	; (8001730 <All_mode_UARTUI+0x230>)
 80015e0:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80015e2:	4b4e      	ldr	r3, [pc, #312]	; (800171c <All_mode_UARTUI+0x21c>)
 80015e4:	781a      	ldrb	r2, [r3, #0]
 80015e6:	4b50      	ldr	r3, [pc, #320]	; (8001728 <All_mode_UARTUI+0x228>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b4f      	ldr	r3, [pc, #316]	; (800172c <All_mode_UARTUI+0x22c>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b4e      	ldr	r3, [pc, #312]	; (8001734 <All_mode_UARTUI+0x234>)
 80015fc:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 80015fe:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <All_mode_UARTUI+0x230>)
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <All_mode_UARTUI+0x234>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	f040 8270 	bne.w	8001aec <All_mode_UARTUI+0x5ec>
						//M_state = 1;
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	2202      	movs	r2, #2
 8001610:	4949      	ldr	r1, [pc, #292]	; (8001738 <All_mode_UARTUI+0x238>)
 8001612:	484a      	ldr	r0, [pc, #296]	; (800173c <All_mode_UARTUI+0x23c>)
 8001614:	f006 fde5 	bl	80081e2 <HAL_UART_Transmit>
						chkM = 0;
 8001618:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <All_mode_UARTUI+0x214>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800161e:	4b41      	ldr	r3, [pc, #260]	; (8001724 <All_mode_UARTUI+0x224>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001624:	e262      	b.n	8001aec <All_mode_UARTUI+0x5ec>
				case 2:			// MCU Connect ,2 byte DataFrame 1
					chksum = DataIn;
 8001626:	4b3c      	ldr	r3, [pc, #240]	; (8001718 <All_mode_UARTUI+0x218>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b40      	ldr	r3, [pc, #256]	; (8001730 <All_mode_UARTUI+0x230>)
 800162e:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);	// Check condition from manual
 8001630:	4b3a      	ldr	r3, [pc, #232]	; (800171c <All_mode_UARTUI+0x21c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	43db      	mvns	r3, r3
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b41      	ldr	r3, [pc, #260]	; (8001740 <All_mode_UARTUI+0x240>)
 800163a:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){	// Transmit back ack1
 800163c:	4b3c      	ldr	r3, [pc, #240]	; (8001730 <All_mode_UARTUI+0x230>)
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <All_mode_UARTUI+0x240>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	f040 8253 	bne.w	8001af0 <All_mode_UARTUI+0x5f0>
						//M_state = 2;
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 800164a:	2364      	movs	r3, #100	; 0x64
 800164c:	2202      	movs	r2, #2
 800164e:	493a      	ldr	r1, [pc, #232]	; (8001738 <All_mode_UARTUI+0x238>)
 8001650:	483a      	ldr	r0, [pc, #232]	; (800173c <All_mode_UARTUI+0x23c>)
 8001652:	f006 fdc6 	bl	80081e2 <HAL_UART_Transmit>
						chkM = 0;
 8001656:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <All_mode_UARTUI+0x214>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800165c:	4b31      	ldr	r3, [pc, #196]	; (8001724 <All_mode_UARTUI+0x224>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
					}

					break;
 8001662:	e245      	b.n	8001af0 <All_mode_UARTUI+0x5f0>
				case 3:			// MCU DisConnect ,2 byte DataFrame 1
					chksum = DataIn;
 8001664:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <All_mode_UARTUI+0x218>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b31      	ldr	r3, [pc, #196]	; (8001730 <All_mode_UARTUI+0x230>)
 800166c:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <All_mode_UARTUI+0x21c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	43db      	mvns	r3, r3
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b32      	ldr	r3, [pc, #200]	; (8001740 <All_mode_UARTUI+0x240>)
 8001678:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 800167a:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <All_mode_UARTUI+0x230>)
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	4b30      	ldr	r3, [pc, #192]	; (8001740 <All_mode_UARTUI+0x240>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	f040 8236 	bne.w	8001af4 <All_mode_UARTUI+0x5f4>
						//M_state = 3;
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001688:	2364      	movs	r3, #100	; 0x64
 800168a:	2202      	movs	r2, #2
 800168c:	492a      	ldr	r1, [pc, #168]	; (8001738 <All_mode_UARTUI+0x238>)
 800168e:	482b      	ldr	r0, [pc, #172]	; (800173c <All_mode_UARTUI+0x23c>)
 8001690:	f006 fda7 	bl	80081e2 <HAL_UART_Transmit>
						chkM = 0;
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <All_mode_UARTUI+0x214>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <All_mode_UARTUI+0x224>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
					}
					break;
 80016a0:	e228      	b.n	8001af4 <All_mode_UARTUI+0x5f4>
				case 4:			// Set Angular Velocity
					if (dataFN == 2){
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <All_mode_UARTUI+0x224>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d104      	bne.n	80016b4 <All_mode_UARTUI+0x1b4>
						dataF1 = DataIn;
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <All_mode_UARTUI+0x218>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <All_mode_UARTUI+0x228>)
 80016b2:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <All_mode_UARTUI+0x224>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d104      	bne.n	80016c6 <All_mode_UARTUI+0x1c6>
						dataF2 = DataIn;
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <All_mode_UARTUI+0x218>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <All_mode_UARTUI+0x22c>)
 80016c4:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <All_mode_UARTUI+0x218>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <All_mode_UARTUI+0x230>)
 80016ce:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <All_mode_UARTUI+0x21c>)
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <All_mode_UARTUI+0x228>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <All_mode_UARTUI+0x22c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <All_mode_UARTUI+0x234>)
 80016ea:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <All_mode_UARTUI+0x230>)
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <All_mode_UARTUI+0x234>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	f040 81ff 	bne.w	8001af8 <All_mode_UARTUI+0x5f8>
						//M_state = 4;
						/// Add work here///////////
												///////////////////////////
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100);
 80016fa:	2364      	movs	r3, #100	; 0x64
 80016fc:	2202      	movs	r2, #2
 80016fe:	490e      	ldr	r1, [pc, #56]	; (8001738 <All_mode_UARTUI+0x238>)
 8001700:	480e      	ldr	r0, [pc, #56]	; (800173c <All_mode_UARTUI+0x23c>)
 8001702:	f006 fd6e 	bl	80081e2 <HAL_UART_Transmit>
						chkM = 0;
 8001706:	4b03      	ldr	r3, [pc, #12]	; (8001714 <All_mode_UARTUI+0x214>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <All_mode_UARTUI+0x224>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001712:	e1f1      	b.n	8001af8 <All_mode_UARTUI+0x5f8>
 8001714:	20000348 	.word	0x20000348
 8001718:	20000344 	.word	0x20000344
 800171c:	20000349 	.word	0x20000349
 8001720:	2000034a 	.word	0x2000034a
 8001724:	2000034b 	.word	0x2000034b
 8001728:	2000034d 	.word	0x2000034d
 800172c:	2000034e 	.word	0x2000034e
 8001730:	20000350 	.word	0x20000350
 8001734:	20000352 	.word	0x20000352
 8001738:	20000014 	.word	0x20000014
 800173c:	2000023c 	.word	0x2000023c
 8001740:	20000351 	.word	0x20000351
				case 5:			// Set Angular Position
					if (dataFN == 2){
 8001744:	4b96      	ldr	r3, [pc, #600]	; (80019a0 <All_mode_UARTUI+0x4a0>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d104      	bne.n	8001756 <All_mode_UARTUI+0x256>
						dataF1 = DataIn;
 800174c:	4b95      	ldr	r3, [pc, #596]	; (80019a4 <All_mode_UARTUI+0x4a4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b95      	ldr	r3, [pc, #596]	; (80019a8 <All_mode_UARTUI+0x4a8>)
 8001754:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 8001756:	4b92      	ldr	r3, [pc, #584]	; (80019a0 <All_mode_UARTUI+0x4a0>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d104      	bne.n	8001768 <All_mode_UARTUI+0x268>
						dataF2 = DataIn;
 800175e:	4b91      	ldr	r3, [pc, #580]	; (80019a4 <All_mode_UARTUI+0x4a4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b91      	ldr	r3, [pc, #580]	; (80019ac <All_mode_UARTUI+0x4ac>)
 8001766:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 8001768:	4b8e      	ldr	r3, [pc, #568]	; (80019a4 <All_mode_UARTUI+0x4a4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b90      	ldr	r3, [pc, #576]	; (80019b0 <All_mode_UARTUI+0x4b0>)
 8001770:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8001772:	4b90      	ldr	r3, [pc, #576]	; (80019b4 <All_mode_UARTUI+0x4b4>)
 8001774:	781a      	ldrb	r2, [r3, #0]
 8001776:	4b8c      	ldr	r3, [pc, #560]	; (80019a8 <All_mode_UARTUI+0x4a8>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b8b      	ldr	r3, [pc, #556]	; (80019ac <All_mode_UARTUI+0x4ac>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	b2db      	uxtb	r3, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b8b      	ldr	r3, [pc, #556]	; (80019b8 <All_mode_UARTUI+0x4b8>)
 800178c:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 800178e:	4b88      	ldr	r3, [pc, #544]	; (80019b0 <All_mode_UARTUI+0x4b0>)
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	4b89      	ldr	r3, [pc, #548]	; (80019b8 <All_mode_UARTUI+0x4b8>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	f040 81b0 	bne.w	8001afc <All_mode_UARTUI+0x5fc>
						//M_state = 5;
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100);
 800179c:	2364      	movs	r3, #100	; 0x64
 800179e:	2202      	movs	r2, #2
 80017a0:	4986      	ldr	r1, [pc, #536]	; (80019bc <All_mode_UARTUI+0x4bc>)
 80017a2:	4887      	ldr	r0, [pc, #540]	; (80019c0 <All_mode_UARTUI+0x4c0>)
 80017a4:	f006 fd1d 	bl	80081e2 <HAL_UART_Transmit>
						chkM = 0;
 80017a8:	4b86      	ldr	r3, [pc, #536]	; (80019c4 <All_mode_UARTUI+0x4c4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80017ae:	4b7c      	ldr	r3, [pc, #496]	; (80019a0 <All_mode_UARTUI+0x4a0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
					}
					break;
 80017b4:	e1a2      	b.n	8001afc <All_mode_UARTUI+0x5fc>
				case 6:			// Set goal single station
					if (dataFN == 2){
 80017b6:	4b7a      	ldr	r3, [pc, #488]	; (80019a0 <All_mode_UARTUI+0x4a0>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d104      	bne.n	80017c8 <All_mode_UARTUI+0x2c8>
						dataF1 = DataIn;
 80017be:	4b79      	ldr	r3, [pc, #484]	; (80019a4 <All_mode_UARTUI+0x4a4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b78      	ldr	r3, [pc, #480]	; (80019a8 <All_mode_UARTUI+0x4a8>)
 80017c6:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 80017c8:	4b75      	ldr	r3, [pc, #468]	; (80019a0 <All_mode_UARTUI+0x4a0>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d104      	bne.n	80017da <All_mode_UARTUI+0x2da>
						dataF2 = DataIn;
 80017d0:	4b74      	ldr	r3, [pc, #464]	; (80019a4 <All_mode_UARTUI+0x4a4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b75      	ldr	r3, [pc, #468]	; (80019ac <All_mode_UARTUI+0x4ac>)
 80017d8:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 80017da:	4b72      	ldr	r3, [pc, #456]	; (80019a4 <All_mode_UARTUI+0x4a4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b73      	ldr	r3, [pc, #460]	; (80019b0 <All_mode_UARTUI+0x4b0>)
 80017e2:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80017e4:	4b73      	ldr	r3, [pc, #460]	; (80019b4 <All_mode_UARTUI+0x4b4>)
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	4b6f      	ldr	r3, [pc, #444]	; (80019a8 <All_mode_UARTUI+0x4a8>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b6e      	ldr	r3, [pc, #440]	; (80019ac <All_mode_UARTUI+0x4ac>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	4b6e      	ldr	r3, [pc, #440]	; (80019b8 <All_mode_UARTUI+0x4b8>)
 80017fe:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 8001800:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <All_mode_UARTUI+0x4b0>)
 8001802:	781a      	ldrb	r2, [r3, #0]
 8001804:	4b6c      	ldr	r3, [pc, #432]	; (80019b8 <All_mode_UARTUI+0x4b8>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8179 	bne.w	8001b00 <All_mode_UARTUI+0x600>
						//M_state = 6;
						/// Add work here///////////
												///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100);
 800180e:	2364      	movs	r3, #100	; 0x64
 8001810:	2202      	movs	r2, #2
 8001812:	496a      	ldr	r1, [pc, #424]	; (80019bc <All_mode_UARTUI+0x4bc>)
 8001814:	486a      	ldr	r0, [pc, #424]	; (80019c0 <All_mode_UARTUI+0x4c0>)
 8001816:	f006 fce4 	bl	80081e2 <HAL_UART_Transmit>
						chkM = 0;
 800181a:	4b6a      	ldr	r3, [pc, #424]	; (80019c4 <All_mode_UARTUI+0x4c4>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001820:	4b5f      	ldr	r3, [pc, #380]	; (80019a0 <All_mode_UARTUI+0x4a0>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001826:	e16b      	b.n	8001b00 <All_mode_UARTUI+0x600>
				case 7:			//set Goal multiple station
					if (dataFN == 2){
 8001828:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <All_mode_UARTUI+0x4a0>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d104      	bne.n	800183a <All_mode_UARTUI+0x33a>
						Nstation = DataIn;
 8001830:	4b5c      	ldr	r3, [pc, #368]	; (80019a4 <All_mode_UARTUI+0x4a4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b64      	ldr	r3, [pc, #400]	; (80019c8 <All_mode_UARTUI+0x4c8>)
 8001838:	701a      	strb	r2, [r3, #0]
					}
					if (dataFN < Nstation + 3){
 800183a:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <All_mode_UARTUI+0x4c8>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	3302      	adds	r3, #2
 8001840:	4a57      	ldr	r2, [pc, #348]	; (80019a0 <All_mode_UARTUI+0x4a0>)
 8001842:	7812      	ldrb	r2, [r2, #0]
 8001844:	4293      	cmp	r3, r2
 8001846:	db16      	blt.n	8001876 <All_mode_UARTUI+0x376>
						if (dataFN == countN + 3){
 8001848:	4b55      	ldr	r3, [pc, #340]	; (80019a0 <All_mode_UARTUI+0x4a0>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b5f      	ldr	r3, [pc, #380]	; (80019cc <All_mode_UARTUI+0x4cc>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	3303      	adds	r3, #3
 8001854:	429a      	cmp	r2, r3
 8001856:	d10e      	bne.n	8001876 <All_mode_UARTUI+0x376>
							dataFSum += DataIn;
 8001858:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <All_mode_UARTUI+0x4a4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4b5c      	ldr	r3, [pc, #368]	; (80019d0 <All_mode_UARTUI+0x4d0>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b5a      	ldr	r3, [pc, #360]	; (80019d0 <All_mode_UARTUI+0x4d0>)
 8001868:	701a      	strb	r2, [r3, #0]
							countN += 1;
 800186a:	4b58      	ldr	r3, [pc, #352]	; (80019cc <All_mode_UARTUI+0x4cc>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4b56      	ldr	r3, [pc, #344]	; (80019cc <All_mode_UARTUI+0x4cc>)
 8001874:	701a      	strb	r2, [r3, #0]
						}
					}
					chksum = DataIn;
 8001876:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <All_mode_UARTUI+0x4a4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <All_mode_UARTUI+0x4b0>)
 800187e:	701a      	strb	r2, [r3, #0]
					chksum3 = ~(StartM + Nstation + dataFSum);
 8001880:	4b4c      	ldr	r3, [pc, #304]	; (80019b4 <All_mode_UARTUI+0x4b4>)
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <All_mode_UARTUI+0x4c8>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4413      	add	r3, r2
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <All_mode_UARTUI+0x4d0>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4413      	add	r3, r2
 8001892:	b2db      	uxtb	r3, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b4e      	ldr	r3, [pc, #312]	; (80019d4 <All_mode_UARTUI+0x4d4>)
 800189a:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum3){
 800189c:	4b44      	ldr	r3, [pc, #272]	; (80019b0 <All_mode_UARTUI+0x4b0>)
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	4b4c      	ldr	r3, [pc, #304]	; (80019d4 <All_mode_UARTUI+0x4d4>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	f040 812d 	bne.w	8001b04 <All_mode_UARTUI+0x604>
						//M_state = 7;
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100);
 80018aa:	2364      	movs	r3, #100	; 0x64
 80018ac:	2202      	movs	r2, #2
 80018ae:	4943      	ldr	r1, [pc, #268]	; (80019bc <All_mode_UARTUI+0x4bc>)
 80018b0:	4843      	ldr	r0, [pc, #268]	; (80019c0 <All_mode_UARTUI+0x4c0>)
 80018b2:	f006 fc96 	bl	80081e2 <HAL_UART_Transmit>
						chkM = 0;
 80018b6:	4b43      	ldr	r3, [pc, #268]	; (80019c4 <All_mode_UARTUI+0x4c4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80018bc:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <All_mode_UARTUI+0x4a0>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
						countN = 0;
 80018c2:	4b42      	ldr	r3, [pc, #264]	; (80019cc <All_mode_UARTUI+0x4cc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
					}
					break;
 80018c8:	e11c      	b.n	8001b04 <All_mode_UARTUI+0x604>
				case 8:			// Order Go to that position
					chksum = DataIn;
 80018ca:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <All_mode_UARTUI+0x4a4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <All_mode_UARTUI+0x4b0>)
 80018d2:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80018d4:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <All_mode_UARTUI+0x4b4>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	43db      	mvns	r3, r3
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <All_mode_UARTUI+0x4d8>)
 80018de:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 80018e0:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <All_mode_UARTUI+0x4b0>)
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <All_mode_UARTUI+0x4d8>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f040 810d 	bne.w	8001b08 <All_mode_UARTUI+0x608>
						//M_state = 8;
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 80018ee:	2364      	movs	r3, #100	; 0x64
 80018f0:	2202      	movs	r2, #2
 80018f2:	4932      	ldr	r1, [pc, #200]	; (80019bc <All_mode_UARTUI+0x4bc>)
 80018f4:	4832      	ldr	r0, [pc, #200]	; (80019c0 <All_mode_UARTUI+0x4c0>)
 80018f6:	f006 fc74 	bl	80081e2 <HAL_UART_Transmit>
						//// simulate workload
						HAL_Delay(1000);
 80018fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018fe:	f000 fd57 	bl	80023b0 <HAL_Delay>
						grandState = work;
 8001902:	4b36      	ldr	r3, [pc, #216]	; (80019dc <All_mode_UARTUI+0x4dc>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_f, 2 ,100);//Fn
 8001908:	2364      	movs	r3, #100	; 0x64
 800190a:	2202      	movs	r2, #2
 800190c:	4934      	ldr	r1, [pc, #208]	; (80019e0 <All_mode_UARTUI+0x4e0>)
 800190e:	482c      	ldr	r0, [pc, #176]	; (80019c0 <All_mode_UARTUI+0x4c0>)
 8001910:	f006 fc67 	bl	80081e2 <HAL_UART_Transmit>
						chkM = 0;
 8001914:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <All_mode_UARTUI+0x4c4>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800191a:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <All_mode_UARTUI+0x4a0>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001920:	e0f2      	b.n	8001b08 <All_mode_UARTUI+0x608>

				////////////// Frame 2 ////////////////////////////////////////
				case 9:			// Request Current Station
					chksum = DataIn;
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <All_mode_UARTUI+0x4a4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <All_mode_UARTUI+0x4b0>)
 800192a:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <All_mode_UARTUI+0x4b4>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	43db      	mvns	r3, r3
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <All_mode_UARTUI+0x4d8>)
 8001936:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <All_mode_UARTUI+0x4b0>)
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <All_mode_UARTUI+0x4d8>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	f040 80e3 	bne.w	8001b0c <All_mode_UARTUI+0x60c>
						//M_state = 9;
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001946:	2364      	movs	r3, #100	; 0x64
 8001948:	2202      	movs	r2, #2
 800194a:	491c      	ldr	r1, [pc, #112]	; (80019bc <All_mode_UARTUI+0x4bc>)
 800194c:	481c      	ldr	r0, [pc, #112]	; (80019c0 <All_mode_UARTUI+0x4c0>)
 800194e:	f006 fc48 	bl	80081e2 <HAL_UART_Transmit>
						chkM = 0;
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <All_mode_UARTUI+0x4c4>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <All_mode_UARTUI+0x4a0>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
					}
					break;
 800195e:	e0d5      	b.n	8001b0c <All_mode_UARTUI+0x60c>
				case 10:	// Request angular position
					chksum = DataIn;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <All_mode_UARTUI+0x4a4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <All_mode_UARTUI+0x4b0>)
 8001968:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <All_mode_UARTUI+0x4b4>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	43db      	mvns	r3, r3
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <All_mode_UARTUI+0x4d8>)
 8001974:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <All_mode_UARTUI+0x4b0>)
 8001978:	781a      	ldrb	r2, [r3, #0]
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <All_mode_UARTUI+0x4d8>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	f040 80c6 	bne.w	8001b10 <All_mode_UARTUI+0x610>
						//M_state = 10;
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001984:	2364      	movs	r3, #100	; 0x64
 8001986:	2202      	movs	r2, #2
 8001988:	490c      	ldr	r1, [pc, #48]	; (80019bc <All_mode_UARTUI+0x4bc>)
 800198a:	480d      	ldr	r0, [pc, #52]	; (80019c0 <All_mode_UARTUI+0x4c0>)
 800198c:	f006 fc29 	bl	80081e2 <HAL_UART_Transmit>
						/// Add work here///////////
						///////////////////////////

						//uint16_t angu = BinPosXI * 360 / 1024;
						//HAL_UART_Transmit(&huart2, (uint16_t*)angu, 2 ,100);
						chkM = 0;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <All_mode_UARTUI+0x4c4>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001996:	4b02      	ldr	r3, [pc, #8]	; (80019a0 <All_mode_UARTUI+0x4a0>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
					}
					break;
 800199c:	e0b8      	b.n	8001b10 <All_mode_UARTUI+0x610>
 800199e:	bf00      	nop
 80019a0:	2000034b 	.word	0x2000034b
 80019a4:	20000344 	.word	0x20000344
 80019a8:	2000034d 	.word	0x2000034d
 80019ac:	2000034e 	.word	0x2000034e
 80019b0:	20000350 	.word	0x20000350
 80019b4:	20000349 	.word	0x20000349
 80019b8:	20000352 	.word	0x20000352
 80019bc:	20000014 	.word	0x20000014
 80019c0:	2000023c 	.word	0x2000023c
 80019c4:	20000348 	.word	0x20000348
 80019c8:	2000034c 	.word	0x2000034c
 80019cc:	20000354 	.word	0x20000354
 80019d0:	2000034f 	.word	0x2000034f
 80019d4:	20000353 	.word	0x20000353
 80019d8:	20000351 	.word	0x20000351
 80019dc:	20000280 	.word	0x20000280
 80019e0:	20000018 	.word	0x20000018
				case 11:		// Request Max Velo
					chksum = DataIn;
 80019e4:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <All_mode_UARTUI+0x628>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <All_mode_UARTUI+0x62c>)
 80019ec:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80019ee:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <All_mode_UARTUI+0x630>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4b4f      	ldr	r3, [pc, #316]	; (8001b34 <All_mode_UARTUI+0x634>)
 80019f8:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 80019fa:	4b4c      	ldr	r3, [pc, #304]	; (8001b2c <All_mode_UARTUI+0x62c>)
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <All_mode_UARTUI+0x634>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d10b      	bne.n	8001a1e <All_mode_UARTUI+0x51e>
						//M_state = 11;
						/// Add work here///////////
												///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001a06:	2364      	movs	r3, #100	; 0x64
 8001a08:	2202      	movs	r2, #2
 8001a0a:	494b      	ldr	r1, [pc, #300]	; (8001b38 <All_mode_UARTUI+0x638>)
 8001a0c:	484b      	ldr	r0, [pc, #300]	; (8001b3c <All_mode_UARTUI+0x63c>)
 8001a0e:	f006 fbe8 	bl	80081e2 <HAL_UART_Transmit>
						chkM = 0;
 8001a12:	4b4b      	ldr	r3, [pc, #300]	; (8001b40 <All_mode_UARTUI+0x640>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001a18:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <All_mode_UARTUI+0x644>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
					}
				case 12:	// 12 Enable end effector
					chksum = DataIn;
 8001a1e:	4b42      	ldr	r3, [pc, #264]	; (8001b28 <All_mode_UARTUI+0x628>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <All_mode_UARTUI+0x62c>)
 8001a26:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8001a28:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <All_mode_UARTUI+0x630>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b40      	ldr	r3, [pc, #256]	; (8001b34 <All_mode_UARTUI+0x634>)
 8001a32:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8001a34:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <All_mode_UARTUI+0x62c>)
 8001a36:	781a      	ldrb	r2, [r3, #0]
 8001a38:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <All_mode_UARTUI+0x634>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d169      	bne.n	8001b14 <All_mode_UARTUI+0x614>
						//M_state = 12;
						flag_efftActi = 1;
 8001a40:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <All_mode_UARTUI+0x648>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]

						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001a46:	2364      	movs	r3, #100	; 0x64
 8001a48:	2202      	movs	r2, #2
 8001a4a:	493b      	ldr	r1, [pc, #236]	; (8001b38 <All_mode_UARTUI+0x638>)
 8001a4c:	483b      	ldr	r0, [pc, #236]	; (8001b3c <All_mode_UARTUI+0x63c>)
 8001a4e:	f006 fbc8 	bl	80081e2 <HAL_UART_Transmit>
						chkM = 0;
 8001a52:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <All_mode_UARTUI+0x640>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001a58:	4b3a      	ldr	r3, [pc, #232]	; (8001b44 <All_mode_UARTUI+0x644>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001a5e:	e059      	b.n	8001b14 <All_mode_UARTUI+0x614>

				case 13:	// 13  Disable end effector
					chksum = DataIn;
 8001a60:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <All_mode_UARTUI+0x628>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <All_mode_UARTUI+0x62c>)
 8001a68:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8001a6a:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <All_mode_UARTUI+0x630>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <All_mode_UARTUI+0x634>)
 8001a74:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <All_mode_UARTUI+0x62c>)
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <All_mode_UARTUI+0x634>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d14a      	bne.n	8001b18 <All_mode_UARTUI+0x618>
						//M_state = 13;

						trig_efftRead = 0;
 8001a82:	4b32      	ldr	r3, [pc, #200]	; (8001b4c <All_mode_UARTUI+0x64c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
						flag_efftRead = 0;
 8001a88:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <All_mode_UARTUI+0x650>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001a8e:	2364      	movs	r3, #100	; 0x64
 8001a90:	2202      	movs	r2, #2
 8001a92:	4929      	ldr	r1, [pc, #164]	; (8001b38 <All_mode_UARTUI+0x638>)
 8001a94:	4829      	ldr	r0, [pc, #164]	; (8001b3c <All_mode_UARTUI+0x63c>)
 8001a96:	f006 fba4 	bl	80081e2 <HAL_UART_Transmit>
						chkM = 0;
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <All_mode_UARTUI+0x640>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001aa0:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <All_mode_UARTUI+0x644>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001aa6:	e037      	b.n	8001b18 <All_mode_UARTUI+0x618>

				case 14:	// 14 Set Home
					chksum = DataIn;
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <All_mode_UARTUI+0x628>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <All_mode_UARTUI+0x62c>)
 8001ab0:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <All_mode_UARTUI+0x630>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <All_mode_UARTUI+0x634>)
 8001abc:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <All_mode_UARTUI+0x62c>)
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <All_mode_UARTUI+0x634>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d128      	bne.n	8001b1c <All_mode_UARTUI+0x61c>
						//M_state = 14;
						/// Add work here///////////
						TargetDeg = 0;
 8001aca:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <All_mode_UARTUI+0x654>)
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
						//// PID and MotDrv to 0
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,100); //Xu
 8001ad2:	2364      	movs	r3, #100	; 0x64
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	4918      	ldr	r1, [pc, #96]	; (8001b38 <All_mode_UARTUI+0x638>)
 8001ad8:	4818      	ldr	r0, [pc, #96]	; (8001b3c <All_mode_UARTUI+0x63c>)
 8001ada:	f006 fb82 	bl	80081e2 <HAL_UART_Transmit>
						chkM = 0;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <All_mode_UARTUI+0x640>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8001ae4:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <All_mode_UARTUI+0x644>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001aea:	e017      	b.n	8001b1c <All_mode_UARTUI+0x61c>
					break;
 8001aec:	bf00      	nop
 8001aee:	e016      	b.n	8001b1e <All_mode_UARTUI+0x61e>
					break;
 8001af0:	bf00      	nop
 8001af2:	e014      	b.n	8001b1e <All_mode_UARTUI+0x61e>
					break;
 8001af4:	bf00      	nop
 8001af6:	e012      	b.n	8001b1e <All_mode_UARTUI+0x61e>
					break;
 8001af8:	bf00      	nop
 8001afa:	e010      	b.n	8001b1e <All_mode_UARTUI+0x61e>
					break;
 8001afc:	bf00      	nop
 8001afe:	e00e      	b.n	8001b1e <All_mode_UARTUI+0x61e>
					break;
 8001b00:	bf00      	nop
 8001b02:	e00c      	b.n	8001b1e <All_mode_UARTUI+0x61e>
					break;
 8001b04:	bf00      	nop
 8001b06:	e00a      	b.n	8001b1e <All_mode_UARTUI+0x61e>
					break;
 8001b08:	bf00      	nop
 8001b0a:	e008      	b.n	8001b1e <All_mode_UARTUI+0x61e>
					break;
 8001b0c:	bf00      	nop
 8001b0e:	e006      	b.n	8001b1e <All_mode_UARTUI+0x61e>
					break;
 8001b10:	bf00      	nop
 8001b12:	e004      	b.n	8001b1e <All_mode_UARTUI+0x61e>
					break;
 8001b14:	bf00      	nop
 8001b16:	e002      	b.n	8001b1e <All_mode_UARTUI+0x61e>
					break;
 8001b18:	bf00      	nop
 8001b1a:	e000      	b.n	8001b1e <All_mode_UARTUI+0x61e>
					break;
 8001b1c:	bf00      	nop
					} /// End switch NameM
			break;
 8001b1e:	bf00      	nop
	}//end sw chkM

}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000344 	.word	0x20000344
 8001b2c:	20000350 	.word	0x20000350
 8001b30:	20000349 	.word	0x20000349
 8001b34:	20000351 	.word	0x20000351
 8001b38:	20000014 	.word	0x20000014
 8001b3c:	2000023c 	.word	0x2000023c
 8001b40:	20000348 	.word	0x20000348
 8001b44:	2000034b 	.word	0x2000034b
 8001b48:	20000311 	.word	0x20000311
 8001b4c:	20000313 	.word	0x20000313
 8001b50:	20000312 	.word	0x20000312
 8001b54:	200002e8 	.word	0x200002e8

08001b58 <UARTRecieveIT>:

void UARTRecieveIT()
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8001b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b62:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8001b64:	2220      	movs	r2, #32
 8001b66:	491b      	ldr	r1, [pc, #108]	; (8001bd4 <UARTRecieveIT+0x7c>)
 8001b68:	481b      	ldr	r0, [pc, #108]	; (8001bd8 <UARTRecieveIT+0x80>)
 8001b6a:	f006 fbcc 	bl	8008306 <HAL_UART_Receive_IT>
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <UARTRecieveIT+0x80>)
 8001b70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <UARTRecieveIT+0x80>)
 8001b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <UARTRecieveIT+0x84>)
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d01f      	beq.n	8001bc4 <UARTRecieveIT+0x6c>
	{
		data=RxDataBuffer[dataPos];
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <UARTRecieveIT+0x84>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <UARTRecieveIT+0x7c>)
 8001b8a:	5cd3      	ldrb	r3, [r2, r3]
 8001b8c:	80fb      	strh	r3, [r7, #6]
		DataIn = data;
 8001b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b92:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <UARTRecieveIT+0x88>)
 8001b94:	6013      	str	r3, [r2, #0]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <UARTRecieveIT+0x84>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <UARTRecieveIT+0x80>)
 8001b9e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001ba0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ba4:	fb01 f202 	mul.w	r2, r1, r2
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <UARTRecieveIT+0x84>)
 8001bac:	6013      	str	r3, [r2, #0]
		Posdata = dataPos;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <UARTRecieveIT+0x84>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <UARTRecieveIT+0x8c>)
 8001bb6:	701a      	strb	r2, [r3, #0]
		dataFN += 1;
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <UARTRecieveIT+0x90>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <UARTRecieveIT+0x90>)
 8001bc2:	701a      	strb	r2, [r3, #0]
	}
	All_mode_UARTUI();
 8001bc4:	f7ff fc9c 	bl	8001500 <All_mode_UARTUI>
	All_mode_UARTUI();
 8001bc8:	f7ff fc9a 	bl	8001500 <All_mode_UARTUI>

}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000320 	.word	0x20000320
 8001bd8:	2000023c 	.word	0x2000023c
 8001bdc:	20000358 	.word	0x20000358
 8001be0:	20000344 	.word	0x20000344
 8001be4:	20000340 	.word	0x20000340
 8001be8:	2000034b 	.word	0x2000034b

08001bec <HAL_GPIO_EXTI_Callback>:

/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80fb      	strh	r3, [r7, #6]
	//// EMER ////
	if(GPIO_Pin == GPIO_PIN_11){
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bfc:	d10e      	bne.n	8001c1c <HAL_GPIO_EXTI_Callback+0x30>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		counter_e++;
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <HAL_GPIO_EXTI_Callback+0x88>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	3301      	adds	r3, #1
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_GPIO_EXTI_Callback+0x88>)
 8001c08:	701a      	strb	r2, [r3, #0]
		grandState = emer;
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_GPIO_EXTI_Callback+0x90>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_GPIO_EXTI_Callback+0x94>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//// Stop ////
	if(GPIO_Pin == GPIO_PIN_10){
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c22:	d10c      	bne.n	8001c3e <HAL_GPIO_EXTI_Callback+0x52>
		PWMOut = 0;
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_GPIO_EXTI_Callback+0x94>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_GPIO_EXTI_Callback+0x90>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d102      	bne.n	8001c3e <HAL_GPIO_EXTI_Callback+0x52>
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	701a      	strb	r2, [r3, #0]
		//else{grandState = stop;}

		}
	//// work Blue button////
	if(GPIO_Pin == GPIO_PIN_13){
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c44:	d108      	bne.n	8001c58 <HAL_GPIO_EXTI_Callback+0x6c>
		bluecounter++;
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_GPIO_EXTI_Callback+0x90>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_GPIO_EXTI_Callback+0x90>)
 8001c50:	701a      	strb	r2, [r3, #0]
		flag_efftActi = 1;
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x98>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
		//trig_efftRead = 1;
	}

	//// setzero ////
		if(GPIO_Pin == GPIO_PIN_2){
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d103      	bne.n	8001c66 <HAL_GPIO_EXTI_Callback+0x7a>
			TargetDeg = 0;
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
		}
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000290 	.word	0x20000290
 8001c78:	20000280 	.word	0x20000280
 8001c7c:	200002e5 	.word	0x200002e5
 8001c80:	2000000a 	.word	0x2000000a
 8001c84:	20000311 	.word	0x20000311
 8001c88:	200002e8 	.word	0x200002e8

08001c8c <micros>:

///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 8001c8c:	b4b0      	push	{r4, r5, r7}
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <micros+0x2c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	2200      	movs	r2, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <micros+0x30>)
 8001c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca2:	1884      	adds	r4, r0, r2
 8001ca4:	eb41 0503 	adc.w	r5, r1, r3
 8001ca8:	4622      	mov	r2, r4
 8001caa:	462b      	mov	r3, r5
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bcb0      	pop	{r4, r5, r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000194 	.word	0x20000194
 8001cbc:	20000288 	.word	0x20000288

08001cc0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001cc0:	b4b0      	push	{r4, r5, r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d10a      	bne.n	8001ce6 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cda:	1854      	adds	r4, r2, r1
 8001cdc:	f143 0500 	adc.w	r5, r3, #0
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ce2:	e9c3 4500 	strd	r4, r5, [r3]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bcb0      	pop	{r4, r5, r7}
 8001cee:	4770      	bx	lr
 8001cf0:	20000194 	.word	0x20000194
 8001cf4:	20000288 	.word	0x20000288

08001cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfc:	b672      	cpsid	i
}
 8001cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <Error_Handler+0x8>
	...

08001d04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	4a0f      	ldr	r2, [pc, #60]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d42:	2007      	movs	r0, #7
 8001d44:	f000 fc28 	bl	8002598 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_I2C_MspInit+0x168>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d13d      	bne.n	8001df2 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	4b51      	ldr	r3, [pc, #324]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a50      	ldr	r2, [pc, #320]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b4e      	ldr	r3, [pc, #312]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d98:	2312      	movs	r3, #18
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da4:	2304      	movs	r3, #4
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4619      	mov	r1, r3
 8001dae:	4845      	ldr	r0, [pc, #276]	; (8001ec4 <HAL_I2C_MspInit+0x170>)
 8001db0:	f001 f844 	bl	8002e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	4a40      	ldr	r2, [pc, #256]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001dbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc4:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	201f      	movs	r0, #31
 8001dd6:	f000 fbea 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001dda:	201f      	movs	r0, #31
 8001ddc:	f000 fc03 	bl	80025e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	2020      	movs	r0, #32
 8001de6:	f000 fbe2 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001dea:	2020      	movs	r0, #32
 8001dec:	f000 fbfb 	bl	80025e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001df0:	e060      	b.n	8001eb4 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a34      	ldr	r2, [pc, #208]	; (8001ec8 <HAL_I2C_MspInit+0x174>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d15b      	bne.n	8001eb4 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	4a2e      	ldr	r2, [pc, #184]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	4a27      	ldr	r2, [pc, #156]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6313      	str	r3, [r2, #48]	; 0x30
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3a:	2312      	movs	r3, #18
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e46:	2304      	movs	r3, #4
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	4619      	mov	r1, r3
 8001e50:	481e      	ldr	r0, [pc, #120]	; (8001ecc <HAL_I2C_MspInit+0x178>)
 8001e52:	f000 fff3 	bl	8002e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5c:	2312      	movs	r3, #18
 8001e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	4619      	mov	r1, r3
 8001e72:	4817      	ldr	r0, [pc, #92]	; (8001ed0 <HAL_I2C_MspInit+0x17c>)
 8001e74:	f000 ffe2 	bl	8002e3c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001e82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e86:	6413      	str	r3, [r2, #64]	; 0x40
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_I2C_MspInit+0x16c>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	2048      	movs	r0, #72	; 0x48
 8001e9a:	f000 fb88 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001e9e:	2048      	movs	r0, #72	; 0x48
 8001ea0:	f000 fba1 	bl	80025e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2049      	movs	r0, #73	; 0x49
 8001eaa:	f000 fb80 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001eae:	2049      	movs	r0, #73	; 0x49
 8001eb0:	f000 fb99 	bl	80025e6 <HAL_NVIC_EnableIRQ>
}
 8001eb4:	bf00      	nop
 8001eb6:	3730      	adds	r7, #48	; 0x30
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40005400 	.word	0x40005400
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40005c00 	.word	0x40005c00
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08c      	sub	sp, #48	; 0x30
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 031c 	add.w	r3, r7, #28
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef4:	d15d      	bne.n	8001fb2 <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_TIM_Base_MspInit+0x144>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a46      	ldr	r2, [pc, #280]	; (8002018 <HAL_TIM_Base_MspInit+0x144>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b44      	ldr	r3, [pc, #272]	; (8002018 <HAL_TIM_Base_MspInit+0x144>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	4b40      	ldr	r3, [pc, #256]	; (8002018 <HAL_TIM_Base_MspInit+0x144>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a3f      	ldr	r2, [pc, #252]	; (8002018 <HAL_TIM_Base_MspInit+0x144>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <HAL_TIM_Base_MspInit+0x144>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	4834      	ldr	r0, [pc, #208]	; (800201c <HAL_TIM_Base_MspInit+0x148>)
 8001f4a:	f000 ff77 	bl	8002e3c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <HAL_TIM_Base_MspInit+0x14c>)
 8001f50:	4a34      	ldr	r2, [pc, #208]	; (8002024 <HAL_TIM_Base_MspInit+0x150>)
 8001f52:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001f54:	4b32      	ldr	r3, [pc, #200]	; (8002020 <HAL_TIM_Base_MspInit+0x14c>)
 8001f56:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f5a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f5c:	4b30      	ldr	r3, [pc, #192]	; (8002020 <HAL_TIM_Base_MspInit+0x14c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f62:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <HAL_TIM_Base_MspInit+0x14c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f68:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_TIM_Base_MspInit+0x14c>)
 8001f6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f6e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f70:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_TIM_Base_MspInit+0x14c>)
 8001f72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f76:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_TIM_Base_MspInit+0x14c>)
 8001f7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f7e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_TIM_Base_MspInit+0x14c>)
 8001f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f86:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_TIM_Base_MspInit+0x14c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_TIM_Base_MspInit+0x14c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001f94:	4822      	ldr	r0, [pc, #136]	; (8002020 <HAL_TIM_Base_MspInit+0x14c>)
 8001f96:	f000 fb41 	bl	800261c <HAL_DMA_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8001fa0:	f7ff feaa 	bl	8001cf8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <HAL_TIM_Base_MspInit+0x14c>)
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
 8001faa:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <HAL_TIM_Base_MspInit+0x14c>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001fb0:	e02e      	b.n	8002010 <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM4)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <HAL_TIM_Base_MspInit+0x154>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d10e      	bne.n	8001fda <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	4b15      	ldr	r3, [pc, #84]	; (8002018 <HAL_TIM_Base_MspInit+0x144>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	4a14      	ldr	r2, [pc, #80]	; (8002018 <HAL_TIM_Base_MspInit+0x144>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	6413      	str	r3, [r2, #64]	; 0x40
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_TIM_Base_MspInit+0x144>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	693b      	ldr	r3, [r7, #16]
}
 8001fd8:	e01a      	b.n	8002010 <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM11)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a13      	ldr	r2, [pc, #76]	; (800202c <HAL_TIM_Base_MspInit+0x158>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d115      	bne.n	8002010 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_TIM_Base_MspInit+0x144>)
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <HAL_TIM_Base_MspInit+0x144>)
 8001fee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_TIM_Base_MspInit+0x144>)
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002000:	2200      	movs	r2, #0
 8002002:	2100      	movs	r1, #0
 8002004:	201a      	movs	r0, #26
 8002006:	f000 fad2 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800200a:	201a      	movs	r0, #26
 800200c:	f000 faeb 	bl	80025e6 <HAL_NVIC_EnableIRQ>
}
 8002010:	bf00      	nop
 8002012:	3730      	adds	r7, #48	; 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	40020000 	.word	0x40020000
 8002020:	200001dc 	.word	0x200001dc
 8002024:	40026088 	.word	0x40026088
 8002028:	40000800 	.word	0x40000800
 800202c:	40014800 	.word	0x40014800

08002030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a12      	ldr	r2, [pc, #72]	; (8002098 <HAL_TIM_MspPostInit+0x68>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d11d      	bne.n	800208e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_TIM_MspPostInit+0x6c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a10      	ldr	r2, [pc, #64]	; (800209c <HAL_TIM_MspPostInit+0x6c>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_TIM_MspPostInit+0x6c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 800206e:	2340      	movs	r3, #64	; 0x40
 8002070:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800207e:	2302      	movs	r3, #2
 8002080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 8002082:	f107 030c 	add.w	r3, r7, #12
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	; (80020a0 <HAL_TIM_MspPostInit+0x70>)
 800208a:	f000 fed7 	bl	8002e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800208e:	bf00      	nop
 8002090:	3720      	adds	r7, #32
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40000800 	.word	0x40000800
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020400 	.word	0x40020400

080020a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_UART_MspInit+0x94>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d133      	bne.n	800212e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <HAL_UART_MspInit+0x98>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a1b      	ldr	r2, [pc, #108]	; (800213c <HAL_UART_MspInit+0x98>)
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_UART_MspInit+0x98>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_UART_MspInit+0x98>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a14      	ldr	r2, [pc, #80]	; (800213c <HAL_UART_MspInit+0x98>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_UART_MspInit+0x98>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020fe:	230c      	movs	r3, #12
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210a:	2303      	movs	r3, #3
 800210c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800210e:	2307      	movs	r3, #7
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	4809      	ldr	r0, [pc, #36]	; (8002140 <HAL_UART_MspInit+0x9c>)
 800211a:	f000 fe8f 	bl	8002e3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	2026      	movs	r0, #38	; 0x26
 8002124:	f000 fa43 	bl	80025ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002128:	2026      	movs	r0, #38	; 0x26
 800212a:	f000 fa5c 	bl	80025e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800212e:	bf00      	nop
 8002130:	3728      	adds	r7, #40	; 0x28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40004400 	.word	0x40004400
 800213c:	40023800 	.word	0x40023800
 8002140:	40020000 	.word	0x40020000

08002144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <NMI_Handler+0x4>

0800214a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <HardFault_Handler+0x4>

08002150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <MemManage_Handler+0x4>

08002156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <BusFault_Handler+0x4>

0800215c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <UsageFault_Handler+0x4>

08002162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002190:	f000 f8ee 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}

08002198 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 800219c:	2004      	movs	r0, #4
 800219e:	f001 f803 	bl	80031a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <DMA1_Stream5_IRQHandler+0x10>)
 80021ae:	f000 fbcd 	bl	800294c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200001dc 	.word	0x200001dc

080021bc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80021c2:	f004 ff0b 	bl	8006fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000194 	.word	0x20000194

080021d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <I2C1_EV_IRQHandler+0x10>)
 80021d6:	f001 fe27 	bl	8003e28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2000005c 	.word	0x2000005c

080021e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <I2C1_ER_IRQHandler+0x10>)
 80021ea:	f001 ff8e 	bl	800410a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000005c 	.word	0x2000005c

080021f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <USART2_IRQHandler+0x10>)
 80021fe:	f006 f8b3 	bl	8008368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	2000023c 	.word	0x2000023c

0800220c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 8002210:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002214:	f000 ffc8 	bl	80031a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 8002218:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800221c:	f000 ffc4 	bl	80031a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002220:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002224:	f000 ffc0 	bl	80031a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}

0800222c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <I2C3_EV_IRQHandler+0x10>)
 8002232:	f001 fdf9 	bl	8003e28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200000b0 	.word	0x200000b0

08002240 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <I2C3_ER_IRQHandler+0x10>)
 8002246:	f001 ff60 	bl	800410a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200000b0 	.word	0x200000b0

08002254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <SystemInit+0x20>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <SystemInit+0x20>)
 8002260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800227c:	480d      	ldr	r0, [pc, #52]	; (80022b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800227e:	490e      	ldr	r1, [pc, #56]	; (80022b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002280:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002294:	4c0b      	ldr	r4, [pc, #44]	; (80022c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022a2:	f7ff ffd7 	bl	8002254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a6:	f006 ffd1 	bl	800924c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022aa:	f7fe fa25 	bl	80006f8 <main>
  bx  lr    
 80022ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80022bc:	080092ec 	.word	0x080092ec
  ldr r2, =_sbss
 80022c0:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80022c4:	20000360 	.word	0x20000360

080022c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <ADC_IRQHandler>
	...

080022cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <HAL_Init+0x40>)
 80022d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_Init+0x40>)
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a07      	ldr	r2, [pc, #28]	; (800230c <HAL_Init+0x40>)
 80022ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f4:	2003      	movs	r0, #3
 80022f6:	f000 f94f 	bl	8002598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f000 f808 	bl	8002310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002300:	f7ff fd00 	bl	8001d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023c00 	.word	0x40023c00

08002310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_InitTick+0x54>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_InitTick+0x58>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002326:	fbb3 f3f1 	udiv	r3, r3, r1
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f967 	bl	8002602 <HAL_SYSTICK_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00e      	b.n	800235c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d80a      	bhi.n	800235a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002344:	2200      	movs	r2, #0
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f000 f92f 	bl	80025ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <HAL_InitTick+0x5c>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000034 	.word	0x20000034
 8002368:	2000003c 	.word	0x2000003c
 800236c:	20000038 	.word	0x20000038

08002370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x20>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_IncTick+0x24>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_IncTick+0x24>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	2000003c 	.word	0x2000003c
 8002394:	2000035c 	.word	0x2000035c

08002398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return uwTick;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_GetTick+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	2000035c 	.word	0x2000035c

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff ffee 	bl	8002398 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_Delay+0x44>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffde 	bl	8002398 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	2000003c 	.word	0x2000003c

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	2b00      	cmp	r3, #0
 800246c:	db0b      	blt.n	8002486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	4907      	ldr	r1, [pc, #28]	; (8002494 <__NVIC_EnableIRQ+0x38>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2001      	movs	r0, #1
 800247e:	fa00 f202 	lsl.w	r2, r0, r2
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000e100 	.word	0xe000e100

08002498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	db0a      	blt.n	80024c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	490c      	ldr	r1, [pc, #48]	; (80024e4 <__NVIC_SetPriority+0x4c>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	0112      	lsls	r2, r2, #4
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	440b      	add	r3, r1
 80024bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c0:	e00a      	b.n	80024d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4908      	ldr	r1, [pc, #32]	; (80024e8 <__NVIC_SetPriority+0x50>)
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	3b04      	subs	r3, #4
 80024d0:	0112      	lsls	r2, r2, #4
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	440b      	add	r3, r1
 80024d6:	761a      	strb	r2, [r3, #24]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000e100 	.word	0xe000e100
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f1c3 0307 	rsb	r3, r3, #7
 8002506:	2b04      	cmp	r3, #4
 8002508:	bf28      	it	cs
 800250a:	2304      	movcs	r3, #4
 800250c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3304      	adds	r3, #4
 8002512:	2b06      	cmp	r3, #6
 8002514:	d902      	bls.n	800251c <NVIC_EncodePriority+0x30>
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3b03      	subs	r3, #3
 800251a:	e000      	b.n	800251e <NVIC_EncodePriority+0x32>
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	f04f 32ff 	mov.w	r2, #4294967295
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	401a      	ands	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002534:	f04f 31ff 	mov.w	r1, #4294967295
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	43d9      	mvns	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	4313      	orrs	r3, r2
         );
}
 8002546:	4618      	mov	r0, r3
 8002548:	3724      	adds	r7, #36	; 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002564:	d301      	bcc.n	800256a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002566:	2301      	movs	r3, #1
 8002568:	e00f      	b.n	800258a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <SysTick_Config+0x40>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002572:	210f      	movs	r1, #15
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f7ff ff8e 	bl	8002498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <SysTick_Config+0x40>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <SysTick_Config+0x40>)
 8002584:	2207      	movs	r2, #7
 8002586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000e010 	.word	0xe000e010

08002598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff29 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c0:	f7ff ff3e 	bl	8002440 <__NVIC_GetPriorityGrouping>
 80025c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68b9      	ldr	r1, [r7, #8]
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f7ff ff8e 	bl	80024ec <NVIC_EncodePriority>
 80025d0:	4602      	mov	r2, r0
 80025d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff5d 	bl	8002498 <__NVIC_SetPriority>
}
 80025de:	bf00      	nop
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff31 	bl	800245c <__NVIC_EnableIRQ>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ffa2 	bl	8002554 <SysTick_Config>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002628:	f7ff feb6 	bl	8002398 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e099      	b.n	800276c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002658:	e00f      	b.n	800267a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800265a:	f7ff fe9d 	bl	8002398 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b05      	cmp	r3, #5
 8002666:	d908      	bls.n	800267a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2203      	movs	r2, #3
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e078      	b.n	800276c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1e8      	bne.n	800265a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4b38      	ldr	r3, [pc, #224]	; (8002774 <HAL_DMA_Init+0x158>)
 8002694:	4013      	ands	r3, r2
 8002696:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d107      	bne.n	80026e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	4313      	orrs	r3, r2
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f023 0307 	bic.w	r3, r3, #7
 80026fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	4313      	orrs	r3, r2
 8002704:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	2b04      	cmp	r3, #4
 800270c:	d117      	bne.n	800273e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00e      	beq.n	800273e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fb0f 	bl	8002d44 <DMA_CheckFifoParam>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2240      	movs	r2, #64	; 0x40
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800273a:	2301      	movs	r3, #1
 800273c:	e016      	b.n	800276c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fac6 	bl	8002cd8 <DMA_CalcBaseAndBitshift>
 800274c:	4603      	mov	r3, r0
 800274e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002754:	223f      	movs	r2, #63	; 0x3f
 8002756:	409a      	lsls	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	f010803f 	.word	0xf010803f

08002778 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_DMA_Start_IT+0x26>
 800279a:	2302      	movs	r3, #2
 800279c:	e040      	b.n	8002820 <HAL_DMA_Start_IT+0xa8>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d12f      	bne.n	8002812 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2202      	movs	r2, #2
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 fa58 	bl	8002c7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	223f      	movs	r2, #63	; 0x3f
 80027d2:	409a      	lsls	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0216 	orr.w	r2, r2, #22
 80027e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0208 	orr.w	r2, r2, #8
 80027fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	e005      	b.n	800281e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800281a:	2302      	movs	r3, #2
 800281c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800281e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002836:	f7ff fdaf 	bl	8002398 <HAL_GetTick>
 800283a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d008      	beq.n	800285a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e052      	b.n	8002900 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0216 	bic.w	r2, r2, #22
 8002868:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002878:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <HAL_DMA_Abort+0x62>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0208 	bic.w	r2, r2, #8
 8002898:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0201 	bic.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028aa:	e013      	b.n	80028d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ac:	f7ff fd74 	bl	8002398 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	d90c      	bls.n	80028d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2203      	movs	r2, #3
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e015      	b.n	8002900 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1e4      	bne.n	80028ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	223f      	movs	r2, #63	; 0x3f
 80028e8:	409a      	lsls	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d004      	beq.n	8002926 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e00c      	b.n	8002940 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2205      	movs	r2, #5
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002958:	4b8e      	ldr	r3, [pc, #568]	; (8002b94 <HAL_DMA_IRQHandler+0x248>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a8e      	ldr	r2, [pc, #568]	; (8002b98 <HAL_DMA_IRQHandler+0x24c>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0a9b      	lsrs	r3, r3, #10
 8002964:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	2208      	movs	r2, #8
 8002978:	409a      	lsls	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01a      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0204 	bic.w	r2, r2, #4
 800299e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	2208      	movs	r2, #8
 80029a6:	409a      	lsls	r2, r3
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	2201      	movs	r2, #1
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d012      	beq.n	80029ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00b      	beq.n	80029ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029da:	2201      	movs	r2, #1
 80029dc:	409a      	lsls	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	2204      	movs	r2, #4
 80029f4:	409a      	lsls	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d012      	beq.n	8002a24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	2204      	movs	r2, #4
 8002a12:	409a      	lsls	r2, r3
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	f043 0204 	orr.w	r2, r3, #4
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	2210      	movs	r2, #16
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d043      	beq.n	8002abc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d03c      	beq.n	8002abc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	2210      	movs	r2, #16
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d018      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d108      	bne.n	8002a7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d024      	beq.n	8002abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4798      	blx	r3
 8002a7a:	e01f      	b.n	8002abc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01b      	beq.n	8002abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
 8002a8c:	e016      	b.n	8002abc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0208 	bic.w	r2, r2, #8
 8002aaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 808f 	beq.w	8002bec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8087 	beq.w	8002bec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d136      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0216 	bic.w	r2, r2, #22
 8002b04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d103      	bne.n	8002b26 <HAL_DMA_IRQHandler+0x1da>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0208 	bic.w	r2, r2, #8
 8002b34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	223f      	movs	r2, #63	; 0x3f
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d07e      	beq.n	8002c58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	4798      	blx	r3
        }
        return;
 8002b62:	e079      	b.n	8002c58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d01d      	beq.n	8002bae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10d      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d031      	beq.n	8002bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4798      	blx	r3
 8002b90:	e02c      	b.n	8002bec <HAL_DMA_IRQHandler+0x2a0>
 8002b92:	bf00      	nop
 8002b94:	20000034 	.word	0x20000034
 8002b98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d023      	beq.n	8002bec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
 8002bac:	e01e      	b.n	8002bec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10f      	bne.n	8002bdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0210 	bic.w	r2, r2, #16
 8002bca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d032      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d022      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2205      	movs	r2, #5
 8002c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d307      	bcc.n	8002c34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f2      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x2cc>
 8002c32:	e000      	b.n	8002c36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
 8002c56:	e000      	b.n	8002c5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c58:	bf00      	nop
    }
  }
}
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c6e:	b2db      	uxtb	r3, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d108      	bne.n	8002cbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cba:	e007      	b.n	8002ccc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	60da      	str	r2, [r3, #12]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	3b10      	subs	r3, #16
 8002ce8:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <DMA_CalcBaseAndBitshift+0x64>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cf2:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <DMA_CalcBaseAndBitshift+0x68>)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d909      	bls.n	8002d1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d0e:	f023 0303 	bic.w	r3, r3, #3
 8002d12:	1d1a      	adds	r2, r3, #4
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	659a      	str	r2, [r3, #88]	; 0x58
 8002d18:	e007      	b.n	8002d2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d22:	f023 0303 	bic.w	r3, r3, #3
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	aaaaaaab 	.word	0xaaaaaaab
 8002d40:	080092d4 	.word	0x080092d4

08002d44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d11f      	bne.n	8002d9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d856      	bhi.n	8002e12 <DMA_CheckFifoParam+0xce>
 8002d64:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <DMA_CheckFifoParam+0x28>)
 8002d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6a:	bf00      	nop
 8002d6c:	08002d7d 	.word	0x08002d7d
 8002d70:	08002d8f 	.word	0x08002d8f
 8002d74:	08002d7d 	.word	0x08002d7d
 8002d78:	08002e13 	.word	0x08002e13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d046      	beq.n	8002e16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8c:	e043      	b.n	8002e16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d96:	d140      	bne.n	8002e1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9c:	e03d      	b.n	8002e1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da6:	d121      	bne.n	8002dec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d837      	bhi.n	8002e1e <DMA_CheckFifoParam+0xda>
 8002dae:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <DMA_CheckFifoParam+0x70>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002dcb 	.word	0x08002dcb
 8002dbc:	08002dc5 	.word	0x08002dc5
 8002dc0:	08002ddd 	.word	0x08002ddd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc8:	e030      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d025      	beq.n	8002e22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dda:	e022      	b.n	8002e22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002de4:	d11f      	bne.n	8002e26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dea:	e01c      	b.n	8002e26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d903      	bls.n	8002dfa <DMA_CheckFifoParam+0xb6>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d003      	beq.n	8002e00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002df8:	e018      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfe:	e015      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00e      	beq.n	8002e2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e10:	e00b      	b.n	8002e2a <DMA_CheckFifoParam+0xe6>
      break;
 8002e12:	bf00      	nop
 8002e14:	e00a      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e16:	bf00      	nop
 8002e18:	e008      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e006      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e004      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e22:	bf00      	nop
 8002e24:	e002      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002e26:	bf00      	nop
 8002e28:	e000      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop

08002e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	; 0x24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	e159      	b.n	800310c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e58:	2201      	movs	r2, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	f040 8148 	bne.w	8003106 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d005      	beq.n	8002e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d130      	bne.n	8002ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	2203      	movs	r2, #3
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 0201 	and.w	r2, r3, #1
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d017      	beq.n	8002f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	2203      	movs	r2, #3
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d123      	bne.n	8002f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	08da      	lsrs	r2, r3, #3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3208      	adds	r2, #8
 8002f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	220f      	movs	r2, #15
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	08da      	lsrs	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3208      	adds	r2, #8
 8002f7a:	69b9      	ldr	r1, [r7, #24]
 8002f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0203 	and.w	r2, r3, #3
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80a2 	beq.w	8003106 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	4b57      	ldr	r3, [pc, #348]	; (8003124 <HAL_GPIO_Init+0x2e8>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	4a56      	ldr	r2, [pc, #344]	; (8003124 <HAL_GPIO_Init+0x2e8>)
 8002fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd2:	4b54      	ldr	r3, [pc, #336]	; (8003124 <HAL_GPIO_Init+0x2e8>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fde:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_GPIO_Init+0x2ec>)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	220f      	movs	r2, #15
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a49      	ldr	r2, [pc, #292]	; (800312c <HAL_GPIO_Init+0x2f0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d019      	beq.n	800303e <HAL_GPIO_Init+0x202>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a48      	ldr	r2, [pc, #288]	; (8003130 <HAL_GPIO_Init+0x2f4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_GPIO_Init+0x1fe>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a47      	ldr	r2, [pc, #284]	; (8003134 <HAL_GPIO_Init+0x2f8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00d      	beq.n	8003036 <HAL_GPIO_Init+0x1fa>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a46      	ldr	r2, [pc, #280]	; (8003138 <HAL_GPIO_Init+0x2fc>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <HAL_GPIO_Init+0x1f6>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a45      	ldr	r2, [pc, #276]	; (800313c <HAL_GPIO_Init+0x300>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d101      	bne.n	800302e <HAL_GPIO_Init+0x1f2>
 800302a:	2304      	movs	r3, #4
 800302c:	e008      	b.n	8003040 <HAL_GPIO_Init+0x204>
 800302e:	2307      	movs	r3, #7
 8003030:	e006      	b.n	8003040 <HAL_GPIO_Init+0x204>
 8003032:	2303      	movs	r3, #3
 8003034:	e004      	b.n	8003040 <HAL_GPIO_Init+0x204>
 8003036:	2302      	movs	r3, #2
 8003038:	e002      	b.n	8003040 <HAL_GPIO_Init+0x204>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_GPIO_Init+0x204>
 800303e:	2300      	movs	r3, #0
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	f002 0203 	and.w	r2, r2, #3
 8003046:	0092      	lsls	r2, r2, #2
 8003048:	4093      	lsls	r3, r2
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003050:	4935      	ldr	r1, [pc, #212]	; (8003128 <HAL_GPIO_Init+0x2ec>)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	3302      	adds	r3, #2
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800305e:	4b38      	ldr	r3, [pc, #224]	; (8003140 <HAL_GPIO_Init+0x304>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003082:	4a2f      	ldr	r2, [pc, #188]	; (8003140 <HAL_GPIO_Init+0x304>)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003088:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <HAL_GPIO_Init+0x304>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030ac:	4a24      	ldr	r2, [pc, #144]	; (8003140 <HAL_GPIO_Init+0x304>)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030b2:	4b23      	ldr	r3, [pc, #140]	; (8003140 <HAL_GPIO_Init+0x304>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030d6:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <HAL_GPIO_Init+0x304>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030dc:	4b18      	ldr	r3, [pc, #96]	; (8003140 <HAL_GPIO_Init+0x304>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003100:	4a0f      	ldr	r2, [pc, #60]	; (8003140 <HAL_GPIO_Init+0x304>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3301      	adds	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b0f      	cmp	r3, #15
 8003110:	f67f aea2 	bls.w	8002e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3724      	adds	r7, #36	; 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	40013800 	.word	0x40013800
 800312c:	40020000 	.word	0x40020000
 8003130:	40020400 	.word	0x40020400
 8003134:	40020800 	.word	0x40020800
 8003138:	40020c00 	.word	0x40020c00
 800313c:	40021000 	.word	0x40021000
 8003140:	40013c00 	.word	0x40013c00

08003144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	887b      	ldrh	r3, [r7, #2]
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
 8003160:	e001      	b.n	8003166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]
 8003180:	4613      	mov	r3, r2
 8003182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003184:	787b      	ldrb	r3, [r7, #1]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003190:	e003      	b.n	800319a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003192:	887b      	ldrh	r3, [r7, #2]
 8003194:	041a      	lsls	r2, r3, #16
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	619a      	str	r2, [r3, #24]
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031be:	4a05      	ldr	r2, [pc, #20]	; (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fd10 	bl	8001bec <HAL_GPIO_EXTI_Callback>
  }
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40013c00 	.word	0x40013c00

080031d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e12b      	b.n	8003442 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fe fda8 	bl	8001d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	; 0x24
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800322a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800323a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800323c:	f003 fa9a 	bl	8006774 <HAL_RCC_GetPCLK1Freq>
 8003240:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4a81      	ldr	r2, [pc, #516]	; (800344c <HAL_I2C_Init+0x274>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d807      	bhi.n	800325c <HAL_I2C_Init+0x84>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a80      	ldr	r2, [pc, #512]	; (8003450 <HAL_I2C_Init+0x278>)
 8003250:	4293      	cmp	r3, r2
 8003252:	bf94      	ite	ls
 8003254:	2301      	movls	r3, #1
 8003256:	2300      	movhi	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e006      	b.n	800326a <HAL_I2C_Init+0x92>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a7d      	ldr	r2, [pc, #500]	; (8003454 <HAL_I2C_Init+0x27c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	bf94      	ite	ls
 8003264:	2301      	movls	r3, #1
 8003266:	2300      	movhi	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0e7      	b.n	8003442 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a78      	ldr	r2, [pc, #480]	; (8003458 <HAL_I2C_Init+0x280>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0c9b      	lsrs	r3, r3, #18
 800327c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4a6a      	ldr	r2, [pc, #424]	; (800344c <HAL_I2C_Init+0x274>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d802      	bhi.n	80032ac <HAL_I2C_Init+0xd4>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	3301      	adds	r3, #1
 80032aa:	e009      	b.n	80032c0 <HAL_I2C_Init+0xe8>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	4a69      	ldr	r2, [pc, #420]	; (800345c <HAL_I2C_Init+0x284>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	099b      	lsrs	r3, r3, #6
 80032be:	3301      	adds	r3, #1
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	430b      	orrs	r3, r1
 80032c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	495c      	ldr	r1, [pc, #368]	; (800344c <HAL_I2C_Init+0x274>)
 80032dc:	428b      	cmp	r3, r1
 80032de:	d819      	bhi.n	8003314 <HAL_I2C_Init+0x13c>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1e59      	subs	r1, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ee:	1c59      	adds	r1, r3, #1
 80032f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032f4:	400b      	ands	r3, r1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_I2C_Init+0x138>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1e59      	subs	r1, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fbb1 f3f3 	udiv	r3, r1, r3
 8003308:	3301      	adds	r3, #1
 800330a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330e:	e051      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 8003310:	2304      	movs	r3, #4
 8003312:	e04f      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d111      	bne.n	8003340 <HAL_I2C_Init+0x168>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1e58      	subs	r0, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	440b      	add	r3, r1
 800332a:	fbb0 f3f3 	udiv	r3, r0, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e012      	b.n	8003366 <HAL_I2C_Init+0x18e>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1e58      	subs	r0, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	0099      	lsls	r1, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	fbb0 f3f3 	udiv	r3, r0, r3
 8003356:	3301      	adds	r3, #1
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_I2C_Init+0x196>
 800336a:	2301      	movs	r3, #1
 800336c:	e022      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10e      	bne.n	8003394 <HAL_I2C_Init+0x1bc>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1e58      	subs	r0, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	440b      	add	r3, r1
 8003384:	fbb0 f3f3 	udiv	r3, r0, r3
 8003388:	3301      	adds	r3, #1
 800338a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003392:	e00f      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e58      	subs	r0, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	0099      	lsls	r1, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	6809      	ldr	r1, [r1, #0]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6911      	ldr	r1, [r2, #16]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68d2      	ldr	r2, [r2, #12]
 80033ee:	4311      	orrs	r1, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	000186a0 	.word	0x000186a0
 8003450:	001e847f 	.word	0x001e847f
 8003454:	003d08ff 	.word	0x003d08ff
 8003458:	431bde83 	.word	0x431bde83
 800345c:	10624dd3 	.word	0x10624dd3

08003460 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4603      	mov	r3, r0
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	460b      	mov	r3, r1
 8003474:	813b      	strh	r3, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800347a:	f7fe ff8d 	bl	8002398 <HAL_GetTick>
 800347e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b20      	cmp	r3, #32
 800348a:	f040 80d9 	bne.w	8003640 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2319      	movs	r3, #25
 8003494:	2201      	movs	r2, #1
 8003496:	496d      	ldr	r1, [pc, #436]	; (800364c <HAL_I2C_Mem_Write+0x1ec>)
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f002 fad1 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
 80034a6:	e0cc      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_I2C_Mem_Write+0x56>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e0c5      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d007      	beq.n	80034dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2221      	movs	r2, #33	; 0x21
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2240      	movs	r2, #64	; 0x40
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a3a      	ldr	r2, [r7, #32]
 8003506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800350c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a4d      	ldr	r2, [pc, #308]	; (8003650 <HAL_I2C_Mem_Write+0x1f0>)
 800351c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800351e:	88f8      	ldrh	r0, [r7, #6]
 8003520:	893a      	ldrh	r2, [r7, #8]
 8003522:	8979      	ldrh	r1, [r7, #10]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	4603      	mov	r3, r0
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f002 f860 	bl	80055f4 <I2C_RequestMemoryWrite>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d052      	beq.n	80035e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e081      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f002 fb52 	bl	8005bec <I2C_WaitOnTXEFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b04      	cmp	r3, #4
 8003554:	d107      	bne.n	8003566 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003564:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e06b      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	781a      	ldrb	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d11b      	bne.n	80035e0 <HAL_I2C_Mem_Write+0x180>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d017      	beq.n	80035e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1aa      	bne.n	800353e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f002 fb3e 	bl	8005c6e <I2C_WaitOnBTFFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00d      	beq.n	8003614 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d107      	bne.n	8003610 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e016      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	e000      	b.n	8003642 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003640:	2302      	movs	r3, #2
  }
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	00100002 	.word	0x00100002
 8003650:	ffff0000 	.word	0xffff0000

08003654 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08c      	sub	sp, #48	; 0x30
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	4608      	mov	r0, r1
 800365e:	4611      	mov	r1, r2
 8003660:	461a      	mov	r2, r3
 8003662:	4603      	mov	r3, r0
 8003664:	817b      	strh	r3, [r7, #10]
 8003666:	460b      	mov	r3, r1
 8003668:	813b      	strh	r3, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800366e:	f7fe fe93 	bl	8002398 <HAL_GetTick>
 8003672:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b20      	cmp	r3, #32
 800367e:	f040 8208 	bne.w	8003a92 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2319      	movs	r3, #25
 8003688:	2201      	movs	r2, #1
 800368a:	497b      	ldr	r1, [pc, #492]	; (8003878 <HAL_I2C_Mem_Read+0x224>)
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f002 f9d7 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
 800369a:	e1fb      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_I2C_Mem_Read+0x56>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e1f4      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d007      	beq.n	80036d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2222      	movs	r2, #34	; 0x22
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2240      	movs	r2, #64	; 0x40
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003700:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4a5b      	ldr	r2, [pc, #364]	; (800387c <HAL_I2C_Mem_Read+0x228>)
 8003710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003712:	88f8      	ldrh	r0, [r7, #6]
 8003714:	893a      	ldrh	r2, [r7, #8]
 8003716:	8979      	ldrh	r1, [r7, #10]
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	4603      	mov	r3, r0
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f001 fffc 	bl	8005720 <I2C_RequestMemoryRead>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e1b0      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003736:	2b00      	cmp	r3, #0
 8003738:	d113      	bne.n	8003762 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373a:	2300      	movs	r3, #0
 800373c:	623b      	str	r3, [r7, #32]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	623b      	str	r3, [r7, #32]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	e184      	b.n	8003a6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003766:	2b01      	cmp	r3, #1
 8003768:	d11b      	bne.n	80037a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003778:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	e164      	b.n	8003a6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d11b      	bne.n	80037e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	e144      	b.n	8003a6c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037f8:	e138      	b.n	8003a6c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	2b03      	cmp	r3, #3
 8003800:	f200 80f1 	bhi.w	80039e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	2b01      	cmp	r3, #1
 800380a:	d123      	bne.n	8003854 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f002 fa9f 	bl	8005d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e139      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003852:	e10b      	b.n	8003a6c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003858:	2b02      	cmp	r3, #2
 800385a:	d14e      	bne.n	80038fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003862:	2200      	movs	r2, #0
 8003864:	4906      	ldr	r1, [pc, #24]	; (8003880 <HAL_I2C_Mem_Read+0x22c>)
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f002 f8ea 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e10e      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
 8003876:	bf00      	nop
 8003878:	00100002 	.word	0x00100002
 800387c:	ffff0000 	.word	0xffff0000
 8003880:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038f8:	e0b8      	b.n	8003a6c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	2200      	movs	r2, #0
 8003902:	4966      	ldr	r1, [pc, #408]	; (8003a9c <HAL_I2C_Mem_Read+0x448>)
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f002 f89b 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0bf      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	2200      	movs	r2, #0
 800395e:	494f      	ldr	r1, [pc, #316]	; (8003a9c <HAL_I2C_Mem_Read+0x448>)
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f002 f86d 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e091      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039e4:	e042      	b.n	8003a6c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f002 f9b2 	bl	8005d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e04c      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d118      	bne.n	8003a6c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f47f aec2 	bne.w	80037fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3728      	adds	r7, #40	; 0x28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	00010004 	.word	0x00010004

08003aa0 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	460b      	mov	r3, r1
 8003aae:	817b      	strh	r3, [r7, #10]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	f040 80a6 	bne.w	8003c16 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad8:	d005      	beq.n	8003ae6 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d002      	beq.n	8003ae6 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d130      	bne.n	8003b48 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ae6:	4b4f      	ldr	r3, [pc, #316]	; (8003c24 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	08db      	lsrs	r3, r3, #3
 8003aec:	4a4e      	ldr	r2, [pc, #312]	; (8003c28 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0a1a      	lsrs	r2, r3, #8
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	009a      	lsls	r2, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d116      	bne.n	8003b3a <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f043 0220 	orr.w	r2, r3, #32
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e06e      	b.n	8003c18 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d0db      	beq.n	8003b00 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e060      	b.n	8003c18 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d007      	beq.n	8003b7c <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2221      	movs	r2, #33	; 0x21
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2210      	movs	r2, #16
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	893a      	ldrh	r2, [r7, #8]
 8003bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a3a      	ldr	r2, [r7, #32]
 8003bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003bbe:	897a      	ldrh	r2, [r7, #10]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b11      	cmp	r3, #17
 8003bce:	d10c      	bne.n	8003bea <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003bd6:	d003      	beq.n	8003be0 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003bde:	d101      	bne.n	8003be4 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d107      	bne.n	8003bfa <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003c10:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e000      	b.n	8003c18 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8003c16:	2302      	movs	r3, #2
  }
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	20000034 	.word	0x20000034
 8003c28:	14f8b589 	.word	0x14f8b589

08003c2c <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b089      	sub	sp, #36	; 0x24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	461a      	mov	r2, r3
 8003c38:	460b      	mov	r3, r1
 8003c3a:	817b      	strh	r3, [r7, #10]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c48:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003c4c:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b20      	cmp	r3, #32
 8003c58:	f040 80da 	bne.w	8003e10 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c6a:	d005      	beq.n	8003c78 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d002      	beq.n	8003c78 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8003c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d130      	bne.n	8003cda <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c78:	4b69      	ldr	r3, [pc, #420]	; (8003e20 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	08db      	lsrs	r3, r3, #3
 8003c7e:	4a69      	ldr	r2, [pc, #420]	; (8003e24 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	0a1a      	lsrs	r2, r3, #8
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009a      	lsls	r2, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d116      	bne.n	8003ccc <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f043 0220 	orr.w	r2, r3, #32
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0a2      	b.n	8003e12 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d0db      	beq.n	8003c92 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e094      	b.n	8003e12 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d007      	beq.n	8003d0e <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d1c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2222      	movs	r2, #34	; 0x22
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2210      	movs	r2, #16
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	893a      	ldrh	r2, [r7, #8]
 8003d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d4e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003d50:	897a      	ldrh	r2, [r7, #10]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d126      	bne.n	8003db4 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d002      	beq.n	8003d72 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d120      	bne.n	8003db4 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b12      	cmp	r3, #18
 8003d76:	d114      	bne.n	8003da2 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d86:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d96:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d9e:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8003da0:	e010      	b.n	8003dc4 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003db0:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8003db2:	e007      	b.n	8003dc4 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dc2:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b12      	cmp	r3, #18
 8003dc8:	d10c      	bne.n	8003de4 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003dd0:	d003      	beq.n	8003dda <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003dd8:	d101      	bne.n	8003dde <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d107      	bne.n	8003df4 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6859      	ldr	r1, [r3, #4]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e000      	b.n	8003e12 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
  }
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3724      	adds	r7, #36	; 0x24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000034 	.word	0x20000034
 8003e24:	14f8b589 	.word	0x14f8b589

08003e28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e48:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e50:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d003      	beq.n	8003e60 <HAL_I2C_EV_IRQHandler+0x38>
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	2b40      	cmp	r3, #64	; 0x40
 8003e5c:	f040 80c1 	bne.w	8003fe2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10d      	bne.n	8003e96 <HAL_I2C_EV_IRQHandler+0x6e>
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003e80:	d003      	beq.n	8003e8a <HAL_I2C_EV_IRQHandler+0x62>
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003e88:	d101      	bne.n	8003e8e <HAL_I2C_EV_IRQHandler+0x66>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_I2C_EV_IRQHandler+0x68>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	f000 8132 	beq.w	80040fa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00c      	beq.n	8003eba <HAL_I2C_EV_IRQHandler+0x92>
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	0a5b      	lsrs	r3, r3, #9
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d006      	beq.n	8003eba <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f001 ffd6 	bl	8005e5e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fd83 	bl	80049be <I2C_Master_SB>
 8003eb8:	e092      	b.n	8003fe0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	08db      	lsrs	r3, r3, #3
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_I2C_EV_IRQHandler+0xb2>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	0a5b      	lsrs	r3, r3, #9
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fdf9 	bl	8004aca <I2C_Master_ADD10>
 8003ed8:	e082      	b.n	8003fe0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HAL_I2C_EV_IRQHandler+0xd2>
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	0a5b      	lsrs	r3, r3, #9
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fe13 	bl	8004b1e <I2C_Master_ADDR>
 8003ef8:	e072      	b.n	8003fe0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	089b      	lsrs	r3, r3, #2
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d03b      	beq.n	8003f7e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f14:	f000 80f3 	beq.w	80040fe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	09db      	lsrs	r3, r3, #7
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00f      	beq.n	8003f44 <HAL_I2C_EV_IRQHandler+0x11c>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	0a9b      	lsrs	r3, r3, #10
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d009      	beq.n	8003f44 <HAL_I2C_EV_IRQHandler+0x11c>
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	089b      	lsrs	r3, r3, #2
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d103      	bne.n	8003f44 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f9f3 	bl	8004328 <I2C_MasterTransmit_TXE>
 8003f42:	e04d      	b.n	8003fe0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	089b      	lsrs	r3, r3, #2
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80d6 	beq.w	80040fe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	0a5b      	lsrs	r3, r3, #9
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80cf 	beq.w	80040fe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f60:	7bbb      	ldrb	r3, [r7, #14]
 8003f62:	2b21      	cmp	r3, #33	; 0x21
 8003f64:	d103      	bne.n	8003f6e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fa7a 	bl	8004460 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f6c:	e0c7      	b.n	80040fe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	2b40      	cmp	r3, #64	; 0x40
 8003f72:	f040 80c4 	bne.w	80040fe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fae8 	bl	800454c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f7c:	e0bf      	b.n	80040fe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f8c:	f000 80b7 	beq.w	80040fe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	099b      	lsrs	r3, r3, #6
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00f      	beq.n	8003fbc <HAL_I2C_EV_IRQHandler+0x194>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	0a9b      	lsrs	r3, r3, #10
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <HAL_I2C_EV_IRQHandler+0x194>
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	089b      	lsrs	r3, r3, #2
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d103      	bne.n	8003fbc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fb5d 	bl	8004674 <I2C_MasterReceive_RXNE>
 8003fba:	e011      	b.n	8003fe0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	089b      	lsrs	r3, r3, #2
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 809a 	beq.w	80040fe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	0a5b      	lsrs	r3, r3, #9
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 8093 	beq.w	80040fe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fc06 	bl	80047ea <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fde:	e08e      	b.n	80040fe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003fe0:	e08d      	b.n	80040fe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d004      	beq.n	8003ff4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	e007      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d012      	beq.n	8004036 <HAL_I2C_EV_IRQHandler+0x20e>
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	0a5b      	lsrs	r3, r3, #9
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00c      	beq.n	8004036 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800402c:	69b9      	ldr	r1, [r7, #24]
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 ffc4 	bl	8004fbc <I2C_Slave_ADDR>
 8004034:	e066      	b.n	8004104 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d009      	beq.n	8004056 <HAL_I2C_EV_IRQHandler+0x22e>
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	0a5b      	lsrs	r3, r3, #9
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fffe 	bl	8005050 <I2C_Slave_STOPF>
 8004054:	e056      	b.n	8004104 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004056:	7bbb      	ldrb	r3, [r7, #14]
 8004058:	2b21      	cmp	r3, #33	; 0x21
 800405a:	d002      	beq.n	8004062 <HAL_I2C_EV_IRQHandler+0x23a>
 800405c:	7bbb      	ldrb	r3, [r7, #14]
 800405e:	2b29      	cmp	r3, #41	; 0x29
 8004060:	d125      	bne.n	80040ae <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	09db      	lsrs	r3, r3, #7
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00f      	beq.n	800408e <HAL_I2C_EV_IRQHandler+0x266>
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	0a9b      	lsrs	r3, r3, #10
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d009      	beq.n	800408e <HAL_I2C_EV_IRQHandler+0x266>
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d103      	bne.n	800408e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 feda 	bl	8004e40 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800408c:	e039      	b.n	8004102 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	089b      	lsrs	r3, r3, #2
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d033      	beq.n	8004102 <HAL_I2C_EV_IRQHandler+0x2da>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	0a5b      	lsrs	r3, r3, #9
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d02d      	beq.n	8004102 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 ff07 	bl	8004eba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040ac:	e029      	b.n	8004102 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	099b      	lsrs	r3, r3, #6
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00f      	beq.n	80040da <HAL_I2C_EV_IRQHandler+0x2b2>
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	0a9b      	lsrs	r3, r3, #10
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_I2C_EV_IRQHandler+0x2b2>
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	089b      	lsrs	r3, r3, #2
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d103      	bne.n	80040da <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 ff12 	bl	8004efc <I2C_SlaveReceive_RXNE>
 80040d8:	e014      	b.n	8004104 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	089b      	lsrs	r3, r3, #2
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00e      	beq.n	8004104 <HAL_I2C_EV_IRQHandler+0x2dc>
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	0a5b      	lsrs	r3, r3, #9
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 ff40 	bl	8004f78 <I2C_SlaveReceive_BTF>
 80040f8:	e004      	b.n	8004104 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80040fa:	bf00      	nop
 80040fc:	e002      	b.n	8004104 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004102:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b08a      	sub	sp, #40	; 0x28
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004122:	2300      	movs	r3, #0
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800412c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	0a1b      	lsrs	r3, r3, #8
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00e      	beq.n	8004158 <HAL_I2C_ER_IRQHandler+0x4e>
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	0a1b      	lsrs	r3, r3, #8
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	f043 0301 	orr.w	r3, r3, #1
 800414c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004156:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	0a5b      	lsrs	r3, r3, #9
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00e      	beq.n	8004182 <HAL_I2C_ER_IRQHandler+0x78>
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	f043 0302 	orr.w	r3, r3, #2
 8004176:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004180:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	0a9b      	lsrs	r3, r3, #10
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d03f      	beq.n	800420e <HAL_I2C_ER_IRQHandler+0x104>
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	0a1b      	lsrs	r3, r3, #8
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d039      	beq.n	800420e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800419a:	7efb      	ldrb	r3, [r7, #27]
 800419c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80041b4:	7ebb      	ldrb	r3, [r7, #26]
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d112      	bne.n	80041e0 <HAL_I2C_ER_IRQHandler+0xd6>
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10f      	bne.n	80041e0 <HAL_I2C_ER_IRQHandler+0xd6>
 80041c0:	7cfb      	ldrb	r3, [r7, #19]
 80041c2:	2b21      	cmp	r3, #33	; 0x21
 80041c4:	d008      	beq.n	80041d8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80041c6:	7cfb      	ldrb	r3, [r7, #19]
 80041c8:	2b29      	cmp	r3, #41	; 0x29
 80041ca:	d005      	beq.n	80041d8 <HAL_I2C_ER_IRQHandler+0xce>
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	2b28      	cmp	r3, #40	; 0x28
 80041d0:	d106      	bne.n	80041e0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b21      	cmp	r3, #33	; 0x21
 80041d6:	d103      	bne.n	80041e0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f001 f869 	bl	80052b0 <I2C_Slave_AF>
 80041de:	e016      	b.n	800420e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041e8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	f043 0304 	orr.w	r3, r3, #4
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80041f2:	7efb      	ldrb	r3, [r7, #27]
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d002      	beq.n	80041fe <HAL_I2C_ER_IRQHandler+0xf4>
 80041f8:	7efb      	ldrb	r3, [r7, #27]
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d107      	bne.n	800420e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	0adb      	lsrs	r3, r3, #11
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00e      	beq.n	8004238 <HAL_I2C_ER_IRQHandler+0x12e>
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	f043 0308 	orr.w	r3, r3, #8
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004236:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f001 f8a0 	bl	8005390 <I2C_ITError>
  }
}
 8004250:	bf00      	nop
 8004252:	3728      	adds	r7, #40	; 0x28
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
 80042b4:	4613      	mov	r3, r2
 80042b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004336:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800433e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d150      	bne.n	80043f0 <I2C_MasterTransmit_TXE+0xc8>
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	2b21      	cmp	r3, #33	; 0x21
 8004352:	d14d      	bne.n	80043f0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b08      	cmp	r3, #8
 8004358:	d01d      	beq.n	8004396 <I2C_MasterTransmit_TXE+0x6e>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b20      	cmp	r3, #32
 800435e:	d01a      	beq.n	8004396 <I2C_MasterTransmit_TXE+0x6e>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004366:	d016      	beq.n	8004396 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004376:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2211      	movs	r2, #17
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff ff62 	bl	8004258 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004394:	e060      	b.n	8004458 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043a4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b40      	cmp	r3, #64	; 0x40
 80043ce:	d107      	bne.n	80043e0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff ff7d 	bl	80042d8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043de:	e03b      	b.n	8004458 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ff35 	bl	8004258 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043ee:	e033      	b.n	8004458 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2b21      	cmp	r3, #33	; 0x21
 80043f4:	d005      	beq.n	8004402 <I2C_MasterTransmit_TXE+0xda>
 80043f6:	7bbb      	ldrb	r3, [r7, #14]
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	d12d      	bne.n	8004458 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	2b22      	cmp	r3, #34	; 0x22
 8004400:	d12a      	bne.n	8004458 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d108      	bne.n	800441e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800441c:	e01c      	b.n	8004458 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b40      	cmp	r3, #64	; 0x40
 8004428:	d103      	bne.n	8004432 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f88e 	bl	800454c <I2C_MemoryTransmit_TXE_BTF>
}
 8004430:	e012      	b.n	8004458 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004456:	e7ff      	b.n	8004458 <I2C_MasterTransmit_TXE+0x130>
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b21      	cmp	r3, #33	; 0x21
 8004478:	d164      	bne.n	8004544 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d012      	beq.n	80044aa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	781a      	ldrb	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80044a8:	e04c      	b.n	8004544 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d01d      	beq.n	80044ec <I2C_MasterTransmit_BTF+0x8c>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d01a      	beq.n	80044ec <I2C_MasterTransmit_BTF+0x8c>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044bc:	d016      	beq.n	80044ec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044cc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2211      	movs	r2, #17
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff feb7 	bl	8004258 <HAL_I2C_MasterTxCpltCallback>
}
 80044ea:	e02b      	b.n	8004544 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044fa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800450a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b40      	cmp	r3, #64	; 0x40
 8004524:	d107      	bne.n	8004536 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff fed2 	bl	80042d8 <HAL_I2C_MemTxCpltCallback>
}
 8004534:	e006      	b.n	8004544 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fe8a 	bl	8004258 <HAL_I2C_MasterTxCpltCallback>
}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004560:	2b00      	cmp	r3, #0
 8004562:	d11d      	bne.n	80045a0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d10b      	bne.n	8004584 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004570:	b2da      	uxtb	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457c:	1c9a      	adds	r2, r3, #2
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004582:	e073      	b.n	800466c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004588:	b29b      	uxth	r3, r3
 800458a:	121b      	asrs	r3, r3, #8
 800458c:	b2da      	uxtb	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800459e:	e065      	b.n	800466c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10b      	bne.n	80045c0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045be:	e055      	b.n	800466c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d151      	bne.n	800466c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	2b22      	cmp	r3, #34	; 0x22
 80045cc:	d10d      	bne.n	80045ea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045dc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045e8:	e040      	b.n	800466c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d015      	beq.n	8004620 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b21      	cmp	r3, #33	; 0x21
 80045f8:	d112      	bne.n	8004620 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	781a      	ldrb	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800461e:	e025      	b.n	800466c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d120      	bne.n	800466c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	2b21      	cmp	r3, #33	; 0x21
 800462e:	d11d      	bne.n	800466c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800463e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fe36 	bl	80042d8 <HAL_I2C_MemTxCpltCallback>
}
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b22      	cmp	r3, #34	; 0x22
 8004686:	f040 80ac 	bne.w	80047e2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468e:	b29b      	uxth	r3, r3
 8004690:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b03      	cmp	r3, #3
 8004696:	d921      	bls.n	80046dc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	f040 808c 	bne.w	80047e2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80046da:	e082      	b.n	80047e2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d075      	beq.n	80047d0 <I2C_MasterReceive_RXNE+0x15c>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d002      	beq.n	80046f0 <I2C_MasterReceive_RXNE+0x7c>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d16f      	bne.n	80047d0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f001 fafd 	bl	8005cf0 <I2C_WaitOnSTOPRequestThroughIT>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d142      	bne.n	8004782 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800471a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b40      	cmp	r3, #64	; 0x40
 8004754:	d10a      	bne.n	800476c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff fdc1 	bl	80042ec <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800476a:	e03a      	b.n	80047e2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2212      	movs	r2, #18
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff fd76 	bl	800426c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004780:	e02f      	b.n	80047e2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004790:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff fd99 	bl	8004300 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047ce:	e008      	b.n	80047e2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047de:	605a      	str	r2, [r3, #4]
}
 80047e0:	e7ff      	b.n	80047e2 <I2C_MasterReceive_RXNE+0x16e>
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d11b      	bne.n	800483a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004810:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004838:	e0bd      	b.n	80049b6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b03      	cmp	r3, #3
 8004842:	d129      	bne.n	8004898 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004852:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b04      	cmp	r3, #4
 8004858:	d00a      	beq.n	8004870 <I2C_MasterReceive_BTF+0x86>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b02      	cmp	r3, #2
 800485e:	d007      	beq.n	8004870 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004896:	e08e      	b.n	80049b6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d176      	bne.n	8004990 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d002      	beq.n	80048ae <I2C_MasterReceive_BTF+0xc4>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b10      	cmp	r3, #16
 80048ac:	d108      	bne.n	80048c0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	e019      	b.n	80048f4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d002      	beq.n	80048cc <I2C_MasterReceive_BTF+0xe2>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d108      	bne.n	80048de <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	e00a      	b.n	80048f4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d007      	beq.n	80048f4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800494e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b40      	cmp	r3, #64	; 0x40
 8004962:	d10a      	bne.n	800497a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff fcba 	bl	80042ec <HAL_I2C_MemRxCpltCallback>
}
 8004978:	e01d      	b.n	80049b6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2212      	movs	r2, #18
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff fc6f 	bl	800426c <HAL_I2C_MasterRxCpltCallback>
}
 800498e:	e012      	b.n	80049b6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	d117      	bne.n	8004a02 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049ea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80049ec:	e067      	b.n	8004abe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	611a      	str	r2, [r3, #16]
}
 8004a00:	e05d      	b.n	8004abe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a0a:	d133      	bne.n	8004a74 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b21      	cmp	r3, #33	; 0x21
 8004a16:	d109      	bne.n	8004a2c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a28:	611a      	str	r2, [r3, #16]
 8004a2a:	e008      	b.n	8004a3e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d004      	beq.n	8004a50 <I2C_Master_SB+0x92>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d108      	bne.n	8004a62 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d032      	beq.n	8004abe <I2C_Master_SB+0x100>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d02d      	beq.n	8004abe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a70:	605a      	str	r2, [r3, #4]
}
 8004a72:	e024      	b.n	8004abe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10e      	bne.n	8004a9a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	11db      	asrs	r3, r3, #7
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f003 0306 	and.w	r3, r3, #6
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f063 030f 	orn	r3, r3, #15
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	611a      	str	r2, [r3, #16]
}
 8004a98:	e011      	b.n	8004abe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d10d      	bne.n	8004abe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	11db      	asrs	r3, r3, #7
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f003 0306 	and.w	r3, r3, #6
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	f063 030e 	orn	r3, r3, #14
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	611a      	str	r2, [r3, #16]
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d004      	beq.n	8004af0 <I2C_Master_ADD10+0x26>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d108      	bne.n	8004b02 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00c      	beq.n	8004b12 <I2C_Master_ADD10+0x48>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b10:	605a      	str	r2, [r3, #4]
  }
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b091      	sub	sp, #68	; 0x44
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b22      	cmp	r3, #34	; 0x22
 8004b46:	f040 8169 	bne.w	8004e1c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10f      	bne.n	8004b72 <I2C_Master_ADDR+0x54>
 8004b52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004b56:	2b40      	cmp	r3, #64	; 0x40
 8004b58:	d10b      	bne.n	8004b72 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	633b      	str	r3, [r7, #48]	; 0x30
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	e160      	b.n	8004e34 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d11d      	bne.n	8004bb6 <I2C_Master_ADDR+0x98>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b82:	d118      	bne.n	8004bb6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b84:	2300      	movs	r3, #0
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	651a      	str	r2, [r3, #80]	; 0x50
 8004bb4:	e13e      	b.n	8004e34 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d113      	bne.n	8004be8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e115      	b.n	8004e14 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	f040 808a 	bne.w	8004d08 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bfa:	d137      	bne.n	8004c6c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c1a:	d113      	bne.n	8004c44 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	e0e7      	b.n	8004e14 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c44:	2300      	movs	r3, #0
 8004c46:	623b      	str	r3, [r7, #32]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	623b      	str	r3, [r7, #32]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	623b      	str	r3, [r7, #32]
 8004c58:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	e0d3      	b.n	8004e14 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d02e      	beq.n	8004cd0 <I2C_Master_ADDR+0x1b2>
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d02b      	beq.n	8004cd0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7a:	2b12      	cmp	r3, #18
 8004c7c:	d102      	bne.n	8004c84 <I2C_Master_ADDR+0x166>
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d125      	bne.n	8004cd0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d00e      	beq.n	8004ca8 <I2C_Master_ADDR+0x18a>
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d00b      	beq.n	8004ca8 <I2C_Master_ADDR+0x18a>
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c92:	2b10      	cmp	r3, #16
 8004c94:	d008      	beq.n	8004ca8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e007      	b.n	8004cb8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cb6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	61fb      	str	r3, [r7, #28]
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	e0a1      	b.n	8004e14 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cde:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61bb      	str	r3, [r7, #24]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	61bb      	str	r3, [r7, #24]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	61bb      	str	r3, [r7, #24]
 8004cf4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	e085      	b.n	8004e14 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d14d      	bne.n	8004dae <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d016      	beq.n	8004d46 <I2C_Master_ADDR+0x228>
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d013      	beq.n	8004d46 <I2C_Master_ADDR+0x228>
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	2b10      	cmp	r3, #16
 8004d22:	d010      	beq.n	8004d46 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d32:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	e007      	b.n	8004d56 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d54:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d64:	d117      	bne.n	8004d96 <I2C_Master_ADDR+0x278>
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d6c:	d00b      	beq.n	8004d86 <I2C_Master_ADDR+0x268>
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d008      	beq.n	8004d86 <I2C_Master_ADDR+0x268>
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d005      	beq.n	8004d86 <I2C_Master_ADDR+0x268>
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	2b10      	cmp	r3, #16
 8004d7e:	d002      	beq.n	8004d86 <I2C_Master_ADDR+0x268>
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d107      	bne.n	8004d96 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	e032      	b.n	8004e14 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dbc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dcc:	d117      	bne.n	8004dfe <I2C_Master_ADDR+0x2e0>
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dd4:	d00b      	beq.n	8004dee <I2C_Master_ADDR+0x2d0>
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d008      	beq.n	8004dee <I2C_Master_ADDR+0x2d0>
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d005      	beq.n	8004dee <I2C_Master_ADDR+0x2d0>
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d002      	beq.n	8004dee <I2C_Master_ADDR+0x2d0>
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d107      	bne.n	8004dfe <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dfc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004e1a:	e00b      	b.n	8004e34 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
}
 8004e32:	e7ff      	b.n	8004e34 <I2C_Master_ADDR+0x316>
 8004e34:	bf00      	nop
 8004e36:	3744      	adds	r7, #68	; 0x44
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d02b      	beq.n	8004eb2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	781a      	ldrb	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d114      	bne.n	8004eb2 <I2C_SlaveTransmit_TXE+0x72>
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b29      	cmp	r3, #41	; 0x29
 8004e8c:	d111      	bne.n	8004eb2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2221      	movs	r2, #33	; 0x21
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2228      	movs	r2, #40	; 0x28
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff f9e7 	bl	8004280 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d011      	beq.n	8004ef0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	781a      	ldrb	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d02c      	beq.n	8004f70 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d114      	bne.n	8004f70 <I2C_SlaveReceive_RXNE+0x74>
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	2b2a      	cmp	r3, #42	; 0x2a
 8004f4a:	d111      	bne.n	8004f70 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2222      	movs	r2, #34	; 0x22
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2228      	movs	r2, #40	; 0x28
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff f992 	bl	8004294 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d012      	beq.n	8004fb0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fd6:	2b28      	cmp	r3, #40	; 0x28
 8004fd8:	d127      	bne.n	800502a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	089b      	lsrs	r3, r3, #2
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	09db      	lsrs	r3, r3, #7
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d103      	bne.n	800500e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	81bb      	strh	r3, [r7, #12]
 800500c:	e002      	b.n	8005014 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800501c:	89ba      	ldrh	r2, [r7, #12]
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	4619      	mov	r1, r3
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff f940 	bl	80042a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005028:	e00e      	b.n	8005048 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502a:	2300      	movs	r3, #0
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005048:	bf00      	nop
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800506e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005070:	2300      	movs	r3, #0
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ac:	d172      	bne.n	8005194 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	2b22      	cmp	r3, #34	; 0x22
 80050b2:	d002      	beq.n	80050ba <I2C_Slave_STOPF+0x6a>
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	2b2a      	cmp	r3, #42	; 0x2a
 80050b8:	d135      	bne.n	8005126 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f043 0204 	orr.w	r2, r3, #4
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fd fdb4 	bl	8002c60 <HAL_DMA_GetState>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d049      	beq.n	8005192 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	4a69      	ldr	r2, [pc, #420]	; (80052a8 <I2C_Slave_STOPF+0x258>)
 8005104:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	4618      	mov	r0, r3
 800510c:	f7fd fbfc 	bl	8002908 <HAL_DMA_Abort_IT>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d03d      	beq.n	8005192 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005120:	4610      	mov	r0, r2
 8005122:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005124:	e035      	b.n	8005192 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	b29a      	uxth	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	f043 0204 	orr.w	r2, r3, #4
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005158:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515e:	4618      	mov	r0, r3
 8005160:	f7fd fd7e 	bl	8002c60 <HAL_DMA_GetState>
 8005164:	4603      	mov	r3, r0
 8005166:	2b01      	cmp	r3, #1
 8005168:	d014      	beq.n	8005194 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516e:	4a4e      	ldr	r2, [pc, #312]	; (80052a8 <I2C_Slave_STOPF+0x258>)
 8005170:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005176:	4618      	mov	r0, r3
 8005178:	f7fd fbc6 	bl	8002908 <HAL_DMA_Abort_IT>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800518c:	4610      	mov	r0, r2
 800518e:	4798      	blx	r3
 8005190:	e000      	b.n	8005194 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005192:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d03e      	beq.n	800521c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d112      	bne.n	80051d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051dc:	2b40      	cmp	r3, #64	; 0x40
 80051de:	d112      	bne.n	8005206 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d005      	beq.n	800521c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	f043 0204 	orr.w	r2, r3, #4
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f8b3 	bl	8005390 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800522a:	e039      	b.n	80052a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800522c:	7bfb      	ldrb	r3, [r7, #15]
 800522e:	2b2a      	cmp	r3, #42	; 0x2a
 8005230:	d109      	bne.n	8005246 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2228      	movs	r2, #40	; 0x28
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff f827 	bl	8004294 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b28      	cmp	r3, #40	; 0x28
 8005250:	d111      	bne.n	8005276 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a15      	ldr	r2, [pc, #84]	; (80052ac <I2C_Slave_STOPF+0x25c>)
 8005256:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff f828 	bl	80042c4 <HAL_I2C_ListenCpltCallback>
}
 8005274:	e014      	b.n	80052a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	2b22      	cmp	r3, #34	; 0x22
 800527c:	d002      	beq.n	8005284 <I2C_Slave_STOPF+0x234>
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	2b22      	cmp	r3, #34	; 0x22
 8005282:	d10d      	bne.n	80052a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7fe fffa 	bl	8004294 <HAL_I2C_SlaveRxCpltCallback>
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	080058f1 	.word	0x080058f1
 80052ac:	ffff0000 	.word	0xffff0000

080052b0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052be:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d002      	beq.n	80052d2 <I2C_Slave_AF+0x22>
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d129      	bne.n	8005326 <I2C_Slave_AF+0x76>
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	2b28      	cmp	r3, #40	; 0x28
 80052d6:	d126      	bne.n	8005326 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a2c      	ldr	r2, [pc, #176]	; (800538c <I2C_Slave_AF+0xdc>)
 80052dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052ec:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052f6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005306:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fe ffd0 	bl	80042c4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005324:	e02e      	b.n	8005384 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	2b21      	cmp	r3, #33	; 0x21
 800532a:	d126      	bne.n	800537a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a17      	ldr	r2, [pc, #92]	; (800538c <I2C_Slave_AF+0xdc>)
 8005330:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2221      	movs	r2, #33	; 0x21
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005356:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005360:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005370:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fe ff84 	bl	8004280 <HAL_I2C_SlaveTxCpltCallback>
}
 8005378:	e004      	b.n	8005384 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005382:	615a      	str	r2, [r3, #20]
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	ffff0000 	.word	0xffff0000

08005390 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053a8:	7bbb      	ldrb	r3, [r7, #14]
 80053aa:	2b10      	cmp	r3, #16
 80053ac:	d002      	beq.n	80053b4 <I2C_ITError+0x24>
 80053ae:	7bbb      	ldrb	r3, [r7, #14]
 80053b0:	2b40      	cmp	r3, #64	; 0x40
 80053b2:	d10a      	bne.n	80053ca <I2C_ITError+0x3a>
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	2b22      	cmp	r3, #34	; 0x22
 80053b8:	d107      	bne.n	80053ca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053c8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053d0:	2b28      	cmp	r3, #40	; 0x28
 80053d2:	d107      	bne.n	80053e4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2228      	movs	r2, #40	; 0x28
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053e2:	e015      	b.n	8005410 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f2:	d00a      	beq.n	800540a <I2C_ITError+0x7a>
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	2b60      	cmp	r3, #96	; 0x60
 80053f8:	d007      	beq.n	800540a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541e:	d162      	bne.n	80054e6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800542e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b01      	cmp	r3, #1
 800543c:	d020      	beq.n	8005480 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005442:	4a6a      	ldr	r2, [pc, #424]	; (80055ec <I2C_ITError+0x25c>)
 8005444:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544a:	4618      	mov	r0, r3
 800544c:	f7fd fa5c 	bl	8002908 <HAL_DMA_Abort_IT>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8089 	beq.w	800556a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0201 	bic.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800547a:	4610      	mov	r0, r2
 800547c:	4798      	blx	r3
 800547e:	e074      	b.n	800556a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	4a59      	ldr	r2, [pc, #356]	; (80055ec <I2C_ITError+0x25c>)
 8005486:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	4618      	mov	r0, r3
 800548e:	f7fd fa3b 	bl	8002908 <HAL_DMA_Abort_IT>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d068      	beq.n	800556a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d10b      	bne.n	80054be <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054e0:	4610      	mov	r0, r2
 80054e2:	4798      	blx	r3
 80054e4:	e041      	b.n	800556a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b60      	cmp	r3, #96	; 0x60
 80054f0:	d125      	bne.n	800553e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b40      	cmp	r3, #64	; 0x40
 800550c:	d10b      	bne.n	8005526 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0201 	bic.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fe feec 	bl	8004314 <HAL_I2C_AbortCpltCallback>
 800553c:	e015      	b.n	800556a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	d10b      	bne.n	8005564 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fe fecb 	bl	8004300 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10e      	bne.n	8005598 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005580:	2b00      	cmp	r3, #0
 8005582:	d109      	bne.n	8005598 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800558a:	2b00      	cmp	r3, #0
 800558c:	d104      	bne.n	8005598 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005594:	2b00      	cmp	r3, #0
 8005596:	d007      	beq.n	80055a8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055a6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d113      	bne.n	80055e4 <I2C_ITError+0x254>
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b28      	cmp	r3, #40	; 0x28
 80055c0:	d110      	bne.n	80055e4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <I2C_ITError+0x260>)
 80055c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fe fe70 	bl	80042c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055e4:	bf00      	nop
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	080058f1 	.word	0x080058f1
 80055f0:	ffff0000 	.word	0xffff0000

080055f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b088      	sub	sp, #32
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	4608      	mov	r0, r1
 80055fe:	4611      	mov	r1, r2
 8005600:	461a      	mov	r2, r3
 8005602:	4603      	mov	r3, r0
 8005604:	817b      	strh	r3, [r7, #10]
 8005606:	460b      	mov	r3, r1
 8005608:	813b      	strh	r3, [r7, #8]
 800560a:	4613      	mov	r3, r2
 800560c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800561c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	2200      	movs	r2, #0
 8005626:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 fa08 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00d      	beq.n	8005652 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005644:	d103      	bne.n	800564e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800564c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e05f      	b.n	8005712 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005652:	897b      	ldrh	r3, [r7, #10]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005660:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	6a3a      	ldr	r2, [r7, #32]
 8005666:	492d      	ldr	r1, [pc, #180]	; (800571c <I2C_RequestMemoryWrite+0x128>)
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 fa40 	bl	8005aee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e04c      	b.n	8005712 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800568e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005690:	6a39      	ldr	r1, [r7, #32]
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 faaa 	bl	8005bec <I2C_WaitOnTXEFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00d      	beq.n	80056ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d107      	bne.n	80056b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e02b      	b.n	8005712 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d105      	bne.n	80056cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056c0:	893b      	ldrh	r3, [r7, #8]
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	611a      	str	r2, [r3, #16]
 80056ca:	e021      	b.n	8005710 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056cc:	893b      	ldrh	r3, [r7, #8]
 80056ce:	0a1b      	lsrs	r3, r3, #8
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056dc:	6a39      	ldr	r1, [r7, #32]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 fa84 	bl	8005bec <I2C_WaitOnTXEFlagUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00d      	beq.n	8005706 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d107      	bne.n	8005702 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005700:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e005      	b.n	8005712 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005706:	893b      	ldrh	r3, [r7, #8]
 8005708:	b2da      	uxtb	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	00010002 	.word	0x00010002

08005720 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	4608      	mov	r0, r1
 800572a:	4611      	mov	r1, r2
 800572c:	461a      	mov	r2, r3
 800572e:	4603      	mov	r3, r0
 8005730:	817b      	strh	r3, [r7, #10]
 8005732:	460b      	mov	r3, r1
 8005734:	813b      	strh	r3, [r7, #8]
 8005736:	4613      	mov	r3, r2
 8005738:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005748:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005758:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	2200      	movs	r2, #0
 8005762:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f96a 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00d      	beq.n	800578e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005780:	d103      	bne.n	800578a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e0aa      	b.n	80058e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800578e:	897b      	ldrh	r3, [r7, #10]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	461a      	mov	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800579c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	6a3a      	ldr	r2, [r7, #32]
 80057a2:	4952      	ldr	r1, [pc, #328]	; (80058ec <I2C_RequestMemoryRead+0x1cc>)
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f9a2 	bl	8005aee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e097      	b.n	80058e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b4:	2300      	movs	r3, #0
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057cc:	6a39      	ldr	r1, [r7, #32]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fa0c 	bl	8005bec <I2C_WaitOnTXEFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00d      	beq.n	80057f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d107      	bne.n	80057f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e076      	b.n	80058e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d105      	bne.n	8005808 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057fc:	893b      	ldrh	r3, [r7, #8]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	611a      	str	r2, [r3, #16]
 8005806:	e021      	b.n	800584c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005808:	893b      	ldrh	r3, [r7, #8]
 800580a:	0a1b      	lsrs	r3, r3, #8
 800580c:	b29b      	uxth	r3, r3
 800580e:	b2da      	uxtb	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005818:	6a39      	ldr	r1, [r7, #32]
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f9e6 	bl	8005bec <I2C_WaitOnTXEFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00d      	beq.n	8005842 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	2b04      	cmp	r3, #4
 800582c:	d107      	bne.n	800583e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800583c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e050      	b.n	80058e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005842:	893b      	ldrh	r3, [r7, #8]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800584c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584e:	6a39      	ldr	r1, [r7, #32]
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f9cb 	bl	8005bec <I2C_WaitOnTXEFlagUntilTimeout>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00d      	beq.n	8005878 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	2b04      	cmp	r3, #4
 8005862:	d107      	bne.n	8005874 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005872:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e035      	b.n	80058e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005886:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	2200      	movs	r2, #0
 8005890:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f8d3 	bl	8005a40 <I2C_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ae:	d103      	bne.n	80058b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e013      	b.n	80058e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058bc:	897b      	ldrh	r3, [r7, #10]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	6a3a      	ldr	r2, [r7, #32]
 80058d0:	4906      	ldr	r1, [pc, #24]	; (80058ec <I2C_RequestMemoryRead+0x1cc>)
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 f90b 	bl	8005aee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	00010002 	.word	0x00010002

080058f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005908:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800590a:	4b4b      	ldr	r3, [pc, #300]	; (8005a38 <I2C_DMAAbort+0x148>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	08db      	lsrs	r3, r3, #3
 8005910:	4a4a      	ldr	r2, [pc, #296]	; (8005a3c <I2C_DMAAbort+0x14c>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	0a1a      	lsrs	r2, r3, #8
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	00da      	lsls	r2, r3, #3
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f043 0220 	orr.w	r2, r3, #32
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005936:	e00a      	b.n	800594e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3b01      	subs	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594c:	d0ea      	beq.n	8005924 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595a:	2200      	movs	r2, #0
 800595c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	2200      	movs	r2, #0
 800596c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800597c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2200      	movs	r2, #0
 8005982:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	2200      	movs	r2, #0
 8005992:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	2200      	movs	r2, #0
 80059a2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b60      	cmp	r3, #96	; 0x60
 80059be:	d10e      	bne.n	80059de <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2200      	movs	r2, #0
 80059d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80059d6:	6978      	ldr	r0, [r7, #20]
 80059d8:	f7fe fc9c 	bl	8004314 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80059dc:	e027      	b.n	8005a2e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059de:	7cfb      	ldrb	r3, [r7, #19]
 80059e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059e4:	2b28      	cmp	r3, #40	; 0x28
 80059e6:	d117      	bne.n	8005a18 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2228      	movs	r2, #40	; 0x28
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a16:	e007      	b.n	8005a28 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005a28:	6978      	ldr	r0, [r7, #20]
 8005a2a:	f7fe fc69 	bl	8004300 <HAL_I2C_ErrorCallback>
}
 8005a2e:	bf00      	nop
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000034 	.word	0x20000034
 8005a3c:	14f8b589 	.word	0x14f8b589

08005a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a50:	e025      	b.n	8005a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d021      	beq.n	8005a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a5a:	f7fc fc9d 	bl	8002398 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d302      	bcc.n	8005a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d116      	bne.n	8005a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f043 0220 	orr.w	r2, r3, #32
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e023      	b.n	8005ae6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	0c1b      	lsrs	r3, r3, #16
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10d      	bne.n	8005ac4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	43da      	mvns	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bf0c      	ite	eq
 8005aba:	2301      	moveq	r3, #1
 8005abc:	2300      	movne	r3, #0
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	e00c      	b.n	8005ade <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	43da      	mvns	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bf0c      	ite	eq
 8005ad6:	2301      	moveq	r3, #1
 8005ad8:	2300      	movne	r3, #0
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d0b6      	beq.n	8005a52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005afc:	e051      	b.n	8005ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0c:	d123      	bne.n	8005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	f043 0204 	orr.w	r2, r3, #4
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e046      	b.n	8005be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5c:	d021      	beq.n	8005ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5e:	f7fc fc1b 	bl	8002398 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d302      	bcc.n	8005b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d116      	bne.n	8005ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	f043 0220 	orr.w	r2, r3, #32
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e020      	b.n	8005be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	0c1b      	lsrs	r3, r3, #16
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d10c      	bne.n	8005bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	43da      	mvns	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bf14      	ite	ne
 8005bbe:	2301      	movne	r3, #1
 8005bc0:	2300      	moveq	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	e00b      	b.n	8005bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	43da      	mvns	r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	bf14      	ite	ne
 8005bd8:	2301      	movne	r3, #1
 8005bda:	2300      	moveq	r3, #0
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d18d      	bne.n	8005afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bf8:	e02d      	b.n	8005c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 f900 	bl	8005e00 <I2C_IsAcknowledgeFailed>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e02d      	b.n	8005c66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d021      	beq.n	8005c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c12:	f7fc fbc1 	bl	8002398 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d116      	bne.n	8005c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	f043 0220 	orr.w	r2, r3, #32
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e007      	b.n	8005c66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c60:	2b80      	cmp	r3, #128	; 0x80
 8005c62:	d1ca      	bne.n	8005bfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c7a:	e02d      	b.n	8005cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f8bf 	bl	8005e00 <I2C_IsAcknowledgeFailed>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e02d      	b.n	8005ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c92:	d021      	beq.n	8005cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c94:	f7fc fb80 	bl	8002398 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d302      	bcc.n	8005caa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d116      	bne.n	8005cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	f043 0220 	orr.w	r2, r3, #32
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e007      	b.n	8005ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f003 0304 	and.w	r3, r3, #4
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d1ca      	bne.n	8005c7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005cfc:	4b13      	ldr	r3, [pc, #76]	; (8005d4c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	08db      	lsrs	r3, r3, #3
 8005d02:	4a13      	ldr	r2, [pc, #76]	; (8005d50 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	0a1a      	lsrs	r2, r3, #8
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d107      	bne.n	8005d2e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f043 0220 	orr.w	r2, r3, #32
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e008      	b.n	8005d40 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d3c:	d0e9      	beq.n	8005d12 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	20000034 	.word	0x20000034
 8005d50:	14f8b589 	.word	0x14f8b589

08005d54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d60:	e042      	b.n	8005de8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	f003 0310 	and.w	r3, r3, #16
 8005d6c:	2b10      	cmp	r3, #16
 8005d6e:	d119      	bne.n	8005da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0210 	mvn.w	r2, #16
 8005d78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e029      	b.n	8005df8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da4:	f7fc faf8 	bl	8002398 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d302      	bcc.n	8005dba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d116      	bne.n	8005de8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	f043 0220 	orr.w	r2, r3, #32
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e007      	b.n	8005df8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df2:	2b40      	cmp	r3, #64	; 0x40
 8005df4:	d1b5      	bne.n	8005d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e16:	d11b      	bne.n	8005e50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	f043 0204 	orr.w	r2, r3, #4
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005e6e:	d103      	bne.n	8005e78 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005e76:	e007      	b.n	8005e88 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005e80:	d102      	bne.n	8005e88 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2208      	movs	r2, #8
 8005e86:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e267      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d075      	beq.n	8005f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005eb2:	4b88      	ldr	r3, [pc, #544]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d00c      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ebe:	4b85      	ldr	r3, [pc, #532]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d112      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eca:	4b82      	ldr	r3, [pc, #520]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ed6:	d10b      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed8:	4b7e      	ldr	r3, [pc, #504]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d05b      	beq.n	8005f9c <HAL_RCC_OscConfig+0x108>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d157      	bne.n	8005f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e242      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef8:	d106      	bne.n	8005f08 <HAL_RCC_OscConfig+0x74>
 8005efa:	4b76      	ldr	r3, [pc, #472]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a75      	ldr	r2, [pc, #468]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	e01d      	b.n	8005f44 <HAL_RCC_OscConfig+0xb0>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f10:	d10c      	bne.n	8005f2c <HAL_RCC_OscConfig+0x98>
 8005f12:	4b70      	ldr	r3, [pc, #448]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a6f      	ldr	r2, [pc, #444]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	4b6d      	ldr	r3, [pc, #436]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a6c      	ldr	r2, [pc, #432]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	e00b      	b.n	8005f44 <HAL_RCC_OscConfig+0xb0>
 8005f2c:	4b69      	ldr	r3, [pc, #420]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a68      	ldr	r2, [pc, #416]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	4b66      	ldr	r3, [pc, #408]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a65      	ldr	r2, [pc, #404]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d013      	beq.n	8005f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f4c:	f7fc fa24 	bl	8002398 <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f54:	f7fc fa20 	bl	8002398 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b64      	cmp	r3, #100	; 0x64
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e207      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f66:	4b5b      	ldr	r3, [pc, #364]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0xc0>
 8005f72:	e014      	b.n	8005f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f74:	f7fc fa10 	bl	8002398 <HAL_GetTick>
 8005f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f7c:	f7fc fa0c 	bl	8002398 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b64      	cmp	r3, #100	; 0x64
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e1f3      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f8e:	4b51      	ldr	r3, [pc, #324]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f0      	bne.n	8005f7c <HAL_RCC_OscConfig+0xe8>
 8005f9a:	e000      	b.n	8005f9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d063      	beq.n	8006072 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005faa:	4b4a      	ldr	r3, [pc, #296]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00b      	beq.n	8005fce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fb6:	4b47      	ldr	r3, [pc, #284]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d11c      	bne.n	8005ffc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fc2:	4b44      	ldr	r3, [pc, #272]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d116      	bne.n	8005ffc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fce:	4b41      	ldr	r3, [pc, #260]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x152>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d001      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e1c7      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe6:	4b3b      	ldr	r3, [pc, #236]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	4937      	ldr	r1, [pc, #220]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ffa:	e03a      	b.n	8006072 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d020      	beq.n	8006046 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006004:	4b34      	ldr	r3, [pc, #208]	; (80060d8 <HAL_RCC_OscConfig+0x244>)
 8006006:	2201      	movs	r2, #1
 8006008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600a:	f7fc f9c5 	bl	8002398 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006010:	e008      	b.n	8006024 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006012:	f7fc f9c1 	bl	8002398 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e1a8      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006024:	4b2b      	ldr	r3, [pc, #172]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0f0      	beq.n	8006012 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006030:	4b28      	ldr	r3, [pc, #160]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	4925      	ldr	r1, [pc, #148]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8006040:	4313      	orrs	r3, r2
 8006042:	600b      	str	r3, [r1, #0]
 8006044:	e015      	b.n	8006072 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006046:	4b24      	ldr	r3, [pc, #144]	; (80060d8 <HAL_RCC_OscConfig+0x244>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604c:	f7fc f9a4 	bl	8002398 <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006054:	f7fc f9a0 	bl	8002398 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e187      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006066:	4b1b      	ldr	r3, [pc, #108]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f0      	bne.n	8006054 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d036      	beq.n	80060ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d016      	beq.n	80060b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006086:	4b15      	ldr	r3, [pc, #84]	; (80060dc <HAL_RCC_OscConfig+0x248>)
 8006088:	2201      	movs	r2, #1
 800608a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608c:	f7fc f984 	bl	8002398 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006094:	f7fc f980 	bl	8002398 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e167      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060a6:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 80060a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0f0      	beq.n	8006094 <HAL_RCC_OscConfig+0x200>
 80060b2:	e01b      	b.n	80060ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060b4:	4b09      	ldr	r3, [pc, #36]	; (80060dc <HAL_RCC_OscConfig+0x248>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ba:	f7fc f96d 	bl	8002398 <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060c0:	e00e      	b.n	80060e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060c2:	f7fc f969 	bl	8002398 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d907      	bls.n	80060e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e150      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
 80060d4:	40023800 	.word	0x40023800
 80060d8:	42470000 	.word	0x42470000
 80060dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060e0:	4b88      	ldr	r3, [pc, #544]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80060e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1ea      	bne.n	80060c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 8097 	beq.w	8006228 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060fa:	2300      	movs	r3, #0
 80060fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060fe:	4b81      	ldr	r3, [pc, #516]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10f      	bne.n	800612a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800610a:	2300      	movs	r3, #0
 800610c:	60bb      	str	r3, [r7, #8]
 800610e:	4b7d      	ldr	r3, [pc, #500]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	4a7c      	ldr	r2, [pc, #496]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006118:	6413      	str	r3, [r2, #64]	; 0x40
 800611a:	4b7a      	ldr	r3, [pc, #488]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006122:	60bb      	str	r3, [r7, #8]
 8006124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006126:	2301      	movs	r3, #1
 8006128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800612a:	4b77      	ldr	r3, [pc, #476]	; (8006308 <HAL_RCC_OscConfig+0x474>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006132:	2b00      	cmp	r3, #0
 8006134:	d118      	bne.n	8006168 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006136:	4b74      	ldr	r3, [pc, #464]	; (8006308 <HAL_RCC_OscConfig+0x474>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a73      	ldr	r2, [pc, #460]	; (8006308 <HAL_RCC_OscConfig+0x474>)
 800613c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006142:	f7fc f929 	bl	8002398 <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006148:	e008      	b.n	800615c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800614a:	f7fc f925 	bl	8002398 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e10c      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800615c:	4b6a      	ldr	r3, [pc, #424]	; (8006308 <HAL_RCC_OscConfig+0x474>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0f0      	beq.n	800614a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d106      	bne.n	800617e <HAL_RCC_OscConfig+0x2ea>
 8006170:	4b64      	ldr	r3, [pc, #400]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006174:	4a63      	ldr	r2, [pc, #396]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	6713      	str	r3, [r2, #112]	; 0x70
 800617c:	e01c      	b.n	80061b8 <HAL_RCC_OscConfig+0x324>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	2b05      	cmp	r3, #5
 8006184:	d10c      	bne.n	80061a0 <HAL_RCC_OscConfig+0x30c>
 8006186:	4b5f      	ldr	r3, [pc, #380]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618a:	4a5e      	ldr	r2, [pc, #376]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 800618c:	f043 0304 	orr.w	r3, r3, #4
 8006190:	6713      	str	r3, [r2, #112]	; 0x70
 8006192:	4b5c      	ldr	r3, [pc, #368]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	4a5b      	ldr	r2, [pc, #364]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006198:	f043 0301 	orr.w	r3, r3, #1
 800619c:	6713      	str	r3, [r2, #112]	; 0x70
 800619e:	e00b      	b.n	80061b8 <HAL_RCC_OscConfig+0x324>
 80061a0:	4b58      	ldr	r3, [pc, #352]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80061a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a4:	4a57      	ldr	r2, [pc, #348]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	6713      	str	r3, [r2, #112]	; 0x70
 80061ac:	4b55      	ldr	r3, [pc, #340]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80061ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b0:	4a54      	ldr	r2, [pc, #336]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80061b2:	f023 0304 	bic.w	r3, r3, #4
 80061b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d015      	beq.n	80061ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c0:	f7fc f8ea 	bl	8002398 <HAL_GetTick>
 80061c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c6:	e00a      	b.n	80061de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061c8:	f7fc f8e6 	bl	8002398 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e0cb      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061de:	4b49      	ldr	r3, [pc, #292]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0ee      	beq.n	80061c8 <HAL_RCC_OscConfig+0x334>
 80061ea:	e014      	b.n	8006216 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061ec:	f7fc f8d4 	bl	8002398 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061f2:	e00a      	b.n	800620a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061f4:	f7fc f8d0 	bl	8002398 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006202:	4293      	cmp	r3, r2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e0b5      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800620a:	4b3e      	ldr	r3, [pc, #248]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 800620c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1ee      	bne.n	80061f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006216:	7dfb      	ldrb	r3, [r7, #23]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d105      	bne.n	8006228 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800621c:	4b39      	ldr	r3, [pc, #228]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	4a38      	ldr	r2, [pc, #224]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006226:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80a1 	beq.w	8006374 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006232:	4b34      	ldr	r3, [pc, #208]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	2b08      	cmp	r3, #8
 800623c:	d05c      	beq.n	80062f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	2b02      	cmp	r3, #2
 8006244:	d141      	bne.n	80062ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006246:	4b31      	ldr	r3, [pc, #196]	; (800630c <HAL_RCC_OscConfig+0x478>)
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800624c:	f7fc f8a4 	bl	8002398 <HAL_GetTick>
 8006250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006252:	e008      	b.n	8006266 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006254:	f7fc f8a0 	bl	8002398 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b02      	cmp	r3, #2
 8006260:	d901      	bls.n	8006266 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e087      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006266:	4b27      	ldr	r3, [pc, #156]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1f0      	bne.n	8006254 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	69da      	ldr	r2, [r3, #28]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	431a      	orrs	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	019b      	lsls	r3, r3, #6
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	085b      	lsrs	r3, r3, #1
 800628a:	3b01      	subs	r3, #1
 800628c:	041b      	lsls	r3, r3, #16
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	061b      	lsls	r3, r3, #24
 8006296:	491b      	ldr	r1, [pc, #108]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006298:	4313      	orrs	r3, r2
 800629a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800629c:	4b1b      	ldr	r3, [pc, #108]	; (800630c <HAL_RCC_OscConfig+0x478>)
 800629e:	2201      	movs	r2, #1
 80062a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a2:	f7fc f879 	bl	8002398 <HAL_GetTick>
 80062a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062a8:	e008      	b.n	80062bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062aa:	f7fc f875 	bl	8002398 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d901      	bls.n	80062bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e05c      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0f0      	beq.n	80062aa <HAL_RCC_OscConfig+0x416>
 80062c8:	e054      	b.n	8006374 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ca:	4b10      	ldr	r3, [pc, #64]	; (800630c <HAL_RCC_OscConfig+0x478>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d0:	f7fc f862 	bl	8002398 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062d8:	f7fc f85e 	bl	8002398 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e045      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ea:	4b06      	ldr	r3, [pc, #24]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f0      	bne.n	80062d8 <HAL_RCC_OscConfig+0x444>
 80062f6:	e03d      	b.n	8006374 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d107      	bne.n	8006310 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e038      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
 8006304:	40023800 	.word	0x40023800
 8006308:	40007000 	.word	0x40007000
 800630c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006310:	4b1b      	ldr	r3, [pc, #108]	; (8006380 <HAL_RCC_OscConfig+0x4ec>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d028      	beq.n	8006370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006328:	429a      	cmp	r2, r3
 800632a:	d121      	bne.n	8006370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006336:	429a      	cmp	r2, r3
 8006338:	d11a      	bne.n	8006370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006340:	4013      	ands	r3, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006348:	4293      	cmp	r3, r2
 800634a:	d111      	bne.n	8006370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	085b      	lsrs	r3, r3, #1
 8006358:	3b01      	subs	r3, #1
 800635a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800635c:	429a      	cmp	r2, r3
 800635e:	d107      	bne.n	8006370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800636c:	429a      	cmp	r2, r3
 800636e:	d001      	beq.n	8006374 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	40023800 	.word	0x40023800

08006384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e0cc      	b.n	8006532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006398:	4b68      	ldr	r3, [pc, #416]	; (800653c <HAL_RCC_ClockConfig+0x1b8>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d90c      	bls.n	80063c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063a6:	4b65      	ldr	r3, [pc, #404]	; (800653c <HAL_RCC_ClockConfig+0x1b8>)
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ae:	4b63      	ldr	r3, [pc, #396]	; (800653c <HAL_RCC_ClockConfig+0x1b8>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d001      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e0b8      	b.n	8006532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d020      	beq.n	800640e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d005      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063d8:	4b59      	ldr	r3, [pc, #356]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	4a58      	ldr	r2, [pc, #352]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80063de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d005      	beq.n	80063fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063f0:	4b53      	ldr	r3, [pc, #332]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	4a52      	ldr	r2, [pc, #328]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80063f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063fc:	4b50      	ldr	r3, [pc, #320]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	494d      	ldr	r1, [pc, #308]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 800640a:	4313      	orrs	r3, r2
 800640c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d044      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d107      	bne.n	8006432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006422:	4b47      	ldr	r3, [pc, #284]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d119      	bne.n	8006462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e07f      	b.n	8006532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b02      	cmp	r3, #2
 8006438:	d003      	beq.n	8006442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800643e:	2b03      	cmp	r3, #3
 8006440:	d107      	bne.n	8006452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006442:	4b3f      	ldr	r3, [pc, #252]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d109      	bne.n	8006462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e06f      	b.n	8006532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006452:	4b3b      	ldr	r3, [pc, #236]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e067      	b.n	8006532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006462:	4b37      	ldr	r3, [pc, #220]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f023 0203 	bic.w	r2, r3, #3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	4934      	ldr	r1, [pc, #208]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006470:	4313      	orrs	r3, r2
 8006472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006474:	f7fb ff90 	bl	8002398 <HAL_GetTick>
 8006478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800647a:	e00a      	b.n	8006492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800647c:	f7fb ff8c 	bl	8002398 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	f241 3288 	movw	r2, #5000	; 0x1388
 800648a:	4293      	cmp	r3, r2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e04f      	b.n	8006532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006492:	4b2b      	ldr	r3, [pc, #172]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 020c 	and.w	r2, r3, #12
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d1eb      	bne.n	800647c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064a4:	4b25      	ldr	r3, [pc, #148]	; (800653c <HAL_RCC_ClockConfig+0x1b8>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d20c      	bcs.n	80064cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b2:	4b22      	ldr	r3, [pc, #136]	; (800653c <HAL_RCC_ClockConfig+0x1b8>)
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ba:	4b20      	ldr	r3, [pc, #128]	; (800653c <HAL_RCC_ClockConfig+0x1b8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d001      	beq.n	80064cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e032      	b.n	8006532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d008      	beq.n	80064ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064d8:	4b19      	ldr	r3, [pc, #100]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	4916      	ldr	r1, [pc, #88]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d009      	beq.n	800650a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064f6:	4b12      	ldr	r3, [pc, #72]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	490e      	ldr	r1, [pc, #56]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006506:	4313      	orrs	r3, r2
 8006508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800650a:	f000 f821 	bl	8006550 <HAL_RCC_GetSysClockFreq>
 800650e:	4602      	mov	r2, r0
 8006510:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	091b      	lsrs	r3, r3, #4
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	490a      	ldr	r1, [pc, #40]	; (8006544 <HAL_RCC_ClockConfig+0x1c0>)
 800651c:	5ccb      	ldrb	r3, [r1, r3]
 800651e:	fa22 f303 	lsr.w	r3, r2, r3
 8006522:	4a09      	ldr	r2, [pc, #36]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 8006524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006526:	4b09      	ldr	r3, [pc, #36]	; (800654c <HAL_RCC_ClockConfig+0x1c8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f7fb fef0 	bl	8002310 <HAL_InitTick>

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	40023c00 	.word	0x40023c00
 8006540:	40023800 	.word	0x40023800
 8006544:	080092bc 	.word	0x080092bc
 8006548:	20000034 	.word	0x20000034
 800654c:	20000038 	.word	0x20000038

08006550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006554:	b094      	sub	sp, #80	; 0x50
 8006556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	647b      	str	r3, [r7, #68]	; 0x44
 800655c:	2300      	movs	r3, #0
 800655e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006560:	2300      	movs	r3, #0
 8006562:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006568:	4b79      	ldr	r3, [pc, #484]	; (8006750 <HAL_RCC_GetSysClockFreq+0x200>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 030c 	and.w	r3, r3, #12
 8006570:	2b08      	cmp	r3, #8
 8006572:	d00d      	beq.n	8006590 <HAL_RCC_GetSysClockFreq+0x40>
 8006574:	2b08      	cmp	r3, #8
 8006576:	f200 80e1 	bhi.w	800673c <HAL_RCC_GetSysClockFreq+0x1ec>
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <HAL_RCC_GetSysClockFreq+0x34>
 800657e:	2b04      	cmp	r3, #4
 8006580:	d003      	beq.n	800658a <HAL_RCC_GetSysClockFreq+0x3a>
 8006582:	e0db      	b.n	800673c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006584:	4b73      	ldr	r3, [pc, #460]	; (8006754 <HAL_RCC_GetSysClockFreq+0x204>)
 8006586:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006588:	e0db      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800658a:	4b73      	ldr	r3, [pc, #460]	; (8006758 <HAL_RCC_GetSysClockFreq+0x208>)
 800658c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800658e:	e0d8      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006590:	4b6f      	ldr	r3, [pc, #444]	; (8006750 <HAL_RCC_GetSysClockFreq+0x200>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006598:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800659a:	4b6d      	ldr	r3, [pc, #436]	; (8006750 <HAL_RCC_GetSysClockFreq+0x200>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d063      	beq.n	800666e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065a6:	4b6a      	ldr	r3, [pc, #424]	; (8006750 <HAL_RCC_GetSysClockFreq+0x200>)
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	099b      	lsrs	r3, r3, #6
 80065ac:	2200      	movs	r2, #0
 80065ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80065b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b8:	633b      	str	r3, [r7, #48]	; 0x30
 80065ba:	2300      	movs	r3, #0
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
 80065be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80065c2:	4622      	mov	r2, r4
 80065c4:	462b      	mov	r3, r5
 80065c6:	f04f 0000 	mov.w	r0, #0
 80065ca:	f04f 0100 	mov.w	r1, #0
 80065ce:	0159      	lsls	r1, r3, #5
 80065d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065d4:	0150      	lsls	r0, r2, #5
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4621      	mov	r1, r4
 80065dc:	1a51      	subs	r1, r2, r1
 80065de:	6139      	str	r1, [r7, #16]
 80065e0:	4629      	mov	r1, r5
 80065e2:	eb63 0301 	sbc.w	r3, r3, r1
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065f4:	4659      	mov	r1, fp
 80065f6:	018b      	lsls	r3, r1, #6
 80065f8:	4651      	mov	r1, sl
 80065fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065fe:	4651      	mov	r1, sl
 8006600:	018a      	lsls	r2, r1, #6
 8006602:	4651      	mov	r1, sl
 8006604:	ebb2 0801 	subs.w	r8, r2, r1
 8006608:	4659      	mov	r1, fp
 800660a:	eb63 0901 	sbc.w	r9, r3, r1
 800660e:	f04f 0200 	mov.w	r2, #0
 8006612:	f04f 0300 	mov.w	r3, #0
 8006616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800661a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800661e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006622:	4690      	mov	r8, r2
 8006624:	4699      	mov	r9, r3
 8006626:	4623      	mov	r3, r4
 8006628:	eb18 0303 	adds.w	r3, r8, r3
 800662c:	60bb      	str	r3, [r7, #8]
 800662e:	462b      	mov	r3, r5
 8006630:	eb49 0303 	adc.w	r3, r9, r3
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	f04f 0200 	mov.w	r2, #0
 800663a:	f04f 0300 	mov.w	r3, #0
 800663e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006642:	4629      	mov	r1, r5
 8006644:	024b      	lsls	r3, r1, #9
 8006646:	4621      	mov	r1, r4
 8006648:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800664c:	4621      	mov	r1, r4
 800664e:	024a      	lsls	r2, r1, #9
 8006650:	4610      	mov	r0, r2
 8006652:	4619      	mov	r1, r3
 8006654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006656:	2200      	movs	r2, #0
 8006658:	62bb      	str	r3, [r7, #40]	; 0x28
 800665a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800665c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006660:	f7f9 fec8 	bl	80003f4 <__aeabi_uldivmod>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4613      	mov	r3, r2
 800666a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800666c:	e058      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800666e:	4b38      	ldr	r3, [pc, #224]	; (8006750 <HAL_RCC_GetSysClockFreq+0x200>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	099b      	lsrs	r3, r3, #6
 8006674:	2200      	movs	r2, #0
 8006676:	4618      	mov	r0, r3
 8006678:	4611      	mov	r1, r2
 800667a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800667e:	623b      	str	r3, [r7, #32]
 8006680:	2300      	movs	r3, #0
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
 8006684:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	f04f 0000 	mov.w	r0, #0
 8006690:	f04f 0100 	mov.w	r1, #0
 8006694:	0159      	lsls	r1, r3, #5
 8006696:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800669a:	0150      	lsls	r0, r2, #5
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4641      	mov	r1, r8
 80066a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80066a6:	4649      	mov	r1, r9
 80066a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80066b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80066bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80066c0:	ebb2 040a 	subs.w	r4, r2, sl
 80066c4:	eb63 050b 	sbc.w	r5, r3, fp
 80066c8:	f04f 0200 	mov.w	r2, #0
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	00eb      	lsls	r3, r5, #3
 80066d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066d6:	00e2      	lsls	r2, r4, #3
 80066d8:	4614      	mov	r4, r2
 80066da:	461d      	mov	r5, r3
 80066dc:	4643      	mov	r3, r8
 80066de:	18e3      	adds	r3, r4, r3
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	464b      	mov	r3, r9
 80066e4:	eb45 0303 	adc.w	r3, r5, r3
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066f6:	4629      	mov	r1, r5
 80066f8:	028b      	lsls	r3, r1, #10
 80066fa:	4621      	mov	r1, r4
 80066fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006700:	4621      	mov	r1, r4
 8006702:	028a      	lsls	r2, r1, #10
 8006704:	4610      	mov	r0, r2
 8006706:	4619      	mov	r1, r3
 8006708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800670a:	2200      	movs	r2, #0
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	61fa      	str	r2, [r7, #28]
 8006710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006714:	f7f9 fe6e 	bl	80003f4 <__aeabi_uldivmod>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4613      	mov	r3, r2
 800671e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <HAL_RCC_GetSysClockFreq+0x200>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	0c1b      	lsrs	r3, r3, #16
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	3301      	adds	r3, #1
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006730:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006734:	fbb2 f3f3 	udiv	r3, r2, r3
 8006738:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800673a:	e002      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <HAL_RCC_GetSysClockFreq+0x204>)
 800673e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006744:	4618      	mov	r0, r3
 8006746:	3750      	adds	r7, #80	; 0x50
 8006748:	46bd      	mov	sp, r7
 800674a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800674e:	bf00      	nop
 8006750:	40023800 	.word	0x40023800
 8006754:	00f42400 	.word	0x00f42400
 8006758:	007a1200 	.word	0x007a1200

0800675c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006760:	4b03      	ldr	r3, [pc, #12]	; (8006770 <HAL_RCC_GetHCLKFreq+0x14>)
 8006762:	681b      	ldr	r3, [r3, #0]
}
 8006764:	4618      	mov	r0, r3
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	20000034 	.word	0x20000034

08006774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006778:	f7ff fff0 	bl	800675c <HAL_RCC_GetHCLKFreq>
 800677c:	4602      	mov	r2, r0
 800677e:	4b05      	ldr	r3, [pc, #20]	; (8006794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	0a9b      	lsrs	r3, r3, #10
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	4903      	ldr	r1, [pc, #12]	; (8006798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800678a:	5ccb      	ldrb	r3, [r1, r3]
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006790:	4618      	mov	r0, r3
 8006792:	bd80      	pop	{r7, pc}
 8006794:	40023800 	.word	0x40023800
 8006798:	080092cc 	.word	0x080092cc

0800679c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067a0:	f7ff ffdc 	bl	800675c <HAL_RCC_GetHCLKFreq>
 80067a4:	4602      	mov	r2, r0
 80067a6:	4b05      	ldr	r3, [pc, #20]	; (80067bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	0b5b      	lsrs	r3, r3, #13
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	4903      	ldr	r1, [pc, #12]	; (80067c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067b2:	5ccb      	ldrb	r3, [r1, r3]
 80067b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	40023800 	.word	0x40023800
 80067c0:	080092cc 	.word	0x080092cc

080067c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e041      	b.n	800685a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d106      	bne.n	80067f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7fb fb72 	bl	8001ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3304      	adds	r3, #4
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f001 f834 	bl	8007870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b01      	cmp	r3, #1
 8006876:	d001      	beq.n	800687c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e03c      	b.n	80068f6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1e      	ldr	r2, [pc, #120]	; (8006904 <HAL_TIM_Base_Start+0xa0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d018      	beq.n	80068c0 <HAL_TIM_Base_Start+0x5c>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006896:	d013      	beq.n	80068c0 <HAL_TIM_Base_Start+0x5c>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1a      	ldr	r2, [pc, #104]	; (8006908 <HAL_TIM_Base_Start+0xa4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00e      	beq.n	80068c0 <HAL_TIM_Base_Start+0x5c>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a19      	ldr	r2, [pc, #100]	; (800690c <HAL_TIM_Base_Start+0xa8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d009      	beq.n	80068c0 <HAL_TIM_Base_Start+0x5c>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a17      	ldr	r2, [pc, #92]	; (8006910 <HAL_TIM_Base_Start+0xac>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <HAL_TIM_Base_Start+0x5c>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a16      	ldr	r2, [pc, #88]	; (8006914 <HAL_TIM_Base_Start+0xb0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d111      	bne.n	80068e4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b06      	cmp	r3, #6
 80068d0:	d010      	beq.n	80068f4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0201 	orr.w	r2, r2, #1
 80068e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e2:	e007      	b.n	80068f4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0201 	orr.w	r2, r2, #1
 80068f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40010000 	.word	0x40010000
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800
 8006910:	40000c00 	.word	0x40000c00
 8006914:	40014000 	.word	0x40014000

08006918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b01      	cmp	r3, #1
 800692a:	d001      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e044      	b.n	80069ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1e      	ldr	r2, [pc, #120]	; (80069c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d018      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x6c>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695a:	d013      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x6c>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1a      	ldr	r2, [pc, #104]	; (80069cc <HAL_TIM_Base_Start_IT+0xb4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00e      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x6c>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a19      	ldr	r2, [pc, #100]	; (80069d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d009      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x6c>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a17      	ldr	r2, [pc, #92]	; (80069d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x6c>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a16      	ldr	r2, [pc, #88]	; (80069d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d111      	bne.n	80069a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b06      	cmp	r3, #6
 8006994:	d010      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0201 	orr.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a6:	e007      	b.n	80069b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0201 	orr.w	r2, r2, #1
 80069b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	40010000 	.word	0x40010000
 80069cc:	40000400 	.word	0x40000400
 80069d0:	40000800 	.word	0x40000800
 80069d4:	40000c00 	.word	0x40000c00
 80069d8:	40014000 	.word	0x40014000

080069dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e041      	b.n	8006a72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d106      	bne.n	8006a08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f839 	bl	8006a7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3304      	adds	r3, #4
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	f000 ff28 	bl	8007870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d109      	bne.n	8006ab4 <HAL_TIM_PWM_Start+0x24>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	bf14      	ite	ne
 8006aac:	2301      	movne	r3, #1
 8006aae:	2300      	moveq	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	e022      	b.n	8006afa <HAL_TIM_PWM_Start+0x6a>
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d109      	bne.n	8006ace <HAL_TIM_PWM_Start+0x3e>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	bf14      	ite	ne
 8006ac6:	2301      	movne	r3, #1
 8006ac8:	2300      	moveq	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	e015      	b.n	8006afa <HAL_TIM_PWM_Start+0x6a>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d109      	bne.n	8006ae8 <HAL_TIM_PWM_Start+0x58>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	bf14      	ite	ne
 8006ae0:	2301      	movne	r3, #1
 8006ae2:	2300      	moveq	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	e008      	b.n	8006afa <HAL_TIM_PWM_Start+0x6a>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	bf14      	ite	ne
 8006af4:	2301      	movne	r3, #1
 8006af6:	2300      	moveq	r3, #0
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e068      	b.n	8006bd4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d104      	bne.n	8006b12 <HAL_TIM_PWM_Start+0x82>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b10:	e013      	b.n	8006b3a <HAL_TIM_PWM_Start+0xaa>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d104      	bne.n	8006b22 <HAL_TIM_PWM_Start+0x92>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b20:	e00b      	b.n	8006b3a <HAL_TIM_PWM_Start+0xaa>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	d104      	bne.n	8006b32 <HAL_TIM_PWM_Start+0xa2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b30:	e003      	b.n	8006b3a <HAL_TIM_PWM_Start+0xaa>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2202      	movs	r2, #2
 8006b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f001 fa58 	bl	8007ff8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a23      	ldr	r2, [pc, #140]	; (8006bdc <HAL_TIM_PWM_Start+0x14c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d107      	bne.n	8006b62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a1d      	ldr	r2, [pc, #116]	; (8006bdc <HAL_TIM_PWM_Start+0x14c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d018      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x10e>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b74:	d013      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x10e>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a19      	ldr	r2, [pc, #100]	; (8006be0 <HAL_TIM_PWM_Start+0x150>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00e      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x10e>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a17      	ldr	r2, [pc, #92]	; (8006be4 <HAL_TIM_PWM_Start+0x154>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d009      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x10e>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a16      	ldr	r2, [pc, #88]	; (8006be8 <HAL_TIM_PWM_Start+0x158>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d004      	beq.n	8006b9e <HAL_TIM_PWM_Start+0x10e>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a14      	ldr	r2, [pc, #80]	; (8006bec <HAL_TIM_PWM_Start+0x15c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d111      	bne.n	8006bc2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b06      	cmp	r3, #6
 8006bae:	d010      	beq.n	8006bd2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc0:	e007      	b.n	8006bd2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0201 	orr.w	r2, r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40010000 	.word	0x40010000
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40000800 	.word	0x40000800
 8006be8:	40000c00 	.word	0x40000c00
 8006bec:	40014000 	.word	0x40014000

08006bf0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e041      	b.n	8006c86 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f839 	bl	8006c8e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4610      	mov	r0, r2
 8006c30:	f000 fe1e 	bl	8007870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
	...

08006ca4 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d104      	bne.n	8006cc6 <HAL_TIM_IC_Start_DMA+0x22>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	e013      	b.n	8006cee <HAL_TIM_IC_Start_DMA+0x4a>
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d104      	bne.n	8006cd6 <HAL_TIM_IC_Start_DMA+0x32>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	e00b      	b.n	8006cee <HAL_TIM_IC_Start_DMA+0x4a>
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d104      	bne.n	8006ce6 <HAL_TIM_IC_Start_DMA+0x42>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	e003      	b.n	8006cee <HAL_TIM_IC_Start_DMA+0x4a>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d104      	bne.n	8006d00 <HAL_TIM_IC_Start_DMA+0x5c>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	e013      	b.n	8006d28 <HAL_TIM_IC_Start_DMA+0x84>
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d104      	bne.n	8006d10 <HAL_TIM_IC_Start_DMA+0x6c>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	e00b      	b.n	8006d28 <HAL_TIM_IC_Start_DMA+0x84>
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d104      	bne.n	8006d20 <HAL_TIM_IC_Start_DMA+0x7c>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	e003      	b.n	8006d28 <HAL_TIM_IC_Start_DMA+0x84>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8006d2a:	7dbb      	ldrb	r3, [r7, #22]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d002      	beq.n	8006d36 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8006d30:	7d7b      	ldrb	r3, [r7, #21]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d101      	bne.n	8006d3a <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8006d36:	2302      	movs	r3, #2
 8006d38:	e13c      	b.n	8006fb4 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8006d3a:	7dbb      	ldrb	r3, [r7, #22]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d143      	bne.n	8006dc8 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8006d40:	7d7b      	ldrb	r3, [r7, #21]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d140      	bne.n	8006dc8 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <HAL_TIM_IC_Start_DMA+0xb2>
 8006d4c:	887b      	ldrh	r3, [r7, #2]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e12e      	b.n	8006fb4 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d104      	bne.n	8006d66 <HAL_TIM_IC_Start_DMA+0xc2>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d64:	e013      	b.n	8006d8e <HAL_TIM_IC_Start_DMA+0xea>
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d104      	bne.n	8006d76 <HAL_TIM_IC_Start_DMA+0xd2>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d74:	e00b      	b.n	8006d8e <HAL_TIM_IC_Start_DMA+0xea>
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d104      	bne.n	8006d86 <HAL_TIM_IC_Start_DMA+0xe2>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d84:	e003      	b.n	8006d8e <HAL_TIM_IC_Start_DMA+0xea>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d104      	bne.n	8006d9e <HAL_TIM_IC_Start_DMA+0xfa>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8006d9c:	e016      	b.n	8006dcc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d104      	bne.n	8006dae <HAL_TIM_IC_Start_DMA+0x10a>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8006dac:	e00e      	b.n	8006dcc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d104      	bne.n	8006dbe <HAL_TIM_IC_Start_DMA+0x11a>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8006dbc:	e006      	b.n	8006dcc <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8006dc6:	e001      	b.n	8006dcc <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e0f3      	b.n	8006fb4 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f001 f90f 	bl	8007ff8 <TIM_CCxChannelCmd>

  switch (Channel)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b0c      	cmp	r3, #12
 8006dde:	f200 80ad 	bhi.w	8006f3c <HAL_TIM_IC_Start_DMA+0x298>
 8006de2:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <HAL_TIM_IC_Start_DMA+0x144>)
 8006de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de8:	08006e1d 	.word	0x08006e1d
 8006dec:	08006f3d 	.word	0x08006f3d
 8006df0:	08006f3d 	.word	0x08006f3d
 8006df4:	08006f3d 	.word	0x08006f3d
 8006df8:	08006e65 	.word	0x08006e65
 8006dfc:	08006f3d 	.word	0x08006f3d
 8006e00:	08006f3d 	.word	0x08006f3d
 8006e04:	08006f3d 	.word	0x08006f3d
 8006e08:	08006ead 	.word	0x08006ead
 8006e0c:	08006f3d 	.word	0x08006f3d
 8006e10:	08006f3d 	.word	0x08006f3d
 8006e14:	08006f3d 	.word	0x08006f3d
 8006e18:	08006ef5 	.word	0x08006ef5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	4a66      	ldr	r2, [pc, #408]	; (8006fbc <HAL_TIM_IC_Start_DMA+0x318>)
 8006e22:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	4a65      	ldr	r2, [pc, #404]	; (8006fc0 <HAL_TIM_IC_Start_DMA+0x31c>)
 8006e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	4a64      	ldr	r2, [pc, #400]	; (8006fc4 <HAL_TIM_IC_Start_DMA+0x320>)
 8006e32:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3334      	adds	r3, #52	; 0x34
 8006e3e:	4619      	mov	r1, r3
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	887b      	ldrh	r3, [r7, #2]
 8006e44:	f7fb fc98 	bl	8002778 <HAL_DMA_Start_IT>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e0b0      	b.n	8006fb4 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e60:	60da      	str	r2, [r3, #12]
      break;
 8006e62:	e06e      	b.n	8006f42 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e68:	4a54      	ldr	r2, [pc, #336]	; (8006fbc <HAL_TIM_IC_Start_DMA+0x318>)
 8006e6a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	4a53      	ldr	r2, [pc, #332]	; (8006fc0 <HAL_TIM_IC_Start_DMA+0x31c>)
 8006e72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	4a52      	ldr	r2, [pc, #328]	; (8006fc4 <HAL_TIM_IC_Start_DMA+0x320>)
 8006e7a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3338      	adds	r3, #56	; 0x38
 8006e86:	4619      	mov	r1, r3
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	887b      	ldrh	r3, [r7, #2]
 8006e8c:	f7fb fc74 	bl	8002778 <HAL_DMA_Start_IT>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e08c      	b.n	8006fb4 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ea8:	60da      	str	r2, [r3, #12]
      break;
 8006eaa:	e04a      	b.n	8006f42 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	4a42      	ldr	r2, [pc, #264]	; (8006fbc <HAL_TIM_IC_Start_DMA+0x318>)
 8006eb2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	4a41      	ldr	r2, [pc, #260]	; (8006fc0 <HAL_TIM_IC_Start_DMA+0x31c>)
 8006eba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	4a40      	ldr	r2, [pc, #256]	; (8006fc4 <HAL_TIM_IC_Start_DMA+0x320>)
 8006ec2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	333c      	adds	r3, #60	; 0x3c
 8006ece:	4619      	mov	r1, r3
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	887b      	ldrh	r3, [r7, #2]
 8006ed4:	f7fb fc50 	bl	8002778 <HAL_DMA_Start_IT>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e068      	b.n	8006fb4 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ef0:	60da      	str	r2, [r3, #12]
      break;
 8006ef2:	e026      	b.n	8006f42 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	4a30      	ldr	r2, [pc, #192]	; (8006fbc <HAL_TIM_IC_Start_DMA+0x318>)
 8006efa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f00:	4a2f      	ldr	r2, [pc, #188]	; (8006fc0 <HAL_TIM_IC_Start_DMA+0x31c>)
 8006f02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	4a2e      	ldr	r2, [pc, #184]	; (8006fc4 <HAL_TIM_IC_Start_DMA+0x320>)
 8006f0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3340      	adds	r3, #64	; 0x40
 8006f16:	4619      	mov	r1, r3
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	887b      	ldrh	r3, [r7, #2]
 8006f1c:	f7fb fc2c 	bl	8002778 <HAL_DMA_Start_IT>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e044      	b.n	8006fb4 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f38:	60da      	str	r2, [r3, #12]
      break;
 8006f3a:	e002      	b.n	8006f42 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f40:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a20      	ldr	r2, [pc, #128]	; (8006fc8 <HAL_TIM_IC_Start_DMA+0x324>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d018      	beq.n	8006f7e <HAL_TIM_IC_Start_DMA+0x2da>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f54:	d013      	beq.n	8006f7e <HAL_TIM_IC_Start_DMA+0x2da>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1c      	ldr	r2, [pc, #112]	; (8006fcc <HAL_TIM_IC_Start_DMA+0x328>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00e      	beq.n	8006f7e <HAL_TIM_IC_Start_DMA+0x2da>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1a      	ldr	r2, [pc, #104]	; (8006fd0 <HAL_TIM_IC_Start_DMA+0x32c>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d009      	beq.n	8006f7e <HAL_TIM_IC_Start_DMA+0x2da>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a19      	ldr	r2, [pc, #100]	; (8006fd4 <HAL_TIM_IC_Start_DMA+0x330>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d004      	beq.n	8006f7e <HAL_TIM_IC_Start_DMA+0x2da>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a17      	ldr	r2, [pc, #92]	; (8006fd8 <HAL_TIM_IC_Start_DMA+0x334>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d111      	bne.n	8006fa2 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	2b06      	cmp	r3, #6
 8006f8e:	d010      	beq.n	8006fb2 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0201 	orr.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa0:	e007      	b.n	8006fb2 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f042 0201 	orr.w	r2, r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	08007741 	.word	0x08007741
 8006fc0:	08007809 	.word	0x08007809
 8006fc4:	080076af 	.word	0x080076af
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40000400 	.word	0x40000400
 8006fd0:	40000800 	.word	0x40000800
 8006fd4:	40000c00 	.word	0x40000c00
 8006fd8:	40014000 	.word	0x40014000

08006fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d122      	bne.n	8007038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d11b      	bne.n	8007038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f06f 0202 	mvn.w	r2, #2
 8007008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fb13 	bl	800764a <HAL_TIM_IC_CaptureCallback>
 8007024:	e005      	b.n	8007032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fb05 	bl	8007636 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fb20 	bl	8007672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f003 0304 	and.w	r3, r3, #4
 8007042:	2b04      	cmp	r3, #4
 8007044:	d122      	bne.n	800708c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f003 0304 	and.w	r3, r3, #4
 8007050:	2b04      	cmp	r3, #4
 8007052:	d11b      	bne.n	800708c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f06f 0204 	mvn.w	r2, #4
 800705c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2202      	movs	r2, #2
 8007062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fae9 	bl	800764a <HAL_TIM_IC_CaptureCallback>
 8007078:	e005      	b.n	8007086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fadb 	bl	8007636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 faf6 	bl	8007672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f003 0308 	and.w	r3, r3, #8
 8007096:	2b08      	cmp	r3, #8
 8007098:	d122      	bne.n	80070e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f003 0308 	and.w	r3, r3, #8
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d11b      	bne.n	80070e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f06f 0208 	mvn.w	r2, #8
 80070b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2204      	movs	r2, #4
 80070b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fabf 	bl	800764a <HAL_TIM_IC_CaptureCallback>
 80070cc:	e005      	b.n	80070da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fab1 	bl	8007636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 facc 	bl	8007672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	f003 0310 	and.w	r3, r3, #16
 80070ea:	2b10      	cmp	r3, #16
 80070ec:	d122      	bne.n	8007134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	2b10      	cmp	r3, #16
 80070fa:	d11b      	bne.n	8007134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f06f 0210 	mvn.w	r2, #16
 8007104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2208      	movs	r2, #8
 800710a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fa95 	bl	800764a <HAL_TIM_IC_CaptureCallback>
 8007120:	e005      	b.n	800712e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa87 	bl	8007636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 faa2 	bl	8007672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b01      	cmp	r3, #1
 8007140:	d10e      	bne.n	8007160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b01      	cmp	r3, #1
 800714e:	d107      	bne.n	8007160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f06f 0201 	mvn.w	r2, #1
 8007158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fa fdb0 	bl	8001cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800716a:	2b80      	cmp	r3, #128	; 0x80
 800716c:	d10e      	bne.n	800718c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007178:	2b80      	cmp	r3, #128	; 0x80
 800717a:	d107      	bne.n	800718c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 ffd4 	bl	8008134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007196:	2b40      	cmp	r3, #64	; 0x40
 8007198:	d10e      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	d107      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fa67 	bl	8007686 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0320 	and.w	r3, r3, #32
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d10e      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f003 0320 	and.w	r3, r3, #32
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	d107      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0220 	mvn.w	r2, #32
 80071dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 ff9e 	bl	8008120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007206:	2302      	movs	r3, #2
 8007208:	e088      	b.n	800731c <HAL_TIM_IC_ConfigChannel+0x130>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d11b      	bne.n	8007250 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6818      	ldr	r0, [r3, #0]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	6819      	ldr	r1, [r3, #0]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f000 fd2e 	bl	8007c88 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699a      	ldr	r2, [r3, #24]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 020c 	bic.w	r2, r2, #12
 800723a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6999      	ldr	r1, [r3, #24]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	619a      	str	r2, [r3, #24]
 800724e:	e060      	b.n	8007312 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b04      	cmp	r3, #4
 8007254:	d11c      	bne.n	8007290 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	6819      	ldr	r1, [r3, #0]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f000 fda6 	bl	8007db6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007278:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6999      	ldr	r1, [r3, #24]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	021a      	lsls	r2, r3, #8
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	619a      	str	r2, [r3, #24]
 800728e:	e040      	b.n	8007312 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b08      	cmp	r3, #8
 8007294:	d11b      	bne.n	80072ce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	6819      	ldr	r1, [r3, #0]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f000 fdf3 	bl	8007e90 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69da      	ldr	r2, [r3, #28]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 020c 	bic.w	r2, r2, #12
 80072b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69d9      	ldr	r1, [r3, #28]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	61da      	str	r2, [r3, #28]
 80072cc:	e021      	b.n	8007312 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b0c      	cmp	r3, #12
 80072d2:	d11c      	bne.n	800730e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	6819      	ldr	r1, [r3, #0]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f000 fe10 	bl	8007f08 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	69da      	ldr	r2, [r3, #28]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80072f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	69d9      	ldr	r1, [r3, #28]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	021a      	lsls	r2, r3, #8
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	61da      	str	r2, [r3, #28]
 800730c:	e001      	b.n	8007312 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800733a:	2b01      	cmp	r3, #1
 800733c:	d101      	bne.n	8007342 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800733e:	2302      	movs	r3, #2
 8007340:	e0ae      	b.n	80074a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b0c      	cmp	r3, #12
 800734e:	f200 809f 	bhi.w	8007490 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007352:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	0800738d 	.word	0x0800738d
 800735c:	08007491 	.word	0x08007491
 8007360:	08007491 	.word	0x08007491
 8007364:	08007491 	.word	0x08007491
 8007368:	080073cd 	.word	0x080073cd
 800736c:	08007491 	.word	0x08007491
 8007370:	08007491 	.word	0x08007491
 8007374:	08007491 	.word	0x08007491
 8007378:	0800740f 	.word	0x0800740f
 800737c:	08007491 	.word	0x08007491
 8007380:	08007491 	.word	0x08007491
 8007384:	08007491 	.word	0x08007491
 8007388:	0800744f 	.word	0x0800744f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68b9      	ldr	r1, [r7, #8]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 faec 	bl	8007970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0208 	orr.w	r2, r2, #8
 80073a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 0204 	bic.w	r2, r2, #4
 80073b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6999      	ldr	r1, [r3, #24]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	691a      	ldr	r2, [r3, #16]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	619a      	str	r2, [r3, #24]
      break;
 80073ca:	e064      	b.n	8007496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68b9      	ldr	r1, [r7, #8]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 fb32 	bl	8007a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	699a      	ldr	r2, [r3, #24]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6999      	ldr	r1, [r3, #24]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	021a      	lsls	r2, r3, #8
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	619a      	str	r2, [r3, #24]
      break;
 800740c:	e043      	b.n	8007496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fb7d 	bl	8007b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	69da      	ldr	r2, [r3, #28]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f042 0208 	orr.w	r2, r2, #8
 8007428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69da      	ldr	r2, [r3, #28]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0204 	bic.w	r2, r2, #4
 8007438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69d9      	ldr	r1, [r3, #28]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	691a      	ldr	r2, [r3, #16]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	61da      	str	r2, [r3, #28]
      break;
 800744c:	e023      	b.n	8007496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68b9      	ldr	r1, [r7, #8]
 8007454:	4618      	mov	r0, r3
 8007456:	f000 fbc7 	bl	8007be8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69da      	ldr	r2, [r3, #28]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	69d9      	ldr	r1, [r3, #28]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	021a      	lsls	r2, r3, #8
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	61da      	str	r2, [r3, #28]
      break;
 800748e:	e002      	b.n	8007496 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	75fb      	strb	r3, [r7, #23]
      break;
 8007494:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800749e:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_TIM_ConfigClockSource+0x1c>
 80074c0:	2302      	movs	r3, #2
 80074c2:	e0b4      	b.n	800762e <HAL_TIM_ConfigClockSource+0x186>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074fc:	d03e      	beq.n	800757c <HAL_TIM_ConfigClockSource+0xd4>
 80074fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007502:	f200 8087 	bhi.w	8007614 <HAL_TIM_ConfigClockSource+0x16c>
 8007506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750a:	f000 8086 	beq.w	800761a <HAL_TIM_ConfigClockSource+0x172>
 800750e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007512:	d87f      	bhi.n	8007614 <HAL_TIM_ConfigClockSource+0x16c>
 8007514:	2b70      	cmp	r3, #112	; 0x70
 8007516:	d01a      	beq.n	800754e <HAL_TIM_ConfigClockSource+0xa6>
 8007518:	2b70      	cmp	r3, #112	; 0x70
 800751a:	d87b      	bhi.n	8007614 <HAL_TIM_ConfigClockSource+0x16c>
 800751c:	2b60      	cmp	r3, #96	; 0x60
 800751e:	d050      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x11a>
 8007520:	2b60      	cmp	r3, #96	; 0x60
 8007522:	d877      	bhi.n	8007614 <HAL_TIM_ConfigClockSource+0x16c>
 8007524:	2b50      	cmp	r3, #80	; 0x50
 8007526:	d03c      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0xfa>
 8007528:	2b50      	cmp	r3, #80	; 0x50
 800752a:	d873      	bhi.n	8007614 <HAL_TIM_ConfigClockSource+0x16c>
 800752c:	2b40      	cmp	r3, #64	; 0x40
 800752e:	d058      	beq.n	80075e2 <HAL_TIM_ConfigClockSource+0x13a>
 8007530:	2b40      	cmp	r3, #64	; 0x40
 8007532:	d86f      	bhi.n	8007614 <HAL_TIM_ConfigClockSource+0x16c>
 8007534:	2b30      	cmp	r3, #48	; 0x30
 8007536:	d064      	beq.n	8007602 <HAL_TIM_ConfigClockSource+0x15a>
 8007538:	2b30      	cmp	r3, #48	; 0x30
 800753a:	d86b      	bhi.n	8007614 <HAL_TIM_ConfigClockSource+0x16c>
 800753c:	2b20      	cmp	r3, #32
 800753e:	d060      	beq.n	8007602 <HAL_TIM_ConfigClockSource+0x15a>
 8007540:	2b20      	cmp	r3, #32
 8007542:	d867      	bhi.n	8007614 <HAL_TIM_ConfigClockSource+0x16c>
 8007544:	2b00      	cmp	r3, #0
 8007546:	d05c      	beq.n	8007602 <HAL_TIM_ConfigClockSource+0x15a>
 8007548:	2b10      	cmp	r3, #16
 800754a:	d05a      	beq.n	8007602 <HAL_TIM_ConfigClockSource+0x15a>
 800754c:	e062      	b.n	8007614 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6818      	ldr	r0, [r3, #0]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	6899      	ldr	r1, [r3, #8]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	f000 fd2b 	bl	8007fb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007570:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	609a      	str	r2, [r3, #8]
      break;
 800757a:	e04f      	b.n	800761c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	6899      	ldr	r1, [r3, #8]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f000 fd14 	bl	8007fb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689a      	ldr	r2, [r3, #8]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800759e:	609a      	str	r2, [r3, #8]
      break;
 80075a0:	e03c      	b.n	800761c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	6859      	ldr	r1, [r3, #4]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f000 fbd2 	bl	8007d58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2150      	movs	r1, #80	; 0x50
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 fce1 	bl	8007f82 <TIM_ITRx_SetConfig>
      break;
 80075c0:	e02c      	b.n	800761c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6818      	ldr	r0, [r3, #0]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	6859      	ldr	r1, [r3, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f000 fc2e 	bl	8007e30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2160      	movs	r1, #96	; 0x60
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fcd1 	bl	8007f82 <TIM_ITRx_SetConfig>
      break;
 80075e0:	e01c      	b.n	800761c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6818      	ldr	r0, [r3, #0]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	6859      	ldr	r1, [r3, #4]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	461a      	mov	r2, r3
 80075f0:	f000 fbb2 	bl	8007d58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2140      	movs	r1, #64	; 0x40
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fcc1 	bl	8007f82 <TIM_ITRx_SetConfig>
      break;
 8007600:	e00c      	b.n	800761c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4619      	mov	r1, r3
 800760c:	4610      	mov	r0, r2
 800760e:	f000 fcb8 	bl	8007f82 <TIM_ITRx_SetConfig>
      break;
 8007612:	e003      	b.n	800761c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	73fb      	strb	r3, [r7, #15]
      break;
 8007618:	e000      	b.n	800761c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800761a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d107      	bne.n	80076d6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2201      	movs	r2, #1
 80076ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d4:	e02a      	b.n	800772c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d107      	bne.n	80076f0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2202      	movs	r2, #2
 80076e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076ee:	e01d      	b.n	800772c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d107      	bne.n	800770a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2204      	movs	r2, #4
 80076fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007708:	e010      	b.n	800772c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	429a      	cmp	r2, r3
 8007712:	d107      	bne.n	8007724 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2208      	movs	r2, #8
 8007718:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007722:	e003      	b.n	800772c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f7ff ffb4 	bl	800769a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	771a      	strb	r2, [r3, #28]
}
 8007738:	bf00      	nop
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	429a      	cmp	r2, r3
 8007756:	d10f      	bne.n	8007778 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d146      	bne.n	80077f4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007776:	e03d      	b.n	80077f4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	429a      	cmp	r2, r3
 8007780:	d10f      	bne.n	80077a2 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2202      	movs	r2, #2
 8007786:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d131      	bne.n	80077f4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077a0:	e028      	b.n	80077f4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d10f      	bne.n	80077cc <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2204      	movs	r2, #4
 80077b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d11c      	bne.n	80077f4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077ca:	e013      	b.n	80077f4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d10e      	bne.n	80077f4 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2208      	movs	r2, #8
 80077da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d107      	bne.n	80077f4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f7ff ff28 	bl	800764a <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	771a      	strb	r2, [r3, #28]
}
 8007800:	bf00      	nop
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	429a      	cmp	r2, r3
 800781e:	d103      	bne.n	8007828 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2201      	movs	r2, #1
 8007824:	771a      	strb	r2, [r3, #28]
 8007826:	e019      	b.n	800785c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	429a      	cmp	r2, r3
 8007830:	d103      	bne.n	800783a <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2202      	movs	r2, #2
 8007836:	771a      	strb	r2, [r3, #28]
 8007838:	e010      	b.n	800785c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	429a      	cmp	r2, r3
 8007842:	d103      	bne.n	800784c <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2204      	movs	r2, #4
 8007848:	771a      	strb	r2, [r3, #28]
 800784a:	e007      	b.n	800785c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	429a      	cmp	r2, r3
 8007854:	d102      	bne.n	800785c <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2208      	movs	r2, #8
 800785a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f7ff fefe 	bl	800765e <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	771a      	strb	r2, [r3, #28]
}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a34      	ldr	r2, [pc, #208]	; (8007954 <TIM_Base_SetConfig+0xe4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d00f      	beq.n	80078a8 <TIM_Base_SetConfig+0x38>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788e:	d00b      	beq.n	80078a8 <TIM_Base_SetConfig+0x38>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a31      	ldr	r2, [pc, #196]	; (8007958 <TIM_Base_SetConfig+0xe8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d007      	beq.n	80078a8 <TIM_Base_SetConfig+0x38>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a30      	ldr	r2, [pc, #192]	; (800795c <TIM_Base_SetConfig+0xec>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d003      	beq.n	80078a8 <TIM_Base_SetConfig+0x38>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a2f      	ldr	r2, [pc, #188]	; (8007960 <TIM_Base_SetConfig+0xf0>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d108      	bne.n	80078ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a25      	ldr	r2, [pc, #148]	; (8007954 <TIM_Base_SetConfig+0xe4>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d01b      	beq.n	80078fa <TIM_Base_SetConfig+0x8a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c8:	d017      	beq.n	80078fa <TIM_Base_SetConfig+0x8a>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a22      	ldr	r2, [pc, #136]	; (8007958 <TIM_Base_SetConfig+0xe8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d013      	beq.n	80078fa <TIM_Base_SetConfig+0x8a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a21      	ldr	r2, [pc, #132]	; (800795c <TIM_Base_SetConfig+0xec>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00f      	beq.n	80078fa <TIM_Base_SetConfig+0x8a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a20      	ldr	r2, [pc, #128]	; (8007960 <TIM_Base_SetConfig+0xf0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00b      	beq.n	80078fa <TIM_Base_SetConfig+0x8a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a1f      	ldr	r2, [pc, #124]	; (8007964 <TIM_Base_SetConfig+0xf4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d007      	beq.n	80078fa <TIM_Base_SetConfig+0x8a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a1e      	ldr	r2, [pc, #120]	; (8007968 <TIM_Base_SetConfig+0xf8>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d003      	beq.n	80078fa <TIM_Base_SetConfig+0x8a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a1d      	ldr	r2, [pc, #116]	; (800796c <TIM_Base_SetConfig+0xfc>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d108      	bne.n	800790c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a08      	ldr	r2, [pc, #32]	; (8007954 <TIM_Base_SetConfig+0xe4>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d103      	bne.n	8007940 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	691a      	ldr	r2, [r3, #16]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	615a      	str	r2, [r3, #20]
}
 8007946:	bf00      	nop
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	40010000 	.word	0x40010000
 8007958:	40000400 	.word	0x40000400
 800795c:	40000800 	.word	0x40000800
 8007960:	40000c00 	.word	0x40000c00
 8007964:	40014000 	.word	0x40014000
 8007968:	40014400 	.word	0x40014400
 800796c:	40014800 	.word	0x40014800

08007970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	f023 0201 	bic.w	r2, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800799e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f023 0303 	bic.w	r3, r3, #3
 80079a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f023 0302 	bic.w	r3, r3, #2
 80079b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a1c      	ldr	r2, [pc, #112]	; (8007a38 <TIM_OC1_SetConfig+0xc8>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d10c      	bne.n	80079e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f023 0308 	bic.w	r3, r3, #8
 80079d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	4313      	orrs	r3, r2
 80079dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f023 0304 	bic.w	r3, r3, #4
 80079e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a13      	ldr	r2, [pc, #76]	; (8007a38 <TIM_OC1_SetConfig+0xc8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d111      	bne.n	8007a12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	621a      	str	r2, [r3, #32]
}
 8007a2c:	bf00      	nop
 8007a2e:	371c      	adds	r7, #28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	40010000 	.word	0x40010000

08007a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	f023 0210 	bic.w	r2, r3, #16
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	021b      	lsls	r3, r3, #8
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f023 0320 	bic.w	r3, r3, #32
 8007a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	011b      	lsls	r3, r3, #4
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a1e      	ldr	r2, [pc, #120]	; (8007b10 <TIM_OC2_SetConfig+0xd4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d10d      	bne.n	8007ab8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a15      	ldr	r2, [pc, #84]	; (8007b10 <TIM_OC2_SetConfig+0xd4>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d113      	bne.n	8007ae8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	621a      	str	r2, [r3, #32]
}
 8007b02:	bf00      	nop
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	40010000 	.word	0x40010000

08007b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 0303 	bic.w	r3, r3, #3
 8007b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a1d      	ldr	r2, [pc, #116]	; (8007be4 <TIM_OC3_SetConfig+0xd0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d10d      	bne.n	8007b8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	021b      	lsls	r3, r3, #8
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a14      	ldr	r2, [pc, #80]	; (8007be4 <TIM_OC3_SetConfig+0xd0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d113      	bne.n	8007bbe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	011b      	lsls	r3, r3, #4
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	621a      	str	r2, [r3, #32]
}
 8007bd8:	bf00      	nop
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	40010000 	.word	0x40010000

08007be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	021b      	lsls	r3, r3, #8
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	031b      	lsls	r3, r3, #12
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a10      	ldr	r2, [pc, #64]	; (8007c84 <TIM_OC4_SetConfig+0x9c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d109      	bne.n	8007c5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	019b      	lsls	r3, r3, #6
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	621a      	str	r2, [r3, #32]
}
 8007c76:	bf00      	nop
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	40010000 	.word	0x40010000

08007c88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	f023 0201 	bic.w	r2, r3, #1
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	4a24      	ldr	r2, [pc, #144]	; (8007d44 <TIM_TI1_SetConfig+0xbc>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d013      	beq.n	8007cde <TIM_TI1_SetConfig+0x56>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cbc:	d00f      	beq.n	8007cde <TIM_TI1_SetConfig+0x56>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	4a21      	ldr	r2, [pc, #132]	; (8007d48 <TIM_TI1_SetConfig+0xc0>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00b      	beq.n	8007cde <TIM_TI1_SetConfig+0x56>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <TIM_TI1_SetConfig+0xc4>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d007      	beq.n	8007cde <TIM_TI1_SetConfig+0x56>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <TIM_TI1_SetConfig+0xc8>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d003      	beq.n	8007cde <TIM_TI1_SetConfig+0x56>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	4a1e      	ldr	r2, [pc, #120]	; (8007d54 <TIM_TI1_SetConfig+0xcc>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d101      	bne.n	8007ce2 <TIM_TI1_SetConfig+0x5a>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e000      	b.n	8007ce4 <TIM_TI1_SetConfig+0x5c>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d008      	beq.n	8007cfa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f023 0303 	bic.w	r3, r3, #3
 8007cee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]
 8007cf8:	e003      	b.n	8007d02 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f043 0301 	orr.w	r3, r3, #1
 8007d00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f023 030a 	bic.w	r3, r3, #10
 8007d1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f003 030a 	and.w	r3, r3, #10
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	621a      	str	r2, [r3, #32]
}
 8007d36:	bf00      	nop
 8007d38:	371c      	adds	r7, #28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	40010000 	.word	0x40010000
 8007d48:	40000400 	.word	0x40000400
 8007d4c:	40000800 	.word	0x40000800
 8007d50:	40000c00 	.word	0x40000c00
 8007d54:	40014000 	.word	0x40014000

08007d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b087      	sub	sp, #28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	f023 0201 	bic.w	r2, r3, #1
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	011b      	lsls	r3, r3, #4
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f023 030a 	bic.w	r3, r3, #10
 8007d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	621a      	str	r2, [r3, #32]
}
 8007daa:	bf00      	nop
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b087      	sub	sp, #28
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	60f8      	str	r0, [r7, #12]
 8007dbe:	60b9      	str	r1, [r7, #8]
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	f023 0210 	bic.w	r2, r3, #16
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007de2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	021b      	lsls	r3, r3, #8
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007df4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	031b      	lsls	r3, r3, #12
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e08:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	011b      	lsls	r3, r3, #4
 8007e0e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	621a      	str	r2, [r3, #32]
}
 8007e24:	bf00      	nop
 8007e26:	371c      	adds	r7, #28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	f023 0210 	bic.w	r2, r3, #16
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	031b      	lsls	r3, r3, #12
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	621a      	str	r2, [r3, #32]
}
 8007e84:	bf00      	nop
 8007e86:	371c      	adds	r7, #28
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f023 0303 	bic.w	r3, r3, #3
 8007ebc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ecc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	011b      	lsls	r3, r3, #4
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007ee0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	021b      	lsls	r3, r3, #8
 8007ee6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	621a      	str	r2, [r3, #32]
}
 8007efc:	bf00      	nop
 8007efe:	371c      	adds	r7, #28
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	021b      	lsls	r3, r3, #8
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	031b      	lsls	r3, r3, #12
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007f5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	031b      	lsls	r3, r3, #12
 8007f60:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	621a      	str	r2, [r3, #32]
}
 8007f76:	bf00      	nop
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b085      	sub	sp, #20
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	f043 0307 	orr.w	r3, r3, #7
 8007fa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	609a      	str	r2, [r3, #8]
}
 8007fac:	bf00      	nop
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	021a      	lsls	r2, r3, #8
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	609a      	str	r2, [r3, #8]
}
 8007fec:	bf00      	nop
 8007fee:	371c      	adds	r7, #28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b087      	sub	sp, #28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f003 031f 	and.w	r3, r3, #31
 800800a:	2201      	movs	r2, #1
 800800c:	fa02 f303 	lsl.w	r3, r2, r3
 8008010:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6a1a      	ldr	r2, [r3, #32]
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	43db      	mvns	r3, r3
 800801a:	401a      	ands	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6a1a      	ldr	r2, [r3, #32]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	fa01 f303 	lsl.w	r3, r1, r3
 8008030:	431a      	orrs	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	621a      	str	r2, [r3, #32]
}
 8008036:	bf00      	nop
 8008038:	371c      	adds	r7, #28
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
	...

08008044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008054:	2b01      	cmp	r3, #1
 8008056:	d101      	bne.n	800805c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008058:	2302      	movs	r3, #2
 800805a:	e050      	b.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2202      	movs	r2, #2
 8008068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008082:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a1c      	ldr	r2, [pc, #112]	; (800810c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d018      	beq.n	80080d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a8:	d013      	beq.n	80080d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a18      	ldr	r2, [pc, #96]	; (8008110 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d00e      	beq.n	80080d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a16      	ldr	r2, [pc, #88]	; (8008114 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d009      	beq.n	80080d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a15      	ldr	r2, [pc, #84]	; (8008118 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d004      	beq.n	80080d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a13      	ldr	r2, [pc, #76]	; (800811c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d10c      	bne.n	80080ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	40010000 	.word	0x40010000
 8008110:	40000400 	.word	0x40000400
 8008114:	40000800 	.word	0x40000800
 8008118:	40000c00 	.word	0x40000c00
 800811c:	40014000 	.word	0x40014000

08008120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e03f      	b.n	80081da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d106      	bne.n	8008174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7f9 ff98 	bl	80020a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2224      	movs	r2, #36	; 0x24
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800818a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fde9 	bl	8008d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	691a      	ldr	r2, [r3, #16]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	695a      	ldr	r2, [r3, #20]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2220      	movs	r2, #32
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2220      	movs	r2, #32
 80081d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b08a      	sub	sp, #40	; 0x28
 80081e6:	af02      	add	r7, sp, #8
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	603b      	str	r3, [r7, #0]
 80081ee:	4613      	mov	r3, r2
 80081f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b20      	cmp	r3, #32
 8008200:	d17c      	bne.n	80082fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <HAL_UART_Transmit+0x2c>
 8008208:	88fb      	ldrh	r3, [r7, #6]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e075      	b.n	80082fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008218:	2b01      	cmp	r3, #1
 800821a:	d101      	bne.n	8008220 <HAL_UART_Transmit+0x3e>
 800821c:	2302      	movs	r3, #2
 800821e:	e06e      	b.n	80082fe <HAL_UART_Transmit+0x11c>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2221      	movs	r2, #33	; 0x21
 8008232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008236:	f7fa f8af 	bl	8002398 <HAL_GetTick>
 800823a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	88fa      	ldrh	r2, [r7, #6]
 8008240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	88fa      	ldrh	r2, [r7, #6]
 8008246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008250:	d108      	bne.n	8008264 <HAL_UART_Transmit+0x82>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d104      	bne.n	8008264 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800825a:	2300      	movs	r3, #0
 800825c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	61bb      	str	r3, [r7, #24]
 8008262:	e003      	b.n	800826c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008268:	2300      	movs	r3, #0
 800826a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008274:	e02a      	b.n	80082cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2200      	movs	r2, #0
 800827e:	2180      	movs	r1, #128	; 0x80
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 fb29 	bl	80088d8 <UART_WaitOnFlagUntilTimeout>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e036      	b.n	80082fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10b      	bne.n	80082ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	3302      	adds	r3, #2
 80082aa:	61bb      	str	r3, [r7, #24]
 80082ac:	e007      	b.n	80082be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	781a      	ldrb	r2, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	3301      	adds	r3, #1
 80082bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1cf      	bne.n	8008276 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2200      	movs	r2, #0
 80082de:	2140      	movs	r1, #64	; 0x40
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 faf9 	bl	80088d8 <UART_WaitOnFlagUntilTimeout>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e006      	b.n	80082fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2220      	movs	r2, #32
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	e000      	b.n	80082fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80082fc:	2302      	movs	r3, #2
  }
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3720      	adds	r7, #32
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	60b9      	str	r1, [r7, #8]
 8008310:	4613      	mov	r3, r2
 8008312:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b20      	cmp	r3, #32
 800831e:	d11d      	bne.n	800835c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <HAL_UART_Receive_IT+0x26>
 8008326:	88fb      	ldrh	r3, [r7, #6]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e016      	b.n	800835e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008336:	2b01      	cmp	r3, #1
 8008338:	d101      	bne.n	800833e <HAL_UART_Receive_IT+0x38>
 800833a:	2302      	movs	r3, #2
 800833c:	e00f      	b.n	800835e <HAL_UART_Receive_IT+0x58>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800834c:	88fb      	ldrh	r3, [r7, #6]
 800834e:	461a      	mov	r2, r3
 8008350:	68b9      	ldr	r1, [r7, #8]
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 fb2e 	bl	80089b4 <UART_Start_Receive_IT>
 8008358:	4603      	mov	r3, r0
 800835a:	e000      	b.n	800835e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800835c:	2302      	movs	r3, #2
  }
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b0ba      	sub	sp, #232	; 0xe8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800838e:	2300      	movs	r3, #0
 8008390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008394:	2300      	movs	r3, #0
 8008396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800839a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800839e:	f003 030f 	and.w	r3, r3, #15
 80083a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80083a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10f      	bne.n	80083ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d009      	beq.n	80083ce <HAL_UART_IRQHandler+0x66>
 80083ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fc11 	bl	8008bee <UART_Receive_IT>
      return;
 80083cc:	e256      	b.n	800887c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80083ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 80de 	beq.w	8008594 <HAL_UART_IRQHandler+0x22c>
 80083d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d106      	bne.n	80083f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 80d1 	beq.w	8008594 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80083f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <HAL_UART_IRQHandler+0xae>
 80083fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008406:	2b00      	cmp	r3, #0
 8008408:	d005      	beq.n	8008416 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840e:	f043 0201 	orr.w	r2, r3, #1
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841a:	f003 0304 	and.w	r3, r3, #4
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00b      	beq.n	800843a <HAL_UART_IRQHandler+0xd2>
 8008422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d005      	beq.n	800843a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	f043 0202 	orr.w	r2, r3, #2
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800843a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <HAL_UART_IRQHandler+0xf6>
 8008446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	d005      	beq.n	800845e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008456:	f043 0204 	orr.w	r2, r3, #4
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800845e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008462:	f003 0308 	and.w	r3, r3, #8
 8008466:	2b00      	cmp	r3, #0
 8008468:	d011      	beq.n	800848e <HAL_UART_IRQHandler+0x126>
 800846a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800846e:	f003 0320 	and.w	r3, r3, #32
 8008472:	2b00      	cmp	r3, #0
 8008474:	d105      	bne.n	8008482 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800847a:	f003 0301 	and.w	r3, r3, #1
 800847e:	2b00      	cmp	r3, #0
 8008480:	d005      	beq.n	800848e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008486:	f043 0208 	orr.w	r2, r3, #8
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008492:	2b00      	cmp	r3, #0
 8008494:	f000 81ed 	beq.w	8008872 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d008      	beq.n	80084b6 <HAL_UART_IRQHandler+0x14e>
 80084a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084a8:	f003 0320 	and.w	r3, r3, #32
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fb9c 	bl	8008bee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c0:	2b40      	cmp	r3, #64	; 0x40
 80084c2:	bf0c      	ite	eq
 80084c4:	2301      	moveq	r3, #1
 80084c6:	2300      	movne	r3, #0
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	f003 0308 	and.w	r3, r3, #8
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d103      	bne.n	80084e2 <HAL_UART_IRQHandler+0x17a>
 80084da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d04f      	beq.n	8008582 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 faa4 	bl	8008a30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f2:	2b40      	cmp	r3, #64	; 0x40
 80084f4:	d141      	bne.n	800857a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3314      	adds	r3, #20
 80084fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800850c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3314      	adds	r3, #20
 800851e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008522:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800852e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800853a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1d9      	bne.n	80084f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008546:	2b00      	cmp	r3, #0
 8008548:	d013      	beq.n	8008572 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854e:	4a7d      	ldr	r2, [pc, #500]	; (8008744 <HAL_UART_IRQHandler+0x3dc>)
 8008550:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008556:	4618      	mov	r0, r3
 8008558:	f7fa f9d6 	bl	8002908 <HAL_DMA_Abort_IT>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d016      	beq.n	8008590 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800856c:	4610      	mov	r0, r2
 800856e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008570:	e00e      	b.n	8008590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f99a 	bl	80088ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008578:	e00a      	b.n	8008590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f996 	bl	80088ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008580:	e006      	b.n	8008590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f992 	bl	80088ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800858e:	e170      	b.n	8008872 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008590:	bf00      	nop
    return;
 8008592:	e16e      	b.n	8008872 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008598:	2b01      	cmp	r3, #1
 800859a:	f040 814a 	bne.w	8008832 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800859e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a2:	f003 0310 	and.w	r3, r3, #16
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 8143 	beq.w	8008832 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80085ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085b0:	f003 0310 	and.w	r3, r3, #16
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 813c 	beq.w	8008832 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085ba:	2300      	movs	r3, #0
 80085bc:	60bb      	str	r3, [r7, #8]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	60bb      	str	r3, [r7, #8]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	60bb      	str	r3, [r7, #8]
 80085ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085da:	2b40      	cmp	r3, #64	; 0x40
 80085dc:	f040 80b4 	bne.w	8008748 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 8140 	beq.w	8008876 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085fe:	429a      	cmp	r2, r3
 8008600:	f080 8139 	bcs.w	8008876 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800860a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008616:	f000 8088 	beq.w	800872a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	330c      	adds	r3, #12
 8008620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008628:	e853 3f00 	ldrex	r3, [r3]
 800862c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	330c      	adds	r3, #12
 8008642:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008646:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800864a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008652:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008656:	e841 2300 	strex	r3, r2, [r1]
 800865a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800865e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1d9      	bne.n	800861a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3314      	adds	r3, #20
 800866c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008678:	f023 0301 	bic.w	r3, r3, #1
 800867c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3314      	adds	r3, #20
 8008686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800868a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800868e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008690:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008692:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800869c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e1      	bne.n	8008666 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3314      	adds	r3, #20
 80086a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086ac:	e853 3f00 	ldrex	r3, [r3]
 80086b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80086b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3314      	adds	r3, #20
 80086c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80086c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80086c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086ce:	e841 2300 	strex	r3, r2, [r1]
 80086d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80086d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1e3      	bne.n	80086a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2220      	movs	r2, #32
 80086de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	330c      	adds	r3, #12
 80086ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f2:	e853 3f00 	ldrex	r3, [r3]
 80086f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086fa:	f023 0310 	bic.w	r3, r3, #16
 80086fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	330c      	adds	r3, #12
 8008708:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800870c:	65ba      	str	r2, [r7, #88]	; 0x58
 800870e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008710:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008714:	e841 2300 	strex	r3, r2, [r1]
 8008718:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800871a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1e3      	bne.n	80086e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	4618      	mov	r0, r3
 8008726:	f7fa f87f 	bl	8002828 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008732:	b29b      	uxth	r3, r3
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	b29b      	uxth	r3, r3
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f8c0 	bl	80088c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008740:	e099      	b.n	8008876 <HAL_UART_IRQHandler+0x50e>
 8008742:	bf00      	nop
 8008744:	08008af7 	.word	0x08008af7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008750:	b29b      	uxth	r3, r3
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800875c:	b29b      	uxth	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 808b 	beq.w	800887a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 8086 	beq.w	800887a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	330c      	adds	r3, #12
 8008774:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800877e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008784:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	330c      	adds	r3, #12
 800878e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008792:	647a      	str	r2, [r7, #68]	; 0x44
 8008794:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e3      	bne.n	800876e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3314      	adds	r3, #20
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	623b      	str	r3, [r7, #32]
   return(result);
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	f023 0301 	bic.w	r3, r3, #1
 80087bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3314      	adds	r3, #20
 80087c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087ca:	633a      	str	r2, [r7, #48]	; 0x30
 80087cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e3      	bne.n	80087a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	330c      	adds	r3, #12
 80087f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	e853 3f00 	ldrex	r3, [r3]
 80087fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f023 0310 	bic.w	r3, r3, #16
 8008802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	330c      	adds	r3, #12
 800880c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008810:	61fa      	str	r2, [r7, #28]
 8008812:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008814:	69b9      	ldr	r1, [r7, #24]
 8008816:	69fa      	ldr	r2, [r7, #28]
 8008818:	e841 2300 	strex	r3, r2, [r1]
 800881c:	617b      	str	r3, [r7, #20]
   return(result);
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e3      	bne.n	80087ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f848 	bl	80088c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008830:	e023      	b.n	800887a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883a:	2b00      	cmp	r3, #0
 800883c:	d009      	beq.n	8008852 <HAL_UART_IRQHandler+0x4ea>
 800883e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f967 	bl	8008b1e <UART_Transmit_IT>
    return;
 8008850:	e014      	b.n	800887c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00e      	beq.n	800887c <HAL_UART_IRQHandler+0x514>
 800885e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008866:	2b00      	cmp	r3, #0
 8008868:	d008      	beq.n	800887c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f9a7 	bl	8008bbe <UART_EndTransmit_IT>
    return;
 8008870:	e004      	b.n	800887c <HAL_UART_IRQHandler+0x514>
    return;
 8008872:	bf00      	nop
 8008874:	e002      	b.n	800887c <HAL_UART_IRQHandler+0x514>
      return;
 8008876:	bf00      	nop
 8008878:	e000      	b.n	800887c <HAL_UART_IRQHandler+0x514>
      return;
 800887a:	bf00      	nop
  }
}
 800887c:	37e8      	adds	r7, #232	; 0xe8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop

08008884 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	460b      	mov	r3, r1
 80088ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b090      	sub	sp, #64	; 0x40
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	603b      	str	r3, [r7, #0]
 80088e4:	4613      	mov	r3, r2
 80088e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088e8:	e050      	b.n	800898c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f0:	d04c      	beq.n	800898c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80088f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d007      	beq.n	8008908 <UART_WaitOnFlagUntilTimeout+0x30>
 80088f8:	f7f9 fd4e 	bl	8002398 <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008904:	429a      	cmp	r2, r3
 8008906:	d241      	bcs.n	800898c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	330c      	adds	r3, #12
 800890e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	e853 3f00 	ldrex	r3, [r3]
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800891e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	330c      	adds	r3, #12
 8008926:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008928:	637a      	str	r2, [r7, #52]	; 0x34
 800892a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800892e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008930:	e841 2300 	strex	r3, r2, [r1]
 8008934:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1e5      	bne.n	8008908 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3314      	adds	r3, #20
 8008942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	e853 3f00 	ldrex	r3, [r3]
 800894a:	613b      	str	r3, [r7, #16]
   return(result);
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f023 0301 	bic.w	r3, r3, #1
 8008952:	63bb      	str	r3, [r7, #56]	; 0x38
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3314      	adds	r3, #20
 800895a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800895c:	623a      	str	r2, [r7, #32]
 800895e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008960:	69f9      	ldr	r1, [r7, #28]
 8008962:	6a3a      	ldr	r2, [r7, #32]
 8008964:	e841 2300 	strex	r3, r2, [r1]
 8008968:	61bb      	str	r3, [r7, #24]
   return(result);
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1e5      	bne.n	800893c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2220      	movs	r2, #32
 8008974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2220      	movs	r2, #32
 800897c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e00f      	b.n	80089ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	4013      	ands	r3, r2
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	429a      	cmp	r2, r3
 800899a:	bf0c      	ite	eq
 800899c:	2301      	moveq	r3, #1
 800899e:	2300      	movne	r3, #0
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	461a      	mov	r2, r3
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d09f      	beq.n	80088ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3740      	adds	r7, #64	; 0x40
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	4613      	mov	r3, r2
 80089c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	88fa      	ldrh	r2, [r7, #6]
 80089cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	88fa      	ldrh	r2, [r7, #6]
 80089d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2222      	movs	r2, #34	; 0x22
 80089de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d007      	beq.n	8008a02 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68da      	ldr	r2, [r3, #12]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a00:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	695a      	ldr	r2, [r3, #20]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f042 0201 	orr.w	r2, r2, #1
 8008a10:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68da      	ldr	r2, [r3, #12]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f042 0220 	orr.w	r2, r2, #32
 8008a20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b095      	sub	sp, #84	; 0x54
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a42:	e853 3f00 	ldrex	r3, [r3]
 8008a46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	330c      	adds	r3, #12
 8008a56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a58:	643a      	str	r2, [r7, #64]	; 0x40
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a60:	e841 2300 	strex	r3, r2, [r1]
 8008a64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1e5      	bne.n	8008a38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	3314      	adds	r3, #20
 8008a72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	e853 3f00 	ldrex	r3, [r3]
 8008a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	f023 0301 	bic.w	r3, r3, #1
 8008a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3314      	adds	r3, #20
 8008a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a94:	e841 2300 	strex	r3, r2, [r1]
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1e5      	bne.n	8008a6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d119      	bne.n	8008adc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	330c      	adds	r3, #12
 8008aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f023 0310 	bic.w	r3, r3, #16
 8008abe:	647b      	str	r3, [r7, #68]	; 0x44
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ac8:	61ba      	str	r2, [r7, #24]
 8008aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	6979      	ldr	r1, [r7, #20]
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e5      	bne.n	8008aa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008aea:	bf00      	nop
 8008aec:	3754      	adds	r7, #84	; 0x54
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f7ff fecb 	bl	80088ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b16:	bf00      	nop
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b085      	sub	sp, #20
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b21      	cmp	r3, #33	; 0x21
 8008b30:	d13e      	bne.n	8008bb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b3a:	d114      	bne.n	8008b66 <UART_Transmit_IT+0x48>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d110      	bne.n	8008b66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	1c9a      	adds	r2, r3, #2
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	621a      	str	r2, [r3, #32]
 8008b64:	e008      	b.n	8008b78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	1c59      	adds	r1, r3, #1
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	6211      	str	r1, [r2, #32]
 8008b70:	781a      	ldrb	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	4619      	mov	r1, r3
 8008b86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10f      	bne.n	8008bac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008baa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	e000      	b.n	8008bb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bb0:	2302      	movs	r3, #2
  }
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b082      	sub	sp, #8
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68da      	ldr	r2, [r3, #12]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7ff fe50 	bl	8008884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b08c      	sub	sp, #48	; 0x30
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b22      	cmp	r3, #34	; 0x22
 8008c00:	f040 80ab 	bne.w	8008d5a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c0c:	d117      	bne.n	8008c3e <UART_Receive_IT+0x50>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d113      	bne.n	8008c3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c16:	2300      	movs	r3, #0
 8008c18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	1c9a      	adds	r2, r3, #2
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	629a      	str	r2, [r3, #40]	; 0x28
 8008c3c:	e026      	b.n	8008c8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008c44:	2300      	movs	r3, #0
 8008c46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c50:	d007      	beq.n	8008c62 <UART_Receive_IT+0x74>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10a      	bne.n	8008c70 <UART_Receive_IT+0x82>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d106      	bne.n	8008c70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	701a      	strb	r2, [r3, #0]
 8008c6e:	e008      	b.n	8008c82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	3b01      	subs	r3, #1
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d15a      	bne.n	8008d56 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68da      	ldr	r2, [r3, #12]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f022 0220 	bic.w	r2, r2, #32
 8008cae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68da      	ldr	r2, [r3, #12]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	695a      	ldr	r2, [r3, #20]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f022 0201 	bic.w	r2, r2, #1
 8008cce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d135      	bne.n	8008d4c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	330c      	adds	r3, #12
 8008cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	e853 3f00 	ldrex	r3, [r3]
 8008cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	f023 0310 	bic.w	r3, r3, #16
 8008cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	330c      	adds	r3, #12
 8008d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d06:	623a      	str	r2, [r7, #32]
 8008d08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	69f9      	ldr	r1, [r7, #28]
 8008d0c:	6a3a      	ldr	r2, [r7, #32]
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e5      	bne.n	8008ce6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0310 	and.w	r3, r3, #16
 8008d24:	2b10      	cmp	r3, #16
 8008d26:	d10a      	bne.n	8008d3e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d28:	2300      	movs	r3, #0
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7ff fdbb 	bl	80088c0 <HAL_UARTEx_RxEventCallback>
 8008d4a:	e002      	b.n	8008d52 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7ff fda3 	bl	8008898 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	e002      	b.n	8008d5c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	e000      	b.n	8008d5c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008d5a:	2302      	movs	r3, #2
  }
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3730      	adds	r7, #48	; 0x30
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d68:	b0c0      	sub	sp, #256	; 0x100
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d80:	68d9      	ldr	r1, [r3, #12]
 8008d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	ea40 0301 	orr.w	r3, r0, r1
 8008d8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	431a      	orrs	r2, r3
 8008da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008dbc:	f021 010c 	bic.w	r1, r1, #12
 8008dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008dca:	430b      	orrs	r3, r1
 8008dcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dde:	6999      	ldr	r1, [r3, #24]
 8008de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	ea40 0301 	orr.w	r3, r0, r1
 8008dea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	4b8f      	ldr	r3, [pc, #572]	; (8009030 <UART_SetConfig+0x2cc>)
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d005      	beq.n	8008e04 <UART_SetConfig+0xa0>
 8008df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	4b8d      	ldr	r3, [pc, #564]	; (8009034 <UART_SetConfig+0x2d0>)
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d104      	bne.n	8008e0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e04:	f7fd fcca 	bl	800679c <HAL_RCC_GetPCLK2Freq>
 8008e08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e0c:	e003      	b.n	8008e16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e0e:	f7fd fcb1 	bl	8006774 <HAL_RCC_GetPCLK1Freq>
 8008e12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e20:	f040 810c 	bne.w	800903c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008e32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008e36:	4622      	mov	r2, r4
 8008e38:	462b      	mov	r3, r5
 8008e3a:	1891      	adds	r1, r2, r2
 8008e3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e3e:	415b      	adcs	r3, r3
 8008e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e46:	4621      	mov	r1, r4
 8008e48:	eb12 0801 	adds.w	r8, r2, r1
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	eb43 0901 	adc.w	r9, r3, r1
 8008e52:	f04f 0200 	mov.w	r2, #0
 8008e56:	f04f 0300 	mov.w	r3, #0
 8008e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e66:	4690      	mov	r8, r2
 8008e68:	4699      	mov	r9, r3
 8008e6a:	4623      	mov	r3, r4
 8008e6c:	eb18 0303 	adds.w	r3, r8, r3
 8008e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e74:	462b      	mov	r3, r5
 8008e76:	eb49 0303 	adc.w	r3, r9, r3
 8008e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008e8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e92:	460b      	mov	r3, r1
 8008e94:	18db      	adds	r3, r3, r3
 8008e96:	653b      	str	r3, [r7, #80]	; 0x50
 8008e98:	4613      	mov	r3, r2
 8008e9a:	eb42 0303 	adc.w	r3, r2, r3
 8008e9e:	657b      	str	r3, [r7, #84]	; 0x54
 8008ea0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ea4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ea8:	f7f7 faa4 	bl	80003f4 <__aeabi_uldivmod>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4b61      	ldr	r3, [pc, #388]	; (8009038 <UART_SetConfig+0x2d4>)
 8008eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8008eb6:	095b      	lsrs	r3, r3, #5
 8008eb8:	011c      	lsls	r4, r3, #4
 8008eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ec4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ec8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ecc:	4642      	mov	r2, r8
 8008ece:	464b      	mov	r3, r9
 8008ed0:	1891      	adds	r1, r2, r2
 8008ed2:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ed4:	415b      	adcs	r3, r3
 8008ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ed8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008edc:	4641      	mov	r1, r8
 8008ede:	eb12 0a01 	adds.w	sl, r2, r1
 8008ee2:	4649      	mov	r1, r9
 8008ee4:	eb43 0b01 	adc.w	fp, r3, r1
 8008ee8:	f04f 0200 	mov.w	r2, #0
 8008eec:	f04f 0300 	mov.w	r3, #0
 8008ef0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ef4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008efc:	4692      	mov	sl, r2
 8008efe:	469b      	mov	fp, r3
 8008f00:	4643      	mov	r3, r8
 8008f02:	eb1a 0303 	adds.w	r3, sl, r3
 8008f06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f0a:	464b      	mov	r3, r9
 8008f0c:	eb4b 0303 	adc.w	r3, fp, r3
 8008f10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008f24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	18db      	adds	r3, r3, r3
 8008f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8008f2e:	4613      	mov	r3, r2
 8008f30:	eb42 0303 	adc.w	r3, r2, r3
 8008f34:	647b      	str	r3, [r7, #68]	; 0x44
 8008f36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f3e:	f7f7 fa59 	bl	80003f4 <__aeabi_uldivmod>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	4611      	mov	r1, r2
 8008f48:	4b3b      	ldr	r3, [pc, #236]	; (8009038 <UART_SetConfig+0x2d4>)
 8008f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8008f4e:	095b      	lsrs	r3, r3, #5
 8008f50:	2264      	movs	r2, #100	; 0x64
 8008f52:	fb02 f303 	mul.w	r3, r2, r3
 8008f56:	1acb      	subs	r3, r1, r3
 8008f58:	00db      	lsls	r3, r3, #3
 8008f5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f5e:	4b36      	ldr	r3, [pc, #216]	; (8009038 <UART_SetConfig+0x2d4>)
 8008f60:	fba3 2302 	umull	r2, r3, r3, r2
 8008f64:	095b      	lsrs	r3, r3, #5
 8008f66:	005b      	lsls	r3, r3, #1
 8008f68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f6c:	441c      	add	r4, r3
 8008f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f72:	2200      	movs	r2, #0
 8008f74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008f7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008f80:	4642      	mov	r2, r8
 8008f82:	464b      	mov	r3, r9
 8008f84:	1891      	adds	r1, r2, r2
 8008f86:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f88:	415b      	adcs	r3, r3
 8008f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f90:	4641      	mov	r1, r8
 8008f92:	1851      	adds	r1, r2, r1
 8008f94:	6339      	str	r1, [r7, #48]	; 0x30
 8008f96:	4649      	mov	r1, r9
 8008f98:	414b      	adcs	r3, r1
 8008f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f9c:	f04f 0200 	mov.w	r2, #0
 8008fa0:	f04f 0300 	mov.w	r3, #0
 8008fa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008fa8:	4659      	mov	r1, fp
 8008faa:	00cb      	lsls	r3, r1, #3
 8008fac:	4651      	mov	r1, sl
 8008fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fb2:	4651      	mov	r1, sl
 8008fb4:	00ca      	lsls	r2, r1, #3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4603      	mov	r3, r0
 8008fbc:	4642      	mov	r2, r8
 8008fbe:	189b      	adds	r3, r3, r2
 8008fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fc4:	464b      	mov	r3, r9
 8008fc6:	460a      	mov	r2, r1
 8008fc8:	eb42 0303 	adc.w	r3, r2, r3
 8008fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008fdc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008fe0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	18db      	adds	r3, r3, r3
 8008fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fea:	4613      	mov	r3, r2
 8008fec:	eb42 0303 	adc.w	r3, r2, r3
 8008ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ff6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008ffa:	f7f7 f9fb 	bl	80003f4 <__aeabi_uldivmod>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4b0d      	ldr	r3, [pc, #52]	; (8009038 <UART_SetConfig+0x2d4>)
 8009004:	fba3 1302 	umull	r1, r3, r3, r2
 8009008:	095b      	lsrs	r3, r3, #5
 800900a:	2164      	movs	r1, #100	; 0x64
 800900c:	fb01 f303 	mul.w	r3, r1, r3
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	00db      	lsls	r3, r3, #3
 8009014:	3332      	adds	r3, #50	; 0x32
 8009016:	4a08      	ldr	r2, [pc, #32]	; (8009038 <UART_SetConfig+0x2d4>)
 8009018:	fba2 2303 	umull	r2, r3, r2, r3
 800901c:	095b      	lsrs	r3, r3, #5
 800901e:	f003 0207 	and.w	r2, r3, #7
 8009022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4422      	add	r2, r4
 800902a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800902c:	e105      	b.n	800923a <UART_SetConfig+0x4d6>
 800902e:	bf00      	nop
 8009030:	40011000 	.word	0x40011000
 8009034:	40011400 	.word	0x40011400
 8009038:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800903c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009040:	2200      	movs	r2, #0
 8009042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009046:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800904a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800904e:	4642      	mov	r2, r8
 8009050:	464b      	mov	r3, r9
 8009052:	1891      	adds	r1, r2, r2
 8009054:	6239      	str	r1, [r7, #32]
 8009056:	415b      	adcs	r3, r3
 8009058:	627b      	str	r3, [r7, #36]	; 0x24
 800905a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800905e:	4641      	mov	r1, r8
 8009060:	1854      	adds	r4, r2, r1
 8009062:	4649      	mov	r1, r9
 8009064:	eb43 0501 	adc.w	r5, r3, r1
 8009068:	f04f 0200 	mov.w	r2, #0
 800906c:	f04f 0300 	mov.w	r3, #0
 8009070:	00eb      	lsls	r3, r5, #3
 8009072:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009076:	00e2      	lsls	r2, r4, #3
 8009078:	4614      	mov	r4, r2
 800907a:	461d      	mov	r5, r3
 800907c:	4643      	mov	r3, r8
 800907e:	18e3      	adds	r3, r4, r3
 8009080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009084:	464b      	mov	r3, r9
 8009086:	eb45 0303 	adc.w	r3, r5, r3
 800908a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800908e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800909a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800909e:	f04f 0200 	mov.w	r2, #0
 80090a2:	f04f 0300 	mov.w	r3, #0
 80090a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80090aa:	4629      	mov	r1, r5
 80090ac:	008b      	lsls	r3, r1, #2
 80090ae:	4621      	mov	r1, r4
 80090b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090b4:	4621      	mov	r1, r4
 80090b6:	008a      	lsls	r2, r1, #2
 80090b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80090bc:	f7f7 f99a 	bl	80003f4 <__aeabi_uldivmod>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4b60      	ldr	r3, [pc, #384]	; (8009248 <UART_SetConfig+0x4e4>)
 80090c6:	fba3 2302 	umull	r2, r3, r3, r2
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	011c      	lsls	r4, r3, #4
 80090ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80090dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80090e0:	4642      	mov	r2, r8
 80090e2:	464b      	mov	r3, r9
 80090e4:	1891      	adds	r1, r2, r2
 80090e6:	61b9      	str	r1, [r7, #24]
 80090e8:	415b      	adcs	r3, r3
 80090ea:	61fb      	str	r3, [r7, #28]
 80090ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090f0:	4641      	mov	r1, r8
 80090f2:	1851      	adds	r1, r2, r1
 80090f4:	6139      	str	r1, [r7, #16]
 80090f6:	4649      	mov	r1, r9
 80090f8:	414b      	adcs	r3, r1
 80090fa:	617b      	str	r3, [r7, #20]
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	f04f 0300 	mov.w	r3, #0
 8009104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009108:	4659      	mov	r1, fp
 800910a:	00cb      	lsls	r3, r1, #3
 800910c:	4651      	mov	r1, sl
 800910e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009112:	4651      	mov	r1, sl
 8009114:	00ca      	lsls	r2, r1, #3
 8009116:	4610      	mov	r0, r2
 8009118:	4619      	mov	r1, r3
 800911a:	4603      	mov	r3, r0
 800911c:	4642      	mov	r2, r8
 800911e:	189b      	adds	r3, r3, r2
 8009120:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009124:	464b      	mov	r3, r9
 8009126:	460a      	mov	r2, r1
 8009128:	eb42 0303 	adc.w	r3, r2, r3
 800912c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	67bb      	str	r3, [r7, #120]	; 0x78
 800913a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800913c:	f04f 0200 	mov.w	r2, #0
 8009140:	f04f 0300 	mov.w	r3, #0
 8009144:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009148:	4649      	mov	r1, r9
 800914a:	008b      	lsls	r3, r1, #2
 800914c:	4641      	mov	r1, r8
 800914e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009152:	4641      	mov	r1, r8
 8009154:	008a      	lsls	r2, r1, #2
 8009156:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800915a:	f7f7 f94b 	bl	80003f4 <__aeabi_uldivmod>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	4b39      	ldr	r3, [pc, #228]	; (8009248 <UART_SetConfig+0x4e4>)
 8009164:	fba3 1302 	umull	r1, r3, r3, r2
 8009168:	095b      	lsrs	r3, r3, #5
 800916a:	2164      	movs	r1, #100	; 0x64
 800916c:	fb01 f303 	mul.w	r3, r1, r3
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	011b      	lsls	r3, r3, #4
 8009174:	3332      	adds	r3, #50	; 0x32
 8009176:	4a34      	ldr	r2, [pc, #208]	; (8009248 <UART_SetConfig+0x4e4>)
 8009178:	fba2 2303 	umull	r2, r3, r2, r3
 800917c:	095b      	lsrs	r3, r3, #5
 800917e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009182:	441c      	add	r4, r3
 8009184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009188:	2200      	movs	r2, #0
 800918a:	673b      	str	r3, [r7, #112]	; 0x70
 800918c:	677a      	str	r2, [r7, #116]	; 0x74
 800918e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009192:	4642      	mov	r2, r8
 8009194:	464b      	mov	r3, r9
 8009196:	1891      	adds	r1, r2, r2
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	415b      	adcs	r3, r3
 800919c:	60fb      	str	r3, [r7, #12]
 800919e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091a2:	4641      	mov	r1, r8
 80091a4:	1851      	adds	r1, r2, r1
 80091a6:	6039      	str	r1, [r7, #0]
 80091a8:	4649      	mov	r1, r9
 80091aa:	414b      	adcs	r3, r1
 80091ac:	607b      	str	r3, [r7, #4]
 80091ae:	f04f 0200 	mov.w	r2, #0
 80091b2:	f04f 0300 	mov.w	r3, #0
 80091b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091ba:	4659      	mov	r1, fp
 80091bc:	00cb      	lsls	r3, r1, #3
 80091be:	4651      	mov	r1, sl
 80091c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091c4:	4651      	mov	r1, sl
 80091c6:	00ca      	lsls	r2, r1, #3
 80091c8:	4610      	mov	r0, r2
 80091ca:	4619      	mov	r1, r3
 80091cc:	4603      	mov	r3, r0
 80091ce:	4642      	mov	r2, r8
 80091d0:	189b      	adds	r3, r3, r2
 80091d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80091d4:	464b      	mov	r3, r9
 80091d6:	460a      	mov	r2, r1
 80091d8:	eb42 0303 	adc.w	r3, r2, r3
 80091dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	663b      	str	r3, [r7, #96]	; 0x60
 80091e8:	667a      	str	r2, [r7, #100]	; 0x64
 80091ea:	f04f 0200 	mov.w	r2, #0
 80091ee:	f04f 0300 	mov.w	r3, #0
 80091f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80091f6:	4649      	mov	r1, r9
 80091f8:	008b      	lsls	r3, r1, #2
 80091fa:	4641      	mov	r1, r8
 80091fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009200:	4641      	mov	r1, r8
 8009202:	008a      	lsls	r2, r1, #2
 8009204:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009208:	f7f7 f8f4 	bl	80003f4 <__aeabi_uldivmod>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4b0d      	ldr	r3, [pc, #52]	; (8009248 <UART_SetConfig+0x4e4>)
 8009212:	fba3 1302 	umull	r1, r3, r3, r2
 8009216:	095b      	lsrs	r3, r3, #5
 8009218:	2164      	movs	r1, #100	; 0x64
 800921a:	fb01 f303 	mul.w	r3, r1, r3
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	011b      	lsls	r3, r3, #4
 8009222:	3332      	adds	r3, #50	; 0x32
 8009224:	4a08      	ldr	r2, [pc, #32]	; (8009248 <UART_SetConfig+0x4e4>)
 8009226:	fba2 2303 	umull	r2, r3, r2, r3
 800922a:	095b      	lsrs	r3, r3, #5
 800922c:	f003 020f 	and.w	r2, r3, #15
 8009230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4422      	add	r2, r4
 8009238:	609a      	str	r2, [r3, #8]
}
 800923a:	bf00      	nop
 800923c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009240:	46bd      	mov	sp, r7
 8009242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009246:	bf00      	nop
 8009248:	51eb851f 	.word	0x51eb851f

0800924c <__libc_init_array>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	4d0d      	ldr	r5, [pc, #52]	; (8009284 <__libc_init_array+0x38>)
 8009250:	4c0d      	ldr	r4, [pc, #52]	; (8009288 <__libc_init_array+0x3c>)
 8009252:	1b64      	subs	r4, r4, r5
 8009254:	10a4      	asrs	r4, r4, #2
 8009256:	2600      	movs	r6, #0
 8009258:	42a6      	cmp	r6, r4
 800925a:	d109      	bne.n	8009270 <__libc_init_array+0x24>
 800925c:	4d0b      	ldr	r5, [pc, #44]	; (800928c <__libc_init_array+0x40>)
 800925e:	4c0c      	ldr	r4, [pc, #48]	; (8009290 <__libc_init_array+0x44>)
 8009260:	f000 f820 	bl	80092a4 <_init>
 8009264:	1b64      	subs	r4, r4, r5
 8009266:	10a4      	asrs	r4, r4, #2
 8009268:	2600      	movs	r6, #0
 800926a:	42a6      	cmp	r6, r4
 800926c:	d105      	bne.n	800927a <__libc_init_array+0x2e>
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	f855 3b04 	ldr.w	r3, [r5], #4
 8009274:	4798      	blx	r3
 8009276:	3601      	adds	r6, #1
 8009278:	e7ee      	b.n	8009258 <__libc_init_array+0xc>
 800927a:	f855 3b04 	ldr.w	r3, [r5], #4
 800927e:	4798      	blx	r3
 8009280:	3601      	adds	r6, #1
 8009282:	e7f2      	b.n	800926a <__libc_init_array+0x1e>
 8009284:	080092e4 	.word	0x080092e4
 8009288:	080092e4 	.word	0x080092e4
 800928c:	080092e4 	.word	0x080092e4
 8009290:	080092e8 	.word	0x080092e8

08009294 <memset>:
 8009294:	4402      	add	r2, r0
 8009296:	4603      	mov	r3, r0
 8009298:	4293      	cmp	r3, r2
 800929a:	d100      	bne.n	800929e <memset+0xa>
 800929c:	4770      	bx	lr
 800929e:	f803 1b01 	strb.w	r1, [r3], #1
 80092a2:	e7f9      	b.n	8009298 <memset+0x4>

080092a4 <_init>:
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a6:	bf00      	nop
 80092a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092aa:	bc08      	pop	{r3}
 80092ac:	469e      	mov	lr, r3
 80092ae:	4770      	bx	lr

080092b0 <_fini>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	bf00      	nop
 80092b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b6:	bc08      	pop	{r3}
 80092b8:	469e      	mov	lr, r3
 80092ba:	4770      	bx	lr
