
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ea80  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b104  0801ec20  0801ec20  0002ec20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029d24  08029d24  000400cc  2**0
                  CONTENTS
  4 .ARM          00000008  08029d24  08029d24  00039d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029d2c  08029d2c  000400cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08029d2c  08029d2c  00039d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029d34  08029d34  00039d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08029d38  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  200000d0  08029e04  000400d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  08029e04  00040648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0010507a  00000000  00000000  000400fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc6  00000000  00000000  00145176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004a20  00000000  00000000  00147f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004970  00000000  00000000  0014c960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb78  00000000  00000000  001512d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002204a  00000000  00000000  0016de48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00478464  00000000  00000000  0018fe92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  006082f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00016424  00000000  00000000  00608348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d0 	.word	0x200000d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801ec08 	.word	0x0801ec08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	0801ec08 	.word	0x0801ec08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f0a:	eef0 7ae7 	vabs.f32	s15, s15
 8000f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f26:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f2a:	f01b ff6d 	bl	801ce08 <sqrtf>
 8000f2e:	eef0 7a40 	vmov.f32	s15, s0
 8000f32:	eeb0 0a67 	vmov.f32	s0, s15
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
///////////////////// [UART UI Base System] /////////////////////
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a3d      	ldr	r2, [pc, #244]	; (8001074 <HAL_UARTEx_RxEventCallback+0x108>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d173      	bne.n	800106a <HAL_UARTEx_RxEventCallback+0xfe>
	{
		oldPos_uart = newPos_uart;  // Update the last position before copying new data
 8000f82:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000f84:	881a      	ldrh	r2, [r3, #0]
 8000f86:	4b3d      	ldr	r3, [pc, #244]	; (800107c <HAL_UARTEx_RxEventCallback+0x110>)
 8000f88:	801a      	strh	r2, [r3, #0]
		datasize_uart = Size;
 8000f8a:	4a3d      	ldr	r2, [pc, #244]	; (8001080 <HAL_UARTEx_RxEventCallback+0x114>)
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	8013      	strh	r3, [r2, #0]
		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos_uart+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8000f90:	4b3a      	ldr	r3, [pc, #232]	; (800107c <HAL_UARTEx_RxEventCallback+0x110>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	4413      	add	r3, r2
 8000f9a:	2b20      	cmp	r3, #32
 8000f9c:	dd22      	ble.n	8000fe4 <HAL_UARTEx_RxEventCallback+0x78>
		{
			uint16_t datatocopy = MainBuf_SIZE - oldPos_uart;  // find out how much space is left in the main buffer
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <HAL_UARTEx_RxEventCallback+0x110>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	f1c3 0320 	rsb	r3, r3, #32
 8000fa6:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, datatocopy);  // copy data in that remaining space
 8000fa8:	4b34      	ldr	r3, [pc, #208]	; (800107c <HAL_UARTEx_RxEventCallback+0x110>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b35      	ldr	r3, [pc, #212]	; (8001084 <HAL_UARTEx_RxEventCallback+0x118>)
 8000fb0:	4413      	add	r3, r2
 8000fb2:	89fa      	ldrh	r2, [r7, #14]
 8000fb4:	4934      	ldr	r1, [pc, #208]	; (8001088 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f01c fe4e 	bl	801dc58 <memcpy>

			oldPos_uart = 0;  // point to the start of the buffer
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <HAL_UARTEx_RxEventCallback+0x110>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	4a30      	ldr	r2, [pc, #192]	; (8001088 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000fc6:	1899      	adds	r1, r3, r2
 8000fc8:	887a      	ldrh	r2, [r7, #2]
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	482c      	ldr	r0, [pc, #176]	; (8001084 <HAL_UARTEx_RxEventCallback+0x118>)
 8000fd2:	f01c fe41 	bl	801dc58 <memcpy>
			newPos_uart = (Size-datatocopy);  // update the position
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	89fb      	ldrh	r3, [r7, #14]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000fe0:	801a      	strh	r2, [r3, #0]
 8000fe2:	e010      	b.n	8001006 <HAL_UARTEx_RxEventCallback+0x9a>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <HAL_UARTEx_RxEventCallback+0x110>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <HAL_UARTEx_RxEventCallback+0x118>)
 8000fec:	4413      	add	r3, r2
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	4925      	ldr	r1, [pc, #148]	; (8001088 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f01c fe30 	bl	801dc58 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_UARTEx_RxEventCallback+0x110>)
 8000ffa:	881a      	ldrh	r2, [r3, #0]
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	4413      	add	r3, r2
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001004:	801a      	strh	r2, [r3, #0]
		}
		StartM = MainBuf[newPos_uart - datasize_uart]; // 0b1001xxxx for check start & mode
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HAL_UARTEx_RxEventCallback+0x114>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <HAL_UARTEx_RxEventCallback+0x118>)
 8001014:	5cd2      	ldrb	r2, [r2, r3]
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <HAL_UARTEx_RxEventCallback+0x120>)
 8001018:	701a      	strb	r2, [r3, #0]
		chkStart = StartM >> 4; // for check "start" or nor
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_UARTEx_RxEventCallback+0x120>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	091b      	lsrs	r3, r3, #4
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_UARTEx_RxEventCallback+0x124>)
 8001024:	701a      	strb	r2, [r3, #0]
		NameM = (StartM & 15); // Check mode
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_UARTEx_RxEventCallback+0x120>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_UARTEx_RxEventCallback+0x128>)
 8001032:	701a      	strb	r2, [r3, #0]

		if (chkStart == 9){ // 0b1001
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_UARTEx_RxEventCallback+0x124>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b09      	cmp	r3, #9
 800103a:	d109      	bne.n	8001050 <HAL_UARTEx_RxEventCallback+0xe4>
			if (NameM >= 1 && NameM <= 14){ // 15 work state or not
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_UARTEx_RxEventCallback+0x128>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <HAL_UARTEx_RxEventCallback+0xe4>
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_UARTEx_RxEventCallback+0x128>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b0e      	cmp	r3, #14
 800104a:	d801      	bhi.n	8001050 <HAL_UARTEx_RxEventCallback+0xe4>
				All_mode_UARTUI();
 800104c:	f000 f828 	bl	80010a0 <_Z15All_mode_UARTUIv>
			}
		}

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001050:	2220      	movs	r2, #32
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001054:	4810      	ldr	r0, [pc, #64]	; (8001098 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001056:	f01a fd12 	bl	801ba7e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_UARTEx_RxEventCallback+0x130>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_UARTEx_RxEventCallback+0x130>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 0208 	bic.w	r2, r2, #8
 8001068:	601a      	str	r2, [r3, #0]

	} //huart USART2
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40004400 	.word	0x40004400
 8001078:	20000602 	.word	0x20000602
 800107c:	20000600 	.word	0x20000600
 8001080:	2000061a 	.word	0x2000061a
 8001084:	200005e0 	.word	0x200005e0
 8001088:	200005c0 	.word	0x200005c0
 800108c:	2000061e 	.word	0x2000061e
 8001090:	2000061c 	.word	0x2000061c
 8001094:	2000061d 	.word	0x2000061d
 8001098:	200002d4 	.word	0x200002d4
 800109c:	20000318 	.word	0x20000318

080010a0 <_Z15All_mode_UARTUIv>:

void All_mode_UARTUI()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	// NameM => 15 mode
		switch (NameM){
 80010a6:	4b98      	ldr	r3, [pc, #608]	; (8001308 <_Z15All_mode_UARTUIv+0x268>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	2b0d      	cmp	r3, #13
 80010ae:	f200 82bc 	bhi.w	800162a <_Z15All_mode_UARTUIv+0x58a>
 80010b2:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <_Z15All_mode_UARTUIv+0x18>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	080010f1 	.word	0x080010f1
 80010bc:	08001151 	.word	0x08001151
 80010c0:	08001185 	.word	0x08001185
 80010c4:	080011b9 	.word	0x080011b9
 80010c8:	08001229 	.word	0x08001229
 80010cc:	08001299 	.word	0x08001299
 80010d0:	0800133d 	.word	0x0800133d
 80010d4:	080013e5 	.word	0x080013e5
 80010d8:	08001427 	.word	0x08001427
 80010dc:	08001469 	.word	0x08001469
 80010e0:	080014ab 	.word	0x080014ab
 80010e4:	080014ed 	.word	0x080014ed
 80010e8:	08001527 	.word	0x08001527
 80010ec:	0800156b 	.word	0x0800156b
		////==============[Test Command]===========
			case 1: // 10010001 01000000 00000000 00101110
				chksum = MainBuf[newPos_uart-1];
 80010f0:	4b86      	ldr	r3, [pc, #536]	; (800130c <_Z15All_mode_UARTUIv+0x26c>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	4a86      	ldr	r2, [pc, #536]	; (8001310 <_Z15All_mode_UARTUIv+0x270>)
 80010f8:	5cd2      	ldrb	r2, [r2, r3]
 80010fa:	4b86      	ldr	r3, [pc, #536]	; (8001314 <_Z15All_mode_UARTUIv+0x274>)
 80010fc:	701a      	strb	r2, [r3, #0]
				dataF2 = MainBuf[newPos_uart-2];
 80010fe:	4b83      	ldr	r3, [pc, #524]	; (800130c <_Z15All_mode_UARTUIv+0x26c>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	3b02      	subs	r3, #2
 8001104:	4a82      	ldr	r2, [pc, #520]	; (8001310 <_Z15All_mode_UARTUIv+0x270>)
 8001106:	5cd2      	ldrb	r2, [r2, r3]
 8001108:	4b83      	ldr	r3, [pc, #524]	; (8001318 <_Z15All_mode_UARTUIv+0x278>)
 800110a:	701a      	strb	r2, [r3, #0]
				dataF1 = MainBuf[newPos_uart-3];
 800110c:	4b7f      	ldr	r3, [pc, #508]	; (800130c <_Z15All_mode_UARTUIv+0x26c>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	3b03      	subs	r3, #3
 8001112:	4a7f      	ldr	r2, [pc, #508]	; (8001310 <_Z15All_mode_UARTUIv+0x270>)
 8001114:	5cd2      	ldrb	r2, [r2, r3]
 8001116:	4b81      	ldr	r3, [pc, #516]	; (800131c <_Z15All_mode_UARTUIv+0x27c>)
 8001118:	701a      	strb	r2, [r3, #0]
				chksum2 = ~(StartM + dataF1 + dataF2);
 800111a:	4b81      	ldr	r3, [pc, #516]	; (8001320 <_Z15All_mode_UARTUIv+0x280>)
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	4b7f      	ldr	r3, [pc, #508]	; (800131c <_Z15All_mode_UARTUIv+0x27c>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b7c      	ldr	r3, [pc, #496]	; (8001318 <_Z15All_mode_UARTUIv+0x278>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	b2db      	uxtb	r3, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b7c      	ldr	r3, [pc, #496]	; (8001324 <_Z15All_mode_UARTUIv+0x284>)
 8001134:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 8001136:	4b77      	ldr	r3, [pc, #476]	; (8001314 <_Z15All_mode_UARTUIv+0x274>)
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	4b7a      	ldr	r3, [pc, #488]	; (8001324 <_Z15All_mode_UARTUIv+0x284>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	f040 8230 	bne.w	80015a4 <_Z15All_mode_UARTUIv+0x504>
					M_state = 1;
 8001144:	4b78      	ldr	r3, [pc, #480]	; (8001328 <_Z15All_mode_UARTUIv+0x288>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800114a:	f000 fa73 	bl	8001634 <_Z7xu_Uartv>
				}
				break;
 800114e:	e229      	b.n	80015a4 <_Z15All_mode_UARTUIv+0x504>
		////==============[Connect MCU]===========
			case 2: //10010010 01101101
				chksum = MainBuf[newPos_uart-1];
 8001150:	4b6e      	ldr	r3, [pc, #440]	; (800130c <_Z15All_mode_UARTUIv+0x26c>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	4a6e      	ldr	r2, [pc, #440]	; (8001310 <_Z15All_mode_UARTUIv+0x270>)
 8001158:	5cd2      	ldrb	r2, [r2, r3]
 800115a:	4b6e      	ldr	r3, [pc, #440]	; (8001314 <_Z15All_mode_UARTUIv+0x274>)
 800115c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800115e:	4b70      	ldr	r3, [pc, #448]	; (8001320 <_Z15All_mode_UARTUIv+0x280>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	43db      	mvns	r3, r3
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b71      	ldr	r3, [pc, #452]	; (800132c <_Z15All_mode_UARTUIv+0x28c>)
 8001168:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800116a:	4b6a      	ldr	r3, [pc, #424]	; (8001314 <_Z15All_mode_UARTUIv+0x274>)
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	4b6f      	ldr	r3, [pc, #444]	; (800132c <_Z15All_mode_UARTUIv+0x28c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	f040 8218 	bne.w	80015a8 <_Z15All_mode_UARTUIv+0x508>
					M_state = 2;
 8001178:	4b6b      	ldr	r3, [pc, #428]	; (8001328 <_Z15All_mode_UARTUIv+0x288>)
 800117a:	2202      	movs	r2, #2
 800117c:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800117e:	f000 fa59 	bl	8001634 <_Z7xu_Uartv>
				}
				break;
 8001182:	e211      	b.n	80015a8 <_Z15All_mode_UARTUIv+0x508>
		////==============[Disconnect MCU]===========
			case 3: //10010011 01101100
					chksum = MainBuf[newPos_uart-1];
 8001184:	4b61      	ldr	r3, [pc, #388]	; (800130c <_Z15All_mode_UARTUIv+0x26c>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	3b01      	subs	r3, #1
 800118a:	4a61      	ldr	r2, [pc, #388]	; (8001310 <_Z15All_mode_UARTUIv+0x270>)
 800118c:	5cd2      	ldrb	r2, [r2, r3]
 800118e:	4b61      	ldr	r3, [pc, #388]	; (8001314 <_Z15All_mode_UARTUIv+0x274>)
 8001190:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8001192:	4b63      	ldr	r3, [pc, #396]	; (8001320 <_Z15All_mode_UARTUIv+0x280>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	43db      	mvns	r3, r3
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b64      	ldr	r3, [pc, #400]	; (800132c <_Z15All_mode_UARTUIv+0x28c>)
 800119c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800119e:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <_Z15All_mode_UARTUIv+0x274>)
 80011a0:	781a      	ldrb	r2, [r3, #0]
 80011a2:	4b62      	ldr	r3, [pc, #392]	; (800132c <_Z15All_mode_UARTUIv+0x28c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	f040 8200 	bne.w	80015ac <_Z15All_mode_UARTUIv+0x50c>
					M_state = 3;
 80011ac:	4b5e      	ldr	r3, [pc, #376]	; (8001328 <_Z15All_mode_UARTUIv+0x288>)
 80011ae:	2203      	movs	r2, #3
 80011b0:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80011b2:	f000 fa3f 	bl	8001634 <_Z7xu_Uartv>
				}
				break;
 80011b6:	e1f9      	b.n	80015ac <_Z15All_mode_UARTUIv+0x50c>
		////==============[Angular Velo]===========
			case 4:
					chksum = MainBuf[newPos_uart-1];
 80011b8:	4b54      	ldr	r3, [pc, #336]	; (800130c <_Z15All_mode_UARTUIv+0x26c>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	3b01      	subs	r3, #1
 80011be:	4a54      	ldr	r2, [pc, #336]	; (8001310 <_Z15All_mode_UARTUIv+0x270>)
 80011c0:	5cd2      	ldrb	r2, [r2, r3]
 80011c2:	4b54      	ldr	r3, [pc, #336]	; (8001314 <_Z15All_mode_UARTUIv+0x274>)
 80011c4:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80011c6:	4b51      	ldr	r3, [pc, #324]	; (800130c <_Z15All_mode_UARTUIv+0x26c>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	3b02      	subs	r3, #2
 80011cc:	4a50      	ldr	r2, [pc, #320]	; (8001310 <_Z15All_mode_UARTUIv+0x270>)
 80011ce:	5cd2      	ldrb	r2, [r2, r3]
 80011d0:	4b51      	ldr	r3, [pc, #324]	; (8001318 <_Z15All_mode_UARTUIv+0x278>)
 80011d2:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80011d4:	4b4d      	ldr	r3, [pc, #308]	; (800130c <_Z15All_mode_UARTUIv+0x26c>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	3b03      	subs	r3, #3
 80011da:	4a4d      	ldr	r2, [pc, #308]	; (8001310 <_Z15All_mode_UARTUIv+0x270>)
 80011dc:	5cd2      	ldrb	r2, [r2, r3]
 80011de:	4b4f      	ldr	r3, [pc, #316]	; (800131c <_Z15All_mode_UARTUIv+0x27c>)
 80011e0:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[0] = dataF1;
 80011e2:	4b4e      	ldr	r3, [pc, #312]	; (800131c <_Z15All_mode_UARTUIv+0x27c>)
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	4b52      	ldr	r3, [pc, #328]	; (8001330 <_Z15All_mode_UARTUIv+0x290>)
 80011e8:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[1] = dataF2;
 80011ea:	4b4b      	ldr	r3, [pc, #300]	; (8001318 <_Z15All_mode_UARTUIv+0x278>)
 80011ec:	781a      	ldrb	r2, [r3, #0]
 80011ee:	4b50      	ldr	r3, [pc, #320]	; (8001330 <_Z15All_mode_UARTUIv+0x290>)
 80011f0:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80011f2:	4b4b      	ldr	r3, [pc, #300]	; (8001320 <_Z15All_mode_UARTUIv+0x280>)
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	4b49      	ldr	r3, [pc, #292]	; (800131c <_Z15All_mode_UARTUIv+0x27c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b46      	ldr	r3, [pc, #280]	; (8001318 <_Z15All_mode_UARTUIv+0x278>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	b2db      	uxtb	r3, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b46      	ldr	r3, [pc, #280]	; (8001324 <_Z15All_mode_UARTUIv+0x284>)
 800120c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800120e:	4b41      	ldr	r3, [pc, #260]	; (8001314 <_Z15All_mode_UARTUIv+0x274>)
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4b44      	ldr	r3, [pc, #272]	; (8001324 <_Z15All_mode_UARTUIv+0x284>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	f040 81ca 	bne.w	80015b0 <_Z15All_mode_UARTUIv+0x510>
					M_state = 4;
 800121c:	4b42      	ldr	r3, [pc, #264]	; (8001328 <_Z15All_mode_UARTUIv+0x288>)
 800121e:	2204      	movs	r2, #4
 8001220:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001222:	f000 fa07 	bl	8001634 <_Z7xu_Uartv>
				}
				break;
 8001226:	e1c3      	b.n	80015b0 <_Z15All_mode_UARTUIv+0x510>
		////==============[Angular Position]===========
			case 5:
					chksum = MainBuf[newPos_uart-1];
 8001228:	4b38      	ldr	r3, [pc, #224]	; (800130c <_Z15All_mode_UARTUIv+0x26c>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	3b01      	subs	r3, #1
 800122e:	4a38      	ldr	r2, [pc, #224]	; (8001310 <_Z15All_mode_UARTUIv+0x270>)
 8001230:	5cd2      	ldrb	r2, [r2, r3]
 8001232:	4b38      	ldr	r3, [pc, #224]	; (8001314 <_Z15All_mode_UARTUIv+0x274>)
 8001234:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 8001236:	4b35      	ldr	r3, [pc, #212]	; (800130c <_Z15All_mode_UARTUIv+0x26c>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	3b02      	subs	r3, #2
 800123c:	4a34      	ldr	r2, [pc, #208]	; (8001310 <_Z15All_mode_UARTUIv+0x270>)
 800123e:	5cd2      	ldrb	r2, [r2, r3]
 8001240:	4b35      	ldr	r3, [pc, #212]	; (8001318 <_Z15All_mode_UARTUIv+0x278>)
 8001242:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <_Z15All_mode_UARTUIv+0x26c>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	3b03      	subs	r3, #3
 800124a:	4a31      	ldr	r2, [pc, #196]	; (8001310 <_Z15All_mode_UARTUIv+0x270>)
 800124c:	5cd2      	ldrb	r2, [r2, r3]
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <_Z15All_mode_UARTUIv+0x27c>)
 8001250:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[0] = dataF1;
 8001252:	4b32      	ldr	r3, [pc, #200]	; (800131c <_Z15All_mode_UARTUIv+0x27c>)
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	4b37      	ldr	r3, [pc, #220]	; (8001334 <_Z15All_mode_UARTUIv+0x294>)
 8001258:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[1] = dataF2;
 800125a:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <_Z15All_mode_UARTUIv+0x278>)
 800125c:	781a      	ldrb	r2, [r3, #0]
 800125e:	4b35      	ldr	r3, [pc, #212]	; (8001334 <_Z15All_mode_UARTUIv+0x294>)
 8001260:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8001262:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <_Z15All_mode_UARTUIv+0x280>)
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <_Z15All_mode_UARTUIv+0x27c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <_Z15All_mode_UARTUIv+0x278>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	b2db      	uxtb	r3, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <_Z15All_mode_UARTUIv+0x284>)
 800127c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800127e:	4b25      	ldr	r3, [pc, #148]	; (8001314 <_Z15All_mode_UARTUIv+0x274>)
 8001280:	781a      	ldrb	r2, [r3, #0]
 8001282:	4b28      	ldr	r3, [pc, #160]	; (8001324 <_Z15All_mode_UARTUIv+0x284>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	f040 8194 	bne.w	80015b4 <_Z15All_mode_UARTUIv+0x514>
					M_state = 5;
 800128c:	4b26      	ldr	r3, [pc, #152]	; (8001328 <_Z15All_mode_UARTUIv+0x288>)
 800128e:	2205      	movs	r2, #5
 8001290:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001292:	f000 f9cf 	bl	8001634 <_Z7xu_Uartv>
				}
				break;
 8001296:	e18d      	b.n	80015b4 <_Z15All_mode_UARTUIv+0x514>
		////==============[Goal 1 station]===========
			case 6:
					chksum = MainBuf[newPos_uart-1];
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <_Z15All_mode_UARTUIv+0x26c>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	3b01      	subs	r3, #1
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <_Z15All_mode_UARTUIv+0x270>)
 80012a0:	5cd2      	ldrb	r2, [r2, r3]
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <_Z15All_mode_UARTUIv+0x274>)
 80012a4:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <_Z15All_mode_UARTUIv+0x26c>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	3b02      	subs	r3, #2
 80012ac:	4a18      	ldr	r2, [pc, #96]	; (8001310 <_Z15All_mode_UARTUIv+0x270>)
 80012ae:	5cd2      	ldrb	r2, [r2, r3]
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <_Z15All_mode_UARTUIv+0x278>)
 80012b2:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <_Z15All_mode_UARTUIv+0x26c>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	4a15      	ldr	r2, [pc, #84]	; (8001310 <_Z15All_mode_UARTUIv+0x270>)
 80012bc:	5cd2      	ldrb	r2, [r2, r3]
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <_Z15All_mode_UARTUIv+0x27c>)
 80012c0:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[0] = dataF1;
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <_Z15All_mode_UARTUIv+0x27c>)
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <_Z15All_mode_UARTUIv+0x298>)
 80012c8:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[1] = dataF2;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <_Z15All_mode_UARTUIv+0x278>)
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <_Z15All_mode_UARTUIv+0x298>)
 80012d0:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <_Z15All_mode_UARTUIv+0x280>)
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <_Z15All_mode_UARTUIv+0x27c>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <_Z15All_mode_UARTUIv+0x278>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <_Z15All_mode_UARTUIv+0x284>)
 80012ec:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <_Z15All_mode_UARTUIv+0x274>)
 80012f0:	781a      	ldrb	r2, [r3, #0]
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <_Z15All_mode_UARTUIv+0x284>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	f040 8186 	bne.w	8001608 <_Z15All_mode_UARTUIv+0x568>
					M_state = 6;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <_Z15All_mode_UARTUIv+0x288>)
 80012fe:	2206      	movs	r2, #6
 8001300:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001302:	f000 f997 	bl	8001634 <_Z7xu_Uartv>
				}
				break;
 8001306:	e17f      	b.n	8001608 <_Z15All_mode_UARTUIv+0x568>
 8001308:	2000061d 	.word	0x2000061d
 800130c:	20000602 	.word	0x20000602
 8001310:	200005e0 	.word	0x200005e0
 8001314:	2000061f 	.word	0x2000061f
 8001318:	20000624 	.word	0x20000624
 800131c:	20000623 	.word	0x20000623
 8001320:	2000061e 	.word	0x2000061e
 8001324:	20000621 	.word	0x20000621
 8001328:	20000625 	.word	0x20000625
 800132c:	20000620 	.word	0x20000620
 8001330:	20000604 	.word	0x20000604
 8001334:	20000608 	.word	0x20000608
 8001338:	2000060c 	.word	0x2000060c
		////==============[Goal n station]===========
			case 7:
				Nstation = MainBuf[(newPos_uart - datasize_uart)+1];
 800133c:	4b9e      	ldr	r3, [pc, #632]	; (80015b8 <_Z15All_mode_UARTUIv+0x518>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b9e      	ldr	r3, [pc, #632]	; (80015bc <_Z15All_mode_UARTUIv+0x51c>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	3301      	adds	r3, #1
 800134a:	4a9d      	ldr	r2, [pc, #628]	; (80015c0 <_Z15All_mode_UARTUIv+0x520>)
 800134c:	5cd2      	ldrb	r2, [r2, r3]
 800134e:	4b9d      	ldr	r3, [pc, #628]	; (80015c4 <_Z15All_mode_UARTUIv+0x524>)
 8001350:	701a      	strb	r2, [r3, #0]
				for(int i=2; i < Nstation+2; i++ ){
 8001352:	2302      	movs	r3, #2
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b9b      	ldr	r3, [pc, #620]	; (80015c4 <_Z15All_mode_UARTUIv+0x524>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	429a      	cmp	r2, r3
 8001360:	dc1b      	bgt.n	800139a <_Z15All_mode_UARTUIv+0x2fa>
					dataFSum += MainBuf[newPos_uart-i];
 8001362:	4b95      	ldr	r3, [pc, #596]	; (80015b8 <_Z15All_mode_UARTUIv+0x518>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	4a94      	ldr	r2, [pc, #592]	; (80015c0 <_Z15All_mode_UARTUIv+0x520>)
 800136e:	5cd2      	ldrb	r2, [r2, r3]
 8001370:	4b95      	ldr	r3, [pc, #596]	; (80015c8 <_Z15All_mode_UARTUIv+0x528>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4413      	add	r3, r2
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b93      	ldr	r3, [pc, #588]	; (80015c8 <_Z15All_mode_UARTUIv+0x528>)
 800137a:	701a      	strb	r2, [r3, #0]
					Set_Goal_nSta[i-2] = MainBuf[newPos_uart-i];
 800137c:	4b8e      	ldr	r3, [pc, #568]	; (80015b8 <_Z15All_mode_UARTUIv+0x518>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	1ad2      	subs	r2, r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3b02      	subs	r3, #2
 800138a:	498d      	ldr	r1, [pc, #564]	; (80015c0 <_Z15All_mode_UARTUIv+0x520>)
 800138c:	5c89      	ldrb	r1, [r1, r2]
 800138e:	4a8f      	ldr	r2, [pc, #572]	; (80015cc <_Z15All_mode_UARTUIv+0x52c>)
 8001390:	54d1      	strb	r1, [r2, r3]
				for(int i=2; i < Nstation+2; i++ ){
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3301      	adds	r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	e7dd      	b.n	8001356 <_Z15All_mode_UARTUIv+0x2b6>
				}
				chksum = MainBuf[newPos_uart-1];
 800139a:	4b87      	ldr	r3, [pc, #540]	; (80015b8 <_Z15All_mode_UARTUIv+0x518>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	3b01      	subs	r3, #1
 80013a0:	4a87      	ldr	r2, [pc, #540]	; (80015c0 <_Z15All_mode_UARTUIv+0x520>)
 80013a2:	5cd2      	ldrb	r2, [r2, r3]
 80013a4:	4b8a      	ldr	r3, [pc, #552]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 80013a6:	701a      	strb	r2, [r3, #0]
				chksum3 = ~(StartM + Nstation + dataFSum);
 80013a8:	4b8a      	ldr	r3, [pc, #552]	; (80015d4 <_Z15All_mode_UARTUIv+0x534>)
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	4b85      	ldr	r3, [pc, #532]	; (80015c4 <_Z15All_mode_UARTUIv+0x524>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b84      	ldr	r3, [pc, #528]	; (80015c8 <_Z15All_mode_UARTUIv+0x528>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4413      	add	r3, r2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <_Z15All_mode_UARTUIv+0x538>)
 80013c2:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum3){
 80013c4:	4b82      	ldr	r3, [pc, #520]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	4b83      	ldr	r3, [pc, #524]	; (80015d8 <_Z15All_mode_UARTUIv+0x538>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 811d 	bne.w	800160c <_Z15All_mode_UARTUIv+0x56c>
					M_state = 7;
 80013d2:	4b82      	ldr	r3, [pc, #520]	; (80015dc <_Z15All_mode_UARTUIv+0x53c>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					dataFSum = 0;
 80013d8:	4b7b      	ldr	r3, [pc, #492]	; (80015c8 <_Z15All_mode_UARTUIv+0x528>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
					xu_Uart();
 80013de:	f000 f929 	bl	8001634 <_Z7xu_Uartv>
				}
				break;
 80013e2:	e113      	b.n	800160c <_Z15All_mode_UARTUIv+0x56c>
		////==============[Go to Goal station]===========
			case 8: //10011000 01100111
				chksum = MainBuf[newPos_uart-1];
 80013e4:	4b74      	ldr	r3, [pc, #464]	; (80015b8 <_Z15All_mode_UARTUIv+0x518>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	4a75      	ldr	r2, [pc, #468]	; (80015c0 <_Z15All_mode_UARTUIv+0x520>)
 80013ec:	5cd2      	ldrb	r2, [r2, r3]
 80013ee:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 80013f0:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80013f2:	4b78      	ldr	r3, [pc, #480]	; (80015d4 <_Z15All_mode_UARTUIv+0x534>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b79      	ldr	r3, [pc, #484]	; (80015e0 <_Z15All_mode_UARTUIv+0x540>)
 80013fc:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80013fe:	4b74      	ldr	r3, [pc, #464]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	4b77      	ldr	r3, [pc, #476]	; (80015e0 <_Z15All_mode_UARTUIv+0x540>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	f040 8102 	bne.w	8001610 <_Z15All_mode_UARTUIv+0x570>
					M_state = 8;
 800140c:	4b73      	ldr	r3, [pc, #460]	; (80015dc <_Z15All_mode_UARTUIv+0x53c>)
 800140e:	2208      	movs	r2, #8
 8001410:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001412:	f000 f90f 	bl	8001634 <_Z7xu_Uartv>
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2 ,1000);
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	2202      	movs	r2, #2
 800141c:	4971      	ldr	r1, [pc, #452]	; (80015e4 <_Z15All_mode_UARTUIv+0x544>)
 800141e:	4872      	ldr	r0, [pc, #456]	; (80015e8 <_Z15All_mode_UARTUIv+0x548>)
 8001420:	f01a fa9b 	bl	801b95a <HAL_UART_Transmit>
				}
				break;
 8001424:	e0f4      	b.n	8001610 <_Z15All_mode_UARTUIv+0x570>
		////==============[Request Current station]===========
			case 9: //10011001 01100110
				chksum = MainBuf[newPos_uart-1];
 8001426:	4b64      	ldr	r3, [pc, #400]	; (80015b8 <_Z15All_mode_UARTUIv+0x518>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	3b01      	subs	r3, #1
 800142c:	4a64      	ldr	r2, [pc, #400]	; (80015c0 <_Z15All_mode_UARTUIv+0x520>)
 800142e:	5cd2      	ldrb	r2, [r2, r3]
 8001430:	4b67      	ldr	r3, [pc, #412]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 8001432:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001434:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <_Z15All_mode_UARTUIv+0x534>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	43db      	mvns	r3, r3
 800143a:	b2da      	uxtb	r2, r3
 800143c:	4b68      	ldr	r3, [pc, #416]	; (80015e0 <_Z15All_mode_UARTUIv+0x540>)
 800143e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001440:	4b63      	ldr	r3, [pc, #396]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	4b66      	ldr	r3, [pc, #408]	; (80015e0 <_Z15All_mode_UARTUIv+0x540>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	f040 80e3 	bne.w	8001614 <_Z15All_mode_UARTUIv+0x574>
					M_state = 9;
 800144e:	4b63      	ldr	r3, [pc, #396]	; (80015dc <_Z15All_mode_UARTUIv+0x53c>)
 8001450:	2209      	movs	r2, #9
 8001452:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001454:	f000 f8ee 	bl	8001634 <_Z7xu_Uartv>
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_sta, 4 ,1000);
 8001458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145c:	2204      	movs	r2, #4
 800145e:	4963      	ldr	r1, [pc, #396]	; (80015ec <_Z15All_mode_UARTUIv+0x54c>)
 8001460:	4861      	ldr	r0, [pc, #388]	; (80015e8 <_Z15All_mode_UARTUIv+0x548>)
 8001462:	f01a fa7a 	bl	801b95a <HAL_UART_Transmit>
				}
				break;
 8001466:	e0d5      	b.n	8001614 <_Z15All_mode_UARTUIv+0x574>
		////==============[Request Angular Position]===========
			case 10: //10011010 01100101
				chksum = MainBuf[newPos_uart-1];
 8001468:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <_Z15All_mode_UARTUIv+0x518>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	3b01      	subs	r3, #1
 800146e:	4a54      	ldr	r2, [pc, #336]	; (80015c0 <_Z15All_mode_UARTUIv+0x520>)
 8001470:	5cd2      	ldrb	r2, [r2, r3]
 8001472:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 8001474:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001476:	4b57      	ldr	r3, [pc, #348]	; (80015d4 <_Z15All_mode_UARTUIv+0x534>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	43db      	mvns	r3, r3
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b58      	ldr	r3, [pc, #352]	; (80015e0 <_Z15All_mode_UARTUIv+0x540>)
 8001480:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001482:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	4b56      	ldr	r3, [pc, #344]	; (80015e0 <_Z15All_mode_UARTUIv+0x540>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	f040 80c4 	bne.w	8001618 <_Z15All_mode_UARTUIv+0x578>
					M_state = 10;
 8001490:	4b52      	ldr	r3, [pc, #328]	; (80015dc <_Z15All_mode_UARTUIv+0x53c>)
 8001492:	220a      	movs	r2, #10
 8001494:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001496:	f000 f8cd 	bl	8001634 <_Z7xu_Uartv>
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_AngPosi, 4 ,1000);
 800149a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149e:	2204      	movs	r2, #4
 80014a0:	4953      	ldr	r1, [pc, #332]	; (80015f0 <_Z15All_mode_UARTUIv+0x550>)
 80014a2:	4851      	ldr	r0, [pc, #324]	; (80015e8 <_Z15All_mode_UARTUIv+0x548>)
 80014a4:	f01a fa59 	bl	801b95a <HAL_UART_Transmit>
				}
				break;
 80014a8:	e0b6      	b.n	8001618 <_Z15All_mode_UARTUIv+0x578>
		////==============[Request MAX Angular velo]===========
			case 11: //10011011 01100100
				chksum = MainBuf[newPos_uart-1];
 80014aa:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <_Z15All_mode_UARTUIv+0x518>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	4a43      	ldr	r2, [pc, #268]	; (80015c0 <_Z15All_mode_UARTUIv+0x520>)
 80014b2:	5cd2      	ldrb	r2, [r2, r3]
 80014b4:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 80014b6:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80014b8:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <_Z15All_mode_UARTUIv+0x534>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	43db      	mvns	r3, r3
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <_Z15All_mode_UARTUIv+0x540>)
 80014c2:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80014c4:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	4b45      	ldr	r3, [pc, #276]	; (80015e0 <_Z15All_mode_UARTUIv+0x540>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	f040 80a5 	bne.w	800161c <_Z15All_mode_UARTUIv+0x57c>
					M_state = 11;
 80014d2:	4b42      	ldr	r3, [pc, #264]	; (80015dc <_Z15All_mode_UARTUIv+0x53c>)
 80014d4:	220b      	movs	r2, #11
 80014d6:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80014d8:	f000 f8ac 	bl	8001634 <_Z7xu_Uartv>
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_MaxVelo, 4 ,1000);
 80014dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e0:	2204      	movs	r2, #4
 80014e2:	4944      	ldr	r1, [pc, #272]	; (80015f4 <_Z15All_mode_UARTUIv+0x554>)
 80014e4:	4840      	ldr	r0, [pc, #256]	; (80015e8 <_Z15All_mode_UARTUIv+0x548>)
 80014e6:	f01a fa38 	bl	801b95a <HAL_UART_Transmit>
				}
				break;
 80014ea:	e097      	b.n	800161c <_Z15All_mode_UARTUIv+0x57c>
		////==============[Enable end effector]================
			case 12: //// 12  10011100 01100011
				chksum = MainBuf[newPos_uart-1];
 80014ec:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <_Z15All_mode_UARTUIv+0x518>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	4a33      	ldr	r2, [pc, #204]	; (80015c0 <_Z15All_mode_UARTUIv+0x520>)
 80014f4:	5cd2      	ldrb	r2, [r2, r3]
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 80014f8:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80014fa:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <_Z15All_mode_UARTUIv+0x534>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	43db      	mvns	r3, r3
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <_Z15All_mode_UARTUIv+0x540>)
 8001504:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001506:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	4b35      	ldr	r3, [pc, #212]	; (80015e0 <_Z15All_mode_UARTUIv+0x540>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	f040 8086 	bne.w	8001620 <_Z15All_mode_UARTUIv+0x580>
					M_state = 12;
 8001514:	4b31      	ldr	r3, [pc, #196]	; (80015dc <_Z15All_mode_UARTUIv+0x53c>)
 8001516:	220c      	movs	r2, #12
 8001518:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 1;
 800151a:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <_Z15All_mode_UARTUIv+0x558>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001520:	f000 f888 	bl	8001634 <_Z7xu_Uartv>
				}
				break;
 8001524:	e07c      	b.n	8001620 <_Z15All_mode_UARTUIv+0x580>
		////==============[Disable end effector]================
			case 13: // 13 10011101 01100010
				chksum = MainBuf[newPos_uart-1];
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <_Z15All_mode_UARTUIv+0x518>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	3b01      	subs	r3, #1
 800152c:	4a24      	ldr	r2, [pc, #144]	; (80015c0 <_Z15All_mode_UARTUIv+0x520>)
 800152e:	5cd2      	ldrb	r2, [r2, r3]
 8001530:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 8001532:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <_Z15All_mode_UARTUIv+0x534>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	43db      	mvns	r3, r3
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <_Z15All_mode_UARTUIv+0x540>)
 800153e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 8001542:	781a      	ldrb	r2, [r3, #0]
 8001544:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <_Z15All_mode_UARTUIv+0x540>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d16b      	bne.n	8001624 <_Z15All_mode_UARTUIv+0x584>
					M_state = 13;
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <_Z15All_mode_UARTUIv+0x53c>)
 800154e:	220d      	movs	r2, #13
 8001550:	701a      	strb	r2, [r3, #0]

					trig_efftRead = 0;
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <_Z15All_mode_UARTUIv+0x55c>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
					flag_efftRead = 0;
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <_Z15All_mode_UARTUIv+0x560>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 0;
 800155e:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <_Z15All_mode_UARTUIv+0x558>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 8001564:	f000 f866 	bl	8001634 <_Z7xu_Uartv>
				}
				break;
 8001568:	e05c      	b.n	8001624 <_Z15All_mode_UARTUIv+0x584>
		////==============[Set Home]================
			case 14: //10011110 01100001
				chksum = MainBuf[newPos_uart-1];
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <_Z15All_mode_UARTUIv+0x518>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	3b01      	subs	r3, #1
 8001570:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <_Z15All_mode_UARTUIv+0x520>)
 8001572:	5cd2      	ldrb	r2, [r2, r3]
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 8001576:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <_Z15All_mode_UARTUIv+0x534>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	43db      	mvns	r3, r3
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <_Z15All_mode_UARTUIv+0x540>)
 8001582:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <_Z15All_mode_UARTUIv+0x530>)
 8001586:	781a      	ldrb	r2, [r3, #0]
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <_Z15All_mode_UARTUIv+0x540>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d14b      	bne.n	8001628 <_Z15All_mode_UARTUIv+0x588>
					M_state = 14;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <_Z15All_mode_UARTUIv+0x53c>)
 8001592:	220e      	movs	r2, #14
 8001594:	701a      	strb	r2, [r3, #0]
					//act as set zero interrupt
					TargetDeg = 0;
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <_Z15All_mode_UARTUIv+0x564>)
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
					xu_Uart();
 800159e:	f000 f849 	bl	8001634 <_Z7xu_Uartv>
				}
				break;
 80015a2:	e041      	b.n	8001628 <_Z15All_mode_UARTUIv+0x588>
				break;
 80015a4:	bf00      	nop
 80015a6:	e040      	b.n	800162a <_Z15All_mode_UARTUIv+0x58a>
				break;
 80015a8:	bf00      	nop
 80015aa:	e03e      	b.n	800162a <_Z15All_mode_UARTUIv+0x58a>
				break;
 80015ac:	bf00      	nop
 80015ae:	e03c      	b.n	800162a <_Z15All_mode_UARTUIv+0x58a>
				break;
 80015b0:	bf00      	nop
 80015b2:	e03a      	b.n	800162a <_Z15All_mode_UARTUIv+0x58a>
				break;
 80015b4:	bf00      	nop
 80015b6:	e038      	b.n	800162a <_Z15All_mode_UARTUIv+0x58a>
 80015b8:	20000602 	.word	0x20000602
 80015bc:	2000061a 	.word	0x2000061a
 80015c0:	200005e0 	.word	0x200005e0
 80015c4:	20000626 	.word	0x20000626
 80015c8:	20000627 	.word	0x20000627
 80015cc:	20000610 	.word	0x20000610
 80015d0:	2000061f 	.word	0x2000061f
 80015d4:	2000061e 	.word	0x2000061e
 80015d8:	20000622 	.word	0x20000622
 80015dc:	20000625 	.word	0x20000625
 80015e0:	20000620 	.word	0x20000620
 80015e4:	20000034 	.word	0x20000034
 80015e8:	200002d4 	.word	0x200002d4
 80015ec:	20000038 	.word	0x20000038
 80015f0:	2000003c 	.word	0x2000003c
 80015f4:	20000040 	.word	0x20000040
 80015f8:	200005b3 	.word	0x200005b3
 80015fc:	200005b5 	.word	0x200005b5
 8001600:	200005b4 	.word	0x200005b4
 8001604:	20000018 	.word	0x20000018
				break;
 8001608:	bf00      	nop
 800160a:	e00e      	b.n	800162a <_Z15All_mode_UARTUIv+0x58a>
				break;
 800160c:	bf00      	nop
 800160e:	e00c      	b.n	800162a <_Z15All_mode_UARTUIv+0x58a>
				break;
 8001610:	bf00      	nop
 8001612:	e00a      	b.n	800162a <_Z15All_mode_UARTUIv+0x58a>
				break;
 8001614:	bf00      	nop
 8001616:	e008      	b.n	800162a <_Z15All_mode_UARTUIv+0x58a>
				break;
 8001618:	bf00      	nop
 800161a:	e006      	b.n	800162a <_Z15All_mode_UARTUIv+0x58a>
				break;
 800161c:	bf00      	nop
 800161e:	e004      	b.n	800162a <_Z15All_mode_UARTUIv+0x58a>
				break;
 8001620:	bf00      	nop
 8001622:	e002      	b.n	800162a <_Z15All_mode_UARTUIv+0x58a>
				break;
 8001624:	bf00      	nop
 8001626:	e000      	b.n	800162a <_Z15All_mode_UARTUIv+0x58a>
				break;
 8001628:	bf00      	nop
			}
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop

08001634 <_Z7xu_Uartv>:

void xu_Uart(){
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8001638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163c:	2202      	movs	r2, #2
 800163e:	4903      	ldr	r1, [pc, #12]	; (800164c <_Z7xu_Uartv+0x18>)
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <_Z7xu_Uartv+0x1c>)
 8001642:	f01a f98a 	bl	801b95a <HAL_UART_Transmit>
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000030 	.word	0x20000030
 8001650:	200002d4 	.word	0x200002d4

08001654 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001654:	b5b0      	push	{r4, r5, r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7fe ff60 	bl	8000524 <__aeabi_i2d>
 8001664:	4604      	mov	r4, r0
 8001666:	460d      	mov	r5, r1
 8001668:	6838      	ldr	r0, [r7, #0]
 800166a:	f7fe ff5b 	bl	8000524 <__aeabi_i2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	ec43 2b11 	vmov	d1, r2, r3
 8001676:	ec45 4b10 	vmov	d0, r4, r5
 800167a:	f01b fb55 	bl	801cd28 <pow>
 800167e:	eeb0 7a40 	vmov.f32	s14, s0
 8001682:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001686:	eeb0 0a47 	vmov.f32	s0, s14
 800168a:	eef0 0a67 	vmov.f32	s1, s15
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bdb0      	pop	{r4, r5, r7, pc}

08001694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001698:	b0eb      	sub	sp, #428	; 0x1ac
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/////assign  Matrix  element value  //////////
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 800169c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80016a0:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 80016a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80016ae:	f5a3 70c2 	sub.w	r0, r3, #388	; 0x184
 80016b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016b6:	461a      	mov	r2, r3
 80016b8:	49ef      	ldr	r1, [pc, #956]	; (8001a78 <main+0x3e4>)
 80016ba:	f002 fa64 	bl	8003b86 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 80016be:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80016c2:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 80016c6:	4bed      	ldr	r3, [pc, #948]	; (8001a7c <main+0x3e8>)
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fa71 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80016da:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80016de:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80016e2:	4be7      	ldr	r3, [pc, #924]	; (8001a80 <main+0x3ec>)
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016ea:	4619      	mov	r1, r3
 80016ec:	f002 fa66 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 ,    1    ,      Dt    ,
 80016f0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80016f4:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001702:	4619      	mov	r1, r3
 8001704:	f002 fa5a 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001708:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800170c:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8001710:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800171a:	4619      	mov	r1, r3
 800171c:	f002 fa4e 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001720:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001724:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 8001728:	4bd4      	ldr	r3, [pc, #848]	; (8001a7c <main+0x3e8>)
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001730:	4619      	mov	r1, r3
 8001732:	f002 fa43 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 ,    0    ,      1     ;
 8001736:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800173a:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001748:	4619      	mov	r1, r3
 800174a:	f002 fa37 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 800174e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001752:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001760:	4619      	mov	r1, r3
 8001762:	f002 fa2b 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001766:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800176a:	f5a3 72aa 	sub.w	r2, r3, #340	; 0x154
 800176e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001778:	4619      	mov	r1, r3
 800177a:	f002 fa1f 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	4618      	mov	r0, r3
 8001784:	f002 fa0e 	bl	8003ba4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		X << 0 ,    0    ,      0     ;
 8001788:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800178c:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800179a:	f5a3 70a8 	sub.w	r0, r3, #336	; 0x150
 800179e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017a2:	461a      	mov	r2, r3
 80017a4:	49b7      	ldr	r1, [pc, #732]	; (8001a84 <main+0x3f0>)
 80017a6:	f002 fa79 	bl	8003c9c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 80017aa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80017ae:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80017bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fa86 	bl	8003cd4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 80017c8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80017cc:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017da:	4619      	mov	r1, r3
 80017dc:	f002 fa7a 	bl	8003cd4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 80017e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 fa68 	bl	8003cba <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		X1 << 0 ,    0    ,      0     ;
 80017ea:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80017ee:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80017fc:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8001800:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001804:	461a      	mov	r2, r3
 8001806:	49a0      	ldr	r1, [pc, #640]	; (8001a88 <main+0x3f4>)
 8001808:	f002 fa48 	bl	8003c9c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 800180c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001810:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800181e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f002 fa55 	bl	8003cd4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 800182a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800182e:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800183c:	4619      	mov	r1, r3
 800183e:	f002 fa49 	bl	8003cd4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001842:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001846:	4618      	mov	r0, r3
 8001848:	f002 fa37 	bl	8003cba <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>


		P << 0.000001 , 			0 	 , 			0     ,
 800184c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001850:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001854:	4b8d      	ldr	r3, [pc, #564]	; (8001a8c <main+0x3f8>)
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800185c:	f5a3 708c 	sub.w	r0, r3, #280	; 0x118
 8001860:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001864:	461a      	mov	r2, r3
 8001866:	498a      	ldr	r1, [pc, #552]	; (8001a90 <main+0x3fc>)
 8001868:	f002 f98d 	bl	8003b86 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 800186c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001870:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800187e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f002 f999 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 800188a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800188e:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800189c:	4619      	mov	r1, r3
 800189e:	f002 f98d 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80018a2:	4602      	mov	r2, r0
		     0 		 ,    0.000001    ,  		0     ,
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80018ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018b0:	4619      	mov	r1, r3
 80018b2:	4610      	mov	r0, r2
 80018b4:	f002 f982 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4b74      	ldr	r3, [pc, #464]	; (8001a8c <main+0x3f8>)
 80018bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80018c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018c4:	4619      	mov	r1, r3
 80018c6:	4610      	mov	r0, r2
 80018c8:	f002 f978 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018d6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80018da:	4619      	mov	r1, r3
 80018dc:	4610      	mov	r0, r2
 80018de:	f002 f96d 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80018e2:	4602      	mov	r2, r0
			 0 		 ,    		0    ,      0.000001     ;
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80018ec:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80018f0:	4619      	mov	r1, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f002 f962 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001902:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001906:	4619      	mov	r1, r3
 8001908:	4610      	mov	r0, r2
 800190a:	f002 f957 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 800190e:	4602      	mov	r2, r0
 8001910:	4b5e      	ldr	r3, [pc, #376]	; (8001a8c <main+0x3f8>)
 8001912:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001916:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800191a:	4619      	mov	r1, r3
 800191c:	4610      	mov	r0, r2
 800191e:	f002 f94d 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		P << 0.000001 , 			0 	 , 			0     ,
 8001922:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001926:	4618      	mov	r0, r3
 8001928:	f002 f93c 	bl	8003ba4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		O << 0 , 	0 	 , 		0     ,
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001934:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8001938:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800193c:	461a      	mov	r2, r3
 800193e:	4955      	ldr	r1, [pc, #340]	; (8001a94 <main+0x400>)
 8001940:	f002 f921 	bl	8003b86 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800194c:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001950:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f002 f930 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 800195c:	4602      	mov	r2, r0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001966:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800196a:	4619      	mov	r1, r3
 800196c:	4610      	mov	r0, r2
 800196e:	f002 f925 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001972:	4602      	mov	r2, r0
		     0 ,    0    ,  	0     ,
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800197c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001980:	4619      	mov	r1, r3
 8001982:	4610      	mov	r0, r2
 8001984:	f002 f91a 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001988:	4602      	mov	r2, r0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001992:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001996:	4619      	mov	r1, r3
 8001998:	4610      	mov	r0, r2
 800199a:	f002 f90f 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 800199e:	4602      	mov	r2, r0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80019a8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019ac:	4619      	mov	r1, r3
 80019ae:	4610      	mov	r0, r2
 80019b0:	f002 f904 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80019b4:	4602      	mov	r2, r0
			 0 ,    0    ,      0     ;
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80019be:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019c2:	4619      	mov	r1, r3
 80019c4:	4610      	mov	r0, r2
 80019c6:	f002 f8f9 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80019ca:	4602      	mov	r2, r0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80019d4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019d8:	4619      	mov	r1, r3
 80019da:	4610      	mov	r0, r2
 80019dc:	f002 f8ee 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80019ea:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4610      	mov	r0, r2
 80019f2:	f002 f8e3 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		O << 0 , 	0 	 , 		0     ,
 80019f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 f8d2 	bl	8003ba4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		I << 1 , 0 , 0 ,
 8001a00:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a04:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001a08:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8001a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a10:	461a      	mov	r2, r3
 8001a12:	4921      	ldr	r1, [pc, #132]	; (8001a98 <main+0x404>)
 8001a14:	f002 f8b7 	bl	8003b86 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001a20:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001a24:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 f8c6 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001a3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4610      	mov	r0, r2
 8001a42:	f002 f8bb 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a46:	4602      	mov	r2, r0
			 0 , 1 , 0 ,
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a50:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001a54:	4619      	mov	r1, r3
 8001a56:	4610      	mov	r0, r2
 8001a58:	f002 f8b0 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001a66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	f002 f8a5 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a72:	4602      	mov	r2, r0
 8001a74:	e012      	b.n	8001a9c <main+0x408>
 8001a76:	bf00      	nop
 8001a78:	20000440 	.word	0x20000440
 8001a7c:	3a83126f 	.word	0x3a83126f
 8001a80:	350637bd 	.word	0x350637bd
 8001a84:	20000528 	.word	0x20000528
 8001a88:	20000534 	.word	0x20000534
 8001a8c:	358637bd 	.word	0x358637bd
 8001a90:	20000464 	.word	0x20000464
 8001a94:	20000488 	.word	0x20000488
 8001a98:	200004ac 	.word	0x200004ac
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001aa4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4610      	mov	r0, r2
 8001aac:	f002 f886 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ab0:	4602      	mov	r2, r0
			 0 , 0 , 1 ;
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001aba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f002 f87b 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ad0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f002 f870 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ae2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001ae6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001aea:	4619      	mov	r1, r3
 8001aec:	4610      	mov	r0, r2
 8001aee:	f002 f865 	bl	8003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		I << 1 , 0 , 0 ,
 8001af2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 f854 	bl	8003ba4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		R << pow(10,1); ;
 8001afc:	2101      	movs	r1, #1
 8001afe:	200a      	movs	r0, #10
 8001b00:	f7ff fda8 	bl	8001654 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b04:	ec53 2b10 	vmov	r2, r3, d0
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff f824 	bl	8000b58 <__aeabi_d2f>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001b16:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001b1a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001b1e:	461a      	mov	r2, r3
 8001b20:	49b8      	ldr	r1, [pc, #736]	; (8001e04 <main+0x770>)
 8001b22:	f002 f947 	bl	8003db4 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001b26:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 f951 	bl	8003dd2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		D << 0 ;
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b38:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8001b3c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001b40:	461a      	mov	r2, r3
 8001b42:	49b1      	ldr	r1, [pc, #708]	; (8001e08 <main+0x774>)
 8001b44:	f002 f936 	bl	8003db4 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001b48:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f002 f940 	bl	8003dd2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		B << 0 , 0 , 0 ;
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001b5a:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 8001b5e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001b62:	461a      	mov	r2, r3
 8001b64:	49a9      	ldr	r1, [pc, #676]	; (8001e0c <main+0x778>)
 8001b66:	f002 f899 	bl	8003c9c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001b72:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8001b76:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 f8a9 	bl	8003cd4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b82:	4602      	mov	r2, r0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001b8c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001b90:	4619      	mov	r1, r3
 8001b92:	4610      	mov	r0, r2
 8001b94:	f002 f89e 	bl	8003cd4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001b98:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 f88c 	bl	8003cba <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		C << 1 , 0 , 0 ;
 8001ba2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ba6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001baa:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8001bae:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4996      	ldr	r1, [pc, #600]	; (8001e10 <main+0x77c>)
 8001bb6:	f002 f918 	bl	8003dea <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001bc2:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8001bc6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f002 f927 	bl	8003e20 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001bdc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f002 f91c 	bl	8003e20 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001be8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 f90b 	bl	8003e08 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>

		G << (Dt*Dt)/2 , Dt , 1 ;
 8001bf2:	4b88      	ldr	r3, [pc, #544]	; (8001e14 <main+0x780>)
 8001bf4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001bf8:	f507 70c6 	add.w	r0, r7, #396	; 0x18c
 8001bfc:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001c00:	461a      	mov	r2, r3
 8001c02:	4985      	ldr	r1, [pc, #532]	; (8001e18 <main+0x784>)
 8001c04:	f002 f84a 	bl	8003c9c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001c08:	4b84      	ldr	r3, [pc, #528]	; (8001e1c <main+0x788>)
 8001c0a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c0e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001c12:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 f85b 	bl	8003cd4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c24:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c28:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4610      	mov	r0, r2
 8001c30:	f002 f850 	bl	8003cd4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001c34:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f002 f83e 	bl	8003cba <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c3e:	f014 f991 	bl	8015f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c42:	f000 f913 	bl	8001e6c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c46:	f000 fb8b 	bl	8002360 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001c4a:	f000 fb59 	bl	8002300 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001c4e:	f000 f97f 	bl	8001f50 <_ZL12MX_I2C1_Initv>
  MX_TIM11_Init();
 8001c52:	f000 fafd 	bl	8002250 <_ZL13MX_TIM11_Initv>
  MX_TIM2_Init();
 8001c56:	f000 f9e3 	bl	8002020 <_ZL12MX_TIM2_Initv>
  MX_TIM4_Init();
 8001c5a:	f000 fa69 	bl	8002130 <_ZL12MX_TIM4_Initv>
  MX_I2C3_Init();
 8001c5e:	f000 f9ab 	bl	8001fb8 <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 8001c62:	f000 fb1d 	bl	80022a0 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8001c66:	486e      	ldr	r0, [pc, #440]	; (8001e20 <main+0x78c>)
 8001c68:	f018 fca2 	bl	801a5b0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start(&htim2); // Speed
 8001c6c:	486d      	ldr	r0, [pc, #436]	; (8001e24 <main+0x790>)
 8001c6e:	f018 fc45 	bl	801a4fc <HAL_TIM_Base_Start>
    //HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,CAPTURENUM);

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8001c72:	486d      	ldr	r0, [pc, #436]	; (8001e28 <main+0x794>)
 8001c74:	f018 fc42 	bl	801a4fc <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001c78:	2100      	movs	r1, #0
 8001c7a:	486b      	ldr	r0, [pc, #428]	; (8001e28 <main+0x794>)
 8001c7c:	f018 fd54 	bl	801a728 <HAL_TIM_PWM_Start>

    //UART UI
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001c80:	2220      	movs	r2, #32
 8001c82:	496a      	ldr	r1, [pc, #424]	; (8001e2c <main+0x798>)
 8001c84:	486a      	ldr	r0, [pc, #424]	; (8001e30 <main+0x79c>)
 8001c86:	f019 fefa 	bl	801ba7e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001c8a:	4b6a      	ldr	r3, [pc, #424]	; (8001e34 <main+0x7a0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6819      	ldr	r1, [r3, #0]
 8001c90:	4b68      	ldr	r3, [pc, #416]	; (8001e34 <main+0x7a0>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	f021 0308 	bic.w	r3, r1, #8
 8001c98:	6013      	str	r3, [r2, #0]

    //MCP23017 setting init
    HAL_Delay(50);
 8001c9a:	2032      	movs	r0, #50	; 0x32
 8001c9c:	f014 f9d4 	bl	8016048 <HAL_Delay>
    IOExpenderInit();
 8001ca0:	f001 fd58 	bl	8003754 <_Z14IOExpenderInitv>
	      ///// IT test
	 //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  	  ///// GrandState ///////////////////

	  	  if(micros() - TimeStampGrand >= 100){
 8001ca4:	f001 feb2 	bl	8003a0c <_Z6microsv>
 8001ca8:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <main+0x7a4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2200      	movs	r2, #0
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	61fa      	str	r2, [r7, #28]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	1ac4      	subs	r4, r0, r3
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	eb61 0503 	sbc.w	r5, r1, r3
 8001cbc:	2c64      	cmp	r4, #100	; 0x64
 8001cbe:	f175 0300 	sbcs.w	r3, r5, #0
 8001cc2:	bf2c      	ite	cs
 8001cc4:	2301      	movcs	r3, #1
 8001cc6:	2300      	movcc	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <main+0x64a>
	  		TimeStampGrand = micros();
 8001cce:	f001 fe9d 	bl	8003a0c <_Z6microsv>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4b58      	ldr	r3, [pc, #352]	; (8001e38 <main+0x7a4>)
 8001cd8:	601a      	str	r2, [r3, #0]
	  		 GrandStatumix();
 8001cda:	f000 fc1b 	bl	8002514 <_Z13GrandStatumixv>
	  		//CurrentEn = BinPosXI * 0.006136;
	  	  }

	  	  // Encoder I2CRead

	  	  if (micros()-timeStampSR >= 1000)      // don't use 1
 8001cde:	f001 fe95 	bl	8003a0c <_Z6microsv>
 8001ce2:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <main+0x7a8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	617a      	str	r2, [r7, #20]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	ebb0 0803 	subs.w	r8, r0, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	eb61 0903 	sbc.w	r9, r1, r3
 8001cf8:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 8001cfc:	f179 0300 	sbcs.w	r3, r9, #0
 8001d00:	bf2c      	ite	cs
 8001d02:	2301      	movcs	r3, #1
 8001d04:	2300      	movcc	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <main+0x68a>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 8001d0c:	f001 fe7e 	bl	8003a0c <_Z6microsv>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4b49      	ldr	r3, [pc, #292]	; (8001e3c <main+0x7a8>)
 8001d16:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 8001d18:	4a49      	ldr	r2, [pc, #292]	; (8001e40 <main+0x7ac>)
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	7013      	strb	r3, [r2, #0]
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 8001d1e:	4849      	ldr	r0, [pc, #292]	; (8001e44 <main+0x7b0>)
 8001d20:	f001 fd2e 	bl	8003780 <_Z14AbsEncI2CReadxPh>

	  	  ///////////////////// 2KHz change PWM PB6////////////////////

	  	  if(micros() - timestampPWM >= 500){
 8001d24:	f001 fe72 	bl	8003a0c <_Z6microsv>
 8001d28:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <main+0x7b4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	60fa      	str	r2, [r7, #12]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	ebb0 0a03 	subs.w	sl, r0, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	eb61 0b03 	sbc.w	fp, r1, r3
 8001d3e:	f5ba 7ffa 	cmp.w	sl, #500	; 0x1f4
 8001d42:	f17b 0300 	sbcs.w	r3, fp, #0
 8001d46:	bf2c      	ite	cs
 8001d48:	2301      	movcs	r3, #1
 8001d4a:	2300      	movcc	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01a      	beq.n	8001d88 <main+0x6f4>
	  		  	  timestampPWM = micros(); // stamp
 8001d52:	f001 fe5b 	bl	8003a0c <_Z6microsv>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <main+0x7b4>)
 8001d5c:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut); // dutycycle
 8001d5e:	4b3b      	ldr	r3, [pc, #236]	; (8001e4c <main+0x7b8>)
 8001d60:	8819      	ldrh	r1, [r3, #0]
 8001d62:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <main+0x794>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	460b      	mov	r3, r1
 8001d68:	6353      	str	r3, [r2, #52]	; 0x34
	  	  		  //__HAL_TIM_SET_PRESCALER(&htim4, pscalr); // Set freq of pwm
	  	  		  //ADC_Target = ADCFeedx[1].datt;
	  	  		if (mot_dirctn == 0){
 8001d6a:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <main+0x7bc>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d105      	bne.n	8001d7e <main+0x6ea>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2104      	movs	r1, #4
 8001d76:	4837      	ldr	r0, [pc, #220]	; (8001e54 <main+0x7c0>)
 8001d78:	f015 f848 	bl	8016e0c <HAL_GPIO_WritePin>
 8001d7c:	e004      	b.n	8001d88 <main+0x6f4>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	2104      	movs	r1, #4
 8001d82:	4834      	ldr	r0, [pc, #208]	; (8001e54 <main+0x7c0>)
 8001d84:	f015 f842 	bl	8016e0c <HAL_GPIO_WritePin>
				controlloop();
			 }
	  	    */

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 8001d88:	f001 fd5a 	bl	8003840 <_Z13Efft_activatev>
	  	 Efft_read(&efft_status);
 8001d8c:	4832      	ldr	r0, [pc, #200]	; (8001e58 <main+0x7c4>)
 8001d8e:	f001 fda7 	bl	80038e0 <_Z9Efft_readPh>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state
	  	 if(trig_efftRead != 0 && micros() - timestamp_efft >= 200000){
 8001d92:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <main+0x7c8>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d014      	beq.n	8001dc4 <main+0x730>
 8001d9a:	f001 fe37 	bl	8003a0c <_Z6microsv>
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <main+0x7cc>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	1a86      	subs	r6, r0, r2
 8001da6:	603e      	str	r6, [r7, #0]
 8001da8:	eb61 0303 	sbc.w	r3, r1, r3
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <main+0x7d0>)
 8001db0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001db4:	4602      	mov	r2, r0
 8001db6:	429a      	cmp	r2, r3
 8001db8:	460b      	mov	r3, r1
 8001dba:	f173 0300 	sbcs.w	r3, r3, #0
 8001dbe:	d301      	bcc.n	8001dc4 <main+0x730>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <main+0x732>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00f      	beq.n	8001dea <main+0x756>
	  		 timestamp_efft = micros();
 8001dca:	f001 fe1f 	bl	8003a0c <_Z6microsv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4923      	ldr	r1, [pc, #140]	; (8001e60 <main+0x7cc>)
 8001dd4:	e9c1 2300 	strd	r2, r3, [r1]
	  		 flag_efftRead = 1;
 8001dd8:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <main+0x7d4>)
 8001dda:	2301      	movs	r3, #1
 8001ddc:	7013      	strb	r3, [r2, #0]
	  		 trig_efftRead++;
 8001dde:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <main+0x7c8>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	3301      	adds	r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <main+0x7c8>)
 8001de8:	7013      	strb	r3, [r2, #0]

	  	 }
	  	 //// disable this when run with laserwork
	  	 if(trig_efftRead >= 40 || efft_status == 0x78 ){//
 8001dea:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <main+0x7c8>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b27      	cmp	r3, #39	; 0x27
 8001df0:	d804      	bhi.n	8001dfc <main+0x768>
 8001df2:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <main+0x7c4>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b78      	cmp	r3, #120	; 0x78
 8001df8:	f47f af54 	bne.w	8001ca4 <main+0x610>
	  		 trig_efftRead = 0;
 8001dfc:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <main+0x7c8>)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	7013      	strb	r3, [r2, #0]
	  	  if(micros() - TimeStampGrand >= 100){
 8001e02:	e74f      	b.n	8001ca4 <main+0x610>
 8001e04:	200004d4 	.word	0x200004d4
 8001e08:	200004d8 	.word	0x200004d8
 8001e0c:	20000540 	.word	0x20000540
 8001e10:	200004ec 	.word	0x200004ec
 8001e14:	350637bd 	.word	0x350637bd
 8001e18:	200004f8 	.word	0x200004f8
 8001e1c:	3a83126f 	.word	0x3a83126f
 8001e20:	2000022c 	.word	0x2000022c
 8001e24:	2000019c 	.word	0x2000019c
 8001e28:	200001e4 	.word	0x200001e4
 8001e2c:	200005c0 	.word	0x200005c0
 8001e30:	200002d4 	.word	0x200002d4
 8001e34:	20000318 	.word	0x20000318
 8001e38:	200003dc 	.word	0x200003dc
 8001e3c:	200003ec 	.word	0x200003ec
 8001e40:	200003f6 	.word	0x200003f6
 8001e44:	200003f0 	.word	0x200003f0
 8001e48:	200003f8 	.word	0x200003f8
 8001e4c:	2000000a 	.word	0x2000000a
 8001e50:	200003fc 	.word	0x200003fc
 8001e54:	40020400 	.word	0x40020400
 8001e58:	200005b2 	.word	0x200005b2
 8001e5c:	200005b5 	.word	0x200005b5
 8001e60:	200005b8 	.word	0x200005b8
 8001e64:	00030d40 	.word	0x00030d40
 8001e68:	200005b4 	.word	0x200005b4

08001e6c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b094      	sub	sp, #80	; 0x50
 8001e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e72:	f107 0320 	add.w	r3, r7, #32
 8001e76:	2230      	movs	r2, #48	; 0x30
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f01b fefa 	bl	801dc74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <_Z18SystemClock_Configv+0xdc>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <_Z18SystemClock_Configv+0xdc>)
 8001e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <_Z18SystemClock_Configv+0xdc>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eac:	2300      	movs	r3, #0
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <_Z18SystemClock_Configv+0xe0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a25      	ldr	r2, [pc, #148]	; (8001f4c <_Z18SystemClock_Configv+0xe0>)
 8001eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <_Z18SystemClock_Configv+0xe0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed0:	2310      	movs	r3, #16
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001edc:	2308      	movs	r3, #8
 8001ede:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001ee0:	2364      	movs	r3, #100	; 0x64
 8001ee2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ee8:	2304      	movs	r3, #4
 8001eea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eec:	f107 0320 	add.w	r3, r7, #32
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f017 fe1b 	bl	8019b2c <HAL_RCC_OscConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001f06:	f001 fdb7 	bl	8003a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f0a:	230f      	movs	r3, #15
 8001f0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	2103      	movs	r1, #3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f018 f878 	bl	801a01c <HAL_RCC_ClockConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001f3c:	f001 fd9c 	bl	8003a78 <Error_Handler>
  }
}
 8001f40:	bf00      	nop
 8001f42:	3750      	adds	r7, #80	; 0x50
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40007000 	.word	0x40007000

08001f50 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f54:	4b15      	ldr	r3, [pc, #84]	; (8001fac <_ZL12MX_I2C1_Initv+0x5c>)
 8001f56:	4a16      	ldr	r2, [pc, #88]	; (8001fb0 <_ZL12MX_I2C1_Initv+0x60>)
 8001f58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f5a:	4b14      	ldr	r3, [pc, #80]	; (8001fac <_ZL12MX_I2C1_Initv+0x5c>)
 8001f5c:	4a15      	ldr	r2, [pc, #84]	; (8001fb4 <_ZL12MX_I2C1_Initv+0x64>)
 8001f5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <_ZL12MX_I2C1_Initv+0x5c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <_ZL12MX_I2C1_Initv+0x5c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <_ZL12MX_I2C1_Initv+0x5c>)
 8001f6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <_ZL12MX_I2C1_Initv+0x5c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <_ZL12MX_I2C1_Initv+0x5c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <_ZL12MX_I2C1_Initv+0x5c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <_ZL12MX_I2C1_Initv+0x5c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f8c:	4807      	ldr	r0, [pc, #28]	; (8001fac <_ZL12MX_I2C1_Initv+0x5c>)
 8001f8e:	f014 ff6f 	bl	8016e70 <HAL_I2C_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001fa2:	f001 fd69 	bl	8003a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200000f4 	.word	0x200000f4
 8001fb0:	40005400 	.word	0x40005400
 8001fb4:	00061a80 	.word	0x00061a80

08001fb8 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fbe:	4a16      	ldr	r2, [pc, #88]	; (8002018 <_ZL12MX_I2C3_Initv+0x60>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fc4:	4a15      	ldr	r2, [pc, #84]	; (800201c <_ZL12MX_I2C3_Initv+0x64>)
 8001fc6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fda:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <_ZL12MX_I2C3_Initv+0x5c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <_ZL12MX_I2C3_Initv+0x5c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ff4:	4807      	ldr	r0, [pc, #28]	; (8002014 <_ZL12MX_I2C3_Initv+0x5c>)
 8001ff6:	f014 ff3b 	bl	8016e70 <HAL_I2C_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 800200a:	f001 fd35 	bl	8003a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000148 	.word	0x20000148
 8002018:	40005c00 	.word	0x40005c00
 800201c:	00061a80 	.word	0x00061a80

08002020 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002026:	f107 0318 	add.w	r3, r7, #24
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800203e:	463b      	mov	r3, r7
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800204a:	4b38      	ldr	r3, [pc, #224]	; (800212c <_ZL12MX_TIM2_Initv+0x10c>)
 800204c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002050:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <_ZL12MX_TIM2_Initv+0x10c>)
 8002054:	2263      	movs	r2, #99	; 0x63
 8002056:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002058:	4b34      	ldr	r3, [pc, #208]	; (800212c <_ZL12MX_TIM2_Initv+0x10c>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800205e:	4b33      	ldr	r3, [pc, #204]	; (800212c <_ZL12MX_TIM2_Initv+0x10c>)
 8002060:	f04f 32ff 	mov.w	r2, #4294967295
 8002064:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <_ZL12MX_TIM2_Initv+0x10c>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206c:	4b2f      	ldr	r3, [pc, #188]	; (800212c <_ZL12MX_TIM2_Initv+0x10c>)
 800206e:	2200      	movs	r2, #0
 8002070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002072:	482e      	ldr	r0, [pc, #184]	; (800212c <_ZL12MX_TIM2_Initv+0x10c>)
 8002074:	f018 f9f2 	bl	801a45c <HAL_TIM_Base_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf14      	ite	ne
 800207e:	2301      	movne	r3, #1
 8002080:	2300      	moveq	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <_ZL12MX_TIM2_Initv+0x6c>
  {
    Error_Handler();
 8002088:	f001 fcf6 	bl	8003a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002090:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002092:	f107 0318 	add.w	r3, r7, #24
 8002096:	4619      	mov	r1, r3
 8002098:	4824      	ldr	r0, [pc, #144]	; (800212c <_ZL12MX_TIM2_Initv+0x10c>)
 800209a:	f018 feb5 	bl	801ae08 <HAL_TIM_ConfigClockSource>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <_ZL12MX_TIM2_Initv+0x92>
  {
    Error_Handler();
 80020ae:	f001 fce3 	bl	8003a78 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80020b2:	481e      	ldr	r0, [pc, #120]	; (800212c <_ZL12MX_TIM2_Initv+0x10c>)
 80020b4:	f018 fbe8 	bl	801a888 <HAL_TIM_IC_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	bf14      	ite	ne
 80020be:	2301      	movne	r3, #1
 80020c0:	2300      	moveq	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 80020c8:	f001 fcd6 	bl	8003a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	4619      	mov	r1, r3
 80020da:	4814      	ldr	r0, [pc, #80]	; (800212c <_ZL12MX_TIM2_Initv+0x10c>)
 80020dc:	f019 fb6e 	bl	801b7bc <HAL_TIMEx_MasterConfigSynchronization>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <_ZL12MX_TIM2_Initv+0xd4>
  {
    Error_Handler();
 80020f0:	f001 fcc2 	bl	8003a78 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020f4:	2300      	movs	r3, #0
 80020f6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020f8:	2301      	movs	r3, #1
 80020fa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002104:	463b      	mov	r3, r7
 8002106:	2200      	movs	r2, #0
 8002108:	4619      	mov	r1, r3
 800210a:	4808      	ldr	r0, [pc, #32]	; (800212c <_ZL12MX_TIM2_Initv+0x10c>)
 800210c:	f018 fd1d 	bl	801ab4a <HAL_TIM_IC_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf14      	ite	ne
 8002116:	2301      	movne	r3, #1
 8002118:	2300      	moveq	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <_ZL12MX_TIM2_Initv+0x104>
  {
    Error_Handler();
 8002120:	f001 fcaa 	bl	8003a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	3728      	adds	r7, #40	; 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	2000019c 	.word	0x2000019c

08002130 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08e      	sub	sp, #56	; 0x38
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002144:	f107 0320 	add.w	r3, r7, #32
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
 800215c:	615a      	str	r2, [r3, #20]
 800215e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002160:	4b39      	ldr	r3, [pc, #228]	; (8002248 <_ZL12MX_TIM4_Initv+0x118>)
 8002162:	4a3a      	ldr	r2, [pc, #232]	; (800224c <_ZL12MX_TIM4_Initv+0x11c>)
 8002164:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002166:	4b38      	ldr	r3, [pc, #224]	; (8002248 <_ZL12MX_TIM4_Initv+0x118>)
 8002168:	2200      	movs	r2, #0
 800216a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216c:	4b36      	ldr	r3, [pc, #216]	; (8002248 <_ZL12MX_TIM4_Initv+0x118>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002172:	4b35      	ldr	r3, [pc, #212]	; (8002248 <_ZL12MX_TIM4_Initv+0x118>)
 8002174:	f242 720f 	movw	r2, #9999	; 0x270f
 8002178:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217a:	4b33      	ldr	r3, [pc, #204]	; (8002248 <_ZL12MX_TIM4_Initv+0x118>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002180:	4b31      	ldr	r3, [pc, #196]	; (8002248 <_ZL12MX_TIM4_Initv+0x118>)
 8002182:	2200      	movs	r2, #0
 8002184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002186:	4830      	ldr	r0, [pc, #192]	; (8002248 <_ZL12MX_TIM4_Initv+0x118>)
 8002188:	f018 f968 	bl	801a45c <HAL_TIM_Base_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf14      	ite	ne
 8002192:	2301      	movne	r3, #1
 8002194:	2300      	moveq	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 800219c:	f001 fc6c 	bl	8003a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021aa:	4619      	mov	r1, r3
 80021ac:	4826      	ldr	r0, [pc, #152]	; (8002248 <_ZL12MX_TIM4_Initv+0x118>)
 80021ae:	f018 fe2b 	bl	801ae08 <HAL_TIM_ConfigClockSource>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 80021c2:	f001 fc59 	bl	8003a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021c6:	4820      	ldr	r0, [pc, #128]	; (8002248 <_ZL12MX_TIM4_Initv+0x118>)
 80021c8:	f018 fa54 	bl	801a674 <HAL_TIM_PWM_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf14      	ite	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	2300      	moveq	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 80021dc:	f001 fc4c 	bl	8003a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021e8:	f107 0320 	add.w	r3, r7, #32
 80021ec:	4619      	mov	r1, r3
 80021ee:	4816      	ldr	r0, [pc, #88]	; (8002248 <_ZL12MX_TIM4_Initv+0x118>)
 80021f0:	f019 fae4 	bl	801b7bc <HAL_TIMEx_MasterConfigSynchronization>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 8002204:	f001 fc38 	bl	8003a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002208:	2360      	movs	r3, #96	; 0x60
 800220a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	2200      	movs	r2, #0
 800221c:	4619      	mov	r1, r3
 800221e:	480a      	ldr	r0, [pc, #40]	; (8002248 <_ZL12MX_TIM4_Initv+0x118>)
 8002220:	f018 fd30 	bl	801ac84 <HAL_TIM_PWM_ConfigChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf14      	ite	ne
 800222a:	2301      	movne	r3, #1
 800222c:	2300      	moveq	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 8002234:	f001 fc20 	bl	8003a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002238:	4803      	ldr	r0, [pc, #12]	; (8002248 <_ZL12MX_TIM4_Initv+0x118>)
 800223a:	f013 fc07 	bl	8015a4c <HAL_TIM_MspPostInit>

}
 800223e:	bf00      	nop
 8002240:	3738      	adds	r7, #56	; 0x38
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200001e4 	.word	0x200001e4
 800224c:	40000800 	.word	0x40000800

08002250 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <_ZL13MX_TIM11_Initv+0x48>)
 8002256:	4a11      	ldr	r2, [pc, #68]	; (800229c <_ZL13MX_TIM11_Initv+0x4c>)
 8002258:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <_ZL13MX_TIM11_Initv+0x48>)
 800225c:	2263      	movs	r2, #99	; 0x63
 800225e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <_ZL13MX_TIM11_Initv+0x48>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <_ZL13MX_TIM11_Initv+0x48>)
 8002268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800226c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <_ZL13MX_TIM11_Initv+0x48>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <_ZL13MX_TIM11_Initv+0x48>)
 8002276:	2200      	movs	r2, #0
 8002278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800227a:	4807      	ldr	r0, [pc, #28]	; (8002298 <_ZL13MX_TIM11_Initv+0x48>)
 800227c:	f018 f8ee 	bl	801a45c <HAL_TIM_Base_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8002290:	f001 fbf2 	bl	8003a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000022c 	.word	0x2000022c
 800229c:	40014800 	.word	0x40014800

080022a0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80022a6:	4a15      	ldr	r2, [pc, #84]	; (80022fc <_ZL19MX_USART2_UART_Initv+0x5c>)
 80022a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80022aa:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80022ac:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80022b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80022b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022b8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80022bc:	2200      	movs	r2, #0
 80022be:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80022c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80022ca:	220c      	movs	r2, #12
 80022cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022da:	4807      	ldr	r0, [pc, #28]	; (80022f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80022dc:	f019 faf0 	bl	801b8c0 <HAL_UART_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bf14      	ite	ne
 80022e6:	2301      	movne	r3, #1
 80022e8:	2300      	moveq	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <_ZL19MX_USART2_UART_Initv+0x54>
  {
    Error_Handler();
 80022f0:	f001 fbc2 	bl	8003a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	200002d4 	.word	0x200002d4
 80022fc:	40004400 	.word	0x40004400

08002300 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	4b14      	ldr	r3, [pc, #80]	; (800235c <_ZL11MX_DMA_Initv+0x5c>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a13      	ldr	r2, [pc, #76]	; (800235c <_ZL11MX_DMA_Initv+0x5c>)
 8002310:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <_ZL11MX_DMA_Initv+0x5c>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	2010      	movs	r0, #16
 8002328:	f013 ff8d 	bl	8016246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800232c:	2010      	movs	r0, #16
 800232e:	f013 ffa6 	bl	801627e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	2011      	movs	r0, #17
 8002338:	f013 ff85 	bl	8016246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800233c:	2011      	movs	r0, #17
 800233e:	f013 ff9e 	bl	801627e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	202f      	movs	r0, #47	; 0x2f
 8002348:	f013 ff7d 	bl	8016246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800234c:	202f      	movs	r0, #47	; 0x2f
 800234e:	f013 ff96 	bl	801627e <HAL_NVIC_EnableIRQ>

}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	4b61      	ldr	r3, [pc, #388]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a60      	ldr	r2, [pc, #384]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002380:	f043 0304 	orr.w	r3, r3, #4
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b5e      	ldr	r3, [pc, #376]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b5a      	ldr	r3, [pc, #360]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a59      	ldr	r2, [pc, #356]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 800239c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b57      	ldr	r3, [pc, #348]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	4b53      	ldr	r3, [pc, #332]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a52      	ldr	r2, [pc, #328]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b50      	ldr	r3, [pc, #320]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a4b      	ldr	r2, [pc, #300]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b49      	ldr	r3, [pc, #292]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	603b      	str	r3, [r7, #0]
 80023ea:	4b45      	ldr	r3, [pc, #276]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a44      	ldr	r2, [pc, #272]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b42      	ldr	r3, [pc, #264]	; (8002500 <_ZL12MX_GPIO_Initv+0x1a0>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	2120      	movs	r1, #32
 8002406:	483f      	ldr	r0, [pc, #252]	; (8002504 <_ZL12MX_GPIO_Initv+0x1a4>)
 8002408:	f014 fd00 	bl	8016e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 800240c:	2200      	movs	r2, #0
 800240e:	f24e 0104 	movw	r1, #57348	; 0xe004
 8002412:	483d      	ldr	r0, [pc, #244]	; (8002508 <_ZL12MX_GPIO_Initv+0x1a8>)
 8002414:	f014 fcfa 	bl	8016e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 8002418:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800241c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800241e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4619      	mov	r1, r3
 800242e:	4837      	ldr	r0, [pc, #220]	; (800250c <_ZL12MX_GPIO_Initv+0x1ac>)
 8002430:	f014 fb50 	bl	8016ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002434:	2320      	movs	r3, #32
 8002436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002438:	2301      	movs	r3, #1
 800243a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	482e      	ldr	r0, [pc, #184]	; (8002504 <_ZL12MX_GPIO_Initv+0x1a4>)
 800244c:	f014 fb42 	bl	8016ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 8002450:	2302      	movs	r3, #2
 8002452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	4829      	ldr	r0, [pc, #164]	; (8002508 <_ZL12MX_GPIO_Initv+0x1a8>)
 8002464:	f014 fb36 	bl	8016ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 8002468:	f24e 0304 	movw	r3, #57348	; 0xe004
 800246c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246e:	2301      	movs	r3, #1
 8002470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	4821      	ldr	r0, [pc, #132]	; (8002508 <_ZL12MX_GPIO_Initv+0x1a8>)
 8002482:	f014 fb27 	bl	8016ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 8002486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800248a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800248c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	481b      	ldr	r0, [pc, #108]	; (800250c <_ZL12MX_GPIO_Initv+0x1ac>)
 800249e:	f014 fb19 	bl	8016ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 80024a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	4619      	mov	r1, r3
 80024b6:	4815      	ldr	r0, [pc, #84]	; (800250c <_ZL12MX_GPIO_Initv+0x1ac>)
 80024b8:	f014 fb0c 	bl	8016ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 80024bc:	2304      	movs	r3, #4
 80024be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	480f      	ldr	r0, [pc, #60]	; (8002510 <_ZL12MX_GPIO_Initv+0x1b0>)
 80024d2:	f014 faff 	bl	8016ad4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	2008      	movs	r0, #8
 80024dc:	f013 feb3 	bl	8016246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80024e0:	2008      	movs	r0, #8
 80024e2:	f013 fecc 	bl	801627e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	2028      	movs	r0, #40	; 0x28
 80024ec:	f013 feab 	bl	8016246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024f0:	2028      	movs	r0, #40	; 0x28
 80024f2:	f013 fec4 	bl	801627e <HAL_NVIC_EnableIRQ>

}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	; 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40020000 	.word	0x40020000
 8002508:	40020400 	.word	0x40020400
 800250c:	40020800 	.word	0x40020800
 8002510:	40020c00 	.word	0x40020c00

08002514 <_Z13GrandStatumixv>:

/* USER CODE BEGIN 4 */
////////// [Grand State] //////////////////////// [Grand State] ////////////////////////
//======== [Grand State] ======================== [Grand State] ========================
void GrandStatumix(){
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 8002518:	4b91      	ldr	r3, [pc, #580]	; (8002760 <_Z13GrandStatumixv+0x24c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <_Z13GrandStatumixv+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 8002520:	2200      	movs	r2, #0
 8002522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002526:	488f      	ldr	r0, [pc, #572]	; (8002764 <_Z13GrandStatumixv+0x250>)
 8002528:	f014 fc70 	bl	8016e0c <HAL_GPIO_WritePin>
	}
	if (grandState != work){
 800252c:	4b8c      	ldr	r3, [pc, #560]	; (8002760 <_Z13GrandStatumixv+0x24c>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d005      	beq.n	8002540 <_Z13GrandStatumixv+0x2c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 8002534:	2200      	movs	r2, #0
 8002536:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800253a:	488a      	ldr	r0, [pc, #552]	; (8002764 <_Z13GrandStatumixv+0x250>)
 800253c:	f014 fc66 	bl	8016e0c <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 8002540:	4b87      	ldr	r3, [pc, #540]	; (8002760 <_Z13GrandStatumixv+0x24c>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d103      	bne.n	8002550 <_Z13GrandStatumixv+0x3c>
 8002548:	4b85      	ldr	r3, [pc, #532]	; (8002760 <_Z13GrandStatumixv+0x24c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d005      	beq.n	800255c <_Z13GrandStatumixv+0x48>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8002550:	2200      	movs	r2, #0
 8002552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002556:	4883      	ldr	r0, [pc, #524]	; (8002764 <_Z13GrandStatumixv+0x250>)
 8002558:	f014 fc58 	bl	8016e0c <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 800255c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002560:	4881      	ldr	r0, [pc, #516]	; (8002768 <_Z13GrandStatumixv+0x254>)
 8002562:	f014 fc3b 	bl	8016ddc <HAL_GPIO_ReadPin>
 8002566:	4603      	mov	r3, r0
 8002568:	461a      	mov	r2, r3
 800256a:	4b80      	ldr	r3, [pc, #512]	; (800276c <_Z13GrandStatumixv+0x258>)
 800256c:	701a      	strb	r2, [r3, #0]
	pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 800256e:	2102      	movs	r1, #2
 8002570:	487c      	ldr	r0, [pc, #496]	; (8002764 <_Z13GrandStatumixv+0x250>)
 8002572:	f014 fc33 	bl	8016ddc <HAL_GPIO_ReadPin>
 8002576:	4603      	mov	r3, r0
 8002578:	461a      	mov	r2, r3
 800257a:	4b7d      	ldr	r3, [pc, #500]	; (8002770 <_Z13GrandStatumixv+0x25c>)
 800257c:	701a      	strb	r2, [r3, #0]

	switch(grandState){
 800257e:	4b78      	ldr	r3, [pc, #480]	; (8002760 <_Z13GrandStatumixv+0x24c>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	3b01      	subs	r3, #1
 8002584:	2b04      	cmp	r3, #4
 8002586:	d80d      	bhi.n	80025a4 <_Z13GrandStatumixv+0x90>
 8002588:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <_Z13GrandStatumixv+0x7c>)
 800258a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258e:	bf00      	nop
 8002590:	080025e7 	.word	0x080025e7
 8002594:	0800269b 	.word	0x0800269b
 8002598:	08002727 	.word	0x08002727
 800259c:	080026e1 	.word	0x080026e1
 80025a0:	0800262d 	.word	0x0800262d
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 80025a4:	2201      	movs	r2, #1
 80025a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025aa:	486e      	ldr	r0, [pc, #440]	; (8002764 <_Z13GrandStatumixv+0x250>)
 80025ac:	f014 fc2e 	bl	8016e0c <HAL_GPIO_WritePin>
		//PWMOut = 1200;
		Unwrapping();
 80025b0:	f000 fcc2 	bl	8002f38 <_Z10Unwrappingv>
		Kalmanfilter();
 80025b4:	f000 fd74 	bl	80030a0 <_Z12Kalmanfilterv>
		//diffvelo();

		if (pwr_sense == 1){grandState = emer;}
 80025b8:	4b6d      	ldr	r3, [pc, #436]	; (8002770 <_Z13GrandStatumixv+0x25c>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d102      	bne.n	80025c6 <_Z13GrandStatumixv+0xb2>
 80025c0:	4b67      	ldr	r3, [pc, #412]	; (8002760 <_Z13GrandStatumixv+0x24c>)
 80025c2:	2203      	movs	r2, #3
 80025c4:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 80025c6:	4b69      	ldr	r3, [pc, #420]	; (800276c <_Z13GrandStatumixv+0x258>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <_Z13GrandStatumixv+0xc0>
 80025ce:	4b64      	ldr	r3, [pc, #400]	; (8002760 <_Z13GrandStatumixv+0x24c>)
 80025d0:	2202      	movs	r2, #2
 80025d2:	701a      	strb	r2, [r3, #0]
		/// [From UART] run when get {HOME} , {RUN}
		if (bluecounter != 0){grandState = work;} // can go work from ready only
 80025d4:	4b67      	ldr	r3, [pc, #412]	; (8002774 <_Z13GrandStatumixv+0x260>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80b3 	beq.w	8002744 <_Z13GrandStatumixv+0x230>
 80025de:	4b60      	ldr	r3, [pc, #384]	; (8002760 <_Z13GrandStatumixv+0x24c>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
	break;
 80025e4:	e0ae      	b.n	8002744 <_Z13GrandStatumixv+0x230>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 80025e6:	2201      	movs	r2, #1
 80025e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025ec:	485d      	ldr	r0, [pc, #372]	; (8002764 <_Z13GrandStatumixv+0x250>)
 80025ee:	f014 fc0d 	bl	8016e0c <HAL_GPIO_WritePin>
		LaserTrajex_workflow();
 80025f2:	f000 f8d7 	bl	80027a4 <_Z20LaserTrajex_workflowv>

		if (pwr_sense == 1){
 80025f6:	4b5e      	ldr	r3, [pc, #376]	; (8002770 <_Z13GrandStatumixv+0x25c>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d106      	bne.n	800260c <_Z13GrandStatumixv+0xf8>
			grandState = emer;
 80025fe:	4b58      	ldr	r3, [pc, #352]	; (8002760 <_Z13GrandStatumixv+0x24c>)
 8002600:	2203      	movs	r2, #3
 8002602:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 8002604:	4b5c      	ldr	r3, [pc, #368]	; (8002778 <_Z13GrandStatumixv+0x264>)
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
		}
		if (stop_sense == 0){
 800260c:	4b57      	ldr	r3, [pc, #348]	; (800276c <_Z13GrandStatumixv+0x258>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f040 8099 	bne.w	8002748 <_Z13GrandStatumixv+0x234>
			PWMOut = 0;
 8002616:	4b59      	ldr	r3, [pc, #356]	; (800277c <_Z13GrandStatumixv+0x268>)
 8002618:	2200      	movs	r2, #0
 800261a:	801a      	strh	r2, [r3, #0]
			grandState = stopnd;
 800261c:	4b50      	ldr	r3, [pc, #320]	; (8002760 <_Z13GrandStatumixv+0x24c>)
 800261e:	2204      	movs	r2, #4
 8002620:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 8002622:	4b55      	ldr	r3, [pc, #340]	; (8002778 <_Z13GrandStatumixv+0x264>)
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
		}
	break;
 800262a:	e08d      	b.n	8002748 <_Z13GrandStatumixv+0x234>

	case SetZeroGr:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 800262c:	2201      	movs	r2, #1
 800262e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002632:	484c      	ldr	r0, [pc, #304]	; (8002764 <_Z13GrandStatumixv+0x250>)
 8002634:	f014 fbea 	bl	8016e0c <HAL_GPIO_WritePin>

		Unwrapping();
 8002638:	f000 fc7e 	bl	8002f38 <_Z10Unwrappingv>

		 if(flagNewpos==0){
 800263c:	4b50      	ldr	r3, [pc, #320]	; (8002780 <_Z13GrandStatumixv+0x26c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d115      	bne.n	8002670 <_Z13GrandStatumixv+0x15c>
			Currentpos = CurrentEn;
 8002644:	4b4f      	ldr	r3, [pc, #316]	; (8002784 <_Z13GrandStatumixv+0x270>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a4f      	ldr	r2, [pc, #316]	; (8002788 <_Z13GrandStatumixv+0x274>)
 800264a:	6013      	str	r3, [r2, #0]
			Finalposition = 0; // Put goal position here in rad
 800264c:	4b4f      	ldr	r3, [pc, #316]	; (800278c <_Z13GrandStatumixv+0x278>)
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
			Distance = Finalposition - Currentpos;
 8002654:	4b4d      	ldr	r3, [pc, #308]	; (800278c <_Z13GrandStatumixv+0x278>)
 8002656:	ed93 7a00 	vldr	s14, [r3]
 800265a:	4b4b      	ldr	r3, [pc, #300]	; (8002788 <_Z13GrandStatumixv+0x274>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002664:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <_Z13GrandStatumixv+0x27c>)
 8002666:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 800266a:	4b45      	ldr	r3, [pc, #276]	; (8002780 <_Z13GrandStatumixv+0x26c>)
 800266c:	2201      	movs	r2, #1
 800266e:	601a      	str	r2, [r3, #0]
		 }
		Trajectory();
 8002670:	f000 f95a 	bl	8002928 <_Z10Trajectoryv>
		Kalmanfilter();
 8002674:	f000 fd14 	bl	80030a0 <_Z12Kalmanfilterv>
		controlloop();
 8002678:	f000 ff82 	bl	8003580 <_Z11controlloopv>

		if (flag_finishTra == 1 || BinPosXI == 0){
 800267c:	4b45      	ldr	r3, [pc, #276]	; (8002794 <_Z13GrandStatumixv+0x280>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d003      	beq.n	800268c <_Z13GrandStatumixv+0x178>
 8002684:	4b44      	ldr	r3, [pc, #272]	; (8002798 <_Z13GrandStatumixv+0x284>)
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d15f      	bne.n	800274c <_Z13GrandStatumixv+0x238>
			flag_finishTra = 0;
 800268c:	4b41      	ldr	r3, [pc, #260]	; (8002794 <_Z13GrandStatumixv+0x280>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
			grandState = Ready;
 8002692:	4b33      	ldr	r3, [pc, #204]	; (8002760 <_Z13GrandStatumixv+0x24c>)
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
		}
	break;
 8002698:	e058      	b.n	800274c <_Z13GrandStatumixv+0x238>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 800269a:	2201      	movs	r2, #1
 800269c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a0:	4830      	ldr	r0, [pc, #192]	; (8002764 <_Z13GrandStatumixv+0x250>)
 80026a2:	f014 fbb3 	bl	8016e0c <HAL_GPIO_WritePin>
		PWMOut = 0;
 80026a6:	4b35      	ldr	r3, [pc, #212]	; (800277c <_Z13GrandStatumixv+0x268>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	801a      	strh	r2, [r3, #0]

		X(1,0)=0;
 80026ac:	2200      	movs	r2, #0
 80026ae:	2101      	movs	r1, #1
 80026b0:	483a      	ldr	r0, [pc, #232]	; (800279c <_Z13GrandStatumixv+0x288>)
 80026b2:	f001 fc25 	bl	8003f00 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
		KalV = X(1,0);
 80026be:	2200      	movs	r2, #0
 80026c0:	2101      	movs	r1, #1
 80026c2:	4836      	ldr	r0, [pc, #216]	; (800279c <_Z13GrandStatumixv+0x288>)
 80026c4:	f001 fc1c 	bl	8003f00 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80026c8:	4603      	mov	r3, r0
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a34      	ldr	r2, [pc, #208]	; (80027a0 <_Z13GrandStatumixv+0x28c>)
 80026ce:	6013      	str	r3, [r2, #0]

		if (stop_sense == 1){
 80026d0:	4b26      	ldr	r3, [pc, #152]	; (800276c <_Z13GrandStatumixv+0x258>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d13b      	bne.n	8002750 <_Z13GrandStatumixv+0x23c>
			grandState = Ready;
 80026d8:	4b21      	ldr	r3, [pc, #132]	; (8002760 <_Z13GrandStatumixv+0x24c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
			//== rotation change for dummy test
			//mot_dirctn++;
			//mot_dirctn%=2;
		}
	break;
 80026de:	e037      	b.n	8002750 <_Z13GrandStatumixv+0x23c>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 80026e0:	2201      	movs	r2, #1
 80026e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026e6:	481f      	ldr	r0, [pc, #124]	; (8002764 <_Z13GrandStatumixv+0x250>)
 80026e8:	f014 fb90 	bl	8016e0c <HAL_GPIO_WritePin>
			PWMOut = 0;
 80026ec:	4b23      	ldr	r3, [pc, #140]	; (800277c <_Z13GrandStatumixv+0x268>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	801a      	strh	r2, [r3, #0]
			//Integral = 0;
			X(1,0)=0;
 80026f2:	2200      	movs	r2, #0
 80026f4:	2101      	movs	r1, #1
 80026f6:	4829      	ldr	r0, [pc, #164]	; (800279c <_Z13GrandStatumixv+0x288>)
 80026f8:	f001 fc02 	bl	8003f00 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
			KalV = X(1,0);
 8002704:	2200      	movs	r2, #0
 8002706:	2101      	movs	r1, #1
 8002708:	4824      	ldr	r0, [pc, #144]	; (800279c <_Z13GrandStatumixv+0x288>)
 800270a:	f001 fbf9 	bl	8003f00 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 800270e:	4603      	mov	r3, r0
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a23      	ldr	r2, [pc, #140]	; (80027a0 <_Z13GrandStatumixv+0x28c>)
 8002714:	6013      	str	r3, [r2, #0]


			if (stop_sense == 1){
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <_Z13GrandStatumixv+0x258>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d11a      	bne.n	8002754 <_Z13GrandStatumixv+0x240>
				grandState = work;
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <_Z13GrandStatumixv+0x24c>)
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002724:	e016      	b.n	8002754 <_Z13GrandStatumixv+0x240>

	case emer:
		ResetParam();
 8002726:	f000 f8d7 	bl	80028d8 <_Z10ResetParamv>
		// Reset every variables at control
		if (pwr_sense == 0){
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <_Z13GrandStatumixv+0x25c>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d112      	bne.n	8002758 <_Z13GrandStatumixv+0x244>
			grandState = Ready;
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <_Z13GrandStatumixv+0x24c>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
			IOExpenderInit();
 8002738:	f001 f80c 	bl	8003754 <_Z14IOExpenderInitv>
			HAL_Delay(100);
 800273c:	2064      	movs	r0, #100	; 0x64
 800273e:	f013 fc83 	bl	8016048 <HAL_Delay>
		}
	break;
 8002742:	e009      	b.n	8002758 <_Z13GrandStatumixv+0x244>
	break;
 8002744:	bf00      	nop
 8002746:	e008      	b.n	800275a <_Z13GrandStatumixv+0x246>
	break;
 8002748:	bf00      	nop
 800274a:	e006      	b.n	800275a <_Z13GrandStatumixv+0x246>
	break;
 800274c:	bf00      	nop
 800274e:	e004      	b.n	800275a <_Z13GrandStatumixv+0x246>
	break;
 8002750:	bf00      	nop
 8002752:	e002      	b.n	800275a <_Z13GrandStatumixv+0x246>
		break;
 8002754:	bf00      	nop
 8002756:	e000      	b.n	800275a <_Z13GrandStatumixv+0x246>
	break;
 8002758:	bf00      	nop


	}
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200003d8 	.word	0x200003d8
 8002764:	40020400 	.word	0x40020400
 8002768:	40020800 	.word	0x40020800
 800276c:	200003da 	.word	0x200003da
 8002770:	200003d9 	.word	0x200003d9
 8002774:	20000578 	.word	0x20000578
 8002778:	200005ac 	.word	0x200005ac
 800277c:	2000000a 	.word	0x2000000a
 8002780:	2000042c 	.word	0x2000042c
 8002784:	2000056c 	.word	0x2000056c
 8002788:	20000428 	.word	0x20000428
 800278c:	20000400 	.word	0x20000400
 8002790:	20000404 	.word	0x20000404
 8002794:	200003e8 	.word	0x200003e8
 8002798:	200003f4 	.word	0x200003f4
 800279c:	20000528 	.word	0x20000528
 80027a0:	20000550 	.word	0x20000550

080027a4 <_Z20LaserTrajex_workflowv>:

void LaserTrajex_workflow(){ // 1, n loop go to shoot laser run
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
	// -1 means no position value
	//if (Finalposition == -1){flag_LasxTraj = 0;}

	switch(flag_LasxTraj){
 80027a8:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <_Z20LaserTrajex_workflowv+0x100>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d015      	beq.n	80027dc <_Z20LaserTrajex_workflowv+0x38>
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d03f      	beq.n	8002834 <_Z20LaserTrajex_workflowv+0x90>
	default:
	case 0: // wait go flag
		////////// raise flag to 1 if need to drive the state

		if (grandState == work){ //flag_LasxTraj != 0 ||
 80027b4:	4b3c      	ldr	r3, [pc, #240]	; (80028a8 <_Z20LaserTrajex_workflowv+0x104>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d16c      	bne.n	8002896 <_Z20LaserTrajex_workflowv+0xf2>
			flag_LasxTraj = 1;
 80027bc:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <_Z20LaserTrajex_workflowv+0x100>)
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
			Finalposition = positionlog[position_order]; // receive in rad
 80027c2:	4b3a      	ldr	r3, [pc, #232]	; (80028ac <_Z20LaserTrajex_workflowv+0x108>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <_Z20LaserTrajex_workflowv+0x10c>)
 80027ca:	569b      	ldrsb	r3, [r3, r2]
 80027cc:	ee07 3a90 	vmov	s15, r3
 80027d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d4:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <_Z20LaserTrajex_workflowv+0x110>)
 80027d6:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 80027da:	e05c      	b.n	8002896 <_Z20LaserTrajex_workflowv+0xf2>
	case 1: //-------------traject-----
		//====flag_LasxTraj will trig trajex in while;
		//////// raise flag to 2 and flag_efftActi = 1; if reach the target the position
 		 Unwrapping();
 80027dc:	f000 fbac 	bl	8002f38 <_Z10Unwrappingv>

		 if(flagNewpos==0){
 80027e0:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <_Z20LaserTrajex_workflowv+0x114>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d111      	bne.n	800280c <_Z20LaserTrajex_workflowv+0x68>
			Currentpos = CurrentEn;
 80027e8:	4b34      	ldr	r3, [pc, #208]	; (80028bc <_Z20LaserTrajex_workflowv+0x118>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a34      	ldr	r2, [pc, #208]	; (80028c0 <_Z20LaserTrajex_workflowv+0x11c>)
 80027ee:	6013      	str	r3, [r2, #0]
			//Finalposition = 300*0.006136; // Put goal position here in rad
			Distance = Finalposition - Currentpos;
 80027f0:	4b30      	ldr	r3, [pc, #192]	; (80028b4 <_Z20LaserTrajex_workflowv+0x110>)
 80027f2:	ed93 7a00 	vldr	s14, [r3]
 80027f6:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <_Z20LaserTrajex_workflowv+0x11c>)
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002800:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <_Z20LaserTrajex_workflowv+0x120>)
 8002802:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 8002806:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <_Z20LaserTrajex_workflowv+0x114>)
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]
		 }
		Trajectory();
 800280c:	f000 f88c 	bl	8002928 <_Z10Trajectoryv>
		Kalmanfilter();
 8002810:	f000 fc46 	bl	80030a0 <_Z12Kalmanfilterv>
		controlloop();
 8002814:	f000 feb4 	bl	8003580 <_Z11controlloopv>

		if(flag_finishTra == 1){
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <_Z20LaserTrajex_workflowv+0x124>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d13c      	bne.n	800289a <_Z20LaserTrajex_workflowv+0xf6>
			flag_finishTra = 0;
 8002820:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <_Z20LaserTrajex_workflowv+0x124>)
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
			flag_LasxTraj = 2;
 8002826:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <_Z20LaserTrajex_workflowv+0x100>)
 8002828:	2202      	movs	r2, #2
 800282a:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 1;
 800282c:	4b27      	ldr	r3, [pc, #156]	; (80028cc <_Z20LaserTrajex_workflowv+0x128>)
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002832:	e032      	b.n	800289a <_Z20LaserTrajex_workflowv+0xf6>
	case 2: //---------------Laserwork------
		trig_efftRead = 1;
 8002834:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <_Z20LaserTrajex_workflowv+0x12c>)
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]

		if(efft_status == 0x78){ // if laser finished work
 800283a:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <_Z20LaserTrajex_workflowv+0x130>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b78      	cmp	r3, #120	; 0x78
 8002840:	d12d      	bne.n	800289e <_Z20LaserTrajex_workflowv+0xfa>
			trig_efftRead = 0;
 8002842:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <_Z20LaserTrajex_workflowv+0x12c>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
			position_order++; // go to next obtained position
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <_Z20LaserTrajex_workflowv+0x108>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	3301      	adds	r3, #1
 800284e:	b2da      	uxtb	r2, r3
 8002850:	4b16      	ldr	r3, [pc, #88]	; (80028ac <_Z20LaserTrajex_workflowv+0x108>)
 8002852:	701a      	strb	r2, [r3, #0]

			if (positionlog[position_order] == -1){
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <_Z20LaserTrajex_workflowv+0x108>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <_Z20LaserTrajex_workflowv+0x10c>)
 800285c:	569b      	ldrsb	r3, [r3, r2]
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002862:	d108      	bne.n	8002876 <_Z20LaserTrajex_workflowv+0xd2>
				//Real end, reset all position parameter
				// back to ready
				flag_LasxTraj = 0;
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <_Z20LaserTrajex_workflowv+0x100>)
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
				ResetParam();
 800286a:	f000 f835 	bl	80028d8 <_Z10ResetParamv>
				grandState = Ready;
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <_Z20LaserTrajex_workflowv+0x104>)
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
			else {
				Finalposition = positionlog[position_order];
				flag_LasxTraj = 1;
			} // continue next pos if have
		}
		break;
 8002874:	e013      	b.n	800289e <_Z20LaserTrajex_workflowv+0xfa>
				Finalposition = positionlog[position_order];
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <_Z20LaserTrajex_workflowv+0x108>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <_Z20LaserTrajex_workflowv+0x10c>)
 800287e:	569b      	ldrsb	r3, [r3, r2]
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <_Z20LaserTrajex_workflowv+0x110>)
 800288a:	edc3 7a00 	vstr	s15, [r3]
				flag_LasxTraj = 1;
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <_Z20LaserTrajex_workflowv+0x100>)
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
		break;
 8002894:	e003      	b.n	800289e <_Z20LaserTrajex_workflowv+0xfa>
		break;
 8002896:	bf00      	nop
 8002898:	e002      	b.n	80028a0 <_Z20LaserTrajex_workflowv+0xfc>
		break;
 800289a:	bf00      	nop
 800289c:	e000      	b.n	80028a0 <_Z20LaserTrajex_workflowv+0xfc>
		break;
 800289e:	bf00      	nop
	}
}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	200003e9 	.word	0x200003e9
 80028a8:	200003d8 	.word	0x200003d8
 80028ac:	200003ea 	.word	0x200003ea
 80028b0:	20000000 	.word	0x20000000
 80028b4:	20000400 	.word	0x20000400
 80028b8:	2000042c 	.word	0x2000042c
 80028bc:	2000056c 	.word	0x2000056c
 80028c0:	20000428 	.word	0x20000428
 80028c4:	20000404 	.word	0x20000404
 80028c8:	200003e8 	.word	0x200003e8
 80028cc:	200005b3 	.word	0x200005b3
 80028d0:	200005b5 	.word	0x200005b5
 80028d4:	200005b2 	.word	0x200005b2

080028d8 <_Z10ResetParamv>:

void ResetParam(){
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
	// Reset every variables at control
	// reset position buffer
	PWMOut = 0;
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <_Z10ResetParamv+0x40>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 80028e4:	2300      	movs	r3, #0
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <_Z10ResetParamv+0x44>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4293      	cmp	r3, r2
 80028f2:	dc08      	bgt.n	8002906 <_Z10ResetParamv+0x2e>
			positionlog[i] = -1;
 80028f4:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <_Z10ResetParamv+0x48>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	22ff      	movs	r2, #255	; 0xff
 80028fc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3301      	adds	r3, #1
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	e7f0      	b.n	80028e8 <_Z10ResetParamv+0x10>
		}
	position_order = 0;
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <_Z10ResetParamv+0x44>)
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
	//Integral = 0;
	//u_contr = 0;
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	2000000a 	.word	0x2000000a
 800291c:	200003ea 	.word	0x200003ea
 8002920:	20000000 	.word	0x20000000
 8002924:	00000000 	.word	0x00000000

08002928 <_Z10Trajectoryv>:

//////////////////// [Trajectory Path] //////////////////////
void Trajectory(){
 8002928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800292c:	ed2d 8b04 	vpush	{d8-d9}
 8002930:	af00      	add	r7, sp, #0

	if(micros() - TimeStampTraject >= 1000){
 8002932:	f001 f86b 	bl	8003a0c <_Z6microsv>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4993      	ldr	r1, [pc, #588]	; (8002b88 <_Z10Trajectoryv+0x260>)
 800293c:	6809      	ldr	r1, [r1, #0]
 800293e:	2000      	movs	r0, #0
 8002940:	4688      	mov	r8, r1
 8002942:	4681      	mov	r9, r0
 8002944:	ebb2 0408 	subs.w	r4, r2, r8
 8002948:	eb63 0509 	sbc.w	r5, r3, r9
 800294c:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002950:	f175 0300 	sbcs.w	r3, r5, #0
 8002954:	bf2c      	ite	cs
 8002956:	2301      	movcs	r3, #1
 8002958:	2300      	movcc	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 82c8 	beq.w	8002ef2 <_Z10Trajectoryv+0x5ca>
		TimeStampTraject = micros();
 8002962:	f001 f853 	bl	8003a0c <_Z6microsv>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4b87      	ldr	r3, [pc, #540]	; (8002b88 <_Z10Trajectoryv+0x260>)
 800296c:	601a      	str	r2, [r3, #0]

		if (Distance > 0){
 800296e:	4b87      	ldr	r3, [pc, #540]	; (8002b8c <_Z10Trajectoryv+0x264>)
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	dd0a      	ble.n	8002994 <_Z10Trajectoryv+0x6c>
			Velocity=1.04719755; // [From UART] Put Max Velo here
 800297e:	4b84      	ldr	r3, [pc, #528]	; (8002b90 <_Z10Trajectoryv+0x268>)
 8002980:	4a84      	ldr	r2, [pc, #528]	; (8002b94 <_Z10Trajectoryv+0x26c>)
 8002982:	601a      	str	r2, [r3, #0]
			Acceleration= 0.5;   // recieve frol UART
 8002984:	4b84      	ldr	r3, [pc, #528]	; (8002b98 <_Z10Trajectoryv+0x270>)
 8002986:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800298a:	601a      	str	r2, [r3, #0]
			check = 50;
 800298c:	4b83      	ldr	r3, [pc, #524]	; (8002b9c <_Z10Trajectoryv+0x274>)
 800298e:	2232      	movs	r2, #50	; 0x32
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	e011      	b.n	80029b8 <_Z10Trajectoryv+0x90>
		}
		else if(Distance < 0){
 8002994:	4b7d      	ldr	r3, [pc, #500]	; (8002b8c <_Z10Trajectoryv+0x264>)
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a2:	d509      	bpl.n	80029b8 <_Z10Trajectoryv+0x90>
			Velocity=-1.04719755; // [From UART] Put Max Velo here  (negative)
 80029a4:	4b7a      	ldr	r3, [pc, #488]	; (8002b90 <_Z10Trajectoryv+0x268>)
 80029a6:	4a7e      	ldr	r2, [pc, #504]	; (8002ba0 <_Z10Trajectoryv+0x278>)
 80029a8:	601a      	str	r2, [r3, #0]
		    Acceleration= -0.5;   // recieve frol UART (negative)
 80029aa:	4b7b      	ldr	r3, [pc, #492]	; (8002b98 <_Z10Trajectoryv+0x270>)
 80029ac:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 80029b0:	601a      	str	r2, [r3, #0]
		    check = 100;
 80029b2:	4b7a      	ldr	r3, [pc, #488]	; (8002b9c <_Z10Trajectoryv+0x274>)
 80029b4:	2264      	movs	r2, #100	; 0x64
 80029b6:	701a      	strb	r2, [r3, #0]
		}

		if (Distance/Velocity > Velocity/Acceleration){
 80029b8:	4b74      	ldr	r3, [pc, #464]	; (8002b8c <_Z10Trajectoryv+0x264>)
 80029ba:	edd3 6a00 	vldr	s13, [r3]
 80029be:	4b74      	ldr	r3, [pc, #464]	; (8002b90 <_Z10Trajectoryv+0x268>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029c8:	4b71      	ldr	r3, [pc, #452]	; (8002b90 <_Z10Trajectoryv+0x268>)
 80029ca:	ed93 6a00 	vldr	s12, [r3]
 80029ce:	4b72      	ldr	r3, [pc, #456]	; (8002b98 <_Z10Trajectoryv+0x270>)
 80029d0:	edd3 6a00 	vldr	s13, [r3]
 80029d4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80029d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e0:	dd0b      	ble.n	80029fa <_Z10Trajectoryv+0xd2>
			Tb = Velocity/Acceleration;
 80029e2:	4b6b      	ldr	r3, [pc, #428]	; (8002b90 <_Z10Trajectoryv+0x268>)
 80029e4:	edd3 6a00 	vldr	s13, [r3]
 80029e8:	4b6b      	ldr	r3, [pc, #428]	; (8002b98 <_Z10Trajectoryv+0x270>)
 80029ea:	ed93 7a00 	vldr	s14, [r3]
 80029ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f2:	4b6c      	ldr	r3, [pc, #432]	; (8002ba4 <_Z10Trajectoryv+0x27c>)
 80029f4:	edc3 7a00 	vstr	s15, [r3]
 80029f8:	e029      	b.n	8002a4e <_Z10Trajectoryv+0x126>
		}
		else {
			Tb = sqrt(2*abs(Distance));
 80029fa:	4b64      	ldr	r3, [pc, #400]	; (8002b8c <_Z10Trajectoryv+0x264>)
 80029fc:	edd3 7a00 	vldr	s15, [r3]
 8002a00:	eeb0 0a67 	vmov.f32	s0, s15
 8002a04:	f7fe fa7a 	bl	8000efc <_ZSt3absf>
 8002a08:	eef0 7a40 	vmov.f32	s15, s0
 8002a0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a10:	eeb0 0a67 	vmov.f32	s0, s15
 8002a14:	f7fe fa82 	bl	8000f1c <_ZSt4sqrtf>
 8002a18:	eef0 7a40 	vmov.f32	s15, s0
 8002a1c:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <_Z10Trajectoryv+0x27c>)
 8002a1e:	edc3 7a00 	vstr	s15, [r3]
			Velocity = sqrt(abs(Distance)/2);
 8002a22:	4b5a      	ldr	r3, [pc, #360]	; (8002b8c <_Z10Trajectoryv+0x264>)
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	eeb0 0a67 	vmov.f32	s0, s15
 8002a2c:	f7fe fa66 	bl	8000efc <_ZSt3absf>
 8002a30:	eeb0 7a40 	vmov.f32	s14, s0
 8002a34:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a40:	f7fe fa6c 	bl	8000f1c <_ZSt4sqrtf>
 8002a44:	eef0 7a40 	vmov.f32	s15, s0
 8002a48:	4b51      	ldr	r3, [pc, #324]	; (8002b90 <_Z10Trajectoryv+0x268>)
 8002a4a:	edc3 7a00 	vstr	s15, [r3]
		}
		//TimeinS = _micros/10^6;
		timeFinal = (4*abs(Velocity)) + ((abs(Distance)-(2*abs(Velocity)*abs(Velocity)))/abs(Velocity));
 8002a4e:	4b50      	ldr	r3, [pc, #320]	; (8002b90 <_Z10Trajectoryv+0x268>)
 8002a50:	edd3 7a00 	vldr	s15, [r3]
 8002a54:	eeb0 0a67 	vmov.f32	s0, s15
 8002a58:	f7fe fa50 	bl	8000efc <_ZSt3absf>
 8002a5c:	eef0 7a40 	vmov.f32	s15, s0
 8002a60:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002a64:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002a68:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <_Z10Trajectoryv+0x264>)
 8002a6a:	edd3 7a00 	vldr	s15, [r3]
 8002a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a72:	f7fe fa43 	bl	8000efc <_ZSt3absf>
 8002a76:	eeb0 9a40 	vmov.f32	s18, s0
 8002a7a:	4b45      	ldr	r3, [pc, #276]	; (8002b90 <_Z10Trajectoryv+0x268>)
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	eeb0 0a67 	vmov.f32	s0, s15
 8002a84:	f7fe fa3a 	bl	8000efc <_ZSt3absf>
 8002a88:	eef0 7a40 	vmov.f32	s15, s0
 8002a8c:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8002a90:	4b3f      	ldr	r3, [pc, #252]	; (8002b90 <_Z10Trajectoryv+0x268>)
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	eeb0 0a67 	vmov.f32	s0, s15
 8002a9a:	f7fe fa2f 	bl	8000efc <_ZSt3absf>
 8002a9e:	eef0 7a40 	vmov.f32	s15, s0
 8002aa2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002aa6:	ee79 8a67 	vsub.f32	s17, s18, s15
 8002aaa:	4b39      	ldr	r3, [pc, #228]	; (8002b90 <_Z10Trajectoryv+0x268>)
 8002aac:	edd3 7a00 	vldr	s15, [r3]
 8002ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab4:	f7fe fa22 	bl	8000efc <_ZSt3absf>
 8002ab8:	eeb0 7a40 	vmov.f32	s14, s0
 8002abc:	eec8 7a87 	vdiv.f32	s15, s17, s14
 8002ac0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002ac4:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <_Z10Trajectoryv+0x280>)
 8002ac6:	edc3 7a00 	vstr	s15, [r3]

		if (TimeinS < Tb){
 8002aca:	4b38      	ldr	r3, [pc, #224]	; (8002bac <_Z10Trajectoryv+0x284>)
 8002acc:	ed93 7a00 	vldr	s14, [r3]
 8002ad0:	4b34      	ldr	r3, [pc, #208]	; (8002ba4 <_Z10Trajectoryv+0x27c>)
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ade:	d573      	bpl.n	8002bc8 <_Z10Trajectoryv+0x2a0>
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <_Z10Trajectoryv+0x270>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fd2f 	bl	8000548 <__aeabi_f2d>
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <_Z10Trajectoryv+0x288>)
 8002af0:	f7fd fd82 	bl	80005f8 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4614      	mov	r4, r2
 8002afa:	461d      	mov	r5, r3
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <_Z10Trajectoryv+0x284>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fd fd21 	bl	8000548 <__aeabi_f2d>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f7fd fd73 	bl	80005f8 <__aeabi_dmul>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4614      	mov	r4, r2
 8002b18:	461d      	mov	r5, r3
 8002b1a:	4b24      	ldr	r3, [pc, #144]	; (8002bac <_Z10Trajectoryv+0x284>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fd12 	bl	8000548 <__aeabi_f2d>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4620      	mov	r0, r4
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	f7fd fd64 	bl	80005f8 <__aeabi_dmul>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4614      	mov	r4, r2
 8002b36:	461d      	mov	r5, r3
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <_Z10Trajectoryv+0x28c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fd fd03 	bl	8000548 <__aeabi_f2d>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4620      	mov	r0, r4
 8002b48:	4629      	mov	r1, r5
 8002b4a:	f7fd fb9f 	bl	800028c <__adddf3>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4610      	mov	r0, r2
 8002b54:	4619      	mov	r1, r3
 8002b56:	f7fd ffff 	bl	8000b58 <__aeabi_d2f>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <_Z10Trajectoryv+0x290>)
 8002b5e:	6013      	str	r3, [r2, #0]
			OutVelocity = Acceleration*TimeinS;
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <_Z10Trajectoryv+0x270>)
 8002b62:	ed93 7a00 	vldr	s14, [r3]
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <_Z10Trajectoryv+0x284>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <_Z10Trajectoryv+0x294>)
 8002b72:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = Acceleration;
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <_Z10Trajectoryv+0x270>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a11      	ldr	r2, [pc, #68]	; (8002bc0 <_Z10Trajectoryv+0x298>)
 8002b7c:	6013      	str	r3, [r2, #0]
			ch = 1;
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <_Z10Trajectoryv+0x29c>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e1a2      	b.n	8002ecc <_Z10Trajectoryv+0x5a4>
 8002b86:	bf00      	nop
 8002b88:	20000430 	.word	0x20000430
 8002b8c:	20000404 	.word	0x20000404
 8002b90:	20000408 	.word	0x20000408
 8002b94:	3f860a92 	.word	0x3f860a92
 8002b98:	2000040c 	.word	0x2000040c
 8002b9c:	200005b1 	.word	0x200005b1
 8002ba0:	bf860a92 	.word	0xbf860a92
 8002ba4:	2000041c 	.word	0x2000041c
 8002ba8:	20000420 	.word	0x20000420
 8002bac:	20000424 	.word	0x20000424
 8002bb0:	3fe00000 	.word	0x3fe00000
 8002bb4:	20000428 	.word	0x20000428
 8002bb8:	20000410 	.word	0x20000410
 8002bbc:	20000414 	.word	0x20000414
 8002bc0:	20000418 	.word	0x20000418
 8002bc4:	200005b0 	.word	0x200005b0
			}
		else if(TimeinS < (timeFinal-Tb)){
 8002bc8:	4bcf      	ldr	r3, [pc, #828]	; (8002f08 <_Z10Trajectoryv+0x5e0>)
 8002bca:	ed93 7a00 	vldr	s14, [r3]
 8002bce:	4bcf      	ldr	r3, [pc, #828]	; (8002f0c <_Z10Trajectoryv+0x5e4>)
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bd8:	4bcd      	ldr	r3, [pc, #820]	; (8002f10 <_Z10Trajectoryv+0x5e8>)
 8002bda:	edd3 7a00 	vldr	s15, [r3]
 8002bde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be6:	dd5e      	ble.n	8002ca6 <_Z10Trajectoryv+0x37e>
			OutPosition = (0.5*Acceleration*(Tb*Tb)) + (Velocity*(TimeinS-Tb))+Currentpos;
 8002be8:	4bca      	ldr	r3, [pc, #808]	; (8002f14 <_Z10Trajectoryv+0x5ec>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fcab 	bl	8000548 <__aeabi_f2d>
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	4bc8      	ldr	r3, [pc, #800]	; (8002f18 <_Z10Trajectoryv+0x5f0>)
 8002bf8:	f7fd fcfe 	bl	80005f8 <__aeabi_dmul>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4614      	mov	r4, r2
 8002c02:	461d      	mov	r5, r3
 8002c04:	4bc1      	ldr	r3, [pc, #772]	; (8002f0c <_Z10Trajectoryv+0x5e4>)
 8002c06:	ed93 7a00 	vldr	s14, [r3]
 8002c0a:	4bc0      	ldr	r3, [pc, #768]	; (8002f0c <_Z10Trajectoryv+0x5e4>)
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
 8002c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c14:	ee17 0a90 	vmov	r0, s15
 8002c18:	f7fd fc96 	bl	8000548 <__aeabi_f2d>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4620      	mov	r0, r4
 8002c22:	4629      	mov	r1, r5
 8002c24:	f7fd fce8 	bl	80005f8 <__aeabi_dmul>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4614      	mov	r4, r2
 8002c2e:	461d      	mov	r5, r3
 8002c30:	4bb7      	ldr	r3, [pc, #732]	; (8002f10 <_Z10Trajectoryv+0x5e8>)
 8002c32:	ed93 7a00 	vldr	s14, [r3]
 8002c36:	4bb5      	ldr	r3, [pc, #724]	; (8002f0c <_Z10Trajectoryv+0x5e4>)
 8002c38:	edd3 7a00 	vldr	s15, [r3]
 8002c3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c40:	4bb6      	ldr	r3, [pc, #728]	; (8002f1c <_Z10Trajectoryv+0x5f4>)
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c4a:	ee17 0a90 	vmov	r0, s15
 8002c4e:	f7fd fc7b 	bl	8000548 <__aeabi_f2d>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4620      	mov	r0, r4
 8002c58:	4629      	mov	r1, r5
 8002c5a:	f7fd fb17 	bl	800028c <__adddf3>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4614      	mov	r4, r2
 8002c64:	461d      	mov	r5, r3
 8002c66:	4bae      	ldr	r3, [pc, #696]	; (8002f20 <_Z10Trajectoryv+0x5f8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc6c 	bl	8000548 <__aeabi_f2d>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4620      	mov	r0, r4
 8002c76:	4629      	mov	r1, r5
 8002c78:	f7fd fb08 	bl	800028c <__adddf3>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f7fd ff68 	bl	8000b58 <__aeabi_d2f>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4aa6      	ldr	r2, [pc, #664]	; (8002f24 <_Z10Trajectoryv+0x5fc>)
 8002c8c:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity;
 8002c8e:	4ba3      	ldr	r3, [pc, #652]	; (8002f1c <_Z10Trajectoryv+0x5f4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4aa5      	ldr	r2, [pc, #660]	; (8002f28 <_Z10Trajectoryv+0x600>)
 8002c94:	6013      	str	r3, [r2, #0]
			OutAcceleration = 0;
 8002c96:	4ba5      	ldr	r3, [pc, #660]	; (8002f2c <_Z10Trajectoryv+0x604>)
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
			ch = 2;
 8002c9e:	4ba4      	ldr	r3, [pc, #656]	; (8002f30 <_Z10Trajectoryv+0x608>)
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e112      	b.n	8002ecc <_Z10Trajectoryv+0x5a4>
			}
		else if(((timeFinal-Tb) <= TimeinS) && (TimeinS <= timeFinal)){
 8002ca6:	4b98      	ldr	r3, [pc, #608]	; (8002f08 <_Z10Trajectoryv+0x5e0>)
 8002ca8:	ed93 7a00 	vldr	s14, [r3]
 8002cac:	4b97      	ldr	r3, [pc, #604]	; (8002f0c <_Z10Trajectoryv+0x5e4>)
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cb6:	4b96      	ldr	r3, [pc, #600]	; (8002f10 <_Z10Trajectoryv+0x5e8>)
 8002cb8:	edd3 7a00 	vldr	s15, [r3]
 8002cbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc4:	f200 80e5 	bhi.w	8002e92 <_Z10Trajectoryv+0x56a>
 8002cc8:	4b91      	ldr	r3, [pc, #580]	; (8002f10 <_Z10Trajectoryv+0x5e8>)
 8002cca:	ed93 7a00 	vldr	s14, [r3]
 8002cce:	4b8e      	ldr	r3, [pc, #568]	; (8002f08 <_Z10Trajectoryv+0x5e0>)
 8002cd0:	edd3 7a00 	vldr	s15, [r3]
 8002cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cdc:	f200 80d9 	bhi.w	8002e92 <_Z10Trajectoryv+0x56a>
			OutPosition = (0.5*Acceleration*(Tb*Tb))+ (Velocity*(timeFinal-(2*Tb)))  + (Velocity*(TimeinS-(timeFinal-Tb))) - (0.5*Acceleration*((TimeinS-(timeFinal-Tb))*(TimeinS-(timeFinal-Tb))))+Currentpos;
 8002ce0:	4b8c      	ldr	r3, [pc, #560]	; (8002f14 <_Z10Trajectoryv+0x5ec>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd fc2f 	bl	8000548 <__aeabi_f2d>
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	4b8a      	ldr	r3, [pc, #552]	; (8002f18 <_Z10Trajectoryv+0x5f0>)
 8002cf0:	f7fd fc82 	bl	80005f8 <__aeabi_dmul>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4614      	mov	r4, r2
 8002cfa:	461d      	mov	r5, r3
 8002cfc:	4b83      	ldr	r3, [pc, #524]	; (8002f0c <_Z10Trajectoryv+0x5e4>)
 8002cfe:	ed93 7a00 	vldr	s14, [r3]
 8002d02:	4b82      	ldr	r3, [pc, #520]	; (8002f0c <_Z10Trajectoryv+0x5e4>)
 8002d04:	edd3 7a00 	vldr	s15, [r3]
 8002d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0c:	ee17 0a90 	vmov	r0, s15
 8002d10:	f7fd fc1a 	bl	8000548 <__aeabi_f2d>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4620      	mov	r0, r4
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	f7fd fc6c 	bl	80005f8 <__aeabi_dmul>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4614      	mov	r4, r2
 8002d26:	461d      	mov	r5, r3
 8002d28:	4b77      	ldr	r3, [pc, #476]	; (8002f08 <_Z10Trajectoryv+0x5e0>)
 8002d2a:	ed93 7a00 	vldr	s14, [r3]
 8002d2e:	4b77      	ldr	r3, [pc, #476]	; (8002f0c <_Z10Trajectoryv+0x5e4>)
 8002d30:	edd3 7a00 	vldr	s15, [r3]
 8002d34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d3c:	4b77      	ldr	r3, [pc, #476]	; (8002f1c <_Z10Trajectoryv+0x5f4>)
 8002d3e:	edd3 7a00 	vldr	s15, [r3]
 8002d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d46:	ee17 0a90 	vmov	r0, s15
 8002d4a:	f7fd fbfd 	bl	8000548 <__aeabi_f2d>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4620      	mov	r0, r4
 8002d54:	4629      	mov	r1, r5
 8002d56:	f7fd fa99 	bl	800028c <__adddf3>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4614      	mov	r4, r2
 8002d60:	461d      	mov	r5, r3
 8002d62:	4b6b      	ldr	r3, [pc, #428]	; (8002f10 <_Z10Trajectoryv+0x5e8>)
 8002d64:	ed93 7a00 	vldr	s14, [r3]
 8002d68:	4b67      	ldr	r3, [pc, #412]	; (8002f08 <_Z10Trajectoryv+0x5e0>)
 8002d6a:	edd3 6a00 	vldr	s13, [r3]
 8002d6e:	4b67      	ldr	r3, [pc, #412]	; (8002f0c <_Z10Trajectoryv+0x5e4>)
 8002d70:	edd3 7a00 	vldr	s15, [r3]
 8002d74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d7c:	4b67      	ldr	r3, [pc, #412]	; (8002f1c <_Z10Trajectoryv+0x5f4>)
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d86:	ee17 0a90 	vmov	r0, s15
 8002d8a:	f7fd fbdd 	bl	8000548 <__aeabi_f2d>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4620      	mov	r0, r4
 8002d94:	4629      	mov	r1, r5
 8002d96:	f7fd fa79 	bl	800028c <__adddf3>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4614      	mov	r4, r2
 8002da0:	461d      	mov	r5, r3
 8002da2:	4b5c      	ldr	r3, [pc, #368]	; (8002f14 <_Z10Trajectoryv+0x5ec>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fbce 	bl	8000548 <__aeabi_f2d>
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	4b59      	ldr	r3, [pc, #356]	; (8002f18 <_Z10Trajectoryv+0x5f0>)
 8002db2:	f7fd fc21 	bl	80005f8 <__aeabi_dmul>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4690      	mov	r8, r2
 8002dbc:	4699      	mov	r9, r3
 8002dbe:	4b54      	ldr	r3, [pc, #336]	; (8002f10 <_Z10Trajectoryv+0x5e8>)
 8002dc0:	ed93 7a00 	vldr	s14, [r3]
 8002dc4:	4b50      	ldr	r3, [pc, #320]	; (8002f08 <_Z10Trajectoryv+0x5e0>)
 8002dc6:	edd3 6a00 	vldr	s13, [r3]
 8002dca:	4b50      	ldr	r3, [pc, #320]	; (8002f0c <_Z10Trajectoryv+0x5e4>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002dd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dd8:	4b4d      	ldr	r3, [pc, #308]	; (8002f10 <_Z10Trajectoryv+0x5e8>)
 8002dda:	edd3 6a00 	vldr	s13, [r3]
 8002dde:	4b4a      	ldr	r3, [pc, #296]	; (8002f08 <_Z10Trajectoryv+0x5e0>)
 8002de0:	ed93 6a00 	vldr	s12, [r3]
 8002de4:	4b49      	ldr	r3, [pc, #292]	; (8002f0c <_Z10Trajectoryv+0x5e4>)
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002dee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df6:	ee17 0a90 	vmov	r0, s15
 8002dfa:	f7fd fba5 	bl	8000548 <__aeabi_f2d>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4640      	mov	r0, r8
 8002e04:	4649      	mov	r1, r9
 8002e06:	f7fd fbf7 	bl	80005f8 <__aeabi_dmul>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4620      	mov	r0, r4
 8002e10:	4629      	mov	r1, r5
 8002e12:	f7fd fa39 	bl	8000288 <__aeabi_dsub>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4614      	mov	r4, r2
 8002e1c:	461d      	mov	r5, r3
 8002e1e:	4b40      	ldr	r3, [pc, #256]	; (8002f20 <_Z10Trajectoryv+0x5f8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd fb90 	bl	8000548 <__aeabi_f2d>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	4629      	mov	r1, r5
 8002e30:	f7fd fa2c 	bl	800028c <__adddf3>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f7fd fe8c 	bl	8000b58 <__aeabi_d2f>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4a38      	ldr	r2, [pc, #224]	; (8002f24 <_Z10Trajectoryv+0x5fc>)
 8002e44:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity-(Acceleration*(TimeinS-(timeFinal-Tb)));
 8002e46:	4b35      	ldr	r3, [pc, #212]	; (8002f1c <_Z10Trajectoryv+0x5f4>)
 8002e48:	ed93 7a00 	vldr	s14, [r3]
 8002e4c:	4b30      	ldr	r3, [pc, #192]	; (8002f10 <_Z10Trajectoryv+0x5e8>)
 8002e4e:	edd3 6a00 	vldr	s13, [r3]
 8002e52:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <_Z10Trajectoryv+0x5e0>)
 8002e54:	ed93 6a00 	vldr	s12, [r3]
 8002e58:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <_Z10Trajectoryv+0x5e4>)
 8002e5a:	edd3 7a00 	vldr	s15, [r3]
 8002e5e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e62:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <_Z10Trajectoryv+0x5ec>)
 8002e68:	edd3 7a00 	vldr	s15, [r3]
 8002e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e74:	4b2c      	ldr	r3, [pc, #176]	; (8002f28 <_Z10Trajectoryv+0x600>)
 8002e76:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = -Acceleration;
 8002e7a:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <_Z10Trajectoryv+0x5ec>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	eef1 7a67 	vneg.f32	s15, s15
 8002e84:	4b29      	ldr	r3, [pc, #164]	; (8002f2c <_Z10Trajectoryv+0x604>)
 8002e86:	edc3 7a00 	vstr	s15, [r3]
			ch = 3;
 8002e8a:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <_Z10Trajectoryv+0x608>)
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e01c      	b.n	8002ecc <_Z10Trajectoryv+0x5a4>
			}
		else if(TimeinS > timeFinal){
 8002e92:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <_Z10Trajectoryv+0x5e8>)
 8002e94:	ed93 7a00 	vldr	s14, [r3]
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <_Z10Trajectoryv+0x5e0>)
 8002e9a:	edd3 7a00 	vldr	s15, [r3]
 8002e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea6:	dd11      	ble.n	8002ecc <_Z10Trajectoryv+0x5a4>
			OutPosition = Distance+Currentpos;
 8002ea8:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <_Z10Trajectoryv+0x60c>)
 8002eaa:	ed93 7a00 	vldr	s14, [r3]
 8002eae:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <_Z10Trajectoryv+0x5f8>)
 8002eb0:	edd3 7a00 	vldr	s15, [r3]
 8002eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <_Z10Trajectoryv+0x5fc>)
 8002eba:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = 0;
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <_Z10Trajectoryv+0x604>)
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
			ch = 4;
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <_Z10Trajectoryv+0x608>)
 8002ec8:	2204      	movs	r2, #4
 8002eca:	701a      	strb	r2, [r3, #0]
			}

		TimeinS = TimeinS + Dt;
 8002ecc:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <_Z10Trajectoryv+0x5e8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd fb39 	bl	8000548 <__aeabi_f2d>
 8002ed6:	a30a      	add	r3, pc, #40	; (adr r3, 8002f00 <_Z10Trajectoryv+0x5d8>)
 8002ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002edc:	f7fd f9d6 	bl	800028c <__adddf3>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f7fd fe36 	bl	8000b58 <__aeabi_d2f>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4a08      	ldr	r2, [pc, #32]	; (8002f10 <_Z10Trajectoryv+0x5e8>)
 8002ef0:	6013      	str	r3, [r2, #0]
		}
	//OutVelocity = 0.523598775 ;

}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	ecbd 8b04 	vpop	{d8-d9}
 8002efa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002efe:	bf00      	nop
 8002f00:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f04:	3f50624d 	.word	0x3f50624d
 8002f08:	20000420 	.word	0x20000420
 8002f0c:	2000041c 	.word	0x2000041c
 8002f10:	20000424 	.word	0x20000424
 8002f14:	2000040c 	.word	0x2000040c
 8002f18:	3fe00000 	.word	0x3fe00000
 8002f1c:	20000408 	.word	0x20000408
 8002f20:	20000428 	.word	0x20000428
 8002f24:	20000410 	.word	0x20000410
 8002f28:	20000414 	.word	0x20000414
 8002f2c:	20000418 	.word	0x20000418
 8002f30:	200005b0 	.word	0x200005b0
 8002f34:	20000404 	.word	0x20000404

08002f38 <_Z10Unwrappingv>:

//////////////////////// [Unwrapping] ///////////////////////
void Unwrapping(){
 8002f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f3c:	af00      	add	r7, sp, #0

	if(micros() - TimeUnwrap >= 1000){
 8002f3e:	f000 fd65 	bl	8003a0c <_Z6microsv>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	494c      	ldr	r1, [pc, #304]	; (8003078 <_Z10Unwrappingv+0x140>)
 8002f48:	6809      	ldr	r1, [r1, #0]
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	4688      	mov	r8, r1
 8002f4e:	4681      	mov	r9, r0
 8002f50:	ebb2 0408 	subs.w	r4, r2, r8
 8002f54:	eb63 0509 	sbc.w	r5, r3, r9
 8002f58:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002f5c:	f175 0300 	sbcs.w	r3, r5, #0
 8002f60:	bf2c      	ite	cs
 8002f62:	2301      	movcs	r3, #1
 8002f64:	2300      	movcc	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d07c      	beq.n	8003066 <_Z10Unwrappingv+0x12e>
		TimeUnwrap = micros();
 8002f6c:	f000 fd4e 	bl	8003a0c <_Z6microsv>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4b40      	ldr	r3, [pc, #256]	; (8003078 <_Z10Unwrappingv+0x140>)
 8002f76:	601a      	str	r2, [r3, #0]
		Pn = BinPosXI*0.006136;
 8002f78:	4b40      	ldr	r3, [pc, #256]	; (800307c <_Z10Unwrappingv+0x144>)
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fad1 	bl	8000524 <__aeabi_i2d>
 8002f82:	a33b      	add	r3, pc, #236	; (adr r3, 8003070 <_Z10Unwrappingv+0x138>)
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f7fd fb36 	bl	80005f8 <__aeabi_dmul>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	f7fd fde0 	bl	8000b58 <__aeabi_d2f>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4a39      	ldr	r2, [pc, #228]	; (8003080 <_Z10Unwrappingv+0x148>)
 8002f9c:	6013      	str	r3, [r2, #0]
		if(Pn-P_n <= -1*e){
 8002f9e:	4b38      	ldr	r3, [pc, #224]	; (8003080 <_Z10Unwrappingv+0x148>)
 8002fa0:	ed93 7a00 	vldr	s14, [r3]
 8002fa4:	4b37      	ldr	r3, [pc, #220]	; (8003084 <_Z10Unwrappingv+0x14c>)
 8002fa6:	edd3 7a00 	vldr	s15, [r3]
 8002faa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fae:	4b36      	ldr	r3, [pc, #216]	; (8003088 <_Z10Unwrappingv+0x150>)
 8002fb0:	edd3 7a00 	vldr	s15, [r3]
 8002fb4:	eef1 7a67 	vneg.f32	s15, s15
 8002fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc0:	d80b      	bhi.n	8002fda <_Z10Unwrappingv+0xa2>
			P0 = P_0 + P_max;
 8002fc2:	4b32      	ldr	r3, [pc, #200]	; (800308c <_Z10Unwrappingv+0x154>)
 8002fc4:	ed93 7a00 	vldr	s14, [r3]
 8002fc8:	4b31      	ldr	r3, [pc, #196]	; (8003090 <_Z10Unwrappingv+0x158>)
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd2:	4b30      	ldr	r3, [pc, #192]	; (8003094 <_Z10Unwrappingv+0x15c>)
 8002fd4:	edc3 7a00 	vstr	s15, [r3]
 8002fd8:	e01f      	b.n	800301a <_Z10Unwrappingv+0xe2>
		}
		else if(Pn - P_n >= e){
 8002fda:	4b29      	ldr	r3, [pc, #164]	; (8003080 <_Z10Unwrappingv+0x148>)
 8002fdc:	ed93 7a00 	vldr	s14, [r3]
 8002fe0:	4b28      	ldr	r3, [pc, #160]	; (8003084 <_Z10Unwrappingv+0x14c>)
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fea:	4b27      	ldr	r3, [pc, #156]	; (8003088 <_Z10Unwrappingv+0x150>)
 8002fec:	edd3 7a00 	vldr	s15, [r3]
 8002ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff8:	db0b      	blt.n	8003012 <_Z10Unwrappingv+0xda>
			P0 = P_0 - P_max;
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <_Z10Unwrappingv+0x154>)
 8002ffc:	ed93 7a00 	vldr	s14, [r3]
 8003000:	4b23      	ldr	r3, [pc, #140]	; (8003090 <_Z10Unwrappingv+0x158>)
 8003002:	edd3 7a00 	vldr	s15, [r3]
 8003006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300a:	4b22      	ldr	r3, [pc, #136]	; (8003094 <_Z10Unwrappingv+0x15c>)
 800300c:	edc3 7a00 	vstr	s15, [r3]
 8003010:	e003      	b.n	800301a <_Z10Unwrappingv+0xe2>
		}
		else{
			P0 = P_0;
 8003012:	4b1e      	ldr	r3, [pc, #120]	; (800308c <_Z10Unwrappingv+0x154>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1f      	ldr	r2, [pc, #124]	; (8003094 <_Z10Unwrappingv+0x15c>)
 8003018:	6013      	str	r3, [r2, #0]
		}

		OutUnwrap = Pn + P0;
 800301a:	4b19      	ldr	r3, [pc, #100]	; (8003080 <_Z10Unwrappingv+0x148>)
 800301c:	ed93 7a00 	vldr	s14, [r3]
 8003020:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <_Z10Unwrappingv+0x15c>)
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <_Z10Unwrappingv+0x160>)
 800302c:	edc3 7a00 	vstr	s15, [r3]
		CurrentEn = BinPosXI * 0.006136;
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <_Z10Unwrappingv+0x144>)
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fa75 	bl	8000524 <__aeabi_i2d>
 800303a:	a30d      	add	r3, pc, #52	; (adr r3, 8003070 <_Z10Unwrappingv+0x138>)
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f7fd fada 	bl	80005f8 <__aeabi_dmul>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f7fd fd84 	bl	8000b58 <__aeabi_d2f>
 8003050:	4603      	mov	r3, r0
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <_Z10Unwrappingv+0x164>)
 8003054:	6013      	str	r3, [r2, #0]
		P_n = Pn;
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <_Z10Unwrappingv+0x148>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <_Z10Unwrappingv+0x14c>)
 800305c:	6013      	str	r3, [r2, #0]
		P_0 = P0;
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <_Z10Unwrappingv+0x15c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a0a      	ldr	r2, [pc, #40]	; (800308c <_Z10Unwrappingv+0x154>)
 8003064:	6013      	str	r3, [r2, #0]
	}
}
 8003066:	bf00      	nop
 8003068:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800306c:	f3af 8000 	nop.w
 8003070:	f540895d 	.word	0xf540895d
 8003074:	3f79220f 	.word	0x3f79220f
 8003078:	20000570 	.word	0x20000570
 800307c:	200003f4 	.word	0x200003f4
 8003080:	20000560 	.word	0x20000560
 8003084:	20000564 	.word	0x20000564
 8003088:	20000014 	.word	0x20000014
 800308c:	2000055c 	.word	0x2000055c
 8003090:	20000010 	.word	0x20000010
 8003094:	20000558 	.word	0x20000558
 8003098:	20000568 	.word	0x20000568
 800309c:	2000056c 	.word	0x2000056c

080030a0 <_Z12Kalmanfilterv>:
	}
}


/////////////////////////// [Kalman Filter] ///////////////////////
void Kalmanfilter(){
 80030a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a4:	b0d4      	sub	sp, #336	; 0x150
 80030a6:	af00      	add	r7, sp, #0

	 if(micros() - TimeStampKalman >= 1000){
 80030a8:	f000 fcb0 	bl	8003a0c <_Z6microsv>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	499c      	ldr	r1, [pc, #624]	; (8003324 <_Z12Kalmanfilterv+0x284>)
 80030b2:	6809      	ldr	r1, [r1, #0]
 80030b4:	2000      	movs	r0, #0
 80030b6:	468a      	mov	sl, r1
 80030b8:	4683      	mov	fp, r0
 80030ba:	ebb2 040a 	subs.w	r4, r2, sl
 80030be:	eb63 050b 	sbc.w	r5, r3, fp
 80030c2:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80030c6:	f175 0300 	sbcs.w	r3, r5, #0
 80030ca:	bf2c      	ite	cs
 80030cc:	2301      	movcs	r3, #1
 80030ce:	2300      	movcc	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 811f 	beq.w	8003316 <_Z12Kalmanfilterv+0x276>
		 TimeStampKalman = micros();
 80030d8:	f000 fc98 	bl	8003a0c <_Z6microsv>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4b90      	ldr	r3, [pc, #576]	; (8003324 <_Z12Kalmanfilterv+0x284>)
 80030e2:	601a      	str	r2, [r3, #0]
		 ////////// Predict ////////////////////
		 Q = G*Q1*G.transpose();
 80030e4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80030e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030ec:	4a8e      	ldr	r2, [pc, #568]	; (8003328 <_Z12Kalmanfilterv+0x288>)
 80030ee:	498f      	ldr	r1, [pc, #572]	; (800332c <_Z12Kalmanfilterv+0x28c>)
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 ff49 	bl	8003f88 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>
 80030f6:	488d      	ldr	r0, [pc, #564]	; (800332c <_Z12Kalmanfilterv+0x28c>)
 80030f8:	f000 ff7f 	bl	8003ffa <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>
 80030fc:	4602      	mov	r2, r0
 80030fe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003102:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800310c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003110:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003114:	f107 011c 	add.w	r1, r7, #28
 8003118:	4618      	mov	r0, r3
 800311a:	f000 ffa0 	bl	800405e <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>
 800311e:	f107 0308 	add.w	r3, r7, #8
 8003122:	4619      	mov	r1, r3
 8003124:	4882      	ldr	r0, [pc, #520]	; (8003330 <_Z12Kalmanfilterv+0x290>)
 8003126:	f000 ffb1 	bl	800408c <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X = A*X1 ;
 800312a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800312e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003132:	4a80      	ldr	r2, [pc, #512]	; (8003334 <_Z12Kalmanfilterv+0x294>)
 8003134:	4980      	ldr	r1, [pc, #512]	; (8003338 <_Z12Kalmanfilterv+0x298>)
 8003136:	4618      	mov	r0, r3
 8003138:	f000 ffb7 	bl	80040aa <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 800313c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003140:	4619      	mov	r1, r3
 8003142:	487e      	ldr	r0, [pc, #504]	; (800333c <_Z12Kalmanfilterv+0x29c>)
 8003144:	f000 ffc8 	bl	80040d8 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 P = A*O*A.transpose()+Q;
 8003148:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800314c:	4a7c      	ldr	r2, [pc, #496]	; (8003340 <_Z12Kalmanfilterv+0x2a0>)
 800314e:	497a      	ldr	r1, [pc, #488]	; (8003338 <_Z12Kalmanfilterv+0x298>)
 8003150:	4618      	mov	r0, r3
 8003152:	f000 ffd0 	bl	80040f6 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>
 8003156:	4878      	ldr	r0, [pc, #480]	; (8003338 <_Z12Kalmanfilterv+0x298>)
 8003158:	f000 ffe4 	bl	8004124 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>
 800315c:	4603      	mov	r3, r0
 800315e:	663b      	str	r3, [r7, #96]	; 0x60
 8003160:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003168:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800316c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003170:	4618      	mov	r0, r3
 8003172:	f000 ffea 	bl	800414a <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>
 8003176:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800317a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800317e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003182:	4a6b      	ldr	r2, [pc, #428]	; (8003330 <_Z12Kalmanfilterv+0x290>)
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fff7 	bl	8004178 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>
 800318a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800318e:	4619      	mov	r1, r3
 8003190:	486c      	ldr	r0, [pc, #432]	; (8003344 <_Z12Kalmanfilterv+0x2a4>)
 8003192:	f001 f80f 	bl	80041b4 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>

		 //////////////// Update /////////////////////
	     Z << OutUnwrap ;
 8003196:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800319a:	4a6b      	ldr	r2, [pc, #428]	; (8003348 <_Z12Kalmanfilterv+0x2a8>)
 800319c:	496b      	ldr	r1, [pc, #428]	; (800334c <_Z12Kalmanfilterv+0x2ac>)
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fe08 	bl	8003db4 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 80031a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fe12 	bl	8003dd2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
	//     Z << DiffVelo ;
		 K = (P*C.transpose())*(C*P*C.transpose()+R).inverse();
 80031ae:	4868      	ldr	r0, [pc, #416]	; (8003350 <_Z12Kalmanfilterv+0x2b0>)
 80031b0:	f001 f80f 	bl	80041d2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031be:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80031c2:	4960      	ldr	r1, [pc, #384]	; (8003344 <_Z12Kalmanfilterv+0x2a4>)
 80031c4:	4618      	mov	r0, r3
 80031c6:	f001 f817 	bl	80041f8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>
 80031ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80031ce:	4a5d      	ldr	r2, [pc, #372]	; (8003344 <_Z12Kalmanfilterv+0x2a4>)
 80031d0:	495f      	ldr	r1, [pc, #380]	; (8003350 <_Z12Kalmanfilterv+0x2b0>)
 80031d2:	4618      	mov	r0, r3
 80031d4:	f001 f827 	bl	8004226 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 80031d8:	485d      	ldr	r0, [pc, #372]	; (8003350 <_Z12Kalmanfilterv+0x2b0>)
 80031da:	f000 fffa 	bl	80041d2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 80031de:	4603      	mov	r3, r0
 80031e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80031e8:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80031ec:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f001 f82f 	bl	8004254 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>
 80031f6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80031fa:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80031fe:	4a55      	ldr	r2, [pc, #340]	; (8003354 <_Z12Kalmanfilterv+0x2b4>)
 8003200:	4618      	mov	r0, r3
 8003202:	f001 f83e 	bl	8004282 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8003206:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800320a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f001 f891 	bl	8004338 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>
 8003216:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800321a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800321e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003222:	4618      	mov	r0, r3
 8003224:	f001 f8c0 	bl	80043a8 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>
 8003228:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800322c:	4619      	mov	r1, r3
 800322e:	484a      	ldr	r0, [pc, #296]	; (8003358 <_Z12Kalmanfilterv+0x2b8>)
 8003230:	f001 f8d1 	bl	80043d6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X1 = X+K*(Z-C*X);
 8003234:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003238:	4a40      	ldr	r2, [pc, #256]	; (800333c <_Z12Kalmanfilterv+0x29c>)
 800323a:	4945      	ldr	r1, [pc, #276]	; (8003350 <_Z12Kalmanfilterv+0x2b0>)
 800323c:	4618      	mov	r0, r3
 800323e:	f001 f8d9 	bl	80043f4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003242:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003246:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800324a:	4940      	ldr	r1, [pc, #256]	; (800334c <_Z12Kalmanfilterv+0x2ac>)
 800324c:	4618      	mov	r0, r3
 800324e:	f001 f8e8 	bl	8004422 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 8003252:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003256:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800325a:	493f      	ldr	r1, [pc, #252]	; (8003358 <_Z12Kalmanfilterv+0x2b8>)
 800325c:	4618      	mov	r0, r3
 800325e:	f001 f91d 	bl	800449c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>
 8003262:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003266:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800326a:	4934      	ldr	r1, [pc, #208]	; (800333c <_Z12Kalmanfilterv+0x29c>)
 800326c:	4618      	mov	r0, r3
 800326e:	f001 f942 	bl	80044f6 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>
 8003272:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003276:	4619      	mov	r1, r3
 8003278:	482e      	ldr	r0, [pc, #184]	; (8003334 <_Z12Kalmanfilterv+0x294>)
 800327a:	f001 f95a 	bl	8004532 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>
		 O = (I-(K*C))*P;
 800327e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003282:	4a33      	ldr	r2, [pc, #204]	; (8003350 <_Z12Kalmanfilterv+0x2b0>)
 8003284:	4934      	ldr	r1, [pc, #208]	; (8003358 <_Z12Kalmanfilterv+0x2b8>)
 8003286:	4618      	mov	r0, r3
 8003288:	f001 f962 	bl	8004550 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 800328c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003290:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003294:	4931      	ldr	r1, [pc, #196]	; (800335c <_Z12Kalmanfilterv+0x2bc>)
 8003296:	4618      	mov	r0, r3
 8003298:	f001 f971 	bl	800457e <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 800329c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80032a0:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80032a4:	4a27      	ldr	r2, [pc, #156]	; (8003344 <_Z12Kalmanfilterv+0x2a4>)
 80032a6:	4618      	mov	r0, r3
 80032a8:	f001 f9a6 	bl	80045f8 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>
 80032ac:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80032b0:	4619      	mov	r1, r3
 80032b2:	4823      	ldr	r0, [pc, #140]	; (8003340 <_Z12Kalmanfilterv+0x2a0>)
 80032b4:	f001 f9b7 	bl	8004626 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>

		 KalP = X(0,0);
 80032b8:	2200      	movs	r2, #0
 80032ba:	2100      	movs	r1, #0
 80032bc:	481f      	ldr	r0, [pc, #124]	; (800333c <_Z12Kalmanfilterv+0x29c>)
 80032be:	f000 fe1f 	bl	8003f00 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80032c2:	4603      	mov	r3, r0
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a26      	ldr	r2, [pc, #152]	; (8003360 <_Z12Kalmanfilterv+0x2c0>)
 80032c8:	6013      	str	r3, [r2, #0]
		 KalV = X(1,0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2101      	movs	r1, #1
 80032ce:	481b      	ldr	r0, [pc, #108]	; (800333c <_Z12Kalmanfilterv+0x29c>)
 80032d0:	f000 fe16 	bl	8003f00 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80032d4:	4603      	mov	r3, r0
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a22      	ldr	r2, [pc, #136]	; (8003364 <_Z12Kalmanfilterv+0x2c4>)
 80032da:	6013      	str	r3, [r2, #0]
		 KalA = X(2,0);
 80032dc:	2200      	movs	r2, #0
 80032de:	2102      	movs	r1, #2
 80032e0:	4816      	ldr	r0, [pc, #88]	; (800333c <_Z12Kalmanfilterv+0x29c>)
 80032e2:	f000 fe0d 	bl	8003f00 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80032e6:	4603      	mov	r3, r0
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <_Z12Kalmanfilterv+0x2c8>)
 80032ec:	6013      	str	r3, [r2, #0]
		 runtime = micros()-TimeStampKalman;
 80032ee:	f000 fb8d 	bl	8003a0c <_Z6microsv>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	490b      	ldr	r1, [pc, #44]	; (8003324 <_Z12Kalmanfilterv+0x284>)
 80032f8:	6809      	ldr	r1, [r1, #0]
 80032fa:	2000      	movs	r0, #0
 80032fc:	4688      	mov	r8, r1
 80032fe:	4681      	mov	r9, r0
 8003300:	ebb2 0108 	subs.w	r1, r2, r8
 8003304:	6039      	str	r1, [r7, #0]
 8003306:	eb63 0309 	sbc.w	r3, r3, r9
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <_Z12Kalmanfilterv+0x2cc>)
 800330e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003312:	e9c3 1200 	strd	r1, r2, [r3]

	     //ErrPos[0] = TargetDeg - BinPosXI*0.006136;
	 }

}
 8003316:	bf00      	nop
 8003318:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800331c:	46bd      	mov	sp, r7
 800331e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003322:	bf00      	nop
 8003324:	20000434 	.word	0x20000434
 8003328:	2000000c 	.word	0x2000000c
 800332c:	200004f8 	.word	0x200004f8
 8003330:	20000504 	.word	0x20000504
 8003334:	20000534 	.word	0x20000534
 8003338:	20000440 	.word	0x20000440
 800333c:	20000528 	.word	0x20000528
 8003340:	20000488 	.word	0x20000488
 8003344:	20000464 	.word	0x20000464
 8003348:	20000568 	.word	0x20000568
 800334c:	200004dc 	.word	0x200004dc
 8003350:	200004ec 	.word	0x200004ec
 8003354:	200004d4 	.word	0x200004d4
 8003358:	200004e0 	.word	0x200004e0
 800335c:	200004ac 	.word	0x200004ac
 8003360:	2000054c 	.word	0x2000054c
 8003364:	20000550 	.word	0x20000550
 8003368:	20000554 	.word	0x20000554
 800336c:	20000438 	.word	0x20000438

08003370 <_Z11PIDPositionv>:

///////////////////// [PID cat cat Zero] /////////////////////////////
void PIDPosition(){
 8003370:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003374:	af00      	add	r7, sp, #0
	/*CrrntTime = micros();
	//DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
	PreviTime = CrrntTime; // log previ here for next loop
	*/
	if(micros() - TimeStampPID_P >= 1000){
 8003376:	f000 fb49 	bl	8003a0c <_Z6microsv>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4936      	ldr	r1, [pc, #216]	; (8003458 <_Z11PIDPositionv+0xe8>)
 8003380:	6809      	ldr	r1, [r1, #0]
 8003382:	2000      	movs	r0, #0
 8003384:	4688      	mov	r8, r1
 8003386:	4681      	mov	r9, r0
 8003388:	ebb2 0408 	subs.w	r4, r2, r8
 800338c:	eb63 0509 	sbc.w	r5, r3, r9
 8003390:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8003394:	f175 0300 	sbcs.w	r3, r5, #0
 8003398:	bf2c      	ite	cs
 800339a:	2301      	movcs	r3, #1
 800339c:	2300      	movcc	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d055      	beq.n	8003450 <_Z11PIDPositionv+0xe0>
		TimeStampPID_P = micros();
 80033a4:	f000 fb32 	bl	8003a0c <_Z6microsv>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <_Z11PIDPositionv+0xe8>)
 80033ae:	601a      	str	r2, [r3, #0]

		ErrPos[0] = OutPosition - KalP;
 80033b0:	4b2a      	ldr	r3, [pc, #168]	; (800345c <_Z11PIDPositionv+0xec>)
 80033b2:	ed93 7a00 	vldr	s14, [r3]
 80033b6:	4b2a      	ldr	r3, [pc, #168]	; (8003460 <_Z11PIDPositionv+0xf0>)
 80033b8:	edd3 7a00 	vldr	s15, [r3]
 80033bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c0:	4b28      	ldr	r3, [pc, #160]	; (8003464 <_Z11PIDPositionv+0xf4>)
 80033c2:	edc3 7a00 	vstr	s15, [r3]
	//	ErrPos[0] = OutVelocity - KalV;
		sumError = sumError + ErrPos[0];
 80033c6:	4b27      	ldr	r3, [pc, #156]	; (8003464 <_Z11PIDPositionv+0xf4>)
 80033c8:	ed93 7a00 	vldr	s14, [r3]
 80033cc:	4b26      	ldr	r3, [pc, #152]	; (8003468 <_Z11PIDPositionv+0xf8>)
 80033ce:	edd3 7a00 	vldr	s15, [r3]
 80033d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d6:	4b24      	ldr	r3, [pc, #144]	; (8003468 <_Z11PIDPositionv+0xf8>)
 80033d8:	edc3 7a00 	vstr	s15, [r3]

		Propo = K_P * ErrPos[0];
 80033dc:	4b21      	ldr	r3, [pc, #132]	; (8003464 <_Z11PIDPositionv+0xf4>)
 80033de:	ed93 7a00 	vldr	s14, [r3]
 80033e2:	4b22      	ldr	r3, [pc, #136]	; (800346c <_Z11PIDPositionv+0xfc>)
 80033e4:	edd3 7a00 	vldr	s15, [r3]
 80033e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ec:	4b20      	ldr	r3, [pc, #128]	; (8003470 <_Z11PIDPositionv+0x100>)
 80033ee:	edc3 7a00 	vstr	s15, [r3]

		Integral = K_I * sumError; // Integral -Newton-Leibniz
 80033f2:	4b20      	ldr	r3, [pc, #128]	; (8003474 <_Z11PIDPositionv+0x104>)
 80033f4:	ed93 7a00 	vldr	s14, [r3]
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <_Z11PIDPositionv+0xf8>)
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003402:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <_Z11PIDPositionv+0x108>)
 8003404:	edc3 7a00 	vstr	s15, [r3]

		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 8003408:	4b16      	ldr	r3, [pc, #88]	; (8003464 <_Z11PIDPositionv+0xf4>)
 800340a:	ed93 7a00 	vldr	s14, [r3]
 800340e:	4b15      	ldr	r3, [pc, #84]	; (8003464 <_Z11PIDPositionv+0xf4>)
 8003410:	edd3 7a01 	vldr	s15, [r3, #4]
 8003414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003418:	4b18      	ldr	r3, [pc, #96]	; (800347c <_Z11PIDPositionv+0x10c>)
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	4b17      	ldr	r3, [pc, #92]	; (8003480 <_Z11PIDPositionv+0x110>)
 8003424:	edc3 7a00 	vstr	s15, [r3]

		ufromposit = Propo + Integral + Derivate;
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <_Z11PIDPositionv+0x100>)
 800342a:	ed93 7a00 	vldr	s14, [r3]
 800342e:	4b12      	ldr	r3, [pc, #72]	; (8003478 <_Z11PIDPositionv+0x108>)
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003438:	4b11      	ldr	r3, [pc, #68]	; (8003480 <_Z11PIDPositionv+0x110>)
 800343a:	edd3 7a00 	vldr	s15, [r3]
 800343e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <_Z11PIDPositionv+0x114>)
 8003444:	edc3 7a00 	vstr	s15, [r3]

		//u_contr = ufromposit ;
		ErrPos[1] = ErrPos[0]; // log previous error
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <_Z11PIDPositionv+0xf4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a05      	ldr	r2, [pc, #20]	; (8003464 <_Z11PIDPositionv+0xf4>)
 800344e:	6053      	str	r3, [r2, #4]
	}
}
 8003450:	bf00      	nop
 8003452:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003456:	bf00      	nop
 8003458:	20000574 	.word	0x20000574
 800345c:	20000410 	.word	0x20000410
 8003460:	2000054c 	.word	0x2000054c
 8003464:	2000057c 	.word	0x2000057c
 8003468:	20000588 	.word	0x20000588
 800346c:	2000001c 	.word	0x2000001c
 8003470:	2000058c 	.word	0x2000058c
 8003474:	20000020 	.word	0x20000020
 8003478:	20000590 	.word	0x20000590
 800347c:	20000024 	.word	0x20000024
 8003480:	20000594 	.word	0x20000594
 8003484:	20000584 	.word	0x20000584

08003488 <_Z11PIDVelocityv>:

void PIDVelocity(){
 8003488:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800348c:	af00      	add	r7, sp, #0

	if(micros() - TimeStampPID_V >= 1000){
 800348e:	f000 fabd 	bl	8003a0c <_Z6microsv>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	492f      	ldr	r1, [pc, #188]	; (8003554 <_Z11PIDVelocityv+0xcc>)
 8003498:	6809      	ldr	r1, [r1, #0]
 800349a:	2000      	movs	r0, #0
 800349c:	4688      	mov	r8, r1
 800349e:	4681      	mov	r9, r0
 80034a0:	ebb2 0408 	subs.w	r4, r2, r8
 80034a4:	eb63 0509 	sbc.w	r5, r3, r9
 80034a8:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80034ac:	f175 0300 	sbcs.w	r3, r5, #0
 80034b0:	bf2c      	ite	cs
 80034b2:	2301      	movcs	r3, #1
 80034b4:	2300      	movcc	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d048      	beq.n	800354e <_Z11PIDVelocityv+0xc6>
		TimeStampPID_V = micros();
 80034bc:	f000 faa6 	bl	8003a0c <_Z6microsv>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4b23      	ldr	r3, [pc, #140]	; (8003554 <_Z11PIDVelocityv+0xcc>)
 80034c6:	601a      	str	r2, [r3, #0]
		Vcontr[1] = Vcontr[0] ;
		ErrVelo[2] = ErrVelo[1] ;
		ErrVelo[1] = ErrVelo[0] ;
		*/

		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 80034c8:	4b23      	ldr	r3, [pc, #140]	; (8003558 <_Z11PIDVelocityv+0xd0>)
 80034ca:	ed93 7a00 	vldr	s14, [r3]
 80034ce:	4b23      	ldr	r3, [pc, #140]	; (800355c <_Z11PIDVelocityv+0xd4>)
 80034d0:	edd3 7a00 	vldr	s15, [r3]
 80034d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034d8:	4b21      	ldr	r3, [pc, #132]	; (8003560 <_Z11PIDVelocityv+0xd8>)
 80034da:	edd3 7a00 	vldr	s15, [r3]
 80034de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e2:	4b20      	ldr	r3, [pc, #128]	; (8003564 <_Z11PIDVelocityv+0xdc>)
 80034e4:	edc3 7a00 	vstr	s15, [r3]
		SumAll = SumAll + ErrVelo[0];
 80034e8:	4b1e      	ldr	r3, [pc, #120]	; (8003564 <_Z11PIDVelocityv+0xdc>)
 80034ea:	ed93 7a00 	vldr	s14, [r3]
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <_Z11PIDVelocityv+0xe0>)
 80034f0:	edd3 7a00 	vldr	s15, [r3]
 80034f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <_Z11PIDVelocityv+0xe0>)
 80034fa:	edc3 7a00 	vstr	s15, [r3]

		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 80034fe:	4b19      	ldr	r3, [pc, #100]	; (8003564 <_Z11PIDVelocityv+0xdc>)
 8003500:	ed93 7a00 	vldr	s14, [r3]
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <_Z11PIDVelocityv+0xe4>)
 8003506:	edd3 7a00 	vldr	s15, [r3]
 800350a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800350e:	4b18      	ldr	r3, [pc, #96]	; (8003570 <_Z11PIDVelocityv+0xe8>)
 8003510:	edd3 6a00 	vldr	s13, [r3]
 8003514:	4b14      	ldr	r3, [pc, #80]	; (8003568 <_Z11PIDVelocityv+0xe0>)
 8003516:	edd3 7a00 	vldr	s15, [r3]
 800351a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800351e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <_Z11PIDVelocityv+0xdc>)
 8003524:	edd3 6a00 	vldr	s13, [r3]
 8003528:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <_Z11PIDVelocityv+0xdc>)
 800352a:	edd3 7a01 	vldr	s15, [r3, #4]
 800352e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <_Z11PIDVelocityv+0xec>)
 8003534:	edd3 7a00 	vldr	s15, [r3]
 8003538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003540:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <_Z11PIDVelocityv+0xf0>)
 8003542:	edc3 7a00 	vstr	s15, [r3]
		ErrVelo[1] = ErrVelo[0]; // log previous error
 8003546:	4b07      	ldr	r3, [pc, #28]	; (8003564 <_Z11PIDVelocityv+0xdc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a06      	ldr	r2, [pc, #24]	; (8003564 <_Z11PIDVelocityv+0xdc>)
 800354c:	6053      	str	r3, [r2, #4]
		}
}
 800354e:	bf00      	nop
 8003550:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003554:	200005a8 	.word	0x200005a8
 8003558:	20000414 	.word	0x20000414
 800355c:	20000584 	.word	0x20000584
 8003560:	20000550 	.word	0x20000550
 8003564:	20000598 	.word	0x20000598
 8003568:	200005a4 	.word	0x200005a4
 800356c:	20000028 	.word	0x20000028
 8003570:	2000002c 	.word	0x2000002c
 8003574:	20000024 	.word	0x20000024
 8003578:	200005ac 	.word	0x200005ac
 800357c:	00000000 	.word	0x00000000

08003580 <_Z11controlloopv>:

void controlloop(){
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0

	if( abs( OutPosition - KalP) < 0.01 && KalV < 0.0005){
 8003584:	4b22      	ldr	r3, [pc, #136]	; (8003610 <_Z11controlloopv+0x90>)
 8003586:	ed93 7a00 	vldr	s14, [r3]
 800358a:	4b22      	ldr	r3, [pc, #136]	; (8003614 <_Z11controlloopv+0x94>)
 800358c:	edd3 7a00 	vldr	s15, [r3]
 8003590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003594:	eeb0 0a67 	vmov.f32	s0, s15
 8003598:	f7fd fcb0 	bl	8000efc <_ZSt3absf>
 800359c:	ee10 3a10 	vmov	r3, s0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ffd1 	bl	8000548 <__aeabi_f2d>
 80035a6:	a316      	add	r3, pc, #88	; (adr r3, 8003600 <_Z11controlloopv+0x80>)
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f7fd fa96 	bl	8000adc <__aeabi_dcmplt>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00e      	beq.n	80035d4 <_Z11controlloopv+0x54>
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <_Z11controlloopv+0x98>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fc ffc4 	bl	8000548 <__aeabi_f2d>
 80035c0:	a311      	add	r3, pc, #68	; (adr r3, 8003608 <_Z11controlloopv+0x88>)
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	f7fd fa89 	bl	8000adc <__aeabi_dcmplt>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <_Z11controlloopv+0x54>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <_Z11controlloopv+0x56>
 80035d4:	2300      	movs	r3, #0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <_Z11controlloopv+0x6e>
		PWMOut = 0;
 80035da:	4b10      	ldr	r3, [pc, #64]	; (800361c <_Z11controlloopv+0x9c>)
 80035dc:	2200      	movs	r2, #0
 80035de:	801a      	strh	r2, [r3, #0]
		check = 8;
 80035e0:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <_Z11controlloopv+0xa0>)
 80035e2:	2208      	movs	r2, #8
 80035e4:	701a      	strb	r2, [r3, #0]
		flag_finishTra = 1;
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <_Z11controlloopv+0xa4>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
	else{
		PIDPosition();
		PIDVelocity();
		MotDrvCytron();
	}
}
 80035ec:	e005      	b.n	80035fa <_Z11controlloopv+0x7a>
		PIDPosition();
 80035ee:	f7ff febf 	bl	8003370 <_Z11PIDPositionv>
		PIDVelocity();
 80035f2:	f7ff ff49 	bl	8003488 <_Z11PIDVelocityv>
		MotDrvCytron();
 80035f6:	f000 f817 	bl	8003628 <_Z12MotDrvCytronv>
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	47ae147b 	.word	0x47ae147b
 8003604:	3f847ae1 	.word	0x3f847ae1
 8003608:	d2f1a9fc 	.word	0xd2f1a9fc
 800360c:	3f40624d 	.word	0x3f40624d
 8003610:	20000410 	.word	0x20000410
 8003614:	2000054c 	.word	0x2000054c
 8003618:	20000550 	.word	0x20000550
 800361c:	2000000a 	.word	0x2000000a
 8003620:	200005b1 	.word	0x200005b1
 8003624:	200003e8 	.word	0x200003e8

08003628 <_Z12MotDrvCytronv>:


void MotDrvCytron(){
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0

	//   direction chk
	if(u_contr < 0){mot_dirctn= 0;}
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <_Z12MotDrvCytronv+0x9c>)
 800362e:	edd3 7a00 	vldr	s15, [r3]
 8003632:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363a:	d503      	bpl.n	8003644 <_Z12MotDrvCytronv+0x1c>
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <_Z12MotDrvCytronv+0xa0>)
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e00e      	b.n	8003662 <_Z12MotDrvCytronv+0x3a>
	else if(u_contr > 0) {mot_dirctn = 1;}
 8003644:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <_Z12MotDrvCytronv+0x9c>)
 8003646:	edd3 7a00 	vldr	s15, [r3]
 800364a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800364e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003652:	dd03      	ble.n	800365c <_Z12MotDrvCytronv+0x34>
 8003654:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <_Z12MotDrvCytronv+0xa0>)
 8003656:	2201      	movs	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	e002      	b.n	8003662 <_Z12MotDrvCytronv+0x3a>
	else{PWMOut = 0;}
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <_Z12MotDrvCytronv+0xa4>)
 800365e:	2200      	movs	r2, #0
 8003660:	801a      	strh	r2, [r3, #0]


	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 8003662:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <_Z12MotDrvCytronv+0x9c>)
 8003664:	edd3 7a00 	vldr	s15, [r3]
 8003668:	eef0 7ae7 	vabs.f32	s15, s15
 800366c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003670:	ee17 3a90 	vmov	r3, s15
 8003674:	b29a      	uxth	r2, r3
 8003676:	4b15      	ldr	r3, [pc, #84]	; (80036cc <_Z12MotDrvCytronv+0xa4>)
 8003678:	801a      	strh	r2, [r3, #0]
	if(PWMOut > 5000){PWMOut = 5000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <_Z12MotDrvCytronv+0xa4>)
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d903      	bls.n	800368e <_Z12MotDrvCytronv+0x66>
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <_Z12MotDrvCytronv+0xa4>)
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	801a      	strh	r2, [r3, #0]
	if(PWMOut < 1600 && fabsf(ErrPos[0]) >= 4){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
 800368e:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <_Z12MotDrvCytronv+0xa4>)
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003696:	d210      	bcs.n	80036ba <_Z12MotDrvCytronv+0x92>
 8003698:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <_Z12MotDrvCytronv+0xa8>)
 800369a:	edd3 7a00 	vldr	s15, [r3]
 800369e:	eef0 7ae7 	vabs.f32	s15, s15
 80036a2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80036a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ae:	da00      	bge.n	80036b2 <_Z12MotDrvCytronv+0x8a>
	//if(flag_finishTra == 1){PWMOut = 0;}
}
 80036b0:	e003      	b.n	80036ba <_Z12MotDrvCytronv+0x92>
	if(PWMOut < 1600 && fabsf(ErrPos[0]) >= 4){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <_Z12MotDrvCytronv+0xa4>)
 80036b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80036b8:	801a      	strh	r2, [r3, #0]
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	200005ac 	.word	0x200005ac
 80036c8:	200003fc 	.word	0x200003fc
 80036cc:	2000000a 	.word	0x2000000a
 80036d0:	2000057c 	.word	0x2000057c

080036d4 <_Z13GraytoBinarioth>:

///////////////////// [Abs Encoder I2C] ////////////////////////////////////////////
////////// [Absolute Encoder] ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	460a      	mov	r2, r1
 80036de:	80fb      	strh	r3, [r7, #6]
 80036e0:	4613      	mov	r3, r2
 80036e2:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 80036e8:	88fa      	ldrh	r2, [r7, #6]
 80036ea:	797b      	ldrb	r3, [r7, #5]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	fa42 f303 	asr.w	r3, r2, r3
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 80036fa:	2301      	movs	r3, #1
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	797b      	ldrb	r3, [r7, #5]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	429a      	cmp	r2, r3
 8003704:	da1e      	bge.n	8003744 <_Z13GraytoBinarioth+0x70>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 8003706:	8afb      	ldrh	r3, [r7, #22]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 800370e:	88fa      	ldrh	r2, [r7, #6]
 8003710:	7979      	ldrb	r1, [r7, #5]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	3301      	adds	r3, #1
 8003716:	1acb      	subs	r3, r1, r3
 8003718:	fa42 f303 	asr.w	r3, r2, r3
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	429a      	cmp	r2, r3
 8003728:	d103      	bne.n	8003732 <_Z13GraytoBinarioth+0x5e>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 800372a:	8afb      	ldrh	r3, [r7, #22]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	82fb      	strh	r3, [r7, #22]
 8003730:	e004      	b.n	800373c <_Z13GraytoBinarioth+0x68>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8003732:	8afb      	ldrh	r3, [r7, #22]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	b29b      	uxth	r3, r3
 8003738:	3301      	adds	r3, #1
 800373a:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	3301      	adds	r3, #1
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	e7dc      	b.n	80036fe <_Z13GraytoBinarioth+0x2a>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 8003744:	8afb      	ldrh	r3, [r7, #22]
}
 8003746:	4618      	mov	r0, r3
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <_Z14IOExpenderInitv>:

void IOExpenderInit() {// call when start system
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 800375a:	2364      	movs	r3, #100	; 0x64
 800375c:	9302      	str	r3, [sp, #8]
 800375e:	2316      	movs	r3, #22
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <_Z14IOExpenderInitv+0x24>)
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	2301      	movs	r3, #1
 8003768:	2200      	movs	r2, #0
 800376a:	2140      	movs	r1, #64	; 0x40
 800376c:	4803      	ldr	r0, [pc, #12]	; (800377c <_Z14IOExpenderInitv+0x28>)
 800376e:	f013 fcc3 	bl	80170f8 <HAL_I2C_Mem_Write>
			0x16, 100);
}
 8003772:	bf00      	nop
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000044 	.word	0x20000044
 800377c:	200000f4 	.word	0x200000f4

08003780 <_Z14AbsEncI2CReadxPh>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af04      	add	r7, sp, #16
 8003786:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8003788:	4b28      	ldr	r3, [pc, #160]	; (800382c <_Z14AbsEncI2CReadxPh+0xac>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <_Z14AbsEncI2CReadxPh+0x20>
 8003790:	4b27      	ldr	r3, [pc, #156]	; (8003830 <_Z14AbsEncI2CReadxPh+0xb0>)
 8003792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b20      	cmp	r3, #32
 800379a:	d101      	bne.n	80037a0 <_Z14AbsEncI2CReadxPh+0x20>
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <_Z14AbsEncI2CReadxPh+0x22>
 80037a0:	2300      	movs	r3, #0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d03e      	beq.n	8003824 <_Z14AbsEncI2CReadxPh+0xa4>
		switch(flag_absenc){
 80037a6:	4b21      	ldr	r3, [pc, #132]	; (800382c <_Z14AbsEncI2CReadxPh+0xac>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d002      	beq.n	80037b4 <_Z14AbsEncI2CReadxPh+0x34>
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d010      	beq.n	80037d4 <_Z14AbsEncI2CReadxPh+0x54>
		default:
			break;
 80037b2:	e037      	b.n	8003824 <_Z14AbsEncI2CReadxPh+0xa4>

		case 1:
			//HAL_I2C_Master_Receive(&hi2c1, ADDR_IOXT, GrayCBitx, 1, 100);
			//HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, Size, XferOptions);
			HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 80037b4:	2364      	movs	r3, #100	; 0x64
 80037b6:	9302      	str	r3, [sp, #8]
 80037b8:	2302      	movs	r3, #2
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	2301      	movs	r3, #1
 80037c2:	2212      	movs	r2, #18
 80037c4:	2140      	movs	r1, #64	; 0x40
 80037c6:	481a      	ldr	r0, [pc, #104]	; (8003830 <_Z14AbsEncI2CReadxPh+0xb0>)
 80037c8:	f013 fd90 	bl	80172ec <HAL_I2C_Mem_Read>
						RawRAB, 2, 100);
			flag_absenc = 2;
 80037cc:	4b17      	ldr	r3, [pc, #92]	; (800382c <_Z14AbsEncI2CReadxPh+0xac>)
 80037ce:	2202      	movs	r2, #2
 80037d0:	701a      	strb	r2, [r3, #0]
		break;
 80037d2:	e027      	b.n	8003824 <_Z14AbsEncI2CReadxPh+0xa4>

		case 2:
			//invert in IPOL
			GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 80037d4:	4b17      	ldr	r3, [pc, #92]	; (8003834 <_Z14AbsEncI2CReadxPh+0xb4>)
 80037d6:	785b      	ldrb	r3, [r3, #1]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	b21a      	sxth	r2, r3
 80037dc:	4b15      	ldr	r3, [pc, #84]	; (8003834 <_Z14AbsEncI2CReadxPh+0xb4>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	b21b      	sxth	r3, r3
 80037e2:	4313      	orrs	r3, r2
 80037e4:	b21b      	sxth	r3, r3
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	4b13      	ldr	r3, [pc, #76]	; (8003838 <_Z14AbsEncI2CReadxPh+0xb8>)
 80037ea:	801a      	strh	r2, [r3, #0]

			//GrayCBitXI = ~GrayCBitx - 0b1111110000000000; // invert and clear 6 high
			//GrayCBitXI = ~GrayCBitx & 0b0000001111111111;
			BinPosXI = GraytoBinario(GrayCBitXI, 10) + POSOFFSET;  //
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <_Z14AbsEncI2CReadxPh+0xb8>)
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	210a      	movs	r1, #10
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff ff6e 	bl	80036d4 <_Z13GraytoBinarioth>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f2a3 3341 	subw	r3, r3, #833	; 0x341
 80037fe:	b29a      	uxth	r2, r3
 8003800:	4b0e      	ldr	r3, [pc, #56]	; (800383c <_Z14AbsEncI2CReadxPh+0xbc>)
 8003802:	801a      	strh	r2, [r3, #0]
			if (BinPosXI >= 1024){BinPosXI = BinPosXI % 1024;}
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <_Z14AbsEncI2CReadxPh+0xbc>)
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380c:	d306      	bcc.n	800381c <_Z14AbsEncI2CReadxPh+0x9c>
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <_Z14AbsEncI2CReadxPh+0xbc>)
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003816:	b29a      	uxth	r2, r3
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <_Z14AbsEncI2CReadxPh+0xbc>)
 800381a:	801a      	strh	r2, [r3, #0]
			flag_absenc = 0;
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <_Z14AbsEncI2CReadxPh+0xac>)
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]
		break;
 8003822:	bf00      	nop
		}
	}

}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	200003f6 	.word	0x200003f6
 8003830:	200000f4 	.word	0x200000f4
 8003834:	200003f0 	.word	0x200003f0
 8003838:	200003f2 	.word	0x200003f2
 800383c:	200003f4 	.word	0x200003f4

08003840 <_Z13Efft_activatev>:

/////////////////////// [End Effector] //////////////////////////////////

void Efft_activate(){
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 8003846:	2345      	movs	r3, #69	; 0x45
 8003848:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;
	switch(efshoot){
 800384a:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <_Z13Efft_activatev+0x90>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d01a      	beq.n	8003888 <_Z13Efft_activatev+0x48>
	default:
	case ef_INIT:
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <_Z13Efft_activatev+0x94>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <_Z13Efft_activatev+0x2a>
 800385a:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <_Z13Efft_activatev+0x98>)
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b20      	cmp	r3, #32
 8003864:	d101      	bne.n	800386a <_Z13Efft_activatev+0x2a>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <_Z13Efft_activatev+0x2c>
 800386a:	2300      	movs	r3, #0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d028      	beq.n	80038c2 <_Z13Efft_activatev+0x82>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 8003870:	1dfa      	adds	r2, r7, #7
 8003872:	2301      	movs	r3, #1
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	2300      	movs	r3, #0
 8003878:	2146      	movs	r1, #70	; 0x46
 800387a:	4817      	ldr	r0, [pc, #92]	; (80038d8 <_Z13Efft_activatev+0x98>)
 800387c:	f013 ff5c 	bl	8017738 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
 8003880:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <_Z13Efft_activatev+0x90>)
 8003882:	2201      	movs	r2, #1
 8003884:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003886:	e01c      	b.n	80038c2 <_Z13Efft_activatev+0x82>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 8003888:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <_Z13Efft_activatev+0x98>)
 800388a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b20      	cmp	r3, #32
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d013      	beq.n	80038c6 <_Z13Efft_activatev+0x86>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 800389e:	1dfa      	adds	r2, r7, #7
 80038a0:	2320      	movs	r3, #32
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	2301      	movs	r3, #1
 80038a6:	2146      	movs	r1, #70	; 0x46
 80038a8:	480b      	ldr	r0, [pc, #44]	; (80038d8 <_Z13Efft_activatev+0x98>)
 80038aa:	f013 ff45 	bl	8017738 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <_Z13Efft_activatev+0x90>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 80038b4:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <_Z13Efft_activatev+0x94>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 1;
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <_Z13Efft_activatev+0x9c>)
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
		}
	break;
 80038c0:	e001      	b.n	80038c6 <_Z13Efft_activatev+0x86>
	break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <_Z13Efft_activatev+0x88>
	break;
 80038c6:	bf00      	nop
	}

}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000628 	.word	0x20000628
 80038d4:	200005b3 	.word	0x200005b3
 80038d8:	20000148 	.word	0x20000148
 80038dc:	200005b5 	.word	0x200005b5

080038e0 <_Z9Efft_readPh>:

void Efft_read(uint8_t *Rddata){
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	6078      	str	r0, [r7, #4]
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	static uint8_t efrdStatus = 0;
	switch(efrdStatus){
 80038e8:	4b1f      	ldr	r3, [pc, #124]	; (8003968 <_Z9Efft_readPh+0x88>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d01a      	beq.n	8003926 <_Z9Efft_readPh+0x46>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 80038f0:	4b1e      	ldr	r3, [pc, #120]	; (800396c <_Z9Efft_readPh+0x8c>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <_Z9Efft_readPh+0x28>
 80038f8:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <_Z9Efft_readPh+0x90>)
 80038fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b20      	cmp	r3, #32
 8003902:	d101      	bne.n	8003908 <_Z9Efft_readPh+0x28>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <_Z9Efft_readPh+0x2a>
 8003908:	2300      	movs	r3, #0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d025      	beq.n	800395a <_Z9Efft_readPh+0x7a>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 800390e:	2302      	movs	r3, #2
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	2301      	movs	r3, #1
 8003914:	4a17      	ldr	r2, [pc, #92]	; (8003974 <_Z9Efft_readPh+0x94>)
 8003916:	2146      	movs	r1, #70	; 0x46
 8003918:	4815      	ldr	r0, [pc, #84]	; (8003970 <_Z9Efft_readPh+0x90>)
 800391a:	f013 ff0d 	bl	8017738 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <_Z9Efft_readPh+0x88>)
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003924:	e019      	b.n	800395a <_Z9Efft_readPh+0x7a>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <_Z9Efft_readPh+0x90>)
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b20      	cmp	r3, #32
 8003930:	bf0c      	ite	eq
 8003932:	2301      	moveq	r3, #1
 8003934:	2300      	movne	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d010      	beq.n	800395e <_Z9Efft_readPh+0x7e>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 800393c:	2320      	movs	r3, #32
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2301      	movs	r3, #1
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	2146      	movs	r1, #70	; 0x46
 8003946:	480a      	ldr	r0, [pc, #40]	; (8003970 <_Z9Efft_readPh+0x90>)
 8003948:	f013 ffbc 	bl	80178c4 <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <_Z9Efft_readPh+0x8c>)
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <_Z9Efft_readPh+0x88>)
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]
			}
	break;
 8003958:	e001      	b.n	800395e <_Z9Efft_readPh+0x7e>
	break;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <_Z9Efft_readPh+0x80>
	break;
 800395e:	bf00      	nop
	}

}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000629 	.word	0x20000629
 800396c:	200005b4 	.word	0x200005b4
 8003970:	20000148 	.word	0x20000148
 8003974:	2000005a 	.word	0x2000005a

08003978 <HAL_GPIO_EXTI_Callback>:

/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	80fb      	strh	r3, [r7, #6]
	//============// EMER ////=====================
	if(GPIO_Pin == GPIO_PIN_11){
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003988:	d108      	bne.n	800399c <HAL_GPIO_EXTI_Callback+0x24>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		//counter_e++;
		grandState = emer;
 800398a:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x80>)
 800398c:	2203      	movs	r2, #3
 800398e:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 8003990:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <HAL_GPIO_EXTI_Callback+0x84>)
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 8003996:	4b1a      	ldr	r3, [pc, #104]	; (8003a00 <HAL_GPIO_EXTI_Callback+0x88>)
 8003998:	2200      	movs	r2, #0
 800399a:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//=============// Stop ////======================
	if(GPIO_Pin == GPIO_PIN_10){
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a2:	d10c      	bne.n	80039be <HAL_GPIO_EXTI_Callback+0x46>
		PWMOut = 0;
 80039a4:	4b16      	ldr	r3, [pc, #88]	; (8003a00 <HAL_GPIO_EXTI_Callback+0x88>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 80039aa:	4b14      	ldr	r3, [pc, #80]	; (80039fc <HAL_GPIO_EXTI_Callback+0x84>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x80>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d102      	bne.n	80039be <HAL_GPIO_EXTI_Callback+0x46>
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x80>)
 80039ba:	2204      	movs	r2, #4
 80039bc:	701a      	strb	r2, [r3, #0]
		//else{grandState = stop;}

		}
	//=========// work Blue button //=========//
	if(GPIO_Pin == GPIO_PIN_13){
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c4:	d108      	bne.n	80039d8 <HAL_GPIO_EXTI_Callback+0x60>
		bluecounter++;
 80039c6:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <HAL_GPIO_EXTI_Callback+0x84>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	3301      	adds	r3, #1
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_GPIO_EXTI_Callback+0x84>)
 80039d0:	701a      	strb	r2, [r3, #0]
		flag_efftActi = 1;
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <HAL_GPIO_EXTI_Callback+0x8c>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	701a      	strb	r2, [r3, #0]
		//trig_efftRead = 1;
	}

	//=============// setzero //================//
		if(GPIO_Pin == GPIO_PIN_2){
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d106      	bne.n	80039ec <HAL_GPIO_EXTI_Callback+0x74>
			Finalposition = 0;
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <HAL_GPIO_EXTI_Callback+0x90>)
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
			grandState = SetZeroGr;
 80039e6:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x80>)
 80039e8:	2205      	movs	r2, #5
 80039ea:	701a      	strb	r2, [r3, #0]
		}
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	200003d8 	.word	0x200003d8
 80039fc:	20000578 	.word	0x20000578
 8003a00:	2000000a 	.word	0x2000000a
 8003a04:	200005b3 	.word	0x200005b3
 8003a08:	20000400 	.word	0x20000400

08003a0c <_Z6microsv>:

///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 8003a0c:	b4b0      	push	{r4, r5, r7}
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <_Z6microsv+0x2c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	2200      	movs	r2, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <_Z6microsv+0x30>)
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	1884      	adds	r4, r0, r2
 8003a24:	eb41 0503 	adc.w	r5, r1, r3
 8003a28:	4622      	mov	r2, r4
 8003a2a:	462b      	mov	r3, r5
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4619      	mov	r1, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bcb0      	pop	{r4, r5, r7}
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	2000022c 	.word	0x2000022c
 8003a3c:	200003e0 	.word	0x200003e0

08003a40 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003a40:	b4b0      	push	{r4, r5, r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a09      	ldr	r2, [pc, #36]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d10a      	bne.n	8003a66 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8003a50:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a5a:	1854      	adds	r4, r2, r1
 8003a5c:	f143 0500 	adc.w	r5, r3, #0
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003a62:	e9c3 4500 	strd	r4, r5, [r3]
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bcb0      	pop	{r4, r5, r7}
 8003a6e:	4770      	bx	lr
 8003a70:	2000022c 	.word	0x2000022c
 8003a74:	200003e0 	.word	0x200003e0

08003a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a7c:	b672      	cpsid	i
}
 8003a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a80:	e7fe      	b.n	8003a80 <Error_Handler+0x8>

08003a82 <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	bf00      	nop
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 8003ac4:	b5b0      	push	{r4, r5, r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fdb8 	bl	8004644 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	f107 030c 	add.w	r3, r7, #12
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fdbd 	bl	800465a <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 8003ae0:	f107 020c 	add.w	r2, r7, #12
 8003ae4:	f107 0308 	add.w	r3, r7, #8
 8003ae8:	4621      	mov	r1, r4
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fdc0 	bl	8004670 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 8003af0:	bf00      	nop
 8003af2:	4628      	mov	r0, r5
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bdb0      	pop	{r4, r5, r7, pc}

08003afa <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>:
#endif

// Suppresses 'unused variable' warnings.
namespace Eigen {
  namespace internal {
    template<typename T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void ignore_unused_variable(const T&) {}
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>:
      * a matrix to 0 is not supported.
      *
      * \sa resize(Index,Index)
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Matrix() : Base()
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fdc2 	bl	80046a2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
    {
      Base::_check_template_params();
 8003b1e:	f000 fdd0 	bl	80046c2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>:
    Matrix() : Base()
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fdd6 	bl	80046e8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 8003b3c:	f000 fde4 	bl	8004708 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
    }
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>:
    Matrix() : Base()
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fdea 	bl	800472e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8003b5a:	f000 fdf8 	bl	800474e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
    }
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4618      	mov	r0, r3
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>:
    Matrix() : Base()
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fdfe 	bl	8004774 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8003b78:	f000 fe0c 	bl	8004794 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
    }
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>:
  * \note According the c++ standard, the argument expressions of this comma initializer are evaluated in arbitrary order.
  *
  * \sa CommaInitializer::finished(), class CommaInitializer
  */
template<typename Derived>
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
{
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 fe04 	bl	80047a4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>
}
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
    finished();
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fe39 	bl	8004824 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>
  }
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8003bbc:	b590      	push	{r4, r7, lr}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689c      	ldr	r4, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fe5e 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	429c      	cmp	r4, r3
 8003bd8:	bf0c      	ite	eq
 8003bda:	2301      	moveq	r3, #1
 8003bdc:	2300      	movne	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d01d      	beq.n	8003c20 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	441a      	add	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	605a      	str	r2, [r3, #4]
      m_col = 0;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685c      	ldr	r4, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fe4d 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	429c      	cmp	r4, r3
 8003c10:	db05      	blt.n	8003c1e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x62>
 8003c12:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xcc>)
 8003c14:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8003c16:	2148      	movs	r1, #72	; 0x48
 8003c18:	481d      	ldr	r0, [pc, #116]	; (8003c90 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8003c1a:	f019 ffc3 	bl	801dba4 <__assert_func>
 8003c1e:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689c      	ldr	r4, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fe31 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	429c      	cmp	r4, r3
 8003c32:	db05      	blt.n	8003c40 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x84>
 8003c34:	4b17      	ldr	r3, [pc, #92]	; (8003c94 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd8>)
 8003c36:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8003c38:	214b      	movs	r1, #75	; 0x4b
 8003c3a:	4815      	ldr	r0, [pc, #84]	; (8003c90 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8003c3c:	f019 ffb2 	bl	801dba4 <__assert_func>
 8003c40:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d005      	beq.n	8003c56 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x9a>
 8003c4a:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xdc>)
 8003c4c:	4a0f      	ldr	r2, [pc, #60]	; (8003c8c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8003c4e:	214d      	movs	r1, #77	; 0x4d
 8003c50:	480f      	ldr	r0, [pc, #60]	; (8003c90 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8003c52:	f019 ffa7 	bl	801dba4 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461c      	mov	r4, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6858      	ldr	r0, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	1c59      	adds	r1, r3, #1
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6091      	str	r1, [r2, #8]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	4601      	mov	r1, r0
 8003c6e:	4620      	mov	r0, r4
 8003c70:	f000 fe24 	bl	80048bc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8003c74:	4602      	mov	r2, r0
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6013      	str	r3, [r2, #0]
    return *this;
 8003c7c:	687b      	ldr	r3, [r7, #4]
  }
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd90      	pop	{r4, r7, pc}
 8003c86:	bf00      	nop
 8003c88:	0801ec20 	.word	0x0801ec20
 8003c8c:	0801ec70 	.word	0x0801ec70
 8003c90:	0801ed34 	.word	0x0801ed34
 8003c94:	0801ed90 	.word	0x0801ed90
 8003c98:	0801ede8 	.word	0x0801ede8

08003c9c <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fe1f 	bl	80048f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>
}
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
    finished();
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fe54 	bl	8004970 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>
  }
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689c      	ldr	r4, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fe78 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8003cec:	4603      	mov	r3, r0
 8003cee:	429c      	cmp	r4, r3
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01d      	beq.n	8003d38 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	441a      	add	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	605a      	str	r2, [r3, #4]
      m_col = 0;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685c      	ldr	r4, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fe67 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8003d24:	4603      	mov	r3, r0
 8003d26:	429c      	cmp	r4, r3
 8003d28:	db05      	blt.n	8003d36 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x62>
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xcc>)
 8003d2c:	4a1d      	ldr	r2, [pc, #116]	; (8003da4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8003d2e:	2148      	movs	r1, #72	; 0x48
 8003d30:	481d      	ldr	r0, [pc, #116]	; (8003da8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8003d32:	f019 ff37 	bl	801dba4 <__assert_func>
 8003d36:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689c      	ldr	r4, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fe4b 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8003d46:	4603      	mov	r3, r0
 8003d48:	429c      	cmp	r4, r3
 8003d4a:	db05      	blt.n	8003d58 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x84>
 8003d4c:	4b17      	ldr	r3, [pc, #92]	; (8003dac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd8>)
 8003d4e:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8003d50:	214b      	movs	r1, #75	; 0x4b
 8003d52:	4815      	ldr	r0, [pc, #84]	; (8003da8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8003d54:	f019 ff26 	bl	801dba4 <__assert_func>
 8003d58:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d005      	beq.n	8003d6e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x9a>
 8003d62:	4b13      	ldr	r3, [pc, #76]	; (8003db0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xdc>)
 8003d64:	4a0f      	ldr	r2, [pc, #60]	; (8003da4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8003d66:	214d      	movs	r1, #77	; 0x4d
 8003d68:	480f      	ldr	r0, [pc, #60]	; (8003da8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8003d6a:	f019 ff1b 	bl	801dba4 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461c      	mov	r4, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6858      	ldr	r0, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	1c59      	adds	r1, r3, #1
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6091      	str	r1, [r2, #8]
 8003d82:	461a      	mov	r2, r3
 8003d84:	4601      	mov	r1, r0
 8003d86:	4620      	mov	r0, r4
 8003d88:	f000 fe3e 	bl	8004a08 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6013      	str	r3, [r2, #0]
    return *this;
 8003d94:	687b      	ldr	r3, [r7, #4]
  }
 8003d96:	4618      	mov	r0, r3
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd90      	pop	{r4, r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	0801ec20 	.word	0x0801ec20
 8003da4:	0801ee00 	.word	0x0801ee00
 8003da8:	0801ed34 	.word	0x0801ed34
 8003dac:	0801ed90 	.word	0x0801ed90
 8003db0:	0801ede8 	.word	0x0801ede8

08003db4 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fe39 	bl	8004a3c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>
}
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
    finished();
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fe6e 	bl	8004abc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>
  }
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fe94 	bl	8004b28 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>
}
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
    finished();
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fec9 	bl	8004ba8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>
  }
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689c      	ldr	r4, [r3, #8]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 feee 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	429c      	cmp	r4, r3
 8003e3c:	bf0c      	ite	eq
 8003e3e:	2301      	moveq	r3, #1
 8003e40:	2300      	movne	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01d      	beq.n	8003e84 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	441a      	add	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	605a      	str	r2, [r3, #4]
      m_col = 0;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685c      	ldr	r4, [r3, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fedd 	bl	8004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8003e70:	4603      	mov	r3, r0
 8003e72:	429c      	cmp	r4, r3
 8003e74:	db05      	blt.n	8003e82 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x62>
 8003e76:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xcc>)
 8003e78:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8003e7a:	2148      	movs	r1, #72	; 0x48
 8003e7c:	481d      	ldr	r0, [pc, #116]	; (8003ef4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8003e7e:	f019 fe91 	bl	801dba4 <__assert_func>
 8003e82:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689c      	ldr	r4, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fec1 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8003e92:	4603      	mov	r3, r0
 8003e94:	429c      	cmp	r4, r3
 8003e96:	db05      	blt.n	8003ea4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x84>
 8003e98:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd8>)
 8003e9a:	4a15      	ldr	r2, [pc, #84]	; (8003ef0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8003e9c:	214b      	movs	r1, #75	; 0x4b
 8003e9e:	4815      	ldr	r0, [pc, #84]	; (8003ef4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8003ea0:	f019 fe80 	bl	801dba4 <__assert_func>
 8003ea4:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d005      	beq.n	8003eba <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x9a>
 8003eae:	4b13      	ldr	r3, [pc, #76]	; (8003efc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xdc>)
 8003eb0:	4a0f      	ldr	r2, [pc, #60]	; (8003ef0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8003eb2:	214d      	movs	r1, #77	; 0x4d
 8003eb4:	480f      	ldr	r0, [pc, #60]	; (8003ef4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8003eb6:	f019 fe75 	bl	801dba4 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461c      	mov	r4, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6858      	ldr	r0, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	1c59      	adds	r1, r3, #1
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6091      	str	r1, [r2, #8]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4601      	mov	r1, r0
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f000 feb4 	bl	8004c40 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6013      	str	r3, [r2, #0]
    return *this;
 8003ee0:	687b      	ldr	r3, [r7, #4]
  }
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd90      	pop	{r4, r7, pc}
 8003eea:	bf00      	nop
 8003eec:	0801ec20 	.word	0x0801ec20
 8003ef0:	0801eec4 	.word	0x0801eec4
 8003ef4:	0801ed34 	.word	0x0801ed34
 8003ef8:	0801ed90 	.word	0x0801ed90
 8003efc:	0801ede8 	.word	0x0801ede8

08003f00 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>:
      * \sa operator[](Index)
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator()(Index row, Index col)
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
    {
      eigen_assert(row >= 0 && row < rows()
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	db10      	blt.n	8003f34 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fead 	bl	8004c72 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	da09      	bge.n	8003f34 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	db06      	blt.n	8003f34 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 feb3 	bl	8004c92 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4293      	cmp	r3, r2
 8003f32:	db06      	blt.n	8003f42 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x42>
 8003f34:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x58>)
 8003f36:	4a09      	ldr	r2, [pc, #36]	; (8003f5c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x5c>)
 8003f38:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8003f3c:	4808      	ldr	r0, [pc, #32]	; (8003f60 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x60>)
 8003f3e:	f019 fe31 	bl	801dba4 <__assert_func>
          && col >= 0 && col < cols());
      return coeffRef(row, col);
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fecc 	bl	8004ce4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>
 8003f4c:	4603      	mov	r3, r0
    }
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	0801ef88 	.word	0x0801ef88
 8003f5c:	0801efc0 	.word	0x0801efc0
 8003f60:	0801f0ac 	.word	0x0801f0ac

08003f64 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>:
  * on the behavior of CwiseNullaryOp.
  *
  * \sa class CwiseUnaryOp, class CwiseBinaryOp, DenseBase::NullaryExpr
  */
template<typename NullaryOp, typename PlainObjectType>
class CwiseNullaryOp : public internal::dense_xpr_base< CwiseNullaryOp<NullaryOp, PlainObjectType> >::type, internal::no_assignment_operator
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	1d1a      	adds	r2, r3, #4
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	3304      	adds	r3, #4
 8003f76:	4619      	mov	r1, r3
 8003f78:	4610      	mov	r0, r2
 8003f7a:	f000 ffaf 	bl	8004edc <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>:
  return CwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>(derived(), other.derived(), func);
}


#ifndef EIGEN_PARSED_BY_DOXYGEN
EIGEN_MAKE_SCALAR_BINARY_OP(operator*,product)
 8003f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f8a:	b089      	sub	sp, #36	; 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	68b8      	ldr	r0, [r7, #8]
 8003f96:	f000 fec8 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	68b8      	ldr	r0, [r7, #8]
 8003f9e:	f000 fec4 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fd24 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8003faa:	4605      	mov	r5, r0
 8003fac:	68b8      	ldr	r0, [r7, #8]
 8003fae:	f000 febc 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fd11 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8003fba:	4606      	mov	r6, r0
 8003fbc:	f107 0318 	add.w	r3, r7, #24
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 febc 	bl	8004d40 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>
 8003fc8:	f107 0318 	add.w	r3, r7, #24
 8003fcc:	f107 0010 	add.w	r0, r7, #16
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	f000 fed0 	bl	8004d78 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>
 8003fd8:	f107 031c 	add.w	r3, r7, #28
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 ff03 	bl	8004de8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8003fe2:	f107 031c 	add.w	r3, r7, #28
 8003fe6:	f107 0210 	add.w	r2, r7, #16
 8003fea:	4621      	mov	r1, r4
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 ff35 	bl	8004e5c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	3724      	adds	r7, #36	; 0x24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ffa <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>:
  *
  * \sa transposeInPlace(), adjoint() */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
Transpose<Derived>
DenseBase<Derived>::transpose()
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
{
  return TransposeReturnType(derived());
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 ff86 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004008:	4602      	mov	r2, r0
 800400a:	f107 030c 	add.w	r3, r7, #12
 800400e:	4611      	mov	r1, r2
 8004010:	4618      	mov	r0, r3
 8004012:	f000 ffa2 	bl	8004f5a <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>
 8004016:	68fb      	ldr	r3, [r7, #12]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>:
  * CwiseBinaryOp types explicitly.
  *
  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
  */
template<typename BinaryOp, typename LhsType, typename RhsType>
class CwiseBinaryOp :
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	1d1a      	adds	r2, r3, #4
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	3304      	adds	r3, #4
 800403a:	4619      	mov	r1, r3
 800403c:	4610      	mov	r0, r2
 800403e:	f7ff ff91 	bl	8003f64 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f103 020c 	add.w	r2, r3, #12
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f000 ff54 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived, OtherDerived>
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800405e:	b590      	push	{r4, r7, lr}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)
#ifdef EIGEN_DEBUG_PRODUCT
  internal::product_type<Derived,OtherDerived>::debug();
#endif

  return Product<Derived, OtherDerived>(derived(), other.derived());
 800406a:	68b8      	ldr	r0, [r7, #8]
 800406c:	f000 ff85 	bl	8004f7a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 8004070:	4604      	mov	r4, r0
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 ff8c 	bl	8004f90 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8004078:	4603      	mov	r3, r0
 800407a:	461a      	mov	r2, r3
 800407c:	4621      	mov	r1, r4
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 ffd2 	bl	8005028 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>
}
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	bd90      	pop	{r4, r7, pc}

0800408c <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6839      	ldr	r1, [r7, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fff4 	bl	8005088 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 80040a0:	4603      	mov	r3, r0
    }
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80040aa:	b590      	push	{r4, r7, lr}
 80040ac:	b085      	sub	sp, #20
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80040b6:	68b8      	ldr	r0, [r7, #8]
 80040b8:	f000 ffff 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80040bc:	4604      	mov	r4, r0
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fe33 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461a      	mov	r2, r3
 80040c8:	4621      	mov	r1, r4
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f001 f824 	bl	8005118 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd90      	pop	{r4, r7, pc}

080040d8 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6839      	ldr	r1, [r7, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 f844 	bl	8005174 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 80040ec:	4603      	mov	r3, r0
    }
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80040f6:	b590      	push	{r4, r7, lr}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004102:	68b8      	ldr	r0, [r7, #8]
 8004104:	f000 ffd9 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004108:	4604      	mov	r4, r0
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 ffd5 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	4621      	mov	r1, r4
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f001 f86a 	bl	80051f0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>
}
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	bd90      	pop	{r4, r7, pc}

08004124 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f001 f88d 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004132:	4602      	mov	r2, r0
 8004134:	f107 030c 	add.w	r3, r7, #12
 8004138:	4611      	mov	r1, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f001 f8a9 	bl	8005292 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>
 8004140:	68fb      	ldr	r3, [r7, #12]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800414a:	b590      	push	{r4, r7, lr}
 800414c:	b085      	sub	sp, #20
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004156:	68b8      	ldr	r0, [r7, #8]
 8004158:	f001 f8ab 	bl	80052b2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800415c:	4604      	mov	r4, r0
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f001 f8b2 	bl	80052c8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	4621      	mov	r1, r4
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f001 f8f8 	bl	8005360 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>
}
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	bd90      	pop	{r4, r7, pc}

08004178 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004178:	b5b0      	push	{r4, r5, r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	68b8      	ldr	r0, [r7, #8]
 8004186:	f001 f91b 	bl	80053c0 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 800418a:	4604      	mov	r4, r0
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 ff94 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004192:	4605      	mov	r5, r0
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	4618      	mov	r0, r3
 800419a:	f001 f91c 	bl	80053d6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800419e:	f107 0314 	add.w	r3, r7, #20
 80041a2:	462a      	mov	r2, r5
 80041a4:	4621      	mov	r1, r4
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f001 f954 	bl	8005454 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bdb0      	pop	{r4, r5, r7, pc}

080041b4 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6839      	ldr	r1, [r7, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f001 f992 	bl	80054ec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
 80041c8:	4603      	mov	r3, r0
    }
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f001 f99f 	bl	800551e <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80041e0:	4602      	mov	r2, r0
 80041e2:	f107 030c 	add.w	r3, r7, #12
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f001 f9bb 	bl	8005564 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>
 80041ee:	68fb      	ldr	r3, [r7, #12]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80041f8:	b590      	push	{r4, r7, lr}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004204:	68b8      	ldr	r0, [r7, #8]
 8004206:	f000 ff58 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800420a:	4604      	mov	r4, r0
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f001 f9b9 	bl	8005584 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8004212:	4603      	mov	r3, r0
 8004214:	461a      	mov	r2, r3
 8004216:	4621      	mov	r1, r4
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f001 f9f1 	bl	8005600 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>
}
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	bd90      	pop	{r4, r7, pc}

08004226 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004226:	b590      	push	{r4, r7, lr}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004232:	68b8      	ldr	r0, [r7, #8]
 8004234:	f001 fa12 	bl	800565c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004238:	4604      	mov	r4, r0
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 ff3d 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004240:	4603      	mov	r3, r0
 8004242:	461a      	mov	r2, r3
 8004244:	4621      	mov	r1, r4
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f001 fa38 	bl	80056bc <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>
}
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	bd90      	pop	{r4, r7, pc}

08004254 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004260:	68b8      	ldr	r0, [r7, #8]
 8004262:	f001 fa59 	bl	8005718 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8004266:	4604      	mov	r4, r0
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f001 f98b 	bl	8005584 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800426e:	4603      	mov	r3, r0
 8004270:	461a      	mov	r2, r3
 8004272:	4621      	mov	r1, r4
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f001 fa8d 	bl	8005794 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>
}
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bd90      	pop	{r4, r7, pc}

08004282 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
 8004282:	b5b0      	push	{r4, r5, r7, lr}
 8004284:	b086      	sub	sp, #24
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	68b8      	ldr	r0, [r7, #8]
 8004290:	f001 fab0 	bl	80057f4 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8004294:	4604      	mov	r4, r0
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f001 fab7 	bl	800580a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800429c:	4605      	mov	r5, r0
 800429e:	f107 0314 	add.w	r3, r7, #20
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 f897 	bl	80053d6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	462a      	mov	r2, r5
 80042ae:	4621      	mov	r1, r4
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f001 faff 	bl	80058b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bdb0      	pop	{r4, r5, r7, pc}

080042be <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  inline const Derived& const_derived() const
  { return *static_cast<const Derived*>(this); }

  /** \returns the number of rows. \sa cols(), RowsAtCompileTime */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f001 fb34 	bl	8005934 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f001 fb3b 	bl	800594a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80042d4:	4603      	mov	r3, r0
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  /** \returns the number of columns. \sa rows(), ColsAtCompileTime*/
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f001 fb24 	bl	8005934 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 80042ec:	4603      	mov	r3, r0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 fb38 	bl	8005964 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80042f4:	4603      	mov	r3, r0
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>:
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	ca07      	ldmia	r2, {r0, r1, r2}
 800430e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60da      	str	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f103 0210 	add.w	r2, r3, #16
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	3310      	adds	r3, #16
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f001 f8d4 	bl	80054d4 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>:
  *
  * \sa computeInverseAndDetWithCheck()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC
inline const Inverse<Derived> MatrixBase<Derived>::inverse() const
 8004338:	b590      	push	{r4, r7, lr}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
{
  EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsInteger,THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES)
  eigen_assert(rows() == cols());
 8004342:	6838      	ldr	r0, [r7, #0]
 8004344:	f7ff ffbb 	bl	80042be <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8004348:	4604      	mov	r4, r0
 800434a:	6838      	ldr	r0, [r7, #0]
 800434c:	f7ff ffc7 	bl	80042de <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8004350:	4603      	mov	r3, r0
 8004352:	429c      	cmp	r4, r3
 8004354:	d006      	beq.n	8004364 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x2c>
 8004356:	4b09      	ldr	r3, [pc, #36]	; (800437c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x44>)
 8004358:	4a09      	ldr	r2, [pc, #36]	; (8004380 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x48>)
 800435a:	f240 115f 	movw	r1, #351	; 0x15f
 800435e:	4809      	ldr	r0, [pc, #36]	; (8004384 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x4c>)
 8004360:	f019 fc20 	bl	801dba4 <__assert_func>
  return Inverse<Derived>(derived());
 8004364:	6838      	ldr	r0, [r7, #0]
 8004366:	f001 fae5 	bl	8005934 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800436a:	4603      	mov	r3, r0
 800436c:	4619      	mov	r1, r3
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f001 fb1d 	bl	80059ae <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
}
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	bd90      	pop	{r4, r7, pc}
 800437c:	0801f108 	.word	0x0801f108
 8004380:	0801f11c 	.word	0x0801f11c
 8004384:	0801f270 	.word	0x0801f270

08004388 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>:
  * This class represents an abstract expression of A.inverse()
  * and most of the time this is the only way it is used.
  *
  */
template<typename XprType>
class Inverse : public InverseImpl<XprType,typename internal::traits<XprType>::StorageKind>
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff ffb0 	bl	80042fe <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80043a8:	b590      	push	{r4, r7, lr}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80043b4:	68b8      	ldr	r0, [r7, #8]
 80043b6:	f001 fb0c 	bl	80059d2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 80043ba:	4604      	mov	r4, r0
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f001 fb13 	bl	80059e8 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 80043c2:	4603      	mov	r3, r0
 80043c4:	461a      	mov	r2, r3
 80043c6:	4621      	mov	r1, r4
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f001 fb57 	bl	8005a7c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>
}
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd90      	pop	{r4, r7, pc}

080043d6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6839      	ldr	r1, [r7, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f001 fb7b 	bl	8005ae0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 80043ea:	4603      	mov	r3, r0
    }
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004400:	68b8      	ldr	r0, [r7, #8]
 8004402:	f001 f92b 	bl	800565c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004406:	4604      	mov	r4, r0
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fc8e 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800440e:	4603      	mov	r3, r0
 8004410:	461a      	mov	r2, r3
 8004412:	4621      	mov	r1, r4
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f001 fba1 	bl	8005b5c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	bd90      	pop	{r4, r7, pc}

08004422 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004422:	b5b0      	push	{r4, r5, r7, lr}
 8004424:	b086      	sub	sp, #24
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	68b8      	ldr	r0, [r7, #8]
 8004430:	f001 f9eb 	bl	800580a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8004434:	4604      	mov	r4, r0
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f001 fbbe 	bl	8005bb8 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 800443c:	4605      	mov	r5, r0
 800443e:	f107 0314 	add.w	r3, r7, #20
 8004442:	4618      	mov	r0, r3
 8004444:	f001 fbc3 	bl	8005bce <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004448:	f107 0314 	add.w	r3, r7, #20
 800444c:	462a      	mov	r2, r5
 800444e:	4621      	mov	r1, r4
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f001 fbfb 	bl	8005c4c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bdb0      	pop	{r4, r5, r7, pc}

0800445e <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>:
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	1d1a      	adds	r2, r3, #4
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	3304      	adds	r3, #4
 8004478:	e893 0003 	ldmia.w	r3, {r0, r1}
 800447c:	e882 0003 	stmia.w	r2, {r0, r1}
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f103 020c 	add.w	r2, r3, #12
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	330c      	adds	r3, #12
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f001 fc1f 	bl	8005cd0 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80044a8:	68b8      	ldr	r0, [r7, #8]
 80044aa:	f000 fc3e 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80044ae:	4604      	mov	r4, r0
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f001 fc19 	bl	8005ce8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 80044b6:	4603      	mov	r3, r0
 80044b8:	461a      	mov	r2, r3
 80044ba:	4621      	mov	r1, r4
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f001 fc51 	bl	8005d64 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>
}
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd90      	pop	{r4, r7, pc}

080044ca <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>:
  * The other template parameters are:
  * \tparam Option     can be DefaultProduct, AliasFreeProduct, or LazyProduct
  *
  */
template<typename _Lhs, typename _Rhs, int Option>
class Product : public ProductImpl<_Lhs,_Rhs,Option,
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	1d1a      	adds	r2, r3, #4
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	3304      	adds	r3, #4
 80044e4:	4619      	mov	r1, r3
 80044e6:	4610      	mov	r0, r2
 80044e8:	f7ff ffb9 	bl	800445e <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 80044f6:	b5b0      	push	{r4, r5, r7, lr}
 80044f8:	b086      	sub	sp, #24
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
 8004502:	68b8      	ldr	r0, [r7, #8]
 8004504:	f000 fc11 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004508:	4604      	mov	r4, r0
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f001 fc5a 	bl	8005dc4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>
 8004510:	4605      	mov	r5, r0
 8004512:	f107 0314 	add.w	r3, r7, #20
 8004516:	4618      	mov	r0, r3
 8004518:	f000 ff5d 	bl	80053d6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800451c:	f107 0314 	add.w	r3, r7, #20
 8004520:	462a      	mov	r2, r5
 8004522:	4621      	mov	r1, r4
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f001 fc8d 	bl	8005e44 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bdb0      	pop	{r4, r5, r7, pc}

08004532 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6839      	ldr	r1, [r7, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f001 fcbf 	bl	8005ec4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
 8004546:	4603      	mov	r3, r0
    }
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004550:	b590      	push	{r4, r7, lr}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 800455c:	68b8      	ldr	r0, [r7, #8]
 800455e:	f000 fbe4 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004562:	4604      	mov	r4, r0
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f001 f879 	bl	800565c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800456a:	4603      	mov	r3, r0
 800456c:	461a      	mov	r2, r3
 800456e:	4621      	mov	r1, r4
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f001 fce5 	bl	8005f40 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	bd90      	pop	{r4, r7, pc}

0800457e <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 800457e:	b5b0      	push	{r4, r5, r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	68b8      	ldr	r0, [r7, #8]
 800458c:	f000 fd95 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004590:	4604      	mov	r4, r0
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f001 fd02 	bl	8005f9c <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>
 8004598:	4605      	mov	r5, r0
 800459a:	f107 0314 	add.w	r3, r7, #20
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 fb15 	bl	8005bce <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 80045a4:	f107 0314 	add.w	r3, r7, #20
 80045a8:	462a      	mov	r2, r5
 80045aa:	4621      	mov	r1, r4
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f001 fd35 	bl	800601c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bdb0      	pop	{r4, r5, r7, pc}

080045ba <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>:
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	1d1a      	adds	r2, r3, #4
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	3304      	adds	r3, #4
 80045d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80045d8:	e882 0003 	stmia.w	r2, {r0, r1}
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f103 020c 	add.w	r2, r3, #12
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	4619      	mov	r1, r3
 80045e8:	4610      	mov	r0, r2
 80045ea:	f001 fb71 	bl	8005cd0 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004604:	68b8      	ldr	r0, [r7, #8]
 8004606:	f001 fd4b 	bl	80060a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800460a:	4604      	mov	r4, r0
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fd54 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004612:	4603      	mov	r3, r0
 8004614:	461a      	mov	r2, r3
 8004616:	4621      	mov	r1, r4
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f001 fd7f 	bl	800611c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>
}
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	bd90      	pop	{r4, r7, pc}

08004626 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6839      	ldr	r1, [r7, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f001 fd9f 	bl	8006178 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 800463a:	4603      	mov	r3, r0
    }
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue,        pow, power to \c p, const RealScalar& p)
    EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \c p, const std::complex<RealScalar>& p)

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(MatrixBase)
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MatrixBase)
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f001 fd89 	bl	80061aa <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    // Prevent user from trying to instantiate PlainObjectBase objects
    // by making all its constructor protected. See bug 1074.
  protected:

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff ffed 	bl	800468a <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 fd84 	bl	80061c0 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>
    {
//       _check_template_params();
//       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void swap(DenseBase<OtherDerived> const & other)
    { Base::swap(other.derived()); }

    EIGEN_DEVICE_FUNC
    static EIGEN_STRONG_INLINE void _check_template_params()
 80046c2:	b480      	push	{r7}
 80046c4:	af00      	add	r7, sp, #0
                        && ((MaxColsAtCompileTime == Dynamic) || (MaxColsAtCompileTime >= 0))
                        && (MaxRowsAtCompileTime == RowsAtCompileTime || RowsAtCompileTime==Dynamic)
                        && (MaxColsAtCompileTime == ColsAtCompileTime || ColsAtCompileTime==Dynamic)
                        && (Options & (DontAlign|RowMajor)) == Options),
        INVALID_MATRIX_TEMPLATE_PARAMETERS)
    }
 80046c6:	bf00      	nop
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f001 fd7e 	bl	80061da <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff ffed 	bl	80046d0 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f001 fd79 	bl	80061f0 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>
    }
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4618      	mov	r0, r3
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
    }
 800470c:	bf00      	nop
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f001 fd73 	bl	800620a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff ffed 	bl	8004716 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4618      	mov	r0, r3
 8004740:	f001 fd6e 	bl	8006220 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>
    }
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 800474e:	b480      	push	{r7}
 8004750:	af00      	add	r7, sp, #0
    }
 8004752:	bf00      	nop
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f001 fd68 	bl	800623a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff ffed 	bl	800475c <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4618      	mov	r0, r3
 8004786:	f001 fd63 	bl	8006250 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>
    }
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
    }
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	605a      	str	r2, [r3, #4]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	609a      	str	r2, [r3, #8]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 f86a 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	dd07      	ble.n	80047e8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x44>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 f857 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	dc05      	bgt.n	80047f4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x50>
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x74>)
 80047ea:	4a0c      	ldr	r2, [pc, #48]	; (800481c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x78>)
 80047ec:	2124      	movs	r1, #36	; 0x24
 80047ee:	480c      	ldr	r0, [pc, #48]	; (8004820 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x7c>)
 80047f0:	f019 f9d8 	bl	801dba4 <__assert_func>
 80047f4:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f85c 	bl	80048bc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8004804:	4602      	mov	r2, r0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6013      	str	r3, [r2, #0]
  }
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	0801f2c8 	.word	0x0801f2c8
 800481c:	0801f324 	.word	0x0801f324
 8004820:	0801ed34 	.word	0x0801ed34

08004824 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	18d4      	adds	r4, r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f833 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004840:	4603      	mov	r3, r0
 8004842:	429c      	cmp	r4, r3
 8004844:	d007      	beq.n	8004856 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x32>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 f820 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x46>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689c      	ldr	r4, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f816 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004864:	4603      	mov	r3, r0
 8004866:	429c      	cmp	r4, r3
 8004868:	d005      	beq.n	8004876 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x52>
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x60>)
 800486c:	4a06      	ldr	r2, [pc, #24]	; (8004888 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x64>)
 800486e:	217a      	movs	r1, #122	; 0x7a
 8004870:	4806      	ldr	r0, [pc, #24]	; (800488c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x68>)
 8004872:	f019 f997 	bl	801dba4 <__assert_func>
 8004876:	bf00      	nop
      return m_xpr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
  }
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	bd90      	pop	{r4, r7, pc}
 8004884:	0801f3d4 	.word	0x0801f3d4
 8004888:	0801f474 	.word	0x0801f474
 800488c:	0801ed34 	.word	0x0801ed34

08004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	f001 fce7 	bl	800626a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>
 800489c:	4603      	mov	r3, r0
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b082      	sub	sp, #8
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	f001 fce4 	bl	800627a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 80048b2:	4603      	mov	r3, r0
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 80048bc:	b590      	push	{r4, r7, lr}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 fcdd 	bl	800628a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 80048d0:	4604      	mov	r4, r0
 80048d2:	f001 fcd2 	bl	800627a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 80048d6:	4602      	mov	r2, r0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	fb03 f202 	mul.w	r2, r3, r2
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4423      	add	r3, r4
    }
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd90      	pop	{r4, r7, pc}
	...

080048f0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	605a      	str	r2, [r3, #4]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	609a      	str	r2, [r3, #8]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f000 f86a 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	dd07      	ble.n	8004934 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x44>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f000 f857 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	dc05      	bgt.n	8004940 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x50>
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x74>)
 8004936:	4a0c      	ldr	r2, [pc, #48]	; (8004968 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x78>)
 8004938:	2124      	movs	r1, #36	; 0x24
 800493a:	480c      	ldr	r0, [pc, #48]	; (800496c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x7c>)
 800493c:	f019 f932 	bl	801dba4 <__assert_func>
 8004940:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f85c 	bl	8004a08 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8004950:	4602      	mov	r2, r0
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6013      	str	r3, [r2, #0]
  }
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	0801f2c8 	.word	0x0801f2c8
 8004968:	0801f4dc 	.word	0x0801f4dc
 800496c:	0801ed34 	.word	0x0801ed34

08004970 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8004970:	b590      	push	{r4, r7, lr}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	18d4      	adds	r4, r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f833 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800498c:	4603      	mov	r3, r0
 800498e:	429c      	cmp	r4, r3
 8004990:	d007      	beq.n	80049a2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x32>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f820 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x46>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689c      	ldr	r4, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 f816 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80049b0:	4603      	mov	r3, r0
 80049b2:	429c      	cmp	r4, r3
 80049b4:	d005      	beq.n	80049c2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x52>
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x60>)
 80049b8:	4a06      	ldr	r2, [pc, #24]	; (80049d4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x64>)
 80049ba:	217a      	movs	r1, #122	; 0x7a
 80049bc:	4806      	ldr	r0, [pc, #24]	; (80049d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x68>)
 80049be:	f019 f8f1 	bl	801dba4 <__assert_func>
 80049c2:	bf00      	nop
      return m_xpr;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
  }
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd90      	pop	{r4, r7, pc}
 80049d0:	0801f3d4 	.word	0x0801f3d4
 80049d4:	0801f58c 	.word	0x0801f58c
 80049d8:	0801ed34 	.word	0x0801ed34

080049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	f001 fc5c 	bl	80062a0 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>
 80049e8:	4603      	mov	r3, r0
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	f001 fc59 	bl	80062b0 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 80049fe:	4603      	mov	r3, r0
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 fc52 	bl	80062c0 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	f001 fc47 	bl	80062b0 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 8004a22:	4602      	mov	r2, r0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	fb03 f202 	mul.w	r2, r3, r2
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4423      	add	r3, r4
    }
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd90      	pop	{r4, r7, pc}
	...

08004a3c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	605a      	str	r2, [r3, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	609a      	str	r2, [r3, #8]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 ff0e 	bl	8005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	dd07      	ble.n	8004a80 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x44>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 ff11 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	dc05      	bgt.n	8004a8c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x50>
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x74>)
 8004a82:	4a0c      	ldr	r2, [pc, #48]	; (8004ab4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x78>)
 8004a84:	2124      	movs	r1, #36	; 0x24
 8004a86:	480c      	ldr	r0, [pc, #48]	; (8004ab8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x7c>)
 8004a88:	f019 f88c 	bl	801dba4 <__assert_func>
 8004a8c:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2200      	movs	r2, #0
 8004a94:	2100      	movs	r1, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f001 fc1d 	bl	80062d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6013      	str	r3, [r2, #0]
  }
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	0801f2c8 	.word	0x0801f2c8
 8004ab4:	0801f5f4 	.word	0x0801f5f4
 8004ab8:	0801ed34 	.word	0x0801ed34

08004abc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8004abc:	b590      	push	{r4, r7, lr}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	18d4      	adds	r4, r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fed7 	bl	8005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	429c      	cmp	r4, r3
 8004adc:	d007      	beq.n	8004aee <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x32>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 feda 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x46>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689c      	ldr	r4, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fed0 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004afc:	4603      	mov	r3, r0
 8004afe:	429c      	cmp	r4, r3
 8004b00:	d005      	beq.n	8004b0e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x52>
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x60>)
 8004b04:	4a06      	ldr	r2, [pc, #24]	; (8004b20 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x64>)
 8004b06:	217a      	movs	r1, #122	; 0x7a
 8004b08:	4806      	ldr	r0, [pc, #24]	; (8004b24 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x68>)
 8004b0a:	f019 f84b 	bl	801dba4 <__assert_func>
 8004b0e:	bf00      	nop
      return m_xpr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
  }
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd90      	pop	{r4, r7, pc}
 8004b1c:	0801f3d4 	.word	0x0801f3d4
 8004b20:	0801f6a4 	.word	0x0801f6a4
 8004b24:	0801ed34 	.word	0x0801ed34

08004b28 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	605a      	str	r2, [r3, #4]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	609a      	str	r2, [r3, #8]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 f86a 	bl	8004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	dd07      	ble.n	8004b6c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x44>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 f857 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	dc05      	bgt.n	8004b78 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x50>
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x74>)
 8004b6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ba0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x78>)
 8004b70:	2124      	movs	r1, #36	; 0x24
 8004b72:	480c      	ldr	r0, [pc, #48]	; (8004ba4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x7c>)
 8004b74:	f019 f816 	bl	801dba4 <__assert_func>
 8004b78:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f85c 	bl	8004c40 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6013      	str	r3, [r2, #0]
  }
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	0801f2c8 	.word	0x0801f2c8
 8004ba0:	0801f70c 	.word	0x0801f70c
 8004ba4:	0801ed34 	.word	0x0801ed34

08004ba8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8004ba8:	b590      	push	{r4, r7, lr}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	18d4      	adds	r4, r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f833 	bl	8004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	429c      	cmp	r4, r3
 8004bc8:	d007      	beq.n	8004bda <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x32>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f820 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x46>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689c      	ldr	r4, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 f816 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004be8:	4603      	mov	r3, r0
 8004bea:	429c      	cmp	r4, r3
 8004bec:	d005      	beq.n	8004bfa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x52>
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x60>)
 8004bf0:	4a06      	ldr	r2, [pc, #24]	; (8004c0c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x64>)
 8004bf2:	217a      	movs	r1, #122	; 0x7a
 8004bf4:	4806      	ldr	r0, [pc, #24]	; (8004c10 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x68>)
 8004bf6:	f018 ffd5 	bl	801dba4 <__assert_func>
 8004bfa:	bf00      	nop
      return m_xpr;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
  }
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd90      	pop	{r4, r7, pc}
 8004c08:	0801f3d4 	.word	0x0801f3d4
 8004c0c:	0801f7bc 	.word	0x0801f7bc
 8004c10:	0801ed34 	.word	0x0801ed34

08004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	f001 fb74 	bl	8006308 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 8004c20:	4603      	mov	r3, r0
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	f001 fb71 	bl	8006318 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>
 8004c36:	4603      	mov	r3, r0
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
        return m_storage.data()[colId + rowId * m_storage.cols()];
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f001 fb6a 	bl	8006328 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 8004c54:	4604      	mov	r4, r0
 8004c56:	f001 fb57 	bl	8006308 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	fb03 f202 	mul.w	r2, r3, r2
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4423      	add	r3, r4
    }
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd90      	pop	{r4, r7, pc}

08004c72 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f855 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff feb5 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f845 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff fe9a 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
protected:
  Index m_outerStride;
};

template<typename Derived>
struct evaluator<PlainObjectBase<Derived> >
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f001 fb4f 	bl	800635e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:

  plainobjectbase_evaluator_data<Scalar,OuterStrideAtCompileTime> m_d;
};

template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff ffec 	bl	8004cb2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)
 8004ce4:	b590      	push	{r4, r7, lr}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
      return internal::evaluator<Derived>(derived()).coeffRef(row,col);
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f90f 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	f107 0314 	add.w	r3, r7, #20
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f001 fb1d 	bl	800633e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8004d04:	f107 0314 	add.w	r3, r7, #20
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f001 fb31 	bl	8006374 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>
 8004d12:	4604      	mov	r4, r0
 8004d14:	bf00      	nop
 8004d16:	f107 0314 	add.w	r3, r7, #20
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff ffd5 	bl	8004cca <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8004d20:	4623      	mov	r3, r4
    }
 8004d22:	4618      	mov	r0, r3
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd90      	pop	{r4, r7, pc}

08004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4618      	mov	r0, r3
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>:
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f001 fb1b 	bl	80063a4 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>:

    typedef typename internal::dense_xpr_base<CwiseNullaryOp>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(CwiseNullaryOp)

    EIGEN_DEVICE_FUNC
    CwiseNullaryOp(Index rows, Index cols, const NullaryOp& func = NullaryOp())
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
      : m_rows(rows), m_cols(cols), m_functor(func)
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7ff ffea 	bl	8004d60 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f001 fb13 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 fb27 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3304      	adds	r3, #4
 8004da6:	6839      	ldr	r1, [r7, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 f897 	bl	8004edc <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
    {
      eigen_assert(rows >= 0
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	db08      	blt.n	8004dc6 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d105      	bne.n	8004dc6 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	db02      	blt.n	8004dc6 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d005      	beq.n	8004dd2 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x5a>
 8004dc6:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x64>)
 8004dc8:	4a05      	ldr	r2, [pc, #20]	; (8004de0 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x68>)
 8004dca:	2147      	movs	r1, #71	; 0x47
 8004dcc:	4805      	ldr	r0, [pc, #20]	; (8004de4 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x6c>)
 8004dce:	f018 fee9 	bl	801dba4 <__assert_func>
            && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
            &&  cols >= 0
            && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols));
    }
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	0801f824 	.word	0x0801f824
 8004de0:	0801f8bc 	.word	0x0801f8bc
 8004de4:	0801f9b0 	.word	0x0801f9b0

08004de8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_product_op)
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f001 fb0c 	bl	8006424 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>:
    const BinaryOp m_functor;
};

// Generic API dispatcher
template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
class CwiseBinaryOpImpl
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b082      	sub	sp, #8
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff ffed 	bl	8004dfe <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index rows() const { return m_rows.value(); }
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	f001 fb00 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const { return m_cols.value(); }
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	f001 fafd 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f7ff ffd3 	bl	8004e16 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff f871 	bl	8003f64 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	330c      	adds	r3, #12
 8004e86:	6839      	ldr	r1, [r7, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 f837 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff fdae 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004e96:	4604      	mov	r4, r0
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff ffc8 	bl	8004e2e <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	429c      	cmp	r4, r3
 8004ea2:	d10a      	bne.n	8004eba <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x5e>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fd98 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004eac:	4604      	mov	r4, r0
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff ffc8 	bl	8004e44 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	429c      	cmp	r4, r3
 8004eb8:	d005      	beq.n	8004ec6 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x6a>
 8004eba:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x74>)
 8004ebc:	4a05      	ldr	r2, [pc, #20]	; (8004ed4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x78>)
 8004ebe:	2174      	movs	r1, #116	; 0x74
 8004ec0:	4805      	ldr	r0, [pc, #20]	; (8004ed8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x7c>)
 8004ec2:	f018 fe6f 	bl	801dba4 <__assert_func>
    }
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd90      	pop	{r4, r7, pc}
 8004ed0:	0801fa0c 	.word	0x0801fa0c
 8004ed4:	0801fa48 	.word	0x0801fa48
 8004ed8:	0801fc70 	.word	0x0801fc70

08004edc <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>:
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f001 fa91 	bl	800645a <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff ffed 	bl	8004f2a <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff ffec 	bl	8004f42 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f001 fa5e 	bl	8006470 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>:
};

namespace internal {

template<typename Lhs, typename Rhs, int Option, int ProductTag = internal::product_type<Lhs,Rhs>::ret>
class dense_product_base
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff ffed 	bl	8004fa6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>:
  public:
    typedef typename internal::generic_xpr_base<Product<Lhs,Rhs,Option>, MatrixXpr, StorageKind>::type Base;
};

template<typename Lhs, typename Rhs, int Option>
class ProductImpl<Lhs,Rhs,Option,Dense>
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b082      	sub	sp, #8
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff ffed 	bl	8004fbe <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff fcee 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005000:	4603      	mov	r3, r0
    }
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fce0 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800501c:	4603      	mov	r3, r0
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f7ff ffce 	bl	8004fd6 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe ffee 	bl	8004020 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3310      	adds	r3, #16
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800504e:	68b8      	ldr	r0, [r7, #8]
 8005050:	f7ff ffcd 	bl	8004fee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8005054:	4604      	mov	r4, r0
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff ffd7 	bl	800500a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800505c:	4603      	mov	r3, r0
 800505e:	429c      	cmp	r4, r3
 8005060:	d005      	beq.n	800506e <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x46>
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x54>)
 8005064:	4a06      	ldr	r2, [pc, #24]	; (8005080 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x58>)
 8005066:	2160      	movs	r1, #96	; 0x60
 8005068:	4806      	ldr	r0, [pc, #24]	; (8005084 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x5c>)
 800506a:	f018 fd9b 	bl	801dba4 <__assert_func>
 800506e:	bf00      	nop
    }
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	bd90      	pop	{r4, r7, pc}
 800507a:	bf00      	nop
 800507c:	0801fccc 	.word	0x0801fccc
 8005080:	0801fd58 	.word	0x0801fd58
 8005084:	0802001c 	.word	0x0802001c

08005088 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005088:	b590      	push	{r4, r7, lr}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f8da 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005098:	4604      	mov	r4, r0
 800509a:	6838      	ldr	r0, [r7, #0]
 800509c:	f001 f9f3 	bl	8006486 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 80050a0:	4603      	mov	r3, r0
 80050a2:	4619      	mov	r1, r3
 80050a4:	4620      	mov	r0, r4
 80050a6:	f001 f9f9 	bl	800649c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>
      return this->derived();
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f8ce 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80050b0:	4603      	mov	r3, r0
    }
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd90      	pop	{r4, r7, pc}

080050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f001 f9f4 	bl	80064c6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>:
class dense_product_base
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff ffed 	bl	80050d0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ffed 	bl	80050e8 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff ffeb 	bl	8005100 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fba9 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800513e:	4604      	mov	r4, r0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff fc55 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005148:	4603      	mov	r3, r0
 800514a:	429c      	cmp	r4, r3
 800514c:	d005      	beq.n	800515a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005150:	4a06      	ldr	r2, [pc, #24]	; (800516c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005152:	2160      	movs	r1, #96	; 0x60
 8005154:	4806      	ldr	r0, [pc, #24]	; (8005170 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005156:	f018 fd25 	bl	801dba4 <__assert_func>
 800515a:	bf00      	nop
    }
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	bd90      	pop	{r4, r7, pc}
 8005166:	bf00      	nop
 8005168:	0801fccc 	.word	0x0801fccc
 800516c:	08020070 	.word	0x08020070
 8005170:	0802001c 	.word	0x0802001c

08005174 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff fec8 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005184:	4604      	mov	r4, r0
 8005186:	6838      	ldr	r0, [r7, #0]
 8005188:	f001 f9a8 	bl	80064dc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 800518c:	4603      	mov	r3, r0
 800518e:	4619      	mov	r1, r3
 8005190:	4620      	mov	r0, r4
 8005192:	f001 f9ae 	bl	80064f2 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff febc 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800519c:	4603      	mov	r3, r0
    }
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd90      	pop	{r4, r7, pc}

080051a6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f001 f9b4 	bl	800651c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>:
class dense_product_base
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff ffed 	bl	80051a6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff ffed 	bl	80051be <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff ffea 	bl	80051d6 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff fb3d 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005216:	4604      	mov	r4, r0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff fb43 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005220:	4603      	mov	r3, r0
 8005222:	429c      	cmp	r4, r3
 8005224:	d005      	beq.n	8005232 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x42>
 8005226:	4b06      	ldr	r3, [pc, #24]	; (8005240 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x50>)
 8005228:	4a06      	ldr	r2, [pc, #24]	; (8005244 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x54>)
 800522a:	2160      	movs	r1, #96	; 0x60
 800522c:	4806      	ldr	r0, [pc, #24]	; (8005248 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x58>)
 800522e:	f018 fcb9 	bl	801dba4 <__assert_func>
 8005232:	bf00      	nop
    }
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	bd90      	pop	{r4, r7, pc}
 800523e:	bf00      	nop
 8005240:	0801fccc 	.word	0x0801fccc
 8005244:	08020198 	.word	0x08020198
 8005248:	0802001c 	.word	0x0802001c

0800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f001 f961 	bl	8006532 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff ffed 	bl	8005262 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	6039      	str	r1, [r7, #0]
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff ffec 	bl	800527a <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>:
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 80052de:	b580      	push	{r7, lr}
 80052e0:	b082      	sub	sp, #8
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f001 f92e 	bl	8006548 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>:
class dense_product_base
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff ffed 	bl	80052de <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff ffed 	bl	80052f6 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff faac 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005338:	4603      	mov	r3, r0
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fa9e 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005354:	4603      	mov	r3, r0
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff ffce 	bl	800530e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800537a:	e883 0003 	stmia.w	r3, {r0, r1}
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3308      	adds	r3, #8
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005388:	68b8      	ldr	r0, [r7, #8]
 800538a:	f7ff ffcc 	bl	8005326 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800538e:	4604      	mov	r4, r0
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff ffd6 	bl	8005342 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005396:	4603      	mov	r3, r0
 8005398:	429c      	cmp	r4, r3
 800539a:	d005      	beq.n	80053a8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x48>
 800539c:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x54>)
 800539e:	4a06      	ldr	r2, [pc, #24]	; (80053b8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x58>)
 80053a0:	2160      	movs	r1, #96	; 0x60
 80053a2:	4806      	ldr	r0, [pc, #24]	; (80053bc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x5c>)
 80053a4:	f018 fbfe 	bl	801dba4 <__assert_func>
 80053a8:	bf00      	nop
    }
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd90      	pop	{r4, r7, pc}
 80053b4:	0801fccc 	.word	0x0801fccc
 80053b8:	080202c0 	.word	0x080202c0
 80053bc:	0802001c 	.word	0x0802001c

080053c0 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>:
  EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op)
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f001 f8b2 	bl	800655e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff ffed 	bl	80053ec <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4618      	mov	r0, r3
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4618      	mov	r0, r3
 8005428:	f001 f8a4 	bl	8006574 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800542c:	4603      	mov	r3, r0
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3308      	adds	r3, #8
 8005442:	4618      	mov	r0, r3
 8005444:	f001 f8a4 	bl	8006590 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005448:	4603      	mov	r3, r0
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff ffce 	bl	8005404 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	ca07      	ldmia	r2, {r0, r1, r2}
 800546e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	60da      	str	r2, [r3, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3310      	adds	r3, #16
 800547c:	6839      	ldr	r1, [r7, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f828 	bl	80054d4 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005484:	68b8      	ldr	r0, [r7, #8]
 8005486:	f7ff ffc9 	bl	800541c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 800548a:	4604      	mov	r4, r0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff fa09 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005494:	4603      	mov	r3, r0
 8005496:	429c      	cmp	r4, r3
 8005498:	d10a      	bne.n	80054b0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x5c>
 800549a:	68b8      	ldr	r0, [r7, #8]
 800549c:	f7ff ffcb 	bl	8005436 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 80054a0:	4604      	mov	r4, r0
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff f9f3 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80054aa:	4603      	mov	r3, r0
 80054ac:	429c      	cmp	r4, r3
 80054ae:	d005      	beq.n	80054bc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x68>
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x74>)
 80054b2:	4a06      	ldr	r2, [pc, #24]	; (80054cc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x78>)
 80054b4:	2174      	movs	r1, #116	; 0x74
 80054b6:	4806      	ldr	r0, [pc, #24]	; (80054d0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x7c>)
 80054b8:	f018 fb74 	bl	801dba4 <__assert_func>
    }
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd90      	pop	{r4, r7, pc}
 80054c6:	bf00      	nop
 80054c8:	0801fa0c 	.word	0x0801fa0c
 80054cc:	0802046c 	.word	0x0802046c
 80054d0:	0801fc70 	.word	0x0801fc70

080054d4 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>:
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 80054ec:	b590      	push	{r4, r7, lr}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7ff fea8 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80054fc:	4604      	mov	r4, r0
 80054fe:	6838      	ldr	r0, [r7, #0]
 8005500:	f001 f854 	bl	80065ac <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>
 8005504:	4603      	mov	r3, r0
 8005506:	4619      	mov	r1, r3
 8005508:	4620      	mov	r0, r4
 800550a:	f001 f85a 	bl	80065c2 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>
      return this->derived();
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fe9c 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005514:	4603      	mov	r3, r0
    }
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	bd90      	pop	{r4, r7, pc}

0800551e <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f001 f855 	bl	80065ec <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff ffed 	bl	8005534 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff ffec 	bl	800554c <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f001 f82d 	bl	8006602 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>:
class dense_product_base
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff ffed 	bl	800559a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff ffed 	bl	80055b2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff fb10 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80055f4:	4603      	mov	r3, r0
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005600:	b590      	push	{r4, r7, lr}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7ff ffdc 	bl	80055ca <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3304      	adds	r3, #4
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff f933 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800562a:	4604      	mov	r4, r0
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff ffd8 	bl	80055e2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005632:	4603      	mov	r3, r0
 8005634:	429c      	cmp	r4, r3
 8005636:	d005      	beq.n	8005644 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x44>
 8005638:	4b05      	ldr	r3, [pc, #20]	; (8005650 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x50>)
 800563a:	4a06      	ldr	r2, [pc, #24]	; (8005654 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x54>)
 800563c:	2160      	movs	r1, #96	; 0x60
 800563e:	4806      	ldr	r0, [pc, #24]	; (8005658 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x58>)
 8005640:	f018 fab0 	bl	801dba4 <__assert_func>
 8005644:	bf00      	nop
    }
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	bd90      	pop	{r4, r7, pc}
 8005650:	0801fccc 	.word	0x0801fccc
 8005654:	080206e0 	.word	0x080206e0
 8005658:	0802001c 	.word	0x0802001c

0800565c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 ffcc 	bl	8006618 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>:
class dense_product_base
 800568a:	b580      	push	{r7, lr}
 800568c:	b082      	sub	sp, #8
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff ffed 	bl	8005672 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b082      	sub	sp, #8
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff ffed 	bl	800568a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80056bc:	b590      	push	{r4, r7, lr}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f7ff ffea 	bl	80056a2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff fa99 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80056e2:	4604      	mov	r4, r0
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff f8dd 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80056ec:	4603      	mov	r3, r0
 80056ee:	429c      	cmp	r4, r3
 80056f0:	d005      	beq.n	80056fe <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 80056f2:	4b06      	ldr	r3, [pc, #24]	; (800570c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 80056f4:	4a06      	ldr	r2, [pc, #24]	; (8005710 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 80056f6:	2160      	movs	r1, #96	; 0x60
 80056f8:	4806      	ldr	r0, [pc, #24]	; (8005714 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 80056fa:	f018 fa53 	bl	801dba4 <__assert_func>
 80056fe:	bf00      	nop
    }
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	bd90      	pop	{r4, r7, pc}
 800570a:	bf00      	nop
 800570c:	0801fccc 	.word	0x0801fccc
 8005710:	0802082c 	.word	0x0802082c
 8005714:	0802001c 	.word	0x0802001c

08005718 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>:
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4618      	mov	r0, r3
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 ff79 	bl	800662e <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff ffed 	bl	800572e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff ffed 	bl	8005746 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff f884 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005788:	4603      	mov	r3, r0
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005794:	b590      	push	{r4, r7, lr}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff ffdc 	bl	800575e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3308      	adds	r3, #8
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 80057bc:	68b8      	ldr	r0, [r7, #8]
 80057be:	f7ff ffda 	bl	8005776 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 80057c2:	4604      	mov	r4, r0
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff ff0c 	bl	80055e2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80057ca:	4603      	mov	r3, r0
 80057cc:	429c      	cmp	r4, r3
 80057ce:	d005      	beq.n	80057dc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x48>
 80057d0:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x54>)
 80057d2:	4a06      	ldr	r2, [pc, #24]	; (80057ec <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x58>)
 80057d4:	2160      	movs	r1, #96	; 0x60
 80057d6:	4806      	ldr	r0, [pc, #24]	; (80057f0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x5c>)
 80057d8:	f018 f9e4 	bl	801dba4 <__assert_func>
 80057dc:	bf00      	nop
    }
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd90      	pop	{r4, r7, pc}
 80057e8:	0801fccc 	.word	0x0801fccc
 80057ec:	08020954 	.word	0x08020954
 80057f0:	0802001c 	.word	0x0802001c

080057f4 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4618      	mov	r0, r3
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 ff0b 	bl	8006644 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff ffed 	bl	8005820 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fefd 	bl	800665a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8005860:	4603      	mov	r3, r0
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800586a:	b580      	push	{r7, lr}
 800586c:	b082      	sub	sp, #8
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3308      	adds	r3, #8
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fefd 	bl	8006676 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800587c:	4603      	mov	r3, r0
 800587e:	4618      	mov	r0, r3
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8005886:	b580      	push	{r7, lr}
 8005888:	b082      	sub	sp, #8
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	f000 ff00 	bl	8006692 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 8005892:	4603      	mov	r3, r0
 8005894:	4618      	mov	r0, r3
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	f000 fefd 	bl	80066a2 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>
 80058a8:	4603      	mov	r3, r0
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80058b4:	b590      	push	{r4, r7, lr}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7ff ffb8 	bl	8005838 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80058ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	60da      	str	r2, [r3, #12]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3310      	adds	r3, #16
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fdf8 	bl	80054d4 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80058e4:	68b8      	ldr	r0, [r7, #8]
 80058e6:	f7ff ffb3 	bl	8005850 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 80058ea:	4604      	mov	r4, r0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff ffc9 	bl	8005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80058f4:	4603      	mov	r3, r0
 80058f6:	429c      	cmp	r4, r3
 80058f8:	d10a      	bne.n	8005910 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x5c>
 80058fa:	68b8      	ldr	r0, [r7, #8]
 80058fc:	f7ff ffb5 	bl	800586a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005900:	4604      	mov	r4, r0
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff ffc9 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800590a:	4603      	mov	r3, r0
 800590c:	429c      	cmp	r4, r3
 800590e:	d005      	beq.n	800591c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x68>
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x74>)
 8005912:	4a06      	ldr	r2, [pc, #24]	; (800592c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x78>)
 8005914:	2174      	movs	r1, #116	; 0x74
 8005916:	4806      	ldr	r0, [pc, #24]	; (8005930 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x7c>)
 8005918:	f018 f944 	bl	801dba4 <__assert_func>
    }
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	bd90      	pop	{r4, r7, pc}
 8005926:	bf00      	nop
 8005928:	0801fa0c 	.word	0x0801fa0c
 800592c:	08020b00 	.word	0x08020b00
 8005930:	0801fc70 	.word	0x0801fc70

08005934 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>:
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff ff7b 	bl	8005850 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 800595a:	4603      	mov	r3, r0
    }
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff ff7b 	bl	800586a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005974:	4603      	mov	r3, r0
    }
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fe93 	bl	80066b2 <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>:
  XprTypeNested m_xpr;
};

// Generic API dispatcher
template<typename XprType, typename StorageKind>
class InverseImpl
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7ff ffed 	bl	800597e <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit EIGEN_DEVICE_FUNC Inverse(const XprType &xpr)
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
    : m_xpr(xpr)
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff ffec 	bl	8005996 <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fe fc9b 	bl	80042fe <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
  {}
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>:
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>:
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b082      	sub	sp, #8
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fe5e 	bl	80066c8 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>:
class dense_product_base
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff ffed 	bl	80059fe <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b082      	sub	sp, #8
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff ffed 	bl	8005a16 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3304      	adds	r3, #4
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fe0f 	bl	8006676 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index rows() const EIGEN_NOEXCEPT { return m_xpr.cols(); }
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff ff79 	bl	8005964 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005a72:	4603      	mov	r3, r0
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005a7c:	b590      	push	{r4, r7, lr}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f7ff ffd0 	bl	8005a2e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a96:	e883 0003 	stmia.w	r3, {r0, r1}
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe fc71 	bl	8004388 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8005aa6:	68b8      	ldr	r0, [r7, #8]
 8005aa8:	f7ff ffcd 	bl	8005a46 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8005aac:	4604      	mov	r4, r0
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7ff ffd7 	bl	8005a62 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	429c      	cmp	r4, r3
 8005ab8:	d005      	beq.n	8005ac6 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x4a>
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x58>)
 8005abc:	4a06      	ldr	r2, [pc, #24]	; (8005ad8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x5c>)
 8005abe:	2160      	movs	r1, #96	; 0x60
 8005ac0:	4806      	ldr	r0, [pc, #24]	; (8005adc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x60>)
 8005ac2:	f018 f86f 	bl	801dba4 <__assert_func>
 8005ac6:	bf00      	nop
    }
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd90      	pop	{r4, r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	0801fccc 	.word	0x0801fccc
 8005ad8:	08020d74 	.word	0x08020d74
 8005adc:	0802001c 	.word	0x0802001c

08005ae0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005ae0:	b590      	push	{r4, r7, lr}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff fa12 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005af0:	4604      	mov	r4, r0
 8005af2:	6838      	ldr	r0, [r7, #0]
 8005af4:	f000 fdf3 	bl	80066de <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 8005af8:	4603      	mov	r3, r0
 8005afa:	4619      	mov	r1, r3
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fdf9 	bl	80066f4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>
      return this->derived();
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff fa06 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005b08:	4603      	mov	r3, r0
    }
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd90      	pop	{r4, r7, pc}

08005b12 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fdff 	bl	800671e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff ffed 	bl	8005b12 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff ffed 	bl	8005b2a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005b5c:	b590      	push	{r4, r7, lr}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f7ff ffea 	bl	8005b42 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff f849 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005b82:	4604      	mov	r4, r0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe ff33 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	429c      	cmp	r4, r3
 8005b90:	d005      	beq.n	8005b9e <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 8005b92:	4b06      	ldr	r3, [pc, #24]	; (8005bac <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005b94:	4a06      	ldr	r2, [pc, #24]	; (8005bb0 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005b96:	2160      	movs	r1, #96	; 0x60
 8005b98:	4806      	ldr	r0, [pc, #24]	; (8005bb4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005b9a:	f018 f803 	bl	801dba4 <__assert_func>
 8005b9e:	bf00      	nop
    }
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd90      	pop	{r4, r7, pc}
 8005baa:	bf00      	nop
 8005bac:	0801fccc 	.word	0x0801fccc
 8005bb0:	080210fc 	.word	0x080210fc
 8005bb4:	0802001c 	.word	0x0802001c

08005bb8 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_difference_op : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_difference_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_difference_op)
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fda1 	bl	8006734 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff ffed 	bl	8005be4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff f802 	bl	8004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005c26:	4603      	mov	r3, r0
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fe fecd 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005c42:	4603      	mov	r3, r0
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005c4c:	b590      	push	{r4, r7, lr}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f7ff ffce 	bl	8005bfc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c70:	e883 0003 	stmia.w	r3, {r0, r1}
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	330c      	adds	r3, #12
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 f828 	bl	8005cd0 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff fdff 	bl	8005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005c88:	4604      	mov	r4, r0
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff ffc2 	bl	8005c14 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8005c90:	4603      	mov	r3, r0
 8005c92:	429c      	cmp	r4, r3
 8005c94:	d10a      	bne.n	8005cac <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff fdff 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff ffc5 	bl	8005c30 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	429c      	cmp	r4, r3
 8005caa:	d005      	beq.n	8005cb8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 8005cae:	4a06      	ldr	r2, [pc, #24]	; (8005cc8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 8005cb0:	2174      	movs	r1, #116	; 0x74
 8005cb2:	4806      	ldr	r0, [pc, #24]	; (8005ccc <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 8005cb4:	f017 ff76 	bl	801dba4 <__assert_func>
    }
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd90      	pop	{r4, r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	0801fa0c 	.word	0x0801fa0c
 8005cc8:	08021224 	.word	0x08021224
 8005ccc:	0801fc70 	.word	0x0801fc70

08005cd0 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>:
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>:
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fd1f 	bl	800674a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>:
class dense_product_base
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b082      	sub	sp, #8
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff ffed 	bl	8005cfe <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff ffed 	bl	8005d16 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b082      	sub	sp, #8
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fd97 	bl	8005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005d58:	4603      	mov	r3, r0
    }
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005d64:	b590      	push	{r4, r7, lr}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f7ff ffdc 	bl	8005d2e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	6879      	ldr	r1, [r7, #4]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fb6b 	bl	800445e <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fe26 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005d90:	4604      	mov	r4, r0
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff ffd7 	bl	8005d46 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	429c      	cmp	r4, r3
 8005d9c:	d005      	beq.n	8005daa <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x46>
 8005d9e:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x54>)
 8005da0:	4a06      	ldr	r2, [pc, #24]	; (8005dbc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x58>)
 8005da2:	2160      	movs	r1, #96	; 0x60
 8005da4:	4806      	ldr	r0, [pc, #24]	; (8005dc0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x5c>)
 8005da6:	f017 fefd 	bl	801dba4 <__assert_func>
 8005daa:	bf00      	nop
    }
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd90      	pop	{r4, r7, pc}
 8005db6:	bf00      	nop
 8005db8:	0801fccc 	.word	0x0801fccc
 8005dbc:	0802141c 	.word	0x0802141c
 8005dc0:	0802001c 	.word	0x0802001c

08005dc4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>:
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fcbc 	bl	8006760 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7ff ffed 	bl	8005dda <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe fdeb 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3304      	adds	r3, #4
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fc9f 	bl	8006776 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005e44:	b590      	push	{r4, r7, lr}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f7ff ffcd 	bl	8005df2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3304      	adds	r3, #4
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fe fb30 	bl	80044ca <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3318      	adds	r3, #24
 8005e6e:	6839      	ldr	r1, [r7, #0]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fb2f 	bl	80054d4 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fe fdba 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005e7e:	4604      	mov	r4, r0
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff ffc2 	bl	8005e0a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 8005e86:	4603      	mov	r3, r0
 8005e88:	429c      	cmp	r4, r3
 8005e8a:	d10a      	bne.n	8005ea2 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x5e>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fda4 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005e94:	4604      	mov	r4, r0
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff ffc5 	bl	8005e26 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	429c      	cmp	r4, r3
 8005ea0:	d005      	beq.n	8005eae <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x6a>
 8005ea2:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x74>)
 8005ea4:	4a05      	ldr	r2, [pc, #20]	; (8005ebc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x78>)
 8005ea6:	2174      	movs	r1, #116	; 0x74
 8005ea8:	4805      	ldr	r0, [pc, #20]	; (8005ec0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x7c>)
 8005eaa:	f017 fe7b 	bl	801dba4 <__assert_func>
    }
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd90      	pop	{r4, r7, pc}
 8005eb8:	0801fa0c 	.word	0x0801fa0c
 8005ebc:	08021688 	.word	0x08021688
 8005ec0:	0801fc70 	.word	0x0801fc70

08005ec4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005ec4:	b590      	push	{r4, r7, lr}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff f820 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	6838      	ldr	r0, [r7, #0]
 8005ed8:	f000 fc5b 	bl	8006792 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 8005edc:	4603      	mov	r3, r0
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f000 fc61 	bl	80067a8 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>
      return this->derived();
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff f814 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005eec:	4603      	mov	r3, r0
    }
 8005eee:	4618      	mov	r0, r3
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd90      	pop	{r4, r7, pc}

08005ef6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b082      	sub	sp, #8
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fc67 	bl	80067d2 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>:
class dense_product_base
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b082      	sub	sp, #8
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff ffed 	bl	8005ef6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b082      	sub	sp, #8
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff ffed 	bl	8005f0e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005f40:	b590      	push	{r4, r7, lr}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f7ff ffea 	bl	8005f26 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe fd3b 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005f66:	4604      	mov	r4, r0
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe fe5d 	bl	8004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005f70:	4603      	mov	r3, r0
 8005f72:	429c      	cmp	r4, r3
 8005f74:	d005      	beq.n	8005f82 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005f78:	4a06      	ldr	r2, [pc, #24]	; (8005f94 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005f7a:	2160      	movs	r1, #96	; 0x60
 8005f7c:	4806      	ldr	r0, [pc, #24]	; (8005f98 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005f7e:	f017 fe11 	bl	801dba4 <__assert_func>
 8005f82:	bf00      	nop
    }
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd90      	pop	{r4, r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	0801fccc 	.word	0x0801fccc
 8005f94:	080219bc 	.word	0x080219bc
 8005f98:	0802001c 	.word	0x0802001c

08005f9c <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>:
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fc14 	bl	80067e8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff ffed 	bl	8005fb2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fcff 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe fe02 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006010:	4603      	mov	r3, r0
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800601c:	b590      	push	{r4, r7, lr}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff ffcd 	bl	8005fca <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3304      	adds	r3, #4
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006040:	e883 0003 	stmia.w	r3, {r0, r1}
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	330c      	adds	r3, #12
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff fe40 	bl	8005cd0 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe fc27 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006058:	4604      	mov	r4, r0
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff ffc1 	bl	8005fe2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 8006060:	4603      	mov	r3, r0
 8006062:	429c      	cmp	r4, r3
 8006064:	d10a      	bne.n	800607c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4618      	mov	r0, r3
 800606a:	f7fe fc11 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800606e:	4604      	mov	r4, r0
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff ffc4 	bl	8005ffe <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 8006076:	4603      	mov	r3, r0
 8006078:	429c      	cmp	r4, r3
 800607a:	d005      	beq.n	8006088 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 800607e:	4a06      	ldr	r2, [pc, #24]	; (8006098 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 8006080:	2174      	movs	r1, #116	; 0x74
 8006082:	4806      	ldr	r0, [pc, #24]	; (800609c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 8006084:	f017 fd8e 	bl	801dba4 <__assert_func>
    }
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	bd90      	pop	{r4, r7, pc}
 8006092:	bf00      	nop
 8006094:	0801fa0c 	.word	0x0801fa0c
 8006098:	08021ae4 	.word	0x08021ae4
 800609c:	0801fc70 	.word	0x0801fc70

080060a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>:
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fb9d 	bl	80067fe <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>:
class dense_product_base
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b082      	sub	sp, #8
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff ffed 	bl	80060b6 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff ffed 	bl	80060ce <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fbc0 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006110:	4603      	mov	r3, r0
    }
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800611c:	b590      	push	{r4, r7, lr}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff ffdc 	bl	80060e6 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	4618      	mov	r0, r3
 8006134:	f7fe fa41 	bl	80045ba <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 800613e:	68b8      	ldr	r0, [r7, #8]
 8006140:	f7ff ffdd 	bl	80060fe <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8006144:	4604      	mov	r4, r0
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4618      	mov	r0, r3
 800614a:	f7fe fbac 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800614e:	4603      	mov	r3, r0
 8006150:	429c      	cmp	r4, r3
 8006152:	d005      	beq.n	8006160 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x44>
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x50>)
 8006156:	4a06      	ldr	r2, [pc, #24]	; (8006170 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x54>)
 8006158:	2160      	movs	r1, #96	; 0x60
 800615a:	4806      	ldr	r0, [pc, #24]	; (8006174 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x58>)
 800615c:	f017 fd22 	bl	801dba4 <__assert_func>
 8006160:	bf00      	nop
    }
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	bd90      	pop	{r4, r7, pc}
 800616c:	0801fccc 	.word	0x0801fccc
 8006170:	08021cdc 	.word	0x08021cdc
 8006174:	0802001c 	.word	0x0802001c

08006178 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8006178:	b590      	push	{r4, r7, lr}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff f862 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006188:	4604      	mov	r4, r0
 800618a:	6838      	ldr	r0, [r7, #0]
 800618c:	f000 fb42 	bl	8006814 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 8006190:	4603      	mov	r3, r0
 8006192:	4619      	mov	r1, r3
 8006194:	4620      	mov	r0, r4
 8006196:	f000 fb48 	bl	800682a <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff f856 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80061a0:	4603      	mov	r3, r0
    }
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd90      	pop	{r4, r7, pc}

080061aa <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    }

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(DenseBase)
    /** Default constructor. Do nothing. */
    EIGEN_DEVICE_FUNC DenseBase()
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
#ifdef EIGEN_INTERNAL_DEBUGGING
      EIGEN_STATIC_ASSERT((EIGEN_IMPLIES(MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1, int(IsRowMajor))
                        && EIGEN_IMPLIES(MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1, int(!IsRowMajor))),
                          INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION)
#endif
    }
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4618      	mov	r0, r3
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>:
// purely fixed-size matrix
template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage
{
    internal::plain_array<T,Size,_Options> m_data;
  public:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fb42 	bl	8006854 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>
      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
    }
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
    }
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4618      	mov	r0, r3
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fb35 	bl	800686a <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>
    }
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
    }
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4618      	mov	r0, r3
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fb28 	bl	8006880 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>
    }
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
    }
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fb1b 	bl	8006896 <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>
    }
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>:
    }
    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
      numext::swap(m_data, other.m_data);
    }
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 800626a:	b480      	push	{r7}
 800626c:	af00      	add	r7, sp, #0
 800626e:	2303      	movs	r3, #3
 8006270:	4618      	mov	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 800627a:	b480      	push	{r7}
 800627c:	af00      	add	r7, sp, #0
 800627e:	2303      	movs	r3, #3
 8006280:	4618      	mov	r0, r3
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	2301      	movs	r3, #1
 80062a6:	4618      	mov	r0, r3
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	2303      	movs	r3, #3
 80062b6:	4618      	mov	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 80062d6:	b590      	push	{r4, r7, lr}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fae1 	bl	80068ac <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 80062ea:	4604      	mov	r4, r0
 80062ec:	f000 f9d1 	bl	8006692 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 80062f0:	4602      	mov	r2, r0
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	fb03 f202 	mul.w	r2, r3, r2
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4423      	add	r3, r4
    }
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	bd90      	pop	{r4, r7, pc}

08006308 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
 800630c:	2303      	movs	r3, #3
 800630e:	4618      	mov	r0, r3
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
 800631c:	2301      	movs	r3, #1
 800631e:	4618      	mov	r0, r3
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>:

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  evaluator() {}

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit evaluator(const XprType& m)
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	4611      	mov	r1, r2
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fab7 	bl	80068c2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
  { }
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8006374:	b590      	push	{r4, r7, lr}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681c      	ldr	r4, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fab2 	bl	80068f0 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 800638c:	4602      	mov	r2, r0
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	fb03 f202 	mul.w	r2, r3, r2
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4423      	add	r3, r4
  }
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd90      	pop	{r4, r7, pc}

080063a4 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
    }
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>:
  */
template<typename T, int Value> class variable_if_dynamic
{
  public:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(variable_if_dynamic)
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d005      	beq.n	80063d8 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x1c>
 80063cc:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x28>)
 80063ce:	4a06      	ldr	r2, [pc, #24]	; (80063e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x2c>)
 80063d0:	2185      	movs	r1, #133	; 0x85
 80063d2:	4806      	ldr	r0, [pc, #24]	; (80063ec <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x30>)
 80063d4:	f017 fbe6 	bl	801dba4 <__assert_func>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	08021f48 	.word	0x08021f48
 80063e8:	08021f58 	.word	0x08021f58
 80063ec:	08021fc0 	.word	0x08021fc0

080063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>:
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d005      	beq.n	800640c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x1c>
 8006400:	4b05      	ldr	r3, [pc, #20]	; (8006418 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x28>)
 8006402:	4a06      	ldr	r2, [pc, #24]	; (800641c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x2c>)
 8006404:	2185      	movs	r1, #133	; 0x85
 8006406:	4806      	ldr	r0, [pc, #24]	; (8006420 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x30>)
 8006408:	f017 fbcc 	bl	801dba4 <__assert_func>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	08021f48 	.word	0x08021f48
 800641c:	0802201c 	.word	0x0802201c
 8006420:	08021fc0 	.word	0x08021fc0

08006424 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
    }
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>:
    EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    T value() { return T(Value); }
 800643a:	b480      	push	{r7}
 800643c:	af00      	add	r7, sp, #0
 800643e:	2303      	movs	r3, #3
 8006440:	4618      	mov	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>:
 800644a:	b480      	push	{r7}
 800644c:	af00      	add	r7, sp, #0
 800644e:	2301      	movs	r3, #1
 8006450:	4618      	mov	r0, r3
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
    }
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
    }
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>:
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>:
// So this intermediate function removes everything related to "assume-aliasing" such that Assignment
// does not has to bother about these annoying details.

template<typename Dst, typename Src>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src)
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
{
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 80064a6:	f107 030c 	add.w	r3, r7, #12
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fa2b 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80064b0:	f107 020c 	add.w	r2, r7, #12
 80064b4:	2300      	movs	r3, #0
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fa2f 	bl	800691c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>
}
 80064be:	bf00      	nop
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
    }
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4618      	mov	r0, r3
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 80064fc:	f107 030c 	add.w	r3, r7, #12
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fa00 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006506:	f107 020c 	add.w	r2, r7, #12
 800650a:	2300      	movs	r3, #0
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa1c 	bl	800694c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>
}
 8006514:	bf00      	nop
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
    }
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4618      	mov	r0, r3
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
    }
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
    }
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
    }
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4618      	mov	r0, r3
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4618      	mov	r0, r3
 8006582:	f7fe f990 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006586:	4603      	mov	r3, r0
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4618      	mov	r0, r3
 800659e:	f7fe f982 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80065a2:	4603      	mov	r3, r0
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>:
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4618      	mov	r0, r3
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 80065cc:	f107 030c 	add.w	r3, r7, #12
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 f998 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80065d6:	f107 020c 	add.w	r2, r7, #12
 80065da:	2300      	movs	r3, #0
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f9cc 	bl	800697c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 80065e4:	bf00      	nop
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
    }
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4618      	mov	r0, r3
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
    }
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
    }
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
    }
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
    }
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4618      	mov	r0, r3
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>:
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe fadf 	bl	8004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800666c:	4603      	mov	r3, r0
 800666e:	4618      	mov	r0, r3
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4618      	mov	r0, r3
 8006684:	f7fe fad1 	bl	8004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006688:	4603      	mov	r3, r0
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006692:	b480      	push	{r7}
 8006694:	af00      	add	r7, sp, #0
 8006696:	2301      	movs	r3, #1
 8006698:	4618      	mov	r0, r3
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 80066a2:	b480      	push	{r7}
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	2301      	movs	r3, #1
 80066a8:	4618      	mov	r0, r3
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
    }
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4618      	mov	r0, r3
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
    }
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>:
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 80066fe:	f107 030c 	add.w	r3, r7, #12
 8006702:	4618      	mov	r0, r3
 8006704:	f000 f8ff 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006708:	f107 020c 	add.w	r2, r7, #12
 800670c:	2300      	movs	r3, #0
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f943 	bl	800699c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>
}
 8006716:	bf00      	nop
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
    }
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4618      	mov	r0, r3
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
    }
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4618      	mov	r0, r3
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
    }
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
    }
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4618      	mov	r0, r3
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4618      	mov	r0, r3
 8006784:	f7ff f88a 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8006788:	4603      	mov	r3, r0
    }
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>:
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 80067b2:	f107 030c 	add.w	r3, r7, #12
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 f8a5 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80067bc:	f107 020c 	add.w	r2, r7, #12
 80067c0:	2300      	movs	r3, #0
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f901 	bl	80069cc <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>
}
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
    }
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
    }
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
    }
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>:
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4618      	mov	r0, r3
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006834:	f107 030c 	add.w	r3, r7, #12
 8006838:	4618      	mov	r0, r3
 800683a:	f000 f864 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800683e:	f107 020c 	add.w	r2, r7, #12
 8006842:	2300      	movs	r3, #0
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f8d8 	bl	80069fc <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>:
  plain_array()
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800685c:	f000 f8e6 	bl	8006a2c <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>:
  plain_array()
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006872:	f000 f8e2 	bl	8006a3a <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>
  }
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>:
  plain_array()
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8006888:	f000 f8de 	bl	8006a48 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>:
  plain_array()
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800689e:	f000 f8d3 	bl	8006a48 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4618      	mov	r0, r3
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 80068c2:	b590      	push	{r4, r7, lr}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f8cf 	bl	8006a70 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 80068d2:	687c      	ldr	r4, [r7, #4]
 80068d4:	6838      	ldr	r0, [r7, #0]
 80068d6:	f000 f8be 	bl	8006a56 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 80068da:	4603      	mov	r3, r0
 80068dc:	2200      	movs	r2, #0
 80068de:	4619      	mov	r1, r3
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 f8d0 	bl	8006a86 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4618      	mov	r0, r3
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd90      	pop	{r4, r7, pc}

080068f0 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	2300      	movs	r3, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>:
}

// Deal with "assume-aliasing"
template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 800691c:	b580      	push	{r7, lr}
 800691e:	b08e      	sub	sp, #56	; 0x38
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
{
  typename plain_matrix_type<Src>::type tmp(src);
 800692a:	f107 0314 	add.w	r3, r7, #20
 800692e:	68b9      	ldr	r1, [r7, #8]
 8006930:	4618      	mov	r0, r3
 8006932:	f000 f8ba 	bl	8006aaa <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006936:	f107 0314 	add.w	r3, r7, #20
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	4619      	mov	r1, r3
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f8c8 	bl	8006ad4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006944:	bf00      	nop
 8006946:	3738      	adds	r7, #56	; 0x38
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 800695a:	f107 0314 	add.w	r3, r7, #20
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 f8c8 	bl	8006af6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006966:	f107 0314 	add.w	r3, r7, #20
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	4619      	mov	r1, r3
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f8d6 	bl	8006b20 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006974:	bf00      	nop
 8006976:	3720      	adds	r7, #32
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:

template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if<!evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
{
  call_assignment_no_alias(dst, src, func);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f8d7 	bl	8006b42 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006994:	bf00      	nop
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 80069aa:	f107 0314 	add.w	r3, r7, #20
 80069ae:	68b9      	ldr	r1, [r7, #8]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 f8d7 	bl	8006b64 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 80069b6:	f107 0314 	add.w	r3, r7, #20
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	4619      	mov	r1, r3
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 f8ae 	bl	8006b20 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80069c4:	bf00      	nop
 80069c6:	3720      	adds	r7, #32
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 80069da:	f107 0314 	add.w	r3, r7, #20
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 f8d4 	bl	8006b8e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 80069e6:	f107 0314 	add.w	r3, r7, #20
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4619      	mov	r1, r3
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 f896 	bl	8006b20 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80069f4:	bf00      	nop
 80069f6:	3720      	adds	r7, #32
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08e      	sub	sp, #56	; 0x38
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8006a0a:	f107 0314 	add.w	r3, r7, #20
 8006a0e:	68b9      	ldr	r1, [r7, #8]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 f8d1 	bl	8006bb8 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006a16:	f107 0314 	add.w	r3, r7, #20
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 f858 	bl	8006ad4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006a24:	bf00      	nop
 8006a26:	3738      	adds	r7, #56	; 0x38
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>:
void check_static_allocation_size()
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
}
 8006a30:	bf00      	nop
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>:
void check_static_allocation_size()
 8006a3a:	b480      	push	{r7}
 8006a3c:	af00      	add	r7, sp, #0
}
 8006a3e:	bf00      	nop
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>:
void check_static_allocation_size()
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
}
 8006a4c:	bf00      	nop
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b082      	sub	sp, #8
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 f8be 	bl	8006be2 <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 8006a66:	4603      	mov	r3, r0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8006a98:	1d3b      	adds	r3, r7, #4
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fd f82d 	bl	8003afa <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>:
#ifndef EIGEN_PARSED_BY_DOXYGEN

    // This constructor is for both 1x1 matrices and dynamic vectors
    template<typename T>
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    explicit Matrix(const T& x)
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]
    {
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fd fdf3 	bl	80046a2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8006abc:	f7fd fe01 	bl	80046c2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 f8a3 	bl	8006c10 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
}


template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
                      ) && int(Dst::SizeAtCompileTime) != 1
  };

  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst>::type ActualDstTypeCleaned;
  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst&>::type ActualDstType;
  ActualDstType actualDst(dst);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	617b      	str	r3, [r7, #20]
  // TODO check whether this is the right place to perform these checks:
  EIGEN_STATIC_ASSERT_LVALUE(Dst)
  EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ActualDstTypeCleaned,Src)
  EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename ActualDstTypeCleaned::Scalar,typename Src::Scalar);

  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	6978      	ldr	r0, [r7, #20]
 8006aea:	f000 f89e 	bl	8006c2a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 8006aee:	bf00      	nop
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]
    {
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fd fe13 	bl	800472e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8006b08:	f7fd fe21 	bl	800474e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 f89d 	bl	8006c50 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	6978      	ldr	r0, [r7, #20]
 8006b36:	f000 f898 	bl	8006c6a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 8006b3a:	bf00      	nop
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b086      	sub	sp, #24
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	68b9      	ldr	r1, [r7, #8]
 8006b56:	6978      	ldr	r0, [r7, #20]
 8006b58:	f000 f89a 	bl	8006c90 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8006b5c:	bf00      	nop
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
    {
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fd fddc 	bl	800472e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8006b76:	f7fd fdea 	bl	800474e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 f899 	bl	8006cb6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4618      	mov	r0, r3
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
    {
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fd fdc7 	bl	800472e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8006ba0:	f7fd fdd5 	bl	800474e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 f891 	bl	8006cd0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
    {
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fd fd6c 	bl	80046a2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8006bca:	f7fd fd7a 	bl	80046c2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 f889 	bl	8006cea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>:
    { }

    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f87f 	bl	8006d04 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>
 8006c06:	4603      	mov	r3, r0
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f87d 	bl	8006d1c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8006c22:	bf00      	nop
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
// both partial specialization+SFINAE without ambiguous specialization
template< typename DstXprType, typename SrcXprType, typename Functor, typename Weak>
struct Assignment<DstXprType, SrcXprType, Functor, Dense2Dense, Weak>
{
  EIGEN_DEVICE_FUNC
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b084      	sub	sp, #16
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	607a      	str	r2, [r7, #4]
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
 8006c36:	68b9      	ldr	r1, [r7, #8]
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 f890 	bl	8006d5e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>
#endif

    call_dense_assignment_loop(dst, src, func);
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	68b9      	ldr	r1, [r7, #8]
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f8c4 	bl	8006dd0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8006c48:	bf00      	nop
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f8ef 	bl	8006e40 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8006c62:	bf00      	nop
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8006c76:	68b9      	ldr	r1, [r7, #8]
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 f902 	bl	8006e82 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f908 	bl	8006e98 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8006c88:	bf00      	nop
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 f932 	bl	8006f08 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	68b9      	ldr	r1, [r7, #8]
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 f9ca 	bl	8007042 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8006cae:	bf00      	nop
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f9f5 	bl	80070b2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8006cc8:	bf00      	nop
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fa09 	bl	80070f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fa1d 	bl	8007136 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fa33 	bl	8007178 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>
 8006d12:	4603      	mov	r3, r0
    }
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8006d1c:	b5b0      	push	{r4, r5, r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7fe fa90 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	6838      	ldr	r0, [r7, #0]
 8006d30:	f7ff fba9 	bl	8006486 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 8006d34:	4605      	mov	r5, r0
 8006d36:	f107 030c 	add.w	r3, r7, #12
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff fde3 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006d40:	f107 030c 	add.w	r3, r7, #12
 8006d44:	461a      	mov	r2, r3
 8006d46:	4629      	mov	r1, r5
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 fa27 	bl	800719c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fe fa7c 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006d54:	4603      	mov	r3, r0
    }
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bdb0      	pop	{r4, r5, r7, pc}

08006d5e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>:
    {
    }
};

template<typename Dst, typename Src>
void check_for_aliasing(const Dst &dst, const Src &src)
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
{
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fd fd9b 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	dd08      	ble.n	8006d88 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fd fd89 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	dd01      	ble.n	8006d88 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 8006d84:	2301      	movs	r3, #1
 8006d86:	e000      	b.n	8006d8a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2c>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fa14 	bl	80071be <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>
}
 8006d96:	bf00      	nop
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fa24 	bl	80071f4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff ffec 	bl	8006d9e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08c      	sub	sp, #48	; 0x30
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8006ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 f9f6 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 fa0d 	bl	800720c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8006df2:	f107 0320 	add.w	r3, r7, #32
 8006df6:	68f9      	ldr	r1, [r7, #12]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 f9eb 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 fa50 	bl	80072a4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8006e04:	4603      	mov	r3, r0
 8006e06:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006e0a:	f107 0120 	add.w	r1, r7, #32
 8006e0e:	f107 0010 	add.w	r0, r7, #16
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f000 fa50 	bl	80072ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8006e1a:	f107 0310 	add.w	r3, r7, #16
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 fa65 	bl	80072ee <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 8006e24:	f107 0320 	add.w	r3, r7, #32
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7ff ffc4 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8006e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff ffbf 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
}
 8006e38:	bf00      	nop
 8006e3a:	3728      	adds	r7, #40	; 0x28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8006e40:	b5b0      	push	{r4, r5, r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fe f862 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006e50:	4604      	mov	r4, r0
 8006e52:	6838      	ldr	r0, [r7, #0]
 8006e54:	f7ff fb42 	bl	80064dc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8006e58:	4605      	mov	r5, r0
 8006e5a:	f107 030c 	add.w	r3, r7, #12
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff fd51 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006e64:	f107 030c 	add.w	r3, r7, #12
 8006e68:	461a      	mov	r2, r3
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f000 fa49 	bl	8007304 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fe f84e 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006e78:	4603      	mov	r3, r0
    }
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bdb0      	pop	{r4, r5, r7, pc}

08006e82 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08c      	sub	sp, #48	; 0x30
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8006ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ea8:	68b9      	ldr	r1, [r7, #8]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff fa47 	bl	800633e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 fa37 	bl	8007328 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8006eba:	f107 0320 	add.w	r3, r7, #32
 8006ebe:	68f9      	ldr	r1, [r7, #12]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff fa3c 	bl	800633e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 fa7a 	bl	80073c0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006ed2:	f107 0120 	add.w	r1, r7, #32
 8006ed6:	f107 0010 	add.w	r0, r7, #16
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f000 fa7a 	bl	80073d6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8006ee2:	f107 0310 	add.w	r3, r7, #16
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 fa8f 	bl	800740a <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 8006eec:	f107 0320 	add.w	r3, r7, #32
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fd feea 	bl	8004cca <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8006ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fd fee5 	bl	8004cca <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
}
 8006f00:	bf00      	nop
 8006f02:	3728      	adds	r7, #40	; 0x28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fd fcc6 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	dd08      	ble.n	8006f32 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fd fcb4 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	dd01      	ble.n	8006f32 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2c>
 8006f32:	2300      	movs	r3, #0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa70 	bl	8007420 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fa8a 	bl	800746a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff ffec 	bl	8006f48 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>:
};

// This is the default evaluator implementation for products:
// It creates a temporary and call generic_product_impl
template<typename Lhs, typename Rhs, int Options, int ProductTag, typename LhsShape, typename RhsShape>
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff ffeb 	bl	8006f60 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff ffeb 	bl	8006f7a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff ffeb 	bl	8006f94 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff feef 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>:
  }

protected:

  // this helper permits to completely eliminate the functor if it is empty
  struct Data
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b082      	sub	sp, #8
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	332c      	adds	r3, #44	; 0x2c
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff ffea 	bl	8006fc8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7ff ffd8 	bl	8006fae <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4618      	mov	r0, r3
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff ffe5 	bl	8006fe2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fa1b 	bl	8007454 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff ffe8 	bl	8007008 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8007042:	b580      	push	{r7, lr}
 8007044:	b098      	sub	sp, #96	; 0x60
 8007046:	af02      	add	r7, sp, #8
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800704e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007052:	68b9      	ldr	r1, [r7, #8]
 8007054:	4618      	mov	r0, r3
 8007056:	f000 f9ee 	bl	8007436 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	68b9      	ldr	r1, [r7, #8]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fa28 	bl	80074b4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8007064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007068:	68f9      	ldr	r1, [r7, #12]
 800706a:	4618      	mov	r0, r3
 800706c:	f000 f8b2 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f917 	bl	80072a4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8007076:	4603      	mov	r3, r0
 8007078:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800707c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007080:	f107 0014 	add.w	r0, r7, #20
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f000 fa5e 	bl	8007548 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800708c:	f107 0314 	add.w	r3, r7, #20
 8007090:	4618      	mov	r0, r3
 8007092:	f000 fa73 	bl	800757c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8007096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff fe8b 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80070a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff ffbf 	bl	8007028 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
}
 80070aa:	bf00      	nop
 80070ac:	3758      	adds	r7, #88	; 0x58
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80070b2:	b5b0      	push	{r4, r5, r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7fd ff29 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80070c2:	4604      	mov	r4, r0
 80070c4:	6838      	ldr	r0, [r7, #0]
 80070c6:	f7ff fb0a 	bl	80066de <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 80070ca:	4605      	mov	r5, r0
 80070cc:	f107 030c 	add.w	r3, r7, #12
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7ff fc18 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80070d6:	f107 030c 	add.w	r3, r7, #12
 80070da:	461a      	mov	r2, r3
 80070dc:	4629      	mov	r1, r5
 80070de:	4620      	mov	r0, r4
 80070e0:	f000 fa57 	bl	8007592 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7fd ff15 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80070ea:	4603      	mov	r3, r0
    }
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bdb0      	pop	{r4, r5, r7, pc}

080070f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80070f4:	b5b0      	push	{r4, r5, r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7fd ff08 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007104:	4604      	mov	r4, r0
 8007106:	6838      	ldr	r0, [r7, #0]
 8007108:	f7ff fb43 	bl	8006792 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 800710c:	4605      	mov	r5, r0
 800710e:	f107 030c 	add.w	r3, r7, #12
 8007112:	4618      	mov	r0, r3
 8007114:	f7ff fbf7 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007118:	f107 030c 	add.w	r3, r7, #12
 800711c:	461a      	mov	r2, r3
 800711e:	4629      	mov	r1, r5
 8007120:	4620      	mov	r0, r4
 8007122:	f000 fa47 	bl	80075b4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7fd fef4 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800712c:	4603      	mov	r3, r0
    }
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bdb0      	pop	{r4, r5, r7, pc}

08007136 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007136:	b5b0      	push	{r4, r5, r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7fe f883 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007146:	4604      	mov	r4, r0
 8007148:	6838      	ldr	r0, [r7, #0]
 800714a:	f7ff fb63 	bl	8006814 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 800714e:	4605      	mov	r5, r0
 8007150:	f107 030c 	add.w	r3, r7, #12
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff fbd6 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800715a:	f107 030c 	add.w	r3, r7, #12
 800715e:	461a      	mov	r2, r3
 8007160:	4629      	mov	r1, r5
 8007162:	4620      	mov	r0, r4
 8007164:	f000 fa37 	bl	80075d6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7fe f86f 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800716e:	4603      	mov	r3, r0
    }
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bdb0      	pop	{r4, r5, r7, pc}

08007178 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>:
  /** \returns the number of coefficients, which is rows()*cols().
    * \sa rows(), cols(), SizeAtCompileTime. */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8007178:	b590      	push	{r4, r7, lr}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7fd fd76 	bl	8004c72 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007186:	4604      	mov	r4, r0
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7fd fd82 	bl	8004c92 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800718e:	4603      	mov	r3, r0
 8007190:	fb04 f303 	mul.w	r3, r4, r3
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	bd90      	pop	{r4, r7, pc}

0800719c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	68b9      	ldr	r1, [r7, #8]
 80071b0:	6978      	ldr	r0, [r7, #20]
 80071b2:	f000 fa3c 	bl	800762e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 80071b6:	bf00      	nop
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>:
    static void run(const Derived&, const OtherDerived&)
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
    }
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	4611      	mov	r1, r2
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fa5c 	bl	80076a2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
  { }
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
	...

0800720c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	4618      	mov	r0, r3
 800721c:	f7fd fb43 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007220:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	4618      	mov	r0, r3
 8007226:	f7fd fb33 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800722a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4618      	mov	r0, r3
 8007230:	f7fd fb39 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007234:	4602      	mov	r2, r0
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	4293      	cmp	r3, r2
 800723a:	d107      	bne.n	800724c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4618      	mov	r0, r3
 8007240:	f7fd fb26 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	4293      	cmp	r3, r2
 800724a:	d001      	beq.n	8007250 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 800724c:	2301      	movs	r3, #1
 800724e:	e000      	b.n	8007252 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8007250:	2300      	movs	r3, #0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d005      	beq.n	8007262 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	6979      	ldr	r1, [r7, #20]
 800725c:	4618      	mov	r0, r3
 800725e:	f000 fa3b 	bl	80076d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4618      	mov	r0, r3
 8007266:	f7fd fb1e 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800726a:	4602      	mov	r2, r0
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	4293      	cmp	r3, r2
 8007270:	d107      	bne.n	8007282 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4618      	mov	r0, r3
 8007276:	f7fd fb0b 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800727a:	4602      	mov	r2, r0
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	4293      	cmp	r3, r2
 8007280:	d006      	beq.n	8007290 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8007282:	4b05      	ldr	r3, [pc, #20]	; (8007298 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007284:	4a05      	ldr	r2, [pc, #20]	; (800729c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007286:	f240 21fd 	movw	r1, #765	; 0x2fd
 800728a:	4805      	ldr	r0, [pc, #20]	; (80072a0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 800728c:	f016 fc8a 	bl	801dba4 <__assert_func>
}
 8007290:	bf00      	nop
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	08022084 	.word	0x08022084
 800729c:	080220b4 	.word	0x080220b4
 80072a0:	08022198 	.word	0x08022198

080072a4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4618      	mov	r0, r3
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80072ba:	b480      	push	{r7}
 80072bc:	b085      	sub	sp, #20
 80072be:	af00      	add	r7, sp, #0
 80072c0:	60f8      	str	r0, [r7, #12]
 80072c2:	60b9      	str	r1, [r7, #8]
 80072c4:	607a      	str	r2, [r7, #4]
 80072c6:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	605a      	str	r2, [r3, #4]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	609a      	str	r2, [r3, #8]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	60da      	str	r2, [r3, #12]
  }
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa20 	bl	800773c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>
  }
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	6978      	ldr	r0, [r7, #20]
 800731a:	f000 fa3a 	bl	8007792 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 800731e:	bf00      	nop
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	4618      	mov	r0, r3
 8007338:	f7fd fb5b 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800733c:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	4618      	mov	r0, r3
 8007342:	f7fd fb4b 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007346:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4618      	mov	r0, r3
 800734c:	f7fd fb51 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007350:	4602      	mov	r2, r0
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	4293      	cmp	r3, r2
 8007356:	d107      	bne.n	8007368 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4618      	mov	r0, r3
 800735c:	f7fd fb3e 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007360:	4602      	mov	r2, r0
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	4293      	cmp	r3, r2
 8007366:	d001      	beq.n	800736c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8007368:	2301      	movs	r3, #1
 800736a:	e000      	b.n	800736e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 800736c:	2300      	movs	r3, #0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	6979      	ldr	r1, [r7, #20]
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fa45 	bl	8007808 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4618      	mov	r0, r3
 8007382:	f7fd fb36 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007386:	4602      	mov	r2, r0
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	4293      	cmp	r3, r2
 800738c:	d107      	bne.n	800739e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4618      	mov	r0, r3
 8007392:	f7fd fb23 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007396:	4602      	mov	r2, r0
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	4293      	cmp	r3, r2
 800739c:	d006      	beq.n	80073ac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 800739e:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80073a0:	4a05      	ldr	r2, [pc, #20]	; (80073b8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80073a2:	f240 21fd 	movw	r1, #765	; 0x2fd
 80073a6:	4805      	ldr	r0, [pc, #20]	; (80073bc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 80073a8:	f016 fbfc 	bl	801dba4 <__assert_func>
}
 80073ac:	bf00      	nop
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	08022084 	.word	0x08022084
 80073b8:	080221f4 	.word	0x080221f4
 80073bc:	08022198 	.word	0x08022198

080073c0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4618      	mov	r0, r3
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80073d6:	b480      	push	{r7}
 80073d8:	b085      	sub	sp, #20
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
 80073e2:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	605a      	str	r2, [r3, #4]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	609a      	str	r2, [r3, #8]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	60da      	str	r2, [r3, #12]
  }
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4618      	mov	r0, r3
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800740a:	b580      	push	{r7, lr}
 800740c:	b082      	sub	sp, #8
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa2a 	bl	800786c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>
  }
 8007418:	bf00      	nop
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
    }
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8007436:	b580      	push	{r7, lr}
 8007438:	b082      	sub	sp, #8
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	6039      	str	r1, [r7, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fa20 	bl	800788a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4618      	mov	r0, r3
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4618      	mov	r0, r3
 800748c:	f7fd ffc6 	bl	800541c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8007490:	4603      	mov	r3, r0
    }
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800749a:	b580      	push	{r7, lr}
 800749c:	b082      	sub	sp, #8
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fd ffc6 	bl	8005436 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 80074aa:	4603      	mov	r3, r0
    }
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80074c0:	68b8      	ldr	r0, [r7, #8]
 80074c2:	f7ff ffdd 	bl	8007480 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>
 80074c6:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80074c8:	68b8      	ldr	r0, [r7, #8]
 80074ca:	f7ff ffe6 	bl	800749a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>
 80074ce:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fd f9e7 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80074d8:	4602      	mov	r2, r0
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	4293      	cmp	r3, r2
 80074de:	d107      	bne.n	80074f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fd f9d4 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d001      	beq.n	80074f4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80074f0:	2301      	movs	r3, #1
 80074f2:	e000      	b.n	80074f6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80074f4:	2300      	movs	r3, #0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	6979      	ldr	r1, [r7, #20]
 8007500:	4618      	mov	r0, r3
 8007502:	f000 f8e9 	bl	80076d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4618      	mov	r0, r3
 800750a:	f7fd f9cc 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800750e:	4602      	mov	r2, r0
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	4293      	cmp	r3, r2
 8007514:	d107      	bne.n	8007526 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	4618      	mov	r0, r3
 800751a:	f7fd f9b9 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800751e:	4602      	mov	r2, r0
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	4293      	cmp	r3, r2
 8007524:	d006      	beq.n	8007534 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8007526:	4b05      	ldr	r3, [pc, #20]	; (800753c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8007528:	4a05      	ldr	r2, [pc, #20]	; (8007540 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800752a:	f240 21fd 	movw	r1, #765	; 0x2fd
 800752e:	4805      	ldr	r0, [pc, #20]	; (8007544 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007530:	f016 fb38 	bl	801dba4 <__assert_func>
}
 8007534:	bf00      	nop
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	08022084 	.word	0x08022084
 8007540:	080222d8 	.word	0x080222d8
 8007544:	08022198 	.word	0x08022198

08007548 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	605a      	str	r2, [r3, #4]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	609a      	str	r2, [r3, #8]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	60da      	str	r2, [r3, #12]
  }
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f992 	bl	80078ae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 800758a:	bf00      	nop
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007592:	b580      	push	{r7, lr}
 8007594:	b086      	sub	sp, #24
 8007596:	af00      	add	r7, sp, #0
 8007598:	60f8      	str	r0, [r7, #12]
 800759a:	60b9      	str	r1, [r7, #8]
 800759c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	6978      	ldr	r0, [r7, #20]
 80075a8:	f000 f9ac 	bl	8007904 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 80075ac:	bf00      	nop
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	6978      	ldr	r0, [r7, #20]
 80075ca:	f000 f9d5 	bl	8007978 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>
}
 80075ce:	bf00      	nop
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b086      	sub	sp, #24
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	68b9      	ldr	r1, [r7, #8]
 80075ea:	6978      	ldr	r0, [r7, #20]
 80075ec:	f000 fa09 	bl	8007a02 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 80075f0:	bf00      	nop
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>:
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fa37 	bl	8007a76 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8007608:	4603      	mov	r3, r0
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007612:	b580      	push	{r7, lr}
 8007614:	b082      	sub	sp, #8
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3310      	adds	r3, #16
 800761e:	4618      	mov	r0, r3
 8007620:	f000 fa37 	bl	8007a92 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007624:	4603      	mov	r3, r0
 8007626:	4618      	mov	r0, r3
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::assign_op<Scalar,Scalar>, Dense2Dense,
  typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
{
  typedef Product<Lhs,Rhs,Options> SrcXprType;
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800762e:	b590      	push	{r4, r7, lr}
 8007630:	b087      	sub	sp, #28
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
  {
    Index dstRows = src.rows();
 800763a:	68b8      	ldr	r0, [r7, #8]
 800763c:	f7ff ffdc 	bl	80075f8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>
 8007640:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007642:	68b8      	ldr	r0, [r7, #8]
 8007644:	f7ff ffe5 	bl	8007612 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>
 8007648:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4618      	mov	r0, r3
 800764e:	f7fd f92a 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007652:	4602      	mov	r2, r0
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	4293      	cmp	r3, r2
 8007658:	d107      	bne.n	800766a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4618      	mov	r0, r3
 800765e:	f7fd f917 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007662:	4602      	mov	r2, r0
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	4293      	cmp	r3, r2
 8007668:	d001      	beq.n	800766e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 800766a:	2301      	movs	r3, #1
 800766c:	e000      	b.n	8007670 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 800766e:	2300      	movs	r3, #0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d005      	beq.n	8007680 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	6979      	ldr	r1, [r7, #20]
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f82c 	bl	80076d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    // FIXME shall we handle nested_eval here?
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007680:	68b8      	ldr	r0, [r7, #8]
 8007682:	f000 fa14 	bl	8007aae <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>
 8007686:	4604      	mov	r4, r0
 8007688:	68b8      	ldr	r0, [r7, #8]
 800768a:	f000 fa1b 	bl	8007ac4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>
 800768e:	4603      	mov	r3, r0
 8007690:	461a      	mov	r2, r3
 8007692:	4621      	mov	r1, r4
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fa21 	bl	8007adc <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>
  }
 800769a:	bf00      	nop
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd90      	pop	{r4, r7, pc}

080076a2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 80076a2:	b5b0      	push	{r4, r5, r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fa50 	bl	8007b52 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 80076b2:	687c      	ldr	r4, [r7, #4]
 80076b4:	6838      	ldr	r0, [r7, #0]
 80076b6:	f000 fa2f 	bl	8007b18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 80076ba:	4605      	mov	r5, r0
 80076bc:	6838      	ldr	r0, [r7, #0]
 80076be:	f000 fa38 	bl	8007b32 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>
 80076c2:	4603      	mov	r3, r0
 80076c4:	461a      	mov	r2, r3
 80076c6:	4629      	mov	r1, r5
 80076c8:	4620      	mov	r0, r4
 80076ca:	f000 fa4d 	bl	8007b68 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4618      	mov	r0, r3
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bdb0      	pop	{r4, r5, r7, pc}

080076d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d108      	bne.n	80076fc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d105      	bne.n	80076fc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	db02      	blt.n	80076fc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	da06      	bge.n	800770a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x32>
 80076fc:	4b0c      	ldr	r3, [pc, #48]	; (8007730 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x58>)
 80076fe:	4a0d      	ldr	r2, [pc, #52]	; (8007734 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x5c>)
 8007700:	f240 1111 	movw	r1, #273	; 0x111
 8007704:	480c      	ldr	r0, [pc, #48]	; (8007738 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x60>)
 8007706:	f016 fa4d 	bl	801dba4 <__assert_func>
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	613b      	str	r3, [r7, #16]
  }
 8007712:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	fb02 f103 	mul.w	r1, r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	f000 fa33 	bl	8007b8c <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>
    }
 8007726:	bf00      	nop
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	0802249c 	.word	0x0802249c
 8007734:	0802262c 	.word	0x0802262c
 8007738:	080226b8 	.word	0x080226b8

0800773c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007744:	2100      	movs	r1, #0
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fa2d 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fa48 	bl	8007be2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>
  }
 8007752:	bf00      	nop
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4618      	mov	r0, r3
 8007768:	f7fd f89d 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800776c:	4603      	mov	r3, r0
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	4618      	mov	r0, r3
 8007784:	f7fd f92a 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007788:	4603      	mov	r3, r0
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007792:	b590      	push	{r4, r7, lr}
 8007794:	b087      	sub	sp, #28
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800779e:	68b8      	ldr	r0, [r7, #8]
 80077a0:	f7ff ffdb 	bl	800775a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 80077a4:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 80077a6:	68b8      	ldr	r0, [r7, #8]
 80077a8:	f7ff ffe5 	bl	8007776 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 80077ac:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fd f91e 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80077b6:	4602      	mov	r2, r0
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d107      	bne.n	80077ce <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x3c>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fd f90b 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80077c6:	4602      	mov	r2, r0
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d001      	beq.n	80077d2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x40>
 80077ce:	2301      	movs	r3, #1
 80077d0:	e000      	b.n	80077d4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x42>
 80077d2:	2300      	movs	r3, #0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d005      	beq.n	80077e4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x52>
      dst.resize(dstRows, dstCols);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	6979      	ldr	r1, [r7, #20]
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 f812 	bl	8007808 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 80077e4:	68b8      	ldr	r0, [r7, #8]
 80077e6:	f000 fa0b 	bl	8007c00 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 80077ea:	4604      	mov	r4, r0
 80077ec:	68b8      	ldr	r0, [r7, #8]
 80077ee:	f000 fa13 	bl	8007c18 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 80077f2:	4603      	mov	r3, r0
 80077f4:	461a      	mov	r2, r3
 80077f6:	4621      	mov	r1, r4
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 fa19 	bl	8007c30 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>
  }
 80077fe:	bf00      	nop
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	bd90      	pop	{r4, r7, pc}
	...

08007808 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b03      	cmp	r3, #3
 8007818:	d108      	bne.n	800782c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d105      	bne.n	800782c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	db02      	blt.n	800782c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	da06      	bge.n	800783a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x32>
 800782c:	4b0c      	ldr	r3, [pc, #48]	; (8007860 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x58>)
 800782e:	4a0d      	ldr	r2, [pc, #52]	; (8007864 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x5c>)
 8007830:	f240 1111 	movw	r1, #273	; 0x111
 8007834:	480c      	ldr	r0, [pc, #48]	; (8007868 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x60>)
 8007836:	f016 f9b5 	bl	801dba4 <__assert_func>
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	617b      	str	r3, [r7, #20]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	613b      	str	r3, [r7, #16]
  }
 8007842:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	fb02 f103 	mul.w	r1, r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	f000 fa0b 	bl	8007c6c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>
    }
 8007856:	bf00      	nop
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	0802249c 	.word	0x0802249c
 8007864:	08022714 	.word	0x08022714
 8007868:	080226b8 	.word	0x080226b8

0800786c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fa05 	bl	8007c86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fa20 	bl	8007cc2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>
  }
 8007882:	bf00      	nop
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	6039      	str	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fa23 	bl	8007ce0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 fa29 	bl	8007cf6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>
  }
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80078b6:	2200      	movs	r2, #0
 80078b8:	2100      	movs	r1, #0
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fa43 	bl	8007d46 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fa59 	bl	8007d78 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 80078c6:	bf00      	nop
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fa5d 	bl	8007d98 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 80078de:	4603      	mov	r3, r0
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3308      	adds	r3, #8
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fa5d 	bl	8007db4 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 80078fa:	4603      	mov	r3, r0
 80078fc:	4618      	mov	r0, r3
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007904:	b590      	push	{r4, r7, lr}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007910:	68b8      	ldr	r0, [r7, #8]
 8007912:	f7ff ffdc 	bl	80078ce <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>
 8007916:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007918:	68b8      	ldr	r0, [r7, #8]
 800791a:	f7ff ffe5 	bl	80078e8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>
 800791e:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4618      	mov	r0, r3
 8007924:	f7fd f865 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007928:	4602      	mov	r2, r0
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	4293      	cmp	r3, r2
 800792e:	d107      	bne.n	8007940 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x3c>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4618      	mov	r0, r3
 8007934:	f7fd f852 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	4293      	cmp	r3, r2
 800793e:	d001      	beq.n	8007944 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x40>
 8007940:	2301      	movs	r3, #1
 8007942:	e000      	b.n	8007946 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x42>
 8007944:	2300      	movs	r3, #0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d005      	beq.n	8007956 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x52>
      dst.resize(dstRows, dstCols);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	6979      	ldr	r1, [r7, #20]
 8007950:	4618      	mov	r0, r3
 8007952:	f7ff ff59 	bl	8007808 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007956:	68b8      	ldr	r0, [r7, #8]
 8007958:	f000 fa39 	bl	8007dce <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>
 800795c:	4604      	mov	r4, r0
 800795e:	68b8      	ldr	r0, [r7, #8]
 8007960:	f000 fa40 	bl	8007de4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>
 8007964:	4603      	mov	r3, r0
 8007966:	461a      	mov	r2, r3
 8007968:	4621      	mov	r1, r4
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 fa46 	bl	8007dfc <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>
  }
 8007970:	bf00      	nop
 8007972:	371c      	adds	r7, #28
 8007974:	46bd      	mov	sp, r7
 8007976:	bd90      	pop	{r4, r7, pc}

08007978 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>:
template<typename DstXprType, typename OtherXpr, typename ProductType, typename Func1, typename Func2>
struct assignment_from_xpr_op_product
{
  template<typename SrcXprType, typename InitialFunc>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 8007978:	b590      	push	{r4, r7, lr}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  {
    call_assignment_no_alias(dst, src.lhs(), Func1());
 8007984:	68b8      	ldr	r0, [r7, #8]
 8007986:	f000 fa57 	bl	8007e38 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>
 800798a:	4604      	mov	r4, r0
 800798c:	f107 0310 	add.w	r3, r7, #16
 8007990:	4618      	mov	r0, r3
 8007992:	f7fe ffb8 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007996:	f107 0310 	add.w	r3, r7, #16
 800799a:	461a      	mov	r2, r3
 800799c:	4621      	mov	r1, r4
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f7ff f8be 	bl	8006b20 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 80079a4:	68b8      	ldr	r0, [r7, #8]
 80079a6:	f000 fa53 	bl	8007e50 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>
 80079aa:	4604      	mov	r4, r0
 80079ac:	f107 0314 	add.w	r3, r7, #20
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fa59 	bl	8007e68 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 80079b6:	f107 0314 	add.w	r3, r7, #20
 80079ba:	461a      	mov	r2, r3
 80079bc:	4621      	mov	r1, r4
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 fa5d 	bl	8007e7e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80079c4:	bf00      	nop
 80079c6:	371c      	adds	r7, #28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd90      	pop	{r4, r7, pc}

080079cc <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fa62 	bl	8007ea0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 80079dc:	4603      	mov	r3, r0
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fc ff4c 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80079f8:	4603      	mov	r3, r0
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007a02:	b590      	push	{r4, r7, lr}
 8007a04:	b087      	sub	sp, #28
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007a0e:	68b8      	ldr	r0, [r7, #8]
 8007a10:	f7ff ffdc 	bl	80079cc <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>
 8007a14:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007a16:	68b8      	ldr	r0, [r7, #8]
 8007a18:	f7ff ffe5 	bl	80079e6 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>
 8007a1c:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fc ff40 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007a26:	4602      	mov	r2, r0
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d107      	bne.n	8007a3e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x3c>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fc ff2d 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007a36:	4602      	mov	r2, r0
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d001      	beq.n	8007a42 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x40>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e000      	b.n	8007a44 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x42>
 8007a42:	2300      	movs	r3, #0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d005      	beq.n	8007a54 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x52>
      dst.resize(dstRows, dstCols);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	6979      	ldr	r1, [r7, #20]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff fe42 	bl	80076d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007a54:	68b8      	ldr	r0, [r7, #8]
 8007a56:	f000 fa31 	bl	8007ebc <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	68b8      	ldr	r0, [r7, #8]
 8007a5e:	f000 fa38 	bl	8007ed2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>
 8007a62:	4603      	mov	r3, r0
 8007a64:	461a      	mov	r2, r3
 8007a66:	4621      	mov	r1, r4
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 fa3e 	bl	8007eea <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>
  }
 8007a6e:	bf00      	nop
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd90      	pop	{r4, r7, pc}

08007a76 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fc ffb5 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007a88:	4603      	mov	r3, r0
    }
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b082      	sub	sp, #8
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fc ffa7 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3310      	adds	r3, #16
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>:
struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode>
{
  typedef typename Product<Lhs,Rhs>::Scalar Scalar;

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08a      	sub	sp, #40	; 0x28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
  {
    // Same as: dst.noalias() = lhs.lazyProduct(rhs);
    // but easier on the compiler side
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8007ae8:	f107 0310 	add.w	r3, r7, #16
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 fa18 	bl	8007f26 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>
 8007af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe ff03 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007b00:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007b04:	f107 0310 	add.w	r3, r7, #16
 8007b08:	4619      	mov	r1, r3
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 fa22 	bl	8007f54 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007b10:	bf00      	nop
 8007b12:	3728      	adds	r7, #40	; 0x28
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 fa27 	bl	8007f76 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>:
      *          in a column-major matrix).
      *
      * \sa innerStride(), rowStride(), colStride()
      */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b082      	sub	sp, #8
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
    {
      return derived().outerStride();
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7fd fabd 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007b40:	4603      	mov	r3, r0
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fa22 	bl	8007f8c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8007b48:	4603      	mov	r3, r0
    }
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8007b7a:	1d3b      	adds	r3, r7, #4
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fb ffbc 	bl	8003afa <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
 8007b9a:	bf00      	nop
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8007ba6:	b5b0      	push	{r4, r5, r7, lr}
 8007ba8:	b082      	sub	sp, #8
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689c      	ldr	r4, [r3, #8]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 f9f2 	bl	8007fa4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>
 8007bc0:	4605      	mov	r5, r0
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 f9fb 	bl	8007fc4 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f000 fa05 	bl	8007fe4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bdb0      	pop	{r4, r5, r7, pc}

08007be2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007bea:	2101      	movs	r1, #1
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff ffda 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fa06 	bl	8008004 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>
  }
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b088      	sub	sp, #32
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8007c3c:	f107 0314 	add.w	r3, r7, #20
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 f9ec 	bl	8008022 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8007c4a:	f107 031c 	add.w	r3, r7, #28
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fe fe59 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007c54:	f107 021c 	add.w	r2, r7, #28
 8007c58:	f107 0314 	add.w	r3, r7, #20
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 f9f6 	bl	8008050 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007c64:	bf00      	nop
 8007c66:	3720      	adds	r7, #32
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>:
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	603b      	str	r3, [r7, #0]
 8007c7a:	bf00      	nop
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8007c86:	b5b0      	push	{r4, r5, r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689c      	ldr	r4, [r3, #8]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 f9e9 	bl	8008072 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 f9f2 	bl	8008092 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f000 f995 	bl	8007fe4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bdb0      	pop	{r4, r5, r7, pc}

08007cc2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007cca:	2101      	movs	r1, #1
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff ffda 	bl	8007c86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f9ed 	bl	80080b2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>
  }
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4618      	mov	r0, r3
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>:
  {
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8007cf6:	b590      	push	{r4, r7, lr}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
 8007d00:	687c      	ldr	r4, [r7, #4]
 8007d02:	6838      	ldr	r0, [r7, #0]
 8007d04:	f000 f9e4 	bl	80080d0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f7fd fbe1 	bl	80054d4 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	1d1c      	adds	r4, r3, #4
 8007d16:	6838      	ldr	r0, [r7, #0]
 8007d18:	f000 f9e6 	bl	80080e8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 f9f8 	bl	8008116 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8007d2c:	6838      	ldr	r0, [r7, #0]
 8007d2e:	f000 f9e6 	bl	80080fe <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>
 8007d32:	4603      	mov	r3, r0
 8007d34:	4619      	mov	r1, r3
 8007d36:	4620      	mov	r0, r4
 8007d38:	f000 f9fc 	bl	8008134 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd90      	pop	{r4, r7, pc}

08007d46 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b086      	sub	sp, #24
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	68b8      	ldr	r0, [r7, #8]
 8007d56:	f000 f9fc 	bl	8008152 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8007d5a:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8007d5c:	6879      	ldr	r1, [r7, #4]
 8007d5e:	68b8      	ldr	r0, [r7, #8]
 8007d60:	f000 fa03 	bl	800816a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8007d64:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	6979      	ldr	r1, [r7, #20]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 fa09 	bl	8008182 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8007d70:	bf00      	nop
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8007d80:	2201      	movs	r2, #1
 8007d82:	2100      	movs	r1, #0
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff ffde 	bl	8007d46 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa1f 	bl	80081ce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fc fd7e 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007daa:	4603      	mov	r3, r0
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index cols() const EIGEN_NOEXCEPT { return m_xpr.rows(); }
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fd fdc3 	bl	800594a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	3308      	adds	r3, #8
 8007df0:	4618      	mov	r0, r3
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08c      	sub	sp, #48	; 0x30
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8007e08:	f107 0310 	add.w	r3, r7, #16
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	68b9      	ldr	r1, [r7, #8]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 f9ec 	bl	80081ee <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>
 8007e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe fd73 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007e20:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007e24:	f107 0310 	add.w	r3, r7, #16
 8007e28:	4619      	mov	r1, r3
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f000 f9f6 	bl	800821c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007e30:	bf00      	nop
 8007e32:	3730      	adds	r7, #48	; 0x30
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with addition
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b086      	sub	sp, #24
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	68b9      	ldr	r1, [r7, #8]
 8007e92:	6978      	ldr	r0, [r7, #20]
 8007e94:	f000 f9d4 	bl	8008240 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007e98:	bf00      	nop
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fc fcfa 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007eb2:	4603      	mov	r3, r0
    }
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b08a      	sub	sp, #40	; 0x28
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8007ef6:	f107 0310 	add.w	r3, r7, #16
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	68b9      	ldr	r1, [r7, #8]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 f9d8 	bl	80082b4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>
 8007f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fe fcfc 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007f0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007f12:	f107 0310 	add.w	r3, r7, #16
 8007f16:	4619      	mov	r1, r3
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f9e2 	bl	80082e2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007f1e:	bf00      	nop
 8007f20:	3728      	adds	r7, #40	; 0x28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived,OtherDerived,LazyProduct>
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8007f26:	b590      	push	{r4, r7, lr}
 8007f28:	b085      	sub	sp, #20
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
    INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS)
  EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),
    INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)

  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8007f32:	68b8      	ldr	r0, [r7, #8]
 8007f34:	f7fd f821 	bl	8004f7a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 8007f38:	4604      	mov	r4, r0
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7fd f828 	bl	8004f90 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8007f40:	4603      	mov	r3, r0
 8007f42:	461a      	mov	r2, r3
 8007f44:	4621      	mov	r1, r4
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 fa00 	bl	800834c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>
}
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd90      	pop	{r4, r7, pc}

08007f54 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	68b9      	ldr	r1, [r7, #8]
 8007f68:	6978      	ldr	r0, [r7, #20]
 8007f6a:	f000 fa1f 	bl	80083ac <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 8007f6e:	bf00      	nop
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>:
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fa1c 	bl	80083d2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
  }
 8007fb8:	4618      	mov	r0, r3
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
  }
 8007fd8:	4618      	mov	r0, r3
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	bf00      	nop
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800800c:	2102      	movs	r1, #2
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff fdc9 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f9e8 	bl	80083ea <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>
  }
 800801a:	bf00      	nop
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008022:	b590      	push	{r4, r7, lr}
 8008024:	b085      	sub	sp, #20
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800802e:	68b8      	ldr	r0, [r7, #8]
 8008030:	f7fd f843 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008034:	4604      	mov	r4, r0
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7fc fe77 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800803c:	4603      	mov	r3, r0
 800803e:	461a      	mov	r2, r3
 8008040:	4621      	mov	r1, r4
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 fa04 	bl	8008450 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>
}
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	bd90      	pop	{r4, r7, pc}

08008050 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	68b9      	ldr	r1, [r7, #8]
 8008064:	6978      	ldr	r0, [r7, #20]
 8008066:	f000 fa21 	bl	80084ac <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 800806a:	bf00      	nop
 800806c:	3718      	adds	r7, #24
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8008072:	b480      	push	{r7}
 8008074:	b083      	sub	sp, #12
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
  }
 8008086:	4618      	mov	r0, r3
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
  }
 80080a6:	4618      	mov	r0, r3
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80080ba:	2102      	movs	r1, #2
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff fde2 	bl	8007c86 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa05 	bl	80084d2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>
  }
 80080c8:	bf00      	nop
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3310      	adds	r3, #16
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4618      	mov	r0, r3
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	4618      	mov	r0, r3
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	4618      	mov	r0, r3
 8008126:	f000 f9de 	bl	80084e6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>:
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	4618      	mov	r0, r3
 8008144:	f7ff f846 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	6039      	str	r1, [r7, #0]
      : inner;
 800815c:	683b      	ldr	r3, [r7, #0]
  }
 800815e:	4618      	mov	r0, r3
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
      : outer;
 8008174:	687b      	ldr	r3, [r7, #4]
  }
 8008176:	4618      	mov	r0, r3
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8008182:	b5b0      	push	{r4, r5, r7, lr}
 8008184:	b086      	sub	sp, #24
 8008186:	af00      	add	r7, sp, #0
 8008188:	60f8      	str	r0, [r7, #12]
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	689c      	ldr	r4, [r3, #8]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	68b9      	ldr	r1, [r7, #8]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 f9b2 	bl	8008504 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 80081a0:	4605      	mov	r5, r0
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	68b9      	ldr	r1, [r7, #8]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 f9c2 	bl	8008534 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>
 80081b0:	eef0 7a40 	vmov.f32	s15, s0
 80081b4:	edc7 7a05 	vstr	s15, [r7, #20]
 80081b8:	f107 0314 	add.w	r3, r7, #20
 80081bc:	461a      	mov	r2, r3
 80081be:	4629      	mov	r1, r5
 80081c0:	4620      	mov	r0, r4
 80081c2:	f7ff ff0f 	bl	8007fe4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80081c6:	bf00      	nop
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bdb0      	pop	{r4, r5, r7, pc}

080081ce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b082      	sub	sp, #8
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80081d6:	2202      	movs	r2, #2
 80081d8:	2100      	movs	r1, #0
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff fdb3 	bl	8007d46 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f9ce 	bl	8008582 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 80081e6:	bf00      	nop
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80081ee:	b590      	push	{r4, r7, lr}
 80081f0:	b085      	sub	sp, #20
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80081fa:	68b8      	ldr	r0, [r7, #8]
 80081fc:	f7fd fbe9 	bl	80059d2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 8008200:	4604      	mov	r4, r0
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7fd fbf0 	bl	80059e8 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 8008208:	4603      	mov	r3, r0
 800820a:	461a      	mov	r2, r3
 800820c:	4621      	mov	r1, r4
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 f9ec 	bl	80085ec <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>
}
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	bd90      	pop	{r4, r7, pc}

0800821c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	68b9      	ldr	r1, [r7, #8]
 8008230:	6978      	ldr	r0, [r7, #20]
 8008232:	f000 fa0d 	bl	8008650 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8008236:	bf00      	nop
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<Scalar,Scalar> &)
 8008240:	b590      	push	{r4, r7, lr}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4618      	mov	r0, r3
 8008250:	f7fc fbcf 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008254:	4604      	mov	r4, r0
 8008256:	68b8      	ldr	r0, [r7, #8]
 8008258:	f7fd fdd7 	bl	8005e0a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 800825c:	4603      	mov	r3, r0
 800825e:	429c      	cmp	r4, r3
 8008260:	d10a      	bne.n	8008278 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x38>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4618      	mov	r0, r3
 8008266:	f7fc fbb9 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800826a:	4604      	mov	r4, r0
 800826c:	68b8      	ldr	r0, [r7, #8]
 800826e:	f7fd fdda 	bl	8005e26 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8008272:	4603      	mov	r3, r0
 8008274:	429c      	cmp	r4, r3
 8008276:	d005      	beq.n	8008284 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x44>
 8008278:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x68>)
 800827a:	4a0c      	ldr	r2, [pc, #48]	; (80082ac <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x6c>)
 800827c:	21a1      	movs	r1, #161	; 0xa1
 800827e:	480c      	ldr	r0, [pc, #48]	; (80082b0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x70>)
 8008280:	f015 fc90 	bl	801dba4 <__assert_func>
    generic_product_impl<Lhs, Rhs>::addTo(dst, src.lhs(), src.rhs());
 8008284:	68b8      	ldr	r0, [r7, #8]
 8008286:	f000 f9f6 	bl	8008676 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>
 800828a:	4604      	mov	r4, r0
 800828c:	68b8      	ldr	r0, [r7, #8]
 800828e:	f000 f9fe 	bl	800868e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>
 8008292:	4603      	mov	r3, r0
 8008294:	461a      	mov	r2, r3
 8008296:	4621      	mov	r1, r4
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 fa04 	bl	80086a6 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>
  }
 800829e:	bf00      	nop
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd90      	pop	{r4, r7, pc}
 80082a6:	bf00      	nop
 80082a8:	080227a0 	.word	0x080227a0
 80082ac:	080227d8 	.word	0x080227d8
 80082b0:	08022c98 	.word	0x08022c98

080082b4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80082b4:	b590      	push	{r4, r7, lr}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80082c0:	68b8      	ldr	r0, [r7, #8]
 80082c2:	f7fd feed 	bl	80060a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 80082c6:	4604      	mov	r4, r0
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7fc fef6 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80082ce:	4603      	mov	r3, r0
 80082d0:	461a      	mov	r2, r3
 80082d2:	4621      	mov	r1, r4
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 fa29 	bl	800872c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>
}
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd90      	pop	{r4, r7, pc}

080082e2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b086      	sub	sp, #24
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	68b9      	ldr	r1, [r7, #8]
 80082f6:	6978      	ldr	r0, [r7, #20]
 80082f8:	f000 fa46 	bl	8008788 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 80082fc:	bf00      	nop
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fa4e 	bl	80087ae <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>:
class dense_product_base
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7ff ffed 	bl	8008304 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7ff ffed 	bl	800831c <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800834c:	b590      	push	{r4, r7, lr}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f7ff ffeb 	bl	8008334 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	68b9      	ldr	r1, [r7, #8]
 8008362:	4618      	mov	r0, r3
 8008364:	f7fb fe5c 	bl	8004020 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3310      	adds	r3, #16
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	6812      	ldr	r2, [r2, #0]
 8008370:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8008372:	68b8      	ldr	r0, [r7, #8]
 8008374:	f7fc fe3b 	bl	8004fee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8008378:	4604      	mov	r4, r0
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7fc fe45 	bl	800500a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008380:	4603      	mov	r3, r0
 8008382:	429c      	cmp	r4, r3
 8008384:	d005      	beq.n	8008392 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x46>
 8008386:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x54>)
 8008388:	4a06      	ldr	r2, [pc, #24]	; (80083a4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x58>)
 800838a:	2160      	movs	r1, #96	; 0x60
 800838c:	4806      	ldr	r0, [pc, #24]	; (80083a8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x5c>)
 800838e:	f015 fc09 	bl	801dba4 <__assert_func>
 8008392:	bf00      	nop
    }
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4618      	mov	r0, r3
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	bd90      	pop	{r4, r7, pc}
 800839e:	bf00      	nop
 80083a0:	0801fccc 	.word	0x0801fccc
 80083a4:	08022cf8 	.word	0x08022cf8
 80083a8:	0802001c 	.word	0x0802001c

080083ac <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 fa02 	bl	80087c4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	68b9      	ldr	r1, [r7, #8]
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 fab3 	bl	8008930 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b082      	sub	sp, #8
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fae0 	bl	80089a0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80083e0:	4603      	mov	r3, r0
    }
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b082      	sub	sp, #8
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80083f2:	2103      	movs	r1, #3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7ff fbd6 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fae0 	bl	80089c0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>
  }
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fae4 	bl	80089de <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>:
class dense_product_base
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff ffed 	bl	8008408 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7ff ffed 	bl	8008420 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008450:	b590      	push	{r4, r7, lr}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7ff ffeb 	bl	8008438 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	4618      	mov	r0, r3
 8008472:	f7fc fa0d 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008476:	4604      	mov	r4, r0
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4618      	mov	r0, r3
 800847c:	f7fc fab9 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008480:	4603      	mov	r3, r0
 8008482:	429c      	cmp	r4, r3
 8008484:	d005      	beq.n	8008492 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x42>
 8008486:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x50>)
 8008488:	4a06      	ldr	r2, [pc, #24]	; (80084a4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x54>)
 800848a:	2160      	movs	r1, #96	; 0x60
 800848c:	4806      	ldr	r0, [pc, #24]	; (80084a8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x58>)
 800848e:	f015 fb89 	bl	801dba4 <__assert_func>
 8008492:	bf00      	nop
    }
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	bd90      	pop	{r4, r7, pc}
 800849e:	bf00      	nop
 80084a0:	0801fccc 	.word	0x0801fccc
 80084a4:	08022fbc 	.word	0x08022fbc
 80084a8:	0802001c 	.word	0x0802001c

080084ac <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 fa9a 	bl	80089f4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	68b9      	ldr	r1, [r7, #8]
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 fac3 	bl	8008a50 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80084ca:	bf00      	nop
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80084d2:	b480      	push	{r7}
 80084d4:	b083      	sub	sp, #12
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	bf00      	nop
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	6039      	str	r1, [r7, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 fae3 	bl	8008ac0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8008504:	b590      	push	{r4, r7, lr}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681c      	ldr	r4, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4618      	mov	r0, r3
 8008518:	f000 fb0f 	bl	8008b3a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800851c:	4602      	mov	r2, r0
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	fb03 f202 	mul.w	r2, r3, r2
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4413      	add	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4423      	add	r3, r4
  }
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	bd90      	pop	{r4, r7, pc}

08008534 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8008534:	b5b0      	push	{r4, r5, r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fb04 	bl	8008b50 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>
 8008548:	4604      	mov	r4, r0
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	3304      	adds	r3, #4
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	68b9      	ldr	r1, [r7, #8]
 8008552:	4618      	mov	r0, r3
 8008554:	f000 fb07 	bl	8008b66 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>
 8008558:	4605      	mov	r5, r0
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	332c      	adds	r3, #44	; 0x2c
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	68b9      	ldr	r1, [r7, #8]
 8008562:	4618      	mov	r0, r3
 8008564:	f000 fb17 	bl	8008b96 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>
 8008568:	4603      	mov	r3, r0
 800856a:	461a      	mov	r2, r3
 800856c:	4629      	mov	r1, r5
 800856e:	4620      	mov	r0, r4
 8008570:	f000 fb29 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8008574:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008578:	eeb0 0a67 	vmov.f32	s0, s15
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bdb0      	pop	{r4, r5, r7, pc}

08008582 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800858a:	2200      	movs	r2, #0
 800858c:	2101      	movs	r1, #1
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff fbd9 	bl	8007d46 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fb2b 	bl	8008bf0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 800859a:	bf00      	nop
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fb30 	bl	8008c10 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>:
class dense_product_base
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b082      	sub	sp, #8
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7ff ffed 	bl	80085a2 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7ff ffed 	bl	80085ba <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80085ec:	b590      	push	{r4, r7, lr}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f7ff ffea 	bl	80085d2 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008606:	e883 0003 	stmia.w	r3, {r0, r1}
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3308      	adds	r3, #8
 800860e:	6879      	ldr	r1, [r7, #4]
 8008610:	4618      	mov	r0, r3
 8008612:	f7fb feb9 	bl	8004388 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8008616:	68b8      	ldr	r0, [r7, #8]
 8008618:	f7fd fa15 	bl	8005a46 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800861c:	4604      	mov	r4, r0
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7fd fa1f 	bl	8005a62 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8008624:	4603      	mov	r3, r0
 8008626:	429c      	cmp	r4, r3
 8008628:	d005      	beq.n	8008636 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x4a>
 800862a:	4b06      	ldr	r3, [pc, #24]	; (8008644 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x58>)
 800862c:	4a06      	ldr	r2, [pc, #24]	; (8008648 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x5c>)
 800862e:	2160      	movs	r1, #96	; 0x60
 8008630:	4806      	ldr	r0, [pc, #24]	; (800864c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x60>)
 8008632:	f015 fab7 	bl	801dba4 <__assert_func>
 8008636:	bf00      	nop
    }
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4618      	mov	r0, r3
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	bd90      	pop	{r4, r7, pc}
 8008642:	bf00      	nop
 8008644:	0801fccc 	.word	0x0801fccc
 8008648:	080230e4 	.word	0x080230e4
 800864c:	0802001c 	.word	0x0802001c

08008650 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800865c:	68b9      	ldr	r1, [r7, #8]
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 fae1 	bl	8008c26 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	68b9      	ldr	r1, [r7, #8]
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 fb23 	bl	8008cb4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800866e:	bf00      	nop
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008676:	b480      	push	{r7}
 8008678:	b083      	sub	sp, #12
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4618      	mov	r0, r3
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800868e:	b480      	push	{r7}
 8008690:	b083      	sub	sp, #12
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	3304      	adds	r3, #4
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>:

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b08a      	sub	sp, #40	; 0x28
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	607a      	str	r2, [r7, #4]
  {
    // dst.noalias() += lhs.lazyProduct(rhs);
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::add_assign_op<typename Dst::Scalar,Scalar>());
 80086b2:	f107 0310 	add.w	r3, r7, #16
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 fb32 	bl	8008d24 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>
 80086c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff fbcf 	bl	8007e68 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 80086ca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80086ce:	f107 0310 	add.w	r3, r7, #16
 80086d2:	4619      	mov	r1, r3
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 fb3c 	bl	8008d52 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80086da:	bf00      	nop
 80086dc:	3728      	adds	r7, #40	; 0x28
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fb42 	bl	8008d74 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>:
class dense_product_base
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b082      	sub	sp, #8
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7ff ffed 	bl	80086e2 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008712:	b580      	push	{r7, lr}
 8008714:	b082      	sub	sp, #8
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7ff ffed 	bl	80086fa <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800872c:	b590      	push	{r4, r7, lr}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7ff ffea 	bl	8008712 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	68b9      	ldr	r1, [r7, #8]
 8008742:	4618      	mov	r0, r3
 8008744:	f7fb ff39 	bl	80045ba <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 800874e:	68b8      	ldr	r0, [r7, #8]
 8008750:	f7fd fcd5 	bl	80060fe <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8008754:	4604      	mov	r4, r0
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4618      	mov	r0, r3
 800875a:	f7fc f8a4 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800875e:	4603      	mov	r3, r0
 8008760:	429c      	cmp	r4, r3
 8008762:	d005      	beq.n	8008770 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x44>
 8008764:	4b05      	ldr	r3, [pc, #20]	; (800877c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x50>)
 8008766:	4a06      	ldr	r2, [pc, #24]	; (8008780 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x54>)
 8008768:	2160      	movs	r1, #96	; 0x60
 800876a:	4806      	ldr	r0, [pc, #24]	; (8008784 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x58>)
 800876c:	f015 fa1a 	bl	801dba4 <__assert_func>
 8008770:	bf00      	nop
    }
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	bd90      	pop	{r4, r7, pc}
 800877c:	0801fccc 	.word	0x0801fccc
 8008780:	0802346c 	.word	0x0802346c
 8008784:	0802001c 	.word	0x0802001c

08008788 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008794:	68b9      	ldr	r1, [r7, #8]
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 faf7 	bl	8008d8a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	68b9      	ldr	r1, [r7, #8]
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 fb35 	bl	8008e10 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80087a6:	bf00      	nop
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
    }
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fc f868 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b01      	cmp	r3, #1
 80087da:	dd08      	ble.n	80087ee <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fc f856 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	dd01      	ble.n	80087ee <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e000      	b.n	80087f0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2c>
 80087ee:	2300      	movs	r3, #0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d003      	beq.n	80087fc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fb42 	bl	8008e80 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct evaluator<const T>
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4618      	mov	r0, r3
 8008810:	f7fc fa5b 	bl	8004cca <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 800881e:	b580      	push	{r7, lr}
 8008820:	b082      	sub	sp, #8
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fb5a 	bl	8008ee0 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<const T>
 8008836:	b580      	push	{r7, lr}
 8008838:	b082      	sub	sp, #8
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff ffec 	bl	800881e <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4618      	mov	r0, r3
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	3308      	adds	r3, #8
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff ffea 	bl	8008836 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	3304      	adds	r3, #4
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff ffcc 	bl	8008804 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff ffe5 	bl	8008850 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fb1f 	bl	8008eca <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff ffe8 	bl	8008876 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fc fa05 	bl	8004cca <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fb18 	bl	8008ef6 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4618      	mov	r0, r3
 80088dc:	f7ff ffe8 	bl	80088b0 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>:

template<int StorageOrder, int UnrollingIndex, typename Lhs, typename Rhs, typename Packet, int LoadMode>
struct etor_product_packet_impl;

template<typename Lhs, typename Rhs, int ProductTag>
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	3324      	adds	r3, #36	; 0x24
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff ffea 	bl	80088d0 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	3314      	adds	r3, #20
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff ffc8 	bl	8008896 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fad4 	bl	8008eb4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008916:	b580      	push	{r7, lr}
 8008918:	b082      	sub	sp, #8
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4618      	mov	r0, r3
 8008922:	f7ff ffe2 	bl	80088ea <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4618      	mov	r0, r3
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008930:	b580      	push	{r7, lr}
 8008932:	b096      	sub	sp, #88	; 0x58
 8008934:	af02      	add	r7, sp, #8
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800893c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008940:	68b9      	ldr	r1, [r7, #8]
 8008942:	4618      	mov	r0, r3
 8008944:	f000 faa7 	bl	8008e96 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>
  resize_if_allowed(dst, src, func);
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 faf9 	bl	8008f44 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8008952:	f107 0320 	add.w	r3, r7, #32
 8008956:	68f9      	ldr	r1, [r7, #12]
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe fc3b 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f7fe fca0 	bl	80072a4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8008964:	4603      	mov	r3, r0
 8008966:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800896a:	f107 0120 	add.w	r1, r7, #32
 800896e:	f107 0010 	add.w	r0, r7, #16
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f000 fb2f 	bl	8008fd8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800897a:	f107 0310 	add.w	r3, r7, #16
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fb44 	bl	800900c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>
  DstEvaluatorType dstEvaluator(dst);
 8008984:	f107 0320 	add.w	r3, r7, #32
 8008988:	4618      	mov	r0, r3
 800898a:	f7fe fa14 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800898e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff ffbf 	bl	8008916 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
}
 8008998:	bf00      	nop
 800899a:	3750      	adds	r7, #80	; 0x50
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f7fc fb86 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80089ae:	4603      	mov	r3, r0
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fb ff78 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80089b6:	4603      	mov	r3, r0
 80089b8:	4618      	mov	r0, r3
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80089c8:	2104      	movs	r1, #4
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff f8eb 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fb26 	bl	8009022 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>
  }
 80089d6:	bf00      	nop
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
    }
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4618      	mov	r0, r3
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
}
 80089fe:	bf00      	nop
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	330c      	adds	r3, #12
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fc f957 	bl	8004cca <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3308      	adds	r3, #8
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe f9c8 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fb19 	bl	800905e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b082      	sub	sp, #8
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7ff ffe2 	bl	8008a0a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b090      	sub	sp, #64	; 0x40
 8008a54:	af02      	add	r7, sp, #8
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8008a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a60:	68b9      	ldr	r1, [r7, #8]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 faec 	bl	8009040 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	68b9      	ldr	r1, [r7, #8]
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 fb1d 	bl	80090ac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8008a72:	f107 0320 	add.w	r3, r7, #32
 8008a76:	68f9      	ldr	r1, [r7, #12]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fd fc60 	bl	800633e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f7fe fc9e 	bl	80073c0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8008a84:	4603      	mov	r3, r0
 8008a86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008a8a:	f107 0120 	add.w	r1, r7, #32
 8008a8e:	f107 0010 	add.w	r0, r7, #16
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f000 fb53 	bl	8009140 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8008a9a:	f107 0310 	add.w	r3, r7, #16
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 fb68 	bl	8009174 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8008aa4:	f107 0320 	add.w	r3, r7, #32
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fc f90e 	bl	8004cca <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7ff ffbf 	bl	8008a36 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
}
 8008ab8:	bf00      	nop
 8008aba:	3738      	adds	r7, #56	; 0x38
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 8008ac0:	b5b0      	push	{r4, r5, r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 fb5c 	bl	800918a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	1d1c      	adds	r4, r3, #4
 8008ad6:	6838      	ldr	r0, [r7, #0]
 8008ad8:	f7fc fca0 	bl	800541c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8008adc:	4603      	mov	r3, r0
 8008ade:	60bb      	str	r3, [r7, #8]
 8008ae0:	6838      	ldr	r0, [r7, #0]
 8008ae2:	f7fc fca8 	bl	8005436 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	f107 020c 	add.w	r2, r7, #12
 8008aee:	f107 0308 	add.w	r3, r7, #8
 8008af2:	4619      	mov	r1, r3
 8008af4:	4620      	mov	r0, r4
 8008af6:	f000 fb55 	bl	80091a4 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4619      	mov	r1, r3
 8008afe:	2004      	movs	r0, #4
 8008b00:	f7f8 fa1c 	bl	8000f3c <_ZnwjPv>
 8008b04:	4602      	mov	r2, r0
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3304      	adds	r3, #4
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	f000 fb62 	bl	80091d6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	1d1c      	adds	r4, r3, #4
 8008b16:	6838      	ldr	r0, [r7, #0]
 8008b18:	f000 fb6d 	bl	80091f6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	6838      	ldr	r0, [r7, #0]
 8008b20:	f000 fb74 	bl	800920c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 8008b24:	4603      	mov	r3, r0
 8008b26:	461a      	mov	r2, r3
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 fb7a 	bl	8009224 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>
  }
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bdb0      	pop	{r4, r5, r7, pc}

08008b3a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 8008b3a:	b480      	push	{r7}
 8008b3c:	b083      	sub	sp, #12
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	2303      	movs	r3, #3
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const BinaryOp& func() const { return op; }
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8008b66:	b590      	push	{r4, r7, lr}
 8008b68:	b085      	sub	sp, #20
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	60b9      	str	r1, [r7, #8]
 8008b70:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681c      	ldr	r4, [r3, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7ff ffde 	bl	8008b3a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	fb03 f202 	mul.w	r2, r3, r2
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4423      	add	r3, r4
  }
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd90      	pop	{r4, r7, pc}

08008b96 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8008b96:	b590      	push	{r4, r7, lr}
 8008b98:	b085      	sub	sp, #20
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681c      	ldr	r4, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff ffc6 	bl	8008b3a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	fb03 f202 	mul.w	r2, r3, r2
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	4413      	add	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4423      	add	r3, r4
  }
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd90      	pop	{r4, r7, pc}

08008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8008bc6:	b480      	push	{r7}
 8008bc8:	b085      	sub	sp, #20
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	607a      	str	r2, [r7, #4]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	ed93 7a00 	vldr	s14, [r3]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	edd3 7a00 	vldr	s15, [r3]
 8008bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008be2:	eeb0 0a67 	vmov.f32	s0, s15
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7ff f8a2 	bl	8007d46 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fb2c 	bl	8009260 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 8008c08:	bf00      	nop
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
    }
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	370c      	adds	r7, #12
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008c26:	b480      	push	{r7}
 8008c28:	b083      	sub	sp, #12
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	6039      	str	r1, [r7, #0]
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fb35 	bl	80092b4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff ffec 	bl	8008c3c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b082      	sub	sp, #8
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	3314      	adds	r3, #20
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7ff ffea 	bl	8008c54 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3310      	adds	r3, #16
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fc f820 	bl	8004cca <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fb07 	bl	800929e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4618      	mov	r0, r3
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff ffe2 	bl	8008c6e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b092      	sub	sp, #72	; 0x48
 8008cb8:	af02      	add	r7, sp, #8
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8008cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cc4:	68b9      	ldr	r1, [r7, #8]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 fada 	bl	8009280 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>
  resize_if_allowed(dst, src, func);
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	68b9      	ldr	r1, [r7, #8]
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 fb15 	bl	8009300 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8008cd6:	f107 0320 	add.w	r3, r7, #32
 8008cda:	68f9      	ldr	r1, [r7, #12]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fd fb2e 	bl	800633e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f7fe fb6c 	bl	80073c0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008cee:	f107 0120 	add.w	r1, r7, #32
 8008cf2:	f107 0010 	add.w	r0, r7, #16
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f000 fb4b 	bl	8009394 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8008cfe:	f107 0310 	add.w	r3, r7, #16
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 fb60 	bl	80093c8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>
  DstEvaluatorType dstEvaluator(dst);
 8008d08:	f107 0320 	add.w	r3, r7, #32
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fb ffdc 	bl	8004cca <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff ffbf 	bl	8008c9a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
}
 8008d1c:	bf00      	nop
 8008d1e:	3740      	adds	r7, #64	; 0x40
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008d30:	68b8      	ldr	r0, [r7, #8]
 8008d32:	f7fb fffa 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8008d36:	4604      	mov	r4, r0
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7fc ffd5 	bl	8005ce8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	461a      	mov	r2, r3
 8008d42:	4621      	mov	r1, r4
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 fb6f 	bl	8009428 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>
}
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd90      	pop	{r4, r7, pc}

08008d52 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b086      	sub	sp, #24
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	60f8      	str	r0, [r7, #12]
 8008d5a:	60b9      	str	r1, [r7, #8]
 8008d5c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	68b9      	ldr	r1, [r7, #8]
 8008d66:	6978      	ldr	r0, [r7, #20]
 8008d68:	f000 fb8e 	bl	8009488 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008d6c:	bf00      	nop
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
    }
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fb fd85 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	dd08      	ble.n	8008db4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fb fd73 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	dd01      	ble.n	8008db4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 8008db0:	2301      	movs	r3, #1
 8008db2:	e000      	b.n	8008db6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2c>
 8008db4:	2300      	movs	r3, #0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fb76 	bl	80094ae <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>
}
 8008dc2:	bf00      	nop
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	332c      	adds	r3, #44	; 0x2c
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fd ffed 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3328      	adds	r3, #40	; 0x28
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fd ffe8 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fb7b 	bl	80094e2 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4618      	mov	r0, r3
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b082      	sub	sp, #8
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff ffe2 	bl	8008dca <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b098      	sub	sp, #96	; 0x60
 8008e14:	af02      	add	r7, sp, #8
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8008e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e20:	68b9      	ldr	r1, [r7, #8]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 fb4e 	bl	80094c4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	68b9      	ldr	r1, [r7, #8]
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 fb7f 	bl	8009530 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8008e32:	f107 0320 	add.w	r3, r7, #32
 8008e36:	68f9      	ldr	r1, [r7, #12]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7fe f9cb 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f7fe fa30 	bl	80072a4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008e4a:	f107 0120 	add.w	r1, r7, #32
 8008e4e:	f107 0010 	add.w	r0, r7, #16
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f000 fbb5 	bl	80095c4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8008e5a:	f107 0310 	add.w	r3, r7, #16
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 fbca 	bl	80095f8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8008e64:	f107 0320 	add.w	r3, r7, #32
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fd ffa4 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7ff ffbf 	bl	8008df6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
}
 8008e78:	bf00      	nop
 8008e7a:	3758      	adds	r7, #88	; 0x58
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>:
    static void run(const Derived&, const OtherDerived&)
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
    }
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b082      	sub	sp, #8
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	6039      	str	r1, [r7, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 fbb2 	bl	800960e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
 8008eca:	b480      	push	{r7}
 8008ecc:	b083      	sub	sp, #12
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4618      	mov	r0, r3
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fe fdad 	bl	8007a76 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b082      	sub	sp, #8
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	3310      	adds	r3, #16
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fe fdad 	bl	8007a92 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
	...

08008f44 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8008f50:	68b8      	ldr	r0, [r7, #8]
 8008f52:	f7ff ffdb 	bl	8008f0c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>
 8008f56:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8008f58:	68b8      	ldr	r0, [r7, #8]
 8008f5a:	f7ff ffe4 	bl	8008f26 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>
 8008f5e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fb fc9f 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d107      	bne.n	8008f80 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fb fc8c 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d001      	beq.n	8008f84 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8008f84:	2300      	movs	r3, #0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d005      	beq.n	8008f96 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	6979      	ldr	r1, [r7, #20]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe fba1 	bl	80076d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fb fc84 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d107      	bne.n	8008fb6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fb fc71 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d006      	beq.n	8008fc4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8008fb6:	4b05      	ldr	r3, [pc, #20]	; (8008fcc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8008fb8:	4a05      	ldr	r2, [pc, #20]	; (8008fd0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8008fba:	f240 21fd 	movw	r1, #765	; 0x2fd
 8008fbe:	4805      	ldr	r0, [pc, #20]	; (8008fd4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8008fc0:	f014 fdf0 	bl	801dba4 <__assert_func>
}
 8008fc4:	bf00      	nop
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	08022084 	.word	0x08022084
 8008fd0:	080236d8 	.word	0x080236d8
 8008fd4:	08022198 	.word	0x08022198

08008fd8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	605a      	str	r2, [r3, #4]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	609a      	str	r2, [r3, #8]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	69ba      	ldr	r2, [r7, #24]
 8008ffc:	60da      	str	r2, [r3, #12]
  }
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	4618      	mov	r0, r3
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fb32 	bl	800967e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>
  }
 800901a:	bf00      	nop
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009022:	b580      	push	{r7, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800902a:	2105      	movs	r1, #5
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7fe fdba 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fb33 	bl	800969e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>
  }
 8009038:	bf00      	nop
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>:
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	f000 fb34 	bl	80096bc <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4618      	mov	r0, r3
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4618      	mov	r0, r3
 8009082:	f7fb fc10 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009086:	4603      	mov	r3, r0
 8009088:	4618      	mov	r0, r3
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	4618      	mov	r0, r3
 800909e:	f7fb fc9d 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80090a2:	4603      	mov	r3, r0
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80090b8:	68b8      	ldr	r0, [r7, #8]
 80090ba:	f7ff ffdb 	bl	8009074 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>
 80090be:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80090c0:	68b8      	ldr	r0, [r7, #8]
 80090c2:	f7ff ffe5 	bl	8009090 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>
 80090c6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fb fc91 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80090d0:	4602      	mov	r2, r0
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d107      	bne.n	80090e8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fb fc7e 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80090e0:	4602      	mov	r2, r0
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d001      	beq.n	80090ec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80090e8:	2301      	movs	r3, #1
 80090ea:	e000      	b.n	80090ee <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80090ec:	2300      	movs	r3, #0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d005      	beq.n	80090fe <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	6979      	ldr	r1, [r7, #20]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fe fb85 	bl	8007808 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	4618      	mov	r0, r3
 8009102:	f7fb fc76 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009106:	4602      	mov	r2, r0
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	4293      	cmp	r3, r2
 800910c:	d107      	bne.n	800911e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4618      	mov	r0, r3
 8009112:	f7fb fc63 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009116:	4602      	mov	r2, r0
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	4293      	cmp	r3, r2
 800911c:	d006      	beq.n	800912c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800911e:	4b05      	ldr	r3, [pc, #20]	; (8009134 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009120:	4a05      	ldr	r2, [pc, #20]	; (8009138 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009122:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009126:	4805      	ldr	r0, [pc, #20]	; (800913c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009128:	f014 fd3c 	bl	801dba4 <__assert_func>
}
 800912c:	bf00      	nop
 800912e:	3718      	adds	r7, #24
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	08022084 	.word	0x08022084
 8009138:	080238b8 	.word	0x080238b8
 800913c:	08022198 	.word	0x08022198

08009140 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	605a      	str	r2, [r3, #4]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	609a      	str	r2, [r3, #8]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	60da      	str	r2, [r3, #12]
  }
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fad2 	bl	8009726 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 8009182:	bf00      	nop
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
  evaluator() {}
 800918a:	b580      	push	{r7, lr}
 800918c:	b082      	sub	sp, #8
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4618      	mov	r0, r3
 8009196:	f000 fad5 	bl	8009744 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
    {
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 fae4 	bl	8009780 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 80091b8:	f000 faf2 	bl	80097a0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	6819      	ldr	r1, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	2300      	movs	r3, #0
 80091c8:	f000 faf1 	bl	80097ae <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b082      	sub	sp, #8
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	4611      	mov	r1, r2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 faf5 	bl	80097d6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>
  { }
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4618      	mov	r0, r3
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3308      	adds	r3, #8
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8009230:	f107 0310 	add.w	r3, r7, #16
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	68b9      	ldr	r1, [r7, #8]
 8009238:	4618      	mov	r0, r3
 800923a:	f000 fae7 	bl	800980c <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>
 800923e:	f107 031c 	add.w	r3, r7, #28
 8009242:	4618      	mov	r0, r3
 8009244:	f7fd fb5f 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8009248:	f107 021c 	add.w	r2, r7, #28
 800924c:	f107 0310 	add.w	r3, r7, #16
 8009250:	4619      	mov	r1, r3
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f000 faf1 	bl	800983a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009258:	bf00      	nop
 800925a:	3720      	adds	r7, #32
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009268:	2202      	movs	r2, #2
 800926a:	2101      	movs	r1, #1
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7fe fd6a 	bl	8007d46 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 faf2 	bl	800985c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 8009278:	bf00      	nop
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	4618      	mov	r0, r3
 8009290:	f000 faf4 	bl	800987c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4618      	mov	r0, r3
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800929e:	b480      	push	{r7}
 80092a0:	b083      	sub	sp, #12
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4618      	mov	r0, r3
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4618      	mov	r0, r3
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b082      	sub	sp, #8
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fe fd5f 	bl	8007d98 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 80092da:	4603      	mov	r3, r0
 80092dc:	4618      	mov	r0, r3
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3308      	adds	r3, #8
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fe fd5f 	bl	8007db4 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 80092f6:	4603      	mov	r3, r0
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800930c:	68b8      	ldr	r0, [r7, #8]
 800930e:	f7ff ffdc 	bl	80092ca <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>
 8009312:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009314:	68b8      	ldr	r0, [r7, #8]
 8009316:	f7ff ffe5 	bl	80092e4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>
 800931a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4618      	mov	r0, r3
 8009320:	f7fb fb67 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009324:	4602      	mov	r2, r0
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	4293      	cmp	r3, r2
 800932a:	d107      	bne.n	800933c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4618      	mov	r0, r3
 8009330:	f7fb fb54 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009334:	4602      	mov	r2, r0
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	4293      	cmp	r3, r2
 800933a:	d001      	beq.n	8009340 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800933c:	2301      	movs	r3, #1
 800933e:	e000      	b.n	8009342 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009340:	2300      	movs	r3, #0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d005      	beq.n	8009352 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	6979      	ldr	r1, [r7, #20]
 800934c:	4618      	mov	r0, r3
 800934e:	f7fe fa5b 	bl	8007808 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	4618      	mov	r0, r3
 8009356:	f7fb fb4c 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800935a:	4602      	mov	r2, r0
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	4293      	cmp	r3, r2
 8009360:	d107      	bne.n	8009372 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4618      	mov	r0, r3
 8009366:	f7fb fb39 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800936a:	4602      	mov	r2, r0
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	4293      	cmp	r3, r2
 8009370:	d006      	beq.n	8009380 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009372:	4b05      	ldr	r3, [pc, #20]	; (8009388 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009374:	4a05      	ldr	r2, [pc, #20]	; (800938c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009376:	f240 21fd 	movw	r1, #765	; 0x2fd
 800937a:	4805      	ldr	r0, [pc, #20]	; (8009390 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800937c:	f014 fc12 	bl	801dba4 <__assert_func>
}
 8009380:	bf00      	nop
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	08022084 	.word	0x08022084
 800938c:	080239cc 	.word	0x080239cc
 8009390:	08022198 	.word	0x08022198

08009394 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	605a      	str	r2, [r3, #4]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	609a      	str	r2, [r3, #8]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	69ba      	ldr	r2, [r7, #24]
 80093b8:	60da      	str	r2, [r3, #12]
  }
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	4618      	mov	r0, r3
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fa8e 	bl	80098f2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>
  }
 80093d6:	bf00      	nop
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
 80093de:	b580      	push	{r7, lr}
 80093e0:	b082      	sub	sp, #8
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fa92 	bl	8009910 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4618      	mov	r0, r3
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>:
class dense_product_base
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b082      	sub	sp, #8
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7ff ffed 	bl	80093de <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4618      	mov	r0, r3
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800940e:	b580      	push	{r7, lr}
 8009410:	b082      	sub	sp, #8
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7ff ffed 	bl	80093f6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8009428:	b590      	push	{r4, r7, lr}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f7ff ffea 	bl	800940e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3304      	adds	r3, #4
 8009444:	6879      	ldr	r1, [r7, #4]
 8009446:	4618      	mov	r0, r3
 8009448:	f7fb f809 	bl	800445e <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4618      	mov	r0, r3
 8009450:	f7fb fac4 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009454:	4604      	mov	r4, r0
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7fc fc75 	bl	8005d46 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 800945c:	4603      	mov	r3, r0
 800945e:	429c      	cmp	r4, r3
 8009460:	d005      	beq.n	800946e <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x46>
 8009462:	4b06      	ldr	r3, [pc, #24]	; (800947c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x54>)
 8009464:	4a06      	ldr	r2, [pc, #24]	; (8009480 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x58>)
 8009466:	2160      	movs	r1, #96	; 0x60
 8009468:	4806      	ldr	r0, [pc, #24]	; (8009484 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x5c>)
 800946a:	f014 fb9b 	bl	801dba4 <__assert_func>
 800946e:	bf00      	nop
    }
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4618      	mov	r0, r3
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	bd90      	pop	{r4, r7, pc}
 800947a:	bf00      	nop
 800947c:	0801fccc 	.word	0x0801fccc
 8009480:	08023c10 	.word	0x08023c10
 8009484:	0802001c 	.word	0x0802001c

08009488 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8009494:	68b9      	ldr	r1, [r7, #8]
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f000 fa45 	bl	8009926 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	68b9      	ldr	r1, [r7, #8]
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 fa6e 	bl	8009982 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80094a6:	bf00      	nop
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 80094ae:	b480      	push	{r7}
 80094b0:	b083      	sub	sp, #12
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	6039      	str	r1, [r7, #0]
    }
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>:
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 fa8d 	bl	80099f2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4618      	mov	r0, r3
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
 80094e2:	b480      	push	{r7}
 80094e4:	b083      	sub	sp, #12
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4618      	mov	r0, r3
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe fccc 	bl	8007ea0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8009508:	4603      	mov	r3, r0
 800950a:	4618      	mov	r0, r3
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	4618      	mov	r0, r3
 8009520:	f7fb f9b6 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009524:	4603      	mov	r3, r0
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800953c:	68b8      	ldr	r0, [r7, #8]
 800953e:	f7ff ffdb 	bl	80094f8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>
 8009542:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009544:	68b8      	ldr	r0, [r7, #8]
 8009546:	f7ff ffe4 	bl	8009512 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>
 800954a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	4618      	mov	r0, r3
 8009550:	f7fb f9a9 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009554:	4602      	mov	r2, r0
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	4293      	cmp	r3, r2
 800955a:	d107      	bne.n	800956c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4618      	mov	r0, r3
 8009560:	f7fb f996 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009564:	4602      	mov	r2, r0
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	4293      	cmp	r3, r2
 800956a:	d001      	beq.n	8009570 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800956c:	2301      	movs	r3, #1
 800956e:	e000      	b.n	8009572 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009570:	2300      	movs	r3, #0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d005      	beq.n	8009582 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	6979      	ldr	r1, [r7, #20]
 800957c:	4618      	mov	r0, r3
 800957e:	f7fe f8ab 	bl	80076d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4618      	mov	r0, r3
 8009586:	f7fb f98e 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800958a:	4602      	mov	r2, r0
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	4293      	cmp	r3, r2
 8009590:	d107      	bne.n	80095a2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	4618      	mov	r0, r3
 8009596:	f7fb f97b 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800959a:	4602      	mov	r2, r0
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	4293      	cmp	r3, r2
 80095a0:	d006      	beq.n	80095b0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80095a2:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80095a4:	4a05      	ldr	r2, [pc, #20]	; (80095bc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80095a6:	f240 21fd 	movw	r1, #765	; 0x2fd
 80095aa:	4805      	ldr	r0, [pc, #20]	; (80095c0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80095ac:	f014 fafa 	bl	801dba4 <__assert_func>
}
 80095b0:	bf00      	nop
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	08022084 	.word	0x08022084
 80095bc:	08023e7c 	.word	0x08023e7c
 80095c0:	08022198 	.word	0x08022198

080095c4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	605a      	str	r2, [r3, #4]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	609a      	str	r2, [r3, #8]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	69ba      	ldr	r2, [r7, #24]
 80095e8:	60da      	str	r2, [r3, #12]
  }
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fa2c 	bl	8009a5e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>:
  typedef Product<Lhs, Rhs, LazyProduct> XprType;
  typedef typename XprType::Scalar Scalar;
  typedef typename XprType::CoeffReturnType CoeffReturnType;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
 800960e:	b590      	push	{r4, r7, lr}
 8009610:	b083      	sub	sp, #12
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	6039      	str	r1, [r7, #0]
    : m_lhs(xpr.lhs()),
      m_rhs(xpr.rhs()),
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
                            //       or perhaps declare them on the fly on the packet method... We have experiment to check what's best.
      m_innerDim(xpr.lhs().cols())
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fa47 	bl	8009aac <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 800961e:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009620:	6838      	ldr	r0, [r7, #0]
 8009622:	f000 fa2c 	bl	8009a7e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8009626:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009628:	4619      	mov	r1, r3
 800962a:	4620      	mov	r0, r4
 800962c:	f7fa fcf8 	bl	8004020 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
      m_rhs(xpr.rhs()),
 8009630:	6838      	ldr	r0, [r7, #0]
 8009632:	f000 fa2f 	bl	8009a94 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>
 8009636:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3310      	adds	r3, #16
 800963c:	6812      	ldr	r2, [r2, #0]
 800963e:	601a      	str	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	3314      	adds	r3, #20
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009644:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009646:	4611      	mov	r1, r2
 8009648:	4618      	mov	r0, r3
 800964a:	f000 fa3a 	bl	8009ac2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f103 0224 	add.w	r2, r3, #36	; 0x24
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3310      	adds	r3, #16
      m_innerDim(xpr.lhs().cols())
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f000 fa40 	bl	8009ae0 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
 8009660:	6838      	ldr	r0, [r7, #0]
 8009662:	f000 fa0c 	bl	8009a7e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8009666:	4603      	mov	r3, r0
 8009668:	4618      	mov	r0, r3
 800966a:	f7fb fcc0 	bl	8004fee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 800966e:	4602      	mov	r2, r0
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	629a      	str	r2, [r3, #40]	; 0x28
    std::cerr << "CanVectorizeInner=    " << CanVectorizeInner << "\n";
    std::cerr << "EvalToRowMajor=       " << EvalToRowMajor << "\n";
    std::cerr << "Alignment=            " << Alignment << "\n";
    std::cerr << "Flags=                " << Flags << "\n";
#endif
  }
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4618      	mov	r0, r3
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	bd90      	pop	{r4, r7, pc}

0800967e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009686:	2200      	movs	r2, #0
 8009688:	2100      	movs	r1, #0
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fa37 	bl	8009afe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fa4d 	bl	8009b30 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>
  }
 8009696:	bf00      	nop
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800969e:	b580      	push	{r7, lr}
 80096a0:	b082      	sub	sp, #8
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80096a6:	2106      	movs	r1, #6
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7fe fa7c 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fa4e 	bl	8009b50 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>
  }
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fa69 	bl	8009b9e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 80096cc:	6838      	ldr	r0, [r7, #0]
 80096ce:	f000 fa4e 	bl	8009b6e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 80096d2:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 80096d8:	6838      	ldr	r0, [r7, #0]
 80096da:	f000 fa54 	bl	8009b86 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>
 80096de:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	605a      	str	r2, [r3, #4]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 80096ee:	4619      	mov	r1, r3
 80096f0:	4610      	mov	r0, r2
 80096f2:	f7fd fd6f 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8009700:	4619      	mov	r1, r3
 8009702:	4610      	mov	r0, r2
 8009704:	f7fc fe1b 	bl	800633e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009708:	6838      	ldr	r0, [r7, #0]
 800970a:	f000 fa30 	bl	8009b6e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 800970e:	4603      	mov	r3, r0
 8009710:	4618      	mov	r0, r3
 8009712:	f7fb f8bd 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009716:	4602      	mov	r2, r0
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	611a      	str	r2, [r3, #16]
  }
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009726:	b580      	push	{r7, lr}
 8009728:	b082      	sub	sp, #8
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800972e:	2100      	movs	r1, #0
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fa3f 	bl	8009bb4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fa5f 	bl	8009bfa <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 800973c:	bf00      	nop
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>:
  evaluator()
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fa63 	bl	8009c18 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2203      	movs	r2, #3
 8009756:	2100      	movs	r1, #0
 8009758:	4618      	mov	r0, r3
 800975a:	f7fe fa05 	bl	8007b68 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4618      	mov	r0, r3
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fa5c 	bl	8009c2e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7ff ffed 	bl	8009768 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fa57 	bl	8009c44 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>
    }
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 80097a0:	b480      	push	{r7}
 80097a2:	af00      	add	r7, sp, #0
    }
 80097a4:	bf00      	nop
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b086      	sub	sp, #24
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	60f8      	str	r0, [r7, #12]
 80097b6:	60b9      	str	r1, [r7, #8]
 80097b8:	607a      	str	r2, [r7, #4]
 80097ba:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 80097bc:	2301      	movs	r3, #1
 80097be:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 80097c0:	2301      	movs	r3, #1
 80097c2:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	68b9      	ldr	r1, [r7, #8]
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 fa49 	bl	8009c60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
    }
 80097ce:	bf00      	nop
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 80097d6:	b5b0      	push	{r4, r5, r7, lr}
 80097d8:	b082      	sub	sp, #8
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fa19 	bl	8009c18 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 80097e6:	687c      	ldr	r4, [r7, #4]
 80097e8:	6838      	ldr	r0, [r7, #0]
 80097ea:	f000 fa6b 	bl	8009cc4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>
 80097ee:	4605      	mov	r5, r0
 80097f0:	6838      	ldr	r0, [r7, #0]
 80097f2:	f000 fa74 	bl	8009cde <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>
 80097f6:	4603      	mov	r3, r0
 80097f8:	461a      	mov	r2, r3
 80097fa:	4629      	mov	r1, r5
 80097fc:	4620      	mov	r0, r4
 80097fe:	f7fe f9b3 	bl	8007b68 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bdb0      	pop	{r4, r5, r7, pc}

0800980c <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800980c:	b590      	push	{r4, r7, lr}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8009818:	68b8      	ldr	r0, [r7, #8]
 800981a:	f7fb fd4a 	bl	80052b2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800981e:	4604      	mov	r4, r0
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7fb fd51 	bl	80052c8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8009826:	4603      	mov	r3, r0
 8009828:	461a      	mov	r2, r3
 800982a:	4621      	mov	r1, r4
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 fa8b 	bl	8009d48 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>
}
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	bd90      	pop	{r4, r7, pc}

0800983a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800983a:	b580      	push	{r7, lr}
 800983c:	b086      	sub	sp, #24
 800983e:	af00      	add	r7, sp, #0
 8009840:	60f8      	str	r0, [r7, #12]
 8009842:	60b9      	str	r1, [r7, #8]
 8009844:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	68b9      	ldr	r1, [r7, #8]
 800984e:	6978      	ldr	r0, [r7, #20]
 8009850:	f000 faaa 	bl	8009da8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 8009854:	bf00      	nop
 8009856:	3718      	adds	r7, #24
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009864:	2200      	movs	r2, #0
 8009866:	2102      	movs	r1, #2
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7fe fa6c 	bl	8007d46 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 faad 	bl	8009dce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 8009874:	bf00      	nop
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>:
  explicit product_evaluator(const XprType& xpr)
 800987c:	b590      	push	{r4, r7, lr}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fac8 	bl	8009e1c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 800988c:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800988e:	6838      	ldr	r0, [r7, #0]
 8009890:	f000 faad 	bl	8009dee <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 8009894:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009896:	4619      	mov	r1, r3
 8009898:	4620      	mov	r0, r4
 800989a:	f000 faca 	bl	8009e32 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f103 040c 	add.w	r4, r3, #12
      m_rhs(xpr.rhs()),
 80098a4:	6838      	ldr	r0, [r7, #0]
 80098a6:	f000 faad 	bl	8009e04 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>
 80098aa:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 80098ac:	4619      	mov	r1, r3
 80098ae:	4620      	mov	r0, r4
 80098b0:	f000 fad4 	bl	8009e5c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3310      	adds	r3, #16
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 80098b8:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fc fd3e 	bl	800633e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f103 0214 	add.w	r2, r3, #20
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	330c      	adds	r3, #12
      m_innerDim(xpr.lhs().cols())
 80098cc:	4619      	mov	r1, r3
 80098ce:	4610      	mov	r0, r2
 80098d0:	f000 fad9 	bl	8009e86 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 80098d4:	6838      	ldr	r0, [r7, #0]
 80098d6:	f000 fa8a 	bl	8009dee <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 80098da:	4603      	mov	r3, r0
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fc f8b2 	bl	8005a46 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 80098e2:	4602      	mov	r2, r0
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	619a      	str	r2, [r3, #24]
  }
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4618      	mov	r0, r3
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd90      	pop	{r4, r7, pc}

080098f2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b082      	sub	sp, #8
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80098fa:	2100      	movs	r1, #0
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fad2 	bl	8009ea6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 faf2 	bl	8009eec <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>
  }
 8009908:	bf00      	nop
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
    }
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4618      	mov	r0, r3
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009926:	b480      	push	{r7}
 8009928:	b083      	sub	sp, #12
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	330c      	adds	r3, #12
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff f983 	bl	8008c54 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3308      	adds	r3, #8
 8009952:	4618      	mov	r0, r3
 8009954:	f7fb f9b9 	bl	8004cca <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fae5 	bl	8009f28 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4618      	mov	r0, r3
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4618      	mov	r0, r3
 8009974:	f7ff ffe2 	bl	800993c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009982:	b580      	push	{r7, lr}
 8009984:	b090      	sub	sp, #64	; 0x40
 8009986:	af02      	add	r7, sp, #8
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	60b9      	str	r1, [r7, #8]
 800998c:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800998e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009992:	68b9      	ldr	r1, [r7, #8]
 8009994:	4618      	mov	r0, r3
 8009996:	f000 fab8 	bl	8009f0a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	68b9      	ldr	r1, [r7, #8]
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 faea 	bl	8009f78 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 80099a4:	f107 0320 	add.w	r3, r7, #32
 80099a8:	68f9      	ldr	r1, [r7, #12]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fc fcc7 	bl	800633e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f7fd fd05 	bl	80073c0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 80099b6:	4603      	mov	r3, r0
 80099b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80099bc:	f107 0120 	add.w	r1, r7, #32
 80099c0:	f107 0010 	add.w	r0, r7, #16
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f000 fb04 	bl	8009fd4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80099cc:	f107 0310 	add.w	r3, r7, #16
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 fb19 	bl	800a008 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 80099d6:	f107 0320 	add.w	r3, r7, #32
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fb f975 	bl	8004cca <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80099e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7ff ffbf 	bl	8009968 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
}
 80099ea:	bf00      	nop
 80099ec:	3738      	adds	r7, #56	; 0x38
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 80099f2:	b590      	push	{r4, r7, lr}
 80099f4:	b083      	sub	sp, #12
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fb25 	bl	800a04c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8009a02:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009a04:	6838      	ldr	r0, [r7, #0]
 8009a06:	f000 fb0a 	bl	800a01e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 8009a0a:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f000 fb27 	bl	800a062 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>
      m_rhs(xpr.rhs()),
 8009a14:	6838      	ldr	r0, [r7, #0]
 8009a16:	f000 fb0d 	bl	800a034 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>
 8009a1a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	625a      	str	r2, [r3, #36]	; 0x24
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009a24:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009a26:	4611      	mov	r1, r2
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fd fbd3 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      m_innerDim(xpr.lhs().cols())
 8009a38:	4619      	mov	r1, r3
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	f7fd fbca 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009a40:	6838      	ldr	r0, [r7, #0]
 8009a42:	f000 faec 	bl	800a01e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 8009a46:	4603      	mov	r3, r0
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7fc fb58 	bl	80060fe <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	631a      	str	r2, [r3, #48]	; 0x30
  }
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4618      	mov	r0, r3
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd90      	pop	{r4, r7, pc}

08009a5e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b082      	sub	sp, #8
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009a66:	2200      	movs	r2, #0
 8009a68:	2100      	movs	r1, #0
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fb0e 	bl	800a08c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fb24 	bl	800a0be <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 8009a76:	bf00      	nop
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009a7e:	b480      	push	{r7}
 8009a80:	b083      	sub	sp, #12
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3310      	adds	r3, #16
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b082      	sub	sp, #8
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	6039      	str	r1, [r7, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 fb04 	bl	800a0de <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 fb07 	bl	800a102 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b086      	sub	sp, #24
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	60f8      	str	r0, [r7, #12]
 8009b06:	60b9      	str	r1, [r7, #8]
 8009b08:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8009b0a:	6879      	ldr	r1, [r7, #4]
 8009b0c:	68b8      	ldr	r0, [r7, #8]
 8009b0e:	f000 fb0e 	bl	800a12e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8009b12:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8009b14:	6879      	ldr	r1, [r7, #4]
 8009b16:	68b8      	ldr	r0, [r7, #8]
 8009b18:	f000 fb15 	bl	800a146 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8009b1c:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	6979      	ldr	r1, [r7, #20]
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 fb1b 	bl	800a15e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8009b28:	bf00      	nop
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009b38:	2201      	movs	r2, #1
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7ff ffde 	bl	8009afe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fb31 	bl	800a1aa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>
  }
 8009b48:	bf00      	nop
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009b58:	2107      	movs	r1, #7
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7fe f823 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fb32 	bl	800a1ca <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>
  }
 8009b66:	bf00      	nop
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009b6e:	b480      	push	{r7}
 8009b70:	b083      	sub	sp, #12
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009b86:	b480      	push	{r7}
 8009b88:	b083      	sub	sp, #12
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	4618      	mov	r0, r3
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8009b9e:	b480      	push	{r7}
 8009ba0:	b083      	sub	sp, #12
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8009bb4:	b5b0      	push	{r4, r5, r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	689c      	ldr	r4, [r3, #8]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7fe fa52 	bl	8008072 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8009bce:	4605      	mov	r5, r0
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 fb06 	bl	800a1e8 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 8009bdc:	eef0 7a40 	vmov.f32	s15, s0
 8009be0:	edc7 7a03 	vstr	s15, [r7, #12]
 8009be4:	f107 030c 	add.w	r3, r7, #12
 8009be8:	461a      	mov	r2, r3
 8009bea:	4629      	mov	r1, r5
 8009bec:	4620      	mov	r0, r4
 8009bee:	f7fe f9f9 	bl	8007fe4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bdb0      	pop	{r4, r5, r7, pc}

08009bfa <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b082      	sub	sp, #8
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009c02:	2101      	movs	r1, #1
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff ffd5 	bl	8009bb4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fb25 	bl	800a25a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 8009c10:	bf00      	nop
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4618      	mov	r0, r3
 8009c24:	370c      	adds	r7, #12
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr

08009c2e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009c2e:	b480      	push	{r7}
 8009c30:	b083      	sub	sp, #12
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
    }
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 fb12 	bl	800a278 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>
    }
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d108      	bne.n	8009c84 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d105      	bne.n	8009c84 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	db02      	blt.n	8009c84 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	da06      	bge.n	8009c92 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x32>
 8009c84:	4b0c      	ldr	r3, [pc, #48]	; (8009cb8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x58>)
 8009c86:	4a0d      	ldr	r2, [pc, #52]	; (8009cbc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x5c>)
 8009c88:	f240 1111 	movw	r1, #273	; 0x111
 8009c8c:	480c      	ldr	r0, [pc, #48]	; (8009cc0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x60>)
 8009c8e:	f013 ff89 	bl	801dba4 <__assert_func>
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	617b      	str	r3, [r7, #20]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	613b      	str	r3, [r7, #16]
  }
 8009c9a:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	fb02 f103 	mul.w	r1, r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	f000 faf0 	bl	800a28e <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>
    }
 8009cae:	bf00      	nop
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	0802249c 	.word	0x0802249c
 8009cbc:	08024034 	.word	0x08024034
 8009cc0:	080226b8 	.word	0x080226b8

08009cc4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 faea 	bl	800a2a8 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b082      	sub	sp, #8
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
      return derived().outerStride();
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fae9 	bl	800a2be <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 8009cec:	4603      	mov	r3, r0
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 faf0 	bl	800a2d4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>
 8009cf4:	4603      	mov	r3, r0
    }
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 faf0 	bl	800a2ec <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>:
class dense_product_base
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b082      	sub	sp, #8
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff ffed 	bl	8009cfe <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4618      	mov	r0, r3
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7ff ffed 	bl	8009d16 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
	...

08009d48 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8009d48:	b590      	push	{r4, r7, lr}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f7ff ffea 	bl	8009d2e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d62:	e883 0003 	stmia.w	r3, {r0, r1}
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	3308      	adds	r3, #8
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	6812      	ldr	r2, [r2, #0]
 8009d6e:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8009d70:	68b8      	ldr	r0, [r7, #8]
 8009d72:	f7fb fad8 	bl	8005326 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 8009d76:	4604      	mov	r4, r0
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7fb fae2 	bl	8005342 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	429c      	cmp	r4, r3
 8009d82:	d005      	beq.n	8009d90 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x48>
 8009d84:	4b05      	ldr	r3, [pc, #20]	; (8009d9c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x54>)
 8009d86:	4a06      	ldr	r2, [pc, #24]	; (8009da0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x58>)
 8009d88:	2160      	movs	r1, #96	; 0x60
 8009d8a:	4806      	ldr	r0, [pc, #24]	; (8009da4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x5c>)
 8009d8c:	f013 ff0a 	bl	801dba4 <__assert_func>
 8009d90:	bf00      	nop
    }
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	4618      	mov	r0, r3
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd90      	pop	{r4, r7, pc}
 8009d9c:	0801fccc 	.word	0x0801fccc
 8009da0:	080240c8 	.word	0x080240c8
 8009da4:	0802001c 	.word	0x0802001c

08009da8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8009db4:	68b9      	ldr	r1, [r7, #8]
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 fab9 	bl	800a32e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	68b9      	ldr	r1, [r7, #8]
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 fb14 	bl	800a3ee <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009dc6:	bf00      	nop
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	2102      	movs	r1, #2
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7fd ffb3 	bl	8007d46 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fb3c 	bl	800a45e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 8009de6:	bf00      	nop
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	3308      	adds	r3, #8
 8009e10:	4618      	mov	r0, r3
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4618      	mov	r0, r3
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	6039      	str	r1, [r7, #0]
    {
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fa fc75 	bl	800472e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8009e44:	f7fa fc83 	bl	800474e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 fb16 	bl	800a47e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>
    }
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4618      	mov	r0, r3
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>:
    explicit Matrix(const T& x)
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
    {
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fa fc3d 	bl	80046e8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 8009e6e:	f7fa fc4b 	bl	8004708 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f000 fb0e 	bl	800a498 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b082      	sub	sp, #8
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	4611      	mov	r1, r2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 fb0b 	bl	800a4b2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>
  { }
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8009ea6:	b5b0      	push	{r4, r5, r7, lr}
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	689c      	ldr	r4, [r3, #8]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fe f8d9 	bl	8008072 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 fb09 	bl	800a4e0 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>
 8009ece:	eef0 7a40 	vmov.f32	s15, s0
 8009ed2:	edc7 7a03 	vstr	s15, [r7, #12]
 8009ed6:	f107 030c 	add.w	r3, r7, #12
 8009eda:	461a      	mov	r2, r3
 8009edc:	4629      	mov	r1, r5
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f7fe f880 	bl	8007fe4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8009ee4:	bf00      	nop
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bdb0      	pop	{r4, r5, r7, pc}

08009eec <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7ff ffd5 	bl	8009ea6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 fb28 	bl	800a552 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>
  }
 8009f02:	bf00      	nop
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	6039      	str	r1, [r7, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 fb29 	bl	800a570 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4618      	mov	r0, r3
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4618      	mov	r0, r3
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b082      	sub	sp, #8
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fa fd51 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009f50:	4603      	mov	r3, r0
 8009f52:	4618      	mov	r0, r3
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b082      	sub	sp, #8
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	3304      	adds	r3, #4
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fc fc05 	bl	8006776 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 8009f78:	b590      	push	{r4, r7, lr}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7fa fd33 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	68b8      	ldr	r0, [r7, #8]
 8009f90:	f7ff ffd5 	bl	8009f3e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>
 8009f94:	4603      	mov	r3, r0
 8009f96:	429c      	cmp	r4, r3
 8009f98:	d10a      	bne.n	8009fb0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7fa fd1d 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	68b8      	ldr	r0, [r7, #8]
 8009fa6:	f7ff ffd8 	bl	8009f5a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>
 8009faa:	4603      	mov	r3, r0
 8009fac:	429c      	cmp	r4, r3
 8009fae:	d006      	beq.n	8009fbe <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 8009fb0:	4b05      	ldr	r3, [pc, #20]	; (8009fc8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 8009fb2:	4a06      	ldr	r2, [pc, #24]	; (8009fcc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 8009fb4:	f240 21f2 	movw	r1, #754	; 0x2f2
 8009fb8:	4805      	ldr	r0, [pc, #20]	; (8009fd0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 8009fba:	f013 fdf3 	bl	801dba4 <__assert_func>
}
 8009fbe:	bf00      	nop
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd90      	pop	{r4, r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	080227a0 	.word	0x080227a0
 8009fcc:	08024274 	.word	0x08024274
 8009fd0:	08022198 	.word	0x08022198

08009fd4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
 8009fe0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	601a      	str	r2, [r3, #0]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	605a      	str	r2, [r3, #4]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	609a      	str	r2, [r3, #8]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	69ba      	ldr	r2, [r7, #24]
 8009ff8:	60da      	str	r2, [r3, #12]
  }
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fae6 	bl	800a5e2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>
  }
 800a016:	bf00      	nop
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a01e:	b480      	push	{r7}
 800a020:	b083      	sub	sp, #12
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4618      	mov	r0, r3
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	4618      	mov	r0, r3
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4618      	mov	r0, r3
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	6039      	str	r1, [r7, #0]
    {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fa fb17 	bl	80046a2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800a074:	f7fa fb25 	bl	80046c2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6839      	ldr	r1, [r7, #0]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f000 fabf 	bl	800a600 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800a098:	6879      	ldr	r1, [r7, #4]
 800a09a:	68b8      	ldr	r0, [r7, #8]
 800a09c:	f000 fabd 	bl	800a61a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800a0a0:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800a0a2:	6879      	ldr	r1, [r7, #4]
 800a0a4:	68b8      	ldr	r0, [r7, #8]
 800a0a6:	f000 fac4 	bl	800a632 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800a0aa:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	6979      	ldr	r1, [r7, #20]
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 faca 	bl	800a64a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800a0b6:	bf00      	nop
 800a0b8:	3718      	adds	r7, #24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff ffde 	bl	800a08c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fae0 	bl	800a696 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 800a0d6:	bf00      	nop
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b082      	sub	sp, #8
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	6039      	str	r1, [r7, #0]
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fae4 	bl	800a6b6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 faea 	bl	800a6cc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800a102:	b590      	push	{r4, r7, lr}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	6039      	str	r1, [r7, #0]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 fb11 	bl	800a734 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800a112:	687c      	ldr	r4, [r7, #4]
 800a114:	6838      	ldr	r0, [r7, #0]
 800a116:	f000 fb01 	bl	800a71c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800a11a:	4603      	mov	r3, r0
 800a11c:	4619      	mov	r1, r3
 800a11e:	4620      	mov	r0, r4
 800a120:	f7fc f90d 	bl	800633e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4618      	mov	r0, r3
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd90      	pop	{r4, r7, pc}

0800a12e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800a12e:	b480      	push	{r7}
 800a130:	b083      	sub	sp, #12
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	6039      	str	r1, [r7, #0]
      : inner;
 800a138:	683b      	ldr	r3, [r7, #0]
  }
 800a13a:	4618      	mov	r0, r3
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800a146:	b480      	push	{r7}
 800a148:	b083      	sub	sp, #12
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6039      	str	r1, [r7, #0]
      : outer;
 800a150:	687b      	ldr	r3, [r7, #4]
  }
 800a152:	4618      	mov	r0, r3
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800a15e:	b5b0      	push	{r4, r5, r7, lr}
 800a160:	b086      	sub	sp, #24
 800a162:	af00      	add	r7, sp, #0
 800a164:	60f8      	str	r0, [r7, #12]
 800a166:	60b9      	str	r1, [r7, #8]
 800a168:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	689c      	ldr	r4, [r3, #8]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	68b9      	ldr	r1, [r7, #8]
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe f9c4 	bl	8008504 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800a17c:	4605      	mov	r5, r0
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	68b9      	ldr	r1, [r7, #8]
 800a186:	4618      	mov	r0, r3
 800a188:	f000 fadf 	bl	800a74a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>
 800a18c:	eef0 7a40 	vmov.f32	s15, s0
 800a190:	edc7 7a05 	vstr	s15, [r7, #20]
 800a194:	f107 0314 	add.w	r3, r7, #20
 800a198:	461a      	mov	r2, r3
 800a19a:	4629      	mov	r1, r5
 800a19c:	4620      	mov	r0, r4
 800a19e:	f7fd ff21 	bl	8007fe4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a1a2:	bf00      	nop
 800a1a4:	3718      	adds	r7, #24
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bdb0      	pop	{r4, r5, r7, pc}

0800a1aa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b082      	sub	sp, #8
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7ff fca1 	bl	8009afe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 faf7 	bl	800a7b0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>
  }
 800a1c2:	bf00      	nop
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b082      	sub	sp, #8
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a1d2:	2108      	movs	r1, #8
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7fd fce6 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 faf8 	bl	800a7d0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>
  }
 800a1e0:	bf00      	nop
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  /* Allow index-based non-packet access. It is impossible though to allow index-based packed access,
   * which is why we don't set the LinearAccessBit.
   * TODO: this seems possible when the result is a vector
   */
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  const CoeffReturnType coeff(Index index) const
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b0a4      	sub	sp, #144	; 0x90
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  {
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6819      	ldr	r1, [r3, #0]
 800a202:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a206:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a20a:	4618      	mov	r0, r3
 800a20c:	f000 faea 	bl	800a7e4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800a210:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a214:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a218:	4611      	mov	r1, r2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 faf5 	bl	800a80a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6859      	ldr	r1, [r3, #4]
 800a224:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a228:	2200      	movs	r2, #0
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 fafe 	bl	800a82c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>
 800a230:	f107 030c 	add.w	r3, r7, #12
 800a234:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a238:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a23c:	4618      	mov	r0, r3
 800a23e:	f000 fb08 	bl	800a852 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800a242:	f107 030c 	add.w	r3, r7, #12
 800a246:	4618      	mov	r0, r3
 800a248:	f000 fb31 	bl	800a8ae <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>
 800a24c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a250:	eeb0 0a67 	vmov.f32	s0, s15
 800a254:	3790      	adds	r7, #144	; 0x90
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b082      	sub	sp, #8
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a262:	2102      	movs	r1, #2
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f7ff fca5 	bl	8009bb4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fb3a 	bl	800a8e4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>:
  plain_array()
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800a280:	f7fc fbd4 	bl	8006a2c <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4618      	mov	r0, r3
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800a28e:	b480      	push	{r7}
 800a290:	b085      	sub	sp, #20
 800a292:	af00      	add	r7, sp, #0
 800a294:	60f8      	str	r0, [r7, #12]
 800a296:	60b9      	str	r1, [r7, #8]
 800a298:	607a      	str	r2, [r7, #4]
 800a29a:	603b      	str	r3, [r7, #0]
 800a29c:	bf00      	nop
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800a2be:	b480      	push	{r7}
 800a2c0:	b083      	sub	sp, #12
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 fb0b 	bl	800a8f8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
    }
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800a302:	b580      	push	{r7, lr}
 800a304:	b082      	sub	sp, #8
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	f000 fb01 	bl	800a910 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>
 800a30e:	4603      	mov	r3, r0
 800a310:	4618      	mov	r0, r3
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	f000 fafe 	bl	800a920 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>
 800a324:	4603      	mov	r3, r0
 800a326:	4618      	mov	r0, r3
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7ff ffe1 	bl	800a302 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800a340:	4603      	mov	r3, r0
 800a342:	2b01      	cmp	r3, #1
 800a344:	dd08      	ble.n	800a358 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4618      	mov	r0, r3
 800a34a:	f7ff ffe5 	bl	800a318 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b01      	cmp	r3, #1
 800a352:	dd01      	ble.n	800a358 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800a354:	2301      	movs	r3, #1
 800a356:	e000      	b.n	800a35a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2c>
 800a358:	2300      	movs	r3, #0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d003      	beq.n	800a366 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fae5 	bl	800a930 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>
}
 800a366:	bf00      	nop
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800a36e:	b580      	push	{r7, lr}
 800a370:	b082      	sub	sp, #8
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fc fd1c 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fafb 	bl	800a97a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4618      	mov	r0, r3
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800a38e:	b580      	push	{r7, lr}
 800a390:	b082      	sub	sp, #8
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4618      	mov	r0, r3
 800a39a:	f7ff ffe8 	bl	800a36e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	332c      	adds	r3, #44	; 0x2c
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7ff ffea 	bl	800a38e <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	3328      	adds	r3, #40	; 0x28
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fc fcf9 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 facd 	bl	800a964 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7ff ffe2 	bl	800a3a8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b098      	sub	sp, #96	; 0x60
 800a3f2:	af02      	add	r7, sp, #8
 800a3f4:	60f8      	str	r0, [r7, #12]
 800a3f6:	60b9      	str	r1, [r7, #8]
 800a3f8:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800a3fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3fe:	68b9      	ldr	r1, [r7, #8]
 800a400:	4618      	mov	r0, r3
 800a402:	f000 faa0 	bl	800a946 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	68b9      	ldr	r1, [r7, #8]
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f000 fadc 	bl	800a9c8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800a410:	f107 0320 	add.w	r3, r7, #32
 800a414:	68f9      	ldr	r1, [r7, #12]
 800a416:	4618      	mov	r0, r3
 800a418:	f7fe fedd 	bl	80091d6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f000 fb1d 	bl	800aa5c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>
 800a422:	4603      	mov	r3, r0
 800a424:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a428:	f107 0120 	add.w	r1, r7, #32
 800a42c:	f107 0010 	add.w	r0, r7, #16
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f000 fb1d 	bl	800aa72 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800a438:	f107 0310 	add.w	r3, r7, #16
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 fb32 	bl	800aaa6 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800a442:	f107 0320 	add.w	r3, r7, #32
 800a446:	4618      	mov	r0, r3
 800a448:	f7fc fd8a 	bl	8006f60 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800a44c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a450:	4618      	mov	r0, r3
 800a452:	f7ff ffbf 	bl	800a3d4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
}
 800a456:	bf00      	nop
 800a458:	3758      	adds	r7, #88	; 0x58
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a45e:	b580      	push	{r7, lr}
 800a460:	b082      	sub	sp, #8
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a466:	2202      	movs	r2, #2
 800a468:	2102      	movs	r1, #2
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7fd fc6b 	bl	8007d46 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fb23 	bl	800aabc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800a47e:	b580      	push	{r7, lr}
 800a480:	b082      	sub	sp, #8
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fb20 	bl	800aad0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800a490:	bf00      	nop
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fb34 	bl	800ab12 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800a4aa:	bf00      	nop
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800a4b2:	b590      	push	{r4, r7, lr}
 800a4b4:	b083      	sub	sp, #12
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fb56 	bl	800ab6e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 800a4c2:	687c      	ldr	r4, [r7, #4]
 800a4c4:	6838      	ldr	r0, [r7, #0]
 800a4c6:	f000 fb45 	bl	800ab54 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f7fc fad8 	bl	8006a86 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd90      	pop	{r4, r7, pc}

0800a4e0 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b0a2      	sub	sp, #136	; 0x88
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a4fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a500:	4618      	mov	r0, r3
 800a502:	f000 fb3f 	bl	800ab84 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800a506:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a50a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800a50e:	4611      	mov	r1, r2
 800a510:	4618      	mov	r0, r3
 800a512:	f000 fb4a 	bl	800abaa <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f103 010c 	add.w	r1, r3, #12
 800a51c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a520:	2200      	movs	r2, #0
 800a522:	4618      	mov	r0, r3
 800a524:	f000 fb52 	bl	800abcc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800a528:	f107 030c 	add.w	r3, r7, #12
 800a52c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800a530:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800a534:	4618      	mov	r0, r3
 800a536:	f000 fb5c 	bl	800abf2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800a53a:	f107 030c 	add.w	r3, r7, #12
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 fb85 	bl	800ac4e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800a544:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a548:	eeb0 0a67 	vmov.f32	s0, s15
 800a54c:	3788      	adds	r7, #136	; 0x88
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a55a:	2102      	movs	r1, #2
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7ff fca2 	bl	8009ea6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fb8e 	bl	800ac84 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>
  }
 800a568:	bf00      	nop
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 800a570:	b590      	push	{r4, r7, lr}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fba4 	bl	800acc8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800a580:	6838      	ldr	r0, [r7, #0]
 800a582:	f000 fb89 	bl	800ac98 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800a586:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	601a      	str	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	1d1c      	adds	r4, r3, #4
      m_rhs(xpr.rhs()),
 800a590:	6838      	ldr	r0, [r7, #0]
 800a592:	f000 fb8d 	bl	800acb0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>
 800a596:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a598:	4619      	mov	r1, r3
 800a59a:	4620      	mov	r0, r4
 800a59c:	f000 fb9f 	bl	800acde <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	f7fb fec6 	bl	800633e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f7ff fc61 	bl	8009e86 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 800a5c4:	6838      	ldr	r0, [r7, #0]
 800a5c6:	f000 fb67 	bl	800ac98 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fa fa05 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	611a      	str	r2, [r3, #16]
  }
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd90      	pop	{r4, r7, pc}

0800a5e2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b082      	sub	sp, #8
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fb8b 	bl	800ad08 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fbab 	bl	800ad4e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>
  }
 800a5f8:	bf00      	nop
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fbad 	bl	800ad6c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800a612:	bf00      	nop
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800a61a:	b480      	push	{r7}
 800a61c:	b083      	sub	sp, #12
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	6039      	str	r1, [r7, #0]
      : inner;
 800a624:	683b      	ldr	r3, [r7, #0]
  }
 800a626:	4618      	mov	r0, r3
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800a632:	b480      	push	{r7}
 800a634:	b083      	sub	sp, #12
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
      : outer;
 800a63c:	687b      	ldr	r3, [r7, #4]
  }
 800a63e:	4618      	mov	r0, r3
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800a64a:	b5b0      	push	{r4, r5, r7, lr}
 800a64c:	b086      	sub	sp, #24
 800a64e:	af00      	add	r7, sp, #0
 800a650:	60f8      	str	r0, [r7, #12]
 800a652:	60b9      	str	r1, [r7, #8]
 800a654:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	689c      	ldr	r4, [r3, #8]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	68b9      	ldr	r1, [r7, #8]
 800a662:	4618      	mov	r0, r3
 800a664:	f7fd ff4e 	bl	8008504 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800a668:	4605      	mov	r5, r0
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	68b9      	ldr	r1, [r7, #8]
 800a672:	4618      	mov	r0, r3
 800a674:	f000 fb9b 	bl	800adae <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>
 800a678:	eef0 7a40 	vmov.f32	s15, s0
 800a67c:	edc7 7a05 	vstr	s15, [r7, #20]
 800a680:	f107 0314 	add.w	r3, r7, #20
 800a684:	461a      	mov	r2, r3
 800a686:	4629      	mov	r1, r5
 800a688:	4620      	mov	r0, r4
 800a68a:	f7fd fcab 	bl	8007fe4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a68e:	bf00      	nop
 800a690:	3718      	adds	r7, #24
 800a692:	46bd      	mov	sp, r7
 800a694:	bdb0      	pop	{r4, r5, r7, pc}

0800a696 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a696:	b580      	push	{r7, lr}
 800a698:	b082      	sub	sp, #8
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a69e:	2202      	movs	r2, #2
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7ff fcf2 	bl	800a08c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fbb2 	bl	800ae12 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 800a6ae:	bf00      	nop
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a6b6:	b480      	push	{r7}
 800a6b8:	b083      	sub	sp, #12
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800a6cc:	b590      	push	{r4, r7, lr}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
 800a6d6:	687c      	ldr	r4, [r7, #4]
 800a6d8:	6838      	ldr	r0, [r7, #0]
 800a6da:	f000 fbaa 	bl	800ae32 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f7fa fc0a 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	1d1c      	adds	r4, r3, #4
 800a6ec:	6838      	ldr	r0, [r7, #0]
 800a6ee:	f000 fbac 	bl	800ae4a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f000 fbbf 	bl	800ae7a <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f103 0408 	add.w	r4, r3, #8
 800a702:	6838      	ldr	r0, [r7, #0]
 800a704:	f000 fbad 	bl	800ae62 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>
 800a708:	4603      	mov	r3, r0
 800a70a:	4619      	mov	r1, r3
 800a70c:	4620      	mov	r0, r4
 800a70e:	f000 fbc3 	bl	800ae98 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4618      	mov	r0, r3
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd90      	pop	{r4, r7, pc}

0800a71c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4618      	mov	r0, r3
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b0a4      	sub	sp, #144	; 0x90
 800a74e:	af00      	add	r7, sp, #0
 800a750:	60f8      	str	r0, [r7, #12]
 800a752:	60b9      	str	r1, [r7, #8]
 800a754:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a756:	68f9      	ldr	r1, [r7, #12]
 800a758:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 fbde 	bl	800af20 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>
 800a764:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a768:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a76c:	4611      	mov	r1, r2
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 fbf9 	bl	800af66 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f103 0110 	add.w	r1, r3, #16
 800a77a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	4618      	mov	r0, r3
 800a782:	f000 fc01 	bl	800af88 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>
 800a786:	f107 0310 	add.w	r3, r7, #16
 800a78a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800a78e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a792:	4618      	mov	r0, r3
 800a794:	f000 fc0b 	bl	800afae <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>
 800a798:	f107 0310 	add.w	r3, r7, #16
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 fc34 	bl	800b00a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>
 800a7a2:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a7a6:	eeb0 0a67 	vmov.f32	s0, s15
 800a7aa:	3790      	adds	r7, #144	; 0x90
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	2101      	movs	r1, #1
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7ff f99e 	bl	8009afe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fc3c 	bl	800b040 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>
  }
 800a7c8:	bf00      	nop
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>:
  return RowXpr(derived(), i);
}

/// This is the const version of row(). */
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
ConstRowXpr row(Index i) const
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
{
  return ConstRowXpr(derived(), i);
 800a7f0:	68b8      	ldr	r0, [r7, #8]
 800a7f2:	f7fa fc62 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 fc2f 	bl	800b060 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>
}
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b082      	sub	sp, #8
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800a814:	6838      	ldr	r0, [r7, #0]
 800a816:	f000 fc4d 	bl	800b0b4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 800a81a:	4603      	mov	r3, r0
 800a81c:	4619      	mov	r1, r3
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fc6b 	bl	800b0fa <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>
}
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800a838:	68b8      	ldr	r0, [r7, #8]
 800a83a:	f7fa fa76 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800a83e:	4603      	mov	r3, r0
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	4619      	mov	r1, r3
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f000 fc6f 	bl	800b128 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>
}
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
  * \sa class CwiseBinaryOp, cwiseAbs2
  */
template<typename OtherDerived>
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE const EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800a852:	b5b0      	push	{r4, r5, r7, lr}
 800a854:	b086      	sub	sp, #24
 800a856:	af00      	add	r7, sp, #0
 800a858:	60f8      	str	r0, [r7, #12]
 800a85a:	60b9      	str	r1, [r7, #8]
 800a85c:	607a      	str	r2, [r7, #4]
{
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800a85e:	68b8      	ldr	r0, [r7, #8]
 800a860:	f000 fc8a 	bl	800b178 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800a864:	4604      	mov	r4, r0
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fc91 	bl	800b18e <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>
 800a86c:	4605      	mov	r5, r0
 800a86e:	f107 0314 	add.w	r3, r7, #20
 800a872:	4618      	mov	r0, r3
 800a874:	f7fa fab8 	bl	8004de8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800a878:	f107 0314 	add.w	r3, r7, #20
 800a87c:	462a      	mov	r2, r5
 800a87e:	4621      	mov	r1, r4
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 fcd7 	bl	800b234 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bdb0      	pop	{r4, r5, r7, pc}

0800a88e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800a88e:	b580      	push	{r7, lr}
 800a890:	b082      	sub	sp, #8
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fd2a 	bl	800b2f0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800a89c:	4603      	mov	r3, r0
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 fd31 	bl	800b306 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>:
  *
  * \sa trace(), prod(), mean()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
DenseBase<Derived>::sum() const
 800a8ae:	b590      	push	{r4, r7, lr}
 800a8b0:	b085      	sub	sp, #20
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
{
  if(SizeAtCompileTime==0 || (SizeAtCompileTime==Dynamic && size()==0))
    return Scalar(0);
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 fd1a 	bl	800b2f0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800a8bc:	4604      	mov	r4, r0
 800a8be:	f107 030c 	add.w	r3, r7, #12
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fa fd87 	bl	80053d6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800a8c8:	f107 030c 	add.w	r3, r7, #12
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f000 fdf4 	bl	800b4bc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800a8d4:	eef0 7a40 	vmov.f32	s15, s0
 800a8d8:	bf00      	nop
}
 800a8da:	eeb0 0a67 	vmov.f32	s0, s15
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd90      	pop	{r4, r7, pc}

0800a8e4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fe21 	bl	800b548 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800a906:	4603      	mov	r3, r0
    }
 800a908:	4618      	mov	r0, r3
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 800a910:	b480      	push	{r7}
 800a912:	af00      	add	r7, sp, #0
 800a914:	2303      	movs	r3, #3
 800a916:	4618      	mov	r0, r3
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 800a920:	b480      	push	{r7}
 800a922:	af00      	add	r7, sp, #0
 800a924:	2303      	movs	r3, #3
 800a926:	4618      	mov	r0, r3
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>:
    static void run(const Derived&, const OtherDerived&)
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
    }
 800a93a:	bf00      	nop
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a946:	b580      	push	{r7, lr}
 800a948:	b082      	sub	sp, #8
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	6039      	str	r1, [r7, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	4618      	mov	r0, r3
 800a956:	f000 fe07 	bl	800b568 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4618      	mov	r0, r3
 800a970:	370c      	adds	r7, #12
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr

0800a97a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
 800a97a:	b480      	push	{r7}
 800a97c:	b083      	sub	sp, #12
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7fb fdea 	bl	8006574 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	3308      	adds	r3, #8
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fb fdea 	bl	8006590 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
	...

0800a9c8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800a9d4:	68b8      	ldr	r0, [r7, #8]
 800a9d6:	f7ff ffdb 	bl	800a990 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>
 800a9da:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800a9dc:	68b8      	ldr	r0, [r7, #8]
 800a9de:	f7ff ffe4 	bl	800a9aa <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>
 800a9e2:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7ff fc8b 	bl	800a302 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d107      	bne.n	800aa04 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7ff fc8e 	bl	800a318 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d001      	beq.n	800aa08 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800aa04:	2301      	movs	r3, #1
 800aa06:	e000      	b.n	800aa0a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d005      	beq.n	800aa1a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	6979      	ldr	r1, [r7, #20]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7ff f923 	bl	8009c60 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff fc70 	bl	800a302 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800aa22:	4602      	mov	r2, r0
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d107      	bne.n	800aa3a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff fc73 	bl	800a318 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800aa32:	4602      	mov	r2, r0
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d006      	beq.n	800aa48 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800aa3a:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800aa3c:	4a05      	ldr	r2, [pc, #20]	; (800aa54 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800aa3e:	f240 21fd 	movw	r1, #765	; 0x2fd
 800aa42:	4805      	ldr	r0, [pc, #20]	; (800aa58 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800aa44:	f013 f8ae 	bl	801dba4 <__assert_func>
}
 800aa48:	bf00      	nop
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	08022084 	.word	0x08022084
 800aa54:	08024430 	.word	0x08024430
 800aa58:	08022198 	.word	0x08022198

0800aa5c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4618      	mov	r0, r3
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr

0800aa72 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800aa72:	b480      	push	{r7}
 800aa74:	b085      	sub	sp, #20
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	60f8      	str	r0, [r7, #12]
 800aa7a:	60b9      	str	r1, [r7, #8]
 800aa7c:	607a      	str	r2, [r7, #4]
 800aa7e:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	68ba      	ldr	r2, [r7, #8]
 800aa84:	601a      	str	r2, [r3, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	605a      	str	r2, [r3, #4]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	609a      	str	r2, [r3, #8]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	69ba      	ldr	r2, [r7, #24]
 800aa96:	60da      	str	r2, [r3, #12]
  }
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3714      	adds	r7, #20
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr

0800aaa6 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b082      	sub	sp, #8
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fd92 	bl	800b5d8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>
  }
 800aab4:	bf00      	nop
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800aad0:	b5b0      	push	{r4, r5, r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7fa fa1a 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800aae0:	4604      	mov	r4, r0
 800aae2:	6838      	ldr	r0, [r7, #0]
 800aae4:	f7fa ff75 	bl	80059d2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 800aae8:	4605      	mov	r5, r0
 800aaea:	f107 030c 	add.w	r3, r7, #12
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fb ff09 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800aaf4:	f107 030c 	add.w	r3, r7, #12
 800aaf8:	461a      	mov	r2, r3
 800aafa:	4629      	mov	r1, r5
 800aafc:	4620      	mov	r0, r4
 800aafe:	f000 fd7b 	bl	800b5f8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7fa fa06 	bl	8004f14 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800ab08:	4603      	mov	r3, r0
    }
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bdb0      	pop	{r4, r5, r7, pc}

0800ab12 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800ab12:	b5b0      	push	{r4, r5, r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fd7c 	bl	800b61a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800ab22:	4604      	mov	r4, r0
 800ab24:	6838      	ldr	r0, [r7, #0]
 800ab26:	f7fa ff5f 	bl	80059e8 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	f107 030c 	add.w	r3, r7, #12
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fb fee8 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800ab36:	f107 030c 	add.w	r3, r7, #12
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f000 fd76 	bl	800b630 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fd68 	bl	800b61a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800ab4a:	4603      	mov	r3, r0
    }
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bdb0      	pop	{r4, r5, r7, pc}

0800ab54 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f000 fd77 	bl	800b652 <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 800ab64:	4603      	mov	r3, r0
 800ab66:	4618      	mov	r0, r3
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ab6e:	b480      	push	{r7}
 800ab70:	b083      	sub	sp, #12
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>:
ConstRowXpr row(Index i) const
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800ab90:	68b8      	ldr	r0, [r7, #8]
 800ab92:	f7fa f8ca 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800ab96:	4603      	mov	r3, r0
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f000 fd6f 	bl	800b680 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>
}
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800abaa:	b580      	push	{r7, lr}
 800abac:	b082      	sub	sp, #8
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
 800abb2:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800abb4:	6838      	ldr	r0, [r7, #0]
 800abb6:	f000 fd8d 	bl	800b6d4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>
 800abba:	4603      	mov	r3, r0
 800abbc:	4619      	mov	r1, r3
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fdab 	bl	800b71a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>
}
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800abd8:	68b8      	ldr	r0, [r7, #8]
 800abda:	f7fa fe16 	bl	800580a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800abde:	4603      	mov	r3, r0
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	4619      	mov	r1, r3
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f000 fdaf 	bl	800b748 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>
}
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800abf2:	b5b0      	push	{r4, r5, r7, lr}
 800abf4:	b086      	sub	sp, #24
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	60f8      	str	r0, [r7, #12]
 800abfa:	60b9      	str	r1, [r7, #8]
 800abfc:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800abfe:	68b8      	ldr	r0, [r7, #8]
 800ac00:	f000 fdd4 	bl	800b7ac <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 800ac04:	4604      	mov	r4, r0
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fddb 	bl	800b7c2 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	f107 0314 	add.w	r3, r7, #20
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fa f8e8 	bl	8004de8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800ac18:	f107 0314 	add.w	r3, r7, #20
 800ac1c:	462a      	mov	r2, r5
 800ac1e:	4621      	mov	r1, r4
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f000 fe21 	bl	800b868 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	3718      	adds	r7, #24
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bdb0      	pop	{r4, r5, r7, pc}

0800ac2e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 fe72 	bl	800b920 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 fe79 	bl	800b936 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>
 800ac44:	4603      	mov	r3, r0
 800ac46:	4618      	mov	r0, r3
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800ac4e:	b590      	push	{r4, r7, lr}
 800ac50:	b085      	sub	sp, #20
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 fe62 	bl	800b920 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	f107 030c 	add.w	r3, r7, #12
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fa fbb7 	bl	80053d6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800ac68:	f107 030c 	add.w	r3, r7, #12
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f000 ff3c 	bl	800baec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800ac74:	eef0 7a40 	vmov.f32	s15, s0
 800ac78:	bf00      	nop
}
 800ac7a:	eeb0 0a67 	vmov.f32	s0, s15
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd90      	pop	{r4, r7, pc}

0800ac84 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	bf00      	nop
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4618      	mov	r0, r3
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	3304      	adds	r3, #4
 800acbc:	4618      	mov	r0, r3
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>:
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4618      	mov	r0, r3
 800acd4:	370c      	adds	r7, #12
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr

0800acde <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800acde:	b580      	push	{r7, lr}
 800ace0:	b082      	sub	sp, #8
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	6039      	str	r1, [r7, #0]
    {
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4618      	mov	r0, r3
 800acec:	f7f9 fcfc 	bl	80046e8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800acf0:	f7f9 fd0a 	bl	8004708 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6839      	ldr	r1, [r7, #0]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f000 ff3d 	bl	800bb78 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800ad08:	b5b0      	push	{r4, r5, r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	689c      	ldr	r4, [r3, #8]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fd f9a8 	bl	8008072 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800ad22:	4605      	mov	r5, r0
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 ff31 	bl	800bb92 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>
 800ad30:	eef0 7a40 	vmov.f32	s15, s0
 800ad34:	edc7 7a03 	vstr	s15, [r7, #12]
 800ad38:	f107 030c 	add.w	r3, r7, #12
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	4629      	mov	r1, r5
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 ff5f 	bl	800bc04 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>
  }
 800ad46:	bf00      	nop
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bdb0      	pop	{r4, r5, r7, pc}

0800ad4e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b082      	sub	sp, #8
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800ad56:	2101      	movs	r1, #1
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff ffd5 	bl	800ad08 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 ff67 	bl	800bc32 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>
  }
 800ad64:	bf00      	nop
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800ad6c:	b5b0      	push	{r4, r5, r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7fa fa68 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	6838      	ldr	r0, [r7, #0]
 800ad80:	f7fb f98e 	bl	80060a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800ad84:	4605      	mov	r5, r0
 800ad86:	f107 030c 	add.w	r3, r7, #12
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fb fdbb 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800ad90:	f107 030c 	add.w	r3, r7, #12
 800ad94:	461a      	mov	r2, r3
 800ad96:	4629      	mov	r1, r5
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f000 ff59 	bl	800bc50 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7fa fa54 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800ada4:	4603      	mov	r3, r0
    }
 800ada6:	4618      	mov	r0, r3
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bdb0      	pop	{r4, r5, r7, pc}

0800adae <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800adae:	b580      	push	{r7, lr}
 800adb0:	b0a4      	sub	sp, #144	; 0x90
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800adba:	68f9      	ldr	r1, [r7, #12]
 800adbc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7ff fd0e 	bl	800a7e4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800adc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800adcc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800add0:	4611      	mov	r1, r2
 800add2:	4618      	mov	r0, r3
 800add4:	f7ff fd19 	bl	800a80a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800addc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 ff45 	bl	800bc72 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 800ade8:	f107 0314 	add.w	r3, r7, #20
 800adec:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800adf0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 ff4f 	bl	800bc98 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 800adfa:	f107 0314 	add.w	r3, r7, #20
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 ff78 	bl	800bcf4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 800ae04:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ae08:	eeb0 0a67 	vmov.f32	s0, s15
 800ae0c:	3790      	adds	r7, #144	; 0x90
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b082      	sub	sp, #8
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7ff f934 	bl	800a08c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 ff80 	bl	800bd2a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 800ae2a:	bf00      	nop
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800ae32:	b480      	push	{r7}
 800ae34:	b083      	sub	sp, #12
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	330c      	adds	r3, #12
 800ae3e:	4618      	mov	r0, r3
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800ae4a:	b480      	push	{r7}
 800ae4c:	b083      	sub	sp, #12
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4618      	mov	r0, r3
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	3304      	adds	r3, #4
 800ae6e:	4618      	mov	r0, r3
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	6039      	str	r1, [r7, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7fb fa58 	bl	800633e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4618      	mov	r0, r3
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>:
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 ff4f 	bl	800bd4a <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>:
    typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
  public:

    typedef typename internal::dense_xpr_base<BlockType>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b082      	sub	sp, #8
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
 800aebe:	6039      	str	r1, [r7, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	683a      	ldr	r2, [r7, #0]
 800aec4:	4611      	mov	r1, r2
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7f9 f8aa 	bl	8004020 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	3310      	adds	r3, #16
 800aed0:	683a      	ldr	r2, [r7, #0]
 800aed2:	6912      	ldr	r2, [r2, #16]
 800aed4:	601a      	str	r2, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4618      	mov	r0, r3
 800aeda:	3708      	adds	r7, #8
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl)
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	683a      	ldr	r2, [r7, #0]
 800aeee:	4611      	mov	r1, r2
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7ff ffe0 	bl	800aeb6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4618      	mov	r0, r3
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Block)
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	4611      	mov	r1, r2
 800af10:	4618      	mov	r0, r3
 800af12:	f7ff ffe5 	bl	800aee0 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4618      	mov	r0, r3
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>:
ConstRowXpr row(Index i) const
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800af2c:	68b8      	ldr	r0, [r7, #8]
 800af2e:	f7fa f824 	bl	8004f7a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800af32:	4603      	mov	r3, r0
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	4619      	mov	r1, r3
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f000 ff1d 	bl	800bd78 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>
}
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Transpose)
 800af46:	b580      	push	{r7, lr}
 800af48:	b082      	sub	sp, #8
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
 800af4e:	6039      	str	r1, [r7, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	4611      	mov	r1, r2
 800af56:	4618      	mov	r0, r3
 800af58:	f7ff ffd2 	bl	800af00 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800af66:	b580      	push	{r7, lr}
 800af68:	b082      	sub	sp, #8
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800af70:	6838      	ldr	r0, [r7, #0]
 800af72:	f000 ff29 	bl	800bdc8 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>
 800af76:	4603      	mov	r3, r0
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 ff47 	bl	800be0e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
}
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800af94:	68b8      	ldr	r0, [r7, #8]
 800af96:	f7f9 fffb 	bl	8004f90 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800af9a:	4603      	mov	r3, r0
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	4619      	mov	r1, r3
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f000 ff47 	bl	800be34 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>
}
 800afa6:	68f8      	ldr	r0, [r7, #12]
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800afae:	b5b0      	push	{r4, r5, r7, lr}
 800afb0:	b086      	sub	sp, #24
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	60f8      	str	r0, [r7, #12]
 800afb6:	60b9      	str	r1, [r7, #8]
 800afb8:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800afba:	68b8      	ldr	r0, [r7, #8]
 800afbc:	f000 ff62 	bl	800be84 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>
 800afc0:	4604      	mov	r4, r0
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 ff69 	bl	800be9a <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>
 800afc8:	4605      	mov	r5, r0
 800afca:	f107 0314 	add.w	r3, r7, #20
 800afce:	4618      	mov	r0, r3
 800afd0:	f7f9 ff0a 	bl	8004de8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800afd4:	f107 0314 	add.w	r3, r7, #20
 800afd8:	462a      	mov	r2, r5
 800afda:	4621      	mov	r1, r4
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f000 ffaf 	bl	800bf40 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>
}
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	3718      	adds	r7, #24
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bdb0      	pop	{r4, r5, r7, pc}

0800afea <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>:
 800afea:	b580      	push	{r7, lr}
 800afec:	b082      	sub	sp, #8
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fffe 	bl	800bff4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800aff8:	4603      	mov	r3, r0
 800affa:	4618      	mov	r0, r3
 800affc:	f001 f805 	bl	800c00a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>
 800b000:	4603      	mov	r3, r0
 800b002:	4618      	mov	r0, r3
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b00a:	b590      	push	{r4, r7, lr}
 800b00c:	b085      	sub	sp, #20
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 ffee 	bl	800bff4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b018:	4604      	mov	r4, r0
 800b01a:	f107 030c 	add.w	r3, r7, #12
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fa f9d9 	bl	80053d6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b024:	f107 030c 	add.w	r3, r7, #12
 800b028:	4619      	mov	r1, r3
 800b02a:	4620      	mov	r0, r4
 800b02c:	f001 f8da 	bl	800c1e4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b030:	eef0 7a40 	vmov.f32	s15, s0
 800b034:	bf00      	nop
}
 800b036:	eeb0 0a67 	vmov.f32	s0, s15
 800b03a:	3714      	adds	r7, #20
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd90      	pop	{r4, r7, pc}

0800b040 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b048:	2201      	movs	r2, #1
 800b04a:	2101      	movs	r1, #1
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7fe fd56 	bl	8009afe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f001 f90c 	bl	800c270 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>
  }
 800b058:	bf00      	nop
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	68b9      	ldr	r1, [r7, #8]
 800b072:	4618      	mov	r0, r3
 800b074:	f001 f90c 	bl	800c290 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	db07      	blt.n	800b08e <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x2e>
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	4618      	mov	r0, r3
 800b082:	f7f9 fc10 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800b086:	4602      	mov	r2, r0
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4293      	cmp	r3, r2
 800b08c:	db05      	blt.n	800b09a <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x3a>
 800b08e:	4b06      	ldr	r3, [pc, #24]	; (800b0a8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x48>)
 800b090:	4a06      	ldr	r2, [pc, #24]	; (800b0ac <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x4c>)
 800b092:	2178      	movs	r1, #120	; 0x78
 800b094:	4806      	ldr	r0, [pc, #24]	; (800b0b0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x50>)
 800b096:	f012 fd85 	bl	801dba4 <__assert_func>
 800b09a:	bf00      	nop
    }
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	08024590 	.word	0x08024590
 800b0ac:	08024638 	.word	0x08024638
 800b0b0:	08024714 	.word	0x08024714

0800b0b4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	370c      	adds	r7, #12
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b082      	sub	sp, #8
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f001 f8ed 	bl	800c2b2 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b082      	sub	sp, #8
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f7ff ffed 	bl	800b0ca <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800b0fa:	b5b0      	push	{r4, r5, r7, lr}
 800b0fc:	b082      	sub	sp, #8
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	6039      	str	r1, [r7, #0]
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f7ff ffec 	bl	800b0e2 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	4614      	mov	r4, r2
 800b110:	461d      	mov	r5, r3
 800b112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b116:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b11a:	e884 0003 	stmia.w	r4, {r0, r1}
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bdb0      	pop	{r4, r5, r7, pc}

0800b128 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	68b9      	ldr	r1, [r7, #8]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f001 f8c4 	bl	800c2c8 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	db07      	blt.n	800b156 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	4618      	mov	r0, r3
 800b14a:	f7f9 fc47 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800b14e:	4602      	mov	r2, r0
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4293      	cmp	r3, r2
 800b154:	db05      	blt.n	800b162 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800b156:	4b05      	ldr	r3, [pc, #20]	; (800b16c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800b158:	4a05      	ldr	r2, [pc, #20]	; (800b170 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800b15a:	2178      	movs	r1, #120	; 0x78
 800b15c:	4805      	ldr	r0, [pc, #20]	; (800b174 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800b15e:	f012 fd21 	bl	801dba4 <__assert_func>
    }
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	08024590 	.word	0x08024590
 800b170:	08024768 	.word	0x08024768
 800b174:	08024714 	.word	0x08024714

0800b178 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>:
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4618      	mov	r0, r3
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>:
 800b18e:	b480      	push	{r7}
 800b190:	b083      	sub	sp, #12
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4618      	mov	r0, r3
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f001 f89c 	bl	800c2ea <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f7ff ffed 	bl	800b1a4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f001 f88e 	bl	800c300 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b082      	sub	sp, #8
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f001 f88c 	bl	800c316 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>
 800b1fe:	4603      	mov	r3, r0
 800b200:	4618      	mov	r0, r3
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>:

    typedef typename Base::CoeffReturnType CoeffReturnType;

    /** \copydoc DenseBase::rows() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	f7fb f913 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800b214:	4603      	mov	r3, r0
 800b216:	4618      	mov	r0, r3
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>:
    /** \copydoc DenseBase::cols() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800b21e:	b580      	push	{r7, lr}
 800b220:	b082      	sub	sp, #8
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	f7fb f910 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b22a:	4603      	mov	r3, r0
 800b22c:	4618      	mov	r0, r3
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800b234:	b5b0      	push	{r4, r5, r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
 800b240:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f7ff ffba 	bl	800b1bc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	4614      	mov	r4, r2
 800b24e:	461d      	mov	r5, r3
 800b250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b254:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b258:	e884 0003 	stmia.w	r4, {r0, r1}
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f103 0218 	add.w	r2, r3, #24
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4614      	mov	r4, r2
 800b266:	461d      	mov	r5, r3
 800b268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b26a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b26c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b270:	e884 0003 	stmia.w	r4, {r0, r1}
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	3330      	adds	r3, #48	; 0x30
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7f9 fe3e 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800b280:	68b8      	ldr	r0, [r7, #8]
 800b282:	f7ff ffa7 	bl	800b1d4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800b286:	4604      	mov	r4, r0
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7ff ffbc 	bl	800b208 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800b290:	4603      	mov	r3, r0
 800b292:	429c      	cmp	r4, r3
 800b294:	d10a      	bne.n	800b2ac <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 800b296:	68b8      	ldr	r0, [r7, #8]
 800b298:	f7ff ffa9 	bl	800b1ee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800b29c:	4604      	mov	r4, r0
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7ff ffbc 	bl	800b21e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	429c      	cmp	r4, r3
 800b2aa:	d005      	beq.n	800b2b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 800b2ac:	4b05      	ldr	r3, [pc, #20]	; (800b2c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800b2ae:	4a06      	ldr	r2, [pc, #24]	; (800b2c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800b2b0:	2174      	movs	r1, #116	; 0x74
 800b2b2:	4806      	ldr	r0, [pc, #24]	; (800b2cc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 800b2b4:	f012 fc76 	bl	801dba4 <__assert_func>
    }
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bdb0      	pop	{r4, r5, r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	0801fa0c 	.word	0x0801fa0c
 800b2c8:	08024844 	.word	0x08024844
 800b2cc:	0801fc70 	.word	0x0801fc70

0800b2d0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f809 	bl	800b2f0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f001 f823 	bl	800c32c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3708      	adds	r7, #8
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800b306:	b580      	push	{r7, lr}
 800b308:	b082      	sub	sp, #8
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4618      	mov	r0, r3
 800b312:	f7ff ff5f 	bl	800b1d4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800b316:	4603      	mov	r3, r0
    }
 800b318:	4618      	mov	r0, r3
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
// but that might complicate template specialization
template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator;

template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator : evaluator_base<Derived>
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f001 f831 	bl	800c390 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4618      	mov	r0, r3
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>:

// TODO: This evaluator does not actually use the child evaluator;
// all action is via the data() as returned by the Block expression.

template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4618      	mov	r0, r3
 800b344:	f7ff ffec 	bl	800b320 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4618      	mov	r0, r3
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b352:	b580      	push	{r7, lr}
 800b354:	b082      	sub	sp, #8
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7ff ffeb 	bl	800b338 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4618      	mov	r0, r3
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<const T>
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4618      	mov	r0, r3
 800b378:	f7ff ffeb 	bl	800b352 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800b386:	b580      	push	{r7, lr}
 800b388:	b082      	sub	sp, #8
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4618      	mov	r0, r3
 800b392:	f7ff ffeb 	bl	800b36c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 ffef 	bl	800c37a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b082      	sub	sp, #8
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7ff ffe8 	bl	800b386 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7ff ffeb 	bl	800b3a6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b082      	sub	sp, #8
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 ffdf 	bl	800c3a6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b082      	sub	sp, #8
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7ff ffec 	bl	800b3da <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4618      	mov	r0, r3
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4618      	mov	r0, r3
 800b418:	f7ff ffeb 	bl	800b3f2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4618      	mov	r0, r3
 800b420:	3708      	adds	r7, #8
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800b426:	b580      	push	{r7, lr}
 800b428:	b082      	sub	sp, #8
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4618      	mov	r0, r3
 800b432:	f7ff ffeb 	bl	800b40c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4618      	mov	r0, r3
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	330c      	adds	r3, #12
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7ff ffea 	bl	800b426 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	3304      	adds	r3, #4
 800b456:	4618      	mov	r0, r3
 800b458:	f7ff ffb2 	bl	800b3c0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800b466:	b580      	push	{r7, lr}
 800b468:	b082      	sub	sp, #8
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4618      	mov	r0, r3
 800b472:	f7ff ffe5 	bl	800b440 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 ff74 	bl	800c364 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4618      	mov	r0, r3
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800b486:	b580      	push	{r7, lr}
 800b488:	b082      	sub	sp, #8
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4618      	mov	r0, r3
 800b492:	f7ff ffe8 	bl	800b466 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4618      	mov	r0, r3
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7ff ffeb 	bl	800b486 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
	...

0800b4bc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	ed2d 8b02 	vpush	{d8}
 800b4c2:	b088      	sub	sp, #32
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f7ff f9df 	bl	800a88e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	dd05      	ble.n	800b4e2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7ff fefa 	bl	800b2d0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	dc06      	bgt.n	800b4f0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800b4e2:	4b16      	ldr	r3, [pc, #88]	; (800b53c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800b4e4:	4a16      	ldr	r2, [pc, #88]	; (800b540 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800b4e6:	f240 119b 	movw	r1, #411	; 0x19b
 800b4ea:	4816      	ldr	r0, [pc, #88]	; (800b544 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800b4ec:	f012 fb5a 	bl	801dba4 <__assert_func>
 800b4f0:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f7ff fefc 	bl	800b2f0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	f107 030c 	add.w	r3, r7, #12
 800b4fe:	4611      	mov	r1, r2
 800b500:	4618      	mov	r0, r3
 800b502:	f000 ff20 	bl	800c346 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f7ff fef2 	bl	800b2f0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b50c:	4602      	mov	r2, r0
 800b50e:	f107 030c 	add.w	r3, r7, #12
 800b512:	6839      	ldr	r1, [r7, #0]
 800b514:	4618      	mov	r0, r3
 800b516:	f000 ff51 	bl	800c3bc <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800b51a:	eeb0 8a40 	vmov.f32	s16, s0
 800b51e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800b520:	f107 030c 	add.w	r3, r7, #12
 800b524:	4618      	mov	r0, r3
 800b526:	f7ff ffbb 	bl	800b4a0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800b52a:	eef0 7a48 	vmov.f32	s15, s16
}
 800b52e:	eeb0 0a67 	vmov.f32	s0, s15
 800b532:	3720      	adds	r7, #32
 800b534:	46bd      	mov	sp, r7
 800b536:	ecbd 8b02 	vpop	{d8}
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	08024a8c 	.word	0x08024a8c
 800b540:	08024ad0 	.word	0x08024ad0
 800b544:	08024c98 	.word	0x08024c98

0800b548 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f7fe feb4 	bl	800a2be <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800b556:	4603      	mov	r3, r0
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe fedd 	bl	800a318 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b55e:	4603      	mov	r3, r0
 800b560:	4618      	mov	r0, r3
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800b568:	b590      	push	{r4, r7, lr}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 ff4a 	bl	800c40c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>
 800b578:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800b57a:	6838      	ldr	r0, [r7, #0]
 800b57c:	f000 ff2f 	bl	800c3de <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800b580:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800b582:	4619      	mov	r1, r3
 800b584:	4620      	mov	r0, r4
 800b586:	f000 ff4c 	bl	800c422 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>
      m_rhs(xpr.rhs()),
 800b58a:	6838      	ldr	r0, [r7, #0]
 800b58c:	f000 ff32 	bl	800c3f4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>
 800b590:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	3324      	adds	r3, #36	; 0x24
 800b596:	6812      	ldr	r2, [r2, #0]
 800b598:	601a      	str	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800b59e:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7fb fe16 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	3324      	adds	r3, #36	; 0x24
      m_innerDim(xpr.lhs().cols())
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	4610      	mov	r0, r2
 800b5b6:	f000 ff49 	bl	800c44c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
 800b5ba:	6838      	ldr	r0, [r7, #0]
 800b5bc:	f000 ff0f 	bl	800c3de <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7f9 feaf 	bl	8005326 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd90      	pop	{r4, r7, pc}

0800b5d8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 ff40 	bl	800c46a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 ff56 	bl	800c49c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>
  }
 800b5f0:	bf00      	nop
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b086      	sub	sp, #24
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	68b9      	ldr	r1, [r7, #8]
 800b60c:	6978      	ldr	r0, [r7, #20]
 800b60e:	f000 ff55 	bl	800c4bc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800b612:	bf00      	nop
 800b614:	3718      	adds	r7, #24
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800b61a:	b480      	push	{r7}
 800b61c:	b083      	sub	sp, #12
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4618      	mov	r0, r3
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	68b9      	ldr	r1, [r7, #8]
 800b644:	6978      	ldr	r0, [r7, #20]
 800b646:	f000 ff73 	bl	800c530 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800b64a:	bf00      	nop
 800b64c:	3718      	adds	r7, #24
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800b652:	b480      	push	{r7}
 800b654:	b083      	sub	sp, #12
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4618      	mov	r0, r3
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 ff9c 	bl	800c5ae <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>
 800b676:	4603      	mov	r3, r0
 800b678:	4618      	mov	r0, r3
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	68b9      	ldr	r1, [r7, #8]
 800b692:	4618      	mov	r0, r3
 800b694:	f000 ff97 	bl	800c5c6 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	db07      	blt.n	800b6ae <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7f9 f9a6 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	db05      	blt.n	800b6ba <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 800b6ae:	4b06      	ldr	r3, [pc, #24]	; (800b6c8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 800b6b0:	4a06      	ldr	r2, [pc, #24]	; (800b6cc <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 800b6b2:	2178      	movs	r1, #120	; 0x78
 800b6b4:	4806      	ldr	r0, [pc, #24]	; (800b6d0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x50>)
 800b6b6:	f012 fa75 	bl	801dba4 <__assert_func>
 800b6ba:	bf00      	nop
    }
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	08024590 	.word	0x08024590
 800b6cc:	08024cec 	.word	0x08024cec
 800b6d0:	08024714 	.word	0x08024714

0800b6d4 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b082      	sub	sp, #8
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 ff78 	bl	800c5e8 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800b702:	b580      	push	{r7, lr}
 800b704:	b082      	sub	sp, #8
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff ffed 	bl	800b6ea <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4618      	mov	r0, r3
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800b71a:	b5b0      	push	{r4, r5, r7, lr}
 800b71c:	b082      	sub	sp, #8
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
 800b722:	6039      	str	r1, [r7, #0]
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f7ff ffec 	bl	800b702 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	4614      	mov	r4, r2
 800b730:	461d      	mov	r5, r3
 800b732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b736:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b73a:	e884 0003 	stmia.w	r4, {r0, r1}
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4618      	mov	r0, r3
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bdb0      	pop	{r4, r5, r7, pc}

0800b748 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	68b9      	ldr	r1, [r7, #8]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f000 ff4f 	bl	800c5fe <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	db0f      	blt.n	800b786 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x3e>
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fa f88c 	bl	8005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800b76e:	4602      	mov	r2, r0
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4293      	cmp	r3, r2
 800b774:	db0d      	blt.n	800b792 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	4618      	mov	r0, r3
 800b77a:	f7fa f88f 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800b77e:	4602      	mov	r2, r0
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4293      	cmp	r3, r2
 800b784:	db05      	blt.n	800b792 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800b786:	4b06      	ldr	r3, [pc, #24]	; (800b7a0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x58>)
 800b788:	4a06      	ldr	r2, [pc, #24]	; (800b7a4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x5c>)
 800b78a:	2178      	movs	r1, #120	; 0x78
 800b78c:	4806      	ldr	r0, [pc, #24]	; (800b7a8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x60>)
 800b78e:	f012 fa09 	bl	801dba4 <__assert_func>
 800b792:	bf00      	nop
    }
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	4618      	mov	r0, r3
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	08024590 	.word	0x08024590
 800b7a4:	08024dc8 	.word	0x08024dc8
 800b7a8:	08024714 	.word	0x08024714

0800b7ac <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>:
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	370c      	adds	r7, #12
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>:
 800b7c2:	b480      	push	{r7}
 800b7c4:	b083      	sub	sp, #12
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 ff1d 	bl	800c620 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7ff ffed 	bl	800b7d8 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4618      	mov	r0, r3
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4618      	mov	r0, r3
 800b814:	f000 ff0f 	bl	800c636 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>
 800b818:	4603      	mov	r3, r0
 800b81a:	4618      	mov	r0, r3
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800b822:	b580      	push	{r7, lr}
 800b824:	b082      	sub	sp, #8
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 ff0d 	bl	800c64c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>
 800b832:	4603      	mov	r3, r0
 800b834:	4618      	mov	r0, r3
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	f7fa fe01 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b848:	4603      	mov	r3, r0
 800b84a:	4618      	mov	r0, r3
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800b852:	b580      	push	{r7, lr}
 800b854:	b082      	sub	sp, #8
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	f7fa fdf6 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b85e:	4603      	mov	r3, r0
 800b860:	4618      	mov	r0, r3
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800b868:	b5b0      	push	{r4, r5, r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
 800b874:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f7ff ffba 	bl	800b7f0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	4614      	mov	r4, r2
 800b882:	461d      	mov	r5, r3
 800b884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b888:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b88c:	e884 0003 	stmia.w	r4, {r0, r1}
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f103 0218 	add.w	r2, r3, #24
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4614      	mov	r4, r2
 800b89a:	461d      	mov	r5, r3
 800b89c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b89e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8a0:	682b      	ldr	r3, [r5, #0]
 800b8a2:	6023      	str	r3, [r4, #0]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	332c      	adds	r3, #44	; 0x2c
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7f9 fb26 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800b8b0:	68b8      	ldr	r0, [r7, #8]
 800b8b2:	f7ff ffa9 	bl	800b808 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7ff ffbe 	bl	800b83c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	429c      	cmp	r4, r3
 800b8c4:	d10a      	bne.n	800b8dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x74>
 800b8c6:	68b8      	ldr	r0, [r7, #8]
 800b8c8:	f7ff ffab 	bl	800b822 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7ff ffbe 	bl	800b852 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	429c      	cmp	r4, r3
 800b8da:	d005      	beq.n	800b8e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x80>
 800b8dc:	4b05      	ldr	r3, [pc, #20]	; (800b8f4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x8c>)
 800b8de:	4a06      	ldr	r2, [pc, #24]	; (800b8f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800b8e0:	2174      	movs	r1, #116	; 0x74
 800b8e2:	4806      	ldr	r0, [pc, #24]	; (800b8fc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800b8e4:	f012 f95e 	bl	801dba4 <__assert_func>
    }
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bdb0      	pop	{r4, r5, r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	0801fa0c 	.word	0x0801fa0c
 800b8f8:	08024ea4 	.word	0x08024ea4
 800b8fc:	0801fc70 	.word	0x0801fc70

0800b900 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f809 	bl	800b920 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b90e:	4603      	mov	r3, r0
 800b910:	4618      	mov	r0, r3
 800b912:	f000 fea6 	bl	800c662 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>
 800b916:	4603      	mov	r3, r0
 800b918:	4618      	mov	r0, r3
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4618      	mov	r0, r3
 800b92c:	370c      	adds	r7, #12
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr

0800b936 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800b936:	b580      	push	{r7, lr}
 800b938:	b082      	sub	sp, #8
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	4618      	mov	r0, r3
 800b942:	f7ff ff61 	bl	800b808 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800b946:	4603      	mov	r3, r0
    }
 800b948:	4618      	mov	r0, r3
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 feb4 	bl	800c6c6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	4618      	mov	r0, r3
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4618      	mov	r0, r3
 800b974:	f7ff ffec 	bl	800b950 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4618      	mov	r0, r3
 800b97c:	3708      	adds	r7, #8
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b982:	b580      	push	{r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7ff ffeb 	bl	800b968 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4618      	mov	r0, r3
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7ff ffeb 	bl	800b982 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7ff ffeb 	bl	800b99c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 fe72 	bl	800c6b0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b082      	sub	sp, #8
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7ff ffe8 	bl	800b9b6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7ff ffeb 	bl	800b9d6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4618      	mov	r0, r3
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b082      	sub	sp, #8
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 fe62 	bl	800c6dc <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b082      	sub	sp, #8
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7ff ffec 	bl	800ba0a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4618      	mov	r0, r3
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7ff ffeb 	bl	800ba22 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b082      	sub	sp, #8
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7ff ffeb 	bl	800ba3c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	330c      	adds	r3, #12
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7ff ffea 	bl	800ba56 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	3304      	adds	r3, #4
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7ff ffb2 	bl	800b9f0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b082      	sub	sp, #8
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7ff ffe5 	bl	800ba70 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 fdf7 	bl	800c69a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4618      	mov	r0, r3
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b082      	sub	sp, #8
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7ff ffe8 	bl	800ba96 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4618      	mov	r0, r3
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4618      	mov	r0, r3
 800badc:	f7ff ffeb 	bl	800bab6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4618      	mov	r0, r3
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
	...

0800baec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800baec:	b580      	push	{r7, lr}
 800baee:	ed2d 8b02 	vpush	{d8}
 800baf2:	b088      	sub	sp, #32
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f7ff f897 	bl	800ac2e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	dd05      	ble.n	800bb12 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7ff fefa 	bl	800b900 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	dc06      	bgt.n	800bb20 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800bb12:	4b16      	ldr	r3, [pc, #88]	; (800bb6c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800bb14:	4a16      	ldr	r2, [pc, #88]	; (800bb70 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800bb16:	f240 119b 	movw	r1, #411	; 0x19b
 800bb1a:	4816      	ldr	r0, [pc, #88]	; (800bb74 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800bb1c:	f012 f842 	bl	801dba4 <__assert_func>
 800bb20:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7ff fefc 	bl	800b920 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	f107 030c 	add.w	r3, r7, #12
 800bb2e:	4611      	mov	r1, r2
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 fda3 	bl	800c67c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7ff fef2 	bl	800b920 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	f107 030c 	add.w	r3, r7, #12
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f000 fdd4 	bl	800c6f2 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800bb4a:	eeb0 8a40 	vmov.f32	s16, s0
 800bb4e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bb50:	f107 030c 	add.w	r3, r7, #12
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7ff ffbb 	bl	800bad0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bb5a:	eef0 7a48 	vmov.f32	s15, s16
}
 800bb5e:	eeb0 0a67 	vmov.f32	s0, s15
 800bb62:	3720      	adds	r7, #32
 800bb64:	46bd      	mov	sp, r7
 800bb66:	ecbd 8b02 	vpop	{d8}
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	08024a8c 	.word	0x08024a8c
 800bb70:	080250ec 	.word	0x080250ec
 800bb74:	08024c98 	.word	0x08024c98

0800bb78 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800bb82:	6839      	ldr	r1, [r7, #0]
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 fdc5 	bl	800c714 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800bb8a:	bf00      	nop
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b0a2      	sub	sp, #136	; 0x88
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800bba2:	2300      	movs	r3, #0
 800bba4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6819      	ldr	r1, [r3, #0]
 800bbac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800bbb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fe ffe5 	bl	800ab84 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800bbba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bbbe:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800bbc2:	4611      	mov	r1, r2
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7fe fff0 	bl	800abaa <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	1d19      	adds	r1, r3, #4
 800bbce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7fe fff9 	bl	800abcc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800bbda:	f107 030c 	add.w	r3, r7, #12
 800bbde:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800bbe2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7ff f803 	bl	800abf2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800bbec:	f107 030c 	add.w	r3, r7, #12
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7ff f82c 	bl	800ac4e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800bbf6:	eef0 7a40 	vmov.f32	s15, s0
  }
 800bbfa:	eeb0 0a67 	vmov.f32	s0, s15
 800bbfe:	3788      	adds	r7, #136	; 0x88
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	ed93 7a00 	vldr	s14, [r3]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	edd3 7a00 	vldr	s15, [r3]
 800bc1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	edc3 7a00 	vstr	s15, [r3]
 800bc26:	bf00      	nop
 800bc28:	3714      	adds	r7, #20
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr

0800bc32 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b082      	sub	sp, #8
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800bc3a:	2102      	movs	r1, #2
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f7ff f863 	bl	800ad08 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fd87 	bl	800c756 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>
  }
 800bc48:	bf00      	nop
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	68b9      	ldr	r1, [r7, #8]
 800bc64:	6978      	ldr	r0, [r7, #20]
 800bc66:	f000 fd80 	bl	800c76a <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800bc6a:	bf00      	nop
 800bc6c:	3718      	adds	r7, #24
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b084      	sub	sp, #16
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	60f8      	str	r0, [r7, #12]
 800bc7a:	60b9      	str	r1, [r7, #8]
 800bc7c:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800bc7e:	68b8      	ldr	r0, [r7, #8]
 800bc80:	f7f9 fa1b 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800bc84:	4603      	mov	r3, r0
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f000 fd98 	bl	800c7c0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>
}
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800bc98:	b5b0      	push	{r4, r5, r7, lr}
 800bc9a:	b086      	sub	sp, #24
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800bca4:	68b8      	ldr	r0, [r7, #8]
 800bca6:	f7ff fa67 	bl	800b178 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800bcaa:	4604      	mov	r4, r0
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 fdaf 	bl	800c810 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	f107 0314 	add.w	r3, r7, #20
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7f9 f895 	bl	8004de8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800bcbe:	f107 0314 	add.w	r3, r7, #20
 800bcc2:	462a      	mov	r2, r5
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f000 fddc 	bl	800c884 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>
}
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	3718      	adds	r7, #24
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bdb0      	pop	{r4, r5, r7, pc}

0800bcd4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 fe2f 	bl	800c940 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800bce2:	4603      	mov	r3, r0
 800bce4:	4618      	mov	r0, r3
 800bce6:	f000 fe36 	bl	800c956 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>
 800bcea:	4603      	mov	r3, r0
 800bcec:	4618      	mov	r0, r3
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800bcf4:	b590      	push	{r4, r7, lr}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 fe1f 	bl	800c940 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800bd02:	4604      	mov	r4, r0
 800bd04:	f107 030c 	add.w	r3, r7, #12
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7f9 fb64 	bl	80053d6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800bd0e:	f107 030c 	add.w	r3, r7, #12
 800bd12:	4619      	mov	r1, r3
 800bd14:	4620      	mov	r0, r4
 800bd16:	f000 fe9b 	bl	800ca50 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800bd1a:	eef0 7a40 	vmov.f32	s15, s0
 800bd1e:	bf00      	nop
}
 800bd20:	eeb0 0a67 	vmov.f32	s0, s15
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd90      	pop	{r4, r7, pc}

0800bd2a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b082      	sub	sp, #8
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800bd32:	2201      	movs	r2, #1
 800bd34:	2101      	movs	r1, #1
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7fe f9a8 	bl	800a08c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 fecd 	bl	800cadc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 800bd42:	bf00      	nop
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)
 800bd4a:	b590      	push	{r4, r7, lr}
 800bd4c:	b083      	sub	sp, #12
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
 800bd52:	6039      	str	r1, [r7, #0]
    : m_functor(n.functor()), m_wrapper()
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fedd 	bl	800cb14 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800bd5a:	687c      	ldr	r4, [r7, #4]
 800bd5c:	6838      	ldr	r0, [r7, #0]
 800bd5e:	f000 fecd 	bl	800cafc <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 800bd62:	4603      	mov	r3, r0
 800bd64:	4619      	mov	r1, r3
 800bd66:	4620      	mov	r0, r4
 800bd68:	f7f9 f8b8 	bl	8004edc <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
  }
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	370c      	adds	r7, #12
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd90      	pop	{r4, r7, pc}
	...

0800bd78 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	68b9      	ldr	r1, [r7, #8]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 fecd 	bl	800cb2a <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>
      eigen_assert( (i>=0) && (
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	db06      	blt.n	800bda4 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x2c>
 800bd96:	68b8      	ldr	r0, [r7, #8]
 800bd98:	f7fb fe6d 	bl	8007a76 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4293      	cmp	r3, r2
 800bda2:	db05      	blt.n	800bdb0 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x38>
 800bda4:	4b05      	ldr	r3, [pc, #20]	; (800bdbc <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x44>)
 800bda6:	4a06      	ldr	r2, [pc, #24]	; (800bdc0 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x48>)
 800bda8:	2178      	movs	r1, #120	; 0x78
 800bdaa:	4806      	ldr	r0, [pc, #24]	; (800bdc4 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x4c>)
 800bdac:	f011 fefa 	bl	801dba4 <__assert_func>
 800bdb0:	bf00      	nop
    }
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	08024590 	.word	0x08024590
 800bdc0:	080252b4 	.word	0x080252b4
 800bdc4:	08024714 	.word	0x08024714

0800bdc8 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	370c      	adds	r7, #12
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr

0800bdde <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b082      	sub	sp, #8
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 feb0 	bl	800cb4c <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b082      	sub	sp, #8
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7ff ffed 	bl	800bdde <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4618      	mov	r0, r3
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800be0e:	b580      	push	{r7, lr}
 800be10:	b082      	sub	sp, #8
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	6039      	str	r1, [r7, #0]
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7ff ffec 	bl	800bdf6 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	4618      	mov	r0, r3
 800be24:	f7ff f86c 	bl	800af00 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4618      	mov	r0, r3
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
	...

0800be34 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	68b9      	ldr	r1, [r7, #8]
 800be46:	4618      	mov	r0, r3
 800be48:	f000 fe8b 	bl	800cb62 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	db06      	blt.n	800be60 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x2c>
 800be52:	68b8      	ldr	r0, [r7, #8]
 800be54:	f7fb fe1d 	bl	8007a92 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800be58:	4602      	mov	r2, r0
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4293      	cmp	r3, r2
 800be5e:	db05      	blt.n	800be6c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x38>
 800be60:	4b05      	ldr	r3, [pc, #20]	; (800be78 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x44>)
 800be62:	4a06      	ldr	r2, [pc, #24]	; (800be7c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x48>)
 800be64:	2178      	movs	r1, #120	; 0x78
 800be66:	4806      	ldr	r0, [pc, #24]	; (800be80 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x4c>)
 800be68:	f011 fe9c 	bl	801dba4 <__assert_func>
    }
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	08024590 	.word	0x08024590
 800be7c:	0802544c 	.word	0x0802544c
 800be80:	08024714 	.word	0x08024714

0800be84 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>:
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4618      	mov	r0, r3
 800be90:	370c      	adds	r7, #12
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr

0800be9a <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>:
 800be9a:	b480      	push	{r7}
 800be9c:	b083      	sub	sp, #12
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4618      	mov	r0, r3
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 fe63 	bl	800cb84 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4618      	mov	r0, r3
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f7ff ffed 	bl	800beb0 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4618      	mov	r0, r3
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4618      	mov	r0, r3
 800beec:	f000 fe55 	bl	800cb9a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>
 800bef0:	4603      	mov	r3, r0
 800bef2:	4618      	mov	r0, r3
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800befa:	b580      	push	{r7, lr}
 800befc:	b082      	sub	sp, #8
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4618      	mov	r0, r3
 800bf06:	f000 fe53 	bl	800cbb0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	f7fa fa95 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bf20:	4603      	mov	r3, r0
 800bf22:	4618      	mov	r0, r3
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b082      	sub	sp, #8
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	f7fa fa8a 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bf36:	4603      	mov	r3, r0
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800bf40:	b5b0      	push	{r4, r5, r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
 800bf4c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f7ff ffba 	bl	800bec8 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	3304      	adds	r3, #4
 800bf58:	68b9      	ldr	r1, [r7, #8]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fe fff3 	bl	800af46 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f103 021c 	add.w	r2, r3, #28
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4614      	mov	r4, r2
 800bf6a:	461d      	mov	r5, r3
 800bf6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf70:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bf74:	e884 0003 	stmia.w	r4, {r0, r1}
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	3334      	adds	r3, #52	; 0x34
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7f8 ffbc 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800bf84:	68b8      	ldr	r0, [r7, #8]
 800bf86:	f7ff ffab 	bl	800bee0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7ff ffc0 	bl	800bf14 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>
 800bf94:	4603      	mov	r3, r0
 800bf96:	429c      	cmp	r4, r3
 800bf98:	d10a      	bne.n	800bfb0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x70>
 800bf9a:	68b8      	ldr	r0, [r7, #8]
 800bf9c:	f7ff ffad 	bl	800befa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7ff ffc0 	bl	800bf2a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	429c      	cmp	r4, r3
 800bfae:	d005      	beq.n	800bfbc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x7c>
 800bfb0:	4b05      	ldr	r3, [pc, #20]	; (800bfc8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x88>)
 800bfb2:	4a06      	ldr	r2, [pc, #24]	; (800bfcc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x8c>)
 800bfb4:	2174      	movs	r1, #116	; 0x74
 800bfb6:	4806      	ldr	r0, [pc, #24]	; (800bfd0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x90>)
 800bfb8:	f011 fdf4 	bl	801dba4 <__assert_func>
    }
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bdb0      	pop	{r4, r5, r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	0801fa0c 	.word	0x0801fa0c
 800bfcc:	0802553c 	.word	0x0802553c
 800bfd0:	0801fc70 	.word	0x0801fc70

0800bfd4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 f809 	bl	800bff4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f000 fdee 	bl	800cbc6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>
 800bfea:	4603      	mov	r3, r0
 800bfec:	4618      	mov	r0, r3
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4618      	mov	r0, r3
 800c000:	370c      	adds	r7, #12
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr

0800c00a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b082      	sub	sp, #8
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	3304      	adds	r3, #4
 800c016:	4618      	mov	r0, r3
 800c018:	f7ff ff62 	bl	800bee0 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c01c:	4603      	mov	r3, r0
    }
 800c01e:	4618      	mov	r0, r3
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<const T>
 800c026:	b580      	push	{r7, lr}
 800c028:	b082      	sub	sp, #8
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4618      	mov	r0, r3
 800c032:	f7fc fc30 	bl	8008896 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4618      	mov	r0, r3
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>, IndexBased>
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7ff ffeb 	bl	800c026 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 fdeb 	bl	800cc2c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4618      	mov	r0, r3
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /*HasDirectAccess*/ false>
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7ff ffe8 	bl	800c040 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	4618      	mov	r0, r3
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b082      	sub	sp, #8
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4618      	mov	r0, r3
 800c086:	f7ff ffeb 	bl	800c060 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4618      	mov	r0, r3
 800c08e:	3708      	adds	r7, #8
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7ff ffeb 	bl	800c07a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b082      	sub	sp, #8
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7ff ffeb 	bl	800c094 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 fda9 	bl	800cc16 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3708      	adds	r7, #8
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7ff ffe8 	bl	800c0ae <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7ff ffeb 	bl	800c0ce <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c102:	b580      	push	{r7, lr}
 800c104:	b082      	sub	sp, #8
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 fd99 	bl	800cc42 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4618      	mov	r0, r3
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b082      	sub	sp, #8
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4618      	mov	r0, r3
 800c126:	f7ff ffec 	bl	800c102 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4618      	mov	r0, r3
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4618      	mov	r0, r3
 800c140:	f7ff ffeb 	bl	800c11a <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4618      	mov	r0, r3
 800c148:	3708      	adds	r7, #8
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c14e:	b580      	push	{r7, lr}
 800c150:	b082      	sub	sp, #8
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4618      	mov	r0, r3
 800c15a:	f7ff ffeb 	bl	800c134 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4618      	mov	r0, r3
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>:
  struct Data
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	3320      	adds	r3, #32
 800c174:	4618      	mov	r0, r3
 800c176:	f7ff ffea 	bl	800c14e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	3304      	adds	r3, #4
 800c17e:	4618      	mov	r0, r3
 800c180:	f7ff ffb2 	bl	800c0e8 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4618      	mov	r0, r3
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c18e:	b580      	push	{r7, lr}
 800c190:	b082      	sub	sp, #8
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4618      	mov	r0, r3
 800c19a:	f7ff ffe5 	bl	800c168 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 fd2e 	bl	800cc00 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b082      	sub	sp, #8
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7ff ffe8 	bl	800c18e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7ff ffeb 	bl	800c1ae <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
	...

0800c1e4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	ed2d 8b02 	vpush	{d8}
 800c1ea:	b08c      	sub	sp, #48	; 0x30
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7fe fef9 	bl	800afea <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	dd05      	ble.n	800c20a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7ff fee8 	bl	800bfd4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	dc06      	bgt.n	800c218 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c20a:	4b16      	ldr	r3, [pc, #88]	; (800c264 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c20c:	4a16      	ldr	r2, [pc, #88]	; (800c268 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c20e:	f240 119b 	movw	r1, #411	; 0x19b
 800c212:	4816      	ldr	r0, [pc, #88]	; (800c26c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c214:	f011 fcc6 	bl	801dba4 <__assert_func>
 800c218:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f7ff feea 	bl	800bff4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c220:	4602      	mov	r2, r0
 800c222:	f107 0308 	add.w	r3, r7, #8
 800c226:	4611      	mov	r1, r2
 800c228:	4618      	mov	r0, r3
 800c22a:	f000 fcda 	bl	800cbe2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7ff fee0 	bl	800bff4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c234:	4602      	mov	r2, r0
 800c236:	f107 0308 	add.w	r3, r7, #8
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f000 fd0b 	bl	800cc58 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>
 800c242:	eeb0 8a40 	vmov.f32	s16, s0
 800c246:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c248:	f107 0308 	add.w	r3, r7, #8
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7ff ffbb 	bl	800c1c8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c252:	eef0 7a48 	vmov.f32	s15, s16
}
 800c256:	eeb0 0a67 	vmov.f32	s0, s15
 800c25a:	3730      	adds	r7, #48	; 0x30
 800c25c:	46bd      	mov	sp, r7
 800c25e:	ecbd 8b02 	vpop	{d8}
 800c262:	bd80      	pop	{r7, pc}
 800c264:	08024a8c 	.word	0x08024a8c
 800c268:	08025924 	.word	0x08025924
 800c26c:	08024c98 	.word	0x08024c98

0800c270 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c278:	2202      	movs	r2, #2
 800c27a:	2101      	movs	r1, #1
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7fd fc3e 	bl	8009afe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fcf9 	bl	800cc7a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>
  }
 800c288:	bf00      	nop
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	68b9      	ldr	r1, [r7, #8]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 fcf9 	bl	800cc9a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c2b2:	b480      	push	{r7}
 800c2b4:	b083      	sub	sp, #12
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
    }
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	68b9      	ldr	r1, [r7, #8]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 fd13 	bl	800cd06 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c2ea:	b480      	push	{r7}
 800c2ec:	b083      	sub	sp, #12
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
    }
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>:
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	f7fa f897 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800c30c:	4603      	mov	r3, r0
 800c30e:	4618      	mov	r0, r3
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c316:	b580      	push	{r7, lr}
 800c318:	b082      	sub	sp, #8
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
 800c31e:	f7fa f894 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c322:	4603      	mov	r3, r0
 800c324:	4618      	mov	r0, r3
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4618      	mov	r0, r3
 800c338:	f7fe ff59 	bl	800b1ee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800c33c:	4603      	mov	r3, r0
    }
 800c33e:	4618      	mov	r0, r3
 800c340:	3708      	adds	r7, #8
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800c346:	b580      	push	{r7, lr}
 800c348:	b082      	sub	sp, #8
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
 800c34e:	6039      	str	r1, [r7, #0]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	4618      	mov	r0, r3
 800c356:	f000 fd0c 	bl	800cd72 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4618      	mov	r0, r3
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4618      	mov	r0, r3
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
 800c37a:	b480      	push	{r7}
 800c37c:	b083      	sub	sp, #12
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4618      	mov	r0, r3
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4618      	mov	r0, r3
 800c39c:	370c      	adds	r7, #12
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr

0800c3a6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
 800c3a6:	b480      	push	{r7}
 800c3a8:	b083      	sub	sp, #12
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800c3c8:	68b9      	ldr	r1, [r7, #8]
 800c3ca:	68f8      	ldr	r0, [r7, #12]
 800c3cc:	f000 fce0 	bl	800cd90 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800c3d0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c3d4:	eeb0 0a67 	vmov.f32	s0, s15
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800c3de:	b480      	push	{r7}
 800c3e0:	b083      	sub	sp, #12
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3308      	adds	r3, #8
 800c400:	4618      	mov	r0, r3
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4618      	mov	r0, r3
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800c422:	b580      	push	{r7, lr}
 800c424:	b082      	sub	sp, #8
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	6039      	str	r1, [r7, #0]
    {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4618      	mov	r0, r3
 800c430:	f7f8 f937 	bl	80046a2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800c434:	f7f8 f945 	bl	80046c2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f000 fccb 	bl	800cdd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>
    }
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 fcc9 	bl	800cdf2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4618      	mov	r0, r3
 800c464:	3708      	adds	r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b086      	sub	sp, #24
 800c46e:	af00      	add	r7, sp, #0
 800c470:	60f8      	str	r0, [r7, #12]
 800c472:	60b9      	str	r1, [r7, #8]
 800c474:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800c476:	6879      	ldr	r1, [r7, #4]
 800c478:	68b8      	ldr	r0, [r7, #8]
 800c47a:	f000 fcd0 	bl	800ce1e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800c47e:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800c480:	6879      	ldr	r1, [r7, #4]
 800c482:	68b8      	ldr	r0, [r7, #8]
 800c484:	f000 fcd7 	bl	800ce36 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800c488:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	6979      	ldr	r1, [r7, #20]
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f000 fcdd 	bl	800ce4e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800c494:	bf00      	nop
 800c496:	3718      	adds	r7, #24
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f7ff ffde 	bl	800c46a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 fcf3 	bl	800ce9a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>
  }
 800c4b4:	bf00      	nop
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800c4bc:	b590      	push	{r4, r7, lr}
 800c4be:	b087      	sub	sp, #28
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800c4c8:	68b8      	ldr	r0, [r7, #8]
 800c4ca:	f7fb fc65 	bl	8007d98 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800c4ce:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800c4d0:	68b8      	ldr	r0, [r7, #8]
 800c4d2:	f7f9 fab8 	bl	8005a46 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800c4d6:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7f8 fa89 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d107      	bne.n	800c4f8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x3c>
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7f8 fa76 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d001      	beq.n	800c4fc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x40>
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e000      	b.n	800c4fe <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x42>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d005      	beq.n	800c50e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x52>
      dst.resize(dstRows, dstCols);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	6979      	ldr	r1, [r7, #20]
 800c508:	4618      	mov	r0, r3
 800c50a:	f7fb f97d 	bl	8007808 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800c50e:	68b8      	ldr	r0, [r7, #8]
 800c510:	f000 fcd3 	bl	800ceba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>
 800c514:	4604      	mov	r4, r0
 800c516:	68b8      	ldr	r0, [r7, #8]
 800c518:	f000 fcdb 	bl	800ced2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>
 800c51c:	4603      	mov	r3, r0
 800c51e:	461a      	mov	r2, r3
 800c520:	4621      	mov	r1, r4
 800c522:	68f8      	ldr	r0, [r7, #12]
 800c524:	f000 fce1 	bl	800ceea <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>
  }
 800c528:	bf00      	nop
 800c52a:	371c      	adds	r7, #28
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd90      	pop	{r4, r7, pc}

0800c530 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename XprType::Scalar> &)
 800c530:	b580      	push	{r7, lr}
 800c532:	b088      	sub	sp, #32
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800c53c:	68b8      	ldr	r0, [r7, #8]
 800c53e:	f7f9 fa90 	bl	8005a62 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 800c542:	61f8      	str	r0, [r7, #28]
    Index dstCols = src.cols();
 800c544:	68b8      	ldr	r0, [r7, #8]
 800c546:	f7fb fc35 	bl	8007db4 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800c54a:	61b8      	str	r0, [r7, #24]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4618      	mov	r0, r3
 800c550:	f7f9 f999 	bl	8005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800c554:	4602      	mov	r2, r0
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	4293      	cmp	r3, r2
 800c55a:	d107      	bne.n	800c56c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4618      	mov	r0, r3
 800c560:	f7f9 f99c 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800c564:	4602      	mov	r2, r0
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	4293      	cmp	r3, r2
 800c56a:	d001      	beq.n	800c570 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 800c56c:	2301      	movs	r3, #1
 800c56e:	e000      	b.n	800c572 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 800c570:	2300      	movs	r3, #0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d005      	beq.n	800c582 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	69ba      	ldr	r2, [r7, #24]
 800c57a:	69f9      	ldr	r1, [r7, #28]
 800c57c:	4618      	mov	r0, r3
 800c57e:	f000 fcd3 	bl	800cf28 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    const int Size = EIGEN_PLAIN_ENUM_MIN(XprType::ColsAtCompileTime,DstXprType::ColsAtCompileTime);
 800c582:	2301      	movs	r3, #1
 800c584:	617b      	str	r3, [r7, #20]
    ActualXprType actual_xpr(src.nestedExpression());
 800c586:	68b8      	ldr	r0, [r7, #8]
 800c588:	f000 fd00 	bl	800cf8c <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>
 800c58c:	4602      	mov	r2, r0
 800c58e:	f107 0310 	add.w	r3, r7, #16
 800c592:	4611      	mov	r1, r2
 800c594:	4618      	mov	r0, r3
 800c596:	f000 fd04 	bl	800cfa2 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>
    compute_inverse<ActualXprTypeCleanded, DstXprType>::run(actual_xpr, dst);
 800c59a:	f107 0310 	add.w	r3, r7, #16
 800c59e:	68f9      	ldr	r1, [r7, #12]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f000 fd13 	bl	800cfcc <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>
  }
 800c5a6:	bf00      	nop
 800c5a8:	3720      	adds	r7, #32
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b082      	sub	sp, #8
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fd47 	bl	800d04a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>
 800c5bc:	4603      	mov	r3, r0
    }
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b084      	sub	sp, #16
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	60f8      	str	r0, [r7, #12]
 800c5ce:	60b9      	str	r1, [r7, #8]
 800c5d0:	607a      	str	r2, [r7, #4]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	68b9      	ldr	r1, [r7, #8]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f000 fd58 	bl	800d08e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
    }
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	60f8      	str	r0, [r7, #12]
 800c606:	60b9      	str	r1, [r7, #8]
 800c608:	607a      	str	r2, [r7, #4]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	68b9      	ldr	r1, [r7, #8]
 800c610:	4618      	mov	r0, r3
 800c612:	f000 fd6d 	bl	800d0f0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	4618      	mov	r0, r3
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
    }
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4618      	mov	r0, r3
 800c62c:	370c      	adds	r7, #12
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c636:	b580      	push	{r7, lr}
 800c638:	b082      	sub	sp, #8
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	f7f9 ff04 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c642:	4603      	mov	r3, r0
 800c644:	4618      	mov	r0, r3
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	f7f9 fef9 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c658:	4603      	mov	r3, r0
 800c65a:	4618      	mov	r0, r3
 800c65c:	3708      	adds	r7, #8
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800c662:	b580      	push	{r7, lr}
 800c664:	b082      	sub	sp, #8
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7ff f8d8 	bl	800b822 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800c672:	4603      	mov	r3, r0
    }
 800c674:	4618      	mov	r0, r3
 800c676:	3708      	adds	r7, #8
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6839      	ldr	r1, [r7, #0]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 fd61 	bl	800d152 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4618      	mov	r0, r3
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800c69a:	b480      	push	{r7}
 800c69c:	b083      	sub	sp, #12
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	370c      	adds	r7, #12
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
 800c6c6:	b480      	push	{r7}
 800c6c8:	b083      	sub	sp, #12
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b084      	sub	sp, #16
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	60f8      	str	r0, [r7, #12]
 800c6fa:	60b9      	str	r1, [r7, #8]
 800c6fc:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800c6fe:	68b9      	ldr	r1, [r7, #8]
 800c700:	68f8      	ldr	r0, [r7, #12]
 800c702:	f000 fd35 	bl	800d170 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800c706:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c70a:	eeb0 0a67 	vmov.f32	s0, s15
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800c714:	b5b0      	push	{r4, r5, r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7fe ff7b 	bl	800b61a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800c724:	4604      	mov	r4, r0
 800c726:	6838      	ldr	r0, [r7, #0]
 800c728:	f7f9 fade 	bl	8005ce8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 800c72c:	4605      	mov	r5, r0
 800c72e:	f107 030c 	add.w	r3, r7, #12
 800c732:	4618      	mov	r0, r3
 800c734:	f7fa f8e7 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800c738:	f107 030c 	add.w	r3, r7, #12
 800c73c:	461a      	mov	r2, r3
 800c73e:	4629      	mov	r1, r5
 800c740:	4620      	mov	r0, r4
 800c742:	f000 fd26 	bl	800d192 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7fe ff67 	bl	800b61a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800c74c:	4603      	mov	r3, r0
    }
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bdb0      	pop	{r4, r5, r7, pc}

0800c756 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800c756:	b480      	push	{r7}
 800c758:	b083      	sub	sp, #12
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	bf00      	nop
 800c760:	370c      	adds	r7, #12
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr

0800c76a <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800c76a:	b590      	push	{r4, r7, lr}
 800c76c:	b087      	sub	sp, #28
 800c76e:	af00      	add	r7, sp, #0
 800c770:	60f8      	str	r0, [r7, #12]
 800c772:	60b9      	str	r1, [r7, #8]
 800c774:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800c776:	68b8      	ldr	r0, [r7, #8]
 800c778:	f000 fd1c 	bl	800d1b4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>
 800c77c:	4604      	mov	r4, r0
 800c77e:	f107 0310 	add.w	r3, r7, #16
 800c782:	4618      	mov	r0, r3
 800c784:	f7fa f8bf 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800c788:	f107 0310 	add.w	r3, r7, #16
 800c78c:	461a      	mov	r2, r3
 800c78e:	4621      	mov	r1, r4
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f7fa f99f 	bl	8006ad4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800c796:	68b8      	ldr	r0, [r7, #8]
 800c798:	f000 fd18 	bl	800d1cc <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>
 800c79c:	4604      	mov	r4, r0
 800c79e:	f107 0314 	add.w	r3, r7, #20
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f000 fd1e 	bl	800d1e4 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800c7a8:	f107 0314 	add.w	r3, r7, #20
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f000 fd22 	bl	800d1fa <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800c7b6:	bf00      	nop
 800c7b8:	371c      	adds	r7, #28
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd90      	pop	{r4, r7, pc}
	...

0800c7c0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	68b9      	ldr	r1, [r7, #8]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f000 fd22 	bl	800d21c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	db07      	blt.n	800c7ee <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7f8 f855 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	db05      	blt.n	800c7fa <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800c7ee:	4b05      	ldr	r3, [pc, #20]	; (800c804 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800c7f0:	4a05      	ldr	r2, [pc, #20]	; (800c808 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800c7f2:	2178      	movs	r1, #120	; 0x78
 800c7f4:	4805      	ldr	r0, [pc, #20]	; (800c80c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800c7f6:	f011 f9d5 	bl	801dba4 <__assert_func>
    }
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	08024590 	.word	0x08024590
 800c808:	08025bb8 	.word	0x08025bb8
 800c80c:	08024714 	.word	0x08024714

0800c810 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>:
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4618      	mov	r0, r3
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
 800c826:	b580      	push	{r7, lr}
 800c828:	b082      	sub	sp, #8
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 fd05 	bl	800d23e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	4618      	mov	r0, r3
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800c83e:	b580      	push	{r7, lr}
 800c840:	b082      	sub	sp, #8
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7ff ffed 	bl	800c826 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4618      	mov	r0, r3
 800c850:	3708      	adds	r7, #8
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}

0800c856 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>:
 800c856:	b580      	push	{r7, lr}
 800c858:	b082      	sub	sp, #8
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
 800c85e:	f7f9 fdec 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800c862:	4603      	mov	r3, r0
 800c864:	4618      	mov	r0, r3
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	f7f9 fde9 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c878:	4603      	mov	r3, r0
 800c87a:	4618      	mov	r0, r3
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
	...

0800c884 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c884:	b5b0      	push	{r4, r5, r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
 800c890:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c892:	68f8      	ldr	r0, [r7, #12]
 800c894:	f7ff ffd3 	bl	800c83e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	4614      	mov	r4, r2
 800c89e:	461d      	mov	r5, r3
 800c8a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c8a8:	e884 0003 	stmia.w	r4, {r0, r1}
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f103 0218 	add.w	r2, r3, #24
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	4614      	mov	r4, r2
 800c8b6:	461d      	mov	r5, r3
 800c8b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c8c0:	e884 0003 	stmia.w	r4, {r0, r1}
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	3330      	adds	r3, #48	; 0x30
 800c8c8:	6839      	ldr	r1, [r7, #0]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7f8 fb16 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c8d0:	68b8      	ldr	r0, [r7, #8]
 800c8d2:	f7fe fc7f 	bl	800b1d4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7ff ffbb 	bl	800c856 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	429c      	cmp	r4, r3
 800c8e4:	d10a      	bne.n	800c8fc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x78>
 800c8e6:	68b8      	ldr	r0, [r7, #8]
 800c8e8:	f7fe fc81 	bl	800b1ee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7ff ffbb 	bl	800c86c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	429c      	cmp	r4, r3
 800c8fa:	d005      	beq.n	800c908 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x84>
 800c8fc:	4b05      	ldr	r3, [pc, #20]	; (800c914 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x90>)
 800c8fe:	4a06      	ldr	r2, [pc, #24]	; (800c918 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x94>)
 800c900:	2174      	movs	r1, #116	; 0x74
 800c902:	4806      	ldr	r0, [pc, #24]	; (800c91c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x98>)
 800c904:	f011 f94e 	bl	801dba4 <__assert_func>
    }
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	4618      	mov	r0, r3
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bdb0      	pop	{r4, r5, r7, pc}
 800c912:	bf00      	nop
 800c914:	0801fa0c 	.word	0x0801fa0c
 800c918:	08025c94 	.word	0x08025c94
 800c91c:	0801fc70 	.word	0x0801fc70

0800c920 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 f809 	bl	800c940 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c92e:	4603      	mov	r3, r0
 800c930:	4618      	mov	r0, r3
 800c932:	f000 fc8f 	bl	800d254 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>
 800c936:	4603      	mov	r3, r0
 800c938:	4618      	mov	r0, r3
 800c93a:	3708      	adds	r7, #8
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4618      	mov	r0, r3
 800c94c:	370c      	adds	r7, #12
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr

0800c956 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c956:	b580      	push	{r7, lr}
 800c958:	b082      	sub	sp, #8
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4618      	mov	r0, r3
 800c962:	f7fe fc37 	bl	800b1d4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800c966:	4603      	mov	r3, r0
    }
 800c968:	4618      	mov	r0, r3
 800c96a:	3708      	adds	r7, #8
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fc92 	bl	800d2a2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4618      	mov	r0, r3
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4618      	mov	r0, r3
 800c994:	f7ff ffec 	bl	800c970 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4618      	mov	r0, r3
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7ff ffeb 	bl	800c988 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3708      	adds	r7, #8
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7ff ffeb 	bl	800c9a2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b082      	sub	sp, #8
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	330c      	adds	r3, #12
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7ff ffea 	bl	800c9bc <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	3304      	adds	r3, #4
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fe fce7 	bl	800b3c0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7ff ffe5 	bl	800c9d6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 fc3d 	bl	800d28c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	4618      	mov	r0, r3
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7ff ffe8 	bl	800c9fc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3708      	adds	r7, #8
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b082      	sub	sp, #8
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7ff ffeb 	bl	800ca1c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800ca50:	b580      	push	{r7, lr}
 800ca52:	ed2d 8b02 	vpush	{d8}
 800ca56:	b088      	sub	sp, #32
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7ff f938 	bl	800bcd4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	dd05      	ble.n	800ca76 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f7ff ff58 	bl	800c920 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	dc06      	bgt.n	800ca84 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800ca76:	4b16      	ldr	r3, [pc, #88]	; (800cad0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800ca78:	4a16      	ldr	r2, [pc, #88]	; (800cad4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800ca7a:	f240 119b 	movw	r1, #411	; 0x19b
 800ca7e:	4816      	ldr	r0, [pc, #88]	; (800cad8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800ca80:	f011 f890 	bl	801dba4 <__assert_func>
 800ca84:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f7ff ff5a 	bl	800c940 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	f107 030c 	add.w	r3, r7, #12
 800ca92:	4611      	mov	r1, r2
 800ca94:	4618      	mov	r0, r3
 800ca96:	f000 fbea 	bl	800d26e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f7ff ff50 	bl	800c940 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800caa0:	4602      	mov	r2, r0
 800caa2:	f107 030c 	add.w	r3, r7, #12
 800caa6:	6839      	ldr	r1, [r7, #0]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f000 fc05 	bl	800d2b8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 800caae:	eeb0 8a40 	vmov.f32	s16, s0
 800cab2:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800cab4:	f107 030c 	add.w	r3, r7, #12
 800cab8:	4618      	mov	r0, r3
 800caba:	f7ff ffbc 	bl	800ca36 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800cabe:	eef0 7a48 	vmov.f32	s15, s16
}
 800cac2:	eeb0 0a67 	vmov.f32	s0, s15
 800cac6:	3720      	adds	r7, #32
 800cac8:	46bd      	mov	sp, r7
 800caca:	ecbd 8b02 	vpop	{d8}
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	08024a8c 	.word	0x08024a8c
 800cad4:	08025edc 	.word	0x08025edc
 800cad8:	08024c98 	.word	0x08024c98

0800cadc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800cae4:	2202      	movs	r2, #2
 800cae6:	2101      	movs	r1, #1
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7fd facf 	bl	800a08c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 fbf3 	bl	800d2da <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 800caf4:	bf00      	nop
 800caf6:	3708      	adds	r7, #8
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:

    /** \returns the functor representing the nullary operation */
    EIGEN_DEVICE_FUNC
    const NullaryOp& functor() const { return m_functor; }
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	3304      	adds	r3, #4
 800cb08:	4618      	mov	r0, r3
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	370c      	adds	r7, #12
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr

0800cb2a <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b084      	sub	sp, #16
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	60f8      	str	r0, [r7, #12]
 800cb32:	60b9      	str	r1, [r7, #8]
 800cb34:	607a      	str	r2, [r7, #4]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	68b9      	ldr	r1, [r7, #8]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 fbe8 	bl	800d312 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	4618      	mov	r0, r3
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
    }
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4618      	mov	r0, r3
 800cb58:	370c      	adds	r7, #12
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>:
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b084      	sub	sp, #16
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	60f8      	str	r0, [r7, #12]
 800cb6a:	60b9      	str	r1, [r7, #8]
 800cb6c:	607a      	str	r2, [r7, #4]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	68b9      	ldr	r1, [r7, #8]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f000 fbf7 	bl	800d368 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
    }
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	370c      	adds	r7, #12
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr

0800cb9a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>:
      : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
                    m_blockRows(blockRows), m_blockCols(blockCols)
    {}

    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
    EIGEN_DEVICE_FUNC inline Index cols() const { return m_blockCols.value(); }
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b082      	sub	sp, #8
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
 800cba2:	f7f9 fc52 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cba6:	4603      	mov	r3, r0
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>:
    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	f7f9 fc47 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3708      	adds	r7, #8
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}

0800cbc6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b082      	sub	sp, #8
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	3304      	adds	r3, #4
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7ff f991 	bl	800befa <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800cbd8:	4603      	mov	r3, r0
    }
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b082      	sub	sp, #8
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
 800cbea:	6039      	str	r1, [r7, #0]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6839      	ldr	r1, [r7, #0]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f000 fbeb 	bl	800d3cc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	370c      	adds	r7, #12
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr

0800cc16 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
 800cc16:	b480      	push	{r7}
 800cc18:	b083      	sub	sp, #12
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4618      	mov	r0, r3
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	4618      	mov	r0, r3
 800cc38:	370c      	adds	r7, #12
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr

0800cc42 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
 800cc42:	b480      	push	{r7}
 800cc44:	b083      	sub	sp, #12
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800cc64:	68b9      	ldr	r1, [r7, #8]
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f000 fbbf 	bl	800d3ea <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>
 800cc6c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cc70:	eeb0 0a67 	vmov.f32	s0, s15
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}

0800cc7a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800cc7a:	b580      	push	{r7, lr}
 800cc7c:	b082      	sub	sp, #8
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800cc82:	2200      	movs	r2, #0
 800cc84:	2102      	movs	r1, #2
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f7fc ff39 	bl	8009afe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 fbbd 	bl	800d40c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>
  }
 800cc92:	bf00      	nop
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)

    /** Column or Row constructor
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    BlockImpl_dense(XprType& xpr, Index i)
 800cc9a:	b5b0      	push	{r4, r5, r7, lr}
 800cc9c:	b084      	sub	sp, #16
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	60f8      	str	r0, [r7, #12]
 800cca2:	60b9      	str	r1, [r7, #8]
 800cca4:	607a      	str	r2, [r7, #4]
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
             BlockRows==1 ? 1 : xpr.rows(),
             BlockCols==1 ? 1 : xpr.cols()),
        m_xpr(xpr),
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800cca6:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f7fa ff34 	bl	8007b18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800ccb0:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800ccb2:	68b8      	ldr	r0, [r7, #8]
 800ccb4:	f000 fbba 	bl	800d42c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800ccb8:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	fb02 f303 	mul.w	r3, r2, r3
 800ccc0:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800ccc2:	441d      	add	r5, r3
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7f7 fde2 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2201      	movs	r2, #1
 800ccd0:	4629      	mov	r1, r5
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f000 fbc2 	bl	800d45c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	609a      	str	r2, [r3, #8]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	330c      	adds	r3, #12
 800cce2:	6879      	ldr	r1, [r7, #4]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f000 fbf7 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	3310      	adds	r3, #16
 800ccee:	2100      	movs	r1, #0
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f000 fbf1 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
    {
      init();
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f000 fbfd 	bl	800d4f6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>
    }
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bdb0      	pop	{r4, r5, r7, pc}

0800cd06 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800cd06:	b5b0      	push	{r4, r5, r7, lr}
 800cd08:	b084      	sub	sp, #16
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	60f8      	str	r0, [r7, #12]
 800cd0e:	60b9      	str	r1, [r7, #8]
 800cd10:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800cd12:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7f9 fe9d 	bl	8006a56 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800cd1c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800cd1e:	68b8      	ldr	r0, [r7, #8]
 800cd20:	f7f9 ff6a 	bl	8006bf8 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800cd24:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	fb02 f303 	mul.w	r3, r2, r3
 800cd2c:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800cd2e:	441d      	add	r5, r3
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7f7 fe5d 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f000 fc00 	bl	800d544 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	68ba      	ldr	r2, [r7, #8]
 800cd48:	609a      	str	r2, [r3, #8]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	330c      	adds	r3, #12
 800cd4e:	2100      	movs	r1, #0
 800cd50:	4618      	mov	r0, r3
 800cd52:	f000 fbc1 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	3310      	adds	r3, #16
 800cd5a:	6879      	ldr	r1, [r7, #4]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f000 fc2f 	bl	800d5c0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f000 fc46 	bl	800d5f4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3710      	adds	r7, #16
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bdb0      	pop	{r4, r5, r7, pc}

0800cd72 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b082      	sub	sp, #8
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	6039      	str	r1, [r7, #0]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6839      	ldr	r1, [r7, #0]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f000 fc47 	bl	800d614 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800cd9a:	6839      	ldr	r1, [r7, #0]
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 fc4b 	bl	800d638 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800cda2:	eef0 7a40 	vmov.f32	s15, s0
 800cda6:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 fc54 	bl	800d65a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800cdb2:	eef0 7a40 	vmov.f32	s15, s0
 800cdb6:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800cdba:	f107 020c 	add.w	r2, r7, #12
 800cdbe:	f107 0308 	add.w	r3, r7, #8
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	6838      	ldr	r0, [r7, #0]
 800cdc6:	f7fb fefe 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800cdca:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cdce:	eeb0 0a67 	vmov.f32	s0, s15
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800cde2:	6839      	ldr	r1, [r7, #0]
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 fc5c 	bl	800d6a2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800cdea:	bf00      	nop
 800cdec:	3708      	adds	r7, #8
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800cdf2:	b590      	push	{r4, r7, lr}
 800cdf4:	b083      	sub	sp, #12
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	6039      	str	r1, [r7, #0]
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 fc7d 	bl	800d6fc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 800ce02:	687c      	ldr	r4, [r7, #4]
 800ce04:	6838      	ldr	r0, [r7, #0]
 800ce06:	f000 fc6d 	bl	800d6e4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f7fa f9e0 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	4618      	mov	r0, r3
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd90      	pop	{r4, r7, pc}

0800ce1e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800ce1e:	b480      	push	{r7}
 800ce20:	b083      	sub	sp, #12
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
 800ce26:	6039      	str	r1, [r7, #0]
      : inner;
 800ce28:	687b      	ldr	r3, [r7, #4]
  }
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	370c      	adds	r7, #12
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr

0800ce36 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800ce36:	b480      	push	{r7}
 800ce38:	b083      	sub	sp, #12
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
 800ce3e:	6039      	str	r1, [r7, #0]
      : outer;
 800ce40:	683b      	ldr	r3, [r7, #0]
  }
 800ce42:	4618      	mov	r0, r3
 800ce44:	370c      	adds	r7, #12
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr

0800ce4e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800ce4e:	b5b0      	push	{r4, r5, r7, lr}
 800ce50:	b086      	sub	sp, #24
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	60f8      	str	r0, [r7, #12]
 800ce56:	60b9      	str	r1, [r7, #8]
 800ce58:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	689c      	ldr	r4, [r3, #8]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	68b9      	ldr	r1, [r7, #8]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f000 fc53 	bl	800d712 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>
 800ce6c:	4605      	mov	r5, r0
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	68b9      	ldr	r1, [r7, #8]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 fc63 	bl	800d742 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>
 800ce7c:	eef0 7a40 	vmov.f32	s15, s0
 800ce80:	edc7 7a05 	vstr	s15, [r7, #20]
 800ce84:	f107 0314 	add.w	r3, r7, #20
 800ce88:	461a      	mov	r2, r3
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f7fb f8a9 	bl	8007fe4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800ce92:	bf00      	nop
 800ce94:	3718      	adds	r7, #24
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bdb0      	pop	{r4, r5, r7, pc}

0800ce9a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b082      	sub	sp, #8
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800cea2:	2202      	movs	r2, #2
 800cea4:	2100      	movs	r1, #0
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f7ff fadf 	bl	800c46a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 fc7b 	bl	800d7a8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>
  }
 800ceb2:	bf00      	nop
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800ceba:	b480      	push	{r7}
 800cebc:	b083      	sub	sp, #12
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4618      	mov	r0, r3
 800cec8:	370c      	adds	r7, #12
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr

0800ced2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800ced2:	b480      	push	{r7}
 800ced4:	b083      	sub	sp, #12
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	3304      	adds	r3, #4
 800cede:	4618      	mov	r0, r3
 800cee0:	370c      	adds	r7, #12
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b088      	sub	sp, #32
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	60b9      	str	r1, [r7, #8]
 800cef4:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800cef6:	f107 0314 	add.w	r3, r7, #20
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	68b9      	ldr	r1, [r7, #8]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f000 fc62 	bl	800d7c8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>
 800cf04:	f107 031c 	add.w	r3, r7, #28
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7f9 fcfc 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800cf0e:	f107 021c 	add.w	r2, r7, #28
 800cf12:	f107 0314 	add.w	r3, r7, #20
 800cf16:	4619      	mov	r1, r3
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f000 fc6c 	bl	800d7f6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800cf1e:	bf00      	nop
 800cf20:	3720      	adds	r7, #32
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
	...

0800cf28 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d108      	bne.n	800cf4c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d105      	bne.n	800cf4c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	db02      	blt.n	800cf4c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	da06      	bge.n	800cf5a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x32>
 800cf4c:	4b0c      	ldr	r3, [pc, #48]	; (800cf80 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x58>)
 800cf4e:	4a0d      	ldr	r2, [pc, #52]	; (800cf84 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x5c>)
 800cf50:	f240 1111 	movw	r1, #273	; 0x111
 800cf54:	480c      	ldr	r0, [pc, #48]	; (800cf88 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x60>)
 800cf56:	f010 fe25 	bl	801dba4 <__assert_func>
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	617b      	str	r3, [r7, #20]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	613b      	str	r3, [r7, #16]
  }
 800cf62:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	fb02 f103 	mul.w	r1, r2, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68ba      	ldr	r2, [r7, #8]
 800cf72:	f000 fc51 	bl	800d818 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>
    }
 800cf76:	bf00      	nop
 800cf78:	3718      	adds	r7, #24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	0802249c 	.word	0x0802249c
 800cf84:	080260a4 	.word	0x080260a4
 800cf88:	080226b8 	.word	0x080226b8

0800cf8c <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>:
  EIGEN_DEVICE_FUNC const XprTypeNestedCleaned& nestedExpression() const { return m_xpr; }
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	4618      	mov	r0, r3
 800cf98:	370c      	adds	r7, #12
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr

0800cfa2 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>:
    explicit Matrix(const T& x)
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b082      	sub	sp, #8
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
 800cfaa:	6039      	str	r1, [r7, #0]
    {
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7f7 fb9a 	bl	80046e8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800cfb4:	f7f7 fba8 	bl	8004708 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6839      	ldr	r1, [r7, #0]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f000 fc38 	bl	800d832 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>
    }
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>:
  static inline void run(const MatrixType& matrix, ResultType& result)
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	ed2d 8b02 	vpush	{d8}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800cfda:	f107 030c 	add.w	r3, r7, #12
 800cfde:	6879      	ldr	r1, [r7, #4]
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fc ff50 	bl	8009e86 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    result.coeffRef(0,0) = Scalar(1) / matrixEval.coeff(0,0);
 800cfe6:	f107 030c 	add.w	r3, r7, #12
 800cfea:	2200      	movs	r2, #0
 800cfec:	2100      	movs	r1, #0
 800cfee:	4618      	mov	r0, r3
 800cff0:	f000 fc2c 	bl	800d84c <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>
 800cff4:	4603      	mov	r3, r0
 800cff6:	ed93 8a00 	vldr	s16, [r3]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	2200      	movs	r2, #0
 800cffe:	2100      	movs	r1, #0
 800d000:	4618      	mov	r0, r3
 800d002:	f7f9 f968 	bl	80062d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800d006:	4603      	mov	r3, r0
 800d008:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d00c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800d010:	edc3 7a00 	vstr	s15, [r3]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d014:	f107 030c 	add.w	r3, r7, #12
 800d018:	4618      	mov	r0, r3
 800d01a:	f7fb fe1b 	bl	8008c54 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  }
 800d01e:	bf00      	nop
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	ecbd 8b02 	vpop	{d8}
 800d028:	bd80      	pop	{r7, pc}

0800d02a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b082      	sub	sp, #8
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f7f8 fbe9 	bl	800580a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d038:	4603      	mov	r3, r0
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7f8 fc23 	bl	8005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d040:	4603      	mov	r3, r0
 800d042:	4618      	mov	r0, r3
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 800d04a:	b590      	push	{r4, r7, lr}
 800d04c:	b083      	sub	sp, #12
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f7ff ffe9 	bl	800d02a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d058:	4604      	mov	r4, r0
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 f807 	bl	800d06e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d060:	4603      	mov	r3, r0
 800d062:	fb04 f303 	mul.w	r3, r4, r3
 800d066:	4618      	mov	r0, r3
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd90      	pop	{r4, r7, pc}

0800d06e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800d06e:	b580      	push	{r7, lr}
 800d070:	b082      	sub	sp, #8
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7f8 fbc7 	bl	800580a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d07c:	4603      	mov	r3, r0
 800d07e:	4618      	mov	r0, r3
 800d080:	f7f8 fc0c 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d084:	4603      	mov	r3, r0
 800d086:	4618      	mov	r0, r3
 800d088:	3708      	adds	r7, #8
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d08e:	b5b0      	push	{r4, r5, r7, lr}
 800d090:	b084      	sub	sp, #16
 800d092:	af00      	add	r7, sp, #0
 800d094:	60f8      	str	r0, [r7, #12]
 800d096:	60b9      	str	r1, [r7, #8]
 800d098:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d09a:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7f9 fcd9 	bl	8006a56 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d0a4:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d0a6:	68b8      	ldr	r0, [r7, #8]
 800d0a8:	f000 fa35 	bl	800d516 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800d0ac:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	fb02 f303 	mul.w	r3, r2, r3
 800d0b4:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d0b6:	18e9      	adds	r1, r5, r3
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	4620      	mov	r0, r4
 800d0be:	f000 fbe9 	bl	800d894 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	68ba      	ldr	r2, [r7, #8]
 800d0c6:	609a      	str	r2, [r3, #8]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	330c      	adds	r3, #12
 800d0cc:	6879      	ldr	r1, [r7, #4]
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f000 fa02 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	3310      	adds	r3, #16
 800d0d8:	2100      	movs	r1, #0
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f000 fa70 	bl	800d5c0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f000 fc15 	bl	800d910 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>
    }
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3710      	adds	r7, #16
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bdb0      	pop	{r4, r5, r7, pc}

0800d0f0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d0f0:	b5b0      	push	{r4, r5, r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d0fc:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	4618      	mov	r0, r3
 800d102:	f7fd fd27 	bl	800ab54 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800d106:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d108:	68b8      	ldr	r0, [r7, #8]
 800d10a:	f000 fc11 	bl	800d930 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 800d10e:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	fb02 f303 	mul.w	r3, r2, r3
 800d116:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d118:	18e9      	adds	r1, r5, r3
 800d11a:	2301      	movs	r3, #1
 800d11c:	2201      	movs	r2, #1
 800d11e:	4620      	mov	r0, r4
 800d120:	f000 fc1e 	bl	800d960 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	609a      	str	r2, [r3, #8]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	330c      	adds	r3, #12
 800d12e:	6879      	ldr	r1, [r7, #4]
 800d130:	4618      	mov	r0, r3
 800d132:	f000 fa45 	bl	800d5c0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	330d      	adds	r3, #13
 800d13a:	6879      	ldr	r1, [r7, #4]
 800d13c:	4618      	mov	r0, r3
 800d13e:	f000 fa3f 	bl	800d5c0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f000 fc4a 	bl	800d9dc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>
    }
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	4618      	mov	r0, r3
 800d14c:	3710      	adds	r7, #16
 800d14e:	46bd      	mov	sp, r7
 800d150:	bdb0      	pop	{r4, r5, r7, pc}

0800d152 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d152:	b580      	push	{r7, lr}
 800d154:	b082      	sub	sp, #8
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
 800d15a:	6039      	str	r1, [r7, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6839      	ldr	r1, [r7, #0]
 800d160:	4618      	mov	r0, r3
 800d162:	f000 fc4b 	bl	800d9fc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4618      	mov	r0, r3
 800d16a:	3708      	adds	r7, #8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d17a:	2200      	movs	r2, #0
 800d17c:	2100      	movs	r1, #0
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 fc4e 	bl	800da20 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800d184:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d188:	eeb0 0a67 	vmov.f32	s0, s15
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d192:	b580      	push	{r7, lr}
 800d194:	b086      	sub	sp, #24
 800d196:	af00      	add	r7, sp, #0
 800d198:	60f8      	str	r0, [r7, #12]
 800d19a:	60b9      	str	r1, [r7, #8]
 800d19c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	68b9      	ldr	r1, [r7, #8]
 800d1a6:	6978      	ldr	r0, [r7, #20]
 800d1a8:	f000 fc4d 	bl	800da46 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800d1ac:	bf00      	nop
 800d1ae:	3718      	adds	r7, #24
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	3304      	adds	r3, #4
 800d1d8:	4618      	mov	r0, r3
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with subtraction
  *
  */
template<typename DstScalar,typename SrcScalar> struct sub_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op)
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	370c      	adds	r7, #12
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr

0800d1fa <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b086      	sub	sp, #24
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	60f8      	str	r0, [r7, #12]
 800d202:	60b9      	str	r1, [r7, #8]
 800d204:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	68b9      	ldr	r1, [r7, #8]
 800d20e:	6978      	ldr	r0, [r7, #20]
 800d210:	f000 fc44 	bl	800da9c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800d214:	bf00      	nop
 800d216:	3718      	adds	r7, #24
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	68b9      	ldr	r1, [r7, #8]
 800d22e:	4618      	mov	r0, r3
 800d230:	f000 fc6e 	bl	800db10 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	4618      	mov	r0, r3
 800d238:	3710      	adds	r7, #16
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d23e:	b480      	push	{r7}
 800d240:	b083      	sub	sp, #12
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
    }
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4618      	mov	r0, r3
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	4618      	mov	r0, r3
 800d260:	f7fd ffc5 	bl	800b1ee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800d264:	4603      	mov	r3, r0
    }
 800d266:	4618      	mov	r0, r3
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800d26e:	b580      	push	{r7, lr}
 800d270:	b082      	sub	sp, #8
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
 800d276:	6039      	str	r1, [r7, #0]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6839      	ldr	r1, [r7, #0]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f000 fc7d 	bl	800db7c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	4618      	mov	r0, r3
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	4618      	mov	r0, r3
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
 800d2a2:	b480      	push	{r7}
 800d2a4:	b083      	sub	sp, #12
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d2c4:	68b9      	ldr	r1, [r7, #8]
 800d2c6:	68f8      	ldr	r0, [r7, #12]
 800d2c8:	f000 fc67 	bl	800db9a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>
 800d2cc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d2d0:	eeb0 0a67 	vmov.f32	s0, s15
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d2da:	b580      	push	{r7, lr}
 800d2dc:	b082      	sub	sp, #8
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	2102      	movs	r1, #2
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f7fc fed0 	bl	800a08c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 fc78 	bl	800dbe2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800d2f2:	bf00      	nop
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b082      	sub	sp, #8
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 fc7d 	bl	800dc02 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4618      	mov	r0, r3
 800d30c:	3708      	adds	r7, #8
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}

0800d312 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>:
    inline BlockImpl_dense(XprType& xpr, Index i)
 800d312:	b580      	push	{r7, lr}
 800d314:	b084      	sub	sp, #16
 800d316:	af00      	add	r7, sp, #0
 800d318:	60f8      	str	r0, [r7, #12]
 800d31a:	60b9      	str	r1, [r7, #8]
 800d31c:	607a      	str	r2, [r7, #4]
        m_blockCols(BlockCols==1 ? 1 : xpr.cols())
 800d31e:	68f8      	ldr	r0, [r7, #12]
 800d320:	f7ff ffeb 	bl	800d2fa <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	68b9      	ldr	r1, [r7, #8]
 800d328:	4618      	mov	r0, r3
 800d32a:	f7f6 fe79 	bl	8004020 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	3310      	adds	r3, #16
 800d332:	6879      	ldr	r1, [r7, #4]
 800d334:	4618      	mov	r0, r3
 800d336:	f000 f8cf 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	3314      	adds	r3, #20
 800d33e:	2100      	movs	r1, #0
 800d340:	4618      	mov	r0, r3
 800d342:	f000 f93d 	bl	800d5c0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	3315      	adds	r3, #21
 800d34a:	2101      	movs	r1, #1
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7f9 f84f 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	3316      	adds	r3, #22
 800d356:	2101      	movs	r1, #1
 800d358:	4618      	mov	r0, r3
 800d35a:	f7f9 f849 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
    {}
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	4618      	mov	r0, r3
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d368:	b5b0      	push	{r4, r5, r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d374:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d376:	68b8      	ldr	r0, [r7, #8]
 800d378:	f000 fc4e 	bl	800dc18 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>
 800d37c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d37e:	68b8      	ldr	r0, [r7, #8]
 800d380:	f000 fc5e 	bl	800dc40 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 800d384:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	fb02 f303 	mul.w	r3, r2, r3
 800d38c:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d38e:	18e9      	adds	r1, r5, r3
 800d390:	2301      	movs	r3, #1
 800d392:	2201      	movs	r2, #1
 800d394:	4620      	mov	r0, r4
 800d396:	f000 fc87 	bl	800dca8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	3308      	adds	r3, #8
 800d39e:	68ba      	ldr	r2, [r7, #8]
 800d3a0:	6812      	ldr	r2, [r2, #0]
 800d3a2:	601a      	str	r2, [r3, #0]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	330c      	adds	r3, #12
 800d3a8:	2100      	movs	r1, #0
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 f908 	bl	800d5c0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	3310      	adds	r3, #16
 800d3b4:	6879      	ldr	r1, [r7, #4]
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f000 f88e 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f000 fcb1 	bl	800dd24 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>
    }
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3710      	adds	r7, #16
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bdb0      	pop	{r4, r5, r7, pc}

0800d3cc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6839      	ldr	r1, [r7, #0]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f000 fcb2 	bl	800dd44 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3708      	adds	r7, #8
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b082      	sub	sp, #8
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
 800d3f2:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 fcb5 	bl	800dd68 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 800d3fe:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d402:	eeb0 0a67 	vmov.f32	s0, s15
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d414:	2201      	movs	r2, #1
 800d416:	2102      	movs	r1, #2
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f7fc fb70 	bl	8009afe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 fcb5 	bl	800dd8e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>
  }
 800d424:	bf00      	nop
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	2301      	movs	r3, #1
 800d436:	4618      	mov	r0, r3
 800d438:	370c      	adds	r7, #12
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
 800d442:	b580      	push	{r7, lr}
 800d444:	b082      	sub	sp, #8
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 fcaf 	bl	800ddae <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	4618      	mov	r0, r3
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
	...

0800d45c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>:
      checkSanity<Derived>();
    }

    /** \internal Constructor for dynamically sized matrices */
    EIGEN_DEVICE_FUNC
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	60b9      	str	r1, [r7, #8]
 800d466:	607a      	str	r2, [r7, #4]
 800d468:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f7ff ffe9 	bl	800d442 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	68ba      	ldr	r2, [r7, #8]
 800d474:	601a      	str	r2, [r3, #0]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	3304      	adds	r3, #4
 800d47a:	6879      	ldr	r1, [r7, #4]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7f8 ffb7 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	3305      	adds	r3, #5
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	4618      	mov	r0, r3
 800d48a:	f7f8 ff97 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
    {
      eigen_assert( (dataPtr == 0)
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d011      	beq.n	800d4b8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	db08      	blt.n	800d4ac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d105      	bne.n	800d4ac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	db02      	blt.n	800d4ac <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	2b03      	cmp	r3, #3
 800d4aa:	d005      	beq.n	800d4b8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800d4ac:	4b07      	ldr	r3, [pc, #28]	; (800d4cc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x70>)
 800d4ae:	4a08      	ldr	r2, [pc, #32]	; (800d4d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x74>)
 800d4b0:	21b0      	movs	r1, #176	; 0xb0
 800d4b2:	4808      	ldr	r0, [pc, #32]	; (800d4d4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x78>)
 800d4b4:	f010 fb76 	bl	801dba4 <__assert_func>
              || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
                  && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));
      checkSanity<Derived>();
 800d4b8:	2100      	movs	r1, #0
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	f000 fc82 	bl	800ddc4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3710      	adds	r7, #16
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	08026130 	.word	0x08026130
 800d4d0:	080261dc 	.word	0x080261dc
 800d4d4:	080262e0 	.word	0x080262e0

0800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>:

template<typename T> class variable_if_dynamic<T, Dynamic>
{
    T m_value;
  public:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value = 0) EIGEN_NO_THROW : m_value(value) {}
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	683a      	ldr	r2, [r7, #0]
 800d4e6:	601a      	str	r2, [r3, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	370c      	adds	r7, #12
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr

0800d4f6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>:
    }
    #endif

  protected:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void init()
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b082      	sub	sp, #8
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
    {
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
                    ? m_xpr.outerStride()
                    : m_xpr.innerStride();
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff ff92 	bl	800d42c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800d508:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	615a      	str	r2, [r3, #20]
    }
 800d50e:	bf00      	nop
 800d510:	3708      	adds	r7, #8
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>:
 800d516:	b480      	push	{r7}
 800d518:	b083      	sub	sp, #12
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
 800d51e:	2301      	movs	r3, #1
 800d520:	4618      	mov	r0, r3
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr

0800d52c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 fc50 	bl	800ddda <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4618      	mov	r0, r3
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	607a      	str	r2, [r7, #4]
 800d550:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d552:	68f8      	ldr	r0, [r7, #12]
 800d554:	f7ff ffea 	bl	800d52c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	68ba      	ldr	r2, [r7, #8]
 800d55c:	601a      	str	r2, [r3, #0]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	3304      	adds	r3, #4
 800d562:	6879      	ldr	r1, [r7, #4]
 800d564:	4618      	mov	r0, r3
 800d566:	f7f8 ff29 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	3305      	adds	r3, #5
 800d56e:	6839      	ldr	r1, [r7, #0]
 800d570:	4618      	mov	r0, r3
 800d572:	f7f8 ff3d 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d011      	beq.n	800d5a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	db08      	blt.n	800d594 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2b03      	cmp	r3, #3
 800d586:	d105      	bne.n	800d594 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	db02      	blt.n	800d594 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d005      	beq.n	800d5a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800d594:	4b07      	ldr	r3, [pc, #28]	; (800d5b4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800d596:	4a08      	ldr	r2, [pc, #32]	; (800d5b8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800d598:	21b0      	movs	r1, #176	; 0xb0
 800d59a:	4808      	ldr	r0, [pc, #32]	; (800d5bc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800d59c:	f010 fb02 	bl	801dba4 <__assert_func>
      checkSanity<Derived>();
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	f000 fc24 	bl	800ddf0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3710      	adds	r7, #16
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	08026130 	.word	0x08026130
 800d5b8:	08026334 	.word	0x08026334
 800d5bc:	080262e0 	.word	0x080262e0

0800d5c0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d005      	beq.n	800d5dc <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x1c>
 800d5d0:	4b05      	ldr	r3, [pc, #20]	; (800d5e8 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x28>)
 800d5d2:	4a06      	ldr	r2, [pc, #24]	; (800d5ec <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x2c>)
 800d5d4:	2185      	movs	r1, #133	; 0x85
 800d5d6:	4806      	ldr	r0, [pc, #24]	; (800d5f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x30>)
 800d5d8:	f010 fae4 	bl	801dba4 <__assert_func>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	08021f48 	.word	0x08021f48
 800d5ec:	08026438 	.word	0x08026438
 800d5f0:	08021fc0 	.word	0x08021fc0

0800d5f4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	4618      	mov	r0, r3
 800d602:	f7f9 faf9 	bl	8006bf8 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d606:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	615a      	str	r2, [r3, #20]
    }
 800d60c:	bf00      	nop
 800d60e:	3708      	adds	r7, #8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 fbf1 	bl	800de06 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6839      	ldr	r1, [r7, #0]
 800d628:	4618      	mov	r0, r3
 800d62a:	f000 fbf7 	bl	800de1c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4618      	mov	r0, r3
 800d632:	3708      	adds	r7, #8
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d642:	2200      	movs	r2, #0
 800d644:	2100      	movs	r1, #0
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fc10 	bl	800de6c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800d64c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d650:	eeb0 0a67 	vmov.f32	s0, s15
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b084      	sub	sp, #16
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
 800d662:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d664:	6839      	ldr	r1, [r7, #0]
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 fc13 	bl	800de92 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 800d66c:	eef0 7a40 	vmov.f32	s15, s0
 800d670:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800d674:	6839      	ldr	r1, [r7, #0]
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 fc1c 	bl	800deb4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 800d67c:	eef0 7a40 	vmov.f32	s15, s0
 800d680:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d684:	f107 020c 	add.w	r2, r7, #12
 800d688:	f107 0308 	add.w	r3, r7, #8
 800d68c:	4619      	mov	r1, r3
 800d68e:	6838      	ldr	r0, [r7, #0]
 800d690:	f7fb fa99 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800d694:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d698:	eeb0 0a67 	vmov.f32	s0, s15
 800d69c:	3710      	adds	r7, #16
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800d6a2:	b5b0      	push	{r4, r5, r7, lr}
 800d6a4:	b084      	sub	sp, #16
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
 800d6aa:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f7f7 fdcd 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	6838      	ldr	r0, [r7, #0]
 800d6b6:	f7f7 fdfc 	bl	80052b2 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800d6ba:	4605      	mov	r5, r0
 800d6bc:	f107 030c 	add.w	r3, r7, #12
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7f9 f920 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d6c6:	f107 030c 	add.w	r3, r7, #12
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	4629      	mov	r1, r5
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	f000 fc01 	bl	800ded6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f7f7 fdb9 	bl	800524c <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800d6da:	4603      	mov	r3, r0
    }
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3710      	adds	r7, #16
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bdb0      	pop	{r4, r5, r7, pc}

0800d6e4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	370c      	adds	r7, #12
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr

0800d6fc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800d6fc:	b480      	push	{r7}
 800d6fe:	b083      	sub	sp, #12
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	4618      	mov	r0, r3
 800d708:	370c      	adds	r7, #12
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr

0800d712 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800d712:	b590      	push	{r4, r7, lr}
 800d714:	b085      	sub	sp, #20
 800d716:	af00      	add	r7, sp, #0
 800d718:	60f8      	str	r0, [r7, #12]
 800d71a:	60b9      	str	r1, [r7, #8]
 800d71c:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row * m_d.outerStride() + col];
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681c      	ldr	r4, [r3, #0]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	4618      	mov	r0, r3
 800d726:	f7fb fa08 	bl	8008b3a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800d72a:	4602      	mov	r2, r0
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	fb03 f202 	mul.w	r2, r3, r2
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4413      	add	r3, r2
 800d736:	009b      	lsls	r3, r3, #2
 800d738:	4423      	add	r3, r4
  }
 800d73a:	4618      	mov	r0, r3
 800d73c:	3714      	adds	r7, #20
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd90      	pop	{r4, r7, pc}

0800d742 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800d742:	b580      	push	{r7, lr}
 800d744:	b0a4      	sub	sp, #144	; 0x90
 800d746:	af00      	add	r7, sp, #0
 800d748:	60f8      	str	r0, [r7, #12]
 800d74a:	60b9      	str	r1, [r7, #8]
 800d74c:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800d74e:	68f9      	ldr	r1, [r7, #12]
 800d750:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	4618      	mov	r0, r3
 800d758:	f7fd f844 	bl	800a7e4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800d75c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d760:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d764:	4611      	mov	r1, r2
 800d766:	4618      	mov	r0, r3
 800d768:	f7fd f84f 	bl	800a80a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d772:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	4618      	mov	r0, r3
 800d77a:	f000 fbbd 	bl	800def8 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>
 800d77e:	f107 0314 	add.w	r3, r7, #20
 800d782:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800d786:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800d78a:	4618      	mov	r0, r3
 800d78c:	f000 fbc7 	bl	800df1e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800d790:	f107 0314 	add.w	r3, r7, #20
 800d794:	4618      	mov	r0, r3
 800d796:	f000 fbf0 	bl	800df7a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>
 800d79a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d79e:	eeb0 0a67 	vmov.f32	s0, s15
 800d7a2:	3790      	adds	r7, #144	; 0x90
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	2101      	movs	r1, #1
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7fe fe58 	bl	800c46a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 fbf8 	bl	800dfb0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>
  }
 800d7c0:	bf00      	nop
 800d7c2:	3708      	adds	r7, #8
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800d7c8:	b590      	push	{r4, r7, lr}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800d7d4:	68b8      	ldr	r0, [r7, #8]
 800d7d6:	f7f7 fc70 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800d7da:	4604      	mov	r4, r0
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f7f7 fed1 	bl	8005584 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	4621      	mov	r1, r4
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f000 fc15 	bl	800e018 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>
}
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	3714      	adds	r7, #20
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd90      	pop	{r4, r7, pc}

0800d7f6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b086      	sub	sp, #24
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	60f8      	str	r0, [r7, #12]
 800d7fe:	60b9      	str	r1, [r7, #8]
 800d800:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	68b9      	ldr	r1, [r7, #8]
 800d80a:	6978      	ldr	r0, [r7, #20]
 800d80c:	f000 fc32 	bl	800e074 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800d810:	bf00      	nop
 800d812:	3718      	adds	r7, #24
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800d818:	b480      	push	{r7}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
 800d824:	603b      	str	r3, [r7, #0]
 800d826:	bf00      	nop
 800d828:	3714      	adds	r7, #20
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr

0800d832 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800d832:	b580      	push	{r7, lr}
 800d834:	b082      	sub	sp, #8
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
 800d83a:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800d83c:	6839      	ldr	r1, [r7, #0]
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 fc2b 	bl	800e09a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800d844:	bf00      	nop
 800d846:	3708      	adds	r7, #8
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800d84c:	b590      	push	{r4, r7, lr}
 800d84e:	b085      	sub	sp, #20
 800d850:	af00      	add	r7, sp, #0
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681c      	ldr	r4, [r3, #0]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	4618      	mov	r0, r3
 800d860:	f7f9 f846 	bl	80068f0 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 800d864:	4602      	mov	r2, r0
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	fb03 f202 	mul.w	r2, r3, r2
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	4413      	add	r3, r2
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	4423      	add	r3, r4
  }
 800d874:	4618      	mov	r0, r3
 800d876:	3714      	adds	r7, #20
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd90      	pop	{r4, r7, pc}

0800d87c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 fc29 	bl	800e0dc <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	4618      	mov	r0, r3
 800d88e:	3708      	adds	r7, #8
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	60b9      	str	r1, [r7, #8]
 800d89e:	607a      	str	r2, [r7, #4]
 800d8a0:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f7ff ffea 	bl	800d87c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	601a      	str	r2, [r3, #0]
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	3304      	adds	r3, #4
 800d8b2:	6879      	ldr	r1, [r7, #4]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7f8 fd9b 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	3305      	adds	r3, #5
 800d8be:	6839      	ldr	r1, [r7, #0]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7f8 fd95 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d011      	beq.n	800d8f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	db08      	blt.n	800d8e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d105      	bne.n	800d8e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	db02      	blt.n	800d8e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d005      	beq.n	800d8f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800d8e4:	4b07      	ldr	r3, [pc, #28]	; (800d904 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800d8e6:	4a08      	ldr	r2, [pc, #32]	; (800d908 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800d8e8:	21b0      	movs	r1, #176	; 0xb0
 800d8ea:	4808      	ldr	r0, [pc, #32]	; (800d90c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800d8ec:	f010 f95a 	bl	801dba4 <__assert_func>
      checkSanity<Derived>();
 800d8f0:	2100      	movs	r1, #0
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f000 fbfd 	bl	800e0f2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3710      	adds	r7, #16
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	08026130 	.word	0x08026130
 800d908:	080264a0 	.word	0x080264a0
 800d90c:	080262e0 	.word	0x080262e0

0800d910 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	689b      	ldr	r3, [r3, #8]
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7f9 f96b 	bl	8006bf8 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d922:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	615a      	str	r2, [r3, #20]
    }
 800d928:	bf00      	nop
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>:
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	2301      	movs	r3, #1
 800d93a:	4618      	mov	r0, r3
 800d93c:	370c      	adds	r7, #12
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr

0800d946 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
 800d946:	b580      	push	{r7, lr}
 800d948:	b082      	sub	sp, #8
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 fbda 	bl	800e108 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4618      	mov	r0, r3
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
	...

0800d960 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	607a      	str	r2, [r7, #4]
 800d96c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d96e:	68f8      	ldr	r0, [r7, #12]
 800d970:	f7ff ffe9 	bl	800d946 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	68ba      	ldr	r2, [r7, #8]
 800d978:	601a      	str	r2, [r3, #0]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	3304      	adds	r3, #4
 800d97e:	6879      	ldr	r1, [r7, #4]
 800d980:	4618      	mov	r0, r3
 800d982:	f7f8 fd35 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	3305      	adds	r3, #5
 800d98a:	6839      	ldr	r1, [r7, #0]
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7f8 fd2f 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d011      	beq.n	800d9bc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	db08      	blt.n	800d9b0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d105      	bne.n	800d9b0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	db02      	blt.n	800d9b0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d005      	beq.n	800d9bc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800d9b0:	4b07      	ldr	r3, [pc, #28]	; (800d9d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800d9b2:	4a08      	ldr	r2, [pc, #32]	; (800d9d4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800d9b4:	21b0      	movs	r1, #176	; 0xb0
 800d9b6:	4808      	ldr	r0, [pc, #32]	; (800d9d8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800d9b8:	f010 f8f4 	bl	801dba4 <__assert_func>
      checkSanity<Derived>();
 800d9bc:	2100      	movs	r1, #0
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f000 fbad 	bl	800e11e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3710      	adds	r7, #16
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	08026130 	.word	0x08026130
 800d9d4:	080265a4 	.word	0x080265a4
 800d9d8:	080262e0 	.word	0x080262e0

0800d9dc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>:
    void init()
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7fd fe3d 	bl	800b668 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 800d9ee:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	611a      	str	r2, [r3, #16]
    }
 800d9f4:	bf00      	nop
 800d9f6:	3708      	adds	r7, #8
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 fb94 	bl	800e134 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6839      	ldr	r1, [r7, #0]
 800da10:	4618      	mov	r0, r3
 800da12:	f000 fb9a 	bl	800e14a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	4618      	mov	r0, r3
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	68b9      	ldr	r1, [r7, #8]
 800da32:	4618      	mov	r0, r3
 800da34:	f000 fbb1 	bl	800e19a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800da38:	eef0 7a40 	vmov.f32	s15, s0
 800da3c:	eeb0 0a67 	vmov.f32	s0, s15
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}

0800da46 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800da46:	b590      	push	{r4, r7, lr}
 800da48:	b087      	sub	sp, #28
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	60f8      	str	r0, [r7, #12]
 800da4e:	60b9      	str	r1, [r7, #8]
 800da50:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800da52:	68b8      	ldr	r0, [r7, #8]
 800da54:	f000 fbd1 	bl	800e1fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>
 800da58:	4604      	mov	r4, r0
 800da5a:	f107 0310 	add.w	r3, r7, #16
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f8 ff51 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800da64:	f107 0310 	add.w	r3, r7, #16
 800da68:	461a      	mov	r2, r3
 800da6a:	4621      	mov	r1, r4
 800da6c:	68f8      	ldr	r0, [r7, #12]
 800da6e:	f000 fbd0 	bl	800e212 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800da72:	68b8      	ldr	r0, [r7, #8]
 800da74:	f000 fbde 	bl	800e234 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>
 800da78:	4604      	mov	r4, r0
 800da7a:	f107 0314 	add.w	r3, r7, #20
 800da7e:	4618      	mov	r0, r3
 800da80:	f7ff fbb0 	bl	800d1e4 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800da84:	f107 0314 	add.w	r3, r7, #20
 800da88:	461a      	mov	r2, r3
 800da8a:	4621      	mov	r1, r4
 800da8c:	68f8      	ldr	r0, [r7, #12]
 800da8e:	f000 fbdd 	bl	800e24c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800da92:	bf00      	nop
 800da94:	371c      	adds	r7, #28
 800da96:	46bd      	mov	sp, r7
 800da98:	bd90      	pop	{r4, r7, pc}
	...

0800da9c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800da9c:	b590      	push	{r4, r7, lr}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	4618      	mov	r0, r3
 800daac:	f7f6 fefb 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800dab0:	4604      	mov	r4, r0
 800dab2:	68b8      	ldr	r0, [r7, #8]
 800dab4:	f7f8 fa95 	bl	8005fe2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 800dab8:	4603      	mov	r3, r0
 800daba:	429c      	cmp	r4, r3
 800dabc:	d10a      	bne.n	800dad4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7f6 fee5 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800dac6:	4604      	mov	r4, r0
 800dac8:	68b8      	ldr	r0, [r7, #8]
 800daca:	f7f8 fa98 	bl	8005ffe <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 800dace:	4603      	mov	r3, r0
 800dad0:	429c      	cmp	r4, r3
 800dad2:	d005      	beq.n	800dae0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800dad4:	4b0b      	ldr	r3, [pc, #44]	; (800db04 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800dad6:	4a0c      	ldr	r2, [pc, #48]	; (800db08 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800dad8:	21b0      	movs	r1, #176	; 0xb0
 800dada:	480c      	ldr	r0, [pc, #48]	; (800db0c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800dadc:	f010 f862 	bl	801dba4 <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800dae0:	68b8      	ldr	r0, [r7, #8]
 800dae2:	f000 fbc4 	bl	800e26e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>
 800dae6:	4604      	mov	r4, r0
 800dae8:	68b8      	ldr	r0, [r7, #8]
 800daea:	f000 fbcc 	bl	800e286 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>
 800daee:	4603      	mov	r3, r0
 800daf0:	461a      	mov	r2, r3
 800daf2:	4621      	mov	r1, r4
 800daf4:	68f8      	ldr	r0, [r7, #12]
 800daf6:	f000 fbd2 	bl	800e29e <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>
  }
 800dafa:	bf00      	nop
 800dafc:	3714      	adds	r7, #20
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd90      	pop	{r4, r7, pc}
 800db02:	bf00      	nop
 800db04:	080227a0 	.word	0x080227a0
 800db08:	080266a8 	.word	0x080266a8
 800db0c:	08022c98 	.word	0x08022c98

0800db10 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800db10:	b5b0      	push	{r4, r5, r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	60b9      	str	r1, [r7, #8]
 800db1a:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800db1c:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	4618      	mov	r0, r3
 800db22:	f7f9 fff9 	bl	8007b18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800db26:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800db28:	68b8      	ldr	r0, [r7, #8]
 800db2a:	f7fa fa2f 	bl	8007f8c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800db2e:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	fb02 f303 	mul.w	r3, r2, r3
 800db36:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800db38:	441d      	add	r5, r3
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7f6 feb2 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800db42:	4602      	mov	r2, r0
 800db44:	2301      	movs	r3, #1
 800db46:	4629      	mov	r1, r5
 800db48:	4620      	mov	r0, r4
 800db4a:	f000 fbd3 	bl	800e2f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	609a      	str	r2, [r3, #8]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	330c      	adds	r3, #12
 800db58:	2100      	movs	r1, #0
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7ff fcbc 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	3310      	adds	r3, #16
 800db64:	6879      	ldr	r1, [r7, #4]
 800db66:	4618      	mov	r0, r3
 800db68:	f7ff fcb6 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800db6c:	68f8      	ldr	r0, [r7, #12]
 800db6e:	f000 fbff 	bl	800e370 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	4618      	mov	r0, r3
 800db76:	3710      	adds	r7, #16
 800db78:	46bd      	mov	sp, r7
 800db7a:	bdb0      	pop	{r4, r5, r7, pc}

0800db7c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6039      	str	r1, [r7, #0]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6839      	ldr	r1, [r7, #0]
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 fc00 	bl	800e390 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	4618      	mov	r0, r3
 800db94:	3708      	adds	r7, #8
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b084      	sub	sp, #16
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
 800dba2:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800dba4:	6839      	ldr	r1, [r7, #0]
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 fc04 	bl	800e3b4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>
 800dbac:	eef0 7a40 	vmov.f32	s15, s0
 800dbb0:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800dbb4:	6839      	ldr	r1, [r7, #0]
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 fc0d 	bl	800e3d6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>
 800dbbc:	eef0 7a40 	vmov.f32	s15, s0
 800dbc0:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800dbc4:	f107 020c 	add.w	r2, r7, #12
 800dbc8:	f107 0308 	add.w	r3, r7, #8
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6838      	ldr	r0, [r7, #0]
 800dbd0:	f7fa fff9 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800dbd4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dbd8:	eeb0 0a67 	vmov.f32	s0, s15
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b082      	sub	sp, #8
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800dbea:	2201      	movs	r2, #1
 800dbec:	2102      	movs	r1, #2
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f7fc fa4c 	bl	800a08c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f000 fc12 	bl	800e41e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800dbfa:	bf00      	nop
 800dbfc:	3708      	adds	r7, #8
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800dc02:	b480      	push	{r7}
 800dc04:	b083      	sub	sp, #12
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
    }
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	370c      	adds	r7, #12
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f7f7 f9b5 	bl	8004f90 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800dc26:	4603      	mov	r3, r0
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7fc fd77 	bl	800a71c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7f8 ff10 	bl	8006a56 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800dc36:	4603      	mov	r3, r0
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f7f7 f9a1 	bl	8004f90 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7fc fd63 	bl	800a71c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800dc56:	4603      	mov	r3, r0
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7ff fc5c 	bl	800d516 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	4618      	mov	r0, r3
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7f7 f98d 	bl	8004f90 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800dc76:	4603      	mov	r3, r0
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7fc fd4f 	bl	800a71c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7f8 ffb9 	bl	8006bf8 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800dc86:	4603      	mov	r3, r0
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3708      	adds	r7, #8
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 fbd0 	bl	800e43e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	607a      	str	r2, [r7, #4]
 800dcb4:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800dcb6:	68f8      	ldr	r0, [r7, #12]
 800dcb8:	f7ff ffea 	bl	800dc90 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	68ba      	ldr	r2, [r7, #8]
 800dcc0:	601a      	str	r2, [r3, #0]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	3304      	adds	r3, #4
 800dcc6:	6879      	ldr	r1, [r7, #4]
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7f8 fb91 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	3305      	adds	r3, #5
 800dcd2:	6839      	ldr	r1, [r7, #0]
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7f8 fb8b 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d011      	beq.n	800dd04 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	db08      	blt.n	800dcf8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d105      	bne.n	800dcf8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	db02      	blt.n	800dcf8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d005      	beq.n	800dd04 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800dcf8:	4b07      	ldr	r3, [pc, #28]	; (800dd18 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800dcfa:	4a08      	ldr	r2, [pc, #32]	; (800dd1c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800dcfc:	21b0      	movs	r1, #176	; 0xb0
 800dcfe:	4808      	ldr	r0, [pc, #32]	; (800dd20 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800dd00:	f00f ff50 	bl	801dba4 <__assert_func>
      checkSanity<Derived>();
 800dd04:	2100      	movs	r1, #0
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f000 fba4 	bl	800e454 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	08026130 	.word	0x08026130
 800dd1c:	08026a24 	.word	0x08026a24
 800dd20:	080262e0 	.word	0x080262e0

0800dd24 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	3308      	adds	r3, #8
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff ff99 	bl	800dc68 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 800dd36:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	615a      	str	r2, [r3, #20]
    }
 800dd3c:	bf00      	nop
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 fb8b 	bl	800e46a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6839      	ldr	r1, [r7, #0]
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f000 fb91 	bl	800e480 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>
  }
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4618      	mov	r0, r3
 800dd62:	3708      	adds	r7, #8
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	68b9      	ldr	r1, [r7, #8]
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f000 fba8 	bl	800e4d0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>
 800dd80:	eef0 7a40 	vmov.f32	s15, s0
 800dd84:	eeb0 0a67 	vmov.f32	s0, s15
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	b082      	sub	sp, #8
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800dd96:	2202      	movs	r2, #2
 800dd98:	2102      	movs	r1, #2
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7fb feaf 	bl	8009afe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 fbc5 	bl	800e530 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>
  }
 800dda6:	bf00      	nop
 800dda8:	3708      	adds	r7, #8
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ddae:	b480      	push	{r7}
 800ddb0:	b083      	sub	sp, #12
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
    }
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	370c      	adds	r7, #12
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr

0800ddc4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
#endif
    }

    template<typename T>
    EIGEN_DEVICE_FUNC
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
    {}
 800ddce:	bf00      	nop
 800ddd0:	370c      	adds	r7, #12
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr

0800ddda <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ddda:	b480      	push	{r7}
 800dddc:	b083      	sub	sp, #12
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
    }
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	4618      	mov	r0, r3
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr

0800ddf0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
    {}
 800ddfa:	bf00      	nop
 800ddfc:	370c      	adds	r7, #12
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr

0800de06 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800de06:	b480      	push	{r7}
 800de08:	b083      	sub	sp, #12
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4618      	mov	r0, r3
 800de12:	370c      	adds	r7, #12
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800de1c:	b590      	push	{r4, r7, lr}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
 800de26:	687c      	ldr	r4, [r7, #4]
 800de28:	6838      	ldr	r0, [r7, #0]
 800de2a:	f000 fb8b 	bl	800e544 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>
 800de2e:	4603      	mov	r3, r0
 800de30:	4619      	mov	r1, r3
 800de32:	4620      	mov	r0, r4
 800de34:	f7f7 f862 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	1d1c      	adds	r4, r3, #4
 800de3c:	6838      	ldr	r0, [r7, #0]
 800de3e:	f000 fb8d 	bl	800e55c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>
 800de42:	4603      	mov	r3, r0
 800de44:	4619      	mov	r1, r3
 800de46:	4620      	mov	r0, r4
 800de48:	f000 fb9f 	bl	800e58a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f103 040c 	add.w	r4, r3, #12
 800de52:	6838      	ldr	r0, [r7, #0]
 800de54:	f000 fb8d 	bl	800e572 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>
 800de58:	4603      	mov	r3, r0
 800de5a:	4619      	mov	r1, r3
 800de5c:	4620      	mov	r0, r4
 800de5e:	f000 fba3 	bl	800e5a8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	4618      	mov	r0, r3
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd90      	pop	{r4, r7, pc}

0800de6c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	6879      	ldr	r1, [r7, #4]
 800de7e:	4618      	mov	r0, r3
 800de80:	f000 fba1 	bl	800e5c6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800de84:	eef0 7a40 	vmov.f32	s15, s0
 800de88:	eeb0 0a67 	vmov.f32	s0, s15
 800de8c:	3710      	adds	r7, #16
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800de92:	b580      	push	{r7, lr}
 800de94:	b082      	sub	sp, #8
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
 800de9a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800de9c:	2201      	movs	r2, #1
 800de9e:	2100      	movs	r1, #0
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7ff ffe3 	bl	800de6c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800dea6:	eef0 7a40 	vmov.f32	s15, s0
  }
 800deaa:	eeb0 0a67 	vmov.f32	s0, s15
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800debe:	2202      	movs	r2, #2
 800dec0:	2100      	movs	r1, #0
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f7ff ffd2 	bl	800de6c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800dec8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800decc:	eeb0 0a67 	vmov.f32	s0, s15
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b086      	sub	sp, #24
 800deda:	af00      	add	r7, sp, #0
 800dedc:	60f8      	str	r0, [r7, #12]
 800dede:	60b9      	str	r1, [r7, #8]
 800dee0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	68b9      	ldr	r1, [r7, #8]
 800deea:	6978      	ldr	r0, [r7, #20]
 800deec:	f000 fb9b 	bl	800e626 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800def0:	bf00      	nop
 800def2:	3718      	adds	r7, #24
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800df04:	68b8      	ldr	r0, [r7, #8]
 800df06:	f7f7 f9df 	bl	80052c8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800df0a:	4603      	mov	r3, r0
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	4619      	mov	r1, r3
 800df10:	68f8      	ldr	r0, [r7, #12]
 800df12:	f000 fbc3 	bl	800e69c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>
}
 800df16:	68f8      	ldr	r0, [r7, #12]
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800df1e:	b5b0      	push	{r4, r5, r7, lr}
 800df20:	b086      	sub	sp, #24
 800df22:	af00      	add	r7, sp, #0
 800df24:	60f8      	str	r0, [r7, #12]
 800df26:	60b9      	str	r1, [r7, #8]
 800df28:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800df2a:	68b8      	ldr	r0, [r7, #8]
 800df2c:	f7fd f924 	bl	800b178 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800df30:	4604      	mov	r4, r0
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 fbda 	bl	800e6ec <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>
 800df38:	4605      	mov	r5, r0
 800df3a:	f107 0314 	add.w	r3, r7, #20
 800df3e:	4618      	mov	r0, r3
 800df40:	f7f6 ff52 	bl	8004de8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800df44:	f107 0314 	add.w	r3, r7, #20
 800df48:	462a      	mov	r2, r5
 800df4a:	4621      	mov	r1, r4
 800df4c:	68f8      	ldr	r0, [r7, #12]
 800df4e:	f000 fc07 	bl	800e760 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	3718      	adds	r7, #24
 800df56:	46bd      	mov	sp, r7
 800df58:	bdb0      	pop	{r4, r5, r7, pc}

0800df5a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b082      	sub	sp, #8
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f000 fc5a 	bl	800e81c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800df68:	4603      	mov	r3, r0
 800df6a:	4618      	mov	r0, r3
 800df6c:	f000 fc61 	bl	800e832 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>
 800df70:	4603      	mov	r3, r0
 800df72:	4618      	mov	r0, r3
 800df74:	3708      	adds	r7, #8
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800df7a:	b590      	push	{r4, r7, lr}
 800df7c:	b085      	sub	sp, #20
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 fc4a 	bl	800e81c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800df88:	4604      	mov	r4, r0
 800df8a:	f107 030c 	add.w	r3, r7, #12
 800df8e:	4618      	mov	r0, r3
 800df90:	f7f7 fa21 	bl	80053d6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800df94:	f107 030c 	add.w	r3, r7, #12
 800df98:	4619      	mov	r1, r3
 800df9a:	4620      	mov	r0, r4
 800df9c:	f000 fcc6 	bl	800e92c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800dfa0:	eef0 7a40 	vmov.f32	s15, s0
 800dfa4:	bf00      	nop
}
 800dfa6:	eeb0 0a67 	vmov.f32	s0, s15
 800dfaa:	3714      	adds	r7, #20
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd90      	pop	{r4, r7, pc}

0800dfb0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800dfb8:	2201      	movs	r2, #1
 800dfba:	2101      	movs	r1, #1
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f7fe fa54 	bl	800c46a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 fcf8 	bl	800e9b8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>
  }
 800dfc8:	bf00      	nop
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 fcfd 	bl	800e9d8 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>:
class dense_product_base
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f7ff ffed 	bl	800dfd0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	4618      	mov	r0, r3
 800dffa:	3708      	adds	r7, #8
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f7ff ffed 	bl	800dfe8 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4618      	mov	r0, r3
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800e018:	b590      	push	{r4, r7, lr}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f7ff ffeb 	bl	800e000 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	68ba      	ldr	r2, [r7, #8]
 800e02e:	601a      	str	r2, [r3, #0]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	3304      	adds	r3, #4
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	6812      	ldr	r2, [r2, #0]
 800e038:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7f6 fc27 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e042:	4604      	mov	r4, r0
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f7f7 facc 	bl	80055e2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800e04a:	4603      	mov	r3, r0
 800e04c:	429c      	cmp	r4, r3
 800e04e:	d005      	beq.n	800e05c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x44>
 800e050:	4b05      	ldr	r3, [pc, #20]	; (800e068 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x50>)
 800e052:	4a06      	ldr	r2, [pc, #24]	; (800e06c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x54>)
 800e054:	2160      	movs	r1, #96	; 0x60
 800e056:	4806      	ldr	r0, [pc, #24]	; (800e070 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x58>)
 800e058:	f00f fda4 	bl	801dba4 <__assert_func>
 800e05c:	bf00      	nop
    }
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	4618      	mov	r0, r3
 800e062:	3714      	adds	r7, #20
 800e064:	46bd      	mov	sp, r7
 800e066:	bd90      	pop	{r4, r7, pc}
 800e068:	0801fccc 	.word	0x0801fccc
 800e06c:	08026b3c 	.word	0x08026b3c
 800e070:	0802001c 	.word	0x0802001c

0800e074 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800e080:	68b9      	ldr	r1, [r7, #8]
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f000 fcb3 	bl	800e9ee <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	68b9      	ldr	r1, [r7, #8]
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	f000 fd12 	bl	800eab6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e092:	bf00      	nop
 800e094:	3710      	adds	r7, #16
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800e09a:	b5b0      	push	{r4, r5, r7, lr}
 800e09c:	b084      	sub	sp, #16
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7fd fab8 	bl	800b61a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	6838      	ldr	r0, [r7, #0]
 800e0ae:	f7f7 fc41 	bl	8005934 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	f107 030c 	add.w	r3, r7, #12
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7f8 fc24 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800e0be:	f107 030c 	add.w	r3, r7, #12
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	4629      	mov	r1, r5
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f000 fd2d 	bl	800eb26 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f7fd faa4 	bl	800b61a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800e0d2:	4603      	mov	r3, r0
    }
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bdb0      	pop	{r4, r5, r7, pc}

0800e0dc <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
    }
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	370c      	adds	r7, #12
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr

0800e0f2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e0f2:	b480      	push	{r7}
 800e0f4:	b083      	sub	sp, #12
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
 800e0fa:	6039      	str	r1, [r7, #0]
    {}
 800e0fc:	bf00      	nop
 800e0fe:	370c      	adds	r7, #12
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e108:	b480      	push	{r7}
 800e10a:	b083      	sub	sp, #12
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
    }
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	4618      	mov	r0, r3
 800e114:	370c      	adds	r7, #12
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr

0800e11e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e11e:	b480      	push	{r7}
 800e120:	b083      	sub	sp, #12
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
 800e126:	6039      	str	r1, [r7, #0]
    {}
 800e128:	bf00      	nop
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr

0800e134 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	4618      	mov	r0, r3
 800e140:	370c      	adds	r7, #12
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr

0800e14a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e14a:	b590      	push	{r4, r7, lr}
 800e14c:	b083      	sub	sp, #12
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
 800e152:	6039      	str	r1, [r7, #0]
 800e154:	687c      	ldr	r4, [r7, #4]
 800e156:	6838      	ldr	r0, [r7, #0]
 800e158:	f000 fcf6 	bl	800eb48 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>
 800e15c:	4603      	mov	r3, r0
 800e15e:	4619      	mov	r1, r3
 800e160:	4620      	mov	r0, r4
 800e162:	f7f6 fecb 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	1d1c      	adds	r4, r3, #4
 800e16a:	6838      	ldr	r0, [r7, #0]
 800e16c:	f000 fcf8 	bl	800eb60 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>
 800e170:	4603      	mov	r3, r0
 800e172:	4619      	mov	r1, r3
 800e174:	4620      	mov	r0, r4
 800e176:	f000 fd0a 	bl	800eb8e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f103 040c 	add.w	r4, r3, #12
 800e180:	6838      	ldr	r0, [r7, #0]
 800e182:	f000 fcf8 	bl	800eb76 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>
 800e186:	4603      	mov	r3, r0
 800e188:	4619      	mov	r1, r3
 800e18a:	4620      	mov	r0, r4
 800e18c:	f000 fd0e 	bl	800ebac <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4618      	mov	r0, r3
 800e194:	370c      	adds	r7, #12
 800e196:	46bd      	mov	sp, r7
 800e198:	bd90      	pop	{r4, r7, pc}

0800e19a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e19a:	b590      	push	{r4, r7, lr}
 800e19c:	b087      	sub	sp, #28
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	60f8      	str	r0, [r7, #12]
 800e1a2:	60b9      	str	r1, [r7, #8]
 800e1a4:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f000 fd0e 	bl	800ebca <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800e1ae:	4604      	mov	r4, r0
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	68b9      	ldr	r1, [r7, #8]
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f000 fd11 	bl	800ebe0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e1be:	eef0 7a40 	vmov.f32	s15, s0
 800e1c2:	edc7 7a04 	vstr	s15, [r7, #16]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	330c      	adds	r3, #12
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	68b9      	ldr	r1, [r7, #8]
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f000 fd19 	bl	800ec06 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>
 800e1d4:	eef0 7a40 	vmov.f32	s15, s0
 800e1d8:	edc7 7a05 	vstr	s15, [r7, #20]
 800e1dc:	f107 0214 	add.w	r2, r7, #20
 800e1e0:	f107 0310 	add.w	r3, r7, #16
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f000 fd2e 	bl	800ec48 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e1ec:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e1f0:	eeb0 0a67 	vmov.f32	s0, s15
 800e1f4:	371c      	adds	r7, #28
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd90      	pop	{r4, r7, pc}

0800e1fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e1fa:	b480      	push	{r7}
 800e1fc:	b083      	sub	sp, #12
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4618      	mov	r0, r3
 800e208:	370c      	adds	r7, #12
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr

0800e212 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e212:	b580      	push	{r7, lr}
 800e214:	b086      	sub	sp, #24
 800e216:	af00      	add	r7, sp, #0
 800e218:	60f8      	str	r0, [r7, #12]
 800e21a:	60b9      	str	r1, [r7, #8]
 800e21c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	68b9      	ldr	r1, [r7, #8]
 800e226:	6978      	ldr	r0, [r7, #20]
 800e228:	f000 fd23 	bl	800ec72 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800e22c:	bf00      	nop
 800e22e:	3718      	adds	r7, #24
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	3304      	adds	r3, #4
 800e240:	4618      	mov	r0, r3
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr

0800e24c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b086      	sub	sp, #24
 800e250:	af00      	add	r7, sp, #0
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e25c:	687a      	ldr	r2, [r7, #4]
 800e25e:	68b9      	ldr	r1, [r7, #8]
 800e260:	6978      	ldr	r0, [r7, #20]
 800e262:	f000 fd19 	bl	800ec98 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800e266:	bf00      	nop
 800e268:	3718      	adds	r7, #24
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800e26e:	b480      	push	{r7}
 800e270:	b083      	sub	sp, #12
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4618      	mov	r0, r3
 800e27c:	370c      	adds	r7, #12
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr

0800e286 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800e286:	b480      	push	{r7}
 800e288:	b083      	sub	sp, #12
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	4618      	mov	r0, r3
 800e294:	370c      	adds	r7, #12
 800e296:	46bd      	mov	sp, r7
 800e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29c:	4770      	bx	lr

0800e29e <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b088      	sub	sp, #32
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	60f8      	str	r0, [r7, #12]
 800e2a6:	60b9      	str	r1, [r7, #8]
 800e2a8:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::sub_assign_op<typename Dst::Scalar,Scalar>());
 800e2aa:	f107 0314 	add.w	r3, r7, #20
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	68b9      	ldr	r1, [r7, #8]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f000 fd2a 	bl	800ed0c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 800e2b8:	f107 031c 	add.w	r3, r7, #28
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7fe ff91 	bl	800d1e4 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800e2c2:	f107 021c 	add.w	r2, r7, #28
 800e2c6:	f107 0314 	add.w	r3, r7, #20
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	68f8      	ldr	r0, [r7, #12]
 800e2ce:	f000 fd34 	bl	800ed3a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e2d2:	bf00      	nop
 800e2d4:	3720      	adds	r7, #32
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}

0800e2da <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 800e2da:	b580      	push	{r7, lr}
 800e2dc:	b082      	sub	sp, #8
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	6078      	str	r0, [r7, #4]
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 fd3a 	bl	800ed5c <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3708      	adds	r7, #8
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
	...

0800e2f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	60b9      	str	r1, [r7, #8]
 800e2fe:	607a      	str	r2, [r7, #4]
 800e300:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e302:	68f8      	ldr	r0, [r7, #12]
 800e304:	f7ff ffe9 	bl	800e2da <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	68ba      	ldr	r2, [r7, #8]
 800e30c:	601a      	str	r2, [r3, #0]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	3304      	adds	r3, #4
 800e312:	6879      	ldr	r1, [r7, #4]
 800e314:	4618      	mov	r0, r3
 800e316:	f7f8 f851 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	3305      	adds	r3, #5
 800e31e:	6839      	ldr	r1, [r7, #0]
 800e320:	4618      	mov	r0, r3
 800e322:	f7f8 f865 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d011      	beq.n	800e350 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	db08      	blt.n	800e344 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2b03      	cmp	r3, #3
 800e336:	d105      	bne.n	800e344 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	db02      	blt.n	800e344 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d005      	beq.n	800e350 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e344:	4b07      	ldr	r3, [pc, #28]	; (800e364 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800e346:	4a08      	ldr	r2, [pc, #32]	; (800e368 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800e348:	21b0      	movs	r1, #176	; 0xb0
 800e34a:	4808      	ldr	r0, [pc, #32]	; (800e36c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800e34c:	f00f fc2a 	bl	801dba4 <__assert_func>
      checkSanity<Derived>();
 800e350:	2100      	movs	r1, #0
 800e352:	68f8      	ldr	r0, [r7, #12]
 800e354:	f000 fd0d 	bl	800ed72 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	4618      	mov	r0, r3
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	08026130 	.word	0x08026130
 800e368:	08026c88 	.word	0x08026c88
 800e36c:	080262e0 	.word	0x080262e0

0800e370 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800e370:	b580      	push	{r7, lr}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	689b      	ldr	r3, [r3, #8]
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7f9 fe05 	bl	8007f8c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800e382:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	615a      	str	r2, [r3, #20]
    }
 800e388:	bf00      	nop
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	6039      	str	r1, [r7, #0]
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 fcf4 	bl	800ed88 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6839      	ldr	r1, [r7, #0]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f000 fcfa 	bl	800ed9e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e3be:	2200      	movs	r2, #0
 800e3c0:	2100      	movs	r1, #0
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 fd13 	bl	800edee <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e3c8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e3cc:	eeb0 0a67 	vmov.f32	s0, s15
 800e3d0:	3708      	adds	r7, #8
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}

0800e3d6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800e3d6:	b580      	push	{r7, lr}
 800e3d8:	b084      	sub	sp, #16
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	6078      	str	r0, [r7, #4]
 800e3de:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e3e0:	6839      	ldr	r1, [r7, #0]
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 fd16 	bl	800ee14 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>
 800e3e8:	eef0 7a40 	vmov.f32	s15, s0
 800e3ec:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800e3f0:	6839      	ldr	r1, [r7, #0]
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 fd1f 	bl	800ee36 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>
 800e3f8:	eef0 7a40 	vmov.f32	s15, s0
 800e3fc:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e400:	f107 020c 	add.w	r2, r7, #12
 800e404:	f107 0308 	add.w	r3, r7, #8
 800e408:	4619      	mov	r1, r3
 800e40a:	6838      	ldr	r0, [r7, #0]
 800e40c:	f7fa fbdb 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800e410:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e414:	eeb0 0a67 	vmov.f32	s0, s15
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e41e:	b580      	push	{r7, lr}
 800e420:	b082      	sub	sp, #8
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e426:	2202      	movs	r2, #2
 800e428:	2102      	movs	r1, #2
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f7fb fe2e 	bl	800a08c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 fd11 	bl	800ee58 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800e436:	bf00      	nop
 800e438:	3708      	adds	r7, #8
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e43e:	b480      	push	{r7}
 800e440:	b083      	sub	sp, #12
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
    }
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	4618      	mov	r0, r3
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
    {}
 800e45e:	bf00      	nop
 800e460:	370c      	adds	r7, #12
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr

0800e46a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e46a:	b480      	push	{r7}
 800e46c:	b083      	sub	sp, #12
 800e46e:	af00      	add	r7, sp, #0
 800e470:	6078      	str	r0, [r7, #4]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	4618      	mov	r0, r3
 800e476:	370c      	adds	r7, #12
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr

0800e480 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e480:	b590      	push	{r4, r7, lr}
 800e482:	b083      	sub	sp, #12
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
 800e48a:	687c      	ldr	r4, [r7, #4]
 800e48c:	6838      	ldr	r0, [r7, #0]
 800e48e:	f000 fced 	bl	800ee6c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>
 800e492:	4603      	mov	r3, r0
 800e494:	4619      	mov	r1, r3
 800e496:	4620      	mov	r0, r4
 800e498:	f7f6 fd30 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	1d1c      	adds	r4, r3, #4
 800e4a0:	6838      	ldr	r0, [r7, #0]
 800e4a2:	f000 fcef 	bl	800ee84 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	f000 fd02 	bl	800eeb4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f103 0420 	add.w	r4, r3, #32
 800e4b6:	6838      	ldr	r0, [r7, #0]
 800e4b8:	f000 fcf0 	bl	800ee9c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	4619      	mov	r1, r3
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	f000 fd06 	bl	800eed2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd90      	pop	{r4, r7, pc}

0800e4d0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e4d0:	b590      	push	{r4, r7, lr}
 800e4d2:	b087      	sub	sp, #28
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f000 fd06 	bl	800eef0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3304      	adds	r3, #4
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	68b9      	ldr	r1, [r7, #8]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 fd09 	bl	800ef06 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e4f4:	eef0 7a40 	vmov.f32	s15, s0
 800e4f8:	edc7 7a04 	vstr	s15, [r7, #16]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	3320      	adds	r3, #32
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	68b9      	ldr	r1, [r7, #8]
 800e504:	4618      	mov	r0, r3
 800e506:	f000 fd11 	bl	800ef2c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 800e50a:	eef0 7a40 	vmov.f32	s15, s0
 800e50e:	edc7 7a05 	vstr	s15, [r7, #20]
 800e512:	f107 0214 	add.w	r2, r7, #20
 800e516:	f107 0310 	add.w	r3, r7, #16
 800e51a:	4619      	mov	r1, r3
 800e51c:	4620      	mov	r0, r4
 800e51e:	f000 fb93 	bl	800ec48 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e522:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e526:	eeb0 0a67 	vmov.f32	s0, s15
 800e52a:	371c      	adds	r7, #28
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd90      	pop	{r4, r7, pc}

0800e530 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800e530:	b480      	push	{r7}
 800e532:	b083      	sub	sp, #12
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	bf00      	nop
 800e53a:	370c      	adds	r7, #12
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr

0800e544 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800e544:	b480      	push	{r7}
 800e546:	b083      	sub	sp, #12
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	3330      	adds	r3, #48	; 0x30
 800e550:	4618      	mov	r0, r3
 800e552:	370c      	adds	r7, #12
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr

0800e55c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e55c:	b480      	push	{r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	4618      	mov	r0, r3
 800e568:	370c      	adds	r7, #12
 800e56a:	46bd      	mov	sp, r7
 800e56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e570:	4770      	bx	lr

0800e572 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800e572:	b480      	push	{r7}
 800e574:	b083      	sub	sp, #12
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	3318      	adds	r3, #24
 800e57e:	4618      	mov	r0, r3
 800e580:	370c      	adds	r7, #12
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr

0800e58a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800e58a:	b580      	push	{r7, lr}
 800e58c:	b082      	sub	sp, #8
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
 800e592:	6039      	str	r1, [r7, #0]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6839      	ldr	r1, [r7, #0]
 800e598:	4618      	mov	r0, r3
 800e59a:	f000 fce8 	bl	800ef6e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>:
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6839      	ldr	r1, [r7, #0]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f000 fce8 	bl	800ef8c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3708      	adds	r7, #8
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e5c6:	b590      	push	{r4, r7, lr}
 800e5c8:	b087      	sub	sp, #28
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	60f8      	str	r0, [r7, #12]
 800e5ce:	60b9      	str	r1, [r7, #8]
 800e5d0:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f000 fce8 	bl	800efaa <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800e5da:	4604      	mov	r4, r0
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	3304      	adds	r3, #4
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	68b9      	ldr	r1, [r7, #8]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f000 fceb 	bl	800efc0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e5ea:	eef0 7a40 	vmov.f32	s15, s0
 800e5ee:	edc7 7a04 	vstr	s15, [r7, #16]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	330c      	adds	r3, #12
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	68b9      	ldr	r1, [r7, #8]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f000 fcf3 	bl	800efe6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>
 800e600:	eef0 7a40 	vmov.f32	s15, s0
 800e604:	edc7 7a05 	vstr	s15, [r7, #20]
 800e608:	f107 0214 	add.w	r2, r7, #20
 800e60c:	f107 0310 	add.w	r3, r7, #16
 800e610:	4619      	mov	r1, r3
 800e612:	4620      	mov	r0, r4
 800e614:	f000 fb18 	bl	800ec48 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e618:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e61c:	eeb0 0a67 	vmov.f32	s0, s15
 800e620:	371c      	adds	r7, #28
 800e622:	46bd      	mov	sp, r7
 800e624:	bd90      	pop	{r4, r7, pc}

0800e626 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800e626:	b590      	push	{r4, r7, lr}
 800e628:	b087      	sub	sp, #28
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	60f8      	str	r0, [r7, #12]
 800e62e:	60b9      	str	r1, [r7, #8]
 800e630:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800e632:	68b8      	ldr	r0, [r7, #8]
 800e634:	f7f7 ff9e 	bl	8006574 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800e638:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800e63a:	68b8      	ldr	r0, [r7, #8]
 800e63c:	f7f6 fe73 	bl	8005326 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800e640:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	4618      	mov	r0, r3
 800e646:	f7f6 f92e 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800e64a:	4602      	mov	r2, r0
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	4293      	cmp	r3, r2
 800e650:	d107      	bne.n	800e662 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x3c>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	4618      	mov	r0, r3
 800e656:	f7f6 f91b 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e65a:	4602      	mov	r2, r0
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	4293      	cmp	r3, r2
 800e660:	d001      	beq.n	800e666 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x40>
 800e662:	2301      	movs	r3, #1
 800e664:	e000      	b.n	800e668 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x42>
 800e666:	2300      	movs	r3, #0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d005      	beq.n	800e678 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x52>
      dst.resize(dstRows, dstCols);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	693a      	ldr	r2, [r7, #16]
 800e670:	6979      	ldr	r1, [r7, #20]
 800e672:	4618      	mov	r0, r3
 800e674:	f7f9 f830 	bl	80076d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800e678:	68b8      	ldr	r0, [r7, #8]
 800e67a:	f000 fcd5 	bl	800f028 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>
 800e67e:	4604      	mov	r4, r0
 800e680:	68b8      	ldr	r0, [r7, #8]
 800e682:	f000 fcdd 	bl	800f040 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>
 800e686:	4603      	mov	r3, r0
 800e688:	461a      	mov	r2, r3
 800e68a:	4621      	mov	r1, r4
 800e68c:	68f8      	ldr	r0, [r7, #12]
 800e68e:	f000 fce3 	bl	800f058 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>
  }
 800e692:	bf00      	nop
 800e694:	371c      	adds	r7, #28
 800e696:	46bd      	mov	sp, r7
 800e698:	bd90      	pop	{r4, r7, pc}
	...

0800e69c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	607a      	str	r2, [r7, #4]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	68b9      	ldr	r1, [r7, #8]
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f000 fcf0 	bl	800f094 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	db06      	blt.n	800e6c8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x2c>
 800e6ba:	68b8      	ldr	r0, [r7, #8]
 800e6bc:	f7f7 ff68 	bl	8006590 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	db05      	blt.n	800e6d4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x38>
 800e6c8:	4b05      	ldr	r3, [pc, #20]	; (800e6e0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x44>)
 800e6ca:	4a06      	ldr	r2, [pc, #24]	; (800e6e4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x48>)
 800e6cc:	2178      	movs	r1, #120	; 0x78
 800e6ce:	4806      	ldr	r0, [pc, #24]	; (800e6e8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x4c>)
 800e6d0:	f00f fa68 	bl	801dba4 <__assert_func>
    }
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	08024590 	.word	0x08024590
 800e6e4:	08026d8c 	.word	0x08026d8c
 800e6e8:	08024714 	.word	0x08024714

0800e6ec <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	370c      	adds	r7, #12
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 800e702:	b580      	push	{r7, lr}
 800e704:	b082      	sub	sp, #8
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 fcd3 	bl	800f0b6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	4618      	mov	r0, r3
 800e714:	3708      	adds	r7, #8
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}

0800e71a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b082      	sub	sp, #8
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f7ff ffed 	bl	800e702 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	4618      	mov	r0, r3
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800e732:	b580      	push	{r7, lr}
 800e734:	b082      	sub	sp, #8
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
 800e73a:	f7f7 fe7e 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800e73e:	4603      	mov	r3, r0
 800e740:	4618      	mov	r0, r3
 800e742:	3708      	adds	r7, #8
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	f7f7 fe7b 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800e754:	4603      	mov	r3, r0
 800e756:	4618      	mov	r0, r3
 800e758:	3708      	adds	r7, #8
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
	...

0800e760 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800e760:	b5b0      	push	{r4, r5, r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	607a      	str	r2, [r7, #4]
 800e76c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800e76e:	68f8      	ldr	r0, [r7, #12]
 800e770:	f7ff ffd3 	bl	800e71a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>
 800e774:	68fa      	ldr	r2, [r7, #12]
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	4614      	mov	r4, r2
 800e77a:	461d      	mov	r5, r3
 800e77c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e77e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e780:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e784:	e884 0003 	stmia.w	r4, {r0, r1}
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f103 0218 	add.w	r2, r3, #24
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	4614      	mov	r4, r2
 800e792:	461d      	mov	r5, r3
 800e794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e798:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e79c:	e884 0003 	stmia.w	r4, {r0, r1}
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	3330      	adds	r3, #48	; 0x30
 800e7a4:	6839      	ldr	r1, [r7, #0]
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7f6 fba8 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800e7ac:	68b8      	ldr	r0, [r7, #8]
 800e7ae:	f7fc fd11 	bl	800b1d4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7ff ffbb 	bl	800e732 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	429c      	cmp	r4, r3
 800e7c0:	d10a      	bne.n	800e7d8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 800e7c2:	68b8      	ldr	r0, [r7, #8]
 800e7c4:	f7fc fd13 	bl	800b1ee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800e7c8:	4604      	mov	r4, r0
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7ff ffbb 	bl	800e748 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	429c      	cmp	r4, r3
 800e7d6:	d005      	beq.n	800e7e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 800e7d8:	4b05      	ldr	r3, [pc, #20]	; (800e7f0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 800e7da:	4a06      	ldr	r2, [pc, #24]	; (800e7f4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 800e7dc:	2174      	movs	r1, #116	; 0x74
 800e7de:	4806      	ldr	r0, [pc, #24]	; (800e7f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 800e7e0:	f00f f9e0 	bl	801dba4 <__assert_func>
    }
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bdb0      	pop	{r4, r5, r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	0801fa0c 	.word	0x0801fa0c
 800e7f4:	08026e7c 	.word	0x08026e7c
 800e7f8:	0801fc70 	.word	0x0801fc70

0800e7fc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 f809 	bl	800e81c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e80a:	4603      	mov	r3, r0
 800e80c:	4618      	mov	r0, r3
 800e80e:	f000 fc5d 	bl	800f0cc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>
 800e812:	4603      	mov	r3, r0
 800e814:	4618      	mov	r0, r3
 800e816:	3708      	adds	r7, #8
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	4618      	mov	r0, r3
 800e828:	370c      	adds	r7, #12
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr

0800e832 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800e832:	b580      	push	{r7, lr}
 800e834:	b082      	sub	sp, #8
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fc fcc9 	bl	800b1d4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800e842:	4603      	mov	r3, r0
    }
 800e844:	4618      	mov	r0, r3
 800e846:	3708      	adds	r7, #8
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f000 fc60 	bl	800f11a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4618      	mov	r0, r3
 800e85e:	3708      	adds	r7, #8
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4618      	mov	r0, r3
 800e870:	f7ff ffec 	bl	800e84c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	4618      	mov	r0, r3
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}

0800e87e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800e87e:	b580      	push	{r7, lr}
 800e880:	b082      	sub	sp, #8
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	4618      	mov	r0, r3
 800e88a:	f7ff ffeb 	bl	800e864 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	4618      	mov	r0, r3
 800e892:	3708      	adds	r7, #8
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7ff ffeb 	bl	800e87e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3708      	adds	r7, #8
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b082      	sub	sp, #8
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	330c      	adds	r3, #12
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7ff ffea 	bl	800e898 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	3304      	adds	r3, #4
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fc fd79 	bl	800b3c0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7ff ffe5 	bl	800e8b2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f000 fc0b 	bl	800f104 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3708      	adds	r7, #8
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	4618      	mov	r0, r3
 800e904:	f7ff ffe8 	bl	800e8d8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4618      	mov	r0, r3
 800e90c:	3708      	adds	r7, #8
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800e912:	b580      	push	{r7, lr}
 800e914:	b082      	sub	sp, #8
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7ff ffeb 	bl	800e8f8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	4618      	mov	r0, r3
 800e926:	3708      	adds	r7, #8
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800e92c:	b580      	push	{r7, lr}
 800e92e:	ed2d 8b02 	vpush	{d8}
 800e932:	b088      	sub	sp, #32
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f7ff fb0d 	bl	800df5a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>
 800e940:	4603      	mov	r3, r0
 800e942:	2b00      	cmp	r3, #0
 800e944:	dd05      	ble.n	800e952 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f7ff ff58 	bl	800e7fc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>
 800e94c:	4603      	mov	r3, r0
 800e94e:	2b00      	cmp	r3, #0
 800e950:	dc06      	bgt.n	800e960 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800e952:	4b16      	ldr	r3, [pc, #88]	; (800e9ac <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800e954:	4a16      	ldr	r2, [pc, #88]	; (800e9b0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800e956:	f240 119b 	movw	r1, #411	; 0x19b
 800e95a:	4816      	ldr	r0, [pc, #88]	; (800e9b4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800e95c:	f00f f922 	bl	801dba4 <__assert_func>
 800e960:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f7ff ff5a 	bl	800e81c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e968:	4602      	mov	r2, r0
 800e96a:	f107 030c 	add.w	r3, r7, #12
 800e96e:	4611      	mov	r1, r2
 800e970:	4618      	mov	r0, r3
 800e972:	f000 fbb8 	bl	800f0e6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f7ff ff50 	bl	800e81c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e97c:	4602      	mov	r2, r0
 800e97e:	f107 030c 	add.w	r3, r7, #12
 800e982:	6839      	ldr	r1, [r7, #0]
 800e984:	4618      	mov	r0, r3
 800e986:	f000 fbd3 	bl	800f130 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800e98a:	eeb0 8a40 	vmov.f32	s16, s0
 800e98e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800e990:	f107 030c 	add.w	r3, r7, #12
 800e994:	4618      	mov	r0, r3
 800e996:	f7ff ffbc 	bl	800e912 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800e99a:	eef0 7a48 	vmov.f32	s15, s16
}
 800e99e:	eeb0 0a67 	vmov.f32	s0, s15
 800e9a2:	3720      	adds	r7, #32
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	ecbd 8b02 	vpop	{d8}
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	08024a8c 	.word	0x08024a8c
 800e9b0:	080270ec 	.word	0x080270ec
 800e9b4:	08024c98 	.word	0x08024c98

0800e9b8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e9c0:	2202      	movs	r2, #2
 800e9c2:	2101      	movs	r1, #1
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f7fd fd50 	bl	800c46a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 fbc1 	bl	800f152 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>
  }
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
    }
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	370c      	adds	r7, #12
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr

0800e9ee <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800e9ee:	b480      	push	{r7}
 800e9f0:	b083      	sub	sp, #12
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	6039      	str	r1, [r7, #0]
}
 800e9f8:	bf00      	nop
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 fbd5 	bl	800f1bc <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4618      	mov	r0, r3
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7ff ffec 	bl	800ea04 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b082      	sub	sp, #8
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7ff ffeb 	bl	800ea1c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f000 fbad 	bl	800f1a6 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b082      	sub	sp, #8
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7ff ffe8 	bl	800ea36 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3708      	adds	r7, #8
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	330c      	adds	r3, #12
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7ff ffea 	bl	800ea56 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	3308      	adds	r3, #8
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7f8 f995 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 fb7f 	bl	800f190 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	4618      	mov	r0, r3
 800ea96:	3708      	adds	r7, #8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7ff ffe2 	bl	800ea70 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4618      	mov	r0, r3
 800eab0:	3708      	adds	r7, #8
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}

0800eab6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800eab6:	b580      	push	{r7, lr}
 800eab8:	b090      	sub	sp, #64	; 0x40
 800eaba:	af02      	add	r7, sp, #8
 800eabc:	60f8      	str	r0, [r7, #12]
 800eabe:	60b9      	str	r1, [r7, #8]
 800eac0:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800eac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eac6:	68b9      	ldr	r1, [r7, #8]
 800eac8:	4618      	mov	r0, r3
 800eaca:	f000 fb52 	bl	800f172 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	68b9      	ldr	r1, [r7, #8]
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f000 fb9a 	bl	800f20c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800ead8:	f107 0320 	add.w	r3, r7, #32
 800eadc:	68f9      	ldr	r1, [r7, #12]
 800eade:	4618      	mov	r0, r3
 800eae0:	f7f7 fc2d 	bl	800633e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800eae4:	68f8      	ldr	r0, [r7, #12]
 800eae6:	f7f8 fc6b 	bl	80073c0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800eaea:	4603      	mov	r3, r0
 800eaec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800eaf0:	f107 0120 	add.w	r1, r7, #32
 800eaf4:	f107 0010 	add.w	r0, r7, #16
 800eaf8:	9300      	str	r3, [sp, #0]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f000 fbd0 	bl	800f2a0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800eb00:	f107 0310 	add.w	r3, r7, #16
 800eb04:	4618      	mov	r0, r3
 800eb06:	f000 fbe5 	bl	800f2d4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800eb0a:	f107 0320 	add.w	r3, r7, #32
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7f6 f8db 	bl	8004cca <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800eb14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7ff ffbf 	bl	800ea9c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
}
 800eb1e:	bf00      	nop
 800eb20:	3738      	adds	r7, #56	; 0x38
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800eb26:	b580      	push	{r7, lr}
 800eb28:	b086      	sub	sp, #24
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	60f8      	str	r0, [r7, #12]
 800eb2e:	60b9      	str	r1, [r7, #8]
 800eb30:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	68b9      	ldr	r1, [r7, #8]
 800eb3a:	6978      	ldr	r0, [r7, #20]
 800eb3c:	f000 fbd5 	bl	800f2ea <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>
}
 800eb40:	bf00      	nop
 800eb42:	3718      	adds	r7, #24
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	332c      	adds	r3, #44	; 0x2c
 800eb54:	4618      	mov	r0, r3
 800eb56:	370c      	adds	r7, #12
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	370c      	adds	r7, #12
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr

0800eb76 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800eb76:	b480      	push	{r7}
 800eb78:	b083      	sub	sp, #12
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	3318      	adds	r3, #24
 800eb82:	4618      	mov	r0, r3
 800eb84:	370c      	adds	r7, #12
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr

0800eb8e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800eb8e:	b580      	push	{r7, lr}
 800eb90:	b082      	sub	sp, #8
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	6078      	str	r0, [r7, #4]
 800eb96:	6039      	str	r1, [r7, #0]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6839      	ldr	r1, [r7, #0]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f000 fbb7 	bl	800f310 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4618      	mov	r0, r3
 800eba6:	3708      	adds	r7, #8
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}

0800ebac <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>:
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6839      	ldr	r1, [r7, #0]
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f000 fbb7 	bl	800f32e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3708      	adds	r7, #8
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800ebca:	b480      	push	{r7}
 800ebcc:	b083      	sub	sp, #12
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	370c      	adds	r7, #12
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr

0800ebe0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	68ba      	ldr	r2, [r7, #8]
 800ebf0:	6879      	ldr	r1, [r7, #4]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f000 fbaa 	bl	800f34c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>
 800ebf8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ebfc:	eeb0 0a67 	vmov.f32	s0, s15
 800ec00:	3710      	adds	r7, #16
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ec06:	b5b0      	push	{r4, r5, r7, lr}
 800ec08:	b084      	sub	sp, #16
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	60f8      	str	r0, [r7, #12]
 800ec0e:	60b9      	str	r1, [r7, #8]
 800ec10:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681c      	ldr	r4, [r3, #0]
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f000 fbb9 	bl	800f38e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	fb03 f502 	mul.w	r5, r3, r2
 800ec24:	68f8      	ldr	r0, [r7, #12]
 800ec26:	f000 fbbd 	bl	800f3a4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	fb02 f303 	mul.w	r3, r2, r3
 800ec32:	442b      	add	r3, r5
 800ec34:	009b      	lsls	r3, r3, #2
 800ec36:	4423      	add	r3, r4
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	ee07 3a90 	vmov	s15, r3
  }
 800ec3e:	eeb0 0a67 	vmov.f32	s0, s15
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bdb0      	pop	{r4, r5, r7, pc}

0800ec48 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800ec48:	b480      	push	{r7}
 800ec4a:	b085      	sub	sp, #20
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	607a      	str	r2, [r7, #4]
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	ed93 7a00 	vldr	s14, [r3]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	edd3 7a00 	vldr	s15, [r3]
 800ec60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec64:	eeb0 0a67 	vmov.f32	s0, s15
 800ec68:	3714      	adds	r7, #20
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr

0800ec72 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b084      	sub	sp, #16
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	60f8      	str	r0, [r7, #12]
 800ec7a:	60b9      	str	r1, [r7, #8]
 800ec7c:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800ec7e:	68b9      	ldr	r1, [r7, #8]
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f000 fb9a 	bl	800f3ba <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800ec86:	687a      	ldr	r2, [r7, #4]
 800ec88:	68b9      	ldr	r1, [r7, #8]
 800ec8a:	68f8      	ldr	r0, [r7, #12]
 800ec8c:	f000 fba0 	bl	800f3d0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800ec90:	bf00      	nop
 800ec92:	3710      	adds	r7, #16
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800ec98:	b590      	push	{r4, r7, lr}
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7f6 fded 	bl	8005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800ecac:	4604      	mov	r4, r0
 800ecae:	68b8      	ldr	r0, [r7, #8]
 800ecb0:	f7f6 ffb0 	bl	8005c14 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	429c      	cmp	r4, r3
 800ecb8:	d10a      	bne.n	800ecd0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7f6 fded 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	68b8      	ldr	r0, [r7, #8]
 800ecc6:	f7f6 ffb3 	bl	8005c30 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800ecca:	4603      	mov	r3, r0
 800eccc:	429c      	cmp	r4, r3
 800ecce:	d005      	beq.n	800ecdc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800ecd0:	4b0b      	ldr	r3, [pc, #44]	; (800ed00 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800ecd2:	4a0c      	ldr	r2, [pc, #48]	; (800ed04 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800ecd4:	21b0      	movs	r1, #176	; 0xb0
 800ecd6:	480c      	ldr	r0, [pc, #48]	; (800ed08 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800ecd8:	f00e ff64 	bl	801dba4 <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800ecdc:	68b8      	ldr	r0, [r7, #8]
 800ecde:	f000 fbaf 	bl	800f440 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 800ece2:	4604      	mov	r4, r0
 800ece4:	68b8      	ldr	r0, [r7, #8]
 800ece6:	f000 fbb7 	bl	800f458 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 800ecea:	4603      	mov	r3, r0
 800ecec:	461a      	mov	r2, r3
 800ecee:	4621      	mov	r1, r4
 800ecf0:	68f8      	ldr	r0, [r7, #12]
 800ecf2:	f000 fbbd 	bl	800f470 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>
  }
 800ecf6:	bf00      	nop
 800ecf8:	3714      	adds	r7, #20
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd90      	pop	{r4, r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	080227a0 	.word	0x080227a0
 800ed04:	080272c8 	.word	0x080272c8
 800ed08:	08022c98 	.word	0x08022c98

0800ed0c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800ed0c:	b590      	push	{r4, r7, lr}
 800ed0e:	b085      	sub	sp, #20
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800ed18:	68b8      	ldr	r0, [r7, #8]
 800ed1a:	f7f6 f806 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800ed1e:	4604      	mov	r4, r0
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7f6 fc9b 	bl	800565c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800ed26:	4603      	mov	r3, r0
 800ed28:	461a      	mov	r2, r3
 800ed2a:	4621      	mov	r1, r4
 800ed2c:	68f8      	ldr	r0, [r7, #12]
 800ed2e:	f000 fbf3 	bl	800f518 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>
}
 800ed32:	68f8      	ldr	r0, [r7, #12]
 800ed34:	3714      	adds	r7, #20
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd90      	pop	{r4, r7, pc}

0800ed3a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b086      	sub	sp, #24
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	60f8      	str	r0, [r7, #12]
 800ed42:	60b9      	str	r1, [r7, #8]
 800ed44:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800ed4a:	687a      	ldr	r2, [r7, #4]
 800ed4c:	68b9      	ldr	r1, [r7, #8]
 800ed4e:	6978      	ldr	r0, [r7, #20]
 800ed50:	f000 fc10 	bl	800f574 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800ed54:	bf00      	nop
 800ed56:	3718      	adds	r7, #24
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ed5c:	b480      	push	{r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
    }
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	4618      	mov	r0, r3
 800ed68:	370c      	adds	r7, #12
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed70:	4770      	bx	lr

0800ed72 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800ed72:	b480      	push	{r7}
 800ed74:	b083      	sub	sp, #12
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
 800ed7a:	6039      	str	r1, [r7, #0]
    {}
 800ed7c:	bf00      	nop
 800ed7e:	370c      	adds	r7, #12
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr

0800ed88 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ed88:	b480      	push	{r7}
 800ed8a:	b083      	sub	sp, #12
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4618      	mov	r0, r3
 800ed94:	370c      	adds	r7, #12
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr

0800ed9e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800ed9e:	b590      	push	{r4, r7, lr}
 800eda0:	b083      	sub	sp, #12
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	6039      	str	r1, [r7, #0]
 800eda8:	687c      	ldr	r4, [r7, #4]
 800edaa:	6838      	ldr	r0, [r7, #0]
 800edac:	f000 fbf5 	bl	800f59a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>
 800edb0:	4603      	mov	r3, r0
 800edb2:	4619      	mov	r1, r3
 800edb4:	4620      	mov	r0, r4
 800edb6:	f7f6 f8a1 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	1d1c      	adds	r4, r3, #4
 800edbe:	6838      	ldr	r0, [r7, #0]
 800edc0:	f000 fbf7 	bl	800f5b2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>
 800edc4:	4603      	mov	r3, r0
 800edc6:	4619      	mov	r1, r3
 800edc8:	4620      	mov	r0, r4
 800edca:	f7ff fbde 	bl	800e58a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f103 040c 	add.w	r4, r3, #12
 800edd4:	6838      	ldr	r0, [r7, #0]
 800edd6:	f000 fbf7 	bl	800f5c8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>
 800edda:	4603      	mov	r3, r0
 800eddc:	4619      	mov	r1, r3
 800edde:	4620      	mov	r0, r4
 800ede0:	f000 fbfe 	bl	800f5e0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	4618      	mov	r0, r3
 800ede8:	370c      	adds	r7, #12
 800edea:	46bd      	mov	sp, r7
 800edec:	bd90      	pop	{r4, r7, pc}

0800edee <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800edee:	b580      	push	{r7, lr}
 800edf0:	b084      	sub	sp, #16
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	60f8      	str	r0, [r7, #12]
 800edf6:	60b9      	str	r1, [r7, #8]
 800edf8:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	68ba      	ldr	r2, [r7, #8]
 800edfe:	6879      	ldr	r1, [r7, #4]
 800ee00:	4618      	mov	r0, r3
 800ee02:	f000 fbfc 	bl	800f5fe <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>
 800ee06:	eef0 7a40 	vmov.f32	s15, s0
 800ee0a:	eeb0 0a67 	vmov.f32	s0, s15
 800ee0e:	3710      	adds	r7, #16
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b082      	sub	sp, #8
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800ee1e:	2201      	movs	r2, #1
 800ee20:	2100      	movs	r1, #0
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f7ff ffe3 	bl	800edee <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800ee28:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ee2c:	eeb0 0a67 	vmov.f32	s0, s15
 800ee30:	3708      	adds	r7, #8
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}

0800ee36 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800ee36:	b580      	push	{r7, lr}
 800ee38:	b082      	sub	sp, #8
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
 800ee3e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800ee40:	2202      	movs	r2, #2
 800ee42:	2100      	movs	r1, #0
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f7ff ffd2 	bl	800edee <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800ee4a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ee4e:	eeb0 0a67 	vmov.f32	s0, s15
 800ee52:	3708      	adds	r7, #8
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	bf00      	nop
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr

0800ee6c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	3334      	adds	r3, #52	; 0x34
 800ee78:	4618      	mov	r0, r3
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	3304      	adds	r3, #4
 800ee90:	4618      	mov	r0, r3
 800ee92:	370c      	adds	r7, #12
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr

0800ee9c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800ee9c:	b480      	push	{r7}
 800ee9e:	b083      	sub	sp, #12
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	331c      	adds	r3, #28
 800eea8:	4618      	mov	r0, r3
 800eeaa:	370c      	adds	r7, #12
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6839      	ldr	r1, [r7, #0]
 800eec2:	4618      	mov	r0, r3
 800eec4:	f000 fbcb 	bl	800f65e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4618      	mov	r0, r3
 800eecc:	3708      	adds	r7, #8
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}

0800eed2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>:
 800eed2:	b580      	push	{r7, lr}
 800eed4:	b082      	sub	sp, #8
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
 800eeda:	6039      	str	r1, [r7, #0]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6839      	ldr	r1, [r7, #0]
 800eee0:	4618      	mov	r0, r3
 800eee2:	f000 fbcb 	bl	800f67c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	4618      	mov	r0, r3
 800eeea:	3708      	adds	r7, #8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800eef0:	b480      	push	{r7}
 800eef2:	b083      	sub	sp, #12
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4618      	mov	r0, r3
 800eefc:	370c      	adds	r7, #12
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr

0800ef06 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b084      	sub	sp, #16
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	60f8      	str	r0, [r7, #12]
 800ef0e:	60b9      	str	r1, [r7, #8]
 800ef10:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	68ba      	ldr	r2, [r7, #8]
 800ef16:	6879      	ldr	r1, [r7, #4]
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f000 fbc6 	bl	800f6aa <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>
 800ef1e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ef22:	eeb0 0a67 	vmov.f32	s0, s15
 800ef26:	3710      	adds	r7, #16
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ef2c:	b5b0      	push	{r4, r5, r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	60f8      	str	r0, [r7, #12]
 800ef34:	60b9      	str	r1, [r7, #8]
 800ef36:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	681c      	ldr	r4, [r3, #0]
 800ef3c:	68f8      	ldr	r0, [r7, #12]
 800ef3e:	f000 fbd4 	bl	800f6ea <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 800ef42:	4602      	mov	r2, r0
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	fb03 f502 	mul.w	r5, r3, r2
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	f000 fbd8 	bl	800f700 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 800ef50:	4602      	mov	r2, r0
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	fb02 f303 	mul.w	r3, r2, r3
 800ef58:	442b      	add	r3, r5
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	4423      	add	r3, r4
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	ee07 3a90 	vmov	s15, r3
  }
 800ef64:	eeb0 0a67 	vmov.f32	s0, s15
 800ef68:	3710      	adds	r7, #16
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bdb0      	pop	{r4, r5, r7, pc}

0800ef6e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800ef6e:	b580      	push	{r7, lr}
 800ef70:	b082      	sub	sp, #8
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
 800ef76:	6039      	str	r1, [r7, #0]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6839      	ldr	r1, [r7, #0]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f000 fbca 	bl	800f716 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	4618      	mov	r0, r3
 800ef86:	3708      	adds	r7, #8
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6839      	ldr	r1, [r7, #0]
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f000 fbd1 	bl	800f742 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	4618      	mov	r0, r3
 800efa4:	3708      	adds	r7, #8
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800efaa:	b480      	push	{r7}
 800efac:	b083      	sub	sp, #12
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	4618      	mov	r0, r3
 800efb6:	370c      	adds	r7, #12
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr

0800efc0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	68ba      	ldr	r2, [r7, #8]
 800efd0:	6879      	ldr	r1, [r7, #4]
 800efd2:	4618      	mov	r0, r3
 800efd4:	f000 fbc9 	bl	800f76a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>
 800efd8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800efdc:	eeb0 0a67 	vmov.f32	s0, s15
 800efe0:	3710      	adds	r7, #16
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}

0800efe6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800efe6:	b5b0      	push	{r4, r5, r7, lr}
 800efe8:	b084      	sub	sp, #16
 800efea:	af00      	add	r7, sp, #0
 800efec:	60f8      	str	r0, [r7, #12]
 800efee:	60b9      	str	r1, [r7, #8]
 800eff0:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681c      	ldr	r4, [r3, #0]
 800eff6:	68f8      	ldr	r0, [r7, #12]
 800eff8:	f000 fbd8 	bl	800f7ac <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>
 800effc:	4602      	mov	r2, r0
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	fb03 f502 	mul.w	r5, r3, r2
 800f004:	68f8      	ldr	r0, [r7, #12]
 800f006:	f000 fbdc 	bl	800f7c2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>
 800f00a:	4602      	mov	r2, r0
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	fb02 f303 	mul.w	r3, r2, r3
 800f012:	442b      	add	r3, r5
 800f014:	009b      	lsls	r3, r3, #2
 800f016:	4423      	add	r3, r4
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	ee07 3a90 	vmov	s15, r3
  }
 800f01e:	eeb0 0a67 	vmov.f32	s0, s15
 800f022:	3710      	adds	r7, #16
 800f024:	46bd      	mov	sp, r7
 800f026:	bdb0      	pop	{r4, r5, r7, pc}

0800f028 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800f028:	b480      	push	{r7}
 800f02a:	b083      	sub	sp, #12
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4618      	mov	r0, r3
 800f036:	370c      	adds	r7, #12
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr

0800f040 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	4618      	mov	r0, r3
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800f058:	b580      	push	{r7, lr}
 800f05a:	b088      	sub	sp, #32
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800f064:	f107 0314 	add.w	r3, r7, #20
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	68b9      	ldr	r1, [r7, #8]
 800f06c:	4618      	mov	r0, r3
 800f06e:	f000 fbb3 	bl	800f7d8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>
 800f072:	f107 031c 	add.w	r3, r7, #28
 800f076:	4618      	mov	r0, r3
 800f078:	f7f7 fc45 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800f07c:	f107 021c 	add.w	r2, r7, #28
 800f080:	f107 0314 	add.w	r3, r7, #20
 800f084:	4619      	mov	r1, r3
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	f000 fbbd 	bl	800f806 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f08c:	bf00      	nop
 800f08e:	3720      	adds	r7, #32
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	60f8      	str	r0, [r7, #12]
 800f09c:	60b9      	str	r1, [r7, #8]
 800f09e:	607a      	str	r2, [r7, #4]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	687a      	ldr	r2, [r7, #4]
 800f0a4:	68b9      	ldr	r1, [r7, #8]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f000 fbbe 	bl	800f828 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3710      	adds	r7, #16
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}

0800f0b6 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f0b6:	b480      	push	{r7}
 800f0b8:	b083      	sub	sp, #12
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
    }
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	370c      	adds	r7, #12
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr

0800f0cc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fc f889 	bl	800b1ee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800f0dc:	4603      	mov	r3, r0
    }
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3708      	adds	r7, #8
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800f0e6:	b580      	push	{r7, lr}
 800f0e8:	b082      	sub	sp, #8
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
 800f0ee:	6039      	str	r1, [r7, #0]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6839      	ldr	r1, [r7, #0]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f000 fbcd 	bl	800f894 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3708      	adds	r7, #8
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}

0800f104 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800f104:	b480      	push	{r7}
 800f106:	b083      	sub	sp, #12
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	4618      	mov	r0, r3
 800f110:	370c      	adds	r7, #12
 800f112:	46bd      	mov	sp, r7
 800f114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f118:	4770      	bx	lr

0800f11a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
 800f11a:	b480      	push	{r7}
 800f11c:	b083      	sub	sp, #12
 800f11e:	af00      	add	r7, sp, #0
 800f120:	6078      	str	r0, [r7, #4]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4618      	mov	r0, r3
 800f126:	370c      	adds	r7, #12
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr

0800f130 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	60b9      	str	r1, [r7, #8]
 800f13a:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800f13c:	68b9      	ldr	r1, [r7, #8]
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f000 fbb7 	bl	800f8b2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800f144:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f148:	eeb0 0a67 	vmov.f32	s0, s15
 800f14c:	3710      	adds	r7, #16
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f152:	b580      	push	{r7, lr}
 800f154:	b082      	sub	sp, #8
 800f156:	af00      	add	r7, sp, #0
 800f158:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800f15a:	2200      	movs	r2, #0
 800f15c:	2102      	movs	r1, #2
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f7fd f983 	bl	800c46a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 fbc8 	bl	800f8fa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>
  }
 800f16a:	bf00      	nop
 800f16c:	3708      	adds	r7, #8
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}

0800f172 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800f172:	b580      	push	{r7, lr}
 800f174:	b082      	sub	sp, #8
 800f176:	af00      	add	r7, sp, #0
 800f178:	6078      	str	r0, [r7, #4]
 800f17a:	6039      	str	r1, [r7, #0]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6839      	ldr	r1, [r7, #0]
 800f180:	4618      	mov	r0, r3
 800f182:	f000 fbca 	bl	800f91a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4618      	mov	r0, r3
 800f18a:	3708      	adds	r7, #8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4618      	mov	r0, r3
 800f19c:	370c      	adds	r7, #12
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr

0800f1a6 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 800f1a6:	b480      	push	{r7}
 800f1a8:	b083      	sub	sp, #12
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	6078      	str	r0, [r7, #4]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	370c      	adds	r7, #12
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr

0800f1bc <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
 800f1bc:	b480      	push	{r7}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	370c      	adds	r7, #12
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr

0800f1d2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b082      	sub	sp, #8
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7f5 fb61 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3708      	adds	r7, #8
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}

0800f1ee <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800f1ee:	b580      	push	{r7, lr}
 800f1f0:	b082      	sub	sp, #8
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	6078      	str	r0, [r7, #4]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	3304      	adds	r3, #4
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7f7 fa3b 	bl	8006676 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800f200:	4603      	mov	r3, r0
 800f202:	4618      	mov	r0, r3
 800f204:	3708      	adds	r7, #8
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
	...

0800f20c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b086      	sub	sp, #24
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800f218:	68b8      	ldr	r0, [r7, #8]
 800f21a:	f7ff ffda 	bl	800f1d2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>
 800f21e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800f220:	68b8      	ldr	r0, [r7, #8]
 800f222:	f7ff ffe4 	bl	800f1ee <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>
 800f226:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7f5 fbe1 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f230:	4602      	mov	r2, r0
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	4293      	cmp	r3, r2
 800f236:	d107      	bne.n	800f248 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7f5 fbce 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f240:	4602      	mov	r2, r0
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	4293      	cmp	r3, r2
 800f246:	d001      	beq.n	800f24c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800f248:	2301      	movs	r3, #1
 800f24a:	e000      	b.n	800f24e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800f24c:	2300      	movs	r3, #0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d005      	beq.n	800f25e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	693a      	ldr	r2, [r7, #16]
 800f256:	6979      	ldr	r1, [r7, #20]
 800f258:	4618      	mov	r0, r3
 800f25a:	f7f8 fad5 	bl	8007808 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	4618      	mov	r0, r3
 800f262:	f7f5 fbc6 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f266:	4602      	mov	r2, r0
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	4293      	cmp	r3, r2
 800f26c:	d107      	bne.n	800f27e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	4618      	mov	r0, r3
 800f272:	f7f5 fbb3 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f276:	4602      	mov	r2, r0
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d006      	beq.n	800f28c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800f27e:	4b05      	ldr	r3, [pc, #20]	; (800f294 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800f280:	4a05      	ldr	r2, [pc, #20]	; (800f298 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800f282:	f240 21fd 	movw	r1, #765	; 0x2fd
 800f286:	4805      	ldr	r0, [pc, #20]	; (800f29c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800f288:	f00e fc8c 	bl	801dba4 <__assert_func>
}
 800f28c:	bf00      	nop
 800f28e:	3718      	adds	r7, #24
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	08022084 	.word	0x08022084
 800f298:	08027644 	.word	0x08027644
 800f29c:	08022198 	.word	0x08022198

0800f2a0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	60f8      	str	r0, [r7, #12]
 800f2a8:	60b9      	str	r1, [r7, #8]
 800f2aa:	607a      	str	r2, [r7, #4]
 800f2ac:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	68ba      	ldr	r2, [r7, #8]
 800f2b2:	601a      	str	r2, [r3, #0]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	605a      	str	r2, [r3, #4]
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	683a      	ldr	r2, [r7, #0]
 800f2be:	609a      	str	r2, [r3, #8]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	69ba      	ldr	r2, [r7, #24]
 800f2c4:	60da      	str	r2, [r3, #12]
  }
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3714      	adds	r7, #20
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr

0800f2d4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f000 fb53 	bl	800f988 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>
  }
 800f2e2:	bf00      	nop
 800f2e4:	3708      	adds	r7, #8
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}

0800f2ea <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f2ea:	b580      	push	{r7, lr}
 800f2ec:	b084      	sub	sp, #16
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	60f8      	str	r0, [r7, #12]
 800f2f2:	60b9      	str	r1, [r7, #8]
 800f2f4:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f2f6:	68b9      	ldr	r1, [r7, #8]
 800f2f8:	68f8      	ldr	r0, [r7, #12]
 800f2fa:	f000 fb54 	bl	800f9a6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	68b9      	ldr	r1, [r7, #8]
 800f302:	68f8      	ldr	r0, [r7, #12]
 800f304:	f000 fbbe 	bl	800fa84 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f308:	bf00      	nop
 800f30a:	3710      	adds	r7, #16
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6839      	ldr	r1, [r7, #0]
 800f31e:	4618      	mov	r0, r3
 800f320:	f000 fbe8 	bl	800faf4 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4618      	mov	r0, r3
 800f328:	3708      	adds	r7, #8
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}

0800f32e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f32e:	b580      	push	{r7, lr}
 800f330:	b082      	sub	sp, #8
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
 800f336:	6039      	str	r1, [r7, #0]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6839      	ldr	r1, [r7, #0]
 800f33c:	4618      	mov	r0, r3
 800f33e:	f000 fbef 	bl	800fb20 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>
  }
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	4618      	mov	r0, r3
 800f346:	3708      	adds	r7, #8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f34c:	b5b0      	push	{r4, r5, r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681c      	ldr	r4, [r3, #0]
 800f35c:	68f8      	ldr	r0, [r7, #12]
 800f35e:	f000 fbf3 	bl	800fb48 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>
 800f362:	4602      	mov	r2, r0
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	fb03 f502 	mul.w	r5, r3, r2
 800f36a:	68f8      	ldr	r0, [r7, #12]
 800f36c:	f000 fbf7 	bl	800fb5e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>
 800f370:	4602      	mov	r2, r0
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	fb02 f303 	mul.w	r3, r2, r3
 800f378:	442b      	add	r3, r5
 800f37a:	009b      	lsls	r3, r3, #2
 800f37c:	4423      	add	r3, r4
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	ee07 3a90 	vmov	s15, r3
  }
 800f384:	eeb0 0a67 	vmov.f32	s0, s15
 800f388:	3710      	adds	r7, #16
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bdb0      	pop	{r4, r5, r7, pc}

0800f38e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f38e:	b580      	push	{r7, lr}
 800f390:	b082      	sub	sp, #8
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f396:	f7f7 f858 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f39a:	4603      	mov	r3, r0
  }
 800f39c:	4618      	mov	r0, r3
 800f39e:	3708      	adds	r7, #8
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f3ac:	f7f7 f84d 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f3b0:	4603      	mov	r3, r0
  }
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3708      	adds	r7, #8
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}

0800f3ba <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800f3ba:	b480      	push	{r7}
 800f3bc:	b083      	sub	sp, #12
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	6078      	str	r0, [r7, #4]
 800f3c2:	6039      	str	r1, [r7, #0]
}
 800f3c4:	bf00      	nop
 800f3c6:	370c      	adds	r7, #12
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr

0800f3d0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b08c      	sub	sp, #48	; 0x30
 800f3d4:	af02      	add	r7, sp, #8
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800f3dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3e0:	68b9      	ldr	r1, [r7, #8]
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7fa fd4f 	bl	8009e86 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	68b9      	ldr	r1, [r7, #8]
 800f3ec:	68f8      	ldr	r0, [r7, #12]
 800f3ee:	f000 fbc1 	bl	800fb74 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800f3f2:	f107 0320 	add.w	r3, r7, #32
 800f3f6:	68f9      	ldr	r1, [r7, #12]
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7fa fd44 	bl	8009e86 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	f000 fc04 	bl	800fc0c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800f404:	4603      	mov	r3, r0
 800f406:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f40a:	f107 0120 	add.w	r1, r7, #32
 800f40e:	f107 0010 	add.w	r0, r7, #16
 800f412:	9300      	str	r3, [sp, #0]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f000 fc04 	bl	800fc22 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800f41a:	f107 0310 	add.w	r3, r7, #16
 800f41e:	4618      	mov	r0, r3
 800f420:	f000 fc19 	bl	800fc56 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 800f424:	f107 0320 	add.w	r3, r7, #32
 800f428:	4618      	mov	r0, r3
 800f42a:	f7f9 fc13 	bl	8008c54 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800f42e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f432:	4618      	mov	r0, r3
 800f434:	f7f9 fc0e 	bl	8008c54 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
}
 800f438:	bf00      	nop
 800f43a:	3728      	adds	r7, #40	; 0x28
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800f440:	b480      	push	{r7}
 800f442:	b083      	sub	sp, #12
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4618      	mov	r0, r3
 800f44e:	370c      	adds	r7, #12
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr

0800f458 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800f458:	b480      	push	{r7}
 800f45a:	b083      	sub	sp, #12
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	4618      	mov	r0, r3
 800f466:	370c      	adds	r7, #12
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800f470:	b580      	push	{r7, lr}
 800f472:	ed2d 8b02 	vpush	{d8}
 800f476:	b088      	sub	sp, #32
 800f478:	af00      	add	r7, sp, #0
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	607a      	str	r2, [r7, #4]
  { dst.coeffRef(0,0) -= (lhs.transpose().cwiseProduct(rhs)).sum(); }
 800f480:	68b8      	ldr	r0, [r7, #8]
 800f482:	f000 fbf3 	bl	800fc6c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 800f486:	4603      	mov	r3, r0
 800f488:	61fb      	str	r3, [r7, #28]
 800f48a:	f107 0310 	add.w	r3, r7, #16
 800f48e:	f107 011c 	add.w	r1, r7, #28
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	4618      	mov	r0, r3
 800f496:	f000 fbfc 	bl	800fc92 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>
 800f49a:	f107 0310 	add.w	r3, r7, #16
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f000 fc25 	bl	800fcee <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>
 800f4a4:	eeb0 8a40 	vmov.f32	s16, s0
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	2100      	movs	r1, #0
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7f6 ff11 	bl	80062d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	edd3 7a00 	vldr	s15, [r3]
 800f4ba:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800f4be:	edc3 7a00 	vstr	s15, [r3]
 800f4c2:	bf00      	nop
 800f4c4:	3720      	adds	r7, #32
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	ecbd 8b02 	vpop	{d8}
 800f4cc:	bd80      	pop	{r7, pc}

0800f4ce <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
 800f4ce:	b580      	push	{r7, lr}
 800f4d0:	b082      	sub	sp, #8
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f000 fc24 	bl	800fd24 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3708      	adds	r7, #8
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}

0800f4e6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>:
class dense_product_base
 800f4e6:	b580      	push	{r7, lr}
 800f4e8:	b082      	sub	sp, #8
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f7ff ffed 	bl	800f4ce <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3708      	adds	r7, #8
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b082      	sub	sp, #8
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f7ff ffed 	bl	800f4e6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	4618      	mov	r0, r3
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
	...

0800f518 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800f518:	b590      	push	{r4, r7, lr}
 800f51a:	b085      	sub	sp, #20
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	607a      	str	r2, [r7, #4]
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f7ff ffea 	bl	800f4fe <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	68ba      	ldr	r2, [r7, #8]
 800f52e:	601a      	str	r2, [r3, #0]
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	4618      	mov	r0, r3
 800f53a:	f7f5 fa4f 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f53e:	4604      	mov	r4, r0
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4618      	mov	r0, r3
 800f544:	f7f5 fb71 	bl	8004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800f548:	4603      	mov	r3, r0
 800f54a:	429c      	cmp	r4, r3
 800f54c:	d005      	beq.n	800f55a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 800f54e:	4b06      	ldr	r3, [pc, #24]	; (800f568 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 800f550:	4a06      	ldr	r2, [pc, #24]	; (800f56c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 800f552:	2160      	movs	r1, #96	; 0x60
 800f554:	4806      	ldr	r0, [pc, #24]	; (800f570 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 800f556:	f00e fb25 	bl	801dba4 <__assert_func>
 800f55a:	bf00      	nop
    }
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	4618      	mov	r0, r3
 800f560:	3714      	adds	r7, #20
 800f562:	46bd      	mov	sp, r7
 800f564:	bd90      	pop	{r4, r7, pc}
 800f566:	bf00      	nop
 800f568:	0801fccc 	.word	0x0801fccc
 800f56c:	0802776c 	.word	0x0802776c
 800f570:	0802001c 	.word	0x0802001c

0800f574 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f574:	b580      	push	{r7, lr}
 800f576:	b084      	sub	sp, #16
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f580:	68b9      	ldr	r1, [r7, #8]
 800f582:	68f8      	ldr	r0, [r7, #12]
 800f584:	f000 fbd9 	bl	800fd3a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	68b9      	ldr	r1, [r7, #8]
 800f58c:	68f8      	ldr	r0, [r7, #12]
 800f58e:	f000 fc17 	bl	800fdc0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f592:	bf00      	nop
 800f594:	3710      	adds	r7, #16
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f59a:	b480      	push	{r7}
 800f59c:	b083      	sub	sp, #12
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	3330      	adds	r3, #48	; 0x30
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	370c      	adds	r7, #12
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr

0800f5b2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f5b2:	b480      	push	{r7}
 800f5b4:	b083      	sub	sp, #12
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	6078      	str	r0, [r7, #4]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4618      	mov	r0, r3
 800f5be:	370c      	adds	r7, #12
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f5c8:	b480      	push	{r7}
 800f5ca:	b083      	sub	sp, #12
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	3318      	adds	r3, #24
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	370c      	adds	r7, #12
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr

0800f5e0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	6039      	str	r1, [r7, #0]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6839      	ldr	r1, [r7, #0]
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f000 fc1e 	bl	800fe30 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3708      	adds	r7, #8
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}

0800f5fe <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f5fe:	b590      	push	{r4, r7, lr}
 800f600:	b087      	sub	sp, #28
 800f602:	af00      	add	r7, sp, #0
 800f604:	60f8      	str	r0, [r7, #12]
 800f606:	60b9      	str	r1, [r7, #8]
 800f608:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	4618      	mov	r0, r3
 800f60e:	f000 fc1e 	bl	800fe4e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 800f612:	4604      	mov	r4, r0
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	3304      	adds	r3, #4
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	68b9      	ldr	r1, [r7, #8]
 800f61c:	4618      	mov	r0, r3
 800f61e:	f7ff fccf 	bl	800efc0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800f622:	eef0 7a40 	vmov.f32	s15, s0
 800f626:	edc7 7a04 	vstr	s15, [r7, #16]
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	330c      	adds	r3, #12
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	68b9      	ldr	r1, [r7, #8]
 800f632:	4618      	mov	r0, r3
 800f634:	f000 fc16 	bl	800fe64 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 800f638:	eef0 7a40 	vmov.f32	s15, s0
 800f63c:	edc7 7a05 	vstr	s15, [r7, #20]
 800f640:	f107 0214 	add.w	r2, r7, #20
 800f644:	f107 0310 	add.w	r3, r7, #16
 800f648:	4619      	mov	r1, r3
 800f64a:	4620      	mov	r0, r4
 800f64c:	f7ff fafc 	bl	800ec48 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800f650:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f654:	eeb0 0a67 	vmov.f32	s0, s15
 800f658:	371c      	adds	r7, #28
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd90      	pop	{r4, r7, pc}

0800f65e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f65e:	b580      	push	{r7, lr}
 800f660:	b082      	sub	sp, #8
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
 800f666:	6039      	str	r1, [r7, #0]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6839      	ldr	r1, [r7, #0]
 800f66c:	4618      	mov	r0, r3
 800f66e:	f000 fc1a 	bl	800fea6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	4618      	mov	r0, r3
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6839      	ldr	r1, [r7, #0]
 800f68a:	4618      	mov	r0, r3
 800f68c:	f000 fc21 	bl	800fed2 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>
  }
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4618      	mov	r0, r3
 800f694:	3708      	adds	r7, #8
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>:
    T value() { return T(Value); }
 800f69a:	b480      	push	{r7}
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	2300      	movs	r3, #0
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr

0800f6aa <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f6aa:	b5b0      	push	{r4, r5, r7, lr}
 800f6ac:	b084      	sub	sp, #16
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	60f8      	str	r0, [r7, #12]
 800f6b2:	60b9      	str	r1, [r7, #8]
 800f6b4:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(m_startRow.value() + row, m_startCol.value() + col);
 800f6b6:	68fc      	ldr	r4, [r7, #12]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	3310      	adds	r3, #16
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f000 fc1c 	bl	800fefa <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	18d5      	adds	r5, r2, r3
 800f6c8:	f7ff ffe7 	bl	800f69a <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	f000 fc1b 	bl	800ff12 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>
 800f6dc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f6e0:	eeb0 0a67 	vmov.f32	s0, s15
 800f6e4:	3710      	adds	r7, #16
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bdb0      	pop	{r4, r5, r7, pc}

0800f6ea <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f6ea:	b580      	push	{r7, lr}
 800f6ec:	b082      	sub	sp, #8
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f6f2:	f7f6 feaa 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f6f6:	4603      	mov	r3, r0
  }
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f708:	f7f6 fe97 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800f70c:	4603      	mov	r3, r0
  }
 800f70e:	4618      	mov	r0, r3
 800f710:	3708      	adds	r7, #8
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}

0800f716 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800f716:	b590      	push	{r4, r7, lr}
 800f718:	b083      	sub	sp, #12
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	6078      	str	r0, [r7, #4]
 800f71e:	6039      	str	r1, [r7, #0]
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f000 fc2d 	bl	800ff80 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800f726:	687c      	ldr	r4, [r7, #4]
 800f728:	6838      	ldr	r0, [r7, #0]
 800f72a:	f000 fc1e 	bl	800ff6a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>
 800f72e:	4603      	mov	r3, r0
 800f730:	4619      	mov	r1, r3
 800f732:	4620      	mov	r0, r4
 800f734:	f000 fc2f 	bl	800ff96 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	4618      	mov	r0, r3
 800f73c:	370c      	adds	r7, #12
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd90      	pop	{r4, r7, pc}

0800f742 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
{
  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
  typedef typename XprType::Scalar Scalar;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit block_evaluator(const XprType& block)
 800f742:	b580      	push	{r7, lr}
 800f744:	b082      	sub	sp, #8
 800f746:	af00      	add	r7, sp, #0
 800f748:	6078      	str	r0, [r7, #4]
 800f74a:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6839      	ldr	r1, [r7, #0]
 800f750:	4618      	mov	r0, r3
 800f752:	f000 fc2f 	bl	800ffb4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>
  {
    // TODO: for the 3.3 release, this should be turned to an internal assertion, but let's keep it as is for the beta lifetime
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	4618      	mov	r0, r3
 800f75a:	f000 fc55 	bl	8010008 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 800f75e:	bf00      	nop
  }
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4618      	mov	r0, r3
 800f764:	3708      	adds	r7, #8
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f76a:	b5b0      	push	{r4, r5, r7, lr}
 800f76c:	b084      	sub	sp, #16
 800f76e:	af00      	add	r7, sp, #0
 800f770:	60f8      	str	r0, [r7, #12]
 800f772:	60b9      	str	r1, [r7, #8]
 800f774:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681c      	ldr	r4, [r3, #0]
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f000 fc50 	bl	8010020 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>
 800f780:	4602      	mov	r2, r0
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	fb03 f502 	mul.w	r5, r3, r2
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	f000 fc54 	bl	8010036 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>
 800f78e:	4602      	mov	r2, r0
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	fb02 f303 	mul.w	r3, r2, r3
 800f796:	442b      	add	r3, r5
 800f798:	009b      	lsls	r3, r3, #2
 800f79a:	4423      	add	r3, r4
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	ee07 3a90 	vmov	s15, r3
  }
 800f7a2:	eeb0 0a67 	vmov.f32	s0, s15
 800f7a6:	3710      	adds	r7, #16
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bdb0      	pop	{r4, r5, r7, pc}

0800f7ac <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f7b4:	f7f6 fe41 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800f7b8:	4603      	mov	r3, r0
  }
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3708      	adds	r7, #8
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}

0800f7c2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f7c2:	b580      	push	{r7, lr}
 800f7c4:	b082      	sub	sp, #8
 800f7c6:	af00      	add	r7, sp, #0
 800f7c8:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f7ca:	f7f6 fe3e 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f7ce:	4603      	mov	r3, r0
  }
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3708      	adds	r7, #8
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800f7d8:	b590      	push	{r4, r7, lr}
 800f7da:	b085      	sub	sp, #20
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800f7e4:	68b8      	ldr	r0, [r7, #8]
 800f7e6:	f7f5 fc68 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f7f5 fc64 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	4621      	mov	r1, r4
 800f7f8:	68f8      	ldr	r0, [r7, #12]
 800f7fa:	f000 fc4b 	bl	8010094 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>
}
 800f7fe:	68f8      	ldr	r0, [r7, #12]
 800f800:	3714      	adds	r7, #20
 800f802:	46bd      	mov	sp, r7
 800f804:	bd90      	pop	{r4, r7, pc}

0800f806 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f806:	b580      	push	{r7, lr}
 800f808:	b086      	sub	sp, #24
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	60f8      	str	r0, [r7, #12]
 800f80e:	60b9      	str	r1, [r7, #8]
 800f810:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	68b9      	ldr	r1, [r7, #8]
 800f81a:	6978      	ldr	r0, [r7, #20]
 800f81c:	f000 fc68 	bl	80100f0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800f820:	bf00      	nop
 800f822:	3718      	adds	r7, #24
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800f828:	b5b0      	push	{r4, r5, r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	60f8      	str	r0, [r7, #12]
 800f830:	60b9      	str	r1, [r7, #8]
 800f832:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800f834:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800f836:	68b8      	ldr	r0, [r7, #8]
 800f838:	f000 fc6d 	bl	8010116 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>
 800f83c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800f83e:	68b8      	ldr	r0, [r7, #8]
 800f840:	f000 fc7d 	bl	801013e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 800f844:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	fb02 f303 	mul.w	r3, r2, r3
 800f84c:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800f84e:	441d      	add	r5, r3
 800f850:	68b8      	ldr	r0, [r7, #8]
 800f852:	f7f5 fd76 	bl	8005342 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800f856:	4602      	mov	r2, r0
 800f858:	2301      	movs	r3, #1
 800f85a:	4629      	mov	r1, r5
 800f85c:	4620      	mov	r0, r4
 800f85e:	f000 fca3 	bl	80101a8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	3308      	adds	r3, #8
 800f866:	68ba      	ldr	r2, [r7, #8]
 800f868:	6812      	ldr	r2, [r2, #0]
 800f86a:	601a      	str	r2, [r3, #0]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	330c      	adds	r3, #12
 800f870:	2100      	movs	r1, #0
 800f872:	4618      	mov	r0, r3
 800f874:	f7fd fe30 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	3310      	adds	r3, #16
 800f87c:	6879      	ldr	r1, [r7, #4]
 800f87e:	4618      	mov	r0, r3
 800f880:	f7fd fe2a 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800f884:	68f8      	ldr	r0, [r7, #12]
 800f886:	f000 fccd 	bl	8010224 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>
    }
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	4618      	mov	r0, r3
 800f88e:	3710      	adds	r7, #16
 800f890:	46bd      	mov	sp, r7
 800f892:	bdb0      	pop	{r4, r5, r7, pc}

0800f894 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6839      	ldr	r1, [r7, #0]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f000 fcce 	bl	8010244 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3708      	adds	r7, #8
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}

0800f8b2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800f8b2:	b580      	push	{r7, lr}
 800f8b4:	b084      	sub	sp, #16
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	6078      	str	r0, [r7, #4]
 800f8ba:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800f8bc:	6839      	ldr	r1, [r7, #0]
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 fcd2 	bl	8010268 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800f8c4:	eef0 7a40 	vmov.f32	s15, s0
 800f8c8:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800f8cc:	6839      	ldr	r1, [r7, #0]
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f000 fcdb 	bl	801028a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800f8d4:	eef0 7a40 	vmov.f32	s15, s0
 800f8d8:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800f8dc:	f107 020c 	add.w	r2, r7, #12
 800f8e0:	f107 0308 	add.w	r3, r7, #8
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	6838      	ldr	r0, [r7, #0]
 800f8e8:	f7f9 f96d 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800f8ec:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f8f0:	eeb0 0a67 	vmov.f32	s0, s15
 800f8f4:	3710      	adds	r7, #16
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}

0800f8fa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f8fa:	b580      	push	{r7, lr}
 800f8fc:	b082      	sub	sp, #8
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800f902:	2201      	movs	r2, #1
 800f904:	2102      	movs	r1, #2
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7fc fdaf 	bl	800c46a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f000 fce0 	bl	80102d2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>
  }
 800f912:	bf00      	nop
 800f914:	3708      	adds	r7, #8
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}

0800f91a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800f91a:	b580      	push	{r7, lr}
 800f91c:	b082      	sub	sp, #8
 800f91e:	af00      	add	r7, sp, #0
 800f920:	6078      	str	r0, [r7, #4]
 800f922:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f000 fcfc 	bl	8010322 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800f92a:	6838      	ldr	r0, [r7, #0]
 800f92c:	f000 fce1 	bl	80102f2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 800f930:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 800f936:	6838      	ldr	r0, [r7, #0]
 800f938:	f000 fce7 	bl	801030a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>
 800f93c:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	3304      	adds	r3, #4
 800f942:	6812      	ldr	r2, [r2, #0]
 800f944:	601a      	str	r2, [r3, #0]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800f950:	4619      	mov	r1, r3
 800f952:	4610      	mov	r0, r2
 800f954:	f7f7 fc3e 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800f962:	4619      	mov	r1, r3
 800f964:	4610      	mov	r0, r2
 800f966:	f000 fce7 	bl	8010338 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 800f96a:	6838      	ldr	r0, [r7, #0]
 800f96c:	f000 fcc1 	bl	80102f2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 800f970:	4603      	mov	r3, r0
 800f972:	4618      	mov	r0, r3
 800f974:	f7f4 ff8c 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800f978:	4602      	mov	r2, r0
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	611a      	str	r2, [r3, #16]
  }
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4618      	mov	r0, r3
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800f990:	2100      	movs	r1, #0
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 fcdf 	bl	8010356 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 fcff 	bl	801039c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>
  }
 800f99e:	bf00      	nop
 800f9a0:	3708      	adds	r7, #8
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800f9a6:	b480      	push	{r7}
 800f9a8:	b083      	sub	sp, #12
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
 800f9ae:	6039      	str	r1, [r7, #0]
}
 800f9b0:	bf00      	nop
 800f9b2:	370c      	adds	r7, #12
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7f9 f944 	bl	8008c54 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b082      	sub	sp, #8
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7ff ffeb 	bl	800f9bc <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3708      	adds	r7, #8
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7ff ffeb 	bl	800f9d6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	4618      	mov	r0, r3
 800fa04:	3708      	adds	r7, #8
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}

0800fa0a <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 800fa0a:	b580      	push	{r7, lr}
 800fa0c:	b082      	sub	sp, #8
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	6078      	str	r0, [r7, #4]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7f9 f91d 	bl	8008c54 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3708      	adds	r7, #8
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	330c      	adds	r3, #12
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7ff ffea 	bl	800fa0a <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	3304      	adds	r3, #4
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7ff ffd8 	bl	800f9f0 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	4618      	mov	r0, r3
 800fa44:	3708      	adds	r7, #8
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b082      	sub	sp, #8
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7ff ffe5 	bl	800fa24 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f000 fcbc 	bl	80103d8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	4618      	mov	r0, r3
 800fa64:	3708      	adds	r7, #8
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}

0800fa6a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800fa6a:	b580      	push	{r7, lr}
 800fa6c:	b082      	sub	sp, #8
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7ff ffe8 	bl	800fa4a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3708      	adds	r7, #8
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b090      	sub	sp, #64	; 0x40
 800fa88:	af02      	add	r7, sp, #8
 800fa8a:	60f8      	str	r0, [r7, #12]
 800fa8c:	60b9      	str	r1, [r7, #8]
 800fa8e:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800fa90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa94:	68b9      	ldr	r1, [r7, #8]
 800fa96:	4618      	mov	r0, r3
 800fa98:	f000 fc8f 	bl	80103ba <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
  resize_if_allowed(dst, src, func);
 800fa9c:	687a      	ldr	r2, [r7, #4]
 800fa9e:	68b9      	ldr	r1, [r7, #8]
 800faa0:	68f8      	ldr	r0, [r7, #12]
 800faa2:	f000 fca5 	bl	80103f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800faa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800faaa:	68f9      	ldr	r1, [r7, #12]
 800faac:	4618      	mov	r0, r3
 800faae:	f7fa f9ea 	bl	8009e86 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f000 f8aa 	bl	800fc0c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800fab8:	4603      	mov	r3, r0
 800faba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fabe:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800fac2:	f107 0014 	add.w	r0, r7, #20
 800fac6:	9300      	str	r3, [sp, #0]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f000 fcdb 	bl	8010484 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800face:	f107 0314 	add.w	r3, r7, #20
 800fad2:	4618      	mov	r0, r3
 800fad4:	f000 fcf0 	bl	80104b8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>
  DstEvaluatorType dstEvaluator(dst);
 800fad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fadc:	4618      	mov	r0, r3
 800fade:	f7f9 f8b9 	bl	8008c54 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800fae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7ff ffbf 	bl	800fa6a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
}
 800faec:	bf00      	nop
 800faee:	3738      	adds	r7, #56	; 0x38
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800faf4:	b590      	push	{r4, r7, lr}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 fcf0 	bl	80104e4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800fb04:	687c      	ldr	r4, [r7, #4]
 800fb06:	6838      	ldr	r0, [r7, #0]
 800fb08:	f000 fce1 	bl	80104ce <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	4619      	mov	r1, r3
 800fb10:	4620      	mov	r0, r4
 800fb12:	f000 fcf2 	bl	80104fa <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	370c      	adds	r7, #12
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd90      	pop	{r4, r7, pc}

0800fb20 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6839      	ldr	r1, [r7, #0]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f000 fcf2 	bl	8010518 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	4618      	mov	r0, r3
 800fb38:	f000 fd18 	bl	801056c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 800fb3c:	bf00      	nop
  }
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	4618      	mov	r0, r3
 800fb42:	3708      	adds	r7, #8
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fb50:	f7f6 fc73 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800fb54:	4603      	mov	r3, r0
  }
 800fb56:	4618      	mov	r0, r3
 800fb58:	3708      	adds	r7, #8
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}

0800fb5e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fb5e:	b580      	push	{r7, lr}
 800fb60:	b082      	sub	sp, #8
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fb66:	f7f6 fc70 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fb6a:	4603      	mov	r3, r0
  }
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3708      	adds	r7, #8
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b086      	sub	sp, #24
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7f5 fe7f 	bl	8005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800fb88:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7f5 fe85 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800fb92:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7f5 fe75 	bl	8005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	4293      	cmp	r3, r2
 800fba2:	d107      	bne.n	800fbb4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7f5 fe78 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800fbac:	4602      	mov	r2, r0
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d001      	beq.n	800fbb8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	e000      	b.n	800fbba <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 800fbb8:	2300      	movs	r3, #0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d005      	beq.n	800fbca <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	693a      	ldr	r2, [r7, #16]
 800fbc2:	6979      	ldr	r1, [r7, #20]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7fd f9af 	bl	800cf28 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7f5 fe5a 	bl	8005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d107      	bne.n	800fbea <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f7f5 fe5d 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800fbe2:	4602      	mov	r2, r0
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d006      	beq.n	800fbf8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 800fbea:	4b05      	ldr	r3, [pc, #20]	; (800fc00 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800fbec:	4a05      	ldr	r2, [pc, #20]	; (800fc04 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800fbee:	f240 21fd 	movw	r1, #765	; 0x2fd
 800fbf2:	4805      	ldr	r0, [pc, #20]	; (800fc08 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 800fbf4:	f00d ffd6 	bl	801dba4 <__assert_func>
}
 800fbf8:	bf00      	nop
 800fbfa:	3718      	adds	r7, #24
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	08022084 	.word	0x08022084
 800fc04:	08027894 	.word	0x08027894
 800fc08:	08022198 	.word	0x08022198

0800fc0c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800fc0c:	b480      	push	{r7}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	4618      	mov	r0, r3
 800fc18:	370c      	adds	r7, #12
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc20:	4770      	bx	lr

0800fc22 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800fc22:	b480      	push	{r7}
 800fc24:	b085      	sub	sp, #20
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	60f8      	str	r0, [r7, #12]
 800fc2a:	60b9      	str	r1, [r7, #8]
 800fc2c:	607a      	str	r2, [r7, #4]
 800fc2e:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	68ba      	ldr	r2, [r7, #8]
 800fc34:	601a      	str	r2, [r3, #0]
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	687a      	ldr	r2, [r7, #4]
 800fc3a:	605a      	str	r2, [r3, #4]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	683a      	ldr	r2, [r7, #0]
 800fc40:	609a      	str	r2, [r3, #8]
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	69ba      	ldr	r2, [r7, #24]
 800fc46:	60da      	str	r2, [r3, #12]
  }
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3714      	adds	r7, #20
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr

0800fc56 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b082      	sub	sp, #8
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 fc90 	bl	8010584 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>
  }
 800fc64:	bf00      	nop
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  return ConstTransposeReturnType(derived());
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f7f5 fcf1 	bl	800565c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	f107 030c 	add.w	r3, r7, #12
 800fc80:	4611      	mov	r1, r2
 800fc82:	4618      	mov	r0, r3
 800fc84:	f000 fca5 	bl	80105d2 <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>
 800fc88:	68fb      	ldr	r3, [r7, #12]
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3710      	adds	r7, #16
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800fc92:	b5b0      	push	{r4, r5, r7, lr}
 800fc94:	b086      	sub	sp, #24
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	60f8      	str	r0, [r7, #12]
 800fc9a:	60b9      	str	r1, [r7, #8]
 800fc9c:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800fc9e:	68b8      	ldr	r0, [r7, #8]
 800fca0:	f000 fca7 	bl	80105f2 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800fca4:	4604      	mov	r4, r0
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f7f5 f83f 	bl	8004d2a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800fcac:	4605      	mov	r5, r0
 800fcae:	f107 0314 	add.w	r3, r7, #20
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7f5 f898 	bl	8004de8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800fcb8:	f107 0314 	add.w	r3, r7, #20
 800fcbc:	462a      	mov	r2, r5
 800fcbe:	4621      	mov	r1, r4
 800fcc0:	68f8      	ldr	r0, [r7, #12]
 800fcc2:	f000 fcd5 	bl	8010670 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>
}
 800fcc6:	68f8      	ldr	r0, [r7, #12]
 800fcc8:	3718      	adds	r7, #24
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bdb0      	pop	{r4, r5, r7, pc}

0800fcce <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800fcce:	b580      	push	{r7, lr}
 800fcd0:	b082      	sub	sp, #8
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	6078      	str	r0, [r7, #4]
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 fd18 	bl	801070c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	4618      	mov	r0, r3
 800fce0:	f000 fd1f 	bl	8010722 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800fce4:	4603      	mov	r3, r0
 800fce6:	4618      	mov	r0, r3
 800fce8:	3708      	adds	r7, #8
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}

0800fcee <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800fcee:	b590      	push	{r4, r7, lr}
 800fcf0:	b085      	sub	sp, #20
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 fd08 	bl	801070c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	f107 030c 	add.w	r3, r7, #12
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7f5 fb67 	bl	80053d6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800fd08:	f107 030c 	add.w	r3, r7, #12
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	4620      	mov	r0, r4
 800fd10:	f000 fd88 	bl	8010824 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800fd14:	eef0 7a40 	vmov.f32	s15, s0
 800fd18:	bf00      	nop
}
 800fd1a:	eeb0 0a67 	vmov.f32	s0, s15
 800fd1e:	3714      	adds	r7, #20
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd90      	pop	{r4, r7, pc}

0800fd24 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800fd24:	b480      	push	{r7}
 800fd26:	b083      	sub	sp, #12
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
    }
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	4618      	mov	r0, r3
 800fd30:	370c      	adds	r7, #12
 800fd32:	46bd      	mov	sp, r7
 800fd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd38:	4770      	bx	lr

0800fd3a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800fd3a:	b580      	push	{r7, lr}
 800fd3c:	b082      	sub	sp, #8
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	6078      	str	r0, [r7, #4]
 800fd42:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7f4 fdad 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	dd08      	ble.n	800fd64 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7f4 fd9b 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	dd01      	ble.n	800fd64 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 800fd60:	2301      	movs	r3, #1
 800fd62:	e000      	b.n	800fd66 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2c>
 800fd64:	2300      	movs	r3, #0
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d003      	beq.n	800fd72 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800fd6a:	6839      	ldr	r1, [r7, #0]
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 fd9f 	bl	80108b0 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>
}
 800fd72:	bf00      	nop
 800fd74:	3708      	adds	r7, #8
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b082      	sub	sp, #8
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	330c      	adds	r3, #12
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7fe fe48 	bl	800ea1c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	3308      	adds	r3, #8
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7f4 ff9a 	bl	8004cca <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 fda4 	bl	80108e4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3708      	adds	r7, #8
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}

0800fda6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800fda6:	b580      	push	{r7, lr}
 800fda8:	b082      	sub	sp, #8
 800fdaa:	af00      	add	r7, sp, #0
 800fdac:	6078      	str	r0, [r7, #4]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7ff ffe2 	bl	800fd7a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b090      	sub	sp, #64	; 0x40
 800fdc4:	af02      	add	r7, sp, #8
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800fdcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdd0:	68b9      	ldr	r1, [r7, #8]
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f000 fd77 	bl	80108c6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	68b9      	ldr	r1, [r7, #8]
 800fddc:	68f8      	ldr	r0, [r7, #12]
 800fdde:	f000 fda9 	bl	8010934 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 800fde2:	f107 0320 	add.w	r3, r7, #32
 800fde6:	68f9      	ldr	r1, [r7, #12]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7f7 f9f3 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800fdee:	68f8      	ldr	r0, [r7, #12]
 800fdf0:	f7f7 fa58 	bl	80072a4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fdfa:	f107 0120 	add.w	r1, r7, #32
 800fdfe:	f107 0010 	add.w	r0, r7, #16
 800fe02:	9300      	str	r3, [sp, #0]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f000 fdc3 	bl	8010990 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800fe0a:	f107 0310 	add.w	r3, r7, #16
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f000 fdd8 	bl	80109c4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>
  DstEvaluatorType dstEvaluator(dst);
 800fe14:	f107 0320 	add.w	r3, r7, #32
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7f6 ffcc 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800fe1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7ff ffbf 	bl	800fda6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
}
 800fe28:	bf00      	nop
 800fe2a:	3738      	adds	r7, #56	; 0x38
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6839      	ldr	r1, [r7, #0]
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f000 fdcb 	bl	80109da <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	4618      	mov	r0, r3
 800fe48:	3708      	adds	r7, #8
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800fe4e:	b480      	push	{r7}
 800fe50:	b083      	sub	sp, #12
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	370c      	adds	r7, #12
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fe64:	b5b0      	push	{r4, r5, r7, lr}
 800fe66:	b084      	sub	sp, #16
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	60f8      	str	r0, [r7, #12]
 800fe6c:	60b9      	str	r1, [r7, #8]
 800fe6e:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681c      	ldr	r4, [r3, #0]
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f000 fdc4 	bl	8010a02 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 800fe7a:	4602      	mov	r2, r0
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	fb03 f502 	mul.w	r5, r3, r2
 800fe82:	68f8      	ldr	r0, [r7, #12]
 800fe84:	f000 fdc8 	bl	8010a18 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 800fe88:	4602      	mov	r2, r0
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	fb02 f303 	mul.w	r3, r2, r3
 800fe90:	442b      	add	r3, r5
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	4423      	add	r3, r4
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	ee07 3a90 	vmov	s15, r3
  }
 800fe9c:	eeb0 0a67 	vmov.f32	s0, s15
 800fea0:	3710      	adds	r7, #16
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bdb0      	pop	{r4, r5, r7, pc}

0800fea6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800fea6:	b590      	push	{r4, r7, lr}
 800fea8:	b083      	sub	sp, #12
 800feaa:	af00      	add	r7, sp, #0
 800feac:	6078      	str	r0, [r7, #4]
 800feae:	6039      	str	r1, [r7, #0]
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f000 fdc7 	bl	8010a44 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800feb6:	687c      	ldr	r4, [r7, #4]
 800feb8:	6838      	ldr	r0, [r7, #0]
 800feba:	f000 fdb8 	bl	8010a2e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>
 800febe:	4603      	mov	r3, r0
 800fec0:	4619      	mov	r1, r3
 800fec2:	4620      	mov	r0, r4
 800fec4:	f000 fdc9 	bl	8010a5a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	4618      	mov	r0, r3
 800fecc:	370c      	adds	r7, #12
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd90      	pop	{r4, r7, pc}

0800fed2 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 800fed2:	b580      	push	{r7, lr}
 800fed4:	b082      	sub	sp, #8
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
 800feda:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6839      	ldr	r1, [r7, #0]
 800fee0:	4618      	mov	r0, r3
 800fee2:	f000 fdc9 	bl	8010a78 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	4618      	mov	r0, r3
 800feea:	f000 fdef 	bl	8010acc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 800feee:	bf00      	nop
  }
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	4618      	mov	r0, r3
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T value() const { return m_value; }
 800fefa:	b480      	push	{r7}
 800fefc:	b083      	sub	sp, #12
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	4618      	mov	r0, r3
 800ff08:	370c      	adds	r7, #12
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff10:	4770      	bx	lr

0800ff12 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ff12:	b5b0      	push	{r4, r5, r7, lr}
 800ff14:	b086      	sub	sp, #24
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	60f8      	str	r0, [r7, #12]
 800ff1a:	60b9      	str	r1, [r7, #8]
 800ff1c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	4618      	mov	r0, r3
 800ff22:	f000 fddf 	bl	8010ae4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 800ff26:	4604      	mov	r4, r0
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	3304      	adds	r3, #4
 800ff2c:	687a      	ldr	r2, [r7, #4]
 800ff2e:	68b9      	ldr	r1, [r7, #8]
 800ff30:	4618      	mov	r0, r3
 800ff32:	f000 fde2 	bl	8010afa <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 800ff36:	4605      	mov	r5, r0
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	3308      	adds	r3, #8
 800ff3c:	687a      	ldr	r2, [r7, #4]
 800ff3e:	68b9      	ldr	r1, [r7, #8]
 800ff40:	4618      	mov	r0, r3
 800ff42:	f000 fdf2 	bl	8010b2a <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>
 800ff46:	eef0 7a40 	vmov.f32	s15, s0
 800ff4a:	edc7 7a05 	vstr	s15, [r7, #20]
 800ff4e:	f107 0314 	add.w	r3, r7, #20
 800ff52:	461a      	mov	r2, r3
 800ff54:	4629      	mov	r1, r5
 800ff56:	4620      	mov	r0, r4
 800ff58:	f7fe fe76 	bl	800ec48 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800ff5c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ff60:	eeb0 0a67 	vmov.f32	s0, s15
 800ff64:	3718      	adds	r7, #24
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bdb0      	pop	{r4, r5, r7, pc}

0800ff6a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800ff6a:	b480      	push	{r7}
 800ff6c:	b083      	sub	sp, #12
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	6078      	str	r0, [r7, #4]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	4618      	mov	r0, r3
 800ff76:	370c      	adds	r7, #12
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ff80:	b480      	push	{r7}
 800ff82:	b083      	sub	sp, #12
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	370c      	adds	r7, #12
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr

0800ff96 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800ff96:	b580      	push	{r7, lr}
 800ff98:	b082      	sub	sp, #8
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
 800ff9e:	6039      	str	r1, [r7, #0]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6839      	ldr	r1, [r7, #0]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f000 fdd4 	bl	8010b52 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	4618      	mov	r0, r3
 800ffae:	3708      	adds	r7, #8
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}

0800ffb4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 800ffb4:	b590      	push	{r4, r7, lr}
 800ffb6:	b083      	sub	sp, #12
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f000 fdf2 	bl	8010ba8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f000 f81e 	bl	8010008 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 800ffcc:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	601a      	str	r2, [r3, #0]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	1d1c      	adds	r4, r3, #4
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f000 fdc9 	bl	8010b70 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	f7f6 fa04 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	1d5c      	adds	r4, r3, #5
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	4618      	mov	r0, r3
 800fff0:	f000 fdcc 	bl	8010b8c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 800fff4:	4603      	mov	r3, r0
 800fff6:	4619      	mov	r1, r3
 800fff8:	4620      	mov	r0, r4
 800fffa:	f7f6 f9df 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	4618      	mov	r0, r3
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	bd90      	pop	{r4, r7, pc}

08010008 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	4618      	mov	r0, r3
 8010016:	370c      	adds	r7, #12
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010020:	b580      	push	{r7, lr}
 8010022:	b082      	sub	sp, #8
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8010028:	f7f6 fa07 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801002c:	4603      	mov	r3, r0
  }
 801002e:	4618      	mov	r0, r3
 8010030:	3708      	adds	r7, #8
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}

08010036 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8010036:	b580      	push	{r7, lr}
 8010038:	b082      	sub	sp, #8
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 801003e:	f7f6 fa04 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8010042:	4603      	mov	r3, r0
  }
 8010044:	4618      	mov	r0, r3
 8010046:	3708      	adds	r7, #8
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}

0801004c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f000 fdb2 	bl	8010bbe <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>:
class dense_product_base
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f7ff ffed 	bl	801004c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	4618      	mov	r0, r3
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7ff ffed 	bl	8010064 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4618      	mov	r0, r3
 801008e:	3708      	adds	r7, #8
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8010094:	b590      	push	{r4, r7, lr}
 8010096:	b085      	sub	sp, #20
 8010098:	af00      	add	r7, sp, #0
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	60b9      	str	r1, [r7, #8]
 801009e:	607a      	str	r2, [r7, #4]
 80100a0:	68f8      	ldr	r0, [r7, #12]
 80100a2:	f7ff ffeb 	bl	801007c <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	68ba      	ldr	r2, [r7, #8]
 80100aa:	601a      	str	r2, [r3, #0]
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	687a      	ldr	r2, [r7, #4]
 80100b0:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7f4 fbeb 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80100ba:	4604      	mov	r4, r0
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	4618      	mov	r0, r3
 80100c0:	f7f4 fbf1 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80100c4:	4603      	mov	r3, r0
 80100c6:	429c      	cmp	r4, r3
 80100c8:	d005      	beq.n	80100d6 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x42>
 80100ca:	4b06      	ldr	r3, [pc, #24]	; (80100e4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x50>)
 80100cc:	4a06      	ldr	r2, [pc, #24]	; (80100e8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x54>)
 80100ce:	2160      	movs	r1, #96	; 0x60
 80100d0:	4806      	ldr	r0, [pc, #24]	; (80100ec <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x58>)
 80100d2:	f00d fd67 	bl	801dba4 <__assert_func>
 80100d6:	bf00      	nop
    }
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	4618      	mov	r0, r3
 80100dc:	3714      	adds	r7, #20
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd90      	pop	{r4, r7, pc}
 80100e2:	bf00      	nop
 80100e4:	0801fccc 	.word	0x0801fccc
 80100e8:	08027978 	.word	0x08027978
 80100ec:	0802001c 	.word	0x0802001c

080100f0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80100fc:	68b9      	ldr	r1, [r7, #8]
 80100fe:	68f8      	ldr	r0, [r7, #12]
 8010100:	f000 fd68 	bl	8010bd4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8010104:	687a      	ldr	r2, [r7, #4]
 8010106:	68b9      	ldr	r1, [r7, #8]
 8010108:	68f8      	ldr	r0, [r7, #12]
 801010a:	f000 fda6 	bl	8010c5a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 801010e:	bf00      	nop
 8010110:	3710      	adds	r7, #16
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}

08010116 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 8010116:	b580      	push	{r7, lr}
 8010118:	b082      	sub	sp, #8
 801011a:	af00      	add	r7, sp, #0
 801011c:	6078      	str	r0, [r7, #4]
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f7f5 f8d2 	bl	80052c8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010124:	4603      	mov	r3, r0
 8010126:	4618      	mov	r0, r3
 8010128:	f7fd fadc 	bl	800d6e4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 801012c:	4603      	mov	r3, r0
 801012e:	4618      	mov	r0, r3
 8010130:	f7f7 fcf2 	bl	8007b18 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8010134:	4603      	mov	r3, r0
 8010136:	4618      	mov	r0, r3
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}

0801013e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 801013e:	b580      	push	{r7, lr}
 8010140:	b082      	sub	sp, #8
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f7f5 f8be 	bl	80052c8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 801014c:	4603      	mov	r3, r0
 801014e:	4618      	mov	r0, r3
 8010150:	f7fd fac8 	bl	800d6e4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010154:	4603      	mov	r3, r0
 8010156:	4618      	mov	r0, r3
 8010158:	f7fd f968 	bl	800d42c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 801015c:	4603      	mov	r3, r0
 801015e:	4618      	mov	r0, r3
 8010160:	3708      	adds	r7, #8
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}

08010166 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 8010166:	b580      	push	{r7, lr}
 8010168:	b082      	sub	sp, #8
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7f5 f8aa 	bl	80052c8 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010174:	4603      	mov	r3, r0
 8010176:	4618      	mov	r0, r3
 8010178:	f7fd fab4 	bl	800d6e4 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 801017c:	4603      	mov	r3, r0
 801017e:	4618      	mov	r0, r3
 8010180:	f7f7 ff04 	bl	8007f8c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8010184:	4603      	mov	r3, r0
 8010186:	4618      	mov	r0, r3
 8010188:	3708      	adds	r7, #8
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}

0801018e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
 801018e:	b580      	push	{r7, lr}
 8010190:	b082      	sub	sp, #8
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f000 fd97 	bl	8010cca <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	4618      	mov	r0, r3
 80101a0:	3708      	adds	r7, #8
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
	...

080101a8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b084      	sub	sp, #16
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	60f8      	str	r0, [r7, #12]
 80101b0:	60b9      	str	r1, [r7, #8]
 80101b2:	607a      	str	r2, [r7, #4]
 80101b4:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 80101b6:	68f8      	ldr	r0, [r7, #12]
 80101b8:	f7ff ffe9 	bl	801018e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	68ba      	ldr	r2, [r7, #8]
 80101c0:	601a      	str	r2, [r3, #0]
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	3304      	adds	r3, #4
 80101c6:	6879      	ldr	r1, [r7, #4]
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7f6 f8f7 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	3305      	adds	r3, #5
 80101d2:	6839      	ldr	r1, [r7, #0]
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7f6 f90b 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d011      	beq.n	8010204 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	db08      	blt.n	80101f8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2b03      	cmp	r3, #3
 80101ea:	d105      	bne.n	80101f8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	db02      	blt.n	80101f8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	2b01      	cmp	r3, #1
 80101f6:	d005      	beq.n	8010204 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80101f8:	4b07      	ldr	r3, [pc, #28]	; (8010218 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 80101fa:	4a08      	ldr	r2, [pc, #32]	; (801021c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 80101fc:	21b0      	movs	r1, #176	; 0xb0
 80101fe:	4808      	ldr	r0, [pc, #32]	; (8010220 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 8010200:	f00d fcd0 	bl	801dba4 <__assert_func>
      checkSanity<Derived>();
 8010204:	2100      	movs	r1, #0
 8010206:	68f8      	ldr	r0, [r7, #12]
 8010208:	f000 fd6a 	bl	8010ce0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	4618      	mov	r0, r3
 8010210:	3710      	adds	r7, #16
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	bf00      	nop
 8010218:	08026130 	.word	0x08026130
 801021c:	08027aa0 	.word	0x08027aa0
 8010220:	080262e0 	.word	0x080262e0

08010224 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>:
    void init()
 8010224:	b580      	push	{r7, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 8010230:	4618      	mov	r0, r3
 8010232:	f7ff ff84 	bl	801013e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8010236:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	615a      	str	r2, [r3, #20]
    }
 801023c:	bf00      	nop
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8010244:	b580      	push	{r7, lr}
 8010246:	b082      	sub	sp, #8
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	6039      	str	r1, [r7, #0]
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f000 fd51 	bl	8010cf6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6839      	ldr	r1, [r7, #0]
 8010258:	4618      	mov	r0, r3
 801025a:	f000 fd57 	bl	8010d0c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4618      	mov	r0, r3
 8010262:	3708      	adds	r7, #8
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8010272:	2200      	movs	r2, #0
 8010274:	2100      	movs	r1, #0
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f000 fd70 	bl	8010d5c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 801027c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010280:	eeb0 0a67 	vmov.f32	s0, s15
 8010284:	3708      	adds	r7, #8
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}

0801028a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801028a:	b580      	push	{r7, lr}
 801028c:	b084      	sub	sp, #16
 801028e:	af00      	add	r7, sp, #0
 8010290:	6078      	str	r0, [r7, #4]
 8010292:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010294:	6839      	ldr	r1, [r7, #0]
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f000 fd73 	bl	8010d82 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 801029c:	eef0 7a40 	vmov.f32	s15, s0
 80102a0:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80102a4:	6839      	ldr	r1, [r7, #0]
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 fd7c 	bl	8010da4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 80102ac:	eef0 7a40 	vmov.f32	s15, s0
 80102b0:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80102b4:	f107 020c 	add.w	r2, r7, #12
 80102b8:	f107 0308 	add.w	r3, r7, #8
 80102bc:	4619      	mov	r1, r3
 80102be:	6838      	ldr	r0, [r7, #0]
 80102c0:	f7f8 fc81 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80102c4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80102c8:	eeb0 0a67 	vmov.f32	s0, s15
 80102cc:	3710      	adds	r7, #16
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}

080102d2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80102d2:	b580      	push	{r7, lr}
 80102d4:	b082      	sub	sp, #8
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80102da:	2202      	movs	r2, #2
 80102dc:	2102      	movs	r1, #2
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7fc f8c3 	bl	800c46a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f000 fd6e 	bl	8010dc6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>
  }
 80102ea:	bf00      	nop
 80102ec:	3708      	adds	r7, #8
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}

080102f2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80102f2:	b480      	push	{r7}
 80102f4:	b083      	sub	sp, #12
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	6078      	str	r0, [r7, #4]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	4618      	mov	r0, r3
 8010300:	370c      	adds	r7, #12
 8010302:	46bd      	mov	sp, r7
 8010304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010308:	4770      	bx	lr

0801030a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 801030a:	b480      	push	{r7}
 801030c:	b083      	sub	sp, #12
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	3304      	adds	r3, #4
 8010316:	4618      	mov	r0, r3
 8010318:	370c      	adds	r7, #12
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr

08010322 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010322:	b480      	push	{r7}
 8010324:	b083      	sub	sp, #12
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4618      	mov	r0, r3
 801032e:	370c      	adds	r7, #12
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6039      	str	r1, [r7, #0]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6839      	ldr	r1, [r7, #0]
 8010346:	4618      	mov	r0, r3
 8010348:	f000 fd47 	bl	8010dda <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	4618      	mov	r0, r3
 8010350:	3708      	adds	r7, #8
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}

08010356 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8010356:	b5b0      	push	{r4, r5, r7, lr}
 8010358:	b084      	sub	sp, #16
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
 801035e:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	689c      	ldr	r4, [r3, #8]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	6839      	ldr	r1, [r7, #0]
 801036a:	4618      	mov	r0, r3
 801036c:	f7f7 fe81 	bl	8008072 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8010370:	4605      	mov	r5, r0
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	6839      	ldr	r1, [r7, #0]
 8010378:	4618      	mov	r0, r3
 801037a:	f000 fd44 	bl	8010e06 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>
 801037e:	eef0 7a40 	vmov.f32	s15, s0
 8010382:	edc7 7a03 	vstr	s15, [r7, #12]
 8010386:	f107 030c 	add.w	r3, r7, #12
 801038a:	461a      	mov	r2, r3
 801038c:	4629      	mov	r1, r5
 801038e:	4620      	mov	r0, r4
 8010390:	f7f7 fe28 	bl	8007fe4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8010394:	bf00      	nop
 8010396:	3710      	adds	r7, #16
 8010398:	46bd      	mov	sp, r7
 801039a:	bdb0      	pop	{r4, r5, r7, pc}

0801039c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80103a4:	2101      	movs	r1, #1
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f7ff ffd5 	bl	8010356 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 fd63 	bl	8010e78 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>
  }
 80103b2:	bf00      	nop
 80103b4:	3708      	adds	r7, #8
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}

080103ba <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b082      	sub	sp, #8
 80103be:	af00      	add	r7, sp, #0
 80103c0:	6078      	str	r0, [r7, #4]
 80103c2:	6039      	str	r1, [r7, #0]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6839      	ldr	r1, [r7, #0]
 80103c8:	4618      	mov	r0, r3
 80103ca:	f000 fd64 	bl	8010e96 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	4618      	mov	r0, r3
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80103d8:	b480      	push	{r7}
 80103da:	b083      	sub	sp, #12
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	4618      	mov	r0, r3
 80103e4:	370c      	adds	r7, #12
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr
	...

080103f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b086      	sub	sp, #24
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	60b9      	str	r1, [r7, #8]
 80103fa:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80103fc:	68b8      	ldr	r0, [r7, #8]
 80103fe:	f7f5 faa4 	bl	800594a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010402:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8010404:	68b8      	ldr	r0, [r7, #8]
 8010406:	f7f5 faad 	bl	8005964 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 801040a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	4618      	mov	r0, r3
 8010410:	f7f5 fa39 	bl	8005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010414:	4602      	mov	r2, r0
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	4293      	cmp	r3, r2
 801041a:	d107      	bne.n	801042c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	4618      	mov	r0, r3
 8010420:	f7f5 fa3c 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010424:	4602      	mov	r2, r0
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	4293      	cmp	r3, r2
 801042a:	d001      	beq.n	8010430 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 801042c:	2301      	movs	r3, #1
 801042e:	e000      	b.n	8010432 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8010430:	2300      	movs	r3, #0
 8010432:	2b00      	cmp	r3, #0
 8010434:	d005      	beq.n	8010442 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	693a      	ldr	r2, [r7, #16]
 801043a:	6979      	ldr	r1, [r7, #20]
 801043c:	4618      	mov	r0, r3
 801043e:	f7fc fd73 	bl	800cf28 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	4618      	mov	r0, r3
 8010446:	f7f5 fa1e 	bl	8005886 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 801044a:	4602      	mov	r2, r0
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	4293      	cmp	r3, r2
 8010450:	d107      	bne.n	8010462 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	4618      	mov	r0, r3
 8010456:	f7f5 fa21 	bl	800589c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 801045a:	4602      	mov	r2, r0
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	4293      	cmp	r3, r2
 8010460:	d006      	beq.n	8010470 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8010462:	4b05      	ldr	r3, [pc, #20]	; (8010478 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8010464:	4a05      	ldr	r2, [pc, #20]	; (801047c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8010466:	f240 21fd 	movw	r1, #765	; 0x2fd
 801046a:	4805      	ldr	r0, [pc, #20]	; (8010480 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 801046c:	f00d fb9a 	bl	801dba4 <__assert_func>
}
 8010470:	bf00      	nop
 8010472:	3718      	adds	r7, #24
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}
 8010478:	08022084 	.word	0x08022084
 801047c:	08027bb8 	.word	0x08027bb8
 8010480:	08022198 	.word	0x08022198

08010484 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010484:	b480      	push	{r7}
 8010486:	b085      	sub	sp, #20
 8010488:	af00      	add	r7, sp, #0
 801048a:	60f8      	str	r0, [r7, #12]
 801048c:	60b9      	str	r1, [r7, #8]
 801048e:	607a      	str	r2, [r7, #4]
 8010490:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	68ba      	ldr	r2, [r7, #8]
 8010496:	601a      	str	r2, [r3, #0]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	605a      	str	r2, [r3, #4]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	683a      	ldr	r2, [r7, #0]
 80104a2:	609a      	str	r2, [r3, #8]
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	69ba      	ldr	r2, [r7, #24]
 80104a8:	60da      	str	r2, [r3, #12]
  }
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	4618      	mov	r0, r3
 80104ae:	3714      	adds	r7, #20
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr

080104b8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f000 fcfa 	bl	8010eba <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>
  }
 80104c6:	bf00      	nop
 80104c8:	3708      	adds	r7, #8
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 80104ce:	b480      	push	{r7}
 80104d0:	b083      	sub	sp, #12
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	4618      	mov	r0, r3
 80104da:	370c      	adds	r7, #12
 80104dc:	46bd      	mov	sp, r7
 80104de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e2:	4770      	bx	lr

080104e4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80104e4:	b480      	push	{r7}
 80104e6:	b083      	sub	sp, #12
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	4618      	mov	r0, r3
 80104f0:	370c      	adds	r7, #12
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr

080104fa <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80104fa:	b580      	push	{r7, lr}
 80104fc:	b082      	sub	sp, #8
 80104fe:	af00      	add	r7, sp, #0
 8010500:	6078      	str	r0, [r7, #4]
 8010502:	6039      	str	r1, [r7, #0]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6839      	ldr	r1, [r7, #0]
 8010508:	4618      	mov	r0, r3
 801050a:	f000 fce5 	bl	8010ed8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	4618      	mov	r0, r3
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8010518:	b590      	push	{r4, r7, lr}
 801051a:	b083      	sub	sp, #12
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f000 fd03 	bl	8010f2e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	4618      	mov	r0, r3
 801052c:	f000 f81e 	bl	801056c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 8010530:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	601a      	str	r2, [r3, #0]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	1d1c      	adds	r4, r3, #4
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	4618      	mov	r0, r3
 801053e:	f000 fcda 	bl	8010ef6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>
 8010542:	4603      	mov	r3, r0
 8010544:	4619      	mov	r1, r3
 8010546:	4620      	mov	r0, r4
 8010548:	f7f5 ff52 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	1d5c      	adds	r4, r3, #5
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	4618      	mov	r0, r3
 8010554:	f000 fcdd 	bl	8010f12 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>
 8010558:	4603      	mov	r3, r0
 801055a:	4619      	mov	r1, r3
 801055c:	4620      	mov	r0, r4
 801055e:	f7f5 ff47 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	4618      	mov	r0, r3
 8010566:	370c      	adds	r7, #12
 8010568:	46bd      	mov	sp, r7
 801056a:	bd90      	pop	{r4, r7, pc}

0801056c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4618      	mov	r0, r3
 801057a:	370c      	adds	r7, #12
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr

08010584 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010584:	b580      	push	{r7, lr}
 8010586:	b082      	sub	sp, #8
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801058c:	2100      	movs	r1, #0
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f000 fcd8 	bl	8010f44 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f000 fcf3 	bl	8010f80 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>
  }
 801059a:	bf00      	nop
 801059c:	3708      	adds	r7, #8
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b082      	sub	sp, #8
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 fcf2 	bl	8010f94 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	4618      	mov	r0, r3
 80105b4:	3708      	adds	r7, #8
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}

080105ba <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 80105ba:	b580      	push	{r7, lr}
 80105bc:	b082      	sub	sp, #8
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f7ff ffed 	bl	80105a2 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	4618      	mov	r0, r3
 80105cc:	3708      	adds	r7, #8
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}

080105d2 <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 80105d2:	b580      	push	{r7, lr}
 80105d4:	b082      	sub	sp, #8
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
 80105da:	6039      	str	r1, [r7, #0]
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f7ff ffec 	bl	80105ba <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	683a      	ldr	r2, [r7, #0]
 80105e6:	601a      	str	r2, [r3, #0]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	4618      	mov	r0, r3
 80105ec:	3708      	adds	r7, #8
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}

080105f2 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80105f2:	b480      	push	{r7}
 80105f4:	b083      	sub	sp, #12
 80105f6:	af00      	add	r7, sp, #0
 80105f8:	6078      	str	r0, [r7, #4]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	4618      	mov	r0, r3
 80105fe:	370c      	adds	r7, #12
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr

08010608 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f000 fcca 	bl	8010faa <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	4618      	mov	r0, r3
 801061a:	3708      	adds	r7, #8
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f7ff ffed 	bl	8010608 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	4618      	mov	r0, r3
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8010638:	b580      	push	{r7, lr}
 801063a:	b082      	sub	sp, #8
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	4618      	mov	r0, r3
 8010646:	f7f4 fae5 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801064a:	4603      	mov	r3, r0
 801064c:	4618      	mov	r0, r3
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4618      	mov	r0, r3
 8010662:	f7f4 fae2 	bl	8004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010666:	4603      	mov	r3, r0
 8010668:	4618      	mov	r0, r3
 801066a:	3708      	adds	r7, #8
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}

08010670 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8010670:	b590      	push	{r4, r7, lr}
 8010672:	b085      	sub	sp, #20
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	60b9      	str	r1, [r7, #8]
 801067a:	607a      	str	r2, [r7, #4]
 801067c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 801067e:	68f8      	ldr	r0, [r7, #12]
 8010680:	f7ff ffce 	bl	8010620 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	68ba      	ldr	r2, [r7, #8]
 8010688:	6812      	ldr	r2, [r2, #0]
 801068a:	601a      	str	r2, [r3, #0]
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	687a      	ldr	r2, [r7, #4]
 8010690:	605a      	str	r2, [r3, #4]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	3308      	adds	r3, #8
 8010696:	6839      	ldr	r1, [r7, #0]
 8010698:	4618      	mov	r0, r3
 801069a:	f7f4 fc2f 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 801069e:	68b8      	ldr	r0, [r7, #8]
 80106a0:	f7ff ffca 	bl	8010638 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80106a4:	4604      	mov	r4, r0
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7f4 f9a2 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80106ae:	4603      	mov	r3, r0
 80106b0:	429c      	cmp	r4, r3
 80106b2:	d10a      	bne.n	80106ca <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x5a>
 80106b4:	68b8      	ldr	r0, [r7, #8]
 80106b6:	f7ff ffcd 	bl	8010654 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80106ba:	4604      	mov	r4, r0
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	4618      	mov	r0, r3
 80106c0:	f7f4 f98c 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80106c4:	4603      	mov	r3, r0
 80106c6:	429c      	cmp	r4, r3
 80106c8:	d005      	beq.n	80106d6 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x66>
 80106ca:	4b05      	ldr	r3, [pc, #20]	; (80106e0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x70>)
 80106cc:	4a05      	ldr	r2, [pc, #20]	; (80106e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x74>)
 80106ce:	2174      	movs	r1, #116	; 0x74
 80106d0:	4805      	ldr	r0, [pc, #20]	; (80106e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x78>)
 80106d2:	f00d fa67 	bl	801dba4 <__assert_func>
    }
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	4618      	mov	r0, r3
 80106da:	3714      	adds	r7, #20
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd90      	pop	{r4, r7, pc}
 80106e0:	0801fa0c 	.word	0x0801fa0c
 80106e4:	08027d7c 	.word	0x08027d7c
 80106e8:	0801fc70 	.word	0x0801fc70

080106ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f000 f809 	bl	801070c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80106fa:	4603      	mov	r3, r0
 80106fc:	4618      	mov	r0, r3
 80106fe:	f000 fc5f 	bl	8010fc0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010702:	4603      	mov	r3, r0
 8010704:	4618      	mov	r0, r3
 8010706:	3708      	adds	r7, #8
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	4618      	mov	r0, r3
 8010718:	370c      	adds	r7, #12
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr

08010722 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8010722:	b580      	push	{r7, lr}
 8010724:	b082      	sub	sp, #8
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	4618      	mov	r0, r3
 801072e:	f7ff ff83 	bl	8010638 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010732:	4603      	mov	r3, r0
    }
 8010734:	4618      	mov	r0, r3
 8010736:	3708      	adds	r7, #8
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}

0801073c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<const T>
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	4618      	mov	r0, r3
 8010748:	f7fe f968 	bl	800ea1c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	4618      	mov	r0, r3
 8010750:	3708      	adds	r7, #8
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}

08010756 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8010756:	b580      	push	{r7, lr}
 8010758:	b082      	sub	sp, #8
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	4618      	mov	r0, r3
 8010762:	f7ff ffeb 	bl	801073c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 fc51 	bl	801100e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	4618      	mov	r0, r3
 8010770:	3708      	adds	r7, #8
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}

08010776 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8010776:	b580      	push	{r7, lr}
 8010778:	b082      	sub	sp, #8
 801077a:	af00      	add	r7, sp, #0
 801077c:	6078      	str	r0, [r7, #4]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	4618      	mov	r0, r3
 8010782:	f7ff ffe8 	bl	8010756 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	4618      	mov	r0, r3
 801078a:	3708      	adds	r7, #8
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<const T>
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	4618      	mov	r0, r3
 801079c:	f7ff ffeb 	bl	8010776 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	4618      	mov	r0, r3
 80107a4:	3708      	adds	r7, #8
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}

080107aa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 80107aa:	b580      	push	{r7, lr}
 80107ac:	b082      	sub	sp, #8
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	6078      	str	r0, [r7, #4]
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	3308      	adds	r3, #8
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7f8 f824 	bl	8008804 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	3304      	adds	r3, #4
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7ff ffe5 	bl	8010790 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	4618      	mov	r0, r3
 80107ca:	3708      	adds	r7, #8
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4618      	mov	r0, r3
 80107dc:	f7ff ffe5 	bl	80107aa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f000 fc09 	bl	8010ff8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	4618      	mov	r0, r3
 80107ea:	3708      	adds	r7, #8
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7ff ffe8 	bl	80107d0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	4618      	mov	r0, r3
 8010804:	3708      	adds	r7, #8
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}

0801080a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 801080a:	b580      	push	{r7, lr}
 801080c:	b082      	sub	sp, #8
 801080e:	af00      	add	r7, sp, #0
 8010810:	6078      	str	r0, [r7, #4]
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	4618      	mov	r0, r3
 8010816:	f7ff ffeb 	bl	80107f0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	4618      	mov	r0, r3
 801081e:	3708      	adds	r7, #8
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8010824:	b580      	push	{r7, lr}
 8010826:	ed2d 8b02 	vpush	{d8}
 801082a:	b086      	sub	sp, #24
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f7ff fa4b 	bl	800fcce <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	dd05      	ble.n	801084a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7ff ff54 	bl	80106ec <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>
 8010844:	4603      	mov	r3, r0
 8010846:	2b00      	cmp	r3, #0
 8010848:	dc06      	bgt.n	8010858 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 801084a:	4b16      	ldr	r3, [pc, #88]	; (80108a4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 801084c:	4a16      	ldr	r2, [pc, #88]	; (80108a8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 801084e:	f240 119b 	movw	r1, #411	; 0x19b
 8010852:	4816      	ldr	r0, [pc, #88]	; (80108ac <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8010854:	f00d f9a6 	bl	801dba4 <__assert_func>
 8010858:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f7ff ff56 	bl	801070c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010860:	4602      	mov	r2, r0
 8010862:	f107 030c 	add.w	r3, r7, #12
 8010866:	4611      	mov	r1, r2
 8010868:	4618      	mov	r0, r3
 801086a:	f000 fbb6 	bl	8010fda <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f7ff ff4c 	bl	801070c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010874:	4602      	mov	r2, r0
 8010876:	f107 030c 	add.w	r3, r7, #12
 801087a:	6839      	ldr	r1, [r7, #0]
 801087c:	4618      	mov	r0, r3
 801087e:	f000 fbd1 	bl	8011024 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>
 8010882:	eeb0 8a40 	vmov.f32	s16, s0
 8010886:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8010888:	f107 030c 	add.w	r3, r7, #12
 801088c:	4618      	mov	r0, r3
 801088e:	f7ff ffbc 	bl	801080a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8010892:	eef0 7a48 	vmov.f32	s15, s16
}
 8010896:	eeb0 0a67 	vmov.f32	s0, s15
 801089a:	3718      	adds	r7, #24
 801089c:	46bd      	mov	sp, r7
 801089e:	ecbd 8b02 	vpop	{d8}
 80108a2:	bd80      	pop	{r7, pc}
 80108a4:	08024a8c 	.word	0x08024a8c
 80108a8:	08027f44 	.word	0x08027f44
 80108ac:	08024c98 	.word	0x08024c98

080108b0 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>:
    static void run(const Derived&, const OtherDerived&)
 80108b0:	b480      	push	{r7}
 80108b2:	b083      	sub	sp, #12
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
    }
 80108ba:	bf00      	nop
 80108bc:	370c      	adds	r7, #12
 80108be:	46bd      	mov	sp, r7
 80108c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c4:	4770      	bx	lr

080108c6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80108c6:	b580      	push	{r7, lr}
 80108c8:	b082      	sub	sp, #8
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
 80108ce:	6039      	str	r1, [r7, #0]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6839      	ldr	r1, [r7, #0]
 80108d4:	4618      	mov	r0, r3
 80108d6:	f000 fbb6 	bl	8011046 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4618      	mov	r0, r3
 80108de:	3708      	adds	r7, #8
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80108e4:	b480      	push	{r7}
 80108e6:	b083      	sub	sp, #12
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	4618      	mov	r0, r3
 80108f0:	370c      	adds	r7, #12
 80108f2:	46bd      	mov	sp, r7
 80108f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f8:	4770      	bx	lr

080108fa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80108fa:	b580      	push	{r7, lr}
 80108fc:	b082      	sub	sp, #8
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	4618      	mov	r0, r3
 8010908:	f7f4 f873 	bl	80049f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 801090c:	4603      	mov	r3, r0
 801090e:	4618      	mov	r0, r3
 8010910:	3708      	adds	r7, #8
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}

08010916 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8010916:	b580      	push	{r7, lr}
 8010918:	b082      	sub	sp, #8
 801091a:	af00      	add	r7, sp, #0
 801091c:	6078      	str	r0, [r7, #4]
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	4618      	mov	r0, r3
 8010924:	f7f4 f976 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010928:	4603      	mov	r3, r0
 801092a:	4618      	mov	r0, r3
 801092c:	3708      	adds	r7, #8
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
	...

08010934 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 8010934:	b590      	push	{r4, r7, lr}
 8010936:	b085      	sub	sp, #20
 8010938:	af00      	add	r7, sp, #0
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	4618      	mov	r0, r3
 8010944:	f7f3 ffaf 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010948:	4604      	mov	r4, r0
 801094a:	68b8      	ldr	r0, [r7, #8]
 801094c:	f7ff ffd5 	bl	80108fa <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>
 8010950:	4603      	mov	r3, r0
 8010952:	429c      	cmp	r4, r3
 8010954:	d10a      	bne.n	801096c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	4618      	mov	r0, r3
 801095a:	f7f3 ff99 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 801095e:	4604      	mov	r4, r0
 8010960:	68b8      	ldr	r0, [r7, #8]
 8010962:	f7ff ffd8 	bl	8010916 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>
 8010966:	4603      	mov	r3, r0
 8010968:	429c      	cmp	r4, r3
 801096a:	d006      	beq.n	801097a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 801096c:	4b05      	ldr	r3, [pc, #20]	; (8010984 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 801096e:	4a06      	ldr	r2, [pc, #24]	; (8010988 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 8010970:	f240 21f2 	movw	r1, #754	; 0x2f2
 8010974:	4805      	ldr	r0, [pc, #20]	; (801098c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 8010976:	f00d f915 	bl	801dba4 <__assert_func>
}
 801097a:	bf00      	nop
 801097c:	3714      	adds	r7, #20
 801097e:	46bd      	mov	sp, r7
 8010980:	bd90      	pop	{r4, r7, pc}
 8010982:	bf00      	nop
 8010984:	080227a0 	.word	0x080227a0
 8010988:	080280c8 	.word	0x080280c8
 801098c:	08022198 	.word	0x08022198

08010990 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010990:	b480      	push	{r7}
 8010992:	b085      	sub	sp, #20
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
 801099c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	68ba      	ldr	r2, [r7, #8]
 80109a2:	601a      	str	r2, [r3, #0]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	687a      	ldr	r2, [r7, #4]
 80109a8:	605a      	str	r2, [r3, #4]
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	683a      	ldr	r2, [r7, #0]
 80109ae:	609a      	str	r2, [r3, #8]
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	69ba      	ldr	r2, [r7, #24]
 80109b4:	60da      	str	r2, [r3, #12]
  }
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	4618      	mov	r0, r3
 80109ba:	3714      	adds	r7, #20
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr

080109c4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f000 fb6f 	bl	80110b0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>
  }
 80109d2:	bf00      	nop
 80109d4:	3708      	adds	r7, #8
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}

080109da <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 80109da:	b580      	push	{r7, lr}
 80109dc:	b082      	sub	sp, #8
 80109de:	af00      	add	r7, sp, #0
 80109e0:	6078      	str	r0, [r7, #4]
 80109e2:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6839      	ldr	r1, [r7, #0]
 80109e8:	4618      	mov	r0, r3
 80109ea:	f000 fb71 	bl	80110d0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	4618      	mov	r0, r3
 80109f2:	f000 fb97 	bl	8011124 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 80109f6:	bf00      	nop
  }
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	4618      	mov	r0, r3
 80109fc:	3708      	adds	r7, #8
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}

08010a02 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010a02:	b580      	push	{r7, lr}
 8010a04:	b082      	sub	sp, #8
 8010a06:	af00      	add	r7, sp, #0
 8010a08:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8010a0a:	f7f5 fd16 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8010a0e:	4603      	mov	r3, r0
  }
 8010a10:	4618      	mov	r0, r3
 8010a12:	3708      	adds	r7, #8
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}

08010a18 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b082      	sub	sp, #8
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8010a20:	f7f5 fd13 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8010a24:	4603      	mov	r3, r0
  }
 8010a26:	4618      	mov	r0, r3
 8010a28:	3708      	adds	r7, #8
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}

08010a2e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010a2e:	b480      	push	{r7}
 8010a30:	b083      	sub	sp, #12
 8010a32:	af00      	add	r7, sp, #0
 8010a34:	6078      	str	r0, [r7, #4]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	4618      	mov	r0, r3
 8010a3a:	370c      	adds	r7, #12
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr

08010a44 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010a44:	b480      	push	{r7}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	370c      	adds	r7, #12
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr

08010a5a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010a5a:	b580      	push	{r7, lr}
 8010a5c:	b082      	sub	sp, #8
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	6078      	str	r0, [r7, #4]
 8010a62:	6039      	str	r1, [r7, #0]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6839      	ldr	r1, [r7, #0]
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f000 fb67 	bl	801113c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	4618      	mov	r0, r3
 8010a72:	3708      	adds	r7, #8
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8010a78:	b590      	push	{r4, r7, lr}
 8010a7a:	b083      	sub	sp, #12
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f000 fb85 	bl	8011192 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f000 f81e 	bl	8010acc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 8010a90:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	601a      	str	r2, [r3, #0]
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	1d1c      	adds	r4, r3, #4
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f000 fb5c 	bl	801115a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	f7f5 fca2 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	1d5c      	adds	r4, r3, #5
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f000 fb5f 	bl	8011176 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	4619      	mov	r1, r3
 8010abc:	4620      	mov	r0, r4
 8010abe:	f7f5 fc7d 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	370c      	adds	r7, #12
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd90      	pop	{r4, r7, pc}

08010acc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>:
 8010acc:	b480      	push	{r7}
 8010ace:	b083      	sub	sp, #12
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	370c      	adds	r7, #12
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr

08010ae4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8010ae4:	b480      	push	{r7}
 8010ae6:	b083      	sub	sp, #12
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	4618      	mov	r0, r3
 8010af0:	370c      	adds	r7, #12
 8010af2:	46bd      	mov	sp, r7
 8010af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af8:	4770      	bx	lr

08010afa <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010afa:	b590      	push	{r4, r7, lr}
 8010afc:	b085      	sub	sp, #20
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	60f8      	str	r0, [r7, #12]
 8010b02:	60b9      	str	r1, [r7, #8]
 8010b04:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	681c      	ldr	r4, [r3, #0]
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7f5 feef 	bl	80068f0 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8010b12:	4602      	mov	r2, r0
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	fb03 f202 	mul.w	r2, r3, r2
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	009b      	lsls	r3, r3, #2
 8010b20:	4423      	add	r3, r4
  }
 8010b22:	4618      	mov	r0, r3
 8010b24:	3714      	adds	r7, #20
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd90      	pop	{r4, r7, pc}

08010b2a <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>:
  CoeffReturnType coeff(IndexType row, IndexType col) const
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b084      	sub	sp, #16
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	60f8      	str	r0, [r7, #12]
 8010b32:	60b9      	str	r1, [r7, #8]
 8010b34:	607a      	str	r2, [r7, #4]
    return m_wrapper(m_functor, row, col);
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	1d18      	adds	r0, r3, #4
 8010b3a:	68f9      	ldr	r1, [r7, #12]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	68ba      	ldr	r2, [r7, #8]
 8010b40:	f000 fb32 	bl	80111a8 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>
 8010b44:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010b48:	eeb0 0a67 	vmov.f32	s0, s15
 8010b4c:	3710      	adds	r7, #16
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}

08010b52 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8010b52:	b580      	push	{r7, lr}
 8010b54:	b082      	sub	sp, #8
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	6078      	str	r0, [r7, #4]
 8010b5a:	6039      	str	r1, [r7, #0]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	6839      	ldr	r1, [r7, #0]
 8010b60:	4618      	mov	r0, r3
 8010b62:	f000 fb32 	bl	80111ca <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>
  }
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3708      	adds	r7, #8
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b082      	sub	sp, #8
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	689b      	ldr	r3, [r3, #8]
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f7fc fcca 	bl	800d516 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 8010b82:	4603      	mov	r3, r0
    }
 8010b84:	4618      	mov	r0, r3
 8010b86:	3708      	adds	r7, #8
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}

08010b8c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b082      	sub	sp, #8
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	689b      	ldr	r3, [r3, #8]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7f6 f82d 	bl	8006bf8 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 8010b9e:	4603      	mov	r3, r0
    }
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3708      	adds	r7, #8
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010ba8:	b480      	push	{r7}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	370c      	adds	r7, #12
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr

08010bbe <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8010bbe:	b480      	push	{r7}
 8010bc0:	b083      	sub	sp, #12
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	6078      	str	r0, [r7, #4]
    }
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	4618      	mov	r0, r3
 8010bca:	370c      	adds	r7, #12
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd2:	4770      	bx	lr

08010bd4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b082      	sub	sp, #8
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7f3 fe60 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010be6:	4603      	mov	r3, r0
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	dd08      	ble.n	8010bfe <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7f3 fe4e 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	2b01      	cmp	r3, #1
 8010bf8:	dd01      	ble.n	8010bfe <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 8010bfa:	2301      	movs	r3, #1
 8010bfc:	e000      	b.n	8010c00 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2c>
 8010bfe:	2300      	movs	r3, #0
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d003      	beq.n	8010c0c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8010c04:	6839      	ldr	r1, [r7, #0]
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f000 faf3 	bl	80111f2 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>
}
 8010c0c:	bf00      	nop
 8010c0e:	3708      	adds	r7, #8
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b082      	sub	sp, #8
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	330c      	adds	r3, #12
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7f6 f8c8 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	3308      	adds	r3, #8
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7f6 f8c3 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	f000 faf8 	bl	8011226 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7ff ffe2 	bl	8010c14 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	4618      	mov	r0, r3
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b090      	sub	sp, #64	; 0x40
 8010c5e:	af02      	add	r7, sp, #8
 8010c60:	60f8      	str	r0, [r7, #12]
 8010c62:	60b9      	str	r1, [r7, #8]
 8010c64:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8010c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c6a:	68b9      	ldr	r1, [r7, #8]
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f000 facb 	bl	8011208 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>
  resize_if_allowed(dst, src, func);
 8010c72:	687a      	ldr	r2, [r7, #4]
 8010c74:	68b9      	ldr	r1, [r7, #8]
 8010c76:	68f8      	ldr	r0, [r7, #12]
 8010c78:	f000 fafc 	bl	8011274 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8010c7c:	f107 0320 	add.w	r3, r7, #32
 8010c80:	68f9      	ldr	r1, [r7, #12]
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7f6 faa6 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8010c88:	68f8      	ldr	r0, [r7, #12]
 8010c8a:	f7f6 fb0b 	bl	80072a4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010c94:	f107 0120 	add.w	r1, r7, #32
 8010c98:	f107 0010 	add.w	r0, r7, #16
 8010c9c:	9300      	str	r3, [sp, #0]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f000 fb32 	bl	8011308 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8010ca4:	f107 0310 	add.w	r3, r7, #16
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f000 fb47 	bl	801133c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>
  DstEvaluatorType dstEvaluator(dst);
 8010cae:	f107 0320 	add.w	r3, r7, #32
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7f6 f87f 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8010cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7ff ffbf 	bl	8010c40 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
}
 8010cc2:	bf00      	nop
 8010cc4:	3738      	adds	r7, #56	; 0x38
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}

08010cca <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8010cca:	b480      	push	{r7}
 8010ccc:	b083      	sub	sp, #12
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	6078      	str	r0, [r7, #4]
    }
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	370c      	adds	r7, #12
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8010ce0:	b480      	push	{r7}
 8010ce2:	b083      	sub	sp, #12
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
    {}
 8010cea:	bf00      	nop
 8010cec:	370c      	adds	r7, #12
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf4:	4770      	bx	lr

08010cf6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 8010cf6:	b480      	push	{r7}
 8010cf8:	b083      	sub	sp, #12
 8010cfa:	af00      	add	r7, sp, #0
 8010cfc:	6078      	str	r0, [r7, #4]
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	4618      	mov	r0, r3
 8010d02:	370c      	adds	r7, #12
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr

08010d0c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8010d0c:	b590      	push	{r4, r7, lr}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
 8010d16:	687c      	ldr	r4, [r7, #4]
 8010d18:	6838      	ldr	r0, [r7, #0]
 8010d1a:	f000 fb1a 	bl	8011352 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	4619      	mov	r1, r3
 8010d22:	4620      	mov	r0, r4
 8010d24:	f7f4 f8ea 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	1d1c      	adds	r4, r3, #4
 8010d2c:	6838      	ldr	r0, [r7, #0]
 8010d2e:	f000 fb1c 	bl	801136a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>
 8010d32:	4603      	mov	r3, r0
 8010d34:	4619      	mov	r1, r3
 8010d36:	4620      	mov	r0, r4
 8010d38:	f7fd fc27 	bl	800e58a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f103 040c 	add.w	r4, r3, #12
 8010d42:	6838      	ldr	r0, [r7, #0]
 8010d44:	f000 fb1c 	bl	8011380 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	4619      	mov	r1, r3
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	f000 fb23 	bl	8011398 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	4618      	mov	r0, r3
 8010d56:	370c      	adds	r7, #12
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd90      	pop	{r4, r7, pc}

08010d5c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b084      	sub	sp, #16
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	60f8      	str	r0, [r7, #12]
 8010d64:	60b9      	str	r1, [r7, #8]
 8010d66:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	68ba      	ldr	r2, [r7, #8]
 8010d6c:	6879      	ldr	r1, [r7, #4]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f000 fb21 	bl	80113b6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8010d74:	eef0 7a40 	vmov.f32	s15, s0
 8010d78:	eeb0 0a67 	vmov.f32	s0, s15
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8010d82:	b580      	push	{r7, lr}
 8010d84:	b082      	sub	sp, #8
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
 8010d8a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8010d8c:	2201      	movs	r2, #1
 8010d8e:	2100      	movs	r1, #0
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f7ff ffe3 	bl	8010d5c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8010d96:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8010d9e:	3708      	adds	r7, #8
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}

08010da4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8010dae:	2202      	movs	r2, #2
 8010db0:	2100      	movs	r1, #0
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f7ff ffd2 	bl	8010d5c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8010db8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}

08010dc6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8010dc6:	b480      	push	{r7}
 8010dc8:	b083      	sub	sp, #12
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	6078      	str	r0, [r7, #4]
 8010dce:	bf00      	nop
 8010dd0:	370c      	adds	r7, #12
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr

08010dda <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8010dda:	b590      	push	{r4, r7, lr}
 8010ddc:	b083      	sub	sp, #12
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
 8010de2:	6039      	str	r1, [r7, #0]
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f000 fb22 	bl	801142e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010dea:	687c      	ldr	r4, [r7, #4]
 8010dec:	6838      	ldr	r0, [r7, #0]
 8010dee:	f000 fb12 	bl	8011416 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8010df2:	4603      	mov	r3, r0
 8010df4:	4619      	mov	r1, r3
 8010df6:	4620      	mov	r0, r4
 8010df8:	f000 fb24 	bl	8011444 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	4618      	mov	r0, r3
 8010e00:	370c      	adds	r7, #12
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd90      	pop	{r4, r7, pc}

08010e06 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 8010e06:	b580      	push	{r7, lr}
 8010e08:	b0a4      	sub	sp, #144	; 0x90
 8010e0a:	af00      	add	r7, sp, #0
 8010e0c:	6078      	str	r0, [r7, #4]
 8010e0e:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 8010e16:	2300      	movs	r3, #0
 8010e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6819      	ldr	r1, [r3, #0]
 8010e20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010e24:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7f9 fcdb 	bl	800a7e4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 8010e2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010e32:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010e36:	4611      	mov	r1, r2
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7f9 fce6 	bl	800a80a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	1d19      	adds	r1, r3, #4
 8010e42:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010e46:	2200      	movs	r2, #0
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f000 fb0b 	bl	8011464 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>
 8010e4e:	f107 030c 	add.w	r3, r7, #12
 8010e52:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8010e56:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f000 fb15 	bl	801148a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>
 8010e60:	f107 030c 	add.w	r3, r7, #12
 8010e64:	4618      	mov	r0, r3
 8010e66:	f000 fb3e 	bl	80114e6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>
 8010e6a:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8010e72:	3790      	adds	r7, #144	; 0x90
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010e80:	2102      	movs	r1, #2
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f7ff fa67 	bl	8010356 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f000 fb47 	bl	801151c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>
  }
 8010e8e:	bf00      	nop
 8010e90:	3708      	adds	r7, #8
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}

08010e96 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8010e96:	b580      	push	{r7, lr}
 8010e98:	b082      	sub	sp, #8
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	6078      	str	r0, [r7, #4]
 8010e9e:	6039      	str	r1, [r7, #0]
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f000 fb45 	bl	8011530 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6839      	ldr	r1, [r7, #0]
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f000 fb4b 	bl	8011546 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3708      	adds	r7, #8
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}

08010eba <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010eba:	b580      	push	{r7, lr}
 8010ebc:	b082      	sub	sp, #8
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010ec2:	2100      	movs	r1, #0
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f000 fb66 	bl	8011596 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 fb86 	bl	80115dc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>
  }
 8010ed0:	bf00      	nop
 8010ed2:	3708      	adds	r7, #8
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b082      	sub	sp, #8
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	6039      	str	r1, [r7, #0]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6839      	ldr	r1, [r7, #0]
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f000 fb82 	bl	80115f0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3708      	adds	r7, #8
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}

08010ef6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8010ef6:	b580      	push	{r7, lr}
 8010ef8:	b082      	sub	sp, #8
 8010efa:	af00      	add	r7, sp, #0
 8010efc:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	689b      	ldr	r3, [r3, #8]
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7fc fd14 	bl	800d930 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 8010f08:	4603      	mov	r3, r0
    }
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3708      	adds	r7, #8
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}

08010f12 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8010f12:	b580      	push	{r7, lr}
 8010f14:	b082      	sub	sp, #8
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	689b      	ldr	r3, [r3, #8]
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7fa fba2 	bl	800b668 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 8010f24:	4603      	mov	r3, r0
    }
 8010f26:	4618      	mov	r0, r3
 8010f28:	3708      	adds	r7, #8
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}

08010f2e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010f2e:	b480      	push	{r7}
 8010f30:	b083      	sub	sp, #12
 8010f32:	af00      	add	r7, sp, #0
 8010f34:	6078      	str	r0, [r7, #4]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	4618      	mov	r0, r3
 8010f3a:	370c      	adds	r7, #12
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f42:	4770      	bx	lr

08010f44 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8010f44:	b5b0      	push	{r4, r5, r7, lr}
 8010f46:	b082      	sub	sp, #8
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
 8010f4c:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	689c      	ldr	r4, [r3, #8]
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	6839      	ldr	r1, [r7, #0]
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f000 fb5d 	bl	8011618 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8010f5e:	4605      	mov	r5, r0
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	6839      	ldr	r1, [r7, #0]
 8010f66:	4618      	mov	r0, r3
 8010f68:	f000 fb66 	bl	8011638 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	461a      	mov	r2, r3
 8010f70:	4629      	mov	r1, r5
 8010f72:	4620      	mov	r0, r4
 8010f74:	f7f7 f836 	bl	8007fe4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8010f78:	bf00      	nop
 8010f7a:	3708      	adds	r7, #8
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bdb0      	pop	{r4, r5, r7, pc}

08010f80 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8010f80:	b480      	push	{r7}
 8010f82:	b083      	sub	sp, #12
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	bf00      	nop
 8010f8a:	370c      	adds	r7, #12
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr

08010f94 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8010f94:	b480      	push	{r7}
 8010f96:	b083      	sub	sp, #12
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
    }
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	370c      	adds	r7, #12
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa8:	4770      	bx	lr

08010faa <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8010faa:	b480      	push	{r7}
 8010fac:	b083      	sub	sp, #12
 8010fae:	af00      	add	r7, sp, #0
 8010fb0:	6078      	str	r0, [r7, #4]
    }
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	370c      	adds	r7, #12
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbe:	4770      	bx	lr

08010fc0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b082      	sub	sp, #8
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7ff fb42 	bl	8010654 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010fd0:	4603      	mov	r3, r0
    }
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	3708      	adds	r7, #8
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}

08010fda <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8010fda:	b580      	push	{r7, lr}
 8010fdc:	b082      	sub	sp, #8
 8010fde:	af00      	add	r7, sp, #0
 8010fe0:	6078      	str	r0, [r7, #4]
 8010fe2:	6039      	str	r1, [r7, #0]
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6839      	ldr	r1, [r7, #0]
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f000 fb35 	bl	8011658 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010ff8:	b480      	push	{r7}
 8010ffa:	b083      	sub	sp, #12
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	4618      	mov	r0, r3
 8011004:	370c      	adds	r7, #12
 8011006:	46bd      	mov	sp, r7
 8011008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100c:	4770      	bx	lr

0801100e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 801100e:	b480      	push	{r7}
 8011010:	b083      	sub	sp, #12
 8011012:	af00      	add	r7, sp, #0
 8011014:	6078      	str	r0, [r7, #4]
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	4618      	mov	r0, r3
 801101a:	370c      	adds	r7, #12
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr

08011024 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	60f8      	str	r0, [r7, #12]
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8011030:	68b9      	ldr	r1, [r7, #8]
 8011032:	68f8      	ldr	r0, [r7, #12]
 8011034:	f000 fb1f 	bl	8011676 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>
 8011038:	eef0 7a40 	vmov.f32	s15, s0
  }
 801103c:	eeb0 0a67 	vmov.f32	s0, s15
 8011040:	3710      	adds	r7, #16
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}

08011046 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8011046:	b580      	push	{r7, lr}
 8011048:	b082      	sub	sp, #8
 801104a:	af00      	add	r7, sp, #0
 801104c:	6078      	str	r0, [r7, #4]
 801104e:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f000 fb4c 	bl	80116ee <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8011056:	6838      	ldr	r0, [r7, #0]
 8011058:	f000 fb31 	bl	80116be <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 801105c:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8011062:	6838      	ldr	r0, [r7, #0]
 8011064:	f000 fb37 	bl	80116d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>
 8011068:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	605a      	str	r2, [r3, #4]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8011078:	4619      	mov	r1, r3
 801107a:	4610      	mov	r0, r2
 801107c:	f7f5 f95f 	bl	800633e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 801108a:	4619      	mov	r1, r3
 801108c:	4610      	mov	r0, r2
 801108e:	f000 f9d9 	bl	8011444 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8011092:	6838      	ldr	r0, [r7, #0]
 8011094:	f000 fb13 	bl	80116be <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8011098:	4603      	mov	r3, r0
 801109a:	4618      	mov	r0, r3
 801109c:	f7f3 fc9e 	bl	80049dc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80110a0:	4602      	mov	r2, r0
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	611a      	str	r2, [r3, #16]
  }
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	4618      	mov	r0, r3
 80110aa:	3708      	adds	r7, #8
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}

080110b0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80110b8:	2200      	movs	r2, #0
 80110ba:	2100      	movs	r1, #0
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f000 fb21 	bl	8011704 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f000 fb37 	bl	8011736 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>
  }
 80110c8:	bf00      	nop
 80110ca:	3708      	adds	r7, #8
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}

080110d0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80110d0:	b590      	push	{r4, r7, lr}
 80110d2:	b083      	sub	sp, #12
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f000 fb57 	bl	801178e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	4618      	mov	r0, r3
 80110e4:	f000 f81e 	bl	8011124 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 80110e8:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	601a      	str	r2, [r3, #0]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	1d1c      	adds	r4, r3, #4
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	4618      	mov	r0, r3
 80110f6:	f000 fb2e 	bl	8011756 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 80110fa:	4603      	mov	r3, r0
 80110fc:	4619      	mov	r1, r3
 80110fe:	4620      	mov	r0, r4
 8011100:	f7f5 f976 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	1d5c      	adds	r4, r3, #5
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	4618      	mov	r0, r3
 801110c:	f000 fb31 	bl	8011772 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8011110:	4603      	mov	r3, r0
 8011112:	4619      	mov	r1, r3
 8011114:	4620      	mov	r0, r4
 8011116:	f7f5 f951 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	4618      	mov	r0, r3
 801111e:	370c      	adds	r7, #12
 8011120:	46bd      	mov	sp, r7
 8011122:	bd90      	pop	{r4, r7, pc}

08011124 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8011124:	b480      	push	{r7}
 8011126:	b083      	sub	sp, #12
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4618      	mov	r0, r3
 8011132:	370c      	adds	r7, #12
 8011134:	46bd      	mov	sp, r7
 8011136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113a:	4770      	bx	lr

0801113c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	6039      	str	r1, [r7, #0]
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6839      	ldr	r1, [r7, #0]
 801114a:	4618      	mov	r0, r3
 801114c:	f000 fb2a 	bl	80117a4 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>
  }
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	4618      	mov	r0, r3
 8011154:	3708      	adds	r7, #8
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}

0801115a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801115a:	b580      	push	{r7, lr}
 801115c:	b082      	sub	sp, #8
 801115e:	af00      	add	r7, sp, #0
 8011160:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	3308      	adds	r3, #8
 8011166:	4618      	mov	r0, r3
 8011168:	f7fc fd6a 	bl	800dc40 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 801116c:	4603      	mov	r3, r0
    }
 801116e:	4618      	mov	r0, r3
 8011170:	3708      	adds	r7, #8
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}

08011176 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011176:	b580      	push	{r7, lr}
 8011178:	b082      	sub	sp, #8
 801117a:	af00      	add	r7, sp, #0
 801117c:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	3308      	adds	r3, #8
 8011182:	4618      	mov	r0, r3
 8011184:	f7fc fd70 	bl	800dc68 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 8011188:	4603      	mov	r3, r0
    }
 801118a:	4618      	mov	r0, r3
 801118c:	3708      	adds	r7, #8
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}

08011192 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011192:	b480      	push	{r7}
 8011194:	b083      	sub	sp, #12
 8011196:	af00      	add	r7, sp, #0
 8011198:	6078      	str	r0, [r7, #4]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	4618      	mov	r0, r3
 801119e:	370c      	adds	r7, #12
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr

080111a8 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexType=0) const { return op(); }
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	60b9      	str	r1, [r7, #8]
 80111b2:	607a      	str	r2, [r7, #4]
 80111b4:	603b      	str	r3, [r7, #0]
 80111b6:	68b8      	ldr	r0, [r7, #8]
 80111b8:	f000 fb03 	bl	80117c2 <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>
 80111bc:	eef0 7a40 	vmov.f32	s15, s0
 80111c0:	eeb0 0a67 	vmov.f32	s0, s15
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}

080111ca <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80111ca:	b580      	push	{r7, lr}
 80111cc:	b082      	sub	sp, #8
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
 80111d2:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	6839      	ldr	r1, [r7, #0]
 80111d8:	4618      	mov	r0, r3
 80111da:	f000 fb01 	bl	80117e0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	4618      	mov	r0, r3
 80111e2:	f000 fb27 	bl	8011834 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 80111e6:	bf00      	nop
  }
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	4618      	mov	r0, r3
 80111ec:	3708      	adds	r7, #8
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}

080111f2 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>:
    static void run(const Derived&, const OtherDerived&)
 80111f2:	b480      	push	{r7}
 80111f4:	b083      	sub	sp, #12
 80111f6:	af00      	add	r7, sp, #0
 80111f8:	6078      	str	r0, [r7, #4]
 80111fa:	6039      	str	r1, [r7, #0]
    }
 80111fc:	bf00      	nop
 80111fe:	370c      	adds	r7, #12
 8011200:	46bd      	mov	sp, r7
 8011202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011206:	4770      	bx	lr

08011208 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011208:	b580      	push	{r7, lr}
 801120a:	b082      	sub	sp, #8
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6039      	str	r1, [r7, #0]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6839      	ldr	r1, [r7, #0]
 8011216:	4618      	mov	r0, r3
 8011218:	f000 fb18 	bl	801184c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	4618      	mov	r0, r3
 8011220:	3708      	adds	r7, #8
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8011226:	b480      	push	{r7}
 8011228:	b083      	sub	sp, #12
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	4618      	mov	r0, r3
 8011232:	370c      	adds	r7, #12
 8011234:	46bd      	mov	sp, r7
 8011236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123a:	4770      	bx	lr

0801123c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 801123c:	b580      	push	{r7, lr}
 801123e:	b082      	sub	sp, #8
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	4618      	mov	r0, r3
 801124a:	f7f3 fb2c 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 801124e:	4603      	mov	r3, r0
 8011250:	4618      	mov	r0, r3
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	685b      	ldr	r3, [r3, #4]
 8011264:	4618      	mov	r0, r3
 8011266:	f7f3 fb13 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 801126a:	4603      	mov	r3, r0
 801126c:	4618      	mov	r0, r3
 801126e:	3708      	adds	r7, #8
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}

08011274 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8011274:	b580      	push	{r7, lr}
 8011276:	b086      	sub	sp, #24
 8011278:	af00      	add	r7, sp, #0
 801127a:	60f8      	str	r0, [r7, #12]
 801127c:	60b9      	str	r1, [r7, #8]
 801127e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8011280:	68b8      	ldr	r0, [r7, #8]
 8011282:	f7ff ffdb 	bl	801123c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>
 8011286:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8011288:	68b8      	ldr	r0, [r7, #8]
 801128a:	f7ff ffe5 	bl	8011258 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>
 801128e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	4618      	mov	r0, r3
 8011294:	f7f3 fb07 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011298:	4602      	mov	r2, r0
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	4293      	cmp	r3, r2
 801129e:	d107      	bne.n	80112b0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7f3 faf4 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80112a8:	4602      	mov	r2, r0
 80112aa:	693b      	ldr	r3, [r7, #16]
 80112ac:	4293      	cmp	r3, r2
 80112ae:	d001      	beq.n	80112b4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80112b0:	2301      	movs	r3, #1
 80112b2:	e000      	b.n	80112b6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80112b4:	2300      	movs	r3, #0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d005      	beq.n	80112c6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	693a      	ldr	r2, [r7, #16]
 80112be:	6979      	ldr	r1, [r7, #20]
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7f6 fa09 	bl	80076d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7f3 faec 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80112ce:	4602      	mov	r2, r0
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d107      	bne.n	80112e6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	4618      	mov	r0, r3
 80112da:	f7f3 fad9 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80112de:	4602      	mov	r2, r0
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d006      	beq.n	80112f4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80112e6:	4b05      	ldr	r3, [pc, #20]	; (80112fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80112e8:	4a05      	ldr	r2, [pc, #20]	; (8011300 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80112ea:	f240 21fd 	movw	r1, #765	; 0x2fd
 80112ee:	4805      	ldr	r0, [pc, #20]	; (8011304 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80112f0:	f00c fc58 	bl	801dba4 <__assert_func>
}
 80112f4:	bf00      	nop
 80112f6:	3718      	adds	r7, #24
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	08022084 	.word	0x08022084
 8011300:	080281e0 	.word	0x080281e0
 8011304:	08022198 	.word	0x08022198

08011308 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8011308:	b480      	push	{r7}
 801130a:	b085      	sub	sp, #20
 801130c:	af00      	add	r7, sp, #0
 801130e:	60f8      	str	r0, [r7, #12]
 8011310:	60b9      	str	r1, [r7, #8]
 8011312:	607a      	str	r2, [r7, #4]
 8011314:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	68ba      	ldr	r2, [r7, #8]
 801131a:	601a      	str	r2, [r3, #0]
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	687a      	ldr	r2, [r7, #4]
 8011320:	605a      	str	r2, [r3, #4]
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	683a      	ldr	r2, [r7, #0]
 8011326:	609a      	str	r2, [r3, #8]
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	69ba      	ldr	r2, [r7, #24]
 801132c:	60da      	str	r2, [r3, #12]
  }
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	4618      	mov	r0, r3
 8011332:	3714      	adds	r7, #20
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr

0801133c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801133c:	b580      	push	{r7, lr}
 801133e:	b082      	sub	sp, #8
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f000 fab6 	bl	80118b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>
  }
 801134a:	bf00      	nop
 801134c:	3708      	adds	r7, #8
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}

08011352 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8011352:	b480      	push	{r7}
 8011354:	b083      	sub	sp, #12
 8011356:	af00      	add	r7, sp, #0
 8011358:	6078      	str	r0, [r7, #4]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	3330      	adds	r3, #48	; 0x30
 801135e:	4618      	mov	r0, r3
 8011360:	370c      	adds	r7, #12
 8011362:	46bd      	mov	sp, r7
 8011364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011368:	4770      	bx	lr

0801136a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 801136a:	b480      	push	{r7}
 801136c:	b083      	sub	sp, #12
 801136e:	af00      	add	r7, sp, #0
 8011370:	6078      	str	r0, [r7, #4]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	4618      	mov	r0, r3
 8011376:	370c      	adds	r7, #12
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr

08011380 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8011380:	b480      	push	{r7}
 8011382:	b083      	sub	sp, #12
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	3318      	adds	r3, #24
 801138c:	4618      	mov	r0, r3
 801138e:	370c      	adds	r7, #12
 8011390:	46bd      	mov	sp, r7
 8011392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011396:	4770      	bx	lr

08011398 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	6039      	str	r1, [r7, #0]
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6839      	ldr	r1, [r7, #0]
 80113a6:	4618      	mov	r0, r3
 80113a8:	f000 fa95 	bl	80118d6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4618      	mov	r0, r3
 80113b0:	3708      	adds	r7, #8
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}

080113b6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80113b6:	b590      	push	{r4, r7, lr}
 80113b8:	b087      	sub	sp, #28
 80113ba:	af00      	add	r7, sp, #0
 80113bc:	60f8      	str	r0, [r7, #12]
 80113be:	60b9      	str	r1, [r7, #8]
 80113c0:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	4618      	mov	r0, r3
 80113c6:	f000 fa95 	bl	80118f4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 80113ca:	4604      	mov	r4, r0
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	3304      	adds	r3, #4
 80113d0:	687a      	ldr	r2, [r7, #4]
 80113d2:	68b9      	ldr	r1, [r7, #8]
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7fd fdf3 	bl	800efc0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 80113da:	eef0 7a40 	vmov.f32	s15, s0
 80113de:	edc7 7a04 	vstr	s15, [r7, #16]
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	330c      	adds	r3, #12
 80113e6:	687a      	ldr	r2, [r7, #4]
 80113e8:	68b9      	ldr	r1, [r7, #8]
 80113ea:	4618      	mov	r0, r3
 80113ec:	f000 fa8d 	bl	801190a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 80113f0:	eef0 7a40 	vmov.f32	s15, s0
 80113f4:	edc7 7a05 	vstr	s15, [r7, #20]
 80113f8:	f107 0214 	add.w	r2, r7, #20
 80113fc:	f107 0310 	add.w	r3, r7, #16
 8011400:	4619      	mov	r1, r3
 8011402:	4620      	mov	r0, r4
 8011404:	f7fd fc20 	bl	800ec48 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8011408:	eef0 7a40 	vmov.f32	s15, s0
  }
 801140c:	eeb0 0a67 	vmov.f32	s0, s15
 8011410:	371c      	adds	r7, #28
 8011412:	46bd      	mov	sp, r7
 8011414:	bd90      	pop	{r4, r7, pc}

08011416 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8011416:	b480      	push	{r7}
 8011418:	b083      	sub	sp, #12
 801141a:	af00      	add	r7, sp, #0
 801141c:	6078      	str	r0, [r7, #4]
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	4618      	mov	r0, r3
 8011424:	370c      	adds	r7, #12
 8011426:	46bd      	mov	sp, r7
 8011428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142c:	4770      	bx	lr

0801142e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801142e:	b480      	push	{r7}
 8011430:	b083      	sub	sp, #12
 8011432:	af00      	add	r7, sp, #0
 8011434:	6078      	str	r0, [r7, #4]
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	4618      	mov	r0, r3
 801143a:	370c      	adds	r7, #12
 801143c:	46bd      	mov	sp, r7
 801143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011442:	4770      	bx	lr

08011444 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8011444:	b580      	push	{r7, lr}
 8011446:	b082      	sub	sp, #8
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
 801144c:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	683a      	ldr	r2, [r7, #0]
 8011452:	4611      	mov	r1, r2
 8011454:	4618      	mov	r0, r3
 8011456:	f000 fa79 	bl	801194c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
  { }
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	4618      	mov	r0, r3
 801145e:	3708      	adds	r7, #8
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 8011464:	b580      	push	{r7, lr}
 8011466:	b084      	sub	sp, #16
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	60b9      	str	r1, [r7, #8]
 801146e:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8011470:	68b8      	ldr	r0, [r7, #8]
 8011472:	f7f4 f887 	bl	8005584 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8011476:	4603      	mov	r3, r0
 8011478:	687a      	ldr	r2, [r7, #4]
 801147a:	4619      	mov	r1, r3
 801147c:	68f8      	ldr	r0, [r7, #12]
 801147e:	f000 fa7d 	bl	801197c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>
}
 8011482:	68f8      	ldr	r0, [r7, #12]
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 801148a:	b5b0      	push	{r4, r5, r7, lr}
 801148c:	b086      	sub	sp, #24
 801148e:	af00      	add	r7, sp, #0
 8011490:	60f8      	str	r0, [r7, #12]
 8011492:	60b9      	str	r1, [r7, #8]
 8011494:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8011496:	68b8      	ldr	r0, [r7, #8]
 8011498:	f7f9 fe6e 	bl	800b178 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 801149c:	4604      	mov	r4, r0
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f000 fa94 	bl	80119cc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>
 80114a4:	4605      	mov	r5, r0
 80114a6:	f107 0314 	add.w	r3, r7, #20
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7f3 fc9c 	bl	8004de8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80114b0:	f107 0314 	add.w	r3, r7, #20
 80114b4:	462a      	mov	r2, r5
 80114b6:	4621      	mov	r1, r4
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f000 fac1 	bl	8011a40 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>
}
 80114be:	68f8      	ldr	r0, [r7, #12]
 80114c0:	3718      	adds	r7, #24
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bdb0      	pop	{r4, r5, r7, pc}

080114c6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b082      	sub	sp, #8
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f000 fb14 	bl	8011afc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 80114d4:	4603      	mov	r3, r0
 80114d6:	4618      	mov	r0, r3
 80114d8:	f000 fb1b 	bl	8011b12 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>
 80114dc:	4603      	mov	r3, r0
 80114de:	4618      	mov	r0, r3
 80114e0:	3708      	adds	r7, #8
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}

080114e6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 80114e6:	b590      	push	{r4, r7, lr}
 80114e8:	b085      	sub	sp, #20
 80114ea:	af00      	add	r7, sp, #0
 80114ec:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f000 fb04 	bl	8011afc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 80114f4:	4604      	mov	r4, r0
 80114f6:	f107 030c 	add.w	r3, r7, #12
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7f3 ff6b 	bl	80053d6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8011500:	f107 030c 	add.w	r3, r7, #12
 8011504:	4619      	mov	r1, r3
 8011506:	4620      	mov	r0, r4
 8011508:	f000 fb80 	bl	8011c0c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 801150c:	eef0 7a40 	vmov.f32	s15, s0
 8011510:	bf00      	nop
}
 8011512:	eeb0 0a67 	vmov.f32	s0, s15
 8011516:	3714      	adds	r7, #20
 8011518:	46bd      	mov	sp, r7
 801151a:	bd90      	pop	{r4, r7, pc}

0801151c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 801151c:	b480      	push	{r7}
 801151e:	b083      	sub	sp, #12
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	bf00      	nop
 8011526:	370c      	adds	r7, #12
 8011528:	46bd      	mov	sp, r7
 801152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152e:	4770      	bx	lr

08011530 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011530:	b480      	push	{r7}
 8011532:	b083      	sub	sp, #12
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	4618      	mov	r0, r3
 801153c:	370c      	adds	r7, #12
 801153e:	46bd      	mov	sp, r7
 8011540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011544:	4770      	bx	lr

08011546 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8011546:	b590      	push	{r4, r7, lr}
 8011548:	b083      	sub	sp, #12
 801154a:	af00      	add	r7, sp, #0
 801154c:	6078      	str	r0, [r7, #4]
 801154e:	6039      	str	r1, [r7, #0]
 8011550:	687c      	ldr	r4, [r7, #4]
 8011552:	6838      	ldr	r0, [r7, #0]
 8011554:	f000 fba0 	bl	8011c98 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>
 8011558:	4603      	mov	r3, r0
 801155a:	4619      	mov	r1, r3
 801155c:	4620      	mov	r0, r4
 801155e:	f7f3 ffb9 	bl	80054d4 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	1d1c      	adds	r4, r3, #4
 8011566:	6838      	ldr	r0, [r7, #0]
 8011568:	f000 fba2 	bl	8011cb0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>
 801156c:	4603      	mov	r3, r0
 801156e:	4619      	mov	r1, r3
 8011570:	4620      	mov	r0, r4
 8011572:	f000 fbb4 	bl	8011cde <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f103 040c 	add.w	r4, r3, #12
 801157c:	6838      	ldr	r0, [r7, #0]
 801157e:	f000 fba2 	bl	8011cc6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>
 8011582:	4603      	mov	r3, r0
 8011584:	4619      	mov	r1, r3
 8011586:	4620      	mov	r0, r4
 8011588:	f000 fbb8 	bl	8011cfc <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	4618      	mov	r0, r3
 8011590:	370c      	adds	r7, #12
 8011592:	46bd      	mov	sp, r7
 8011594:	bd90      	pop	{r4, r7, pc}

08011596 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8011596:	b5b0      	push	{r4, r5, r7, lr}
 8011598:	b084      	sub	sp, #16
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
 801159e:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	689c      	ldr	r4, [r3, #8]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	6839      	ldr	r1, [r7, #0]
 80115aa:	4618      	mov	r0, r3
 80115ac:	f000 f834 	bl	8011618 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 80115b0:	4605      	mov	r5, r0
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	685b      	ldr	r3, [r3, #4]
 80115b6:	6839      	ldr	r1, [r7, #0]
 80115b8:	4618      	mov	r0, r3
 80115ba:	f000 fbae 	bl	8011d1a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>
 80115be:	eef0 7a40 	vmov.f32	s15, s0
 80115c2:	edc7 7a03 	vstr	s15, [r7, #12]
 80115c6:	f107 030c 	add.w	r3, r7, #12
 80115ca:	461a      	mov	r2, r3
 80115cc:	4629      	mov	r1, r5
 80115ce:	4620      	mov	r0, r4
 80115d0:	f7f6 fd08 	bl	8007fe4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80115d4:	bf00      	nop
 80115d6:	3710      	adds	r7, #16
 80115d8:	46bd      	mov	sp, r7
 80115da:	bdb0      	pop	{r4, r5, r7, pc}

080115dc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 80115dc:	b480      	push	{r7}
 80115de:	b083      	sub	sp, #12
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	bf00      	nop
 80115e6:	370c      	adds	r7, #12
 80115e8:	46bd      	mov	sp, r7
 80115ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ee:	4770      	bx	lr

080115f0 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6839      	ldr	r1, [r7, #0]
 80115fe:	4618      	mov	r0, r3
 8011600:	f000 fbaf 	bl	8011d62 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	4618      	mov	r0, r3
 8011608:	f000 fbd5 	bl	8011db6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 801160c:	bf00      	nop
  }
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	4618      	mov	r0, r3
 8011612:	3708      	adds	r7, #8
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8011618:	b480      	push	{r7}
 801161a:	b083      	sub	sp, #12
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681a      	ldr	r2, [r3, #0]
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	009b      	lsls	r3, r3, #2
 801162a:	4413      	add	r3, r2
  }
 801162c:	4618      	mov	r0, r3
 801162e:	370c      	adds	r7, #12
 8011630:	46bd      	mov	sp, r7
 8011632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011636:	4770      	bx	lr

08011638 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8011638:	b480      	push	{r7}
 801163a:	b083      	sub	sp, #12
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
 8011640:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	009b      	lsls	r3, r3, #2
 801164a:	4413      	add	r3, r2
  }
 801164c:	4618      	mov	r0, r3
 801164e:	370c      	adds	r7, #12
 8011650:	46bd      	mov	sp, r7
 8011652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011656:	4770      	bx	lr

08011658 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	6039      	str	r1, [r7, #0]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6839      	ldr	r1, [r7, #0]
 8011666:	4618      	mov	r0, r3
 8011668:	f000 fbb1 	bl	8011dce <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	4618      	mov	r0, r3
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}

08011676 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8011676:	b580      	push	{r7, lr}
 8011678:	b084      	sub	sp, #16
 801167a:	af00      	add	r7, sp, #0
 801167c:	6078      	str	r0, [r7, #4]
 801167e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011680:	6839      	ldr	r1, [r7, #0]
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f000 fbb5 	bl	8011df2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>
 8011688:	eef0 7a40 	vmov.f32	s15, s0
 801168c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8011690:	6839      	ldr	r1, [r7, #0]
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f000 fbbe 	bl	8011e14 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>
 8011698:	eef0 7a40 	vmov.f32	s15, s0
 801169c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80116a0:	f107 020c 	add.w	r2, r7, #12
 80116a4:	f107 0308 	add.w	r3, r7, #8
 80116a8:	4619      	mov	r1, r3
 80116aa:	6838      	ldr	r0, [r7, #0]
 80116ac:	f7f7 fa8b 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80116b0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80116b4:	eeb0 0a67 	vmov.f32	s0, s15
 80116b8:	3710      	adds	r7, #16
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}

080116be <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80116be:	b480      	push	{r7}
 80116c0:	b083      	sub	sp, #12
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	6078      	str	r0, [r7, #4]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	4618      	mov	r0, r3
 80116cc:	370c      	adds	r7, #12
 80116ce:	46bd      	mov	sp, r7
 80116d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d4:	4770      	bx	lr

080116d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80116d6:	b480      	push	{r7}
 80116d8:	b083      	sub	sp, #12
 80116da:	af00      	add	r7, sp, #0
 80116dc:	6078      	str	r0, [r7, #4]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	4618      	mov	r0, r3
 80116e4:	370c      	adds	r7, #12
 80116e6:	46bd      	mov	sp, r7
 80116e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ec:	4770      	bx	lr

080116ee <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80116ee:	b480      	push	{r7}
 80116f0:	b083      	sub	sp, #12
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	6078      	str	r0, [r7, #4]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	4618      	mov	r0, r3
 80116fa:	370c      	adds	r7, #12
 80116fc:	46bd      	mov	sp, r7
 80116fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011702:	4770      	bx	lr

08011704 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8011704:	b580      	push	{r7, lr}
 8011706:	b086      	sub	sp, #24
 8011708:	af00      	add	r7, sp, #0
 801170a:	60f8      	str	r0, [r7, #12]
 801170c:	60b9      	str	r1, [r7, #8]
 801170e:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8011710:	6879      	ldr	r1, [r7, #4]
 8011712:	68b8      	ldr	r0, [r7, #8]
 8011714:	f000 fba2 	bl	8011e5c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8011718:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 801171a:	6879      	ldr	r1, [r7, #4]
 801171c:	68b8      	ldr	r0, [r7, #8]
 801171e:	f000 fba9 	bl	8011e74 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8011722:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8011724:	693a      	ldr	r2, [r7, #16]
 8011726:	6979      	ldr	r1, [r7, #20]
 8011728:	68f8      	ldr	r0, [r7, #12]
 801172a:	f000 fbaf 	bl	8011e8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>
  }
 801172e:	bf00      	nop
 8011730:	3718      	adds	r7, #24
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}

08011736 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011736:	b580      	push	{r7, lr}
 8011738:	b082      	sub	sp, #8
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801173e:	2201      	movs	r2, #1
 8011740:	2100      	movs	r1, #0
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	f7ff ffde 	bl	8011704 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f000 fbc5 	bl	8011ed8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>
  }
 801174e:	bf00      	nop
 8011750:	3708      	adds	r7, #8
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}

08011756 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011756:	b580      	push	{r7, lr}
 8011758:	b082      	sub	sp, #8
 801175a:	af00      	add	r7, sp, #0
 801175c:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	689b      	ldr	r3, [r3, #8]
 8011762:	4618      	mov	r0, r3
 8011764:	f7fb fe62 	bl	800d42c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8011768:	4603      	mov	r3, r0
    }
 801176a:	4618      	mov	r0, r3
 801176c:	3708      	adds	r7, #8
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}

08011772 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011772:	b580      	push	{r7, lr}
 8011774:	b082      	sub	sp, #8
 8011776:	af00      	add	r7, sp, #0
 8011778:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	689b      	ldr	r3, [r3, #8]
 801177e:	4618      	mov	r0, r3
 8011780:	f7f6 fc04 	bl	8007f8c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8011784:	4603      	mov	r3, r0
    }
 8011786:	4618      	mov	r0, r3
 8011788:	3708      	adds	r7, #8
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}

0801178e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 801178e:	b480      	push	{r7}
 8011790:	b083      	sub	sp, #12
 8011792:	af00      	add	r7, sp, #0
 8011794:	6078      	str	r0, [r7, #4]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	4618      	mov	r0, r3
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr

080117a4 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b082      	sub	sp, #8
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	6039      	str	r1, [r7, #0]
    : unary_evaluator<XprType>(block)
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6839      	ldr	r1, [r7, #0]
 80117b2:	4618      	mov	r0, r3
 80117b4:	f000 fbb9 	bl	8011f2a <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>
  {}
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	4618      	mov	r0, r3
 80117bc:	3708      	adds	r7, #8
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}

080117c2 <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() () const { return m_other; }
 80117c2:	b480      	push	{r7}
 80117c4:	b083      	sub	sp, #12
 80117c6:	af00      	add	r7, sp, #0
 80117c8:	6078      	str	r0, [r7, #4]
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	ee07 3a90 	vmov	s15, r3
 80117d2:	eeb0 0a67 	vmov.f32	s0, s15
 80117d6:	370c      	adds	r7, #12
 80117d8:	46bd      	mov	sp, r7
 80117da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117de:	4770      	bx	lr

080117e0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80117e0:	b590      	push	{r4, r7, lr}
 80117e2:	b083      	sub	sp, #12
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f000 fc05 	bl	8011ffa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	4618      	mov	r0, r3
 80117f4:	f000 f81e 	bl	8011834 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 80117f8:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	601a      	str	r2, [r3, #0]
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	1d1c      	adds	r4, r3, #4
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	4618      	mov	r0, r3
 8011806:	f000 fbdc 	bl	8011fc2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>
 801180a:	4603      	mov	r3, r0
 801180c:	4619      	mov	r1, r3
 801180e:	4620      	mov	r0, r4
 8011810:	f7f4 fdd4 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	1d5c      	adds	r4, r3, #5
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	4618      	mov	r0, r3
 801181c:	f000 fbdf 	bl	8011fde <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>
 8011820:	4603      	mov	r3, r0
 8011822:	4619      	mov	r1, r3
 8011824:	4620      	mov	r0, r4
 8011826:	f7f4 fde3 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	4618      	mov	r0, r3
 801182e:	370c      	adds	r7, #12
 8011830:	46bd      	mov	sp, r7
 8011832:	bd90      	pop	{r4, r7, pc}

08011834 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>:
 8011834:	b480      	push	{r7}
 8011836:	b083      	sub	sp, #12
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4618      	mov	r0, r3
 8011842:	370c      	adds	r7, #12
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr

0801184c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>:
  explicit product_evaluator(const XprType& xpr)
 801184c:	b580      	push	{r7, lr}
 801184e:	b082      	sub	sp, #8
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f000 fbf2 	bl	8012040 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 801185c:	6838      	ldr	r0, [r7, #0]
 801185e:	f000 fbd7 	bl	8012010 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 8011862:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8011868:	6838      	ldr	r0, [r7, #0]
 801186a:	f000 fbdd 	bl	8012028 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>
 801186e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	605a      	str	r2, [r3, #4]
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 801187e:	4619      	mov	r1, r3
 8011880:	4610      	mov	r0, r2
 8011882:	f7f5 fca7 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8011890:	4619      	mov	r1, r3
 8011892:	4610      	mov	r0, r2
 8011894:	f7f5 fc9e 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8011898:	6838      	ldr	r0, [r7, #0]
 801189a:	f000 fbb9 	bl	8012010 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 801189e:	4603      	mov	r3, r0
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7f2 fff5 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80118a6:	4602      	mov	r2, r0
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	611a      	str	r2, [r3, #16]
  }
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	4618      	mov	r0, r3
 80118b0:	3708      	adds	r7, #8
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}

080118b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80118b6:	b580      	push	{r7, lr}
 80118b8:	b082      	sub	sp, #8
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80118be:	2200      	movs	r2, #0
 80118c0:	2100      	movs	r1, #0
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f000 fbc7 	bl	8012056 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f000 fbdd 	bl	8012088 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>
  }
 80118ce:	bf00      	nop
 80118d0:	3708      	adds	r7, #8
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}

080118d6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80118d6:	b580      	push	{r7, lr}
 80118d8:	b082      	sub	sp, #8
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
 80118de:	6039      	str	r1, [r7, #0]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6839      	ldr	r1, [r7, #0]
 80118e4:	4618      	mov	r0, r3
 80118e6:	f000 fbdf 	bl	80120a8 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>
  }
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	4618      	mov	r0, r3
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80118f4:	b480      	push	{r7}
 80118f6:	b083      	sub	sp, #12
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	4618      	mov	r0, r3
 8011900:	370c      	adds	r7, #12
 8011902:	46bd      	mov	sp, r7
 8011904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011908:	4770      	bx	lr

0801190a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801190a:	b5b0      	push	{r4, r5, r7, lr}
 801190c:	b084      	sub	sp, #16
 801190e:	af00      	add	r7, sp, #0
 8011910:	60f8      	str	r0, [r7, #12]
 8011912:	60b9      	str	r1, [r7, #8]
 8011914:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	681c      	ldr	r4, [r3, #0]
 801191a:	68f8      	ldr	r0, [r7, #12]
 801191c:	f000 fbd8 	bl	80120d0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8011920:	4602      	mov	r2, r0
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	fb03 f502 	mul.w	r5, r3, r2
 8011928:	68f8      	ldr	r0, [r7, #12]
 801192a:	f000 fbdc 	bl	80120e6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 801192e:	4602      	mov	r2, r0
 8011930:	68bb      	ldr	r3, [r7, #8]
 8011932:	fb02 f303 	mul.w	r3, r2, r3
 8011936:	442b      	add	r3, r5
 8011938:	009b      	lsls	r3, r3, #2
 801193a:	4423      	add	r3, r4
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	ee07 3a90 	vmov	s15, r3
  }
 8011942:	eeb0 0a67 	vmov.f32	s0, s15
 8011946:	3710      	adds	r7, #16
 8011948:	46bd      	mov	sp, r7
 801194a:	bdb0      	pop	{r4, r5, r7, pc}

0801194c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 801194c:	b590      	push	{r4, r7, lr}
 801194e:	b083      	sub	sp, #12
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f000 fbdd 	bl	8012116 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 801195c:	687c      	ldr	r4, [r7, #4]
 801195e:	6838      	ldr	r0, [r7, #0]
 8011960:	f000 fbcc 	bl	80120fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8011964:	4603      	mov	r3, r0
 8011966:	2200      	movs	r2, #0
 8011968:	4619      	mov	r1, r3
 801196a:	4620      	mov	r0, r4
 801196c:	f7f5 f88b 	bl	8006a86 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	4618      	mov	r0, r3
 8011974:	370c      	adds	r7, #12
 8011976:	46bd      	mov	sp, r7
 8011978:	bd90      	pop	{r4, r7, pc}
	...

0801197c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 801197c:	b580      	push	{r7, lr}
 801197e:	b084      	sub	sp, #16
 8011980:	af00      	add	r7, sp, #0
 8011982:	60f8      	str	r0, [r7, #12]
 8011984:	60b9      	str	r1, [r7, #8]
 8011986:	607a      	str	r2, [r7, #4]
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	687a      	ldr	r2, [r7, #4]
 801198c:	68b9      	ldr	r1, [r7, #8]
 801198e:	4618      	mov	r0, r3
 8011990:	f000 fbcc 	bl	801212c <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2b00      	cmp	r3, #0
 8011998:	db06      	blt.n	80119a8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x2c>
 801199a:	68b8      	ldr	r0, [r7, #8]
 801199c:	f7f4 fe6b 	bl	8006676 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80119a0:	4602      	mov	r2, r0
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	4293      	cmp	r3, r2
 80119a6:	db05      	blt.n	80119b4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x38>
 80119a8:	4b05      	ldr	r3, [pc, #20]	; (80119c0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x44>)
 80119aa:	4a06      	ldr	r2, [pc, #24]	; (80119c4 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x48>)
 80119ac:	2178      	movs	r1, #120	; 0x78
 80119ae:	4806      	ldr	r0, [pc, #24]	; (80119c8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x4c>)
 80119b0:	f00c f8f8 	bl	801dba4 <__assert_func>
    }
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	4618      	mov	r0, r3
 80119b8:	3710      	adds	r7, #16
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}
 80119be:	bf00      	nop
 80119c0:	08024590 	.word	0x08024590
 80119c4:	080282f4 	.word	0x080282f4
 80119c8:	08024714 	.word	0x08024714

080119cc <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80119cc:	b480      	push	{r7}
 80119ce:	b083      	sub	sp, #12
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	4618      	mov	r0, r3
 80119d8:	370c      	adds	r7, #12
 80119da:	46bd      	mov	sp, r7
 80119dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e0:	4770      	bx	lr

080119e2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
 80119e2:	b580      	push	{r7, lr}
 80119e4:	b082      	sub	sp, #8
 80119e6:	af00      	add	r7, sp, #0
 80119e8:	6078      	str	r0, [r7, #4]
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f000 fbaf 	bl	801214e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	4618      	mov	r0, r3
 80119f4:	3708      	adds	r7, #8
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}

080119fa <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80119fa:	b580      	push	{r7, lr}
 80119fc:	b082      	sub	sp, #8
 80119fe:	af00      	add	r7, sp, #0
 8011a00:	6078      	str	r0, [r7, #4]
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f7ff ffed 	bl	80119e2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3708      	adds	r7, #8
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}

08011a12 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8011a12:	b580      	push	{r7, lr}
 8011a14:	b082      	sub	sp, #8
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	6078      	str	r0, [r7, #4]
 8011a1a:	f7f4 fd0e 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	4618      	mov	r0, r3
 8011a22:	3708      	adds	r7, #8
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}

08011a28 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
 8011a30:	f7f4 fd0b 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8011a34:	4603      	mov	r3, r0
 8011a36:	4618      	mov	r0, r3
 8011a38:	3708      	adds	r7, #8
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}
	...

08011a40 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8011a40:	b5b0      	push	{r4, r5, r7, lr}
 8011a42:	b084      	sub	sp, #16
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	60f8      	str	r0, [r7, #12]
 8011a48:	60b9      	str	r1, [r7, #8]
 8011a4a:	607a      	str	r2, [r7, #4]
 8011a4c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8011a4e:	68f8      	ldr	r0, [r7, #12]
 8011a50:	f7ff ffd3 	bl	80119fa <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8011a54:	68fa      	ldr	r2, [r7, #12]
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	4614      	mov	r4, r2
 8011a5a:	461d      	mov	r5, r3
 8011a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011a64:	e884 0003 	stmia.w	r4, {r0, r1}
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	f103 0218 	add.w	r2, r3, #24
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	4614      	mov	r4, r2
 8011a72:	461d      	mov	r5, r3
 8011a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011a7c:	e884 0003 	stmia.w	r4, {r0, r1}
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	3330      	adds	r3, #48	; 0x30
 8011a84:	6839      	ldr	r1, [r7, #0]
 8011a86:	4618      	mov	r0, r3
 8011a88:	f7f3 fa38 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8011a8c:	68b8      	ldr	r0, [r7, #8]
 8011a8e:	f7f9 fba1 	bl	800b1d4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8011a92:	4604      	mov	r4, r0
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7ff ffbb 	bl	8011a12 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	429c      	cmp	r4, r3
 8011aa0:	d10a      	bne.n	8011ab8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x78>
 8011aa2:	68b8      	ldr	r0, [r7, #8]
 8011aa4:	f7f9 fba3 	bl	800b1ee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8011aa8:	4604      	mov	r4, r0
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7ff ffbb 	bl	8011a28 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	429c      	cmp	r4, r3
 8011ab6:	d005      	beq.n	8011ac4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x84>
 8011ab8:	4b05      	ldr	r3, [pc, #20]	; (8011ad0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x90>)
 8011aba:	4a06      	ldr	r2, [pc, #24]	; (8011ad4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x94>)
 8011abc:	2174      	movs	r1, #116	; 0x74
 8011abe:	4806      	ldr	r0, [pc, #24]	; (8011ad8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x98>)
 8011ac0:	f00c f870 	bl	801dba4 <__assert_func>
    }
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3710      	adds	r7, #16
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bdb0      	pop	{r4, r5, r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	0801fa0c 	.word	0x0801fa0c
 8011ad4:	080283e4 	.word	0x080283e4
 8011ad8:	0801fc70 	.word	0x0801fc70

08011adc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f000 f809 	bl	8011afc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011aea:	4603      	mov	r3, r0
 8011aec:	4618      	mov	r0, r3
 8011aee:	f000 fb39 	bl	8012164 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>
 8011af2:	4603      	mov	r3, r0
 8011af4:	4618      	mov	r0, r3
 8011af6:	3708      	adds	r7, #8
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8011afc:	b480      	push	{r7}
 8011afe:	b083      	sub	sp, #12
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	4618      	mov	r0, r3
 8011b08:	370c      	adds	r7, #12
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b10:	4770      	bx	lr

08011b12 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8011b12:	b580      	push	{r7, lr}
 8011b14:	b082      	sub	sp, #8
 8011b16:	af00      	add	r7, sp, #0
 8011b18:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7f9 fb59 	bl	800b1d4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8011b22:	4603      	mov	r3, r0
    }
 8011b24:	4618      	mov	r0, r3
 8011b26:	3708      	adds	r7, #8
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}

08011b2c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b082      	sub	sp, #8
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f000 fb3c 	bl	80121b2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3708      	adds	r7, #8
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}

08011b44 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7ff ffec 	bl	8011b2c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	4618      	mov	r0, r3
 8011b58:	3708      	adds	r7, #8
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}

08011b5e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8011b5e:	b580      	push	{r7, lr}
 8011b60:	b082      	sub	sp, #8
 8011b62:	af00      	add	r7, sp, #0
 8011b64:	6078      	str	r0, [r7, #4]
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f7ff ffeb 	bl	8011b44 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	4618      	mov	r0, r3
 8011b72:	3708      	adds	r7, #8
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	4618      	mov	r0, r3
 8011b84:	f7ff ffeb 	bl	8011b5e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3708      	adds	r7, #8
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}

08011b92 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>:
  struct Data
 8011b92:	b580      	push	{r7, lr}
 8011b94:	b082      	sub	sp, #8
 8011b96:	af00      	add	r7, sp, #0
 8011b98:	6078      	str	r0, [r7, #4]
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	330c      	adds	r3, #12
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7ff ffea 	bl	8011b78 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	3304      	adds	r3, #4
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7f9 fc09 	bl	800b3c0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3708      	adds	r7, #8
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}

08011bb8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7ff ffe5 	bl	8011b92 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f000 fae7 	bl	801219c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3708      	adds	r7, #8
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}

08011bd8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7ff ffe8 	bl	8011bb8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	4618      	mov	r0, r3
 8011bec:	3708      	adds	r7, #8
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}

08011bf2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8011bf2:	b580      	push	{r7, lr}
 8011bf4:	b082      	sub	sp, #8
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7ff ffeb 	bl	8011bd8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	4618      	mov	r0, r3
 8011c06:	3708      	adds	r7, #8
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	ed2d 8b02 	vpush	{d8}
 8011c12:	b088      	sub	sp, #32
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f7ff fc53 	bl	80114c6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>
 8011c20:	4603      	mov	r3, r0
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	dd05      	ble.n	8011c32 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	f7ff ff58 	bl	8011adc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	dc06      	bgt.n	8011c40 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8011c32:	4b16      	ldr	r3, [pc, #88]	; (8011c8c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8011c34:	4a16      	ldr	r2, [pc, #88]	; (8011c90 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8011c36:	f240 119b 	movw	r1, #411	; 0x19b
 8011c3a:	4816      	ldr	r0, [pc, #88]	; (8011c94 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8011c3c:	f00b ffb2 	bl	801dba4 <__assert_func>
 8011c40:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f7ff ff5a 	bl	8011afc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011c48:	4602      	mov	r2, r0
 8011c4a:	f107 030c 	add.w	r3, r7, #12
 8011c4e:	4611      	mov	r1, r2
 8011c50:	4618      	mov	r0, r3
 8011c52:	f000 fa94 	bl	801217e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f7ff ff50 	bl	8011afc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	f107 030c 	add.w	r3, r7, #12
 8011c62:	6839      	ldr	r1, [r7, #0]
 8011c64:	4618      	mov	r0, r3
 8011c66:	f000 faaf 	bl	80121c8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>
 8011c6a:	eeb0 8a40 	vmov.f32	s16, s0
 8011c6e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8011c70:	f107 030c 	add.w	r3, r7, #12
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7ff ffbc 	bl	8011bf2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8011c7a:	eef0 7a48 	vmov.f32	s15, s16
}
 8011c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8011c82:	3720      	adds	r7, #32
 8011c84:	46bd      	mov	sp, r7
 8011c86:	ecbd 8b02 	vpop	{d8}
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	08024a8c 	.word	0x08024a8c
 8011c90:	08028654 	.word	0x08028654
 8011c94:	08024c98 	.word	0x08024c98

08011c98 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	3310      	adds	r3, #16
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	370c      	adds	r7, #12
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cae:	4770      	bx	lr

08011cb0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8011cb0:	b480      	push	{r7}
 8011cb2:	b083      	sub	sp, #12
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	4618      	mov	r0, r3
 8011cbc:	370c      	adds	r7, #12
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc4:	4770      	bx	lr

08011cc6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8011cc6:	b480      	push	{r7}
 8011cc8:	b083      	sub	sp, #12
 8011cca:	af00      	add	r7, sp, #0
 8011ccc:	6078      	str	r0, [r7, #4]
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	68db      	ldr	r3, [r3, #12]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	370c      	adds	r7, #12
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr

08011cde <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011cde:	b580      	push	{r7, lr}
 8011ce0:	b082      	sub	sp, #8
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	6078      	str	r0, [r7, #4]
 8011ce6:	6039      	str	r1, [r7, #0]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	6839      	ldr	r1, [r7, #0]
 8011cec:	4618      	mov	r0, r3
 8011cee:	f000 fa7c 	bl	80121ea <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3708      	adds	r7, #8
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}

08011cfc <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>:
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	6039      	str	r1, [r7, #0]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	6839      	ldr	r1, [r7, #0]
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f7f8 f8bb 	bl	8009e86 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	4618      	mov	r0, r3
 8011d14:	3708      	adds	r7, #8
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}

08011d1a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8011d1a:	b5b0      	push	{r4, r5, r7, lr}
 8011d1c:	b082      	sub	sp, #8
 8011d1e:	af00      	add	r7, sp, #0
 8011d20:	6078      	str	r0, [r7, #4]
 8011d22:	6039      	str	r1, [r7, #0]
    return m_d.func()(m_d.lhsImpl.coeff(index), m_d.rhsImpl.coeff(index));
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	4618      	mov	r0, r3
 8011d28:	f000 fa6e 	bl	8012208 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 8011d2c:	4604      	mov	r4, r0
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	3304      	adds	r3, #4
 8011d32:	6839      	ldr	r1, [r7, #0]
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7ff fc7f 	bl	8011638 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8011d3a:	4605      	mov	r5, r0
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	330c      	adds	r3, #12
 8011d40:	6839      	ldr	r1, [r7, #0]
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7ff fc78 	bl	8011638 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	4629      	mov	r1, r5
 8011d4e:	4620      	mov	r0, r4
 8011d50:	f7f6 ff39 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8011d54:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011d58:	eeb0 0a67 	vmov.f32	s0, s15
 8011d5c:	3708      	adds	r7, #8
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bdb0      	pop	{r4, r5, r7, pc}

08011d62 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8011d62:	b590      	push	{r4, r7, lr}
 8011d64:	b083      	sub	sp, #12
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	6078      	str	r0, [r7, #4]
 8011d6a:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f000 fa72 	bl	8012256 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	4618      	mov	r0, r3
 8011d76:	f000 f81e 	bl	8011db6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8011d7a:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	601a      	str	r2, [r3, #0]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	1d1c      	adds	r4, r3, #4
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	4618      	mov	r0, r3
 8011d88:	f000 fa49 	bl	801221e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	4619      	mov	r1, r3
 8011d90:	4620      	mov	r0, r4
 8011d92:	f7f4 fb2d 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	1d5c      	adds	r4, r3, #5
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f000 fa4c 	bl	801223a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8011da2:	4603      	mov	r3, r0
 8011da4:	4619      	mov	r1, r3
 8011da6:	4620      	mov	r0, r4
 8011da8:	f7f4 fb08 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	4618      	mov	r0, r3
 8011db0:	370c      	adds	r7, #12
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd90      	pop	{r4, r7, pc}

08011db6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8011db6:	b480      	push	{r7}
 8011db8:	b083      	sub	sp, #12
 8011dba:	af00      	add	r7, sp, #0
 8011dbc:	6078      	str	r0, [r7, #4]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	370c      	adds	r7, #12
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dcc:	4770      	bx	lr

08011dce <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8011dce:	b580      	push	{r7, lr}
 8011dd0:	b082      	sub	sp, #8
 8011dd2:	af00      	add	r7, sp, #0
 8011dd4:	6078      	str	r0, [r7, #4]
 8011dd6:	6039      	str	r1, [r7, #0]
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f000 fa47 	bl	801226c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6839      	ldr	r1, [r7, #0]
 8011de2:	4618      	mov	r0, r3
 8011de4:	f000 fa4d 	bl	8012282 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	4618      	mov	r0, r3
 8011dec:	3708      	adds	r7, #8
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}

08011df2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8011df2:	b580      	push	{r7, lr}
 8011df4:	b082      	sub	sp, #8
 8011df6:	af00      	add	r7, sp, #0
 8011df8:	6078      	str	r0, [r7, #4]
 8011dfa:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	2100      	movs	r1, #0
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f000 fa66 	bl	80122d2 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8011e06:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b084      	sub	sp, #16
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011e1e:	6839      	ldr	r1, [r7, #0]
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f000 fa69 	bl	80122f8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>
 8011e26:	eef0 7a40 	vmov.f32	s15, s0
 8011e2a:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8011e2e:	6839      	ldr	r1, [r7, #0]
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f000 fa72 	bl	801231a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>
 8011e36:	eef0 7a40 	vmov.f32	s15, s0
 8011e3a:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011e3e:	f107 020c 	add.w	r2, r7, #12
 8011e42:	f107 0308 	add.w	r3, r7, #8
 8011e46:	4619      	mov	r1, r3
 8011e48:	6838      	ldr	r0, [r7, #0]
 8011e4a:	f7f6 febc 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8011e4e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011e52:	eeb0 0a67 	vmov.f32	s0, s15
 8011e56:	3710      	adds	r7, #16
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}

08011e5c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8011e5c:	b480      	push	{r7}
 8011e5e:	b083      	sub	sp, #12
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
 8011e64:	6039      	str	r1, [r7, #0]
      : inner;
 8011e66:	683b      	ldr	r3, [r7, #0]
  }
 8011e68:	4618      	mov	r0, r3
 8011e6a:	370c      	adds	r7, #12
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e72:	4770      	bx	lr

08011e74 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8011e74:	b480      	push	{r7}
 8011e76:	b083      	sub	sp, #12
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	6039      	str	r1, [r7, #0]
      : outer;
 8011e7e:	687b      	ldr	r3, [r7, #4]
  }
 8011e80:	4618      	mov	r0, r3
 8011e82:	370c      	adds	r7, #12
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr

08011e8c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8011e8c:	b5b0      	push	{r4, r5, r7, lr}
 8011e8e:	b086      	sub	sp, #24
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	689c      	ldr	r4, [r3, #8]
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	687a      	ldr	r2, [r7, #4]
 8011ea2:	68b9      	ldr	r1, [r7, #8]
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7f6 fb2d 	bl	8008504 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8011eaa:	4605      	mov	r5, r0
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	685b      	ldr	r3, [r3, #4]
 8011eb0:	687a      	ldr	r2, [r7, #4]
 8011eb2:	68b9      	ldr	r1, [r7, #8]
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f000 fa41 	bl	801233c <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>
 8011eba:	eef0 7a40 	vmov.f32	s15, s0
 8011ebe:	edc7 7a05 	vstr	s15, [r7, #20]
 8011ec2:	f107 0314 	add.w	r3, r7, #20
 8011ec6:	461a      	mov	r2, r3
 8011ec8:	4629      	mov	r1, r5
 8011eca:	4620      	mov	r0, r4
 8011ecc:	f000 fa69 	bl	80123a2 <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>
  }
 8011ed0:	bf00      	nop
 8011ed2:	3718      	adds	r7, #24
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bdb0      	pop	{r4, r5, r7, pc}

08011ed8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011ee0:	2202      	movs	r2, #2
 8011ee2:	2100      	movs	r1, #0
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f7ff fc0d 	bl	8011704 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f000 fa70 	bl	80123d0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>
  }
 8011ef0:	bf00      	nop
 8011ef2:	3708      	adds	r7, #8
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>:
    StorageIndex startRow() const EIGEN_NOEXCEPT
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b082      	sub	sp, #8
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
      return m_startRow.value();
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	3310      	adds	r3, #16
 8011f04:	4618      	mov	r0, r3
 8011f06:	f7fd fff8 	bl	800fefa <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 8011f0a:	4603      	mov	r3, r0
    }
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3708      	adds	r7, #8
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>:
    StorageIndex startCol() const EIGEN_NOEXCEPT
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
      return m_startCol.value();
 8011f1c:	f7fd fbbd 	bl	800f69a <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 8011f20:	4603      	mov	r3, r0
    }
 8011f22:	4618      	mov	r0, r3
 8011f24:	3708      	adds	r7, #8
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}

08011f2a <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>:
  explicit unary_evaluator(const XprType& block)
 8011f2a:	b5b0      	push	{r4, r5, r7, lr}
 8011f2c:	b082      	sub	sp, #8
 8011f2e:	af00      	add	r7, sp, #0
 8011f30:	6078      	str	r0, [r7, #4]
 8011f32:	6039      	str	r1, [r7, #0]
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f000 fa66 	bl	8012406 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 8011f3a:	687c      	ldr	r4, [r7, #4]
    : m_argImpl(block.nestedExpression()),
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f000 fa56 	bl	80123f0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 8011f44:	4603      	mov	r3, r0
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 8011f46:	4619      	mov	r1, r3
 8011f48:	4620      	mov	r0, r4
 8011f4a:	f000 fa67 	bl	801241c <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f103 0410 	add.w	r4, r3, #16
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7ff ffce 	bl	8011ef8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	4619      	mov	r1, r3
 8011f60:	4620      	mov	r0, r4
 8011f62:	f7fb fab9 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f103 0414 	add.w	r4, r3, #20
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7ff ffd0 	bl	8011f14 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8011f74:	4603      	mov	r3, r0
 8011f76:	4619      	mov	r1, r3
 8011f78:	4620      	mov	r0, r4
 8011f7a:	f7fb fb21 	bl	800d5c0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	f103 0518 	add.w	r5, r3, #24
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7ff ffc4 	bl	8011f14 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8011f8c:	4604      	mov	r4, r0
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	4618      	mov	r0, r3
 8011f92:	f000 fa2d 	bl	80123f0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 8011f96:	4603      	mov	r3, r0
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f7f5 fd6c 	bl	8007a76 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	fb03 f404 	mul.w	r4, r3, r4
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7ff ffa6 	bl	8011ef8 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8011fac:	4603      	mov	r3, r0
 8011fae:	4423      	add	r3, r4
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	4628      	mov	r0, r5
 8011fb4:	f7fb fa90 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
  { }
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3708      	adds	r7, #8
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bdb0      	pop	{r4, r5, r7, pc}

08011fc2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011fc2:	b580      	push	{r7, lr}
 8011fc4:	b082      	sub	sp, #8
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	689b      	ldr	r3, [r3, #8]
             ? m_xpr.innerStride()
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f7f5 ffdc 	bl	8007f8c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8011fd4:	4603      	mov	r3, r0
    }
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	3708      	adds	r7, #8
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}

08011fde <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011fde:	b580      	push	{r7, lr}
 8011fe0:	b082      	sub	sp, #8
 8011fe2:	af00      	add	r7, sp, #0
 8011fe4:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7fb fa1e 	bl	800d42c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8011ff0:	4603      	mov	r3, r0
    }
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	3708      	adds	r7, #8
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd80      	pop	{r7, pc}

08011ffa <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011ffa:	b480      	push	{r7}
 8011ffc:	b083      	sub	sp, #12
 8011ffe:	af00      	add	r7, sp, #0
 8012000:	6078      	str	r0, [r7, #4]
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	4618      	mov	r0, r3
 8012006:	370c      	adds	r7, #12
 8012008:	46bd      	mov	sp, r7
 801200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200e:	4770      	bx	lr

08012010 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8012010:	b480      	push	{r7}
 8012012:	b083      	sub	sp, #12
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	4618      	mov	r0, r3
 801201e:	370c      	adds	r7, #12
 8012020:	46bd      	mov	sp, r7
 8012022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012026:	4770      	bx	lr

08012028 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8012028:	b480      	push	{r7}
 801202a:	b083      	sub	sp, #12
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	4618      	mov	r0, r3
 8012036:	370c      	adds	r7, #12
 8012038:	46bd      	mov	sp, r7
 801203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203e:	4770      	bx	lr

08012040 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>:
 8012040:	b480      	push	{r7}
 8012042:	b083      	sub	sp, #12
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	4618      	mov	r0, r3
 801204c:	370c      	adds	r7, #12
 801204e:	46bd      	mov	sp, r7
 8012050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012054:	4770      	bx	lr

08012056 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8012056:	b580      	push	{r7, lr}
 8012058:	b086      	sub	sp, #24
 801205a:	af00      	add	r7, sp, #0
 801205c:	60f8      	str	r0, [r7, #12]
 801205e:	60b9      	str	r1, [r7, #8]
 8012060:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8012062:	6879      	ldr	r1, [r7, #4]
 8012064:	68b8      	ldr	r0, [r7, #8]
 8012066:	f000 f9e8 	bl	801243a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 801206a:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 801206c:	6879      	ldr	r1, [r7, #4]
 801206e:	68b8      	ldr	r0, [r7, #8]
 8012070:	f000 f9ef 	bl	8012452 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8012074:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8012076:	693a      	ldr	r2, [r7, #16]
 8012078:	6979      	ldr	r1, [r7, #20]
 801207a:	68f8      	ldr	r0, [r7, #12]
 801207c:	f000 f9f5 	bl	801246a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8012080:	bf00      	nop
 8012082:	3718      	adds	r7, #24
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}

08012088 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012088:	b580      	push	{r7, lr}
 801208a:	b082      	sub	sp, #8
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012090:	2201      	movs	r2, #1
 8012092:	2100      	movs	r1, #0
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7ff ffde 	bl	8012056 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f000 fa0b 	bl	80124b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>
  }
 80120a0:	bf00      	nop
 80120a2:	3708      	adds	r7, #8
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}

080120a8 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
 80120b0:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6839      	ldr	r1, [r7, #0]
 80120b6:	4618      	mov	r0, r3
 80120b8:	f000 fa0d 	bl	80124d6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	4618      	mov	r0, r3
 80120c0:	f000 fa33 	bl	801252a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 80120c4:	bf00      	nop
  }
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	4618      	mov	r0, r3
 80120ca:	3708      	adds	r7, #8
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}

080120d0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b082      	sub	sp, #8
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80120d8:	f7f4 f9b7 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80120dc:	4603      	mov	r3, r0
  }
 80120de:	4618      	mov	r0, r3
 80120e0:	3708      	adds	r7, #8
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}

080120e6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80120e6:	b580      	push	{r7, lr}
 80120e8:	b082      	sub	sp, #8
 80120ea:	af00      	add	r7, sp, #0
 80120ec:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80120ee:	f7f4 f9a4 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80120f2:	4603      	mov	r3, r0
  }
 80120f4:	4618      	mov	r0, r3
 80120f6:	3708      	adds	r7, #8
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}

080120fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b082      	sub	sp, #8
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	4618      	mov	r0, r3
 8012108:	f000 fa1b 	bl	8012542 <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 801210c:	4603      	mov	r3, r0
 801210e:	4618      	mov	r0, r3
 8012110:	3708      	adds	r7, #8
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}

08012116 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012116:	b480      	push	{r7}
 8012118:	b083      	sub	sp, #12
 801211a:	af00      	add	r7, sp, #0
 801211c:	6078      	str	r0, [r7, #4]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	4618      	mov	r0, r3
 8012122:	370c      	adds	r7, #12
 8012124:	46bd      	mov	sp, r7
 8012126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212a:	4770      	bx	lr

0801212c <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 801212c:	b580      	push	{r7, lr}
 801212e:	b084      	sub	sp, #16
 8012130:	af00      	add	r7, sp, #0
 8012132:	60f8      	str	r0, [r7, #12]
 8012134:	60b9      	str	r1, [r7, #8]
 8012136:	607a      	str	r2, [r7, #4]
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	687a      	ldr	r2, [r7, #4]
 801213c:	68b9      	ldr	r1, [r7, #8]
 801213e:	4618      	mov	r0, r3
 8012140:	f000 fa16 	bl	8012570 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	4618      	mov	r0, r3
 8012148:	3710      	adds	r7, #16
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}

0801214e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801214e:	b480      	push	{r7}
 8012150:	b083      	sub	sp, #12
 8012152:	af00      	add	r7, sp, #0
 8012154:	6078      	str	r0, [r7, #4]
    }
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	4618      	mov	r0, r3
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr

08012164 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8012164:	b580      	push	{r7, lr}
 8012166:	b082      	sub	sp, #8
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	4618      	mov	r0, r3
 8012170:	f7f9 f83d 	bl	800b1ee <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8012174:	4603      	mov	r3, r0
    }
 8012176:	4618      	mov	r0, r3
 8012178:	3708      	adds	r7, #8
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}

0801217e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 801217e:	b580      	push	{r7, lr}
 8012180:	b082      	sub	sp, #8
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
 8012186:	6039      	str	r1, [r7, #0]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6839      	ldr	r1, [r7, #0]
 801218c:	4618      	mov	r0, r3
 801218e:	f000 fa25 	bl	80125dc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	4618      	mov	r0, r3
 8012196:	3708      	adds	r7, #8
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}

0801219c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 801219c:	b480      	push	{r7}
 801219e:	b083      	sub	sp, #12
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	4618      	mov	r0, r3
 80121a8:	370c      	adds	r7, #12
 80121aa:	46bd      	mov	sp, r7
 80121ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b0:	4770      	bx	lr

080121b2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
 80121b2:	b480      	push	{r7}
 80121b4:	b083      	sub	sp, #12
 80121b6:	af00      	add	r7, sp, #0
 80121b8:	6078      	str	r0, [r7, #4]
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	4618      	mov	r0, r3
 80121be:	370c      	adds	r7, #12
 80121c0:	46bd      	mov	sp, r7
 80121c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c6:	4770      	bx	lr

080121c8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	60f8      	str	r0, [r7, #12]
 80121d0:	60b9      	str	r1, [r7, #8]
 80121d2:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80121d4:	68b9      	ldr	r1, [r7, #8]
 80121d6:	68f8      	ldr	r0, [r7, #12]
 80121d8:	f000 fa0f 	bl	80125fa <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>
 80121dc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80121e0:	eeb0 0a67 	vmov.f32	s0, s15
 80121e4:	3710      	adds	r7, #16
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}

080121ea <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80121ea:	b580      	push	{r7, lr}
 80121ec:	b082      	sub	sp, #8
 80121ee:	af00      	add	r7, sp, #0
 80121f0:	6078      	str	r0, [r7, #4]
 80121f2:	6039      	str	r1, [r7, #0]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6839      	ldr	r1, [r7, #0]
 80121f8:	4618      	mov	r0, r3
 80121fa:	f000 fa22 	bl	8012642 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	4618      	mov	r0, r3
 8012202:	3708      	adds	r7, #8
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}

08012208 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8012208:	b480      	push	{r7}
 801220a:	b083      	sub	sp, #12
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	4618      	mov	r0, r3
 8012214:	370c      	adds	r7, #12
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr

0801221e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801221e:	b580      	push	{r7, lr}
 8012220:	b082      	sub	sp, #8
 8012222:	af00      	add	r7, sp, #0
 8012224:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	689b      	ldr	r3, [r3, #8]
 801222a:	4618      	mov	r0, r3
 801222c:	f7fb f973 	bl	800d516 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 8012230:	4603      	mov	r3, r0
    }
 8012232:	4618      	mov	r0, r3
 8012234:	3708      	adds	r7, #8
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}

0801223a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801223a:	b580      	push	{r7, lr}
 801223c:	b082      	sub	sp, #8
 801223e:	af00      	add	r7, sp, #0
 8012240:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	689b      	ldr	r3, [r3, #8]
 8012246:	4618      	mov	r0, r3
 8012248:	f7f4 fcd6 	bl	8006bf8 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 801224c:	4603      	mov	r3, r0
    }
 801224e:	4618      	mov	r0, r3
 8012250:	3708      	adds	r7, #8
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}

08012256 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012256:	b480      	push	{r7}
 8012258:	b083      	sub	sp, #12
 801225a:	af00      	add	r7, sp, #0
 801225c:	6078      	str	r0, [r7, #4]
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	4618      	mov	r0, r3
 8012262:	370c      	adds	r7, #12
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr

0801226c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 801226c:	b480      	push	{r7}
 801226e:	b083      	sub	sp, #12
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	4618      	mov	r0, r3
 8012278:	370c      	adds	r7, #12
 801227a:	46bd      	mov	sp, r7
 801227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012280:	4770      	bx	lr

08012282 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8012282:	b590      	push	{r4, r7, lr}
 8012284:	b083      	sub	sp, #12
 8012286:	af00      	add	r7, sp, #0
 8012288:	6078      	str	r0, [r7, #4]
 801228a:	6039      	str	r1, [r7, #0]
 801228c:	687c      	ldr	r4, [r7, #4]
 801228e:	6838      	ldr	r0, [r7, #0]
 8012290:	f000 fa14 	bl	80126bc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 8012294:	4603      	mov	r3, r0
 8012296:	4619      	mov	r1, r3
 8012298:	4620      	mov	r0, r4
 801229a:	f7f2 fe2f 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	1d1c      	adds	r4, r3, #4
 80122a2:	6838      	ldr	r0, [r7, #0]
 80122a4:	f000 fa16 	bl	80126d4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>
 80122a8:	4603      	mov	r3, r0
 80122aa:	4619      	mov	r1, r3
 80122ac:	4620      	mov	r0, r4
 80122ae:	f000 fa28 	bl	8012702 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f103 0408 	add.w	r4, r3, #8
 80122b8:	6838      	ldr	r0, [r7, #0]
 80122ba:	f000 fa16 	bl	80126ea <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>
 80122be:	4603      	mov	r3, r0
 80122c0:	4619      	mov	r1, r3
 80122c2:	4620      	mov	r0, r4
 80122c4:	f7f8 fdd9 	bl	800ae7a <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	4618      	mov	r0, r3
 80122cc:	370c      	adds	r7, #12
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd90      	pop	{r4, r7, pc}

080122d2 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 80122d2:	b580      	push	{r7, lr}
 80122d4:	b084      	sub	sp, #16
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	60f8      	str	r0, [r7, #12]
 80122da:	60b9      	str	r1, [r7, #8]
 80122dc:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	68ba      	ldr	r2, [r7, #8]
 80122e2:	6879      	ldr	r1, [r7, #4]
 80122e4:	4618      	mov	r0, r3
 80122e6:	f000 fa1b 	bl	8012720 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>
 80122ea:	eef0 7a40 	vmov.f32	s15, s0
 80122ee:	eeb0 0a67 	vmov.f32	s0, s15
 80122f2:	3710      	adds	r7, #16
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}

080122f8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012302:	2201      	movs	r2, #1
 8012304:	2100      	movs	r1, #0
 8012306:	6878      	ldr	r0, [r7, #4]
 8012308:	f7ff ffe3 	bl	80122d2 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 801230c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012310:	eeb0 0a67 	vmov.f32	s0, s15
 8012314:	3708      	adds	r7, #8
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}

0801231a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801231a:	b580      	push	{r7, lr}
 801231c:	b082      	sub	sp, #8
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
 8012322:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012324:	2202      	movs	r2, #2
 8012326:	2100      	movs	r1, #0
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f7ff ffd2 	bl	80122d2 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 801232e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012332:	eeb0 0a67 	vmov.f32	s0, s15
 8012336:	3708      	adds	r7, #8
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 801233c:	b580      	push	{r7, lr}
 801233e:	b0a4      	sub	sp, #144	; 0x90
 8012340:	af00      	add	r7, sp, #0
 8012342:	60f8      	str	r0, [r7, #12]
 8012344:	60b9      	str	r1, [r7, #8]
 8012346:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	6819      	ldr	r1, [r3, #0]
 801234c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012350:	68ba      	ldr	r2, [r7, #8]
 8012352:	4618      	mov	r0, r3
 8012354:	f7f8 fc16 	bl	800ab84 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 8012358:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801235c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012360:	4611      	mov	r1, r2
 8012362:	4618      	mov	r0, r3
 8012364:	f7f8 fc21 	bl	800abaa <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	6859      	ldr	r1, [r3, #4]
 801236c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	4618      	mov	r0, r3
 8012374:	f000 f9ff 	bl	8012776 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>
 8012378:	f107 0314 	add.w	r3, r7, #20
 801237c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012380:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012384:	4618      	mov	r0, r3
 8012386:	f000 fa09 	bl	801279c <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 801238a:	f107 0314 	add.w	r3, r7, #20
 801238e:	4618      	mov	r0, r3
 8012390:	f000 fa32 	bl	80127f8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>
 8012394:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012398:	eeb0 0a67 	vmov.f32	s0, s15
 801239c:	3790      	adds	r7, #144	; 0x90
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}

080123a2 <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 80123a2:	b480      	push	{r7}
 80123a4:	b085      	sub	sp, #20
 80123a6:	af00      	add	r7, sp, #0
 80123a8:	60f8      	str	r0, [r7, #12]
 80123aa:	60b9      	str	r1, [r7, #8]
 80123ac:	607a      	str	r2, [r7, #4]
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	ed93 7a00 	vldr	s14, [r3]
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	edd3 7a00 	vldr	s15, [r3]
 80123ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	edc3 7a00 	vstr	s15, [r3]
 80123c4:	bf00      	nop
 80123c6:	3714      	adds	r7, #20
 80123c8:	46bd      	mov	sp, r7
 80123ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ce:	4770      	bx	lr

080123d0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b082      	sub	sp, #8
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80123d8:	2200      	movs	r2, #0
 80123da:	2101      	movs	r1, #1
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f7ff f991 	bl	8011704 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f000 fa23 	bl	801282e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>
  }
 80123e8:	bf00      	nop
 80123ea:	3708      	adds	r7, #8
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}

080123f0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>:
    const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
 80123f0:	b480      	push	{r7}
 80123f2:	b083      	sub	sp, #12
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
      return m_xpr;
 80123f8:	687b      	ldr	r3, [r7, #4]
    }
 80123fa:	4618      	mov	r0, r3
 80123fc:	370c      	adds	r7, #12
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr

08012406 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012406:	b480      	push	{r7}
 8012408:	b083      	sub	sp, #12
 801240a:	af00      	add	r7, sp, #0
 801240c:	6078      	str	r0, [r7, #4]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	4618      	mov	r0, r3
 8012412:	370c      	adds	r7, #12
 8012414:	46bd      	mov	sp, r7
 8012416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241a:	4770      	bx	lr

0801241c <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
 8012424:	6039      	str	r1, [r7, #0]
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6839      	ldr	r1, [r7, #0]
 801242a:	4618      	mov	r0, r3
 801242c:	f7f7 fb49 	bl	8009ac2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	4618      	mov	r0, r3
 8012434:	3708      	adds	r7, #8
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}

0801243a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 801243a:	b480      	push	{r7}
 801243c:	b083      	sub	sp, #12
 801243e:	af00      	add	r7, sp, #0
 8012440:	6078      	str	r0, [r7, #4]
 8012442:	6039      	str	r1, [r7, #0]
      : inner;
 8012444:	683b      	ldr	r3, [r7, #0]
  }
 8012446:	4618      	mov	r0, r3
 8012448:	370c      	adds	r7, #12
 801244a:	46bd      	mov	sp, r7
 801244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012450:	4770      	bx	lr

08012452 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8012452:	b480      	push	{r7}
 8012454:	b083      	sub	sp, #12
 8012456:	af00      	add	r7, sp, #0
 8012458:	6078      	str	r0, [r7, #4]
 801245a:	6039      	str	r1, [r7, #0]
      : outer;
 801245c:	687b      	ldr	r3, [r7, #4]
  }
 801245e:	4618      	mov	r0, r3
 8012460:	370c      	adds	r7, #12
 8012462:	46bd      	mov	sp, r7
 8012464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012468:	4770      	bx	lr

0801246a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 801246a:	b5b0      	push	{r4, r5, r7, lr}
 801246c:	b086      	sub	sp, #24
 801246e:	af00      	add	r7, sp, #0
 8012470:	60f8      	str	r0, [r7, #12]
 8012472:	60b9      	str	r1, [r7, #8]
 8012474:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	689c      	ldr	r4, [r3, #8]
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	687a      	ldr	r2, [r7, #4]
 8012480:	68b9      	ldr	r1, [r7, #8]
 8012482:	4618      	mov	r0, r3
 8012484:	f7f6 f83e 	bl	8008504 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8012488:	4605      	mov	r5, r0
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	68b9      	ldr	r1, [r7, #8]
 8012492:	4618      	mov	r0, r3
 8012494:	f000 f9db 	bl	801284e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>
 8012498:	eef0 7a40 	vmov.f32	s15, s0
 801249c:	edc7 7a05 	vstr	s15, [r7, #20]
 80124a0:	f107 0314 	add.w	r3, r7, #20
 80124a4:	461a      	mov	r2, r3
 80124a6:	4629      	mov	r1, r5
 80124a8:	4620      	mov	r0, r4
 80124aa:	f7f5 fd9b 	bl	8007fe4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80124ae:	bf00      	nop
 80124b0:	3718      	adds	r7, #24
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bdb0      	pop	{r4, r5, r7, pc}

080124b6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80124b6:	b580      	push	{r7, lr}
 80124b8:	b082      	sub	sp, #8
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80124be:	2202      	movs	r2, #2
 80124c0:	2100      	movs	r1, #0
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f7ff fdc7 	bl	8012056 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f000 f9f3 	bl	80128b4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>
  }
 80124ce:	bf00      	nop
 80124d0:	3708      	adds	r7, #8
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}

080124d6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 80124d6:	b590      	push	{r4, r7, lr}
 80124d8:	b083      	sub	sp, #12
 80124da:	af00      	add	r7, sp, #0
 80124dc:	6078      	str	r0, [r7, #4]
 80124de:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f000 fa13 	bl	801290c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	4618      	mov	r0, r3
 80124ea:	f000 f81e 	bl	801252a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 80124ee:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	601a      	str	r2, [r3, #0]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	1d1c      	adds	r4, r3, #4
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	4618      	mov	r0, r3
 80124fc:	f000 f9ea 	bl	80128d4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>
 8012500:	4603      	mov	r3, r0
 8012502:	4619      	mov	r1, r3
 8012504:	4620      	mov	r0, r4
 8012506:	f7f3 ff59 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	1d5c      	adds	r4, r3, #5
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	4618      	mov	r0, r3
 8012512:	f000 f9ed 	bl	80128f0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>
 8012516:	4603      	mov	r3, r0
 8012518:	4619      	mov	r1, r3
 801251a:	4620      	mov	r0, r4
 801251c:	f7f3 ff68 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	4618      	mov	r0, r3
 8012524:	370c      	adds	r7, #12
 8012526:	46bd      	mov	sp, r7
 8012528:	bd90      	pop	{r4, r7, pc}

0801252a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>:
 801252a:	b480      	push	{r7}
 801252c:	b083      	sub	sp, #12
 801252e:	af00      	add	r7, sp, #0
 8012530:	6078      	str	r0, [r7, #4]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	4618      	mov	r0, r3
 8012538:	370c      	adds	r7, #12
 801253a:	46bd      	mov	sp, r7
 801253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012540:	4770      	bx	lr

08012542 <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8012542:	b480      	push	{r7}
 8012544:	b083      	sub	sp, #12
 8012546:	af00      	add	r7, sp, #0
 8012548:	6078      	str	r0, [r7, #4]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	4618      	mov	r0, r3
 801254e:	370c      	adds	r7, #12
 8012550:	46bd      	mov	sp, r7
 8012552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012556:	4770      	bx	lr

08012558 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8012558:	b580      	push	{r7, lr}
 801255a:	b082      	sub	sp, #8
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f000 f9de 	bl	8012922 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>
 8012566:	4603      	mov	r3, r0
 8012568:	4618      	mov	r0, r3
 801256a:	3708      	adds	r7, #8
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8012570:	b5b0      	push	{r4, r5, r7, lr}
 8012572:	b084      	sub	sp, #16
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 801257c:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 801257e:	68b8      	ldr	r0, [r7, #8]
 8012580:	f000 f9db 	bl	801293a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>
 8012584:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8012586:	68b8      	ldr	r0, [r7, #8]
 8012588:	f000 f9ff 	bl	801298a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 801258c:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	fb02 f303 	mul.w	r3, r2, r3
 8012594:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012596:	441d      	add	r5, r3
 8012598:	68b8      	ldr	r0, [r7, #8]
 801259a:	f7f3 f822 	bl	80055e2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801259e:	4602      	mov	r2, r0
 80125a0:	2301      	movs	r3, #1
 80125a2:	4629      	mov	r1, r5
 80125a4:	4620      	mov	r0, r4
 80125a6:	f000 fa11 	bl	80129cc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	3308      	adds	r3, #8
 80125ae:	68ba      	ldr	r2, [r7, #8]
 80125b0:	6812      	ldr	r2, [r2, #0]
 80125b2:	601a      	str	r2, [r3, #0]
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	330c      	adds	r3, #12
 80125b8:	2100      	movs	r1, #0
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7fa ff8c 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	3310      	adds	r3, #16
 80125c4:	6879      	ldr	r1, [r7, #4]
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7fa fffa 	bl	800d5c0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 80125cc:	68f8      	ldr	r0, [r7, #12]
 80125ce:	f000 fa3b 	bl	8012a48 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>
    }
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	4618      	mov	r0, r3
 80125d6:	3710      	adds	r7, #16
 80125d8:	46bd      	mov	sp, r7
 80125da:	bdb0      	pop	{r4, r5, r7, pc}

080125dc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6839      	ldr	r1, [r7, #0]
 80125ea:	4618      	mov	r0, r3
 80125ec:	f000 fa3c 	bl	8012a68 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	4618      	mov	r0, r3
 80125f4:	3708      	adds	r7, #8
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}

080125fa <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80125fa:	b580      	push	{r7, lr}
 80125fc:	b084      	sub	sp, #16
 80125fe:	af00      	add	r7, sp, #0
 8012600:	6078      	str	r0, [r7, #4]
 8012602:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012604:	6839      	ldr	r1, [r7, #0]
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f000 fa40 	bl	8012a8c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>
 801260c:	eef0 7a40 	vmov.f32	s15, s0
 8012610:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012614:	6839      	ldr	r1, [r7, #0]
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f000 fa49 	bl	8012aae <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>
 801261c:	eef0 7a40 	vmov.f32	s15, s0
 8012620:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012624:	f107 020c 	add.w	r2, r7, #12
 8012628:	f107 0308 	add.w	r3, r7, #8
 801262c:	4619      	mov	r1, r3
 801262e:	6838      	ldr	r0, [r7, #0]
 8012630:	f7f6 fac9 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012634:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012638:	eeb0 0a67 	vmov.f32	s0, s15
 801263c:	3710      	adds	r7, #16
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}

08012642 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>:
  explicit product_evaluator(const XprType& xpr)
 8012642:	b5b0      	push	{r4, r5, r7, lr}
 8012644:	b084      	sub	sp, #16
 8012646:	af00      	add	r7, sp, #0
 8012648:	6078      	str	r0, [r7, #4]
 801264a:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	4618      	mov	r0, r3
 8012650:	f000 fa51 	bl	8012af6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	1d1c      	adds	r4, r3, #4
 8012658:	6838      	ldr	r0, [r7, #0]
 801265a:	f7f3 f8f9 	bl	8005850 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 801265e:	4603      	mov	r3, r0
 8012660:	60bb      	str	r3, [r7, #8]
 8012662:	6838      	ldr	r0, [r7, #0]
 8012664:	f7f3 f901 	bl	800586a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8012668:	4603      	mov	r3, r0
 801266a:	60fb      	str	r3, [r7, #12]
 801266c:	f107 020c 	add.w	r2, r7, #12
 8012670:	f107 0308 	add.w	r3, r7, #8
 8012674:	4619      	mov	r1, r3
 8012676:	4620      	mov	r0, r4
 8012678:	f000 fa4a 	bl	8012b10 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	4619      	mov	r1, r3
 8012680:	2004      	movs	r0, #4
 8012682:	f7ee fc5b 	bl	8000f3c <_ZnwjPv>
 8012686:	4602      	mov	r2, r0
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	3304      	adds	r3, #4
 801268c:	4619      	mov	r1, r3
 801268e:	4610      	mov	r0, r2
 8012690:	f7f7 fbf9 	bl	8009e86 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	1d1c      	adds	r4, r3, #4
 8012698:	6838      	ldr	r0, [r7, #0]
 801269a:	f000 fa52 	bl	8012b42 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 801269e:	4605      	mov	r5, r0
 80126a0:	6838      	ldr	r0, [r7, #0]
 80126a2:	f000 fa59 	bl	8012b58 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 80126a6:	4603      	mov	r3, r0
 80126a8:	461a      	mov	r2, r3
 80126aa:	4629      	mov	r1, r5
 80126ac:	4620      	mov	r0, r4
 80126ae:	f000 fa5f 	bl	8012b70 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>
  }
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	4618      	mov	r0, r3
 80126b6:	3710      	adds	r7, #16
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bdb0      	pop	{r4, r5, r7, pc}

080126bc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80126bc:	b480      	push	{r7}
 80126be:	b083      	sub	sp, #12
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	3308      	adds	r3, #8
 80126c8:	4618      	mov	r0, r3
 80126ca:	370c      	adds	r7, #12
 80126cc:	46bd      	mov	sp, r7
 80126ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d2:	4770      	bx	lr

080126d4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80126d4:	b480      	push	{r7}
 80126d6:	b083      	sub	sp, #12
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	4618      	mov	r0, r3
 80126e0:	370c      	adds	r7, #12
 80126e2:	46bd      	mov	sp, r7
 80126e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e8:	4770      	bx	lr

080126ea <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80126ea:	b480      	push	{r7}
 80126ec:	b083      	sub	sp, #12
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	6078      	str	r0, [r7, #4]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	4618      	mov	r0, r3
 80126f8:	370c      	adds	r7, #12
 80126fa:	46bd      	mov	sp, r7
 80126fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012700:	4770      	bx	lr

08012702 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012702:	b580      	push	{r7, lr}
 8012704:	b082      	sub	sp, #8
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
 801270a:	6039      	str	r1, [r7, #0]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6839      	ldr	r1, [r7, #0]
 8012710:	4618      	mov	r0, r3
 8012712:	f000 fa55 	bl	8012bc0 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	4618      	mov	r0, r3
 801271a:	3708      	adds	r7, #8
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8012720:	b590      	push	{r4, r7, lr}
 8012722:	b087      	sub	sp, #28
 8012724:	af00      	add	r7, sp, #0
 8012726:	60f8      	str	r0, [r7, #12]
 8012728:	60b9      	str	r1, [r7, #8]
 801272a:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	4618      	mov	r0, r3
 8012730:	f000 fa55 	bl	8012bde <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 8012734:	4604      	mov	r4, r0
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	3304      	adds	r3, #4
 801273a:	687a      	ldr	r2, [r7, #4]
 801273c:	68b9      	ldr	r1, [r7, #8]
 801273e:	4618      	mov	r0, r3
 8012740:	f000 fa58 	bl	8012bf4 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 8012744:	eef0 7a40 	vmov.f32	s15, s0
 8012748:	edc7 7a05 	vstr	s15, [r7, #20]
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	3308      	adds	r3, #8
 8012750:	687a      	ldr	r2, [r7, #4]
 8012752:	68b9      	ldr	r1, [r7, #8]
 8012754:	4618      	mov	r0, r3
 8012756:	f7fe f9d0 	bl	8010afa <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 801275a:	4602      	mov	r2, r0
 801275c:	f107 0314 	add.w	r3, r7, #20
 8012760:	4619      	mov	r1, r3
 8012762:	4620      	mov	r0, r4
 8012764:	f7fc fa70 	bl	800ec48 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8012768:	eef0 7a40 	vmov.f32	s15, s0
  }
 801276c:	eeb0 0a67 	vmov.f32	s0, s15
 8012770:	371c      	adds	r7, #28
 8012772:	46bd      	mov	sp, r7
 8012774:	bd90      	pop	{r4, r7, pc}

08012776 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 8012776:	b580      	push	{r7, lr}
 8012778:	b084      	sub	sp, #16
 801277a:	af00      	add	r7, sp, #0
 801277c:	60f8      	str	r0, [r7, #12]
 801277e:	60b9      	str	r1, [r7, #8]
 8012780:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8012782:	68b8      	ldr	r0, [r7, #8]
 8012784:	f7f2 ff6a 	bl	800565c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8012788:	4603      	mov	r3, r0
 801278a:	687a      	ldr	r2, [r7, #4]
 801278c:	4619      	mov	r1, r3
 801278e:	68f8      	ldr	r0, [r7, #12]
 8012790:	f000 fa46 	bl	8012c20 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>
}
 8012794:	68f8      	ldr	r0, [r7, #12]
 8012796:	3710      	adds	r7, #16
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}

0801279c <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 801279c:	b5b0      	push	{r4, r5, r7, lr}
 801279e:	b086      	sub	sp, #24
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	60f8      	str	r0, [r7, #12]
 80127a4:	60b9      	str	r1, [r7, #8]
 80127a6:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 80127a8:	68b8      	ldr	r0, [r7, #8]
 80127aa:	f7f8 ffff 	bl	800b7ac <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 80127ae:	4604      	mov	r4, r0
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f000 fa5d 	bl	8012c70 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>
 80127b6:	4605      	mov	r5, r0
 80127b8:	f107 0314 	add.w	r3, r7, #20
 80127bc:	4618      	mov	r0, r3
 80127be:	f7f2 fb13 	bl	8004de8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80127c2:	f107 0314 	add.w	r3, r7, #20
 80127c6:	462a      	mov	r2, r5
 80127c8:	4621      	mov	r1, r4
 80127ca:	68f8      	ldr	r0, [r7, #12]
 80127cc:	f000 fa8a 	bl	8012ce4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 80127d0:	68f8      	ldr	r0, [r7, #12]
 80127d2:	3718      	adds	r7, #24
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bdb0      	pop	{r4, r5, r7, pc}

080127d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 80127d8:	b580      	push	{r7, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f000 fadd 	bl	8012da0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 80127e6:	4603      	mov	r3, r0
 80127e8:	4618      	mov	r0, r3
 80127ea:	f000 fae4 	bl	8012db6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>
 80127ee:	4603      	mov	r3, r0
 80127f0:	4618      	mov	r0, r3
 80127f2:	3708      	adds	r7, #8
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}

080127f8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 80127f8:	b590      	push	{r4, r7, lr}
 80127fa:	b085      	sub	sp, #20
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f000 facd 	bl	8012da0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012806:	4604      	mov	r4, r0
 8012808:	f107 030c 	add.w	r3, r7, #12
 801280c:	4618      	mov	r0, r3
 801280e:	f7f2 fde2 	bl	80053d6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8012812:	f107 030c 	add.w	r3, r7, #12
 8012816:	4619      	mov	r1, r3
 8012818:	4620      	mov	r0, r4
 801281a:	f000 fb49 	bl	8012eb0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 801281e:	eef0 7a40 	vmov.f32	s15, s0
 8012822:	bf00      	nop
}
 8012824:	eeb0 0a67 	vmov.f32	s0, s15
 8012828:	3714      	adds	r7, #20
 801282a:	46bd      	mov	sp, r7
 801282c:	bd90      	pop	{r4, r7, pc}

0801282e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801282e:	b580      	push	{r7, lr}
 8012830:	b082      	sub	sp, #8
 8012832:	af00      	add	r7, sp, #0
 8012834:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012836:	2201      	movs	r2, #1
 8012838:	2101      	movs	r1, #1
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f7fe ff62 	bl	8011704 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f000 fb7b 	bl	8012f3c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>
  }
 8012846:	bf00      	nop
 8012848:	3708      	adds	r7, #8
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}

0801284e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 801284e:	b580      	push	{r7, lr}
 8012850:	b0a4      	sub	sp, #144	; 0x90
 8012852:	af00      	add	r7, sp, #0
 8012854:	60f8      	str	r0, [r7, #12]
 8012856:	60b9      	str	r1, [r7, #8]
 8012858:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	6819      	ldr	r1, [r3, #0]
 801285e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012862:	68ba      	ldr	r2, [r7, #8]
 8012864:	4618      	mov	r0, r3
 8012866:	f7f7 ffbd 	bl	800a7e4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 801286a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801286e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012872:	4611      	mov	r1, r2
 8012874:	4618      	mov	r0, r3
 8012876:	f7f7 ffc8 	bl	800a80a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	6859      	ldr	r1, [r3, #4]
 801287e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012882:	687a      	ldr	r2, [r7, #4]
 8012884:	4618      	mov	r0, r3
 8012886:	f7f9 f9f4 	bl	800bc72 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 801288a:	f107 0314 	add.w	r3, r7, #20
 801288e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012892:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012896:	4618      	mov	r0, r3
 8012898:	f7f9 f9fe 	bl	800bc98 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 801289c:	f107 0314 	add.w	r3, r7, #20
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7f9 fa27 	bl	800bcf4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 80128a6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80128aa:	eeb0 0a67 	vmov.f32	s0, s15
 80128ae:	3790      	adds	r7, #144	; 0x90
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}

080128b4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b082      	sub	sp, #8
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80128bc:	2200      	movs	r2, #0
 80128be:	2101      	movs	r1, #1
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f7ff fbc8 	bl	8012056 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f000 fb48 	bl	8012f5c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>
  }
 80128cc:	bf00      	nop
 80128ce:	3708      	adds	r7, #8
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b082      	sub	sp, #8
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	3308      	adds	r3, #8
             ? m_xpr.innerStride()
 80128e0:	4618      	mov	r0, r3
 80128e2:	f7fd fc40 	bl	8010166 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>
 80128e6:	4603      	mov	r3, r0
    }
 80128e8:	4618      	mov	r0, r3
 80128ea:	3708      	adds	r7, #8
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}

080128f0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b082      	sub	sp, #8
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7fd fc1e 	bl	801013e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8012902:	4603      	mov	r3, r0
    }
 8012904:	4618      	mov	r0, r3
 8012906:	3708      	adds	r7, #8
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}

0801290c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801290c:	b480      	push	{r7}
 801290e:	b083      	sub	sp, #12
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	4618      	mov	r0, r3
 8012918:	370c      	adds	r7, #12
 801291a:	46bd      	mov	sp, r7
 801291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012920:	4770      	bx	lr

08012922 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 8012922:	b580      	push	{r7, lr}
 8012924:	b082      	sub	sp, #8
 8012926:	af00      	add	r7, sp, #0
 8012928:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f000 fb36 	bl	8012f9c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>
 8012930:	4603      	mov	r3, r0
    }
 8012932:	4618      	mov	r0, r3
 8012934:	3708      	adds	r7, #8
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}

0801293a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 801293a:	b580      	push	{r7, lr}
 801293c:	b082      	sub	sp, #8
 801293e:	af00      	add	r7, sp, #0
 8012940:	6078      	str	r0, [r7, #4]
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f7f2 fe1e 	bl	8005584 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012948:	4603      	mov	r3, r0
 801294a:	4618      	mov	r0, r3
 801294c:	f7fe fd63 	bl	8011416 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012950:	4603      	mov	r3, r0
 8012952:	4618      	mov	r0, r3
 8012954:	f7ff fbd2 	bl	80120fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8012958:	4603      	mov	r3, r0
 801295a:	4618      	mov	r0, r3
 801295c:	3708      	adds	r7, #8
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 8012962:	b580      	push	{r7, lr}
 8012964:	b082      	sub	sp, #8
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f7f2 fe0a 	bl	8005584 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012970:	4603      	mov	r3, r0
 8012972:	4618      	mov	r0, r3
 8012974:	f7fe fd4f 	bl	8011416 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012978:	4603      	mov	r3, r0
 801297a:	4618      	mov	r0, r3
 801297c:	f000 fb30 	bl	8012fe0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8012980:	4603      	mov	r3, r0
 8012982:	4618      	mov	r0, r3
 8012984:	3708      	adds	r7, #8
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}

0801298a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 801298a:	b580      	push	{r7, lr}
 801298c:	b082      	sub	sp, #8
 801298e:	af00      	add	r7, sp, #0
 8012990:	6078      	str	r0, [r7, #4]
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f7f2 fdf6 	bl	8005584 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012998:	4603      	mov	r3, r0
 801299a:	4618      	mov	r0, r3
 801299c:	f7fe fd3b 	bl	8011416 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 80129a0:	4603      	mov	r3, r0
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7ff fdd8 	bl	8012558 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 80129a8:	4603      	mov	r3, r0
 80129aa:	4618      	mov	r0, r3
 80129ac:	3708      	adds	r7, #8
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}

080129b2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
 80129b2:	b580      	push	{r7, lr}
 80129b4:	b082      	sub	sp, #8
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	6078      	str	r0, [r7, #4]
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f000 fb1b 	bl	8012ff6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	4618      	mov	r0, r3
 80129c4:	3708      	adds	r7, #8
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
	...

080129cc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	60f8      	str	r0, [r7, #12]
 80129d4:	60b9      	str	r1, [r7, #8]
 80129d6:	607a      	str	r2, [r7, #4]
 80129d8:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 80129da:	68f8      	ldr	r0, [r7, #12]
 80129dc:	f7ff ffe9 	bl	80129b2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	68ba      	ldr	r2, [r7, #8]
 80129e4:	601a      	str	r2, [r3, #0]
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	3304      	adds	r3, #4
 80129ea:	6879      	ldr	r1, [r7, #4]
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7f3 fce5 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	3305      	adds	r3, #5
 80129f6:	6839      	ldr	r1, [r7, #0]
 80129f8:	4618      	mov	r0, r3
 80129fa:	f7f3 fcf9 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d011      	beq.n	8012a28 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	db08      	blt.n	8012a1c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2b03      	cmp	r3, #3
 8012a0e:	d105      	bne.n	8012a1c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	db02      	blt.n	8012a1c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	2b01      	cmp	r3, #1
 8012a1a:	d005      	beq.n	8012a28 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 8012a1c:	4b07      	ldr	r3, [pc, #28]	; (8012a3c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 8012a1e:	4a08      	ldr	r2, [pc, #32]	; (8012a40 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 8012a20:	21b0      	movs	r1, #176	; 0xb0
 8012a22:	4808      	ldr	r0, [pc, #32]	; (8012a44 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 8012a24:	f00b f8be 	bl	801dba4 <__assert_func>
      checkSanity<Derived>();
 8012a28:	2100      	movs	r1, #0
 8012a2a:	68f8      	ldr	r0, [r7, #12]
 8012a2c:	f000 faee 	bl	801300c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	4618      	mov	r0, r3
 8012a34:	3710      	adds	r7, #16
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	08026130 	.word	0x08026130
 8012a40:	0802882c 	.word	0x0802882c
 8012a44:	080262e0 	.word	0x080262e0

08012a48 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b082      	sub	sp, #8
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	3308      	adds	r3, #8
 8012a54:	4618      	mov	r0, r3
 8012a56:	f7ff ff98 	bl	801298a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8012a5a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	615a      	str	r2, [r3, #20]
    }
 8012a60:	bf00      	nop
 8012a62:	3708      	adds	r7, #8
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}

08012a68 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	6039      	str	r1, [r7, #0]
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f000 fad5 	bl	8013022 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	6839      	ldr	r1, [r7, #0]
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f000 fadb 	bl	8013038 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>
  }
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	4618      	mov	r0, r3
 8012a86:	3708      	adds	r7, #8
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}

08012a8c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b082      	sub	sp, #8
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
 8012a94:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012a96:	2200      	movs	r2, #0
 8012a98:	2100      	movs	r1, #0
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f000 faf4 	bl	8013088 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8012aa0:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8012aa8:	3708      	adds	r7, #8
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}

08012aae <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012aae:	b580      	push	{r7, lr}
 8012ab0:	b084      	sub	sp, #16
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	6078      	str	r0, [r7, #4]
 8012ab6:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012ab8:	6839      	ldr	r1, [r7, #0]
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f000 faf7 	bl	80130ae <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>
 8012ac0:	eef0 7a40 	vmov.f32	s15, s0
 8012ac4:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012ac8:	6839      	ldr	r1, [r7, #0]
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f000 fb00 	bl	80130d0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>
 8012ad0:	eef0 7a40 	vmov.f32	s15, s0
 8012ad4:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012ad8:	f107 020c 	add.w	r2, r7, #12
 8012adc:	f107 0308 	add.w	r3, r7, #8
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	6838      	ldr	r0, [r7, #0]
 8012ae4:	f7f6 f86f 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012ae8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012aec:	eeb0 0a67 	vmov.f32	s0, s15
 8012af0:	3710      	adds	r7, #16
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}

08012af6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  evaluator() {}
 8012af6:	b580      	push	{r7, lr}
 8012af8:	b082      	sub	sp, #8
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	4618      	mov	r0, r3
 8012b02:	f000 faf6 	bl	80130f2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3708      	adds	r7, #8
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}

08012b10 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b084      	sub	sp, #16
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	60f8      	str	r0, [r7, #12]
 8012b18:	60b9      	str	r1, [r7, #8]
 8012b1a:	607a      	str	r2, [r7, #4]
    {
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f7f1 fde2 	bl	80046e8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 8012b24:	f7f1 fdf0 	bl	8004708 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8012b28:	68f8      	ldr	r0, [r7, #12]
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	6819      	ldr	r1, [r3, #0]
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681a      	ldr	r2, [r3, #0]
 8012b32:	2300      	movs	r3, #0
 8012b34:	f000 faef 	bl	8013116 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3710      	adds	r7, #16
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}

08012b42 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8012b42:	b480      	push	{r7}
 8012b44:	b083      	sub	sp, #12
 8012b46:	af00      	add	r7, sp, #0
 8012b48:	6078      	str	r0, [r7, #4]
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	370c      	adds	r7, #12
 8012b50:	46bd      	mov	sp, r7
 8012b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b56:	4770      	bx	lr

08012b58 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8012b58:	b480      	push	{r7}
 8012b5a:	b083      	sub	sp, #12
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	3308      	adds	r3, #8
 8012b64:	4618      	mov	r0, r3
 8012b66:	370c      	adds	r7, #12
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6e:	4770      	bx	lr

08012b70 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8012b70:	b590      	push	{r4, r7, lr}
 8012b72:	b08b      	sub	sp, #44	; 0x2c
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	60f8      	str	r0, [r7, #12]
 8012b78:	60b9      	str	r1, [r7, #8]
 8012b7a:	607a      	str	r2, [r7, #4]
    dst.coeffRef(0,0) = (lhs.transpose().cwiseProduct(rhs)).sum();
 8012b7c:	f107 0320 	add.w	r3, r7, #32
 8012b80:	68b9      	ldr	r1, [r7, #8]
 8012b82:	4618      	mov	r0, r3
 8012b84:	f000 fadb 	bl	801313e <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>
 8012b88:	f107 0310 	add.w	r3, r7, #16
 8012b8c:	f107 0120 	add.w	r1, r7, #32
 8012b90:	687a      	ldr	r2, [r7, #4]
 8012b92:	4618      	mov	r0, r3
 8012b94:	f000 fae4 	bl	8013160 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	2100      	movs	r1, #0
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7f3 fb99 	bl	80062d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8012ba4:	4604      	mov	r4, r0
 8012ba6:	f107 0310 	add.w	r3, r7, #16
 8012baa:	4618      	mov	r0, r3
 8012bac:	f000 fb06 	bl	80131bc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>
 8012bb0:	eef0 7a40 	vmov.f32	s15, s0
 8012bb4:	edc4 7a00 	vstr	s15, [r4]
  }
 8012bb8:	bf00      	nop
 8012bba:	372c      	adds	r7, #44	; 0x2c
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd90      	pop	{r4, r7, pc}

08012bc0 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b082      	sub	sp, #8
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	6039      	str	r1, [r7, #0]
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6839      	ldr	r1, [r7, #0]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f000 fb0f 	bl	80131f2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3708      	adds	r7, #8
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}

08012bde <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8012bde:	b480      	push	{r7}
 8012be0:	b083      	sub	sp, #12
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	6078      	str	r0, [r7, #4]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	4618      	mov	r0, r3
 8012bea:	370c      	adds	r7, #12
 8012bec:	46bd      	mov	sp, r7
 8012bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf2:	4770      	bx	lr

08012bf4 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b084      	sub	sp, #16
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	60f8      	str	r0, [r7, #12]
 8012bfc:	60b9      	str	r1, [r7, #8]
 8012bfe:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	68ba      	ldr	r2, [r7, #8]
 8012c04:	6879      	ldr	r1, [r7, #4]
 8012c06:	4618      	mov	r0, r3
 8012c08:	f000 fb09 	bl	801321e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	ee07 3a90 	vmov	s15, r3
  }
 8012c14:	eeb0 0a67 	vmov.f32	s0, s15
 8012c18:	3710      	adds	r7, #16
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}
	...

08012c20 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b084      	sub	sp, #16
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	60f8      	str	r0, [r7, #12]
 8012c28:	60b9      	str	r1, [r7, #8]
 8012c2a:	607a      	str	r2, [r7, #4]
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	687a      	ldr	r2, [r7, #4]
 8012c30:	68b9      	ldr	r1, [r7, #8]
 8012c32:	4618      	mov	r0, r3
 8012c34:	f000 fb0b 	bl	801324e <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	db07      	blt.n	8012c4e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7f1 ffe7 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8012c46:	4602      	mov	r2, r0
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	4293      	cmp	r3, r2
 8012c4c:	db05      	blt.n	8012c5a <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 8012c4e:	4b05      	ldr	r3, [pc, #20]	; (8012c64 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x44>)
 8012c50:	4a05      	ldr	r2, [pc, #20]	; (8012c68 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 8012c52:	2178      	movs	r1, #120	; 0x78
 8012c54:	4805      	ldr	r0, [pc, #20]	; (8012c6c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 8012c56:	f00a ffa5 	bl	801dba4 <__assert_func>
    }
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3710      	adds	r7, #16
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}
 8012c64:	08024590 	.word	0x08024590
 8012c68:	08028940 	.word	0x08028940
 8012c6c:	08024714 	.word	0x08024714

08012c70 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012c70:	b480      	push	{r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	370c      	adds	r7, #12
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c84:	4770      	bx	lr

08012c86 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
 8012c86:	b580      	push	{r7, lr}
 8012c88:	b082      	sub	sp, #8
 8012c8a:	af00      	add	r7, sp, #0
 8012c8c:	6078      	str	r0, [r7, #4]
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f000 faee 	bl	8013270 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	4618      	mov	r0, r3
 8012c98:	3708      	adds	r7, #8
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}

08012c9e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8012c9e:	b580      	push	{r7, lr}
 8012ca0:	b082      	sub	sp, #8
 8012ca2:	af00      	add	r7, sp, #0
 8012ca4:	6078      	str	r0, [r7, #4]
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f7ff ffed 	bl	8012c86 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3708      	adds	r7, #8
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}

08012cb6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8012cb6:	b580      	push	{r7, lr}
 8012cb8:	b082      	sub	sp, #8
 8012cba:	af00      	add	r7, sp, #0
 8012cbc:	6078      	str	r0, [r7, #4]
 8012cbe:	f7f3 fbc4 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3708      	adds	r7, #8
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}

08012ccc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b082      	sub	sp, #8
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	f7f3 fbb9 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	4618      	mov	r0, r3
 8012cdc:	3708      	adds	r7, #8
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}
	...

08012ce4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8012ce4:	b5b0      	push	{r4, r5, r7, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	60f8      	str	r0, [r7, #12]
 8012cec:	60b9      	str	r1, [r7, #8]
 8012cee:	607a      	str	r2, [r7, #4]
 8012cf0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8012cf2:	68f8      	ldr	r0, [r7, #12]
 8012cf4:	f7ff ffd3 	bl	8012c9e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 8012cf8:	68fa      	ldr	r2, [r7, #12]
 8012cfa:	68bb      	ldr	r3, [r7, #8]
 8012cfc:	4614      	mov	r4, r2
 8012cfe:	461d      	mov	r5, r3
 8012d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012d08:	e884 0003 	stmia.w	r4, {r0, r1}
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	f103 0218 	add.w	r2, r3, #24
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	4614      	mov	r4, r2
 8012d16:	461d      	mov	r5, r3
 8012d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012d20:	e884 0003 	stmia.w	r4, {r0, r1}
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	3330      	adds	r3, #48	; 0x30
 8012d28:	6839      	ldr	r1, [r7, #0]
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7f2 f8e6 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8012d30:	68b8      	ldr	r0, [r7, #8]
 8012d32:	f7f8 fd69 	bl	800b808 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 8012d36:	4604      	mov	r4, r0
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7ff ffbb 	bl	8012cb6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>
 8012d40:	4603      	mov	r3, r0
 8012d42:	429c      	cmp	r4, r3
 8012d44:	d10a      	bne.n	8012d5c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 8012d46:	68b8      	ldr	r0, [r7, #8]
 8012d48:	f7f8 fd6b 	bl	800b822 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 8012d4c:	4604      	mov	r4, r0
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7ff ffbb 	bl	8012ccc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>
 8012d56:	4603      	mov	r3, r0
 8012d58:	429c      	cmp	r4, r3
 8012d5a:	d005      	beq.n	8012d68 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 8012d5c:	4b05      	ldr	r3, [pc, #20]	; (8012d74 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 8012d5e:	4a06      	ldr	r2, [pc, #24]	; (8012d78 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 8012d60:	2174      	movs	r1, #116	; 0x74
 8012d62:	4806      	ldr	r0, [pc, #24]	; (8012d7c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 8012d64:	f00a ff1e 	bl	801dba4 <__assert_func>
    }
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	3710      	adds	r7, #16
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bdb0      	pop	{r4, r5, r7, pc}
 8012d72:	bf00      	nop
 8012d74:	0801fa0c 	.word	0x0801fa0c
 8012d78:	08028a1c 	.word	0x08028a1c
 8012d7c:	0801fc70 	.word	0x0801fc70

08012d80 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b082      	sub	sp, #8
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f000 f809 	bl	8012da0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	4618      	mov	r0, r3
 8012d92:	f000 fa78 	bl	8013286 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>
 8012d96:	4603      	mov	r3, r0
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3708      	adds	r7, #8
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}

08012da0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012da0:	b480      	push	{r7}
 8012da2:	b083      	sub	sp, #12
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	4618      	mov	r0, r3
 8012dac:	370c      	adds	r7, #12
 8012dae:	46bd      	mov	sp, r7
 8012db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db4:	4770      	bx	lr

08012db6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8012db6:	b580      	push	{r7, lr}
 8012db8:	b082      	sub	sp, #8
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7f8 fd21 	bl	800b808 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 8012dc6:	4603      	mov	r3, r0
    }
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3708      	adds	r7, #8
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b082      	sub	sp, #8
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f000 fa7b 	bl	80132d4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	4618      	mov	r0, r3
 8012de2:	3708      	adds	r7, #8
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}

08012de8 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b082      	sub	sp, #8
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7ff ffec 	bl	8012dd0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3708      	adds	r7, #8
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}

08012e02 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8012e02:	b580      	push	{r7, lr}
 8012e04:	b082      	sub	sp, #8
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	6078      	str	r0, [r7, #4]
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7ff ffeb 	bl	8012de8 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	4618      	mov	r0, r3
 8012e16:	3708      	adds	r7, #8
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}

08012e1c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b082      	sub	sp, #8
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7ff ffeb 	bl	8012e02 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3708      	adds	r7, #8
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}

08012e36 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 8012e36:	b580      	push	{r7, lr}
 8012e38:	b082      	sub	sp, #8
 8012e3a:	af00      	add	r7, sp, #0
 8012e3c:	6078      	str	r0, [r7, #4]
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	330c      	adds	r3, #12
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7ff ffea 	bl	8012e1c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	3304      	adds	r3, #4
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7f8 fdcf 	bl	800b9f0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	4618      	mov	r0, r3
 8012e56:	3708      	adds	r7, #8
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}

08012e5c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b082      	sub	sp, #8
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	6078      	str	r0, [r7, #4]
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7ff ffe5 	bl	8012e36 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f000 fa26 	bl	80132be <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	4618      	mov	r0, r3
 8012e76:	3708      	adds	r7, #8
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7ff ffe8 	bl	8012e5c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3708      	adds	r7, #8
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}

08012e96 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8012e96:	b580      	push	{r7, lr}
 8012e98:	b082      	sub	sp, #8
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	6078      	str	r0, [r7, #4]
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7ff ffeb 	bl	8012e7c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3708      	adds	r7, #8
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}

08012eb0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	ed2d 8b02 	vpush	{d8}
 8012eb6:	b088      	sub	sp, #32
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f7ff fc8a 	bl	80127d8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	dd05      	ble.n	8012ed6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8012eca:	6878      	ldr	r0, [r7, #4]
 8012ecc:	f7ff ff58 	bl	8012d80 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	dc06      	bgt.n	8012ee4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8012ed6:	4b16      	ldr	r3, [pc, #88]	; (8012f30 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8012ed8:	4a16      	ldr	r2, [pc, #88]	; (8012f34 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8012eda:	f240 119b 	movw	r1, #411	; 0x19b
 8012ede:	4816      	ldr	r0, [pc, #88]	; (8012f38 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8012ee0:	f00a fe60 	bl	801dba4 <__assert_func>
 8012ee4:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8012ee6:	6878      	ldr	r0, [r7, #4]
 8012ee8:	f7ff ff5a 	bl	8012da0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012eec:	4602      	mov	r2, r0
 8012eee:	f107 030c 	add.w	r3, r7, #12
 8012ef2:	4611      	mov	r1, r2
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f000 f9d3 	bl	80132a0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f7ff ff50 	bl	8012da0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012f00:	4602      	mov	r2, r0
 8012f02:	f107 030c 	add.w	r3, r7, #12
 8012f06:	6839      	ldr	r1, [r7, #0]
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f000 f9ee 	bl	80132ea <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 8012f0e:	eeb0 8a40 	vmov.f32	s16, s0
 8012f12:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8012f14:	f107 030c 	add.w	r3, r7, #12
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7ff ffbc 	bl	8012e96 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8012f1e:	eef0 7a48 	vmov.f32	s15, s16
}
 8012f22:	eeb0 0a67 	vmov.f32	s0, s15
 8012f26:	3720      	adds	r7, #32
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	ecbd 8b02 	vpop	{d8}
 8012f2e:	bd80      	pop	{r7, pc}
 8012f30:	08024a8c 	.word	0x08024a8c
 8012f34:	08028c68 	.word	0x08028c68
 8012f38:	08024c98 	.word	0x08024c98

08012f3c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b082      	sub	sp, #8
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012f44:	2202      	movs	r2, #2
 8012f46:	2101      	movs	r1, #1
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f7fe fbdb 	bl	8011704 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f000 f9dc 	bl	801330c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>
  }
 8012f54:	bf00      	nop
 8012f56:	3708      	adds	r7, #8
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}

08012f5c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012f64:	2201      	movs	r2, #1
 8012f66:	2101      	movs	r1, #1
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f7ff f874 	bl	8012056 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012f6e:	6878      	ldr	r0, [r7, #4]
 8012f70:	f000 f9dc 	bl	801332c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>
  }
 8012f74:	bf00      	nop
 8012f76:	3708      	adds	r7, #8
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}

08012f7c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b082      	sub	sp, #8
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	6878      	ldr	r0, [r7, #4]
 8012f86:	f7f2 fb69 	bl	800565c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7f1 fe4c 	bl	8004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8012f92:	4603      	mov	r3, r0
 8012f94:	4618      	mov	r0, r3
 8012f96:	3708      	adds	r7, #8
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8012f9c:	b590      	push	{r4, r7, lr}
 8012f9e:	b083      	sub	sp, #12
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f7ff ffe9 	bl	8012f7c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8012faa:	4604      	mov	r4, r0
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f000 f807 	bl	8012fc0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	fb04 f303 	mul.w	r3, r4, r3
 8012fb8:	4618      	mov	r0, r3
 8012fba:	370c      	adds	r7, #12
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd90      	pop	{r4, r7, pc}

08012fc0 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
 8012fc8:	6878      	ldr	r0, [r7, #4]
 8012fca:	f7f2 fb47 	bl	800565c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7f1 fe1f 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3708      	adds	r7, #8
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}

08012fe0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 8012fe0:	b480      	push	{r7}
 8012fe2:	b083      	sub	sp, #12
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	2301      	movs	r3, #1
 8012fea:	4618      	mov	r0, r3
 8012fec:	370c      	adds	r7, #12
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff4:	4770      	bx	lr

08012ff6 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8012ff6:	b480      	push	{r7}
 8012ff8:	b083      	sub	sp, #12
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
    }
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	4618      	mov	r0, r3
 8013002:	370c      	adds	r7, #12
 8013004:	46bd      	mov	sp, r7
 8013006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300a:	4770      	bx	lr

0801300c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 801300c:	b480      	push	{r7}
 801300e:	b083      	sub	sp, #12
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
 8013014:	6039      	str	r1, [r7, #0]
    {}
 8013016:	bf00      	nop
 8013018:	370c      	adds	r7, #12
 801301a:	46bd      	mov	sp, r7
 801301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013020:	4770      	bx	lr

08013022 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013022:	b480      	push	{r7}
 8013024:	b083      	sub	sp, #12
 8013026:	af00      	add	r7, sp, #0
 8013028:	6078      	str	r0, [r7, #4]
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	4618      	mov	r0, r3
 801302e:	370c      	adds	r7, #12
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr

08013038 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8013038:	b590      	push	{r4, r7, lr}
 801303a:	b083      	sub	sp, #12
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	6039      	str	r1, [r7, #0]
 8013042:	687c      	ldr	r4, [r7, #4]
 8013044:	6838      	ldr	r0, [r7, #0]
 8013046:	f000 f981 	bl	801334c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>
 801304a:	4603      	mov	r3, r0
 801304c:	4619      	mov	r1, r3
 801304e:	4620      	mov	r0, r4
 8013050:	f7f1 ff54 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	1d1c      	adds	r4, r3, #4
 8013058:	6838      	ldr	r0, [r7, #0]
 801305a:	f000 f983 	bl	8013364 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>
 801305e:	4603      	mov	r3, r0
 8013060:	4619      	mov	r1, r3
 8013062:	4620      	mov	r0, r4
 8013064:	f7fb fa91 	bl	800e58a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	f103 040c 	add.w	r4, r3, #12
 801306e:	6838      	ldr	r0, [r7, #0]
 8013070:	f000 f983 	bl	801337a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>
 8013074:	4603      	mov	r3, r0
 8013076:	4619      	mov	r1, r3
 8013078:	4620      	mov	r0, r4
 801307a:	f000 f98a 	bl	8013392 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	4618      	mov	r0, r3
 8013082:	370c      	adds	r7, #12
 8013084:	46bd      	mov	sp, r7
 8013086:	bd90      	pop	{r4, r7, pc}

08013088 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013088:	b580      	push	{r7, lr}
 801308a:	b084      	sub	sp, #16
 801308c:	af00      	add	r7, sp, #0
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	60b9      	str	r1, [r7, #8]
 8013092:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	68ba      	ldr	r2, [r7, #8]
 8013098:	6879      	ldr	r1, [r7, #4]
 801309a:	4618      	mov	r0, r3
 801309c:	f000 f988 	bl	80133b0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>
 80130a0:	eef0 7a40 	vmov.f32	s15, s0
 80130a4:	eeb0 0a67 	vmov.f32	s0, s15
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}

080130ae <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80130ae:	b580      	push	{r7, lr}
 80130b0:	b082      	sub	sp, #8
 80130b2:	af00      	add	r7, sp, #0
 80130b4:	6078      	str	r0, [r7, #4]
 80130b6:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80130b8:	2201      	movs	r2, #1
 80130ba:	2100      	movs	r1, #0
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f7ff ffe3 	bl	8013088 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80130c2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80130c6:	eeb0 0a67 	vmov.f32	s0, s15
 80130ca:	3708      	adds	r7, #8
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd80      	pop	{r7, pc}

080130d0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b082      	sub	sp, #8
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
 80130d8:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80130da:	2202      	movs	r2, #2
 80130dc:	2100      	movs	r1, #0
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f7ff ffd2 	bl	8013088 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80130e4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80130e8:	eeb0 0a67 	vmov.f32	s0, s15
 80130ec:	3708      	adds	r7, #8
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}

080130f2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  evaluator()
 80130f2:	b580      	push	{r7, lr}
 80130f4:	b082      	sub	sp, #8
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 80130fa:	6878      	ldr	r0, [r7, #4]
 80130fc:	f7f7 fd37 	bl	800ab6e <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2200      	movs	r2, #0
 8013104:	2100      	movs	r1, #0
 8013106:	4618      	mov	r0, r3
 8013108:	f7f3 fcbd 	bl	8006a86 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	4618      	mov	r0, r3
 8013110:	3708      	adds	r7, #8
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}

08013116 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8013116:	b580      	push	{r7, lr}
 8013118:	b086      	sub	sp, #24
 801311a:	af00      	add	r7, sp, #0
 801311c:	60f8      	str	r0, [r7, #12]
 801311e:	60b9      	str	r1, [r7, #8]
 8013120:	607a      	str	r2, [r7, #4]
 8013122:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8013124:	2301      	movs	r3, #1
 8013126:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8013128:	2301      	movs	r3, #1
 801312a:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 801312c:	687a      	ldr	r2, [r7, #4]
 801312e:	68b9      	ldr	r1, [r7, #8]
 8013130:	68f8      	ldr	r0, [r7, #12]
 8013132:	f7f9 fef9 	bl	800cf28 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    }
 8013136:	bf00      	nop
 8013138:	3718      	adds	r7, #24
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}

0801313e <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 801313e:	b580      	push	{r7, lr}
 8013140:	b082      	sub	sp, #8
 8013142:	af00      	add	r7, sp, #0
 8013144:	6078      	str	r0, [r7, #4]
 8013146:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8013148:	6838      	ldr	r0, [r7, #0]
 801314a:	f7f2 fae5 	bl	8005718 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 801314e:	4603      	mov	r3, r0
 8013150:	4619      	mov	r1, r3
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f000 f974 	bl	8013440 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>
}
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	3708      	adds	r7, #8
 801315c:	46bd      	mov	sp, r7
 801315e:	bd80      	pop	{r7, pc}

08013160 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8013160:	b5b0      	push	{r4, r5, r7, lr}
 8013162:	b086      	sub	sp, #24
 8013164:	af00      	add	r7, sp, #0
 8013166:	60f8      	str	r0, [r7, #12]
 8013168:	60b9      	str	r1, [r7, #8]
 801316a:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 801316c:	68b8      	ldr	r0, [r7, #8]
 801316e:	f000 f97a 	bl	8013466 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>
 8013172:	4604      	mov	r4, r0
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f7f2 fa05 	bl	8005584 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 801317a:	4605      	mov	r5, r0
 801317c:	f107 0314 	add.w	r3, r7, #20
 8013180:	4618      	mov	r0, r3
 8013182:	f7f1 fe31 	bl	8004de8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8013186:	f107 0314 	add.w	r3, r7, #20
 801318a:	462a      	mov	r2, r5
 801318c:	4621      	mov	r1, r4
 801318e:	68f8      	ldr	r0, [r7, #12]
 8013190:	f000 f9a6 	bl	80134e0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>
}
 8013194:	68f8      	ldr	r0, [r7, #12]
 8013196:	3718      	adds	r7, #24
 8013198:	46bd      	mov	sp, r7
 801319a:	bdb0      	pop	{r4, r5, r7, pc}

0801319c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 801319c:	b580      	push	{r7, lr}
 801319e:	b082      	sub	sp, #8
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f000 f9eb 	bl	8013580 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 80131aa:	4603      	mov	r3, r0
 80131ac:	4618      	mov	r0, r3
 80131ae:	f000 f9f2 	bl	8013596 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>
 80131b2:	4603      	mov	r3, r0
 80131b4:	4618      	mov	r0, r3
 80131b6:	3708      	adds	r7, #8
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}

080131bc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>:
DenseBase<Derived>::sum() const
 80131bc:	b590      	push	{r4, r7, lr}
 80131be:	b085      	sub	sp, #20
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 80131c4:	6878      	ldr	r0, [r7, #4]
 80131c6:	f000 f9db 	bl	8013580 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 80131ca:	4604      	mov	r4, r0
 80131cc:	f107 030c 	add.w	r3, r7, #12
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7f2 f900 	bl	80053d6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80131d6:	f107 030c 	add.w	r3, r7, #12
 80131da:	4619      	mov	r1, r3
 80131dc:	4620      	mov	r0, r4
 80131de:	f000 fa83 	bl	80136e8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 80131e2:	eef0 7a40 	vmov.f32	s15, s0
 80131e6:	bf00      	nop
}
 80131e8:	eeb0 0a67 	vmov.f32	s0, s15
 80131ec:	3714      	adds	r7, #20
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd90      	pop	{r4, r7, pc}

080131f2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80131f2:	b590      	push	{r4, r7, lr}
 80131f4:	b083      	sub	sp, #12
 80131f6:	af00      	add	r7, sp, #0
 80131f8:	6078      	str	r0, [r7, #4]
 80131fa:	6039      	str	r1, [r7, #0]
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f000 fac5 	bl	801378c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8013202:	687c      	ldr	r4, [r7, #4]
 8013204:	6838      	ldr	r0, [r7, #0]
 8013206:	f000 fab5 	bl	8013774 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 801320a:	4603      	mov	r3, r0
 801320c:	4619      	mov	r1, r3
 801320e:	4620      	mov	r0, r4
 8013210:	f000 fac7 	bl	80137a2 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	4618      	mov	r0, r3
 8013218:	370c      	adds	r7, #12
 801321a:	46bd      	mov	sp, r7
 801321c:	bd90      	pop	{r4, r7, pc}

0801321e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801321e:	b590      	push	{r4, r7, lr}
 8013220:	b085      	sub	sp, #20
 8013222:	af00      	add	r7, sp, #0
 8013224:	60f8      	str	r0, [r7, #12]
 8013226:	60b9      	str	r1, [r7, #8]
 8013228:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	681c      	ldr	r4, [r3, #0]
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	4618      	mov	r0, r3
 8013232:	f7f3 fb5d 	bl	80068f0 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8013236:	4602      	mov	r2, r0
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	fb03 f202 	mul.w	r2, r3, r2
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	4413      	add	r3, r2
 8013242:	009b      	lsls	r3, r3, #2
 8013244:	4423      	add	r3, r4
  }
 8013246:	4618      	mov	r0, r3
 8013248:	3714      	adds	r7, #20
 801324a:	46bd      	mov	sp, r7
 801324c:	bd90      	pop	{r4, r7, pc}

0801324e <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 801324e:	b580      	push	{r7, lr}
 8013250:	b084      	sub	sp, #16
 8013252:	af00      	add	r7, sp, #0
 8013254:	60f8      	str	r0, [r7, #12]
 8013256:	60b9      	str	r1, [r7, #8]
 8013258:	607a      	str	r2, [r7, #4]
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	68b9      	ldr	r1, [r7, #8]
 8013260:	4618      	mov	r0, r3
 8013262:	f000 faad 	bl	80137c0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	4618      	mov	r0, r3
 801326a:	3710      	adds	r7, #16
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013270:	b480      	push	{r7}
 8013272:	b083      	sub	sp, #12
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
    }
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	4618      	mov	r0, r3
 801327c:	370c      	adds	r7, #12
 801327e:	46bd      	mov	sp, r7
 8013280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013284:	4770      	bx	lr

08013286 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8013286:	b580      	push	{r7, lr}
 8013288:	b082      	sub	sp, #8
 801328a:	af00      	add	r7, sp, #0
 801328c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	4618      	mov	r0, r3
 8013292:	f7f8 fac6 	bl	800b822 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 8013296:	4603      	mov	r3, r0
    }
 8013298:	4618      	mov	r0, r3
 801329a:	3708      	adds	r7, #8
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}

080132a0 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	6039      	str	r1, [r7, #0]
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6839      	ldr	r1, [r7, #0]
 80132ae:	4618      	mov	r0, r3
 80132b0:	f000 fab7 	bl	8013822 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	4618      	mov	r0, r3
 80132b8:	3708      	adds	r7, #8
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}

080132be <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80132be:	b480      	push	{r7}
 80132c0:	b083      	sub	sp, #12
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	6078      	str	r0, [r7, #4]
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	4618      	mov	r0, r3
 80132ca:	370c      	adds	r7, #12
 80132cc:	46bd      	mov	sp, r7
 80132ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d2:	4770      	bx	lr

080132d4 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
 80132d4:	b480      	push	{r7}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	4618      	mov	r0, r3
 80132e0:	370c      	adds	r7, #12
 80132e2:	46bd      	mov	sp, r7
 80132e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e8:	4770      	bx	lr

080132ea <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80132ea:	b580      	push	{r7, lr}
 80132ec:	b084      	sub	sp, #16
 80132ee:	af00      	add	r7, sp, #0
 80132f0:	60f8      	str	r0, [r7, #12]
 80132f2:	60b9      	str	r1, [r7, #8]
 80132f4:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80132f6:	68b9      	ldr	r1, [r7, #8]
 80132f8:	68f8      	ldr	r0, [r7, #12]
 80132fa:	f000 faa1 	bl	8013840 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 80132fe:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013302:	eeb0 0a67 	vmov.f32	s0, s15
 8013306:	3710      	adds	r7, #16
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}

0801330c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013314:	2200      	movs	r2, #0
 8013316:	2102      	movs	r1, #2
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f7fe f9f3 	bl	8011704 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	f000 fa9f 	bl	8013862 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>
  }
 8013324:	bf00      	nop
 8013326:	3708      	adds	r7, #8
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}

0801332c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013334:	2202      	movs	r2, #2
 8013336:	2101      	movs	r1, #1
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f7fe fe8c 	bl	8012056 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f000 fa9f 	bl	8013882 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>
  }
 8013344:	bf00      	nop
 8013346:	3708      	adds	r7, #8
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}

0801334c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 801334c:	b480      	push	{r7}
 801334e:	b083      	sub	sp, #12
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	3330      	adds	r3, #48	; 0x30
 8013358:	4618      	mov	r0, r3
 801335a:	370c      	adds	r7, #12
 801335c:	46bd      	mov	sp, r7
 801335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013362:	4770      	bx	lr

08013364 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8013364:	b480      	push	{r7}
 8013366:	b083      	sub	sp, #12
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	4618      	mov	r0, r3
 8013370:	370c      	adds	r7, #12
 8013372:	46bd      	mov	sp, r7
 8013374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013378:	4770      	bx	lr

0801337a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 801337a:	b480      	push	{r7}
 801337c:	b083      	sub	sp, #12
 801337e:	af00      	add	r7, sp, #0
 8013380:	6078      	str	r0, [r7, #4]
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	3318      	adds	r3, #24
 8013386:	4618      	mov	r0, r3
 8013388:	370c      	adds	r7, #12
 801338a:	46bd      	mov	sp, r7
 801338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013390:	4770      	bx	lr

08013392 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013392:	b580      	push	{r7, lr}
 8013394:	b082      	sub	sp, #8
 8013396:	af00      	add	r7, sp, #0
 8013398:	6078      	str	r0, [r7, #4]
 801339a:	6039      	str	r1, [r7, #0]
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	6839      	ldr	r1, [r7, #0]
 80133a0:	4618      	mov	r0, r3
 80133a2:	f000 fa7e 	bl	80138a2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	4618      	mov	r0, r3
 80133aa:	3708      	adds	r7, #8
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}

080133b0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80133b0:	b590      	push	{r4, r7, lr}
 80133b2:	b087      	sub	sp, #28
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	60f8      	str	r0, [r7, #12]
 80133b8:	60b9      	str	r1, [r7, #8]
 80133ba:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	4618      	mov	r0, r3
 80133c0:	f000 fa7e 	bl	80138c0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>
 80133c4:	4604      	mov	r4, r0
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	3304      	adds	r3, #4
 80133ca:	687a      	ldr	r2, [r7, #4]
 80133cc:	68b9      	ldr	r1, [r7, #8]
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fb fdf6 	bl	800efc0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 80133d4:	eef0 7a40 	vmov.f32	s15, s0
 80133d8:	edc7 7a04 	vstr	s15, [r7, #16]
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	330c      	adds	r3, #12
 80133e0:	687a      	ldr	r2, [r7, #4]
 80133e2:	68b9      	ldr	r1, [r7, #8]
 80133e4:	4618      	mov	r0, r3
 80133e6:	f000 fa76 	bl	80138d6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 80133ea:	eef0 7a40 	vmov.f32	s15, s0
 80133ee:	edc7 7a05 	vstr	s15, [r7, #20]
 80133f2:	f107 0214 	add.w	r2, r7, #20
 80133f6:	f107 0310 	add.w	r3, r7, #16
 80133fa:	4619      	mov	r1, r3
 80133fc:	4620      	mov	r0, r4
 80133fe:	f7fb fc23 	bl	800ec48 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8013402:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013406:	eeb0 0a67 	vmov.f32	s0, s15
 801340a:	371c      	adds	r7, #28
 801340c:	46bd      	mov	sp, r7
 801340e:	bd90      	pop	{r4, r7, pc}

08013410 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8013410:	b580      	push	{r7, lr}
 8013412:	b082      	sub	sp, #8
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f000 fa7d 	bl	8013918 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	4618      	mov	r0, r3
 8013422:	3708      	adds	r7, #8
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}

08013428 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8013428:	b580      	push	{r7, lr}
 801342a:	b082      	sub	sp, #8
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f7ff ffed 	bl	8013410 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	4618      	mov	r0, r3
 801343a:	3708      	adds	r7, #8
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8013440:	b580      	push	{r7, lr}
 8013442:	b082      	sub	sp, #8
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	6039      	str	r1, [r7, #0]
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f7ff ffec 	bl	8013428 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	683a      	ldr	r2, [r7, #0]
 8013454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013458:	e883 0003 	stmia.w	r3, {r0, r1}
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	4618      	mov	r0, r3
 8013460:	3708      	adds	r7, #8
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}

08013466 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013466:	b480      	push	{r7}
 8013468:	b083      	sub	sp, #12
 801346a:	af00      	add	r7, sp, #0
 801346c:	6078      	str	r0, [r7, #4]
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	4618      	mov	r0, r3
 8013472:	370c      	adds	r7, #12
 8013474:	46bd      	mov	sp, r7
 8013476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347a:	4770      	bx	lr

0801347c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f000 fa52 	bl	801392e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	4618      	mov	r0, r3
 801348e:	3708      	adds	r7, #8
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}

08013494 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8013494:	b580      	push	{r7, lr}
 8013496:	b082      	sub	sp, #8
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f7ff ffed 	bl	801347c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	4618      	mov	r0, r3
 80134a6:	3708      	adds	r7, #8
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}

080134ac <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b082      	sub	sp, #8
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	4618      	mov	r0, r3
 80134b8:	f7f2 f95d 	bl	8005776 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 80134bc:	4603      	mov	r3, r0
 80134be:	4618      	mov	r0, r3
 80134c0:	3708      	adds	r7, #8
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}

080134c6 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 80134c6:	b580      	push	{r7, lr}
 80134c8:	b082      	sub	sp, #8
 80134ca:	af00      	add	r7, sp, #0
 80134cc:	6078      	str	r0, [r7, #4]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7f3 f8c2 	bl	800665a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 80134d6:	4603      	mov	r3, r0
 80134d8:	4618      	mov	r0, r3
 80134da:	3708      	adds	r7, #8
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}

080134e0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80134e0:	b590      	push	{r4, r7, lr}
 80134e2:	b085      	sub	sp, #20
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	60f8      	str	r0, [r7, #12]
 80134e8:	60b9      	str	r1, [r7, #8]
 80134ea:	607a      	str	r2, [r7, #4]
 80134ec:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80134ee:	68f8      	ldr	r0, [r7, #12]
 80134f0:	f7ff ffd0 	bl	8013494 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	68ba      	ldr	r2, [r7, #8]
 80134f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80134fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	3308      	adds	r3, #8
 8013504:	687a      	ldr	r2, [r7, #4]
 8013506:	6812      	ldr	r2, [r2, #0]
 8013508:	601a      	str	r2, [r3, #0]
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	330c      	adds	r3, #12
 801350e:	6839      	ldr	r1, [r7, #0]
 8013510:	4618      	mov	r0, r3
 8013512:	f7f1 fcf3 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8013516:	68b8      	ldr	r0, [r7, #8]
 8013518:	f7ff ffc8 	bl	80134ac <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 801351c:	4604      	mov	r4, r0
 801351e:	6878      	ldr	r0, [r7, #4]
 8013520:	f7f2 f85f 	bl	80055e2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8013524:	4603      	mov	r3, r0
 8013526:	429c      	cmp	r4, r3
 8013528:	d109      	bne.n	801353e <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x5e>
 801352a:	68b8      	ldr	r0, [r7, #8]
 801352c:	f7ff ffcb 	bl	80134c6 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8013530:	4604      	mov	r4, r0
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f7f3 f89f 	bl	8006676 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013538:	4603      	mov	r3, r0
 801353a:	429c      	cmp	r4, r3
 801353c:	d005      	beq.n	801354a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x6a>
 801353e:	4b05      	ldr	r3, [pc, #20]	; (8013554 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x74>)
 8013540:	4a05      	ldr	r2, [pc, #20]	; (8013558 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x78>)
 8013542:	2174      	movs	r1, #116	; 0x74
 8013544:	4805      	ldr	r0, [pc, #20]	; (801355c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x7c>)
 8013546:	f00a fb2d 	bl	801dba4 <__assert_func>
    }
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	4618      	mov	r0, r3
 801354e:	3714      	adds	r7, #20
 8013550:	46bd      	mov	sp, r7
 8013552:	bd90      	pop	{r4, r7, pc}
 8013554:	0801fa0c 	.word	0x0801fa0c
 8013558:	08028e30 	.word	0x08028e30
 801355c:	0801fc70 	.word	0x0801fc70

08013560 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8013560:	b580      	push	{r7, lr}
 8013562:	b082      	sub	sp, #8
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f000 f809 	bl	8013580 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 801356e:	4603      	mov	r3, r0
 8013570:	4618      	mov	r0, r3
 8013572:	f000 f9e7 	bl	8013944 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>
 8013576:	4603      	mov	r3, r0
 8013578:	4618      	mov	r0, r3
 801357a:	3708      	adds	r7, #8
 801357c:	46bd      	mov	sp, r7
 801357e:	bd80      	pop	{r7, pc}

08013580 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013580:	b480      	push	{r7}
 8013582:	b083      	sub	sp, #12
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	4618      	mov	r0, r3
 801358c:	370c      	adds	r7, #12
 801358e:	46bd      	mov	sp, r7
 8013590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013594:	4770      	bx	lr

08013596 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8013596:	b580      	push	{r7, lr}
 8013598:	b082      	sub	sp, #8
 801359a:	af00      	add	r7, sp, #0
 801359c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7ff ff83 	bl	80134ac <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 80135a6:	4603      	mov	r3, r0
    }
 80135a8:	4618      	mov	r0, r3
 80135aa:	3708      	adds	r7, #8
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}

080135b0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b082      	sub	sp, #8
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	4618      	mov	r0, r3
 80135bc:	f7fb fa2e 	bl	800ea1c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	4618      	mov	r0, r3
 80135c4:	3708      	adds	r7, #8
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}

080135ca <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80135ca:	b580      	push	{r7, lr}
 80135cc:	b082      	sub	sp, #8
 80135ce:	af00      	add	r7, sp, #0
 80135d0:	6078      	str	r0, [r7, #4]
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7ff ffeb 	bl	80135b0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	4618      	mov	r0, r3
 80135de:	3708      	adds	r7, #8
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}

080135e4 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<const T>
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b082      	sub	sp, #8
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	4618      	mov	r0, r3
 80135f0:	f7ff ffeb 	bl	80135ca <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	4618      	mov	r0, r3
 80135f8:	3708      	adds	r7, #8
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}

080135fe <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 80135fe:	b580      	push	{r7, lr}
 8013600:	b082      	sub	sp, #8
 8013602:	af00      	add	r7, sp, #0
 8013604:	6078      	str	r0, [r7, #4]
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	4618      	mov	r0, r3
 801360a:	f7ff ffeb 	bl	80135e4 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f000 f9bf 	bl	8013992 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	4618      	mov	r0, r3
 8013618:	3708      	adds	r7, #8
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}

0801361e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 801361e:	b580      	push	{r7, lr}
 8013620:	b082      	sub	sp, #8
 8013622:	af00      	add	r7, sp, #0
 8013624:	6078      	str	r0, [r7, #4]
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	4618      	mov	r0, r3
 801362a:	f7ff ffe8 	bl	80135fe <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	4618      	mov	r0, r3
 8013632:	3708      	adds	r7, #8
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}

08013638 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator<const T>
 8013638:	b580      	push	{r7, lr}
 801363a:	b082      	sub	sp, #8
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	4618      	mov	r0, r3
 8013644:	f7ff ffeb 	bl	801361e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	4618      	mov	r0, r3
 801364c:	3708      	adds	r7, #8
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}

08013652 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 8013652:	b580      	push	{r7, lr}
 8013654:	b082      	sub	sp, #8
 8013656:	af00      	add	r7, sp, #0
 8013658:	6078      	str	r0, [r7, #4]
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	4618      	mov	r0, r3
 801365e:	f7fb f9fa 	bl	800ea56 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	4618      	mov	r0, r3
 8013666:	3708      	adds	r7, #8
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}

0801366c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 801366c:	b580      	push	{r7, lr}
 801366e:	b082      	sub	sp, #8
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	3314      	adds	r3, #20
 8013678:	4618      	mov	r0, r3
 801367a:	f7ff ffea 	bl	8013652 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	3304      	adds	r3, #4
 8013682:	4618      	mov	r0, r3
 8013684:	f7ff ffd8 	bl	8013638 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	4618      	mov	r0, r3
 801368c:	3708      	adds	r7, #8
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}

08013692 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8013692:	b580      	push	{r7, lr}
 8013694:	b082      	sub	sp, #8
 8013696:	af00      	add	r7, sp, #0
 8013698:	6078      	str	r0, [r7, #4]
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	4618      	mov	r0, r3
 801369e:	f7ff ffe5 	bl	801366c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f000 f96a 	bl	801397c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	4618      	mov	r0, r3
 80136ac:	3708      	adds	r7, #8
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}

080136b2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80136b2:	b580      	push	{r7, lr}
 80136b4:	b082      	sub	sp, #8
 80136b6:	af00      	add	r7, sp, #0
 80136b8:	6078      	str	r0, [r7, #4]
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	4618      	mov	r0, r3
 80136be:	f7ff ffe8 	bl	8013692 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	4618      	mov	r0, r3
 80136c6:	3708      	adds	r7, #8
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd80      	pop	{r7, pc}

080136cc <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b082      	sub	sp, #8
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7ff ffeb 	bl	80136b2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	4618      	mov	r0, r3
 80136e0:	3708      	adds	r7, #8
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}
	...

080136e8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 80136e8:	b580      	push	{r7, lr}
 80136ea:	ed2d 8b02 	vpush	{d8}
 80136ee:	b088      	sub	sp, #32
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
 80136f4:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f7ff fd50 	bl	801319c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>
 80136fc:	4603      	mov	r3, r0
 80136fe:	2b00      	cmp	r3, #0
 8013700:	dd05      	ble.n	801370e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f7ff ff2c 	bl	8013560 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>
 8013708:	4603      	mov	r3, r0
 801370a:	2b00      	cmp	r3, #0
 801370c:	dc06      	bgt.n	801371c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 801370e:	4b16      	ldr	r3, [pc, #88]	; (8013768 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8013710:	4a16      	ldr	r2, [pc, #88]	; (801376c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8013712:	f240 119b 	movw	r1, #411	; 0x19b
 8013716:	4816      	ldr	r0, [pc, #88]	; (8013770 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8013718:	f00a fa44 	bl	801dba4 <__assert_func>
 801371c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f7ff ff2e 	bl	8013580 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013724:	4602      	mov	r2, r0
 8013726:	f107 0308 	add.w	r3, r7, #8
 801372a:	4611      	mov	r1, r2
 801372c:	4618      	mov	r0, r3
 801372e:	f000 f916 	bl	801395e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013732:	6878      	ldr	r0, [r7, #4]
 8013734:	f7ff ff24 	bl	8013580 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013738:	4602      	mov	r2, r0
 801373a:	f107 0308 	add.w	r3, r7, #8
 801373e:	6839      	ldr	r1, [r7, #0]
 8013740:	4618      	mov	r0, r3
 8013742:	f000 f931 	bl	80139a8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 8013746:	eeb0 8a40 	vmov.f32	s16, s0
 801374a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801374c:	f107 0308 	add.w	r3, r7, #8
 8013750:	4618      	mov	r0, r3
 8013752:	f7ff ffbb 	bl	80136cc <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013756:	eef0 7a48 	vmov.f32	s15, s16
}
 801375a:	eeb0 0a67 	vmov.f32	s0, s15
 801375e:	3720      	adds	r7, #32
 8013760:	46bd      	mov	sp, r7
 8013762:	ecbd 8b02 	vpop	{d8}
 8013766:	bd80      	pop	{r7, pc}
 8013768:	08024a8c 	.word	0x08024a8c
 801376c:	0802907c 	.word	0x0802907c
 8013770:	08024c98 	.word	0x08024c98

08013774 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8013774:	b480      	push	{r7}
 8013776:	b083      	sub	sp, #12
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	4618      	mov	r0, r3
 8013782:	370c      	adds	r7, #12
 8013784:	46bd      	mov	sp, r7
 8013786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378a:	4770      	bx	lr

0801378c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801378c:	b480      	push	{r7}
 801378e:	b083      	sub	sp, #12
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	4618      	mov	r0, r3
 8013798:	370c      	adds	r7, #12
 801379a:	46bd      	mov	sp, r7
 801379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a0:	4770      	bx	lr

080137a2 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80137a2:	b580      	push	{r7, lr}
 80137a4:	b082      	sub	sp, #8
 80137a6:	af00      	add	r7, sp, #0
 80137a8:	6078      	str	r0, [r7, #4]
 80137aa:	6039      	str	r1, [r7, #0]
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6839      	ldr	r1, [r7, #0]
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7fd fe47 	bl	8011444 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	4618      	mov	r0, r3
 80137ba:	3708      	adds	r7, #8
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}

080137c0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 80137c0:	b5b0      	push	{r4, r5, r7, lr}
 80137c2:	b084      	sub	sp, #16
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	60b9      	str	r1, [r7, #8]
 80137ca:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80137cc:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7fe fc93 	bl	80120fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 80137d6:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 80137d8:	68b8      	ldr	r0, [r7, #8]
 80137da:	f7ff fc01 	bl	8012fe0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 80137de:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	fb02 f303 	mul.w	r3, r2, r3
 80137e6:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80137e8:	18e9      	adds	r1, r5, r3
 80137ea:	2301      	movs	r3, #1
 80137ec:	2201      	movs	r2, #1
 80137ee:	4620      	mov	r0, r4
 80137f0:	f000 f8f8 	bl	80139e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	68ba      	ldr	r2, [r7, #8]
 80137f8:	609a      	str	r2, [r3, #8]
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	330c      	adds	r3, #12
 80137fe:	2100      	movs	r1, #0
 8013800:	4618      	mov	r0, r3
 8013802:	f7f9 fedd 	bl	800d5c0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	3310      	adds	r3, #16
 801380a:	6879      	ldr	r1, [r7, #4]
 801380c:	4618      	mov	r0, r3
 801380e:	f7f9 fe63 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8013812:	68f8      	ldr	r0, [r7, #12]
 8013814:	f000 f924 	bl	8013a60 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>
    }
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	4618      	mov	r0, r3
 801381c:	3710      	adds	r7, #16
 801381e:	46bd      	mov	sp, r7
 8013820:	bdb0      	pop	{r4, r5, r7, pc}

08013822 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8013822:	b580      	push	{r7, lr}
 8013824:	b082      	sub	sp, #8
 8013826:	af00      	add	r7, sp, #0
 8013828:	6078      	str	r0, [r7, #4]
 801382a:	6039      	str	r1, [r7, #0]
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6839      	ldr	r1, [r7, #0]
 8013830:	4618      	mov	r0, r3
 8013832:	f000 f925 	bl	8013a80 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	4618      	mov	r0, r3
 801383a:	3708      	adds	r7, #8
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}

08013840 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013840:	b580      	push	{r7, lr}
 8013842:	b082      	sub	sp, #8
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
 8013848:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801384a:	2200      	movs	r2, #0
 801384c:	2100      	movs	r1, #0
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f000 f928 	bl	8013aa4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8013854:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013858:	eeb0 0a67 	vmov.f32	s0, s15
 801385c:	3708      	adds	r7, #8
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}

08013862 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013862:	b580      	push	{r7, lr}
 8013864:	b082      	sub	sp, #8
 8013866:	af00      	add	r7, sp, #0
 8013868:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801386a:	2201      	movs	r2, #1
 801386c:	2102      	movs	r1, #2
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	f7fd ff48 	bl	8011704 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013874:	6878      	ldr	r0, [r7, #4]
 8013876:	f000 f928 	bl	8013aca <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>
  }
 801387a:	bf00      	nop
 801387c:	3708      	adds	r7, #8
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}

08013882 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013882:	b580      	push	{r7, lr}
 8013884:	b082      	sub	sp, #8
 8013886:	af00      	add	r7, sp, #0
 8013888:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801388a:	2200      	movs	r2, #0
 801388c:	2102      	movs	r1, #2
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f7fe fbe1 	bl	8012056 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f000 f928 	bl	8013aea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>
  }
 801389a:	bf00      	nop
 801389c:	3708      	adds	r7, #8
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}

080138a2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80138a2:	b580      	push	{r7, lr}
 80138a4:	b082      	sub	sp, #8
 80138a6:	af00      	add	r7, sp, #0
 80138a8:	6078      	str	r0, [r7, #4]
 80138aa:	6039      	str	r1, [r7, #0]
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6839      	ldr	r1, [r7, #0]
 80138b0:	4618      	mov	r0, r3
 80138b2:	f000 f92a 	bl	8013b0a <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>
  }
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	4618      	mov	r0, r3
 80138ba:	3708      	adds	r7, #8
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}

080138c0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80138c0:	b480      	push	{r7}
 80138c2:	b083      	sub	sp, #12
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	4618      	mov	r0, r3
 80138cc:	370c      	adds	r7, #12
 80138ce:	46bd      	mov	sp, r7
 80138d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d4:	4770      	bx	lr

080138d6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80138d6:	b5b0      	push	{r4, r5, r7, lr}
 80138d8:	b084      	sub	sp, #16
 80138da:	af00      	add	r7, sp, #0
 80138dc:	60f8      	str	r0, [r7, #12]
 80138de:	60b9      	str	r1, [r7, #8]
 80138e0:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	681c      	ldr	r4, [r3, #0]
 80138e6:	68f8      	ldr	r0, [r7, #12]
 80138e8:	f000 f923 	bl	8013b32 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 80138ec:	4602      	mov	r2, r0
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	fb03 f502 	mul.w	r5, r3, r2
 80138f4:	68f8      	ldr	r0, [r7, #12]
 80138f6:	f000 f927 	bl	8013b48 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 80138fa:	4602      	mov	r2, r0
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	fb02 f303 	mul.w	r3, r2, r3
 8013902:	442b      	add	r3, r5
 8013904:	009b      	lsls	r3, r3, #2
 8013906:	4423      	add	r3, r4
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	ee07 3a90 	vmov	s15, r3
  }
 801390e:	eeb0 0a67 	vmov.f32	s0, s15
 8013912:	3710      	adds	r7, #16
 8013914:	46bd      	mov	sp, r7
 8013916:	bdb0      	pop	{r4, r5, r7, pc}

08013918 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013918:	b480      	push	{r7}
 801391a:	b083      	sub	sp, #12
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
    }
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	4618      	mov	r0, r3
 8013924:	370c      	adds	r7, #12
 8013926:	46bd      	mov	sp, r7
 8013928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392c:	4770      	bx	lr

0801392e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801392e:	b480      	push	{r7}
 8013930:	b083      	sub	sp, #12
 8013932:	af00      	add	r7, sp, #0
 8013934:	6078      	str	r0, [r7, #4]
    }
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	4618      	mov	r0, r3
 801393a:	370c      	adds	r7, #12
 801393c:	46bd      	mov	sp, r7
 801393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013942:	4770      	bx	lr

08013944 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8013944:	b580      	push	{r7, lr}
 8013946:	b082      	sub	sp, #8
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	4618      	mov	r0, r3
 8013950:	f7ff fdb9 	bl	80134c6 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8013954:	4603      	mov	r3, r0
    }
 8013956:	4618      	mov	r0, r3
 8013958:	3708      	adds	r7, #8
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}

0801395e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 801395e:	b580      	push	{r7, lr}
 8013960:	b082      	sub	sp, #8
 8013962:	af00      	add	r7, sp, #0
 8013964:	6078      	str	r0, [r7, #4]
 8013966:	6039      	str	r1, [r7, #0]
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6839      	ldr	r1, [r7, #0]
 801396c:	4618      	mov	r0, r3
 801396e:	f000 f8f6 	bl	8013b5e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	4618      	mov	r0, r3
 8013976:	3708      	adds	r7, #8
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}

0801397c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 801397c:	b480      	push	{r7}
 801397e:	b083      	sub	sp, #12
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	4618      	mov	r0, r3
 8013988:	370c      	adds	r7, #12
 801398a:	46bd      	mov	sp, r7
 801398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013990:	4770      	bx	lr

08013992 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
 8013992:	b480      	push	{r7}
 8013994:	b083      	sub	sp, #12
 8013996:	af00      	add	r7, sp, #0
 8013998:	6078      	str	r0, [r7, #4]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	4618      	mov	r0, r3
 801399e:	370c      	adds	r7, #12
 80139a0:	46bd      	mov	sp, r7
 80139a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a6:	4770      	bx	lr

080139a8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b084      	sub	sp, #16
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	60f8      	str	r0, [r7, #12]
 80139b0:	60b9      	str	r1, [r7, #8]
 80139b2:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80139b4:	68b9      	ldr	r1, [r7, #8]
 80139b6:	68f8      	ldr	r0, [r7, #12]
 80139b8:	f000 f8e0 	bl	8013b7c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>
 80139bc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80139c0:	eeb0 0a67 	vmov.f32	s0, s15
 80139c4:	3710      	adds	r7, #16
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bd80      	pop	{r7, pc}

080139ca <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
 80139ca:	b580      	push	{r7, lr}
 80139cc:	b082      	sub	sp, #8
 80139ce:	af00      	add	r7, sp, #0
 80139d0:	6078      	str	r0, [r7, #4]
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f000 f8f6 	bl	8013bc4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	4618      	mov	r0, r3
 80139dc:	3708      	adds	r7, #8
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd80      	pop	{r7, pc}
	...

080139e4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b084      	sub	sp, #16
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	60f8      	str	r0, [r7, #12]
 80139ec:	60b9      	str	r1, [r7, #8]
 80139ee:	607a      	str	r2, [r7, #4]
 80139f0:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 80139f2:	68f8      	ldr	r0, [r7, #12]
 80139f4:	f7ff ffe9 	bl	80139ca <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	68ba      	ldr	r2, [r7, #8]
 80139fc:	601a      	str	r2, [r3, #0]
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	3304      	adds	r3, #4
 8013a02:	6879      	ldr	r1, [r7, #4]
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7f2 fcf3 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	3305      	adds	r3, #5
 8013a0e:	6839      	ldr	r1, [r7, #0]
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7f2 fced 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d011      	beq.n	8013a40 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	db08      	blt.n	8013a34 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2b01      	cmp	r3, #1
 8013a26:	d105      	bne.n	8013a34 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	db02      	blt.n	8013a34 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8013a2e:	683b      	ldr	r3, [r7, #0]
 8013a30:	2b01      	cmp	r3, #1
 8013a32:	d005      	beq.n	8013a40 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8013a34:	4b07      	ldr	r3, [pc, #28]	; (8013a54 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 8013a36:	4a08      	ldr	r2, [pc, #32]	; (8013a58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 8013a38:	21b0      	movs	r1, #176	; 0xb0
 8013a3a:	4808      	ldr	r0, [pc, #32]	; (8013a5c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 8013a3c:	f00a f8b2 	bl	801dba4 <__assert_func>
      checkSanity<Derived>();
 8013a40:	2100      	movs	r1, #0
 8013a42:	68f8      	ldr	r0, [r7, #12]
 8013a44:	f000 f8c9 	bl	8013bda <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	3710      	adds	r7, #16
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}
 8013a52:	bf00      	nop
 8013a54:	08026130 	.word	0x08026130
 8013a58:	08029244 	.word	0x08029244
 8013a5c:	080262e0 	.word	0x080262e0

08013a60 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b082      	sub	sp, #8
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	689b      	ldr	r3, [r3, #8]
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7fe fd73 	bl	8012558 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8013a72:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	615a      	str	r2, [r3, #20]
    }
 8013a78:	bf00      	nop
 8013a7a:	3708      	adds	r7, #8
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}

08013a80 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b082      	sub	sp, #8
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	6039      	str	r1, [r7, #0]
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f000 f8b0 	bl	8013bf0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	6839      	ldr	r1, [r7, #0]
 8013a94:	4618      	mov	r0, r3
 8013a96:	f000 f8b6 	bl	8013c06 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	3708      	adds	r7, #8
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}

08013aa4 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b084      	sub	sp, #16
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	60f8      	str	r0, [r7, #12]
 8013aac:	60b9      	str	r1, [r7, #8]
 8013aae:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	687a      	ldr	r2, [r7, #4]
 8013ab4:	68b9      	ldr	r1, [r7, #8]
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f000 f8cd 	bl	8013c56 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8013abc:	eef0 7a40 	vmov.f32	s15, s0
 8013ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8013ac4:	3710      	adds	r7, #16
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}

08013aca <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013aca:	b580      	push	{r7, lr}
 8013acc:	b082      	sub	sp, #8
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013ad2:	2202      	movs	r2, #2
 8013ad4:	2102      	movs	r1, #2
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	f7fd fe14 	bl	8011704 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f000 f8ea 	bl	8013cb6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>
  }
 8013ae2:	bf00      	nop
 8013ae4:	3708      	adds	r7, #8
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}

08013aea <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013aea:	b580      	push	{r7, lr}
 8013aec:	b082      	sub	sp, #8
 8013aee:	af00      	add	r7, sp, #0
 8013af0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013af2:	2201      	movs	r2, #1
 8013af4:	2102      	movs	r1, #2
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f7fe faad 	bl	8012056 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f000 f8e4 	bl	8013cca <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>
  }
 8013b02:	bf00      	nop
 8013b04:	3708      	adds	r7, #8
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}

08013b0a <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8013b0a:	b580      	push	{r7, lr}
 8013b0c:	b082      	sub	sp, #8
 8013b0e:	af00      	add	r7, sp, #0
 8013b10:	6078      	str	r0, [r7, #4]
 8013b12:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	6839      	ldr	r1, [r7, #0]
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f000 f8e6 	bl	8013cea <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8013b1e:	683b      	ldr	r3, [r7, #0]
 8013b20:	4618      	mov	r0, r3
 8013b22:	f000 f90c 	bl	8013d3e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 8013b26:	bf00      	nop
  }
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	3708      	adds	r7, #8
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}

08013b32 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8013b32:	b580      	push	{r7, lr}
 8013b34:	b082      	sub	sp, #8
 8013b36:	af00      	add	r7, sp, #0
 8013b38:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8013b3a:	f7f2 fc7e 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8013b3e:	4603      	mov	r3, r0
  }
 8013b40:	4618      	mov	r0, r3
 8013b42:	3708      	adds	r7, #8
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}

08013b48 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b082      	sub	sp, #8
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8013b50:	f7f2 fc7b 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8013b54:	4603      	mov	r3, r0
  }
 8013b56:	4618      	mov	r0, r3
 8013b58:	3708      	adds	r7, #8
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}

08013b5e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8013b5e:	b580      	push	{r7, lr}
 8013b60:	b082      	sub	sp, #8
 8013b62:	af00      	add	r7, sp, #0
 8013b64:	6078      	str	r0, [r7, #4]
 8013b66:	6039      	str	r1, [r7, #0]
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6839      	ldr	r1, [r7, #0]
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f000 f8f2 	bl	8013d56 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	4618      	mov	r0, r3
 8013b76:	3708      	adds	r7, #8
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}

08013b7c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b084      	sub	sp, #16
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
 8013b84:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013b86:	6839      	ldr	r1, [r7, #0]
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f000 f8f6 	bl	8013d7a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>
 8013b8e:	eef0 7a40 	vmov.f32	s15, s0
 8013b92:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8013b96:	6839      	ldr	r1, [r7, #0]
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	f000 f8ff 	bl	8013d9c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>
 8013b9e:	eef0 7a40 	vmov.f32	s15, s0
 8013ba2:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013ba6:	f107 020c 	add.w	r2, r7, #12
 8013baa:	f107 0308 	add.w	r3, r7, #8
 8013bae:	4619      	mov	r1, r3
 8013bb0:	6838      	ldr	r0, [r7, #0]
 8013bb2:	f7f5 f808 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8013bb6:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013bba:	eeb0 0a67 	vmov.f32	s0, s15
 8013bbe:	3710      	adds	r7, #16
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}

08013bc4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
    }
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	4618      	mov	r0, r3
 8013bd0:	370c      	adds	r7, #12
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd8:	4770      	bx	lr

08013bda <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8013bda:	b480      	push	{r7}
 8013bdc:	b083      	sub	sp, #12
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	6078      	str	r0, [r7, #4]
 8013be2:	6039      	str	r1, [r7, #0]
    {}
 8013be4:	bf00      	nop
 8013be6:	370c      	adds	r7, #12
 8013be8:	46bd      	mov	sp, r7
 8013bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bee:	4770      	bx	lr

08013bf0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013bf0:	b480      	push	{r7}
 8013bf2:	b083      	sub	sp, #12
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	370c      	adds	r7, #12
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c04:	4770      	bx	lr

08013c06 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8013c06:	b590      	push	{r4, r7, lr}
 8013c08:	b083      	sub	sp, #12
 8013c0a:	af00      	add	r7, sp, #0
 8013c0c:	6078      	str	r0, [r7, #4]
 8013c0e:	6039      	str	r1, [r7, #0]
 8013c10:	687c      	ldr	r4, [r7, #4]
 8013c12:	6838      	ldr	r0, [r7, #0]
 8013c14:	f000 f8e6 	bl	8013de4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	4620      	mov	r0, r4
 8013c1e:	f7f1 f96d 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	1d1c      	adds	r4, r3, #4
 8013c26:	6838      	ldr	r0, [r7, #0]
 8013c28:	f000 f8e8 	bl	8013dfc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	4619      	mov	r1, r3
 8013c30:	4620      	mov	r0, r4
 8013c32:	f7fa ffac 	bl	800eb8e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f103 040c 	add.w	r4, r3, #12
 8013c3c:	6838      	ldr	r0, [r7, #0]
 8013c3e:	f000 f8e8 	bl	8013e12 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>
 8013c42:	4603      	mov	r3, r0
 8013c44:	4619      	mov	r1, r3
 8013c46:	4620      	mov	r0, r4
 8013c48:	f000 f8ef 	bl	8013e2a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	4618      	mov	r0, r3
 8013c50:	370c      	adds	r7, #12
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bd90      	pop	{r4, r7, pc}

08013c56 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013c56:	b590      	push	{r4, r7, lr}
 8013c58:	b087      	sub	sp, #28
 8013c5a:	af00      	add	r7, sp, #0
 8013c5c:	60f8      	str	r0, [r7, #12]
 8013c5e:	60b9      	str	r1, [r7, #8]
 8013c60:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	4618      	mov	r0, r3
 8013c66:	f000 f8ef 	bl	8013e48 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8013c6a:	4604      	mov	r4, r0
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	3304      	adds	r3, #4
 8013c70:	687a      	ldr	r2, [r7, #4]
 8013c72:	68b9      	ldr	r1, [r7, #8]
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7fa ffb3 	bl	800ebe0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8013c7a:	eef0 7a40 	vmov.f32	s15, s0
 8013c7e:	edc7 7a04 	vstr	s15, [r7, #16]
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	330c      	adds	r3, #12
 8013c86:	687a      	ldr	r2, [r7, #4]
 8013c88:	68b9      	ldr	r1, [r7, #8]
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f000 f8e7 	bl	8013e5e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 8013c90:	eef0 7a40 	vmov.f32	s15, s0
 8013c94:	edc7 7a05 	vstr	s15, [r7, #20]
 8013c98:	f107 0214 	add.w	r2, r7, #20
 8013c9c:	f107 0310 	add.w	r3, r7, #16
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	4620      	mov	r0, r4
 8013ca4:	f7fa ffd0 	bl	800ec48 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8013ca8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013cac:	eeb0 0a67 	vmov.f32	s0, s15
 8013cb0:	371c      	adds	r7, #28
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd90      	pop	{r4, r7, pc}

08013cb6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8013cb6:	b480      	push	{r7}
 8013cb8:	b083      	sub	sp, #12
 8013cba:	af00      	add	r7, sp, #0
 8013cbc:	6078      	str	r0, [r7, #4]
 8013cbe:	bf00      	nop
 8013cc0:	370c      	adds	r7, #12
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc8:	4770      	bx	lr

08013cca <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013cca:	b580      	push	{r7, lr}
 8013ccc:	b082      	sub	sp, #8
 8013cce:	af00      	add	r7, sp, #0
 8013cd0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013cd2:	2202      	movs	r2, #2
 8013cd4:	2102      	movs	r1, #2
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	f7fe f9bd 	bl	8012056 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f000 f8df 	bl	8013ea0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>
  }
 8013ce2:	bf00      	nop
 8013ce4:	3708      	adds	r7, #8
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}

08013cea <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8013cea:	b590      	push	{r4, r7, lr}
 8013cec:	b083      	sub	sp, #12
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	6078      	str	r0, [r7, #4]
 8013cf2:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f000 f8f9 	bl	8013eec <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8013cfa:	683b      	ldr	r3, [r7, #0]
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f000 f81e 	bl	8013d3e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 8013d02:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	601a      	str	r2, [r3, #0]
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	1d1c      	adds	r4, r3, #4
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f000 f8d0 	bl	8013eb4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>
 8013d14:	4603      	mov	r3, r0
 8013d16:	4619      	mov	r1, r3
 8013d18:	4620      	mov	r0, r4
 8013d1a:	f7f2 fb69 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	1d5c      	adds	r4, r3, #5
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	4618      	mov	r0, r3
 8013d26:	f000 f8d3 	bl	8013ed0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	4619      	mov	r1, r3
 8013d2e:	4620      	mov	r0, r4
 8013d30:	f7f2 fb44 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	4618      	mov	r0, r3
 8013d38:	370c      	adds	r7, #12
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd90      	pop	{r4, r7, pc}

08013d3e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8013d3e:	b480      	push	{r7}
 8013d40:	b083      	sub	sp, #12
 8013d42:	af00      	add	r7, sp, #0
 8013d44:	6078      	str	r0, [r7, #4]
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	370c      	adds	r7, #12
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr

08013d56 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8013d56:	b580      	push	{r7, lr}
 8013d58:	b082      	sub	sp, #8
 8013d5a:	af00      	add	r7, sp, #0
 8013d5c:	6078      	str	r0, [r7, #4]
 8013d5e:	6039      	str	r1, [r7, #0]
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f000 f8ce 	bl	8013f02 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	6839      	ldr	r1, [r7, #0]
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f000 f8d4 	bl	8013f18 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	4618      	mov	r0, r3
 8013d74:	3708      	adds	r7, #8
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}

08013d7a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013d7a:	b580      	push	{r7, lr}
 8013d7c:	b082      	sub	sp, #8
 8013d7e:	af00      	add	r7, sp, #0
 8013d80:	6078      	str	r0, [r7, #4]
 8013d82:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013d84:	2200      	movs	r2, #0
 8013d86:	2100      	movs	r1, #0
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f000 f8ed 	bl	8013f68 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8013d8e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013d92:	eeb0 0a67 	vmov.f32	s0, s15
 8013d96:	3708      	adds	r7, #8
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}

08013d9c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b084      	sub	sp, #16
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
 8013da4:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013da6:	6839      	ldr	r1, [r7, #0]
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	f000 f8f0 	bl	8013f8e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>
 8013dae:	eef0 7a40 	vmov.f32	s15, s0
 8013db2:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8013db6:	6839      	ldr	r1, [r7, #0]
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f000 f8f9 	bl	8013fb0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>
 8013dbe:	eef0 7a40 	vmov.f32	s15, s0
 8013dc2:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013dc6:	f107 020c 	add.w	r2, r7, #12
 8013dca:	f107 0308 	add.w	r3, r7, #8
 8013dce:	4619      	mov	r1, r3
 8013dd0:	6838      	ldr	r0, [r7, #0]
 8013dd2:	f7f4 fef8 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8013dd6:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013dda:	eeb0 0a67 	vmov.f32	s0, s15
 8013dde:	3710      	adds	r7, #16
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8013de4:	b480      	push	{r7}
 8013de6:	b083      	sub	sp, #12
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	3330      	adds	r3, #48	; 0x30
 8013df0:	4618      	mov	r0, r3
 8013df2:	370c      	adds	r7, #12
 8013df4:	46bd      	mov	sp, r7
 8013df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfa:	4770      	bx	lr

08013dfc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8013dfc:	b480      	push	{r7}
 8013dfe:	b083      	sub	sp, #12
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	4618      	mov	r0, r3
 8013e08:	370c      	adds	r7, #12
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e10:	4770      	bx	lr

08013e12 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8013e12:	b480      	push	{r7}
 8013e14:	b083      	sub	sp, #12
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	6078      	str	r0, [r7, #4]
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	3318      	adds	r3, #24
 8013e1e:	4618      	mov	r0, r3
 8013e20:	370c      	adds	r7, #12
 8013e22:	46bd      	mov	sp, r7
 8013e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e28:	4770      	bx	lr

08013e2a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013e2a:	b580      	push	{r7, lr}
 8013e2c:	b082      	sub	sp, #8
 8013e2e:	af00      	add	r7, sp, #0
 8013e30:	6078      	str	r0, [r7, #4]
 8013e32:	6039      	str	r1, [r7, #0]
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6839      	ldr	r1, [r7, #0]
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f000 f8ca 	bl	8013fd2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	4618      	mov	r0, r3
 8013e42:	3708      	adds	r7, #8
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}

08013e48 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8013e48:	b480      	push	{r7}
 8013e4a:	b083      	sub	sp, #12
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	4618      	mov	r0, r3
 8013e54:	370c      	adds	r7, #12
 8013e56:	46bd      	mov	sp, r7
 8013e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5c:	4770      	bx	lr

08013e5e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013e5e:	b5b0      	push	{r4, r5, r7, lr}
 8013e60:	b084      	sub	sp, #16
 8013e62:	af00      	add	r7, sp, #0
 8013e64:	60f8      	str	r0, [r7, #12]
 8013e66:	60b9      	str	r1, [r7, #8]
 8013e68:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	681c      	ldr	r4, [r3, #0]
 8013e6e:	68f8      	ldr	r0, [r7, #12]
 8013e70:	f000 f8be 	bl	8013ff0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 8013e74:	4602      	mov	r2, r0
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	fb03 f502 	mul.w	r5, r3, r2
 8013e7c:	68f8      	ldr	r0, [r7, #12]
 8013e7e:	f000 f8c2 	bl	8014006 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 8013e82:	4602      	mov	r2, r0
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	fb02 f303 	mul.w	r3, r2, r3
 8013e8a:	442b      	add	r3, r5
 8013e8c:	009b      	lsls	r3, r3, #2
 8013e8e:	4423      	add	r3, r4
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	ee07 3a90 	vmov	s15, r3
  }
 8013e96:	eeb0 0a67 	vmov.f32	s0, s15
 8013e9a:	3710      	adds	r7, #16
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bdb0      	pop	{r4, r5, r7, pc}

08013ea0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8013ea0:	b480      	push	{r7}
 8013ea2:	b083      	sub	sp, #12
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
 8013ea8:	bf00      	nop
 8013eaa:	370c      	adds	r7, #12
 8013eac:	46bd      	mov	sp, r7
 8013eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb2:	4770      	bx	lr

08013eb4 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b082      	sub	sp, #8
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	3308      	adds	r3, #8
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7fe fd4e 	bl	8012962 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>
 8013ec6:	4603      	mov	r3, r0
    }
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3708      	adds	r7, #8
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}

08013ed0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b082      	sub	sp, #8
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	3308      	adds	r3, #8
 8013edc:	4618      	mov	r0, r3
 8013ede:	f7fe fd54 	bl	801298a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8013ee2:	4603      	mov	r3, r0
    }
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3708      	adds	r7, #8
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}

08013eec <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013eec:	b480      	push	{r7}
 8013eee:	b083      	sub	sp, #12
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	370c      	adds	r7, #12
 8013efa:	46bd      	mov	sp, r7
 8013efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f00:	4770      	bx	lr

08013f02 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 8013f02:	b480      	push	{r7}
 8013f04:	b083      	sub	sp, #12
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	6078      	str	r0, [r7, #4]
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	370c      	adds	r7, #12
 8013f10:	46bd      	mov	sp, r7
 8013f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f16:	4770      	bx	lr

08013f18 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8013f18:	b590      	push	{r4, r7, lr}
 8013f1a:	b083      	sub	sp, #12
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	6039      	str	r1, [r7, #0]
 8013f22:	687c      	ldr	r4, [r7, #4]
 8013f24:	6838      	ldr	r0, [r7, #0]
 8013f26:	f000 f879 	bl	801401c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	4620      	mov	r0, r4
 8013f30:	f7f0 ffe4 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	1d1c      	adds	r4, r3, #4
 8013f38:	6838      	ldr	r0, [r7, #0]
 8013f3a:	f000 f87b 	bl	8014034 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	4619      	mov	r1, r3
 8013f42:	4620      	mov	r0, r4
 8013f44:	f000 f88d 	bl	8014062 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	f103 0414 	add.w	r4, r3, #20
 8013f4e:	6838      	ldr	r0, [r7, #0]
 8013f50:	f000 f87b 	bl	801404a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>
 8013f54:	4603      	mov	r3, r0
 8013f56:	4619      	mov	r1, r3
 8013f58:	4620      	mov	r0, r4
 8013f5a:	f000 f891 	bl	8014080 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	4618      	mov	r0, r3
 8013f62:	370c      	adds	r7, #12
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bd90      	pop	{r4, r7, pc}

08013f68 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b084      	sub	sp, #16
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	60f8      	str	r0, [r7, #12]
 8013f70:	60b9      	str	r1, [r7, #8]
 8013f72:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	68ba      	ldr	r2, [r7, #8]
 8013f78:	6879      	ldr	r1, [r7, #4]
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f000 f88f 	bl	801409e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>
 8013f80:	eef0 7a40 	vmov.f32	s15, s0
 8013f84:	eeb0 0a67 	vmov.f32	s0, s15
 8013f88:	3710      	adds	r7, #16
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}

08013f8e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013f8e:	b580      	push	{r7, lr}
 8013f90:	b082      	sub	sp, #8
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
 8013f96:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013f98:	2201      	movs	r2, #1
 8013f9a:	2100      	movs	r1, #0
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f7ff ffe3 	bl	8013f68 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8013fa2:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8013faa:	3708      	adds	r7, #8
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}

08013fb0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b082      	sub	sp, #8
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
 8013fb8:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013fba:	2202      	movs	r2, #2
 8013fbc:	2100      	movs	r1, #0
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f7ff ffd2 	bl	8013f68 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8013fc4:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8013fcc:	3708      	adds	r7, #8
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd80      	pop	{r7, pc}

08013fd2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8013fd2:	b580      	push	{r7, lr}
 8013fd4:	b082      	sub	sp, #8
 8013fd6:	af00      	add	r7, sp, #0
 8013fd8:	6078      	str	r0, [r7, #4]
 8013fda:	6039      	str	r1, [r7, #0]
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	6839      	ldr	r1, [r7, #0]
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f000 f887 	bl	80140f4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	4618      	mov	r0, r3
 8013fea:	3708      	adds	r7, #8
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bd80      	pop	{r7, pc}

08013ff0 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b082      	sub	sp, #8
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8013ff8:	f7f2 fa27 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8013ffc:	4603      	mov	r3, r0
  }
 8013ffe:	4618      	mov	r0, r3
 8014000:	3708      	adds	r7, #8
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}

08014006 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8014006:	b580      	push	{r7, lr}
 8014008:	b082      	sub	sp, #8
 801400a:	af00      	add	r7, sp, #0
 801400c:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 801400e:	f7f2 fa14 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8014012:	4603      	mov	r3, r0
  }
 8014014:	4618      	mov	r0, r3
 8014016:	3708      	adds	r7, #8
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}

0801401c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 801401c:	b480      	push	{r7}
 801401e:	b083      	sub	sp, #12
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	330c      	adds	r3, #12
 8014028:	4618      	mov	r0, r3
 801402a:	370c      	adds	r7, #12
 801402c:	46bd      	mov	sp, r7
 801402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014032:	4770      	bx	lr

08014034 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8014034:	b480      	push	{r7}
 8014036:	b083      	sub	sp, #12
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	4618      	mov	r0, r3
 8014040:	370c      	adds	r7, #12
 8014042:	46bd      	mov	sp, r7
 8014044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014048:	4770      	bx	lr

0801404a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 801404a:	b480      	push	{r7}
 801404c:	b083      	sub	sp, #12
 801404e:	af00      	add	r7, sp, #0
 8014050:	6078      	str	r0, [r7, #4]
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	3308      	adds	r3, #8
 8014056:	4618      	mov	r0, r3
 8014058:	370c      	adds	r7, #12
 801405a:	46bd      	mov	sp, r7
 801405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014060:	4770      	bx	lr

08014062 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8014062:	b580      	push	{r7, lr}
 8014064:	b082      	sub	sp, #8
 8014066:	af00      	add	r7, sp, #0
 8014068:	6078      	str	r0, [r7, #4]
 801406a:	6039      	str	r1, [r7, #0]
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	6839      	ldr	r1, [r7, #0]
 8014070:	4618      	mov	r0, r3
 8014072:	f000 f853 	bl	801411c <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	4618      	mov	r0, r3
 801407a:	3708      	adds	r7, #8
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>:
 8014080:	b580      	push	{r7, lr}
 8014082:	b082      	sub	sp, #8
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
 8014088:	6039      	str	r1, [r7, #0]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	6839      	ldr	r1, [r7, #0]
 801408e:	4618      	mov	r0, r3
 8014090:	f7fc f952 	bl	8010338 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	4618      	mov	r0, r3
 8014098:	3708      	adds	r7, #8
 801409a:	46bd      	mov	sp, r7
 801409c:	bd80      	pop	{r7, pc}

0801409e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801409e:	b590      	push	{r4, r7, lr}
 80140a0:	b087      	sub	sp, #28
 80140a2:	af00      	add	r7, sp, #0
 80140a4:	60f8      	str	r0, [r7, #12]
 80140a6:	60b9      	str	r1, [r7, #8]
 80140a8:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	4618      	mov	r0, r3
 80140ae:	f000 f844 	bl	801413a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 80140b2:	4604      	mov	r4, r0
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	3304      	adds	r3, #4
 80140b8:	687a      	ldr	r2, [r7, #4]
 80140ba:	68b9      	ldr	r1, [r7, #8]
 80140bc:	4618      	mov	r0, r3
 80140be:	f000 f847 	bl	8014150 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>
 80140c2:	eef0 7a40 	vmov.f32	s15, s0
 80140c6:	edc7 7a05 	vstr	s15, [r7, #20]
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	3314      	adds	r3, #20
 80140ce:	687a      	ldr	r2, [r7, #4]
 80140d0:	68b9      	ldr	r1, [r7, #8]
 80140d2:	4618      	mov	r0, r3
 80140d4:	f000 f851 	bl	801417a <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 80140d8:	4602      	mov	r2, r0
 80140da:	f107 0314 	add.w	r3, r7, #20
 80140de:	4619      	mov	r1, r3
 80140e0:	4620      	mov	r0, r4
 80140e2:	f7fa fdb1 	bl	800ec48 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80140e6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80140ea:	eeb0 0a67 	vmov.f32	s0, s15
 80140ee:	371c      	adds	r7, #28
 80140f0:	46bd      	mov	sp, r7
 80140f2:	bd90      	pop	{r4, r7, pc}

080140f4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b082      	sub	sp, #8
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
 80140fc:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6839      	ldr	r1, [r7, #0]
 8014102:	4618      	mov	r0, r3
 8014104:	f000 f84a 	bl	801419c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	4618      	mov	r0, r3
 801410c:	f000 f870 	bl	80141f0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8014110:	bf00      	nop
  }
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	4618      	mov	r0, r3
 8014116:	3708      	adds	r7, #8
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}

0801411c <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 801411c:	b580      	push	{r7, lr}
 801411e:	b082      	sub	sp, #8
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
 8014124:	6039      	str	r1, [r7, #0]
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6839      	ldr	r1, [r7, #0]
 801412a:	4618      	mov	r0, r3
 801412c:	f000 f86c 	bl	8014208 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	4618      	mov	r0, r3
 8014134:	3708      	adds	r7, #8
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}

0801413a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 801413a:	b480      	push	{r7}
 801413c:	b083      	sub	sp, #12
 801413e:	af00      	add	r7, sp, #0
 8014140:	6078      	str	r0, [r7, #4]
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	4618      	mov	r0, r3
 8014146:	370c      	adds	r7, #12
 8014148:	46bd      	mov	sp, r7
 801414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414e:	4770      	bx	lr

08014150 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014150:	b580      	push	{r7, lr}
 8014152:	b084      	sub	sp, #16
 8014154:	af00      	add	r7, sp, #0
 8014156:	60f8      	str	r0, [r7, #12]
 8014158:	60b9      	str	r1, [r7, #8]
 801415a:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	68ba      	ldr	r2, [r7, #8]
 8014160:	6879      	ldr	r1, [r7, #4]
 8014162:	4618      	mov	r0, r3
 8014164:	f7ff f85b 	bl	801321e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8014168:	4603      	mov	r3, r0
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	ee07 3a90 	vmov	s15, r3
  }
 8014170:	eeb0 0a67 	vmov.f32	s0, s15
 8014174:	3710      	adds	r7, #16
 8014176:	46bd      	mov	sp, r7
 8014178:	bd80      	pop	{r7, pc}

0801417a <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801417a:	b580      	push	{r7, lr}
 801417c:	b084      	sub	sp, #16
 801417e:	af00      	add	r7, sp, #0
 8014180:	60f8      	str	r0, [r7, #12]
 8014182:	60b9      	str	r1, [r7, #8]
 8014184:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	68ba      	ldr	r2, [r7, #8]
 801418a:	6879      	ldr	r1, [r7, #4]
 801418c:	4618      	mov	r0, r3
 801418e:	f7ff f846 	bl	801321e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8014192:	4603      	mov	r3, r0
  }
 8014194:	4618      	mov	r0, r3
 8014196:	3710      	adds	r7, #16
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}

0801419c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 801419c:	b590      	push	{r4, r7, lr}
 801419e:	b083      	sub	sp, #12
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
 80141a4:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80141a6:	6878      	ldr	r0, [r7, #4]
 80141a8:	f000 f860 	bl	801426c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80141ac:	683b      	ldr	r3, [r7, #0]
 80141ae:	4618      	mov	r0, r3
 80141b0:	f000 f81e 	bl	80141f0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 80141b4:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	601a      	str	r2, [r3, #0]
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	1d1c      	adds	r4, r3, #4
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	4618      	mov	r0, r3
 80141c2:	f000 f837 	bl	8014234 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 80141c6:	4603      	mov	r3, r0
 80141c8:	4619      	mov	r1, r3
 80141ca:	4620      	mov	r0, r4
 80141cc:	f7f2 f910 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	1d5c      	adds	r4, r3, #5
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	4618      	mov	r0, r3
 80141d8:	f000 f83a 	bl	8014250 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 80141dc:	4603      	mov	r3, r0
 80141de:	4619      	mov	r1, r3
 80141e0:	4620      	mov	r0, r4
 80141e2:	f7f2 f8eb 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	4618      	mov	r0, r3
 80141ea:	370c      	adds	r7, #12
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd90      	pop	{r4, r7, pc}

080141f0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>:
 80141f0:	b480      	push	{r7}
 80141f2:	b083      	sub	sp, #12
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	4618      	mov	r0, r3
 80141fe:	370c      	adds	r7, #12
 8014200:	46bd      	mov	sp, r7
 8014202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014206:	4770      	bx	lr

08014208 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8014208:	b590      	push	{r4, r7, lr}
 801420a:	b083      	sub	sp, #12
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
 8014210:	6039      	str	r1, [r7, #0]
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	f000 f840 	bl	8014298 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8014218:	687c      	ldr	r4, [r7, #4]
 801421a:	6838      	ldr	r0, [r7, #0]
 801421c:	f000 f831 	bl	8014282 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>
 8014220:	4603      	mov	r3, r0
 8014222:	4619      	mov	r1, r3
 8014224:	4620      	mov	r0, r4
 8014226:	f000 f842 	bl	80142ae <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	4618      	mov	r0, r3
 801422e:	370c      	adds	r7, #12
 8014230:	46bd      	mov	sp, r7
 8014232:	bd90      	pop	{r4, r7, pc}

08014234 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8014234:	b580      	push	{r7, lr}
 8014236:	b082      	sub	sp, #8
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	689b      	ldr	r3, [r3, #8]
 8014240:	4618      	mov	r0, r3
 8014242:	f7fe fecd 	bl	8012fe0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8014246:	4603      	mov	r3, r0
    }
 8014248:	4618      	mov	r0, r3
 801424a:	3708      	adds	r7, #8
 801424c:	46bd      	mov	sp, r7
 801424e:	bd80      	pop	{r7, pc}

08014250 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	689b      	ldr	r3, [r3, #8]
 801425c:	4618      	mov	r0, r3
 801425e:	f7fe f97b 	bl	8012558 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8014262:	4603      	mov	r3, r0
    }
 8014264:	4618      	mov	r0, r3
 8014266:	3708      	adds	r7, #8
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}

0801426c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801426c:	b480      	push	{r7}
 801426e:	b083      	sub	sp, #12
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	4618      	mov	r0, r3
 8014278:	370c      	adds	r7, #12
 801427a:	46bd      	mov	sp, r7
 801427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014280:	4770      	bx	lr

08014282 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>:
 8014282:	b480      	push	{r7}
 8014284:	b083      	sub	sp, #12
 8014286:	af00      	add	r7, sp, #0
 8014288:	6078      	str	r0, [r7, #4]
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	4618      	mov	r0, r3
 801428e:	370c      	adds	r7, #12
 8014290:	46bd      	mov	sp, r7
 8014292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014296:	4770      	bx	lr

08014298 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8014298:	b480      	push	{r7}
 801429a:	b083      	sub	sp, #12
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	4618      	mov	r0, r3
 80142a4:	370c      	adds	r7, #12
 80142a6:	46bd      	mov	sp, r7
 80142a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ac:	4770      	bx	lr

080142ae <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80142ae:	b580      	push	{r7, lr}
 80142b0:	b082      	sub	sp, #8
 80142b2:	af00      	add	r7, sp, #0
 80142b4:	6078      	str	r0, [r7, #4]
 80142b6:	6039      	str	r1, [r7, #0]
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6839      	ldr	r1, [r7, #0]
 80142bc:	4618      	mov	r0, r3
 80142be:	f000 f805 	bl	80142cc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	4618      	mov	r0, r3
 80142c6:	3708      	adds	r7, #8
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}

080142cc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b082      	sub	sp, #8
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
 80142d4:	6039      	str	r1, [r7, #0]
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	6839      	ldr	r1, [r7, #0]
 80142da:	4618      	mov	r0, r3
 80142dc:	f000 f805 	bl	80142ea <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	4618      	mov	r0, r3
 80142e4:	3708      	adds	r7, #8
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}

080142ea <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 80142ea:	b5b0      	push	{r4, r5, r7, lr}
 80142ec:	b084      	sub	sp, #16
 80142ee:	af00      	add	r7, sp, #0
 80142f0:	6078      	str	r0, [r7, #4]
 80142f2:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	4618      	mov	r0, r3
 80142f8:	f000 f834 	bl	8014364 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	1d1c      	adds	r4, r3, #4
 8014300:	6838      	ldr	r0, [r7, #0]
 8014302:	f7f2 f9aa 	bl	800665a <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8014306:	4603      	mov	r3, r0
 8014308:	60bb      	str	r3, [r7, #8]
 801430a:	6838      	ldr	r0, [r7, #0]
 801430c:	f7f1 fa33 	bl	8005776 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8014310:	4603      	mov	r3, r0
 8014312:	60fb      	str	r3, [r7, #12]
 8014314:	f107 020c 	add.w	r2, r7, #12
 8014318:	f107 0308 	add.w	r3, r7, #8
 801431c:	4619      	mov	r1, r3
 801431e:	4620      	mov	r0, r4
 8014320:	f000 f82d 	bl	801437e <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	4619      	mov	r1, r3
 8014328:	2004      	movs	r0, #4
 801432a:	f7ec fe07 	bl	8000f3c <_ZnwjPv>
 801432e:	4602      	mov	r2, r0
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	3304      	adds	r3, #4
 8014334:	4619      	mov	r1, r3
 8014336:	4610      	mov	r0, r2
 8014338:	f7fd f884 	bl	8011444 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	1d1c      	adds	r4, r3, #4
 8014340:	6838      	ldr	r0, [r7, #0]
 8014342:	f000 f835 	bl	80143b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>
 8014346:	4605      	mov	r5, r0
 8014348:	6838      	ldr	r0, [r7, #0]
 801434a:	f000 f83d 	bl	80143c8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>
 801434e:	4603      	mov	r3, r0
 8014350:	461a      	mov	r2, r3
 8014352:	4629      	mov	r1, r5
 8014354:	4620      	mov	r0, r4
 8014356:	f000 f843 	bl	80143e0 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>
  }
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	4618      	mov	r0, r3
 801435e:	3710      	adds	r7, #16
 8014360:	46bd      	mov	sp, r7
 8014362:	bdb0      	pop	{r4, r5, r7, pc}

08014364 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  evaluator() {}
 8014364:	b580      	push	{r7, lr}
 8014366:	b082      	sub	sp, #8
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	4618      	mov	r0, r3
 8014370:	f000 f854 	bl	801441c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	4618      	mov	r0, r3
 8014378:	3708      	adds	r7, #8
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}

0801437e <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 801437e:	b580      	push	{r7, lr}
 8014380:	b084      	sub	sp, #16
 8014382:	af00      	add	r7, sp, #0
 8014384:	60f8      	str	r0, [r7, #12]
 8014386:	60b9      	str	r1, [r7, #8]
 8014388:	607a      	str	r2, [r7, #4]
    {
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	4618      	mov	r0, r3
 801438e:	f7f0 f9f1 	bl	8004774 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8014392:	f7f0 f9ff 	bl	8004794 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8014396:	68f8      	ldr	r0, [r7, #12]
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	6819      	ldr	r1, [r3, #0]
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	2300      	movs	r3, #0
 80143a2:	f000 f84d 	bl	8014440 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	4618      	mov	r0, r3
 80143aa:	3710      	adds	r7, #16
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}

080143b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80143b0:	b480      	push	{r7}
 80143b2:	b083      	sub	sp, #12
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	4618      	mov	r0, r3
 80143be:	370c      	adds	r7, #12
 80143c0:	46bd      	mov	sp, r7
 80143c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c6:	4770      	bx	lr

080143c8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80143c8:	b480      	push	{r7}
 80143ca:	b083      	sub	sp, #12
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	685b      	ldr	r3, [r3, #4]
 80143d4:	4618      	mov	r0, r3
 80143d6:	370c      	adds	r7, #12
 80143d8:	46bd      	mov	sp, r7
 80143da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143de:	4770      	bx	lr

080143e0 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b088      	sub	sp, #32
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	60f8      	str	r0, [r7, #12]
 80143e8:	60b9      	str	r1, [r7, #8]
 80143ea:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80143ec:	f107 0314 	add.w	r3, r7, #20
 80143f0:	687a      	ldr	r2, [r7, #4]
 80143f2:	68b9      	ldr	r1, [r7, #8]
 80143f4:	4618      	mov	r0, r3
 80143f6:	f000 f837 	bl	8014468 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 80143fa:	f107 031c 	add.w	r3, r7, #28
 80143fe:	4618      	mov	r0, r3
 8014400:	f7f2 fa81 	bl	8006906 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8014404:	f107 021c 	add.w	r2, r7, #28
 8014408:	f107 0314 	add.w	r3, r7, #20
 801440c:	4619      	mov	r1, r3
 801440e:	68f8      	ldr	r0, [r7, #12]
 8014410:	f000 f841 	bl	8014496 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8014414:	bf00      	nop
 8014416:	3720      	adds	r7, #32
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  evaluator()
 801441c:	b580      	push	{r7, lr}
 801441e:	b082      	sub	sp, #8
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	f7fd fe76 	bl	8012116 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2200      	movs	r2, #0
 801442e:	2100      	movs	r1, #0
 8014430:	4618      	mov	r0, r3
 8014432:	f7f2 fb28 	bl	8006a86 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	4618      	mov	r0, r3
 801443a:	3708      	adds	r7, #8
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}

08014440 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8014440:	b580      	push	{r7, lr}
 8014442:	b086      	sub	sp, #24
 8014444:	af00      	add	r7, sp, #0
 8014446:	60f8      	str	r0, [r7, #12]
 8014448:	60b9      	str	r1, [r7, #8]
 801444a:	607a      	str	r2, [r7, #4]
 801444c:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 801444e:	2301      	movs	r3, #1
 8014450:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8014452:	2301      	movs	r3, #1
 8014454:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8014456:	687a      	ldr	r2, [r7, #4]
 8014458:	68b9      	ldr	r1, [r7, #8]
 801445a:	68f8      	ldr	r0, [r7, #12]
 801445c:	f000 f82c 	bl	80144b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
    }
 8014460:	bf00      	nop
 8014462:	3718      	adds	r7, #24
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}

08014468 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8014468:	b590      	push	{r4, r7, lr}
 801446a:	b085      	sub	sp, #20
 801446c:	af00      	add	r7, sp, #0
 801446e:	60f8      	str	r0, [r7, #12]
 8014470:	60b9      	str	r1, [r7, #8]
 8014472:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8014474:	68b8      	ldr	r0, [r7, #8]
 8014476:	f7f1 f8f1 	bl	800565c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 801447a:	4604      	mov	r4, r0
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f7f0 fe1c 	bl	80050ba <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8014482:	4603      	mov	r3, r0
 8014484:	461a      	mov	r2, r3
 8014486:	4621      	mov	r1, r4
 8014488:	68f8      	ldr	r0, [r7, #12]
 801448a:	f000 f86b 	bl	8014564 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>
}
 801448e:	68f8      	ldr	r0, [r7, #12]
 8014490:	3714      	adds	r7, #20
 8014492:	46bd      	mov	sp, r7
 8014494:	bd90      	pop	{r4, r7, pc}

08014496 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8014496:	b580      	push	{r7, lr}
 8014498:	b086      	sub	sp, #24
 801449a:	af00      	add	r7, sp, #0
 801449c:	60f8      	str	r0, [r7, #12]
 801449e:	60b9      	str	r1, [r7, #8]
 80144a0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80144a6:	687a      	ldr	r2, [r7, #4]
 80144a8:	68b9      	ldr	r1, [r7, #8]
 80144aa:	6978      	ldr	r0, [r7, #20]
 80144ac:	f000 f888 	bl	80145c0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 80144b0:	bf00      	nop
 80144b2:	3718      	adds	r7, #24
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}

080144b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b086      	sub	sp, #24
 80144bc:	af00      	add	r7, sp, #0
 80144be:	60f8      	str	r0, [r7, #12]
 80144c0:	60b9      	str	r1, [r7, #8]
 80144c2:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	2b01      	cmp	r3, #1
 80144c8:	d108      	bne.n	80144dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	2b03      	cmp	r3, #3
 80144ce:	d105      	bne.n	80144dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 80144d0:	68bb      	ldr	r3, [r7, #8]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	db02      	blt.n	80144dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	da06      	bge.n	80144ea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x32>
 80144dc:	4b0c      	ldr	r3, [pc, #48]	; (8014510 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x58>)
 80144de:	4a0d      	ldr	r2, [pc, #52]	; (8014514 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x5c>)
 80144e0:	f240 1111 	movw	r1, #273	; 0x111
 80144e4:	480c      	ldr	r0, [pc, #48]	; (8014518 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x60>)
 80144e6:	f009 fb5d 	bl	801dba4 <__assert_func>
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	617b      	str	r3, [r7, #20]
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	613b      	str	r3, [r7, #16]
  }
 80144f2:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 80144f4:	68f8      	ldr	r0, [r7, #12]
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	687a      	ldr	r2, [r7, #4]
 80144fa:	fb02 f103 	mul.w	r1, r2, r3
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	68ba      	ldr	r2, [r7, #8]
 8014502:	f000 f870 	bl	80145e6 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>
    }
 8014506:	bf00      	nop
 8014508:	3718      	adds	r7, #24
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}
 801450e:	bf00      	nop
 8014510:	0802249c 	.word	0x0802249c
 8014514:	08029348 	.word	0x08029348
 8014518:	080226b8 	.word	0x080226b8

0801451c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
 801451c:	b580      	push	{r7, lr}
 801451e:	b082      	sub	sp, #8
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
 8014524:	6878      	ldr	r0, [r7, #4]
 8014526:	f000 f86b 	bl	8014600 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	4618      	mov	r0, r3
 801452e:	3708      	adds	r7, #8
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}

08014534 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>:
class dense_product_base
 8014534:	b580      	push	{r7, lr}
 8014536:	b082      	sub	sp, #8
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f7ff ffed 	bl	801451c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	4618      	mov	r0, r3
 8014546:	3708      	adds	r7, #8
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}

0801454c <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 801454c:	b580      	push	{r7, lr}
 801454e:	b082      	sub	sp, #8
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
 8014554:	6878      	ldr	r0, [r7, #4]
 8014556:	f7ff ffed 	bl	8014534 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	4618      	mov	r0, r3
 801455e:	3708      	adds	r7, #8
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}

08014564 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8014564:	b590      	push	{r4, r7, lr}
 8014566:	b085      	sub	sp, #20
 8014568:	af00      	add	r7, sp, #0
 801456a:	60f8      	str	r0, [r7, #12]
 801456c:	60b9      	str	r1, [r7, #8]
 801456e:	607a      	str	r2, [r7, #4]
 8014570:	68f8      	ldr	r0, [r7, #12]
 8014572:	f7ff ffeb 	bl	801454c <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	68ba      	ldr	r2, [r7, #8]
 801457a:	601a      	str	r2, [r3, #0]
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	687a      	ldr	r2, [r7, #4]
 8014580:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	4618      	mov	r0, r3
 8014586:	f7f0 fb45 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801458a:	4604      	mov	r4, r0
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	4618      	mov	r0, r3
 8014590:	f7f0 f989 	bl	80048a6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8014594:	4603      	mov	r3, r0
 8014596:	429c      	cmp	r4, r3
 8014598:	d005      	beq.n	80145a6 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 801459a:	4b06      	ldr	r3, [pc, #24]	; (80145b4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 801459c:	4a06      	ldr	r2, [pc, #24]	; (80145b8 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 801459e:	2160      	movs	r1, #96	; 0x60
 80145a0:	4806      	ldr	r0, [pc, #24]	; (80145bc <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 80145a2:	f009 faff 	bl	801dba4 <__assert_func>
 80145a6:	bf00      	nop
    }
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	4618      	mov	r0, r3
 80145ac:	3714      	adds	r7, #20
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd90      	pop	{r4, r7, pc}
 80145b2:	bf00      	nop
 80145b4:	0801fccc 	.word	0x0801fccc
 80145b8:	080293d4 	.word	0x080293d4
 80145bc:	0802001c 	.word	0x0802001c

080145c0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b084      	sub	sp, #16
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	60f8      	str	r0, [r7, #12]
 80145c8:	60b9      	str	r1, [r7, #8]
 80145ca:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80145cc:	68b9      	ldr	r1, [r7, #8]
 80145ce:	68f8      	ldr	r0, [r7, #12]
 80145d0:	f000 f821 	bl	8014616 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80145d4:	687a      	ldr	r2, [r7, #4]
 80145d6:	68b9      	ldr	r1, [r7, #8]
 80145d8:	68f8      	ldr	r0, [r7, #12]
 80145da:	f000 f84a 	bl	8014672 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80145de:	bf00      	nop
 80145e0:	3710      	adds	r7, #16
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}

080145e6 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 80145e6:	b480      	push	{r7}
 80145e8:	b085      	sub	sp, #20
 80145ea:	af00      	add	r7, sp, #0
 80145ec:	60f8      	str	r0, [r7, #12]
 80145ee:	60b9      	str	r1, [r7, #8]
 80145f0:	607a      	str	r2, [r7, #4]
 80145f2:	603b      	str	r3, [r7, #0]
 80145f4:	bf00      	nop
 80145f6:	3714      	adds	r7, #20
 80145f8:	46bd      	mov	sp, r7
 80145fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fe:	4770      	bx	lr

08014600 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014600:	b480      	push	{r7}
 8014602:	b083      	sub	sp, #12
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
    }
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	4618      	mov	r0, r3
 801460c:	370c      	adds	r7, #12
 801460e:	46bd      	mov	sp, r7
 8014610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014614:	4770      	bx	lr

08014616 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8014616:	b480      	push	{r7}
 8014618:	b083      	sub	sp, #12
 801461a:	af00      	add	r7, sp, #0
 801461c:	6078      	str	r0, [r7, #4]
 801461e:	6039      	str	r1, [r7, #0]
}
 8014620:	bf00      	nop
 8014622:	370c      	adds	r7, #12
 8014624:	46bd      	mov	sp, r7
 8014626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462a:	4770      	bx	lr

0801462c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 801462c:	b580      	push	{r7, lr}
 801462e:	b082      	sub	sp, #8
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	330c      	adds	r3, #12
 8014638:	4618      	mov	r0, r3
 801463a:	f7f2 fbbc 	bl	8006db6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	3308      	adds	r3, #8
 8014642:	4618      	mov	r0, r3
 8014644:	f7fa f9ea 	bl	800ea1c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f000 f859 	bl	8014700 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	4618      	mov	r0, r3
 8014652:	3708      	adds	r7, #8
 8014654:	46bd      	mov	sp, r7
 8014656:	bd80      	pop	{r7, pc}

08014658 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8014658:	b580      	push	{r7, lr}
 801465a:	b082      	sub	sp, #8
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	4618      	mov	r0, r3
 8014664:	f7ff ffe2 	bl	801462c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	4618      	mov	r0, r3
 801466c:	3708      	adds	r7, #8
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}

08014672 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8014672:	b580      	push	{r7, lr}
 8014674:	b090      	sub	sp, #64	; 0x40
 8014676:	af02      	add	r7, sp, #8
 8014678:	60f8      	str	r0, [r7, #12]
 801467a:	60b9      	str	r1, [r7, #8]
 801467c:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 801467e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014682:	68b9      	ldr	r1, [r7, #8]
 8014684:	4618      	mov	r0, r3
 8014686:	f000 f82c 	bl	80146e2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 801468a:	687a      	ldr	r2, [r7, #4]
 801468c:	68b9      	ldr	r1, [r7, #8]
 801468e:	68f8      	ldr	r0, [r7, #12]
 8014690:	f000 f85e 	bl	8014750 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8014694:	f107 0320 	add.w	r3, r7, #32
 8014698:	68f9      	ldr	r1, [r7, #12]
 801469a:	4618      	mov	r0, r3
 801469c:	f7fc fed2 	bl	8011444 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80146a0:	68f8      	ldr	r0, [r7, #12]
 80146a2:	f000 f89f 	bl	80147e4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>
 80146a6:	4603      	mov	r3, r0
 80146a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80146ac:	f107 0120 	add.w	r1, r7, #32
 80146b0:	f107 0010 	add.w	r0, r7, #16
 80146b4:	9300      	str	r3, [sp, #0]
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f000 f89f 	bl	80147fa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80146bc:	f107 0310 	add.w	r3, r7, #16
 80146c0:	4618      	mov	r0, r3
 80146c2:	f000 f8b4 	bl	801482e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 80146c6:	f107 0320 	add.w	r3, r7, #32
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7fa f9a6 	bl	800ea1c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80146d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80146d4:	4618      	mov	r0, r3
 80146d6:	f7ff ffbf 	bl	8014658 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
}
 80146da:	bf00      	nop
 80146dc:	3738      	adds	r7, #56	; 0x38
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd80      	pop	{r7, pc}

080146e2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80146e2:	b580      	push	{r7, lr}
 80146e4:	b082      	sub	sp, #8
 80146e6:	af00      	add	r7, sp, #0
 80146e8:	6078      	str	r0, [r7, #4]
 80146ea:	6039      	str	r1, [r7, #0]
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	6839      	ldr	r1, [r7, #0]
 80146f0:	4618      	mov	r0, r3
 80146f2:	f000 f8a7 	bl	8014844 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	4618      	mov	r0, r3
 80146fa:	3708      	adds	r7, #8
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}

08014700 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8014700:	b480      	push	{r7}
 8014702:	b083      	sub	sp, #12
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	4618      	mov	r0, r3
 801470c:	370c      	adds	r7, #12
 801470e:	46bd      	mov	sp, r7
 8014710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014714:	4770      	bx	lr

08014716 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8014716:	b580      	push	{r7, lr}
 8014718:	b082      	sub	sp, #8
 801471a:	af00      	add	r7, sp, #0
 801471c:	6078      	str	r0, [r7, #4]
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	4618      	mov	r0, r3
 8014724:	f7f0 fa81 	bl	8004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014728:	4603      	mov	r3, r0
 801472a:	4618      	mov	r0, r3
 801472c:	3708      	adds	r7, #8
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}

08014732 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8014732:	b580      	push	{r7, lr}
 8014734:	b082      	sub	sp, #8
 8014736:	af00      	add	r7, sp, #0
 8014738:	6078      	str	r0, [r7, #4]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	685b      	ldr	r3, [r3, #4]
 801473e:	4618      	mov	r0, r3
 8014740:	f7f0 f8a6 	bl	8004890 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8014744:	4603      	mov	r3, r0
 8014746:	4618      	mov	r0, r3
 8014748:	3708      	adds	r7, #8
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}
	...

08014750 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8014750:	b580      	push	{r7, lr}
 8014752:	b086      	sub	sp, #24
 8014754:	af00      	add	r7, sp, #0
 8014756:	60f8      	str	r0, [r7, #12]
 8014758:	60b9      	str	r1, [r7, #8]
 801475a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 801475c:	68b8      	ldr	r0, [r7, #8]
 801475e:	f7ff ffda 	bl	8014716 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>
 8014762:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8014764:	68b8      	ldr	r0, [r7, #8]
 8014766:	f7ff ffe4 	bl	8014732 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>
 801476a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	4618      	mov	r0, r3
 8014770:	f7f0 fa5b 	bl	8004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014774:	4602      	mov	r2, r0
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	4293      	cmp	r3, r2
 801477a:	d107      	bne.n	801478c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	4618      	mov	r0, r3
 8014780:	f7f0 fa48 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014784:	4602      	mov	r2, r0
 8014786:	693b      	ldr	r3, [r7, #16]
 8014788:	4293      	cmp	r3, r2
 801478a:	d001      	beq.n	8014790 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 801478c:	2301      	movs	r3, #1
 801478e:	e000      	b.n	8014792 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8014790:	2300      	movs	r3, #0
 8014792:	2b00      	cmp	r3, #0
 8014794:	d005      	beq.n	80147a2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	693a      	ldr	r2, [r7, #16]
 801479a:	6979      	ldr	r1, [r7, #20]
 801479c:	4618      	mov	r0, r3
 801479e:	f7ff fe8b 	bl	80144b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7f0 fa40 	bl	8004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80147aa:	4602      	mov	r2, r0
 80147ac:	697b      	ldr	r3, [r7, #20]
 80147ae:	4293      	cmp	r3, r2
 80147b0:	d107      	bne.n	80147c2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7f0 fa2d 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80147ba:	4602      	mov	r2, r0
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	4293      	cmp	r3, r2
 80147c0:	d006      	beq.n	80147d0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80147c2:	4b05      	ldr	r3, [pc, #20]	; (80147d8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80147c4:	4a05      	ldr	r2, [pc, #20]	; (80147dc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80147c6:	f240 21fd 	movw	r1, #765	; 0x2fd
 80147ca:	4805      	ldr	r0, [pc, #20]	; (80147e0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80147cc:	f009 f9ea 	bl	801dba4 <__assert_func>
}
 80147d0:	bf00      	nop
 80147d2:	3718      	adds	r7, #24
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}
 80147d8:	08022084 	.word	0x08022084
 80147dc:	080294fc 	.word	0x080294fc
 80147e0:	08022198 	.word	0x08022198

080147e4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 80147e4:	b480      	push	{r7}
 80147e6:	b083      	sub	sp, #12
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	4618      	mov	r0, r3
 80147f0:	370c      	adds	r7, #12
 80147f2:	46bd      	mov	sp, r7
 80147f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f8:	4770      	bx	lr

080147fa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80147fa:	b480      	push	{r7}
 80147fc:	b085      	sub	sp, #20
 80147fe:	af00      	add	r7, sp, #0
 8014800:	60f8      	str	r0, [r7, #12]
 8014802:	60b9      	str	r1, [r7, #8]
 8014804:	607a      	str	r2, [r7, #4]
 8014806:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	68ba      	ldr	r2, [r7, #8]
 801480c:	601a      	str	r2, [r3, #0]
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	687a      	ldr	r2, [r7, #4]
 8014812:	605a      	str	r2, [r3, #4]
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	683a      	ldr	r2, [r7, #0]
 8014818:	609a      	str	r2, [r3, #8]
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	69ba      	ldr	r2, [r7, #24]
 801481e:	60da      	str	r2, [r3, #12]
  }
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	4618      	mov	r0, r3
 8014824:	3714      	adds	r7, #20
 8014826:	46bd      	mov	sp, r7
 8014828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482c:	4770      	bx	lr

0801482e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801482e:	b580      	push	{r7, lr}
 8014830:	b082      	sub	sp, #8
 8014832:	af00      	add	r7, sp, #0
 8014834:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f000 f839 	bl	80148ae <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 801483c:	bf00      	nop
 801483e:	3708      	adds	r7, #8
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}

08014844 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8014844:	b580      	push	{r7, lr}
 8014846:	b082      	sub	sp, #8
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 801484e:	6878      	ldr	r0, [r7, #4]
 8014850:	f000 f854 	bl	80148fc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8014854:	6838      	ldr	r0, [r7, #0]
 8014856:	f000 f839 	bl	80148cc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 801485a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8014860:	6838      	ldr	r0, [r7, #0]
 8014862:	f000 f83f 	bl	80148e4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>
 8014866:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	605a      	str	r2, [r3, #4]
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8014876:	4619      	mov	r1, r3
 8014878:	4610      	mov	r0, r2
 801487a:	f7fc fde3 	bl	8011444 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8014888:	4619      	mov	r1, r3
 801488a:	4610      	mov	r0, r2
 801488c:	f7f2 fca2 	bl	80071d4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8014890:	6838      	ldr	r0, [r7, #0]
 8014892:	f000 f81b 	bl	80148cc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 8014896:	4603      	mov	r3, r0
 8014898:	4618      	mov	r0, r3
 801489a:	f7f0 f9bb 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801489e:	4602      	mov	r2, r0
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	611a      	str	r2, [r3, #16]
  }
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	4618      	mov	r0, r3
 80148a8:	3708      	adds	r7, #8
 80148aa:	46bd      	mov	sp, r7
 80148ac:	bd80      	pop	{r7, pc}

080148ae <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80148ae:	b580      	push	{r7, lr}
 80148b0:	b082      	sub	sp, #8
 80148b2:	af00      	add	r7, sp, #0
 80148b4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80148b6:	2100      	movs	r1, #0
 80148b8:	6878      	ldr	r0, [r7, #4]
 80148ba:	f000 f82a 	bl	8014912 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f000 f84a 	bl	8014958 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 80148c4:	bf00      	nop
 80148c6:	3708      	adds	r7, #8
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}

080148cc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80148cc:	b480      	push	{r7}
 80148ce:	b083      	sub	sp, #12
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	4618      	mov	r0, r3
 80148da:	370c      	adds	r7, #12
 80148dc:	46bd      	mov	sp, r7
 80148de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e2:	4770      	bx	lr

080148e4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80148e4:	b480      	push	{r7}
 80148e6:	b083      	sub	sp, #12
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	685b      	ldr	r3, [r3, #4]
 80148f0:	4618      	mov	r0, r3
 80148f2:	370c      	adds	r7, #12
 80148f4:	46bd      	mov	sp, r7
 80148f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fa:	4770      	bx	lr

080148fc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80148fc:	b480      	push	{r7}
 80148fe:	b083      	sub	sp, #12
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	4618      	mov	r0, r3
 8014908:	370c      	adds	r7, #12
 801490a:	46bd      	mov	sp, r7
 801490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014910:	4770      	bx	lr

08014912 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8014912:	b5b0      	push	{r4, r5, r7, lr}
 8014914:	b084      	sub	sp, #16
 8014916:	af00      	add	r7, sp, #0
 8014918:	6078      	str	r0, [r7, #4]
 801491a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	689c      	ldr	r4, [r3, #8]
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	6839      	ldr	r1, [r7, #0]
 8014926:	4618      	mov	r0, r3
 8014928:	f000 f825 	bl	8014976 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>
 801492c:	4605      	mov	r5, r0
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	685b      	ldr	r3, [r3, #4]
 8014932:	6839      	ldr	r1, [r7, #0]
 8014934:	4618      	mov	r0, r3
 8014936:	f000 f82e 	bl	8014996 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 801493a:	eef0 7a40 	vmov.f32	s15, s0
 801493e:	edc7 7a03 	vstr	s15, [r7, #12]
 8014942:	f107 030c 	add.w	r3, r7, #12
 8014946:	461a      	mov	r2, r3
 8014948:	4629      	mov	r1, r5
 801494a:	4620      	mov	r0, r4
 801494c:	f7f3 fb4a 	bl	8007fe4 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8014950:	bf00      	nop
 8014952:	3710      	adds	r7, #16
 8014954:	46bd      	mov	sp, r7
 8014956:	bdb0      	pop	{r4, r5, r7, pc}

08014958 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014958:	b580      	push	{r7, lr}
 801495a:	b082      	sub	sp, #8
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014960:	2101      	movs	r1, #1
 8014962:	6878      	ldr	r0, [r7, #4]
 8014964:	f7ff ffd5 	bl	8014912 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f000 f84d 	bl	8014a08 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 801496e:	bf00      	nop
 8014970:	3708      	adds	r7, #8
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}

08014976 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8014976:	b480      	push	{r7}
 8014978:	b083      	sub	sp, #12
 801497a:	af00      	add	r7, sp, #0
 801497c:	6078      	str	r0, [r7, #4]
 801497e:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	681a      	ldr	r2, [r3, #0]
 8014984:	683b      	ldr	r3, [r7, #0]
 8014986:	009b      	lsls	r3, r3, #2
 8014988:	4413      	add	r3, r2
  }
 801498a:	4618      	mov	r0, r3
 801498c:	370c      	adds	r7, #12
 801498e:	46bd      	mov	sp, r7
 8014990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014994:	4770      	bx	lr

08014996 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 8014996:	b580      	push	{r7, lr}
 8014998:	b0a4      	sub	sp, #144	; 0x90
 801499a:	af00      	add	r7, sp, #0
 801499c:	6078      	str	r0, [r7, #4]
 801499e:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 80149a0:	2300      	movs	r3, #0
 80149a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	6819      	ldr	r1, [r3, #0]
 80149b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80149b4:	2200      	movs	r2, #0
 80149b6:	4618      	mov	r0, r3
 80149b8:	f000 f835 	bl	8014a26 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>
 80149bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80149c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80149c4:	4611      	mov	r1, r2
 80149c6:	4618      	mov	r0, r3
 80149c8:	f000 f840 	bl	8014a4c <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	6859      	ldr	r1, [r3, #4]
 80149d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80149d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80149d8:	4618      	mov	r0, r3
 80149da:	f7f7 f94a 	bl	800bc72 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 80149de:	f107 030c 	add.w	r3, r7, #12
 80149e2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80149e6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80149ea:	4618      	mov	r0, r3
 80149ec:	f000 f83f 	bl	8014a6e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 80149f0:	f107 030c 	add.w	r3, r7, #12
 80149f4:	4618      	mov	r0, r3
 80149f6:	f000 f868 	bl	8014aca <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>
 80149fa:	eef0 7a40 	vmov.f32	s15, s0
  }
 80149fe:	eeb0 0a67 	vmov.f32	s0, s15
 8014a02:	3790      	adds	r7, #144	; 0x90
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}

08014a08 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b082      	sub	sp, #8
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014a10:	2102      	movs	r1, #2
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f7ff ff7d 	bl	8014912 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f000 f871 	bl	8014b00 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 8014a1e:	bf00      	nop
 8014a20:	3708      	adds	r7, #8
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}

08014a26 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>:
ConstRowXpr row(Index i) const
 8014a26:	b580      	push	{r7, lr}
 8014a28:	b084      	sub	sp, #16
 8014a2a:	af00      	add	r7, sp, #0
 8014a2c:	60f8      	str	r0, [r7, #12]
 8014a2e:	60b9      	str	r1, [r7, #8]
 8014a30:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 8014a32:	68b8      	ldr	r0, [r7, #8]
 8014a34:	f7f0 fe12 	bl	800565c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	687a      	ldr	r2, [r7, #4]
 8014a3c:	4619      	mov	r1, r3
 8014a3e:	68f8      	ldr	r0, [r7, #12]
 8014a40:	f000 f868 	bl	8014b14 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>
}
 8014a44:	68f8      	ldr	r0, [r7, #12]
 8014a46:	3710      	adds	r7, #16
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}

08014a4c <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b082      	sub	sp, #8
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
 8014a54:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8014a56:	6838      	ldr	r0, [r7, #0]
 8014a58:	f000 f886 	bl	8014b68 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	4619      	mov	r1, r3
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f000 f8a4 	bl	8014bae <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>
}
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	3708      	adds	r7, #8
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}

08014a6e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8014a6e:	b5b0      	push	{r4, r5, r7, lr}
 8014a70:	b086      	sub	sp, #24
 8014a72:	af00      	add	r7, sp, #0
 8014a74:	60f8      	str	r0, [r7, #12]
 8014a76:	60b9      	str	r1, [r7, #8]
 8014a78:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8014a7a:	68b8      	ldr	r0, [r7, #8]
 8014a7c:	f000 f8ae 	bl	8014bdc <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>
 8014a80:	4604      	mov	r4, r0
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f7f7 fec4 	bl	800c810 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 8014a88:	4605      	mov	r5, r0
 8014a8a:	f107 0314 	add.w	r3, r7, #20
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f7f0 f9aa 	bl	8004de8 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8014a94:	f107 0314 	add.w	r3, r7, #20
 8014a98:	462a      	mov	r2, r5
 8014a9a:	4621      	mov	r1, r4
 8014a9c:	68f8      	ldr	r0, [r7, #12]
 8014a9e:	f000 f8db 	bl	8014c58 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 8014aa2:	68f8      	ldr	r0, [r7, #12]
 8014aa4:	3718      	adds	r7, #24
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bdb0      	pop	{r4, r5, r7, pc}

08014aaa <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8014aaa:	b580      	push	{r7, lr}
 8014aac:	b082      	sub	sp, #8
 8014aae:	af00      	add	r7, sp, #0
 8014ab0:	6078      	str	r0, [r7, #4]
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f000 f92e 	bl	8014d14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	4618      	mov	r0, r3
 8014abc:	f000 f935 	bl	8014d2a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	3708      	adds	r7, #8
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd80      	pop	{r7, pc}

08014aca <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8014aca:	b590      	push	{r4, r7, lr}
 8014acc:	b085      	sub	sp, #20
 8014ace:	af00      	add	r7, sp, #0
 8014ad0:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	f000 f91e 	bl	8014d14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014ad8:	4604      	mov	r4, r0
 8014ada:	f107 030c 	add.w	r3, r7, #12
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7f0 fc79 	bl	80053d6 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8014ae4:	f107 030c 	add.w	r3, r7, #12
 8014ae8:	4619      	mov	r1, r3
 8014aea:	4620      	mov	r0, r4
 8014aec:	f000 f9c4 	bl	8014e78 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8014af0:	eef0 7a40 	vmov.f32	s15, s0
 8014af4:	bf00      	nop
}
 8014af6:	eeb0 0a67 	vmov.f32	s0, s15
 8014afa:	3714      	adds	r7, #20
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd90      	pop	{r4, r7, pc}

08014b00 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8014b00:	b480      	push	{r7}
 8014b02:	b083      	sub	sp, #12
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
 8014b08:	bf00      	nop
 8014b0a:	370c      	adds	r7, #12
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b12:	4770      	bx	lr

08014b14 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b084      	sub	sp, #16
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	60f8      	str	r0, [r7, #12]
 8014b1c:	60b9      	str	r1, [r7, #8]
 8014b1e:	607a      	str	r2, [r7, #4]
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	687a      	ldr	r2, [r7, #4]
 8014b24:	68b9      	ldr	r1, [r7, #8]
 8014b26:	4618      	mov	r0, r3
 8014b28:	f000 f9ec 	bl	8014f04 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	db07      	blt.n	8014b42 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x2e>
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	4618      	mov	r0, r3
 8014b36:	f7f0 f878 	bl	8004c2a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014b3a:	4602      	mov	r2, r0
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	4293      	cmp	r3, r2
 8014b40:	db05      	blt.n	8014b4e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x3a>
 8014b42:	4b06      	ldr	r3, [pc, #24]	; (8014b5c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x48>)
 8014b44:	4a06      	ldr	r2, [pc, #24]	; (8014b60 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x4c>)
 8014b46:	2178      	movs	r1, #120	; 0x78
 8014b48:	4806      	ldr	r0, [pc, #24]	; (8014b64 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x50>)
 8014b4a:	f009 f82b 	bl	801dba4 <__assert_func>
 8014b4e:	bf00      	nop
    }
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	4618      	mov	r0, r3
 8014b54:	3710      	adds	r7, #16
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}
 8014b5a:	bf00      	nop
 8014b5c:	08024590 	.word	0x08024590
 8014b60:	08029610 	.word	0x08029610
 8014b64:	08024714 	.word	0x08024714

08014b68 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8014b68:	b480      	push	{r7}
 8014b6a:	b083      	sub	sp, #12
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	4618      	mov	r0, r3
 8014b74:	370c      	adds	r7, #12
 8014b76:	46bd      	mov	sp, r7
 8014b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7c:	4770      	bx	lr

08014b7e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
 8014b7e:	b580      	push	{r7, lr}
 8014b80:	b082      	sub	sp, #8
 8014b82:	af00      	add	r7, sp, #0
 8014b84:	6078      	str	r0, [r7, #4]
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	f000 f9cd 	bl	8014f26 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	4618      	mov	r0, r3
 8014b90:	3708      	adds	r7, #8
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}

08014b96 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8014b96:	b580      	push	{r7, lr}
 8014b98:	b082      	sub	sp, #8
 8014b9a:	af00      	add	r7, sp, #0
 8014b9c:	6078      	str	r0, [r7, #4]
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	f7ff ffed 	bl	8014b7e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	3708      	adds	r7, #8
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}

08014bae <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8014bae:	b5b0      	push	{r4, r5, r7, lr}
 8014bb0:	b082      	sub	sp, #8
 8014bb2:	af00      	add	r7, sp, #0
 8014bb4:	6078      	str	r0, [r7, #4]
 8014bb6:	6039      	str	r1, [r7, #0]
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	f7ff ffec 	bl	8014b96 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>
 8014bbe:	687a      	ldr	r2, [r7, #4]
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	4614      	mov	r4, r2
 8014bc4:	461d      	mov	r5, r3
 8014bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014bca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014bce:	e884 0003 	stmia.w	r4, {r0, r1}
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	3708      	adds	r7, #8
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bdb0      	pop	{r4, r5, r7, pc}

08014bdc <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>:
 8014bdc:	b480      	push	{r7}
 8014bde:	b083      	sub	sp, #12
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	4618      	mov	r0, r3
 8014be8:	370c      	adds	r7, #12
 8014bea:	46bd      	mov	sp, r7
 8014bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf0:	4770      	bx	lr

08014bf2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
 8014bf2:	b580      	push	{r7, lr}
 8014bf4:	b082      	sub	sp, #8
 8014bf6:	af00      	add	r7, sp, #0
 8014bf8:	6078      	str	r0, [r7, #4]
 8014bfa:	6878      	ldr	r0, [r7, #4]
 8014bfc:	f000 f99e 	bl	8014f3c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	4618      	mov	r0, r3
 8014c04:	3708      	adds	r7, #8
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}

08014c0a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8014c0a:	b580      	push	{r7, lr}
 8014c0c:	b082      	sub	sp, #8
 8014c0e:	af00      	add	r7, sp, #0
 8014c10:	6078      	str	r0, [r7, #4]
 8014c12:	6878      	ldr	r0, [r7, #4]
 8014c14:	f7ff ffed 	bl	8014bf2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3708      	adds	r7, #8
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}

08014c22 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8014c22:	b580      	push	{r7, lr}
 8014c24:	b082      	sub	sp, #8
 8014c26:	af00      	add	r7, sp, #0
 8014c28:	6078      	str	r0, [r7, #4]
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f000 f990 	bl	8014f52 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>
 8014c32:	4603      	mov	r3, r0
 8014c34:	4618      	mov	r0, r3
 8014c36:	3708      	adds	r7, #8
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}

08014c3c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b082      	sub	sp, #8
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	4618      	mov	r0, r3
 8014c48:	f000 f98e 	bl	8014f68 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	4618      	mov	r0, r3
 8014c50:	3708      	adds	r7, #8
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
	...

08014c58 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8014c58:	b5b0      	push	{r4, r5, r7, lr}
 8014c5a:	b084      	sub	sp, #16
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	60f8      	str	r0, [r7, #12]
 8014c60:	60b9      	str	r1, [r7, #8]
 8014c62:	607a      	str	r2, [r7, #4]
 8014c64:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8014c66:	68f8      	ldr	r0, [r7, #12]
 8014c68:	f7ff ffcf 	bl	8014c0a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8014c6c:	68fa      	ldr	r2, [r7, #12]
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	4614      	mov	r4, r2
 8014c72:	461d      	mov	r5, r3
 8014c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014c7c:	e884 0003 	stmia.w	r4, {r0, r1}
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	f103 0218 	add.w	r2, r3, #24
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	4614      	mov	r4, r2
 8014c8a:	461d      	mov	r5, r3
 8014c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014c94:	e884 0003 	stmia.w	r4, {r0, r1}
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	3330      	adds	r3, #48	; 0x30
 8014c9c:	6839      	ldr	r1, [r7, #0]
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	f7f0 f92c 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8014ca4:	68b8      	ldr	r0, [r7, #8]
 8014ca6:	f7ff ffbc 	bl	8014c22 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 8014caa:	4604      	mov	r4, r0
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7f7 fdd1 	bl	800c856 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	429c      	cmp	r4, r3
 8014cb8:	d10a      	bne.n	8014cd0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 8014cba:	68b8      	ldr	r0, [r7, #8]
 8014cbc:	f7ff ffbe 	bl	8014c3c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 8014cc0:	4604      	mov	r4, r0
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f7f7 fdd1 	bl	800c86c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	429c      	cmp	r4, r3
 8014cce:	d005      	beq.n	8014cdc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 8014cd0:	4b05      	ldr	r3, [pc, #20]	; (8014ce8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 8014cd2:	4a06      	ldr	r2, [pc, #24]	; (8014cec <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 8014cd4:	2174      	movs	r1, #116	; 0x74
 8014cd6:	4806      	ldr	r0, [pc, #24]	; (8014cf0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 8014cd8:	f008 ff64 	bl	801dba4 <__assert_func>
    }
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	4618      	mov	r0, r3
 8014ce0:	3710      	adds	r7, #16
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8014ce6:	bf00      	nop
 8014ce8:	0801fa0c 	.word	0x0801fa0c
 8014cec:	080296ec 	.word	0x080296ec
 8014cf0:	0801fc70 	.word	0x0801fc70

08014cf4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b082      	sub	sp, #8
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	f000 f809 	bl	8014d14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014d02:	4603      	mov	r3, r0
 8014d04:	4618      	mov	r0, r3
 8014d06:	f000 f93a 	bl	8014f7e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	3708      	adds	r7, #8
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}

08014d14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8014d14:	b480      	push	{r7}
 8014d16:	b083      	sub	sp, #12
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	4618      	mov	r0, r3
 8014d20:	370c      	adds	r7, #12
 8014d22:	46bd      	mov	sp, r7
 8014d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d28:	4770      	bx	lr

08014d2a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8014d2a:	b580      	push	{r7, lr}
 8014d2c:	b082      	sub	sp, #8
 8014d2e:	af00      	add	r7, sp, #0
 8014d30:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	4618      	mov	r0, r3
 8014d36:	f7ff ff74 	bl	8014c22 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 8014d3a:	4603      	mov	r3, r0
    }
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3708      	adds	r7, #8
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}

08014d44 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b082      	sub	sp, #8
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f000 f948 	bl	8014fe2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	4618      	mov	r0, r3
 8014d56:	3708      	adds	r7, #8
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	bd80      	pop	{r7, pc}

08014d5c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b082      	sub	sp, #8
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7ff ffec 	bl	8014d44 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	4618      	mov	r0, r3
 8014d70:	3708      	adds	r7, #8
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}

08014d76 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8014d76:	b580      	push	{r7, lr}
 8014d78:	b082      	sub	sp, #8
 8014d7a:	af00      	add	r7, sp, #0
 8014d7c:	6078      	str	r0, [r7, #4]
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	4618      	mov	r0, r3
 8014d82:	f7ff ffeb 	bl	8014d5c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3708      	adds	r7, #8
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}

08014d90 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<const T>
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b082      	sub	sp, #8
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	f7ff ffeb 	bl	8014d76 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	4618      	mov	r0, r3
 8014da4:	3708      	adds	r7, #8
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bd80      	pop	{r7, pc}

08014daa <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8014daa:	b580      	push	{r7, lr}
 8014dac:	b082      	sub	sp, #8
 8014dae:	af00      	add	r7, sp, #0
 8014db0:	6078      	str	r0, [r7, #4]
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	4618      	mov	r0, r3
 8014db6:	f7ff ffeb 	bl	8014d90 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f000 f906 	bl	8014fcc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	3708      	adds	r7, #8
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd80      	pop	{r7, pc}

08014dca <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8014dca:	b580      	push	{r7, lr}
 8014dcc:	b082      	sub	sp, #8
 8014dce:	af00      	add	r7, sp, #0
 8014dd0:	6078      	str	r0, [r7, #4]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	f7ff ffe8 	bl	8014daa <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3708      	adds	r7, #8
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}

08014de4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator<const T>
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b082      	sub	sp, #8
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	4618      	mov	r0, r3
 8014df0:	f7ff ffeb 	bl	8014dca <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	4618      	mov	r0, r3
 8014df8:	3708      	adds	r7, #8
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}

08014dfe <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 8014dfe:	b580      	push	{r7, lr}
 8014e00:	b082      	sub	sp, #8
 8014e02:	af00      	add	r7, sp, #0
 8014e04:	6078      	str	r0, [r7, #4]
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	330c      	adds	r3, #12
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7f7 fdd6 	bl	800c9bc <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	3304      	adds	r3, #4
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7ff ffe5 	bl	8014de4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3708      	adds	r7, #8
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}

08014e24 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b082      	sub	sp, #8
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f7ff ffe5 	bl	8014dfe <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f000 f8be 	bl	8014fb6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	3708      	adds	r7, #8
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}

08014e44 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b082      	sub	sp, #8
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f7ff ffe8 	bl	8014e24 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	4618      	mov	r0, r3
 8014e58:	3708      	adds	r7, #8
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}

08014e5e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8014e5e:	b580      	push	{r7, lr}
 8014e60:	b082      	sub	sp, #8
 8014e62:	af00      	add	r7, sp, #0
 8014e64:	6078      	str	r0, [r7, #4]
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f7ff ffeb 	bl	8014e44 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	4618      	mov	r0, r3
 8014e72:	3708      	adds	r7, #8
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}

08014e78 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	ed2d 8b02 	vpush	{d8}
 8014e7e:	b088      	sub	sp, #32
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f7ff fe0f 	bl	8014aaa <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	dd05      	ble.n	8014e9e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f7ff ff2e 	bl	8014cf4 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	dc06      	bgt.n	8014eac <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8014e9e:	4b16      	ldr	r3, [pc, #88]	; (8014ef8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8014ea0:	4a16      	ldr	r2, [pc, #88]	; (8014efc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8014ea2:	f240 119b 	movw	r1, #411	; 0x19b
 8014ea6:	4816      	ldr	r0, [pc, #88]	; (8014f00 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8014ea8:	f008 fe7c 	bl	801dba4 <__assert_func>
 8014eac:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f7ff ff30 	bl	8014d14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014eb4:	4602      	mov	r2, r0
 8014eb6:	f107 030c 	add.w	r3, r7, #12
 8014eba:	4611      	mov	r1, r2
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f000 f86b 	bl	8014f98 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8014ec2:	6878      	ldr	r0, [r7, #4]
 8014ec4:	f7ff ff26 	bl	8014d14 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014ec8:	4602      	mov	r2, r0
 8014eca:	f107 030c 	add.w	r3, r7, #12
 8014ece:	6839      	ldr	r1, [r7, #0]
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f000 f891 	bl	8014ff8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 8014ed6:	eeb0 8a40 	vmov.f32	s16, s0
 8014eda:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8014edc:	f107 030c 	add.w	r3, r7, #12
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f7ff ffbc 	bl	8014e5e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8014ee6:	eef0 7a48 	vmov.f32	s15, s16
}
 8014eea:	eeb0 0a67 	vmov.f32	s0, s15
 8014eee:	3720      	adds	r7, #32
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	ecbd 8b02 	vpop	{d8}
 8014ef6:	bd80      	pop	{r7, pc}
 8014ef8:	08024a8c 	.word	0x08024a8c
 8014efc:	08029934 	.word	0x08029934
 8014f00:	08024c98 	.word	0x08024c98

08014f04 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b084      	sub	sp, #16
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	60f8      	str	r0, [r7, #12]
 8014f0c:	60b9      	str	r1, [r7, #8]
 8014f0e:	607a      	str	r2, [r7, #4]
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	68b9      	ldr	r1, [r7, #8]
 8014f16:	4618      	mov	r0, r3
 8014f18:	f000 f87f 	bl	801501a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	4618      	mov	r0, r3
 8014f20:	3710      	adds	r7, #16
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}

08014f26 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014f26:	b480      	push	{r7}
 8014f28:	b083      	sub	sp, #12
 8014f2a:	af00      	add	r7, sp, #0
 8014f2c:	6078      	str	r0, [r7, #4]
    }
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	4618      	mov	r0, r3
 8014f32:	370c      	adds	r7, #12
 8014f34:	46bd      	mov	sp, r7
 8014f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3a:	4770      	bx	lr

08014f3c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014f3c:	b480      	push	{r7}
 8014f3e:	b083      	sub	sp, #12
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
    }
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	4618      	mov	r0, r3
 8014f48:	370c      	adds	r7, #12
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f50:	4770      	bx	lr

08014f52 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8014f52:	b580      	push	{r7, lr}
 8014f54:	b082      	sub	sp, #8
 8014f56:	af00      	add	r7, sp, #0
 8014f58:	6078      	str	r0, [r7, #4]
 8014f5a:	f7f1 fa6e 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8014f5e:	4603      	mov	r3, r0
 8014f60:	4618      	mov	r0, r3
 8014f62:	3708      	adds	r7, #8
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd80      	pop	{r7, pc}

08014f68 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b082      	sub	sp, #8
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
 8014f70:	f7f1 fa6b 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8014f74:	4603      	mov	r3, r0
 8014f76:	4618      	mov	r0, r3
 8014f78:	3708      	adds	r7, #8
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}

08014f7e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8014f7e:	b580      	push	{r7, lr}
 8014f80:	b082      	sub	sp, #8
 8014f82:	af00      	add	r7, sp, #0
 8014f84:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f7ff fe57 	bl	8014c3c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 8014f8e:	4603      	mov	r3, r0
    }
 8014f90:	4618      	mov	r0, r3
 8014f92:	3708      	adds	r7, #8
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}

08014f98 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b082      	sub	sp, #8
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
 8014fa0:	6039      	str	r1, [r7, #0]
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	6839      	ldr	r1, [r7, #0]
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f000 f86d 	bl	8015086 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	4618      	mov	r0, r3
 8014fb0:	3708      	adds	r7, #8
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}

08014fb6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8014fb6:	b480      	push	{r7}
 8014fb8:	b083      	sub	sp, #12
 8014fba:	af00      	add	r7, sp, #0
 8014fbc:	6078      	str	r0, [r7, #4]
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	370c      	adds	r7, #12
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fca:	4770      	bx	lr

08014fcc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
 8014fcc:	b480      	push	{r7}
 8014fce:	b083      	sub	sp, #12
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	370c      	adds	r7, #12
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe0:	4770      	bx	lr

08014fe2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
 8014fe2:	b480      	push	{r7}
 8014fe4:	b083      	sub	sp, #12
 8014fe6:	af00      	add	r7, sp, #0
 8014fe8:	6078      	str	r0, [r7, #4]
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	4618      	mov	r0, r3
 8014fee:	370c      	adds	r7, #12
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff6:	4770      	bx	lr

08014ff8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b084      	sub	sp, #16
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	60f8      	str	r0, [r7, #12]
 8015000:	60b9      	str	r1, [r7, #8]
 8015002:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8015004:	68b9      	ldr	r1, [r7, #8]
 8015006:	68f8      	ldr	r0, [r7, #12]
 8015008:	f000 f84c 	bl	80150a4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 801500c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015010:	eeb0 0a67 	vmov.f32	s0, s15
 8015014:	3710      	adds	r7, #16
 8015016:	46bd      	mov	sp, r7
 8015018:	bd80      	pop	{r7, pc}

0801501a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 801501a:	b5b0      	push	{r4, r5, r7, lr}
 801501c:	b084      	sub	sp, #16
 801501e:	af00      	add	r7, sp, #0
 8015020:	60f8      	str	r0, [r7, #12]
 8015022:	60b9      	str	r1, [r7, #8]
 8015024:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8015026:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8015028:	68bb      	ldr	r3, [r7, #8]
 801502a:	4618      	mov	r0, r3
 801502c:	f7fd f866 	bl	80120fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8015030:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8015032:	68b8      	ldr	r0, [r7, #8]
 8015034:	f7fd fa90 	bl	8012558 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015038:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	fb02 f303 	mul.w	r3, r2, r3
 8015040:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8015042:	441d      	add	r5, r3
 8015044:	68bb      	ldr	r3, [r7, #8]
 8015046:	4618      	mov	r0, r3
 8015048:	f7ef fde4 	bl	8004c14 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801504c:	4603      	mov	r3, r0
 801504e:	2201      	movs	r2, #1
 8015050:	4629      	mov	r1, r5
 8015052:	4620      	mov	r0, r4
 8015054:	f000 f856 	bl	8015104 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	68ba      	ldr	r2, [r7, #8]
 801505c:	609a      	str	r2, [r3, #8]
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	330c      	adds	r3, #12
 8015062:	6879      	ldr	r1, [r7, #4]
 8015064:	4618      	mov	r0, r3
 8015066:	f7f8 faab 	bl	800d5c0 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	3310      	adds	r3, #16
 801506e:	2100      	movs	r1, #0
 8015070:	4618      	mov	r0, r3
 8015072:	f7f8 fa31 	bl	800d4d8 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8015076:	68f8      	ldr	r0, [r7, #12]
 8015078:	f000 f882 	bl	8015180 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>
    }
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	4618      	mov	r0, r3
 8015080:	3710      	adds	r7, #16
 8015082:	46bd      	mov	sp, r7
 8015084:	bdb0      	pop	{r4, r5, r7, pc}

08015086 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8015086:	b580      	push	{r7, lr}
 8015088:	b082      	sub	sp, #8
 801508a:	af00      	add	r7, sp, #0
 801508c:	6078      	str	r0, [r7, #4]
 801508e:	6039      	str	r1, [r7, #0]
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	6839      	ldr	r1, [r7, #0]
 8015094:	4618      	mov	r0, r3
 8015096:	f000 f883 	bl	80151a0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	4618      	mov	r0, r3
 801509e:	3708      	adds	r7, #8
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}

080150a4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b084      	sub	sp, #16
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80150ae:	6839      	ldr	r1, [r7, #0]
 80150b0:	6878      	ldr	r0, [r7, #4]
 80150b2:	f000 f887 	bl	80151c4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 80150b6:	eef0 7a40 	vmov.f32	s15, s0
 80150ba:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80150be:	6839      	ldr	r1, [r7, #0]
 80150c0:	6878      	ldr	r0, [r7, #4]
 80150c2:	f000 f890 	bl	80151e6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 80150c6:	eef0 7a40 	vmov.f32	s15, s0
 80150ca:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80150ce:	f107 020c 	add.w	r2, r7, #12
 80150d2:	f107 0308 	add.w	r3, r7, #8
 80150d6:	4619      	mov	r1, r3
 80150d8:	6838      	ldr	r0, [r7, #0]
 80150da:	f7f3 fd74 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80150de:	eef0 7a40 	vmov.f32	s15, s0
  }
 80150e2:	eeb0 0a67 	vmov.f32	s0, s15
 80150e6:	3710      	adds	r7, #16
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}

080150ec <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b082      	sub	sp, #8
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
 80150f4:	6878      	ldr	r0, [r7, #4]
 80150f6:	f000 f89a 	bl	801522e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	4618      	mov	r0, r3
 80150fe:	3708      	adds	r7, #8
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}

08015104 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8015104:	b580      	push	{r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af00      	add	r7, sp, #0
 801510a:	60f8      	str	r0, [r7, #12]
 801510c:	60b9      	str	r1, [r7, #8]
 801510e:	607a      	str	r2, [r7, #4]
 8015110:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8015112:	68f8      	ldr	r0, [r7, #12]
 8015114:	f7ff ffea 	bl	80150ec <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	68ba      	ldr	r2, [r7, #8]
 801511c:	601a      	str	r2, [r3, #0]
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	3304      	adds	r3, #4
 8015122:	6879      	ldr	r1, [r7, #4]
 8015124:	4618      	mov	r0, r3
 8015126:	f7f1 f963 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	3305      	adds	r3, #5
 801512e:	6839      	ldr	r1, [r7, #0]
 8015130:	4618      	mov	r0, r3
 8015132:	f7f1 f943 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d011      	beq.n	8015160 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2b00      	cmp	r3, #0
 8015140:	db08      	blt.n	8015154 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2b01      	cmp	r3, #1
 8015146:	d105      	bne.n	8015154 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	2b00      	cmp	r3, #0
 801514c:	db02      	blt.n	8015154 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 801514e:	683b      	ldr	r3, [r7, #0]
 8015150:	2b03      	cmp	r3, #3
 8015152:	d005      	beq.n	8015160 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8015154:	4b07      	ldr	r3, [pc, #28]	; (8015174 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x70>)
 8015156:	4a08      	ldr	r2, [pc, #32]	; (8015178 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x74>)
 8015158:	21b0      	movs	r1, #176	; 0xb0
 801515a:	4808      	ldr	r0, [pc, #32]	; (801517c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x78>)
 801515c:	f008 fd22 	bl	801dba4 <__assert_func>
      checkSanity<Derived>();
 8015160:	2100      	movs	r1, #0
 8015162:	68f8      	ldr	r0, [r7, #12]
 8015164:	f000 f86e 	bl	8015244 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	4618      	mov	r0, r3
 801516c:	3710      	adds	r7, #16
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}
 8015172:	bf00      	nop
 8015174:	08026130 	.word	0x08026130
 8015178:	08029af8 	.word	0x08029af8
 801517c:	080262e0 	.word	0x080262e0

08015180 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>:
    void init()
 8015180:	b580      	push	{r7, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	689b      	ldr	r3, [r3, #8]
 801518c:	4618      	mov	r0, r3
 801518e:	f7fd f9e3 	bl	8012558 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015192:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	615a      	str	r2, [r3, #20]
    }
 8015198:	bf00      	nop
 801519a:	3708      	adds	r7, #8
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}

080151a0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b082      	sub	sp, #8
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
 80151a8:	6039      	str	r1, [r7, #0]
 80151aa:	6878      	ldr	r0, [r7, #4]
 80151ac:	f000 f855 	bl	801525a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	6839      	ldr	r1, [r7, #0]
 80151b4:	4618      	mov	r0, r3
 80151b6:	f000 f85b 	bl	8015270 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	4618      	mov	r0, r3
 80151be:	3708      	adds	r7, #8
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}

080151c4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b082      	sub	sp, #8
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
 80151cc:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80151ce:	2200      	movs	r2, #0
 80151d0:	2100      	movs	r1, #0
 80151d2:	6878      	ldr	r0, [r7, #4]
 80151d4:	f000 f874 	bl	80152c0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80151d8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80151dc:	eeb0 0a67 	vmov.f32	s0, s15
 80151e0:	3708      	adds	r7, #8
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bd80      	pop	{r7, pc}

080151e6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80151e6:	b580      	push	{r7, lr}
 80151e8:	b084      	sub	sp, #16
 80151ea:	af00      	add	r7, sp, #0
 80151ec:	6078      	str	r0, [r7, #4]
 80151ee:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80151f0:	6839      	ldr	r1, [r7, #0]
 80151f2:	6878      	ldr	r0, [r7, #4]
 80151f4:	f000 f877 	bl	80152e6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 80151f8:	eef0 7a40 	vmov.f32	s15, s0
 80151fc:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8015200:	6839      	ldr	r1, [r7, #0]
 8015202:	6878      	ldr	r0, [r7, #4]
 8015204:	f000 f880 	bl	8015308 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 8015208:	eef0 7a40 	vmov.f32	s15, s0
 801520c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015210:	f107 020c 	add.w	r2, r7, #12
 8015214:	f107 0308 	add.w	r3, r7, #8
 8015218:	4619      	mov	r1, r3
 801521a:	6838      	ldr	r0, [r7, #0]
 801521c:	f7f3 fcd3 	bl	8008bc6 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8015220:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015224:	eeb0 0a67 	vmov.f32	s0, s15
 8015228:	3710      	adds	r7, #16
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}

0801522e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801522e:	b480      	push	{r7}
 8015230:	b083      	sub	sp, #12
 8015232:	af00      	add	r7, sp, #0
 8015234:	6078      	str	r0, [r7, #4]
    }
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	4618      	mov	r0, r3
 801523a:	370c      	adds	r7, #12
 801523c:	46bd      	mov	sp, r7
 801523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015242:	4770      	bx	lr

08015244 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8015244:	b480      	push	{r7}
 8015246:	b083      	sub	sp, #12
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
 801524c:	6039      	str	r1, [r7, #0]
    {}
 801524e:	bf00      	nop
 8015250:	370c      	adds	r7, #12
 8015252:	46bd      	mov	sp, r7
 8015254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015258:	4770      	bx	lr

0801525a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801525a:	b480      	push	{r7}
 801525c:	b083      	sub	sp, #12
 801525e:	af00      	add	r7, sp, #0
 8015260:	6078      	str	r0, [r7, #4]
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	4618      	mov	r0, r3
 8015266:	370c      	adds	r7, #12
 8015268:	46bd      	mov	sp, r7
 801526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526e:	4770      	bx	lr

08015270 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8015270:	b590      	push	{r4, r7, lr}
 8015272:	b083      	sub	sp, #12
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
 8015278:	6039      	str	r1, [r7, #0]
 801527a:	687c      	ldr	r4, [r7, #4]
 801527c:	6838      	ldr	r0, [r7, #0]
 801527e:	f000 f854 	bl	801532a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>
 8015282:	4603      	mov	r3, r0
 8015284:	4619      	mov	r1, r3
 8015286:	4620      	mov	r0, r4
 8015288:	f7ef fe38 	bl	8004efc <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	1d1c      	adds	r4, r3, #4
 8015290:	6838      	ldr	r0, [r7, #0]
 8015292:	f000 f856 	bl	8015342 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>
 8015296:	4603      	mov	r3, r0
 8015298:	4619      	mov	r1, r3
 801529a:	4620      	mov	r0, r4
 801529c:	f000 f868 	bl	8015370 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	f103 040c 	add.w	r4, r3, #12
 80152a6:	6838      	ldr	r0, [r7, #0]
 80152a8:	f000 f856 	bl	8015358 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>
 80152ac:	4603      	mov	r3, r0
 80152ae:	4619      	mov	r1, r3
 80152b0:	4620      	mov	r0, r4
 80152b2:	f7fa f995 	bl	800f5e0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	4618      	mov	r0, r3
 80152ba:	370c      	adds	r7, #12
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd90      	pop	{r4, r7, pc}

080152c0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b084      	sub	sp, #16
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	60f8      	str	r0, [r7, #12]
 80152c8:	60b9      	str	r1, [r7, #8]
 80152ca:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	68ba      	ldr	r2, [r7, #8]
 80152d0:	6879      	ldr	r1, [r7, #4]
 80152d2:	4618      	mov	r0, r3
 80152d4:	f000 f85b 	bl	801538e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 80152d8:	eef0 7a40 	vmov.f32	s15, s0
 80152dc:	eeb0 0a67 	vmov.f32	s0, s15
 80152e0:	3710      	adds	r7, #16
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd80      	pop	{r7, pc}

080152e6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80152e6:	b580      	push	{r7, lr}
 80152e8:	b082      	sub	sp, #8
 80152ea:	af00      	add	r7, sp, #0
 80152ec:	6078      	str	r0, [r7, #4]
 80152ee:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80152f0:	2201      	movs	r2, #1
 80152f2:	2100      	movs	r1, #0
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f7ff ffe3 	bl	80152c0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 80152fa:	eef0 7a40 	vmov.f32	s15, s0
  }
 80152fe:	eeb0 0a67 	vmov.f32	s0, s15
 8015302:	3708      	adds	r7, #8
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}

08015308 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015308:	b580      	push	{r7, lr}
 801530a:	b082      	sub	sp, #8
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
 8015310:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015312:	2202      	movs	r2, #2
 8015314:	2100      	movs	r1, #0
 8015316:	6878      	ldr	r0, [r7, #4]
 8015318:	f7ff ffd2 	bl	80152c0 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 801531c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015320:	eeb0 0a67 	vmov.f32	s0, s15
 8015324:	3708      	adds	r7, #8
 8015326:	46bd      	mov	sp, r7
 8015328:	bd80      	pop	{r7, pc}

0801532a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 801532a:	b480      	push	{r7}
 801532c:	b083      	sub	sp, #12
 801532e:	af00      	add	r7, sp, #0
 8015330:	6078      	str	r0, [r7, #4]
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	3330      	adds	r3, #48	; 0x30
 8015336:	4618      	mov	r0, r3
 8015338:	370c      	adds	r7, #12
 801533a:	46bd      	mov	sp, r7
 801533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015340:	4770      	bx	lr

08015342 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8015342:	b480      	push	{r7}
 8015344:	b083      	sub	sp, #12
 8015346:	af00      	add	r7, sp, #0
 8015348:	6078      	str	r0, [r7, #4]
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	4618      	mov	r0, r3
 801534e:	370c      	adds	r7, #12
 8015350:	46bd      	mov	sp, r7
 8015352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015356:	4770      	bx	lr

08015358 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8015358:	b480      	push	{r7}
 801535a:	b083      	sub	sp, #12
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	3318      	adds	r3, #24
 8015364:	4618      	mov	r0, r3
 8015366:	370c      	adds	r7, #12
 8015368:	46bd      	mov	sp, r7
 801536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536e:	4770      	bx	lr

08015370 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8015370:	b580      	push	{r7, lr}
 8015372:	b082      	sub	sp, #8
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
 8015378:	6039      	str	r1, [r7, #0]
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	6839      	ldr	r1, [r7, #0]
 801537e:	4618      	mov	r0, r3
 8015380:	f000 f835 	bl	80153ee <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	4618      	mov	r0, r3
 8015388:	3708      	adds	r7, #8
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}

0801538e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801538e:	b590      	push	{r4, r7, lr}
 8015390:	b087      	sub	sp, #28
 8015392:	af00      	add	r7, sp, #0
 8015394:	60f8      	str	r0, [r7, #12]
 8015396:	60b9      	str	r1, [r7, #8]
 8015398:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	4618      	mov	r0, r3
 801539e:	f000 f835 	bl	801540c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 80153a2:	4604      	mov	r4, r0
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	3304      	adds	r3, #4
 80153a8:	687a      	ldr	r2, [r7, #4]
 80153aa:	68b9      	ldr	r1, [r7, #8]
 80153ac:	4618      	mov	r0, r3
 80153ae:	f000 f838 	bl	8015422 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>
 80153b2:	eef0 7a40 	vmov.f32	s15, s0
 80153b6:	edc7 7a04 	vstr	s15, [r7, #16]
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	330c      	adds	r3, #12
 80153be:	687a      	ldr	r2, [r7, #4]
 80153c0:	68b9      	ldr	r1, [r7, #8]
 80153c2:	4618      	mov	r0, r3
 80153c4:	f7fa fd4e 	bl	800fe64 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 80153c8:	eef0 7a40 	vmov.f32	s15, s0
 80153cc:	edc7 7a05 	vstr	s15, [r7, #20]
 80153d0:	f107 0214 	add.w	r2, r7, #20
 80153d4:	f107 0310 	add.w	r3, r7, #16
 80153d8:	4619      	mov	r1, r3
 80153da:	4620      	mov	r0, r4
 80153dc:	f7f9 fc34 	bl	800ec48 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80153e0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80153e4:	eeb0 0a67 	vmov.f32	s0, s15
 80153e8:	371c      	adds	r7, #28
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd90      	pop	{r4, r7, pc}

080153ee <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 80153ee:	b580      	push	{r7, lr}
 80153f0:	b082      	sub	sp, #8
 80153f2:	af00      	add	r7, sp, #0
 80153f4:	6078      	str	r0, [r7, #4]
 80153f6:	6039      	str	r1, [r7, #0]
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	6839      	ldr	r1, [r7, #0]
 80153fc:	4618      	mov	r0, r3
 80153fe:	f000 f823 	bl	8015448 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	4618      	mov	r0, r3
 8015406:	3708      	adds	r7, #8
 8015408:	46bd      	mov	sp, r7
 801540a:	bd80      	pop	{r7, pc}

0801540c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 801540c:	b480      	push	{r7}
 801540e:	b083      	sub	sp, #12
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	4618      	mov	r0, r3
 8015418:	370c      	adds	r7, #12
 801541a:	46bd      	mov	sp, r7
 801541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015420:	4770      	bx	lr

08015422 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015422:	b580      	push	{r7, lr}
 8015424:	b084      	sub	sp, #16
 8015426:	af00      	add	r7, sp, #0
 8015428:	60f8      	str	r0, [r7, #12]
 801542a:	60b9      	str	r1, [r7, #8]
 801542c:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	68ba      	ldr	r2, [r7, #8]
 8015432:	6879      	ldr	r1, [r7, #4]
 8015434:	4618      	mov	r0, r3
 8015436:	f000 f81d 	bl	8015474 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>
 801543a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801543e:	eeb0 0a67 	vmov.f32	s0, s15
 8015442:	3710      	adds	r7, #16
 8015444:	46bd      	mov	sp, r7
 8015446:	bd80      	pop	{r7, pc}

08015448 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8015448:	b590      	push	{r4, r7, lr}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
 8015450:	6039      	str	r1, [r7, #0]
 8015452:	6878      	ldr	r0, [r7, #4]
 8015454:	f000 f83a 	bl	80154cc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015458:	687c      	ldr	r4, [r7, #4]
 801545a:	6838      	ldr	r0, [r7, #0]
 801545c:	f000 f82b 	bl	80154b6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>
 8015460:	4603      	mov	r3, r0
 8015462:	4619      	mov	r1, r3
 8015464:	4620      	mov	r0, r4
 8015466:	f000 f83c 	bl	80154e2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	4618      	mov	r0, r3
 801546e:	370c      	adds	r7, #12
 8015470:	46bd      	mov	sp, r7
 8015472:	bd90      	pop	{r4, r7, pc}

08015474 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015474:	b5b0      	push	{r4, r5, r7, lr}
 8015476:	b084      	sub	sp, #16
 8015478:	af00      	add	r7, sp, #0
 801547a:	60f8      	str	r0, [r7, #12]
 801547c:	60b9      	str	r1, [r7, #8]
 801547e:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	681c      	ldr	r4, [r3, #0]
 8015484:	68f8      	ldr	r0, [r7, #12]
 8015486:	f000 f83b 	bl	8015500 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>
 801548a:	4602      	mov	r2, r0
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	fb03 f502 	mul.w	r5, r3, r2
 8015492:	68f8      	ldr	r0, [r7, #12]
 8015494:	f000 f83f 	bl	8015516 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>
 8015498:	4602      	mov	r2, r0
 801549a:	68bb      	ldr	r3, [r7, #8]
 801549c:	fb02 f303 	mul.w	r3, r2, r3
 80154a0:	442b      	add	r3, r5
 80154a2:	009b      	lsls	r3, r3, #2
 80154a4:	4423      	add	r3, r4
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	ee07 3a90 	vmov	s15, r3
  }
 80154ac:	eeb0 0a67 	vmov.f32	s0, s15
 80154b0:	3710      	adds	r7, #16
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bdb0      	pop	{r4, r5, r7, pc}

080154b6 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 80154b6:	b480      	push	{r7}
 80154b8:	b083      	sub	sp, #12
 80154ba:	af00      	add	r7, sp, #0
 80154bc:	6078      	str	r0, [r7, #4]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	4618      	mov	r0, r3
 80154c2:	370c      	adds	r7, #12
 80154c4:	46bd      	mov	sp, r7
 80154c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ca:	4770      	bx	lr

080154cc <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80154cc:	b480      	push	{r7}
 80154ce:	b083      	sub	sp, #12
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	4618      	mov	r0, r3
 80154d8:	370c      	adds	r7, #12
 80154da:	46bd      	mov	sp, r7
 80154dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e0:	4770      	bx	lr

080154e2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80154e2:	b580      	push	{r7, lr}
 80154e4:	b082      	sub	sp, #8
 80154e6:	af00      	add	r7, sp, #0
 80154e8:	6078      	str	r0, [r7, #4]
 80154ea:	6039      	str	r1, [r7, #0]
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	6839      	ldr	r1, [r7, #0]
 80154f0:	4618      	mov	r0, r3
 80154f2:	f000 f81b 	bl	801552c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	4618      	mov	r0, r3
 80154fa:	3708      	adds	r7, #8
 80154fc:	46bd      	mov	sp, r7
 80154fe:	bd80      	pop	{r7, pc}

08015500 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8015500:	b580      	push	{r7, lr}
 8015502:	b082      	sub	sp, #8
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8015508:	f7f0 ff9f 	bl	800644a <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801550c:	4603      	mov	r3, r0
  }
 801550e:	4618      	mov	r0, r3
 8015510:	3708      	adds	r7, #8
 8015512:	46bd      	mov	sp, r7
 8015514:	bd80      	pop	{r7, pc}

08015516 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8015516:	b580      	push	{r7, lr}
 8015518:	b082      	sub	sp, #8
 801551a:	af00      	add	r7, sp, #0
 801551c:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 801551e:	f7f0 ff8c 	bl	800643a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8015522:	4603      	mov	r3, r0
  }
 8015524:	4618      	mov	r0, r3
 8015526:	3708      	adds	r7, #8
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}

0801552c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	6039      	str	r1, [r7, #0]
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	6839      	ldr	r1, [r7, #0]
 801553a:	4618      	mov	r0, r3
 801553c:	f000 f805 	bl	801554a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>
  }
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	4618      	mov	r0, r3
 8015544:	3708      	adds	r7, #8
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}

0801554a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 801554a:	b580      	push	{r7, lr}
 801554c:	b082      	sub	sp, #8
 801554e:	af00      	add	r7, sp, #0
 8015550:	6078      	str	r0, [r7, #4]
 8015552:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	6839      	ldr	r1, [r7, #0]
 8015558:	4618      	mov	r0, r3
 801555a:	f000 f80a 	bl	8015572 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 801555e:	683b      	ldr	r3, [r7, #0]
 8015560:	4618      	mov	r0, r3
 8015562:	f000 f830 	bl	80155c6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8015566:	bf00      	nop
  }
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	4618      	mov	r0, r3
 801556c:	3708      	adds	r7, #8
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}

08015572 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8015572:	b590      	push	{r4, r7, lr}
 8015574:	b083      	sub	sp, #12
 8015576:	af00      	add	r7, sp, #0
 8015578:	6078      	str	r0, [r7, #4]
 801557a:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f000 f84a 	bl	8015616 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	4618      	mov	r0, r3
 8015586:	f000 f81e 	bl	80155c6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 801558a:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	601a      	str	r2, [r3, #0]
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	1d1c      	adds	r4, r3, #4
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	4618      	mov	r0, r3
 8015598:	f000 f821 	bl	80155de <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>
 801559c:	4603      	mov	r3, r0
 801559e:	4619      	mov	r1, r3
 80155a0:	4620      	mov	r0, r4
 80155a2:	f7f0 ff25 	bl	80063f0 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	1d5c      	adds	r4, r3, #5
 80155aa:	683b      	ldr	r3, [r7, #0]
 80155ac:	4618      	mov	r0, r3
 80155ae:	f000 f824 	bl	80155fa <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>
 80155b2:	4603      	mov	r3, r0
 80155b4:	4619      	mov	r1, r3
 80155b6:	4620      	mov	r0, r4
 80155b8:	f7f0 ff00 	bl	80063bc <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	4618      	mov	r0, r3
 80155c0:	370c      	adds	r7, #12
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd90      	pop	{r4, r7, pc}

080155c6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80155c6:	b480      	push	{r7}
 80155c8:	b083      	sub	sp, #12
 80155ca:	af00      	add	r7, sp, #0
 80155cc:	6078      	str	r0, [r7, #4]
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	4618      	mov	r0, r3
 80155d4:	370c      	adds	r7, #12
 80155d6:	46bd      	mov	sp, r7
 80155d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155dc:	4770      	bx	lr

080155de <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80155de:	b580      	push	{r7, lr}
 80155e0:	b082      	sub	sp, #8
 80155e2:	af00      	add	r7, sp, #0
 80155e4:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	689b      	ldr	r3, [r3, #8]
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7fd fcf8 	bl	8012fe0 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 80155f0:	4603      	mov	r3, r0
    }
 80155f2:	4618      	mov	r0, r3
 80155f4:	3708      	adds	r7, #8
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bd80      	pop	{r7, pc}

080155fa <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80155fa:	b580      	push	{r7, lr}
 80155fc:	b082      	sub	sp, #8
 80155fe:	af00      	add	r7, sp, #0
 8015600:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	689b      	ldr	r3, [r3, #8]
 8015606:	4618      	mov	r0, r3
 8015608:	f7fc ffa6 	bl	8012558 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 801560c:	4603      	mov	r3, r0
    }
 801560e:	4618      	mov	r0, r3
 8015610:	3708      	adds	r7, #8
 8015612:	46bd      	mov	sp, r7
 8015614:	bd80      	pop	{r7, pc}

08015616 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015616:	b480      	push	{r7}
 8015618:	b083      	sub	sp, #12
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	4618      	mov	r0, r3
 8015622:	370c      	adds	r7, #12
 8015624:	46bd      	mov	sp, r7
 8015626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562a:	4770      	bx	lr

0801562c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 801562c:	b590      	push	{r4, r7, lr}
 801562e:	b083      	sub	sp, #12
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
 8015634:	6039      	str	r1, [r7, #0]
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2b01      	cmp	r3, #1
 801563a:	d141      	bne.n	80156c0 <_Z41__static_initialization_and_destruction_0ii+0x94>
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015642:	4293      	cmp	r3, r2
 8015644:	d13c      	bne.n	80156c0 <_Z41__static_initialization_and_destruction_0ii+0x94>
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 8015646:	4820      	ldr	r0, [pc, #128]	; (80156c8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8015648:	f7ee fa1b 	bl	8003a82 <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 801564c:	481f      	ldr	r0, [pc, #124]	; (80156cc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 801564e:	f7ee fa23 	bl	8003a98 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 8015652:	481e      	ldr	r0, [pc, #120]	; (80156cc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8015654:	f7ee fa2b 	bl	8003aae <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 8015658:	4621      	mov	r1, r4
 801565a:	481b      	ldr	r0, [pc, #108]	; (80156c8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 801565c:	f7ee fa32 	bl	8003ac4 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 8015660:	481b      	ldr	r0, [pc, #108]	; (80156d0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8015662:	f7eb fc77 	bl	8000f54 <_ZN5Eigen8internal5all_tC1Ev>
Matrix <float,3,3> A ;
 8015666:	481b      	ldr	r0, [pc, #108]	; (80156d4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8015668:	f7ee fa51 	bl	8003b0e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> P ;
 801566c:	481a      	ldr	r0, [pc, #104]	; (80156d8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801566e:	f7ee fa4e 	bl	8003b0e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> O ;
 8015672:	481a      	ldr	r0, [pc, #104]	; (80156dc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8015674:	f7ee fa4b 	bl	8003b0e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> I ;
 8015678:	4819      	ldr	r0, [pc, #100]	; (80156e0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 801567a:	f7ee fa48 	bl	8003b0e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,1,1> S ;
 801567e:	4819      	ldr	r0, [pc, #100]	; (80156e4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8015680:	f7ee fa54 	bl	8003b2c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> R ;
 8015684:	4818      	ldr	r0, [pc, #96]	; (80156e8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8015686:	f7ee fa51 	bl	8003b2c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> D ;
 801568a:	4818      	ldr	r0, [pc, #96]	; (80156ec <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 801568c:	f7ee fa4e 	bl	8003b2c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> Z ;
 8015690:	4817      	ldr	r0, [pc, #92]	; (80156f0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8015692:	f7ee fa4b 	bl	8003b2c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,3,1> K ;
 8015696:	4817      	ldr	r0, [pc, #92]	; (80156f4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8015698:	f7ee fa57 	bl	8003b4a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,1,3> C ;
 801569c:	4816      	ldr	r0, [pc, #88]	; (80156f8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 801569e:	f7ee fa63 	bl	8003b68 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>
Matrix <float,3,1> G ;
 80156a2:	4816      	ldr	r0, [pc, #88]	; (80156fc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80156a4:	f7ee fa51 	bl	8003b4a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,3,3> Q ;
 80156a8:	4815      	ldr	r0, [pc, #84]	; (8015700 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80156aa:	f7ee fa30 	bl	8003b0e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Vector3f X;
 80156ae:	4815      	ldr	r0, [pc, #84]	; (8015704 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80156b0:	f7ee fa4b 	bl	8003b4a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f X1;
 80156b4:	4814      	ldr	r0, [pc, #80]	; (8015708 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80156b6:	f7ee fa48 	bl	8003b4a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f B;
 80156ba:	4814      	ldr	r0, [pc, #80]	; (801570c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80156bc:	f7ee fa45 	bl	8003b4a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
}
 80156c0:	bf00      	nop
 80156c2:	370c      	adds	r7, #12
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd90      	pop	{r4, r7, pc}
 80156c8:	200000ec 	.word	0x200000ec
 80156cc:	2000062c 	.word	0x2000062c
 80156d0:	200000f0 	.word	0x200000f0
 80156d4:	20000440 	.word	0x20000440
 80156d8:	20000464 	.word	0x20000464
 80156dc:	20000488 	.word	0x20000488
 80156e0:	200004ac 	.word	0x200004ac
 80156e4:	200004d0 	.word	0x200004d0
 80156e8:	200004d4 	.word	0x200004d4
 80156ec:	200004d8 	.word	0x200004d8
 80156f0:	200004dc 	.word	0x200004dc
 80156f4:	200004e0 	.word	0x200004e0
 80156f8:	200004ec 	.word	0x200004ec
 80156fc:	200004f8 	.word	0x200004f8
 8015700:	20000504 	.word	0x20000504
 8015704:	20000528 	.word	0x20000528
 8015708:	20000534 	.word	0x20000534
 801570c:	20000540 	.word	0x20000540

08015710 <_GLOBAL__sub_I_hi2c1>:
 8015710:	b580      	push	{r7, lr}
 8015712:	af00      	add	r7, sp, #0
 8015714:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015718:	2001      	movs	r0, #1
 801571a:	f7ff ff87 	bl	801562c <_Z41__static_initialization_and_destruction_0ii>
 801571e:	bd80      	pop	{r7, pc}

08015720 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b082      	sub	sp, #8
 8015724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015726:	2300      	movs	r3, #0
 8015728:	607b      	str	r3, [r7, #4]
 801572a:	4b10      	ldr	r3, [pc, #64]	; (801576c <HAL_MspInit+0x4c>)
 801572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801572e:	4a0f      	ldr	r2, [pc, #60]	; (801576c <HAL_MspInit+0x4c>)
 8015730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015734:	6453      	str	r3, [r2, #68]	; 0x44
 8015736:	4b0d      	ldr	r3, [pc, #52]	; (801576c <HAL_MspInit+0x4c>)
 8015738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801573a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801573e:	607b      	str	r3, [r7, #4]
 8015740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8015742:	2300      	movs	r3, #0
 8015744:	603b      	str	r3, [r7, #0]
 8015746:	4b09      	ldr	r3, [pc, #36]	; (801576c <HAL_MspInit+0x4c>)
 8015748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801574a:	4a08      	ldr	r2, [pc, #32]	; (801576c <HAL_MspInit+0x4c>)
 801574c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015750:	6413      	str	r3, [r2, #64]	; 0x40
 8015752:	4b06      	ldr	r3, [pc, #24]	; (801576c <HAL_MspInit+0x4c>)
 8015754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801575a:	603b      	str	r3, [r7, #0]
 801575c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 801575e:	2007      	movs	r0, #7
 8015760:	f000 fd66 	bl	8016230 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015764:	bf00      	nop
 8015766:	3708      	adds	r7, #8
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}
 801576c:	40023800 	.word	0x40023800

08015770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b08c      	sub	sp, #48	; 0x30
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015778:	f107 031c 	add.w	r3, r7, #28
 801577c:	2200      	movs	r2, #0
 801577e:	601a      	str	r2, [r3, #0]
 8015780:	605a      	str	r2, [r3, #4]
 8015782:	609a      	str	r2, [r3, #8]
 8015784:	60da      	str	r2, [r3, #12]
 8015786:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	4a52      	ldr	r2, [pc, #328]	; (80158d8 <HAL_I2C_MspInit+0x168>)
 801578e:	4293      	cmp	r3, r2
 8015790:	d13d      	bne.n	801580e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015792:	2300      	movs	r3, #0
 8015794:	61bb      	str	r3, [r7, #24]
 8015796:	4b51      	ldr	r3, [pc, #324]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 8015798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801579a:	4a50      	ldr	r2, [pc, #320]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 801579c:	f043 0302 	orr.w	r3, r3, #2
 80157a0:	6313      	str	r3, [r2, #48]	; 0x30
 80157a2:	4b4e      	ldr	r3, [pc, #312]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 80157a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157a6:	f003 0302 	and.w	r3, r3, #2
 80157aa:	61bb      	str	r3, [r7, #24]
 80157ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80157ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80157b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80157b4:	2312      	movs	r3, #18
 80157b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80157b8:	2300      	movs	r3, #0
 80157ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80157bc:	2303      	movs	r3, #3
 80157be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80157c0:	2304      	movs	r3, #4
 80157c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80157c4:	f107 031c 	add.w	r3, r7, #28
 80157c8:	4619      	mov	r1, r3
 80157ca:	4845      	ldr	r0, [pc, #276]	; (80158e0 <HAL_I2C_MspInit+0x170>)
 80157cc:	f001 f982 	bl	8016ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80157d0:	2300      	movs	r3, #0
 80157d2:	617b      	str	r3, [r7, #20]
 80157d4:	4b41      	ldr	r3, [pc, #260]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 80157d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157d8:	4a40      	ldr	r2, [pc, #256]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 80157da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80157de:	6413      	str	r3, [r2, #64]	; 0x40
 80157e0:	4b3e      	ldr	r3, [pc, #248]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 80157e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80157e8:	617b      	str	r3, [r7, #20]
 80157ea:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80157ec:	2200      	movs	r2, #0
 80157ee:	2100      	movs	r1, #0
 80157f0:	201f      	movs	r0, #31
 80157f2:	f000 fd28 	bl	8016246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80157f6:	201f      	movs	r0, #31
 80157f8:	f000 fd41 	bl	801627e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80157fc:	2200      	movs	r2, #0
 80157fe:	2100      	movs	r1, #0
 8015800:	2020      	movs	r0, #32
 8015802:	f000 fd20 	bl	8016246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8015806:	2020      	movs	r0, #32
 8015808:	f000 fd39 	bl	801627e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 801580c:	e060      	b.n	80158d0 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	4a34      	ldr	r2, [pc, #208]	; (80158e4 <HAL_I2C_MspInit+0x174>)
 8015814:	4293      	cmp	r3, r2
 8015816:	d15b      	bne.n	80158d0 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015818:	2300      	movs	r3, #0
 801581a:	613b      	str	r3, [r7, #16]
 801581c:	4b2f      	ldr	r3, [pc, #188]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 801581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015820:	4a2e      	ldr	r2, [pc, #184]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 8015822:	f043 0304 	orr.w	r3, r3, #4
 8015826:	6313      	str	r3, [r2, #48]	; 0x30
 8015828:	4b2c      	ldr	r3, [pc, #176]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 801582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801582c:	f003 0304 	and.w	r3, r3, #4
 8015830:	613b      	str	r3, [r7, #16]
 8015832:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015834:	2300      	movs	r3, #0
 8015836:	60fb      	str	r3, [r7, #12]
 8015838:	4b28      	ldr	r3, [pc, #160]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 801583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801583c:	4a27      	ldr	r2, [pc, #156]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 801583e:	f043 0301 	orr.w	r3, r3, #1
 8015842:	6313      	str	r3, [r2, #48]	; 0x30
 8015844:	4b25      	ldr	r3, [pc, #148]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 8015846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015848:	f003 0301 	and.w	r3, r3, #1
 801584c:	60fb      	str	r3, [r7, #12]
 801584e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8015850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015856:	2312      	movs	r3, #18
 8015858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801585a:	2300      	movs	r3, #0
 801585c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801585e:	2303      	movs	r3, #3
 8015860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8015862:	2304      	movs	r3, #4
 8015864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015866:	f107 031c 	add.w	r3, r7, #28
 801586a:	4619      	mov	r1, r3
 801586c:	481e      	ldr	r0, [pc, #120]	; (80158e8 <HAL_I2C_MspInit+0x178>)
 801586e:	f001 f931 	bl	8016ad4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8015872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015878:	2312      	movs	r3, #18
 801587a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801587c:	2300      	movs	r3, #0
 801587e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015880:	2303      	movs	r3, #3
 8015882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8015884:	2304      	movs	r3, #4
 8015886:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015888:	f107 031c 	add.w	r3, r7, #28
 801588c:	4619      	mov	r1, r3
 801588e:	4817      	ldr	r0, [pc, #92]	; (80158ec <HAL_I2C_MspInit+0x17c>)
 8015890:	f001 f920 	bl	8016ad4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8015894:	2300      	movs	r3, #0
 8015896:	60bb      	str	r3, [r7, #8]
 8015898:	4b10      	ldr	r3, [pc, #64]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 801589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801589c:	4a0f      	ldr	r2, [pc, #60]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 801589e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80158a2:	6413      	str	r3, [r2, #64]	; 0x40
 80158a4:	4b0d      	ldr	r3, [pc, #52]	; (80158dc <HAL_I2C_MspInit+0x16c>)
 80158a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80158ac:	60bb      	str	r3, [r7, #8]
 80158ae:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80158b0:	2200      	movs	r2, #0
 80158b2:	2100      	movs	r1, #0
 80158b4:	2048      	movs	r0, #72	; 0x48
 80158b6:	f000 fcc6 	bl	8016246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80158ba:	2048      	movs	r0, #72	; 0x48
 80158bc:	f000 fcdf 	bl	801627e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80158c0:	2200      	movs	r2, #0
 80158c2:	2100      	movs	r1, #0
 80158c4:	2049      	movs	r0, #73	; 0x49
 80158c6:	f000 fcbe 	bl	8016246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80158ca:	2049      	movs	r0, #73	; 0x49
 80158cc:	f000 fcd7 	bl	801627e <HAL_NVIC_EnableIRQ>
}
 80158d0:	bf00      	nop
 80158d2:	3730      	adds	r7, #48	; 0x30
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}
 80158d8:	40005400 	.word	0x40005400
 80158dc:	40023800 	.word	0x40023800
 80158e0:	40020400 	.word	0x40020400
 80158e4:	40005c00 	.word	0x40005c00
 80158e8:	40020800 	.word	0x40020800
 80158ec:	40020000 	.word	0x40020000

080158f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b08c      	sub	sp, #48	; 0x30
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80158f8:	f107 031c 	add.w	r3, r7, #28
 80158fc:	2200      	movs	r2, #0
 80158fe:	601a      	str	r2, [r3, #0]
 8015900:	605a      	str	r2, [r3, #4]
 8015902:	609a      	str	r2, [r3, #8]
 8015904:	60da      	str	r2, [r3, #12]
 8015906:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015910:	d15d      	bne.n	80159ce <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8015912:	2300      	movs	r3, #0
 8015914:	61bb      	str	r3, [r7, #24]
 8015916:	4b47      	ldr	r3, [pc, #284]	; (8015a34 <HAL_TIM_Base_MspInit+0x144>)
 8015918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801591a:	4a46      	ldr	r2, [pc, #280]	; (8015a34 <HAL_TIM_Base_MspInit+0x144>)
 801591c:	f043 0301 	orr.w	r3, r3, #1
 8015920:	6413      	str	r3, [r2, #64]	; 0x40
 8015922:	4b44      	ldr	r3, [pc, #272]	; (8015a34 <HAL_TIM_Base_MspInit+0x144>)
 8015924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015926:	f003 0301 	and.w	r3, r3, #1
 801592a:	61bb      	str	r3, [r7, #24]
 801592c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801592e:	2300      	movs	r3, #0
 8015930:	617b      	str	r3, [r7, #20]
 8015932:	4b40      	ldr	r3, [pc, #256]	; (8015a34 <HAL_TIM_Base_MspInit+0x144>)
 8015934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015936:	4a3f      	ldr	r2, [pc, #252]	; (8015a34 <HAL_TIM_Base_MspInit+0x144>)
 8015938:	f043 0301 	orr.w	r3, r3, #1
 801593c:	6313      	str	r3, [r2, #48]	; 0x30
 801593e:	4b3d      	ldr	r3, [pc, #244]	; (8015a34 <HAL_TIM_Base_MspInit+0x144>)
 8015940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015942:	f003 0301 	and.w	r3, r3, #1
 8015946:	617b      	str	r3, [r7, #20]
 8015948:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 801594a:	2301      	movs	r3, #1
 801594c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801594e:	2302      	movs	r3, #2
 8015950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015952:	2300      	movs	r3, #0
 8015954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015956:	2300      	movs	r3, #0
 8015958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801595a:	2301      	movs	r3, #1
 801595c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 801595e:	f107 031c 	add.w	r3, r7, #28
 8015962:	4619      	mov	r1, r3
 8015964:	4834      	ldr	r0, [pc, #208]	; (8015a38 <HAL_TIM_Base_MspInit+0x148>)
 8015966:	f001 f8b5 	bl	8016ad4 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 801596a:	4b34      	ldr	r3, [pc, #208]	; (8015a3c <HAL_TIM_Base_MspInit+0x14c>)
 801596c:	4a34      	ldr	r2, [pc, #208]	; (8015a40 <HAL_TIM_Base_MspInit+0x150>)
 801596e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8015970:	4b32      	ldr	r3, [pc, #200]	; (8015a3c <HAL_TIM_Base_MspInit+0x14c>)
 8015972:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8015976:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015978:	4b30      	ldr	r3, [pc, #192]	; (8015a3c <HAL_TIM_Base_MspInit+0x14c>)
 801597a:	2200      	movs	r2, #0
 801597c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 801597e:	4b2f      	ldr	r3, [pc, #188]	; (8015a3c <HAL_TIM_Base_MspInit+0x14c>)
 8015980:	2200      	movs	r2, #0
 8015982:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8015984:	4b2d      	ldr	r3, [pc, #180]	; (8015a3c <HAL_TIM_Base_MspInit+0x14c>)
 8015986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801598a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801598c:	4b2b      	ldr	r3, [pc, #172]	; (8015a3c <HAL_TIM_Base_MspInit+0x14c>)
 801598e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015992:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8015994:	4b29      	ldr	r3, [pc, #164]	; (8015a3c <HAL_TIM_Base_MspInit+0x14c>)
 8015996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801599a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 801599c:	4b27      	ldr	r3, [pc, #156]	; (8015a3c <HAL_TIM_Base_MspInit+0x14c>)
 801599e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80159a2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80159a4:	4b25      	ldr	r3, [pc, #148]	; (8015a3c <HAL_TIM_Base_MspInit+0x14c>)
 80159a6:	2200      	movs	r2, #0
 80159a8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80159aa:	4b24      	ldr	r3, [pc, #144]	; (8015a3c <HAL_TIM_Base_MspInit+0x14c>)
 80159ac:	2200      	movs	r2, #0
 80159ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80159b0:	4822      	ldr	r0, [pc, #136]	; (8015a3c <HAL_TIM_Base_MspInit+0x14c>)
 80159b2:	f000 fc7f 	bl	80162b4 <HAL_DMA_Init>
 80159b6:	4603      	mov	r3, r0
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d001      	beq.n	80159c0 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 80159bc:	f7ee f85c 	bl	8003a78 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	4a1e      	ldr	r2, [pc, #120]	; (8015a3c <HAL_TIM_Base_MspInit+0x14c>)
 80159c4:	625a      	str	r2, [r3, #36]	; 0x24
 80159c6:	4a1d      	ldr	r2, [pc, #116]	; (8015a3c <HAL_TIM_Base_MspInit+0x14c>)
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80159cc:	e02e      	b.n	8015a2c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM4)
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	4a1c      	ldr	r2, [pc, #112]	; (8015a44 <HAL_TIM_Base_MspInit+0x154>)
 80159d4:	4293      	cmp	r3, r2
 80159d6:	d10e      	bne.n	80159f6 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80159d8:	2300      	movs	r3, #0
 80159da:	613b      	str	r3, [r7, #16]
 80159dc:	4b15      	ldr	r3, [pc, #84]	; (8015a34 <HAL_TIM_Base_MspInit+0x144>)
 80159de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159e0:	4a14      	ldr	r2, [pc, #80]	; (8015a34 <HAL_TIM_Base_MspInit+0x144>)
 80159e2:	f043 0304 	orr.w	r3, r3, #4
 80159e6:	6413      	str	r3, [r2, #64]	; 0x40
 80159e8:	4b12      	ldr	r3, [pc, #72]	; (8015a34 <HAL_TIM_Base_MspInit+0x144>)
 80159ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159ec:	f003 0304 	and.w	r3, r3, #4
 80159f0:	613b      	str	r3, [r7, #16]
 80159f2:	693b      	ldr	r3, [r7, #16]
}
 80159f4:	e01a      	b.n	8015a2c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM11)
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	4a13      	ldr	r2, [pc, #76]	; (8015a48 <HAL_TIM_Base_MspInit+0x158>)
 80159fc:	4293      	cmp	r3, r2
 80159fe:	d115      	bne.n	8015a2c <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8015a00:	2300      	movs	r3, #0
 8015a02:	60fb      	str	r3, [r7, #12]
 8015a04:	4b0b      	ldr	r3, [pc, #44]	; (8015a34 <HAL_TIM_Base_MspInit+0x144>)
 8015a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a08:	4a0a      	ldr	r2, [pc, #40]	; (8015a34 <HAL_TIM_Base_MspInit+0x144>)
 8015a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015a0e:	6453      	str	r3, [r2, #68]	; 0x44
 8015a10:	4b08      	ldr	r3, [pc, #32]	; (8015a34 <HAL_TIM_Base_MspInit+0x144>)
 8015a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015a18:	60fb      	str	r3, [r7, #12]
 8015a1a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	2100      	movs	r1, #0
 8015a20:	201a      	movs	r0, #26
 8015a22:	f000 fc10 	bl	8016246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8015a26:	201a      	movs	r0, #26
 8015a28:	f000 fc29 	bl	801627e <HAL_NVIC_EnableIRQ>
}
 8015a2c:	bf00      	nop
 8015a2e:	3730      	adds	r7, #48	; 0x30
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}
 8015a34:	40023800 	.word	0x40023800
 8015a38:	40020000 	.word	0x40020000
 8015a3c:	20000274 	.word	0x20000274
 8015a40:	40026088 	.word	0x40026088
 8015a44:	40000800 	.word	0x40000800
 8015a48:	40014800 	.word	0x40014800

08015a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b088      	sub	sp, #32
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015a54:	f107 030c 	add.w	r3, r7, #12
 8015a58:	2200      	movs	r2, #0
 8015a5a:	601a      	str	r2, [r3, #0]
 8015a5c:	605a      	str	r2, [r3, #4]
 8015a5e:	609a      	str	r2, [r3, #8]
 8015a60:	60da      	str	r2, [r3, #12]
 8015a62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	4a12      	ldr	r2, [pc, #72]	; (8015ab4 <HAL_TIM_MspPostInit+0x68>)
 8015a6a:	4293      	cmp	r3, r2
 8015a6c:	d11d      	bne.n	8015aaa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015a6e:	2300      	movs	r3, #0
 8015a70:	60bb      	str	r3, [r7, #8]
 8015a72:	4b11      	ldr	r3, [pc, #68]	; (8015ab8 <HAL_TIM_MspPostInit+0x6c>)
 8015a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a76:	4a10      	ldr	r2, [pc, #64]	; (8015ab8 <HAL_TIM_MspPostInit+0x6c>)
 8015a78:	f043 0302 	orr.w	r3, r3, #2
 8015a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8015a7e:	4b0e      	ldr	r3, [pc, #56]	; (8015ab8 <HAL_TIM_MspPostInit+0x6c>)
 8015a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a82:	f003 0302 	and.w	r3, r3, #2
 8015a86:	60bb      	str	r3, [r7, #8]
 8015a88:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 8015a8a:	2340      	movs	r3, #64	; 0x40
 8015a8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015a8e:	2302      	movs	r3, #2
 8015a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a92:	2300      	movs	r3, #0
 8015a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015a96:	2300      	movs	r3, #0
 8015a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8015a9a:	2302      	movs	r3, #2
 8015a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 8015a9e:	f107 030c 	add.w	r3, r7, #12
 8015aa2:	4619      	mov	r1, r3
 8015aa4:	4805      	ldr	r0, [pc, #20]	; (8015abc <HAL_TIM_MspPostInit+0x70>)
 8015aa6:	f001 f815 	bl	8016ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8015aaa:	bf00      	nop
 8015aac:	3720      	adds	r7, #32
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bd80      	pop	{r7, pc}
 8015ab2:	bf00      	nop
 8015ab4:	40000800 	.word	0x40000800
 8015ab8:	40023800 	.word	0x40023800
 8015abc:	40020400 	.word	0x40020400

08015ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b08a      	sub	sp, #40	; 0x28
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015ac8:	f107 0314 	add.w	r3, r7, #20
 8015acc:	2200      	movs	r2, #0
 8015ace:	601a      	str	r2, [r3, #0]
 8015ad0:	605a      	str	r2, [r3, #4]
 8015ad2:	609a      	str	r2, [r3, #8]
 8015ad4:	60da      	str	r2, [r3, #12]
 8015ad6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	4a4b      	ldr	r2, [pc, #300]	; (8015c0c <HAL_UART_MspInit+0x14c>)
 8015ade:	4293      	cmp	r3, r2
 8015ae0:	f040 8090 	bne.w	8015c04 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	613b      	str	r3, [r7, #16]
 8015ae8:	4b49      	ldr	r3, [pc, #292]	; (8015c10 <HAL_UART_MspInit+0x150>)
 8015aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015aec:	4a48      	ldr	r2, [pc, #288]	; (8015c10 <HAL_UART_MspInit+0x150>)
 8015aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015af2:	6413      	str	r3, [r2, #64]	; 0x40
 8015af4:	4b46      	ldr	r3, [pc, #280]	; (8015c10 <HAL_UART_MspInit+0x150>)
 8015af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015afc:	613b      	str	r3, [r7, #16]
 8015afe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015b00:	2300      	movs	r3, #0
 8015b02:	60fb      	str	r3, [r7, #12]
 8015b04:	4b42      	ldr	r3, [pc, #264]	; (8015c10 <HAL_UART_MspInit+0x150>)
 8015b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b08:	4a41      	ldr	r2, [pc, #260]	; (8015c10 <HAL_UART_MspInit+0x150>)
 8015b0a:	f043 0301 	orr.w	r3, r3, #1
 8015b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8015b10:	4b3f      	ldr	r3, [pc, #252]	; (8015c10 <HAL_UART_MspInit+0x150>)
 8015b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b14:	f003 0301 	and.w	r3, r3, #1
 8015b18:	60fb      	str	r3, [r7, #12]
 8015b1a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8015b1c:	230c      	movs	r3, #12
 8015b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015b20:	2302      	movs	r3, #2
 8015b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b24:	2300      	movs	r3, #0
 8015b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015b28:	2303      	movs	r3, #3
 8015b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8015b2c:	2307      	movs	r3, #7
 8015b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015b30:	f107 0314 	add.w	r3, r7, #20
 8015b34:	4619      	mov	r1, r3
 8015b36:	4837      	ldr	r0, [pc, #220]	; (8015c14 <HAL_UART_MspInit+0x154>)
 8015b38:	f000 ffcc 	bl	8016ad4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream7;
 8015b3c:	4b36      	ldr	r3, [pc, #216]	; (8015c18 <HAL_UART_MspInit+0x158>)
 8015b3e:	4a37      	ldr	r2, [pc, #220]	; (8015c1c <HAL_UART_MspInit+0x15c>)
 8015b40:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 8015b42:	4b35      	ldr	r3, [pc, #212]	; (8015c18 <HAL_UART_MspInit+0x158>)
 8015b44:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8015b48:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8015b4a:	4b33      	ldr	r3, [pc, #204]	; (8015c18 <HAL_UART_MspInit+0x158>)
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015b50:	4b31      	ldr	r3, [pc, #196]	; (8015c18 <HAL_UART_MspInit+0x158>)
 8015b52:	2200      	movs	r2, #0
 8015b54:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8015b56:	4b30      	ldr	r3, [pc, #192]	; (8015c18 <HAL_UART_MspInit+0x158>)
 8015b58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015b5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8015b5e:	4b2e      	ldr	r3, [pc, #184]	; (8015c18 <HAL_UART_MspInit+0x158>)
 8015b60:	2200      	movs	r2, #0
 8015b62:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8015b64:	4b2c      	ldr	r3, [pc, #176]	; (8015c18 <HAL_UART_MspInit+0x158>)
 8015b66:	2200      	movs	r2, #0
 8015b68:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8015b6a:	4b2b      	ldr	r3, [pc, #172]	; (8015c18 <HAL_UART_MspInit+0x158>)
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8015b70:	4b29      	ldr	r3, [pc, #164]	; (8015c18 <HAL_UART_MspInit+0x158>)
 8015b72:	2200      	movs	r2, #0
 8015b74:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015b76:	4b28      	ldr	r3, [pc, #160]	; (8015c18 <HAL_UART_MspInit+0x158>)
 8015b78:	2200      	movs	r2, #0
 8015b7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8015b7c:	4826      	ldr	r0, [pc, #152]	; (8015c18 <HAL_UART_MspInit+0x158>)
 8015b7e:	f000 fb99 	bl	80162b4 <HAL_DMA_Init>
 8015b82:	4603      	mov	r3, r0
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d001      	beq.n	8015b8c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8015b88:	f7ed ff76 	bl	8003a78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	4a22      	ldr	r2, [pc, #136]	; (8015c18 <HAL_UART_MspInit+0x158>)
 8015b90:	639a      	str	r2, [r3, #56]	; 0x38
 8015b92:	4a21      	ldr	r2, [pc, #132]	; (8015c18 <HAL_UART_MspInit+0x158>)
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8015b98:	4b21      	ldr	r3, [pc, #132]	; (8015c20 <HAL_UART_MspInit+0x160>)
 8015b9a:	4a22      	ldr	r2, [pc, #136]	; (8015c24 <HAL_UART_MspInit+0x164>)
 8015b9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8015b9e:	4b20      	ldr	r3, [pc, #128]	; (8015c20 <HAL_UART_MspInit+0x160>)
 8015ba0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015ba4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8015ba6:	4b1e      	ldr	r3, [pc, #120]	; (8015c20 <HAL_UART_MspInit+0x160>)
 8015ba8:	2240      	movs	r2, #64	; 0x40
 8015baa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015bac:	4b1c      	ldr	r3, [pc, #112]	; (8015c20 <HAL_UART_MspInit+0x160>)
 8015bae:	2200      	movs	r2, #0
 8015bb0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8015bb2:	4b1b      	ldr	r3, [pc, #108]	; (8015c20 <HAL_UART_MspInit+0x160>)
 8015bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015bb8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8015bba:	4b19      	ldr	r3, [pc, #100]	; (8015c20 <HAL_UART_MspInit+0x160>)
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8015bc0:	4b17      	ldr	r3, [pc, #92]	; (8015c20 <HAL_UART_MspInit+0x160>)
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8015bc6:	4b16      	ldr	r3, [pc, #88]	; (8015c20 <HAL_UART_MspInit+0x160>)
 8015bc8:	2200      	movs	r2, #0
 8015bca:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8015bcc:	4b14      	ldr	r3, [pc, #80]	; (8015c20 <HAL_UART_MspInit+0x160>)
 8015bce:	2200      	movs	r2, #0
 8015bd0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015bd2:	4b13      	ldr	r3, [pc, #76]	; (8015c20 <HAL_UART_MspInit+0x160>)
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8015bd8:	4811      	ldr	r0, [pc, #68]	; (8015c20 <HAL_UART_MspInit+0x160>)
 8015bda:	f000 fb6b 	bl	80162b4 <HAL_DMA_Init>
 8015bde:	4603      	mov	r3, r0
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d001      	beq.n	8015be8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8015be4:	f7ed ff48 	bl	8003a78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	4a0d      	ldr	r2, [pc, #52]	; (8015c20 <HAL_UART_MspInit+0x160>)
 8015bec:	635a      	str	r2, [r3, #52]	; 0x34
 8015bee:	4a0c      	ldr	r2, [pc, #48]	; (8015c20 <HAL_UART_MspInit+0x160>)
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	2100      	movs	r1, #0
 8015bf8:	2026      	movs	r0, #38	; 0x26
 8015bfa:	f000 fb24 	bl	8016246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8015bfe:	2026      	movs	r0, #38	; 0x26
 8015c00:	f000 fb3d 	bl	801627e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8015c04:	bf00      	nop
 8015c06:	3728      	adds	r7, #40	; 0x28
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	bd80      	pop	{r7, pc}
 8015c0c:	40004400 	.word	0x40004400
 8015c10:	40023800 	.word	0x40023800
 8015c14:	40020000 	.word	0x40020000
 8015c18:	20000318 	.word	0x20000318
 8015c1c:	400260b8 	.word	0x400260b8
 8015c20:	20000378 	.word	0x20000378
 8015c24:	400260a0 	.word	0x400260a0

08015c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8015c28:	b480      	push	{r7}
 8015c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8015c2c:	e7fe      	b.n	8015c2c <NMI_Handler+0x4>

08015c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8015c2e:	b480      	push	{r7}
 8015c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8015c32:	e7fe      	b.n	8015c32 <HardFault_Handler+0x4>

08015c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8015c34:	b480      	push	{r7}
 8015c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8015c38:	e7fe      	b.n	8015c38 <MemManage_Handler+0x4>

08015c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8015c3a:	b480      	push	{r7}
 8015c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8015c3e:	e7fe      	b.n	8015c3e <BusFault_Handler+0x4>

08015c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8015c40:	b480      	push	{r7}
 8015c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015c44:	e7fe      	b.n	8015c44 <UsageFault_Handler+0x4>

08015c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8015c46:	b480      	push	{r7}
 8015c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8015c4a:	bf00      	nop
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c52:	4770      	bx	lr

08015c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015c54:	b480      	push	{r7}
 8015c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8015c58:	bf00      	nop
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c60:	4770      	bx	lr

08015c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8015c62:	b480      	push	{r7}
 8015c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8015c66:	bf00      	nop
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6e:	4770      	bx	lr

08015c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8015c74:	f000 f9c8 	bl	8016008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8015c78:	bf00      	nop
 8015c7a:	bd80      	pop	{r7, pc}

08015c7c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 8015c80:	2004      	movs	r0, #4
 8015c82:	f001 f8dd 	bl	8016e40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8015c86:	bf00      	nop
 8015c88:	bd80      	pop	{r7, pc}
	...

08015c8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8015c90:	4802      	ldr	r0, [pc, #8]	; (8015c9c <DMA1_Stream5_IRQHandler+0x10>)
 8015c92:	f000 fca7 	bl	80165e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8015c96:	bf00      	nop
 8015c98:	bd80      	pop	{r7, pc}
 8015c9a:	bf00      	nop
 8015c9c:	20000274 	.word	0x20000274

08015ca0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8015ca4:	4802      	ldr	r0, [pc, #8]	; (8015cb0 <DMA1_Stream6_IRQHandler+0x10>)
 8015ca6:	f000 fc9d 	bl	80165e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8015caa:	bf00      	nop
 8015cac:	bd80      	pop	{r7, pc}
 8015cae:	bf00      	nop
 8015cb0:	20000378 	.word	0x20000378

08015cb4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8015cb8:	4802      	ldr	r0, [pc, #8]	; (8015cc4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8015cba:	f004 fe3e 	bl	801a93a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8015cbe:	bf00      	nop
 8015cc0:	bd80      	pop	{r7, pc}
 8015cc2:	bf00      	nop
 8015cc4:	2000022c 	.word	0x2000022c

08015cc8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8015ccc:	4802      	ldr	r0, [pc, #8]	; (8015cd8 <I2C1_EV_IRQHandler+0x10>)
 8015cce:	f001 fef7 	bl	8017ac0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8015cd2:	bf00      	nop
 8015cd4:	bd80      	pop	{r7, pc}
 8015cd6:	bf00      	nop
 8015cd8:	200000f4 	.word	0x200000f4

08015cdc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8015ce0:	4802      	ldr	r0, [pc, #8]	; (8015cec <I2C1_ER_IRQHandler+0x10>)
 8015ce2:	f002 f85e 	bl	8017da2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8015ce6:	bf00      	nop
 8015ce8:	bd80      	pop	{r7, pc}
 8015cea:	bf00      	nop
 8015cec:	200000f4 	.word	0x200000f4

08015cf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8015cf4:	4802      	ldr	r0, [pc, #8]	; (8015d00 <USART2_IRQHandler+0x10>)
 8015cf6:	f005 ff27 	bl	801bb48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8015cfa:	bf00      	nop
 8015cfc:	bd80      	pop	{r7, pc}
 8015cfe:	bf00      	nop
 8015d00:	200002d4 	.word	0x200002d4

08015d04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 8015d08:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015d0c:	f001 f898 	bl	8016e40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 8015d10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015d14:	f001 f894 	bl	8016e40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8015d18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8015d1c:	f001 f890 	bl	8016e40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8015d20:	bf00      	nop
 8015d22:	bd80      	pop	{r7, pc}

08015d24 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8015d28:	4802      	ldr	r0, [pc, #8]	; (8015d34 <DMA1_Stream7_IRQHandler+0x10>)
 8015d2a:	f000 fc5b 	bl	80165e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8015d2e:	bf00      	nop
 8015d30:	bd80      	pop	{r7, pc}
 8015d32:	bf00      	nop
 8015d34:	20000318 	.word	0x20000318

08015d38 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8015d3c:	4802      	ldr	r0, [pc, #8]	; (8015d48 <I2C3_EV_IRQHandler+0x10>)
 8015d3e:	f001 febf 	bl	8017ac0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8015d42:	bf00      	nop
 8015d44:	bd80      	pop	{r7, pc}
 8015d46:	bf00      	nop
 8015d48:	20000148 	.word	0x20000148

08015d4c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8015d50:	4802      	ldr	r0, [pc, #8]	; (8015d5c <I2C3_ER_IRQHandler+0x10>)
 8015d52:	f002 f826 	bl	8017da2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8015d56:	bf00      	nop
 8015d58:	bd80      	pop	{r7, pc}
 8015d5a:	bf00      	nop
 8015d5c:	20000148 	.word	0x20000148

08015d60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8015d60:	b480      	push	{r7}
 8015d62:	af00      	add	r7, sp, #0
	return 1;
 8015d64:	2301      	movs	r3, #1
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6e:	4770      	bx	lr

08015d70 <_kill>:

int _kill(int pid, int sig)
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b082      	sub	sp, #8
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
 8015d78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8015d7a:	f007 ff31 	bl	801dbe0 <__errno>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	2216      	movs	r2, #22
 8015d82:	601a      	str	r2, [r3, #0]
	return -1;
 8015d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	3708      	adds	r7, #8
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <_exit>:

void _exit (int status)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b082      	sub	sp, #8
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8015d98:	f04f 31ff 	mov.w	r1, #4294967295
 8015d9c:	6878      	ldr	r0, [r7, #4]
 8015d9e:	f7ff ffe7 	bl	8015d70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8015da2:	e7fe      	b.n	8015da2 <_exit+0x12>

08015da4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b086      	sub	sp, #24
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	60f8      	str	r0, [r7, #12]
 8015dac:	60b9      	str	r1, [r7, #8]
 8015dae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015db0:	2300      	movs	r3, #0
 8015db2:	617b      	str	r3, [r7, #20]
 8015db4:	e00a      	b.n	8015dcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8015db6:	f3af 8000 	nop.w
 8015dba:	4601      	mov	r1, r0
 8015dbc:	68bb      	ldr	r3, [r7, #8]
 8015dbe:	1c5a      	adds	r2, r3, #1
 8015dc0:	60ba      	str	r2, [r7, #8]
 8015dc2:	b2ca      	uxtb	r2, r1
 8015dc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015dc6:	697b      	ldr	r3, [r7, #20]
 8015dc8:	3301      	adds	r3, #1
 8015dca:	617b      	str	r3, [r7, #20]
 8015dcc:	697a      	ldr	r2, [r7, #20]
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	dbf0      	blt.n	8015db6 <_read+0x12>
	}

return len;
 8015dd4:	687b      	ldr	r3, [r7, #4]
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3718      	adds	r7, #24
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}

08015dde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8015dde:	b580      	push	{r7, lr}
 8015de0:	b086      	sub	sp, #24
 8015de2:	af00      	add	r7, sp, #0
 8015de4:	60f8      	str	r0, [r7, #12]
 8015de6:	60b9      	str	r1, [r7, #8]
 8015de8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015dea:	2300      	movs	r3, #0
 8015dec:	617b      	str	r3, [r7, #20]
 8015dee:	e009      	b.n	8015e04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8015df0:	68bb      	ldr	r3, [r7, #8]
 8015df2:	1c5a      	adds	r2, r3, #1
 8015df4:	60ba      	str	r2, [r7, #8]
 8015df6:	781b      	ldrb	r3, [r3, #0]
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	3301      	adds	r3, #1
 8015e02:	617b      	str	r3, [r7, #20]
 8015e04:	697a      	ldr	r2, [r7, #20]
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	429a      	cmp	r2, r3
 8015e0a:	dbf1      	blt.n	8015df0 <_write+0x12>
	}
	return len;
 8015e0c:	687b      	ldr	r3, [r7, #4]
}
 8015e0e:	4618      	mov	r0, r3
 8015e10:	3718      	adds	r7, #24
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bd80      	pop	{r7, pc}

08015e16 <_close>:

int _close(int file)
{
 8015e16:	b480      	push	{r7}
 8015e18:	b083      	sub	sp, #12
 8015e1a:	af00      	add	r7, sp, #0
 8015e1c:	6078      	str	r0, [r7, #4]
	return -1;
 8015e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	370c      	adds	r7, #12
 8015e26:	46bd      	mov	sp, r7
 8015e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2c:	4770      	bx	lr

08015e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8015e2e:	b480      	push	{r7}
 8015e30:	b083      	sub	sp, #12
 8015e32:	af00      	add	r7, sp, #0
 8015e34:	6078      	str	r0, [r7, #4]
 8015e36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8015e38:	683b      	ldr	r3, [r7, #0]
 8015e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015e3e:	605a      	str	r2, [r3, #4]
	return 0;
 8015e40:	2300      	movs	r3, #0
}
 8015e42:	4618      	mov	r0, r3
 8015e44:	370c      	adds	r7, #12
 8015e46:	46bd      	mov	sp, r7
 8015e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4c:	4770      	bx	lr

08015e4e <_isatty>:

int _isatty(int file)
{
 8015e4e:	b480      	push	{r7}
 8015e50:	b083      	sub	sp, #12
 8015e52:	af00      	add	r7, sp, #0
 8015e54:	6078      	str	r0, [r7, #4]
	return 1;
 8015e56:	2301      	movs	r3, #1
}
 8015e58:	4618      	mov	r0, r3
 8015e5a:	370c      	adds	r7, #12
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e62:	4770      	bx	lr

08015e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8015e64:	b480      	push	{r7}
 8015e66:	b085      	sub	sp, #20
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	60f8      	str	r0, [r7, #12]
 8015e6c:	60b9      	str	r1, [r7, #8]
 8015e6e:	607a      	str	r2, [r7, #4]
	return 0;
 8015e70:	2300      	movs	r3, #0
}
 8015e72:	4618      	mov	r0, r3
 8015e74:	3714      	adds	r7, #20
 8015e76:	46bd      	mov	sp, r7
 8015e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e7c:	4770      	bx	lr
	...

08015e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b086      	sub	sp, #24
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8015e88:	4a14      	ldr	r2, [pc, #80]	; (8015edc <_sbrk+0x5c>)
 8015e8a:	4b15      	ldr	r3, [pc, #84]	; (8015ee0 <_sbrk+0x60>)
 8015e8c:	1ad3      	subs	r3, r2, r3
 8015e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8015e90:	697b      	ldr	r3, [r7, #20]
 8015e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8015e94:	4b13      	ldr	r3, [pc, #76]	; (8015ee4 <_sbrk+0x64>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d102      	bne.n	8015ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8015e9c:	4b11      	ldr	r3, [pc, #68]	; (8015ee4 <_sbrk+0x64>)
 8015e9e:	4a12      	ldr	r2, [pc, #72]	; (8015ee8 <_sbrk+0x68>)
 8015ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8015ea2:	4b10      	ldr	r3, [pc, #64]	; (8015ee4 <_sbrk+0x64>)
 8015ea4:	681a      	ldr	r2, [r3, #0]
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	4413      	add	r3, r2
 8015eaa:	693a      	ldr	r2, [r7, #16]
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d207      	bcs.n	8015ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8015eb0:	f007 fe96 	bl	801dbe0 <__errno>
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	220c      	movs	r2, #12
 8015eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8015eba:	f04f 33ff 	mov.w	r3, #4294967295
 8015ebe:	e009      	b.n	8015ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8015ec0:	4b08      	ldr	r3, [pc, #32]	; (8015ee4 <_sbrk+0x64>)
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8015ec6:	4b07      	ldr	r3, [pc, #28]	; (8015ee4 <_sbrk+0x64>)
 8015ec8:	681a      	ldr	r2, [r3, #0]
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	4413      	add	r3, r2
 8015ece:	4a05      	ldr	r2, [pc, #20]	; (8015ee4 <_sbrk+0x64>)
 8015ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3718      	adds	r7, #24
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bd80      	pop	{r7, pc}
 8015edc:	20020000 	.word	0x20020000
 8015ee0:	00000400 	.word	0x00000400
 8015ee4:	20000630 	.word	0x20000630
 8015ee8:	20000648 	.word	0x20000648

08015eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8015eec:	b480      	push	{r7}
 8015eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8015ef0:	4b06      	ldr	r3, [pc, #24]	; (8015f0c <SystemInit+0x20>)
 8015ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015ef6:	4a05      	ldr	r2, [pc, #20]	; (8015f0c <SystemInit+0x20>)
 8015ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8015f00:	bf00      	nop
 8015f02:	46bd      	mov	sp, r7
 8015f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f08:	4770      	bx	lr
 8015f0a:	bf00      	nop
 8015f0c:	e000ed00 	.word	0xe000ed00

08015f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8015f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015f48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8015f14:	480d      	ldr	r0, [pc, #52]	; (8015f4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8015f16:	490e      	ldr	r1, [pc, #56]	; (8015f50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8015f18:	4a0e      	ldr	r2, [pc, #56]	; (8015f54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8015f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8015f1c:	e002      	b.n	8015f24 <LoopCopyDataInit>

08015f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8015f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8015f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8015f22:	3304      	adds	r3, #4

08015f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8015f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8015f28:	d3f9      	bcc.n	8015f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8015f2a:	4a0b      	ldr	r2, [pc, #44]	; (8015f58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8015f2c:	4c0b      	ldr	r4, [pc, #44]	; (8015f5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8015f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8015f30:	e001      	b.n	8015f36 <LoopFillZerobss>

08015f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8015f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8015f34:	3204      	adds	r2, #4

08015f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8015f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8015f38:	d3fb      	bcc.n	8015f32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8015f3a:	f7ff ffd7 	bl	8015eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8015f3e:	f007 fe67 	bl	801dc10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015f42:	f7eb fba7 	bl	8001694 <main>
  bx  lr    
 8015f46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8015f48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8015f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8015f50:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8015f54:	08029d38 	.word	0x08029d38
  ldr r2, =_sbss
 8015f58:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8015f5c:	20000648 	.word	0x20000648

08015f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015f60:	e7fe      	b.n	8015f60 <ADC_IRQHandler>
	...

08015f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8015f68:	4b0e      	ldr	r3, [pc, #56]	; (8015fa4 <HAL_Init+0x40>)
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	4a0d      	ldr	r2, [pc, #52]	; (8015fa4 <HAL_Init+0x40>)
 8015f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8015f74:	4b0b      	ldr	r3, [pc, #44]	; (8015fa4 <HAL_Init+0x40>)
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	4a0a      	ldr	r2, [pc, #40]	; (8015fa4 <HAL_Init+0x40>)
 8015f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015f80:	4b08      	ldr	r3, [pc, #32]	; (8015fa4 <HAL_Init+0x40>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	4a07      	ldr	r2, [pc, #28]	; (8015fa4 <HAL_Init+0x40>)
 8015f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015f8c:	2003      	movs	r0, #3
 8015f8e:	f000 f94f 	bl	8016230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015f92:	2000      	movs	r0, #0
 8015f94:	f000 f808 	bl	8015fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015f98:	f7ff fbc2 	bl	8015720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015f9c:	2300      	movs	r3, #0
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	bd80      	pop	{r7, pc}
 8015fa2:	bf00      	nop
 8015fa4:	40023c00 	.word	0x40023c00

08015fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b082      	sub	sp, #8
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8015fb0:	4b12      	ldr	r3, [pc, #72]	; (8015ffc <HAL_InitTick+0x54>)
 8015fb2:	681a      	ldr	r2, [r3, #0]
 8015fb4:	4b12      	ldr	r3, [pc, #72]	; (8016000 <HAL_InitTick+0x58>)
 8015fb6:	781b      	ldrb	r3, [r3, #0]
 8015fb8:	4619      	mov	r1, r3
 8015fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8015fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f000 f967 	bl	801629a <HAL_SYSTICK_Config>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d001      	beq.n	8015fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8015fd2:	2301      	movs	r3, #1
 8015fd4:	e00e      	b.n	8015ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	2b0f      	cmp	r3, #15
 8015fda:	d80a      	bhi.n	8015ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8015fdc:	2200      	movs	r2, #0
 8015fde:	6879      	ldr	r1, [r7, #4]
 8015fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8015fe4:	f000 f92f 	bl	8016246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8015fe8:	4a06      	ldr	r2, [pc, #24]	; (8016004 <HAL_InitTick+0x5c>)
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8015fee:	2300      	movs	r3, #0
 8015ff0:	e000      	b.n	8015ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8015ff2:	2301      	movs	r3, #1
}
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	3708      	adds	r7, #8
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	bd80      	pop	{r7, pc}
 8015ffc:	2000005c 	.word	0x2000005c
 8016000:	20000064 	.word	0x20000064
 8016004:	20000060 	.word	0x20000060

08016008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8016008:	b480      	push	{r7}
 801600a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801600c:	4b06      	ldr	r3, [pc, #24]	; (8016028 <HAL_IncTick+0x20>)
 801600e:	781b      	ldrb	r3, [r3, #0]
 8016010:	461a      	mov	r2, r3
 8016012:	4b06      	ldr	r3, [pc, #24]	; (801602c <HAL_IncTick+0x24>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	4413      	add	r3, r2
 8016018:	4a04      	ldr	r2, [pc, #16]	; (801602c <HAL_IncTick+0x24>)
 801601a:	6013      	str	r3, [r2, #0]
}
 801601c:	bf00      	nop
 801601e:	46bd      	mov	sp, r7
 8016020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016024:	4770      	bx	lr
 8016026:	bf00      	nop
 8016028:	20000064 	.word	0x20000064
 801602c:	20000634 	.word	0x20000634

08016030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8016030:	b480      	push	{r7}
 8016032:	af00      	add	r7, sp, #0
  return uwTick;
 8016034:	4b03      	ldr	r3, [pc, #12]	; (8016044 <HAL_GetTick+0x14>)
 8016036:	681b      	ldr	r3, [r3, #0]
}
 8016038:	4618      	mov	r0, r3
 801603a:	46bd      	mov	sp, r7
 801603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016040:	4770      	bx	lr
 8016042:	bf00      	nop
 8016044:	20000634 	.word	0x20000634

08016048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b084      	sub	sp, #16
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8016050:	f7ff ffee 	bl	8016030 <HAL_GetTick>
 8016054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016060:	d005      	beq.n	801606e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8016062:	4b0a      	ldr	r3, [pc, #40]	; (801608c <HAL_Delay+0x44>)
 8016064:	781b      	ldrb	r3, [r3, #0]
 8016066:	461a      	mov	r2, r3
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	4413      	add	r3, r2
 801606c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801606e:	bf00      	nop
 8016070:	f7ff ffde 	bl	8016030 <HAL_GetTick>
 8016074:	4602      	mov	r2, r0
 8016076:	68bb      	ldr	r3, [r7, #8]
 8016078:	1ad3      	subs	r3, r2, r3
 801607a:	68fa      	ldr	r2, [r7, #12]
 801607c:	429a      	cmp	r2, r3
 801607e:	d8f7      	bhi.n	8016070 <HAL_Delay+0x28>
  {
  }
}
 8016080:	bf00      	nop
 8016082:	bf00      	nop
 8016084:	3710      	adds	r7, #16
 8016086:	46bd      	mov	sp, r7
 8016088:	bd80      	pop	{r7, pc}
 801608a:	bf00      	nop
 801608c:	20000064 	.word	0x20000064

08016090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016090:	b480      	push	{r7}
 8016092:	b085      	sub	sp, #20
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f003 0307 	and.w	r3, r3, #7
 801609e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80160a0:	4b0c      	ldr	r3, [pc, #48]	; (80160d4 <__NVIC_SetPriorityGrouping+0x44>)
 80160a2:	68db      	ldr	r3, [r3, #12]
 80160a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80160a6:	68ba      	ldr	r2, [r7, #8]
 80160a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80160ac:	4013      	ands	r3, r2
 80160ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80160b4:	68bb      	ldr	r3, [r7, #8]
 80160b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80160b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80160bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80160c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80160c2:	4a04      	ldr	r2, [pc, #16]	; (80160d4 <__NVIC_SetPriorityGrouping+0x44>)
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	60d3      	str	r3, [r2, #12]
}
 80160c8:	bf00      	nop
 80160ca:	3714      	adds	r7, #20
 80160cc:	46bd      	mov	sp, r7
 80160ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d2:	4770      	bx	lr
 80160d4:	e000ed00 	.word	0xe000ed00

080160d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80160d8:	b480      	push	{r7}
 80160da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80160dc:	4b04      	ldr	r3, [pc, #16]	; (80160f0 <__NVIC_GetPriorityGrouping+0x18>)
 80160de:	68db      	ldr	r3, [r3, #12]
 80160e0:	0a1b      	lsrs	r3, r3, #8
 80160e2:	f003 0307 	and.w	r3, r3, #7
}
 80160e6:	4618      	mov	r0, r3
 80160e8:	46bd      	mov	sp, r7
 80160ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ee:	4770      	bx	lr
 80160f0:	e000ed00 	.word	0xe000ed00

080160f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80160f4:	b480      	push	{r7}
 80160f6:	b083      	sub	sp, #12
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	4603      	mov	r3, r0
 80160fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80160fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016102:	2b00      	cmp	r3, #0
 8016104:	db0b      	blt.n	801611e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016106:	79fb      	ldrb	r3, [r7, #7]
 8016108:	f003 021f 	and.w	r2, r3, #31
 801610c:	4907      	ldr	r1, [pc, #28]	; (801612c <__NVIC_EnableIRQ+0x38>)
 801610e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016112:	095b      	lsrs	r3, r3, #5
 8016114:	2001      	movs	r0, #1
 8016116:	fa00 f202 	lsl.w	r2, r0, r2
 801611a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801611e:	bf00      	nop
 8016120:	370c      	adds	r7, #12
 8016122:	46bd      	mov	sp, r7
 8016124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016128:	4770      	bx	lr
 801612a:	bf00      	nop
 801612c:	e000e100 	.word	0xe000e100

08016130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8016130:	b480      	push	{r7}
 8016132:	b083      	sub	sp, #12
 8016134:	af00      	add	r7, sp, #0
 8016136:	4603      	mov	r3, r0
 8016138:	6039      	str	r1, [r7, #0]
 801613a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801613c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016140:	2b00      	cmp	r3, #0
 8016142:	db0a      	blt.n	801615a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	b2da      	uxtb	r2, r3
 8016148:	490c      	ldr	r1, [pc, #48]	; (801617c <__NVIC_SetPriority+0x4c>)
 801614a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801614e:	0112      	lsls	r2, r2, #4
 8016150:	b2d2      	uxtb	r2, r2
 8016152:	440b      	add	r3, r1
 8016154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8016158:	e00a      	b.n	8016170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	b2da      	uxtb	r2, r3
 801615e:	4908      	ldr	r1, [pc, #32]	; (8016180 <__NVIC_SetPriority+0x50>)
 8016160:	79fb      	ldrb	r3, [r7, #7]
 8016162:	f003 030f 	and.w	r3, r3, #15
 8016166:	3b04      	subs	r3, #4
 8016168:	0112      	lsls	r2, r2, #4
 801616a:	b2d2      	uxtb	r2, r2
 801616c:	440b      	add	r3, r1
 801616e:	761a      	strb	r2, [r3, #24]
}
 8016170:	bf00      	nop
 8016172:	370c      	adds	r7, #12
 8016174:	46bd      	mov	sp, r7
 8016176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617a:	4770      	bx	lr
 801617c:	e000e100 	.word	0xe000e100
 8016180:	e000ed00 	.word	0xe000ed00

08016184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016184:	b480      	push	{r7}
 8016186:	b089      	sub	sp, #36	; 0x24
 8016188:	af00      	add	r7, sp, #0
 801618a:	60f8      	str	r0, [r7, #12]
 801618c:	60b9      	str	r1, [r7, #8]
 801618e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	f003 0307 	and.w	r3, r3, #7
 8016196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016198:	69fb      	ldr	r3, [r7, #28]
 801619a:	f1c3 0307 	rsb	r3, r3, #7
 801619e:	2b04      	cmp	r3, #4
 80161a0:	bf28      	it	cs
 80161a2:	2304      	movcs	r3, #4
 80161a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80161a6:	69fb      	ldr	r3, [r7, #28]
 80161a8:	3304      	adds	r3, #4
 80161aa:	2b06      	cmp	r3, #6
 80161ac:	d902      	bls.n	80161b4 <NVIC_EncodePriority+0x30>
 80161ae:	69fb      	ldr	r3, [r7, #28]
 80161b0:	3b03      	subs	r3, #3
 80161b2:	e000      	b.n	80161b6 <NVIC_EncodePriority+0x32>
 80161b4:	2300      	movs	r3, #0
 80161b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80161b8:	f04f 32ff 	mov.w	r2, #4294967295
 80161bc:	69bb      	ldr	r3, [r7, #24]
 80161be:	fa02 f303 	lsl.w	r3, r2, r3
 80161c2:	43da      	mvns	r2, r3
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	401a      	ands	r2, r3
 80161c8:	697b      	ldr	r3, [r7, #20]
 80161ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80161cc:	f04f 31ff 	mov.w	r1, #4294967295
 80161d0:	697b      	ldr	r3, [r7, #20]
 80161d2:	fa01 f303 	lsl.w	r3, r1, r3
 80161d6:	43d9      	mvns	r1, r3
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80161dc:	4313      	orrs	r3, r2
         );
}
 80161de:	4618      	mov	r0, r3
 80161e0:	3724      	adds	r7, #36	; 0x24
 80161e2:	46bd      	mov	sp, r7
 80161e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e8:	4770      	bx	lr
	...

080161ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b082      	sub	sp, #8
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	3b01      	subs	r3, #1
 80161f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80161fc:	d301      	bcc.n	8016202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80161fe:	2301      	movs	r3, #1
 8016200:	e00f      	b.n	8016222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8016202:	4a0a      	ldr	r2, [pc, #40]	; (801622c <SysTick_Config+0x40>)
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	3b01      	subs	r3, #1
 8016208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801620a:	210f      	movs	r1, #15
 801620c:	f04f 30ff 	mov.w	r0, #4294967295
 8016210:	f7ff ff8e 	bl	8016130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016214:	4b05      	ldr	r3, [pc, #20]	; (801622c <SysTick_Config+0x40>)
 8016216:	2200      	movs	r2, #0
 8016218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801621a:	4b04      	ldr	r3, [pc, #16]	; (801622c <SysTick_Config+0x40>)
 801621c:	2207      	movs	r2, #7
 801621e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016220:	2300      	movs	r3, #0
}
 8016222:	4618      	mov	r0, r3
 8016224:	3708      	adds	r7, #8
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}
 801622a:	bf00      	nop
 801622c:	e000e010 	.word	0xe000e010

08016230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b082      	sub	sp, #8
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f7ff ff29 	bl	8016090 <__NVIC_SetPriorityGrouping>
}
 801623e:	bf00      	nop
 8016240:	3708      	adds	r7, #8
 8016242:	46bd      	mov	sp, r7
 8016244:	bd80      	pop	{r7, pc}

08016246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016246:	b580      	push	{r7, lr}
 8016248:	b086      	sub	sp, #24
 801624a:	af00      	add	r7, sp, #0
 801624c:	4603      	mov	r3, r0
 801624e:	60b9      	str	r1, [r7, #8]
 8016250:	607a      	str	r2, [r7, #4]
 8016252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8016254:	2300      	movs	r3, #0
 8016256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8016258:	f7ff ff3e 	bl	80160d8 <__NVIC_GetPriorityGrouping>
 801625c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801625e:	687a      	ldr	r2, [r7, #4]
 8016260:	68b9      	ldr	r1, [r7, #8]
 8016262:	6978      	ldr	r0, [r7, #20]
 8016264:	f7ff ff8e 	bl	8016184 <NVIC_EncodePriority>
 8016268:	4602      	mov	r2, r0
 801626a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801626e:	4611      	mov	r1, r2
 8016270:	4618      	mov	r0, r3
 8016272:	f7ff ff5d 	bl	8016130 <__NVIC_SetPriority>
}
 8016276:	bf00      	nop
 8016278:	3718      	adds	r7, #24
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}

0801627e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801627e:	b580      	push	{r7, lr}
 8016280:	b082      	sub	sp, #8
 8016282:	af00      	add	r7, sp, #0
 8016284:	4603      	mov	r3, r0
 8016286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801628c:	4618      	mov	r0, r3
 801628e:	f7ff ff31 	bl	80160f4 <__NVIC_EnableIRQ>
}
 8016292:	bf00      	nop
 8016294:	3708      	adds	r7, #8
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}

0801629a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801629a:	b580      	push	{r7, lr}
 801629c:	b082      	sub	sp, #8
 801629e:	af00      	add	r7, sp, #0
 80162a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80162a2:	6878      	ldr	r0, [r7, #4]
 80162a4:	f7ff ffa2 	bl	80161ec <SysTick_Config>
 80162a8:	4603      	mov	r3, r0
}
 80162aa:	4618      	mov	r0, r3
 80162ac:	3708      	adds	r7, #8
 80162ae:	46bd      	mov	sp, r7
 80162b0:	bd80      	pop	{r7, pc}
	...

080162b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b086      	sub	sp, #24
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80162bc:	2300      	movs	r3, #0
 80162be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80162c0:	f7ff feb6 	bl	8016030 <HAL_GetTick>
 80162c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d101      	bne.n	80162d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80162cc:	2301      	movs	r3, #1
 80162ce:	e099      	b.n	8016404 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	2202      	movs	r2, #2
 80162d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	2200      	movs	r2, #0
 80162dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	681a      	ldr	r2, [r3, #0]
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	f022 0201 	bic.w	r2, r2, #1
 80162ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80162f0:	e00f      	b.n	8016312 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80162f2:	f7ff fe9d 	bl	8016030 <HAL_GetTick>
 80162f6:	4602      	mov	r2, r0
 80162f8:	693b      	ldr	r3, [r7, #16]
 80162fa:	1ad3      	subs	r3, r2, r3
 80162fc:	2b05      	cmp	r3, #5
 80162fe:	d908      	bls.n	8016312 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	2220      	movs	r2, #32
 8016304:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	2203      	movs	r2, #3
 801630a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801630e:	2303      	movs	r3, #3
 8016310:	e078      	b.n	8016404 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	f003 0301 	and.w	r3, r3, #1
 801631c:	2b00      	cmp	r3, #0
 801631e:	d1e8      	bne.n	80162f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8016328:	697a      	ldr	r2, [r7, #20]
 801632a:	4b38      	ldr	r3, [pc, #224]	; (801640c <HAL_DMA_Init+0x158>)
 801632c:	4013      	ands	r3, r2
 801632e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	685a      	ldr	r2, [r3, #4]
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	689b      	ldr	r3, [r3, #8]
 8016338:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801633e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	691b      	ldr	r3, [r3, #16]
 8016344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801634a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	699b      	ldr	r3, [r3, #24]
 8016350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	6a1b      	ldr	r3, [r3, #32]
 801635c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801635e:	697a      	ldr	r2, [r7, #20]
 8016360:	4313      	orrs	r3, r2
 8016362:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016368:	2b04      	cmp	r3, #4
 801636a:	d107      	bne.n	801637c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016374:	4313      	orrs	r3, r2
 8016376:	697a      	ldr	r2, [r7, #20]
 8016378:	4313      	orrs	r3, r2
 801637a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	697a      	ldr	r2, [r7, #20]
 8016382:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	695b      	ldr	r3, [r3, #20]
 801638a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801638c:	697b      	ldr	r3, [r7, #20]
 801638e:	f023 0307 	bic.w	r3, r3, #7
 8016392:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016398:	697a      	ldr	r2, [r7, #20]
 801639a:	4313      	orrs	r3, r2
 801639c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163a2:	2b04      	cmp	r3, #4
 80163a4:	d117      	bne.n	80163d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163aa:	697a      	ldr	r2, [r7, #20]
 80163ac:	4313      	orrs	r3, r2
 80163ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d00e      	beq.n	80163d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f000 fb0f 	bl	80169dc <DMA_CheckFifoParam>
 80163be:	4603      	mov	r3, r0
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d008      	beq.n	80163d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	2240      	movs	r2, #64	; 0x40
 80163c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	2201      	movs	r2, #1
 80163ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80163d2:	2301      	movs	r3, #1
 80163d4:	e016      	b.n	8016404 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	697a      	ldr	r2, [r7, #20]
 80163dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80163de:	6878      	ldr	r0, [r7, #4]
 80163e0:	f000 fac6 	bl	8016970 <DMA_CalcBaseAndBitshift>
 80163e4:	4603      	mov	r3, r0
 80163e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80163ec:	223f      	movs	r2, #63	; 0x3f
 80163ee:	409a      	lsls	r2, r3
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2200      	movs	r2, #0
 80163f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	2201      	movs	r2, #1
 80163fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8016402:	2300      	movs	r3, #0
}
 8016404:	4618      	mov	r0, r3
 8016406:	3718      	adds	r7, #24
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}
 801640c:	f010803f 	.word	0xf010803f

08016410 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b086      	sub	sp, #24
 8016414:	af00      	add	r7, sp, #0
 8016416:	60f8      	str	r0, [r7, #12]
 8016418:	60b9      	str	r1, [r7, #8]
 801641a:	607a      	str	r2, [r7, #4]
 801641c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801641e:	2300      	movs	r3, #0
 8016420:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016426:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801642e:	2b01      	cmp	r3, #1
 8016430:	d101      	bne.n	8016436 <HAL_DMA_Start_IT+0x26>
 8016432:	2302      	movs	r3, #2
 8016434:	e040      	b.n	80164b8 <HAL_DMA_Start_IT+0xa8>
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	2201      	movs	r2, #1
 801643a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016444:	b2db      	uxtb	r3, r3
 8016446:	2b01      	cmp	r3, #1
 8016448:	d12f      	bne.n	80164aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	2202      	movs	r2, #2
 801644e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	2200      	movs	r2, #0
 8016456:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8016458:	683b      	ldr	r3, [r7, #0]
 801645a:	687a      	ldr	r2, [r7, #4]
 801645c:	68b9      	ldr	r1, [r7, #8]
 801645e:	68f8      	ldr	r0, [r7, #12]
 8016460:	f000 fa58 	bl	8016914 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016468:	223f      	movs	r2, #63	; 0x3f
 801646a:	409a      	lsls	r2, r3
 801646c:	693b      	ldr	r3, [r7, #16]
 801646e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	681a      	ldr	r2, [r3, #0]
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	f042 0216 	orr.w	r2, r2, #22
 801647e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016484:	2b00      	cmp	r3, #0
 8016486:	d007      	beq.n	8016498 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	681a      	ldr	r2, [r3, #0]
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	f042 0208 	orr.w	r2, r2, #8
 8016496:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	681a      	ldr	r2, [r3, #0]
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	f042 0201 	orr.w	r2, r2, #1
 80164a6:	601a      	str	r2, [r3, #0]
 80164a8:	e005      	b.n	80164b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	2200      	movs	r2, #0
 80164ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80164b2:	2302      	movs	r3, #2
 80164b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80164b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80164b8:	4618      	mov	r0, r3
 80164ba:	3718      	adds	r7, #24
 80164bc:	46bd      	mov	sp, r7
 80164be:	bd80      	pop	{r7, pc}

080164c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b084      	sub	sp, #16
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80164cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80164ce:	f7ff fdaf 	bl	8016030 <HAL_GetTick>
 80164d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80164da:	b2db      	uxtb	r3, r3
 80164dc:	2b02      	cmp	r3, #2
 80164de:	d008      	beq.n	80164f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	2280      	movs	r2, #128	; 0x80
 80164e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	2200      	movs	r2, #0
 80164ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80164ee:	2301      	movs	r3, #1
 80164f0:	e052      	b.n	8016598 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	681a      	ldr	r2, [r3, #0]
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	f022 0216 	bic.w	r2, r2, #22
 8016500:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	695a      	ldr	r2, [r3, #20]
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016510:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016516:	2b00      	cmp	r3, #0
 8016518:	d103      	bne.n	8016522 <HAL_DMA_Abort+0x62>
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801651e:	2b00      	cmp	r3, #0
 8016520:	d007      	beq.n	8016532 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	681a      	ldr	r2, [r3, #0]
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	f022 0208 	bic.w	r2, r2, #8
 8016530:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	681a      	ldr	r2, [r3, #0]
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	f022 0201 	bic.w	r2, r2, #1
 8016540:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016542:	e013      	b.n	801656c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016544:	f7ff fd74 	bl	8016030 <HAL_GetTick>
 8016548:	4602      	mov	r2, r0
 801654a:	68bb      	ldr	r3, [r7, #8]
 801654c:	1ad3      	subs	r3, r2, r3
 801654e:	2b05      	cmp	r3, #5
 8016550:	d90c      	bls.n	801656c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2220      	movs	r2, #32
 8016556:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	2203      	movs	r2, #3
 801655c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	2200      	movs	r2, #0
 8016564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8016568:	2303      	movs	r3, #3
 801656a:	e015      	b.n	8016598 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	f003 0301 	and.w	r3, r3, #1
 8016576:	2b00      	cmp	r3, #0
 8016578:	d1e4      	bne.n	8016544 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801657e:	223f      	movs	r2, #63	; 0x3f
 8016580:	409a      	lsls	r2, r3
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	2201      	movs	r2, #1
 801658a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	2200      	movs	r2, #0
 8016592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8016596:	2300      	movs	r3, #0
}
 8016598:	4618      	mov	r0, r3
 801659a:	3710      	adds	r7, #16
 801659c:	46bd      	mov	sp, r7
 801659e:	bd80      	pop	{r7, pc}

080165a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80165a0:	b480      	push	{r7}
 80165a2:	b083      	sub	sp, #12
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80165ae:	b2db      	uxtb	r3, r3
 80165b0:	2b02      	cmp	r3, #2
 80165b2:	d004      	beq.n	80165be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	2280      	movs	r2, #128	; 0x80
 80165b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80165ba:	2301      	movs	r3, #1
 80165bc:	e00c      	b.n	80165d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	2205      	movs	r2, #5
 80165c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	681a      	ldr	r2, [r3, #0]
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	f022 0201 	bic.w	r2, r2, #1
 80165d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80165d6:	2300      	movs	r3, #0
}
 80165d8:	4618      	mov	r0, r3
 80165da:	370c      	adds	r7, #12
 80165dc:	46bd      	mov	sp, r7
 80165de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e2:	4770      	bx	lr

080165e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b086      	sub	sp, #24
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80165ec:	2300      	movs	r3, #0
 80165ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80165f0:	4b8e      	ldr	r3, [pc, #568]	; (801682c <HAL_DMA_IRQHandler+0x248>)
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	4a8e      	ldr	r2, [pc, #568]	; (8016830 <HAL_DMA_IRQHandler+0x24c>)
 80165f6:	fba2 2303 	umull	r2, r3, r2, r3
 80165fa:	0a9b      	lsrs	r3, r3, #10
 80165fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016602:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8016604:	693b      	ldr	r3, [r7, #16]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801660e:	2208      	movs	r2, #8
 8016610:	409a      	lsls	r2, r3
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	4013      	ands	r3, r2
 8016616:	2b00      	cmp	r3, #0
 8016618:	d01a      	beq.n	8016650 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	f003 0304 	and.w	r3, r3, #4
 8016624:	2b00      	cmp	r3, #0
 8016626:	d013      	beq.n	8016650 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	681a      	ldr	r2, [r3, #0]
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	f022 0204 	bic.w	r2, r2, #4
 8016636:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801663c:	2208      	movs	r2, #8
 801663e:	409a      	lsls	r2, r3
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016648:	f043 0201 	orr.w	r2, r3, #1
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016654:	2201      	movs	r2, #1
 8016656:	409a      	lsls	r2, r3
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	4013      	ands	r3, r2
 801665c:	2b00      	cmp	r3, #0
 801665e:	d012      	beq.n	8016686 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	695b      	ldr	r3, [r3, #20]
 8016666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801666a:	2b00      	cmp	r3, #0
 801666c:	d00b      	beq.n	8016686 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016672:	2201      	movs	r2, #1
 8016674:	409a      	lsls	r2, r3
 8016676:	693b      	ldr	r3, [r7, #16]
 8016678:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801667e:	f043 0202 	orr.w	r2, r3, #2
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801668a:	2204      	movs	r2, #4
 801668c:	409a      	lsls	r2, r3
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	4013      	ands	r3, r2
 8016692:	2b00      	cmp	r3, #0
 8016694:	d012      	beq.n	80166bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	f003 0302 	and.w	r3, r3, #2
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d00b      	beq.n	80166bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80166a8:	2204      	movs	r2, #4
 80166aa:	409a      	lsls	r2, r3
 80166ac:	693b      	ldr	r3, [r7, #16]
 80166ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80166b4:	f043 0204 	orr.w	r2, r3, #4
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80166c0:	2210      	movs	r2, #16
 80166c2:	409a      	lsls	r2, r3
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	4013      	ands	r3, r2
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d043      	beq.n	8016754 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	f003 0308 	and.w	r3, r3, #8
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d03c      	beq.n	8016754 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80166de:	2210      	movs	r2, #16
 80166e0:	409a      	lsls	r2, r3
 80166e2:	693b      	ldr	r3, [r7, #16]
 80166e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d018      	beq.n	8016726 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d108      	bne.n	8016714 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016706:	2b00      	cmp	r3, #0
 8016708:	d024      	beq.n	8016754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	4798      	blx	r3
 8016712:	e01f      	b.n	8016754 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016718:	2b00      	cmp	r3, #0
 801671a:	d01b      	beq.n	8016754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016720:	6878      	ldr	r0, [r7, #4]
 8016722:	4798      	blx	r3
 8016724:	e016      	b.n	8016754 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016730:	2b00      	cmp	r3, #0
 8016732:	d107      	bne.n	8016744 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	681a      	ldr	r2, [r3, #0]
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	f022 0208 	bic.w	r2, r2, #8
 8016742:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016748:	2b00      	cmp	r3, #0
 801674a:	d003      	beq.n	8016754 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016750:	6878      	ldr	r0, [r7, #4]
 8016752:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016758:	2220      	movs	r2, #32
 801675a:	409a      	lsls	r2, r3
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	4013      	ands	r3, r2
 8016760:	2b00      	cmp	r3, #0
 8016762:	f000 808f 	beq.w	8016884 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	f003 0310 	and.w	r3, r3, #16
 8016770:	2b00      	cmp	r3, #0
 8016772:	f000 8087 	beq.w	8016884 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801677a:	2220      	movs	r2, #32
 801677c:	409a      	lsls	r2, r3
 801677e:	693b      	ldr	r3, [r7, #16]
 8016780:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016788:	b2db      	uxtb	r3, r3
 801678a:	2b05      	cmp	r3, #5
 801678c:	d136      	bne.n	80167fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	681a      	ldr	r2, [r3, #0]
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	f022 0216 	bic.w	r2, r2, #22
 801679c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	695a      	ldr	r2, [r3, #20]
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80167ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d103      	bne.n	80167be <HAL_DMA_IRQHandler+0x1da>
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d007      	beq.n	80167ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	681a      	ldr	r2, [r3, #0]
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	f022 0208 	bic.w	r2, r2, #8
 80167cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80167d2:	223f      	movs	r2, #63	; 0x3f
 80167d4:	409a      	lsls	r2, r3
 80167d6:	693b      	ldr	r3, [r7, #16]
 80167d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	2201      	movs	r2, #1
 80167de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	2200      	movs	r2, #0
 80167e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d07e      	beq.n	80168f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	4798      	blx	r3
        }
        return;
 80167fa:	e079      	b.n	80168f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016806:	2b00      	cmp	r3, #0
 8016808:	d01d      	beq.n	8016846 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016814:	2b00      	cmp	r3, #0
 8016816:	d10d      	bne.n	8016834 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801681c:	2b00      	cmp	r3, #0
 801681e:	d031      	beq.n	8016884 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016824:	6878      	ldr	r0, [r7, #4]
 8016826:	4798      	blx	r3
 8016828:	e02c      	b.n	8016884 <HAL_DMA_IRQHandler+0x2a0>
 801682a:	bf00      	nop
 801682c:	2000005c 	.word	0x2000005c
 8016830:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016838:	2b00      	cmp	r3, #0
 801683a:	d023      	beq.n	8016884 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016840:	6878      	ldr	r0, [r7, #4]
 8016842:	4798      	blx	r3
 8016844:	e01e      	b.n	8016884 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016850:	2b00      	cmp	r3, #0
 8016852:	d10f      	bne.n	8016874 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	681a      	ldr	r2, [r3, #0]
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	f022 0210 	bic.w	r2, r2, #16
 8016862:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	2201      	movs	r2, #1
 8016868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	2200      	movs	r2, #0
 8016870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016878:	2b00      	cmp	r3, #0
 801687a:	d003      	beq.n	8016884 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016880:	6878      	ldr	r0, [r7, #4]
 8016882:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016888:	2b00      	cmp	r3, #0
 801688a:	d032      	beq.n	80168f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016890:	f003 0301 	and.w	r3, r3, #1
 8016894:	2b00      	cmp	r3, #0
 8016896:	d022      	beq.n	80168de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	2205      	movs	r2, #5
 801689c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	681a      	ldr	r2, [r3, #0]
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	f022 0201 	bic.w	r2, r2, #1
 80168ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80168b0:	68bb      	ldr	r3, [r7, #8]
 80168b2:	3301      	adds	r3, #1
 80168b4:	60bb      	str	r3, [r7, #8]
 80168b6:	697a      	ldr	r2, [r7, #20]
 80168b8:	429a      	cmp	r2, r3
 80168ba:	d307      	bcc.n	80168cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	f003 0301 	and.w	r3, r3, #1
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d1f2      	bne.n	80168b0 <HAL_DMA_IRQHandler+0x2cc>
 80168ca:	e000      	b.n	80168ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80168cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	2201      	movs	r2, #1
 80168d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	2200      	movs	r2, #0
 80168da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d005      	beq.n	80168f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80168ea:	6878      	ldr	r0, [r7, #4]
 80168ec:	4798      	blx	r3
 80168ee:	e000      	b.n	80168f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80168f0:	bf00      	nop
    }
  }
}
 80168f2:	3718      	adds	r7, #24
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}

080168f8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80168f8:	b480      	push	{r7}
 80168fa:	b083      	sub	sp, #12
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016906:	b2db      	uxtb	r3, r3
}
 8016908:	4618      	mov	r0, r3
 801690a:	370c      	adds	r7, #12
 801690c:	46bd      	mov	sp, r7
 801690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016912:	4770      	bx	lr

08016914 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016914:	b480      	push	{r7}
 8016916:	b085      	sub	sp, #20
 8016918:	af00      	add	r7, sp, #0
 801691a:	60f8      	str	r0, [r7, #12]
 801691c:	60b9      	str	r1, [r7, #8]
 801691e:	607a      	str	r2, [r7, #4]
 8016920:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	681a      	ldr	r2, [r3, #0]
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8016930:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	683a      	ldr	r2, [r7, #0]
 8016938:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	689b      	ldr	r3, [r3, #8]
 801693e:	2b40      	cmp	r3, #64	; 0x40
 8016940:	d108      	bne.n	8016954 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	687a      	ldr	r2, [r7, #4]
 8016948:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	68ba      	ldr	r2, [r7, #8]
 8016950:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8016952:	e007      	b.n	8016964 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	68ba      	ldr	r2, [r7, #8]
 801695a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	687a      	ldr	r2, [r7, #4]
 8016962:	60da      	str	r2, [r3, #12]
}
 8016964:	bf00      	nop
 8016966:	3714      	adds	r7, #20
 8016968:	46bd      	mov	sp, r7
 801696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696e:	4770      	bx	lr

08016970 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8016970:	b480      	push	{r7}
 8016972:	b085      	sub	sp, #20
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	b2db      	uxtb	r3, r3
 801697e:	3b10      	subs	r3, #16
 8016980:	4a14      	ldr	r2, [pc, #80]	; (80169d4 <DMA_CalcBaseAndBitshift+0x64>)
 8016982:	fba2 2303 	umull	r2, r3, r2, r3
 8016986:	091b      	lsrs	r3, r3, #4
 8016988:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801698a:	4a13      	ldr	r2, [pc, #76]	; (80169d8 <DMA_CalcBaseAndBitshift+0x68>)
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	4413      	add	r3, r2
 8016990:	781b      	ldrb	r3, [r3, #0]
 8016992:	461a      	mov	r2, r3
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	2b03      	cmp	r3, #3
 801699c:	d909      	bls.n	80169b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80169a6:	f023 0303 	bic.w	r3, r3, #3
 80169aa:	1d1a      	adds	r2, r3, #4
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	659a      	str	r2, [r3, #88]	; 0x58
 80169b0:	e007      	b.n	80169c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80169ba:	f023 0303 	bic.w	r3, r3, #3
 80169be:	687a      	ldr	r2, [r7, #4]
 80169c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80169c6:	4618      	mov	r0, r3
 80169c8:	3714      	adds	r7, #20
 80169ca:	46bd      	mov	sp, r7
 80169cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d0:	4770      	bx	lr
 80169d2:	bf00      	nop
 80169d4:	aaaaaaab 	.word	0xaaaaaaab
 80169d8:	08029c14 	.word	0x08029c14

080169dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80169dc:	b480      	push	{r7}
 80169de:	b085      	sub	sp, #20
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80169e4:	2300      	movs	r3, #0
 80169e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	699b      	ldr	r3, [r3, #24]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d11f      	bne.n	8016a36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80169f6:	68bb      	ldr	r3, [r7, #8]
 80169f8:	2b03      	cmp	r3, #3
 80169fa:	d856      	bhi.n	8016aaa <DMA_CheckFifoParam+0xce>
 80169fc:	a201      	add	r2, pc, #4	; (adr r2, 8016a04 <DMA_CheckFifoParam+0x28>)
 80169fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a02:	bf00      	nop
 8016a04:	08016a15 	.word	0x08016a15
 8016a08:	08016a27 	.word	0x08016a27
 8016a0c:	08016a15 	.word	0x08016a15
 8016a10:	08016aab 	.word	0x08016aab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d046      	beq.n	8016aae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8016a20:	2301      	movs	r3, #1
 8016a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016a24:	e043      	b.n	8016aae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8016a2e:	d140      	bne.n	8016ab2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8016a30:	2301      	movs	r3, #1
 8016a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016a34:	e03d      	b.n	8016ab2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	699b      	ldr	r3, [r3, #24]
 8016a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016a3e:	d121      	bne.n	8016a84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8016a40:	68bb      	ldr	r3, [r7, #8]
 8016a42:	2b03      	cmp	r3, #3
 8016a44:	d837      	bhi.n	8016ab6 <DMA_CheckFifoParam+0xda>
 8016a46:	a201      	add	r2, pc, #4	; (adr r2, 8016a4c <DMA_CheckFifoParam+0x70>)
 8016a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a4c:	08016a5d 	.word	0x08016a5d
 8016a50:	08016a63 	.word	0x08016a63
 8016a54:	08016a5d 	.word	0x08016a5d
 8016a58:	08016a75 	.word	0x08016a75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8016a5c:	2301      	movs	r3, #1
 8016a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8016a60:	e030      	b.n	8016ac4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d025      	beq.n	8016aba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8016a6e:	2301      	movs	r3, #1
 8016a70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016a72:	e022      	b.n	8016aba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8016a7c:	d11f      	bne.n	8016abe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8016a7e:	2301      	movs	r3, #1
 8016a80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8016a82:	e01c      	b.n	8016abe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8016a84:	68bb      	ldr	r3, [r7, #8]
 8016a86:	2b02      	cmp	r3, #2
 8016a88:	d903      	bls.n	8016a92 <DMA_CheckFifoParam+0xb6>
 8016a8a:	68bb      	ldr	r3, [r7, #8]
 8016a8c:	2b03      	cmp	r3, #3
 8016a8e:	d003      	beq.n	8016a98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8016a90:	e018      	b.n	8016ac4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8016a92:	2301      	movs	r3, #1
 8016a94:	73fb      	strb	r3, [r7, #15]
      break;
 8016a96:	e015      	b.n	8016ac4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d00e      	beq.n	8016ac2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8016aa4:	2301      	movs	r3, #1
 8016aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8016aa8:	e00b      	b.n	8016ac2 <DMA_CheckFifoParam+0xe6>
      break;
 8016aaa:	bf00      	nop
 8016aac:	e00a      	b.n	8016ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8016aae:	bf00      	nop
 8016ab0:	e008      	b.n	8016ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8016ab2:	bf00      	nop
 8016ab4:	e006      	b.n	8016ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8016ab6:	bf00      	nop
 8016ab8:	e004      	b.n	8016ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8016aba:	bf00      	nop
 8016abc:	e002      	b.n	8016ac4 <DMA_CheckFifoParam+0xe8>
      break;   
 8016abe:	bf00      	nop
 8016ac0:	e000      	b.n	8016ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8016ac2:	bf00      	nop
    }
  } 
  
  return status; 
 8016ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	3714      	adds	r7, #20
 8016aca:	46bd      	mov	sp, r7
 8016acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad0:	4770      	bx	lr
 8016ad2:	bf00      	nop

08016ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016ad4:	b480      	push	{r7}
 8016ad6:	b089      	sub	sp, #36	; 0x24
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
 8016adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8016ade:	2300      	movs	r3, #0
 8016ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016aea:	2300      	movs	r3, #0
 8016aec:	61fb      	str	r3, [r7, #28]
 8016aee:	e159      	b.n	8016da4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8016af0:	2201      	movs	r2, #1
 8016af2:	69fb      	ldr	r3, [r7, #28]
 8016af4:	fa02 f303 	lsl.w	r3, r2, r3
 8016af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8016afa:	683b      	ldr	r3, [r7, #0]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	697a      	ldr	r2, [r7, #20]
 8016b00:	4013      	ands	r3, r2
 8016b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8016b04:	693a      	ldr	r2, [r7, #16]
 8016b06:	697b      	ldr	r3, [r7, #20]
 8016b08:	429a      	cmp	r2, r3
 8016b0a:	f040 8148 	bne.w	8016d9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016b0e:	683b      	ldr	r3, [r7, #0]
 8016b10:	685b      	ldr	r3, [r3, #4]
 8016b12:	f003 0303 	and.w	r3, r3, #3
 8016b16:	2b01      	cmp	r3, #1
 8016b18:	d005      	beq.n	8016b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016b1a:	683b      	ldr	r3, [r7, #0]
 8016b1c:	685b      	ldr	r3, [r3, #4]
 8016b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016b22:	2b02      	cmp	r3, #2
 8016b24:	d130      	bne.n	8016b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	689b      	ldr	r3, [r3, #8]
 8016b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016b2c:	69fb      	ldr	r3, [r7, #28]
 8016b2e:	005b      	lsls	r3, r3, #1
 8016b30:	2203      	movs	r2, #3
 8016b32:	fa02 f303 	lsl.w	r3, r2, r3
 8016b36:	43db      	mvns	r3, r3
 8016b38:	69ba      	ldr	r2, [r7, #24]
 8016b3a:	4013      	ands	r3, r2
 8016b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8016b3e:	683b      	ldr	r3, [r7, #0]
 8016b40:	68da      	ldr	r2, [r3, #12]
 8016b42:	69fb      	ldr	r3, [r7, #28]
 8016b44:	005b      	lsls	r3, r3, #1
 8016b46:	fa02 f303 	lsl.w	r3, r2, r3
 8016b4a:	69ba      	ldr	r2, [r7, #24]
 8016b4c:	4313      	orrs	r3, r2
 8016b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	69ba      	ldr	r2, [r7, #24]
 8016b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	685b      	ldr	r3, [r3, #4]
 8016b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016b5c:	2201      	movs	r2, #1
 8016b5e:	69fb      	ldr	r3, [r7, #28]
 8016b60:	fa02 f303 	lsl.w	r3, r2, r3
 8016b64:	43db      	mvns	r3, r3
 8016b66:	69ba      	ldr	r2, [r7, #24]
 8016b68:	4013      	ands	r3, r2
 8016b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8016b6c:	683b      	ldr	r3, [r7, #0]
 8016b6e:	685b      	ldr	r3, [r3, #4]
 8016b70:	091b      	lsrs	r3, r3, #4
 8016b72:	f003 0201 	and.w	r2, r3, #1
 8016b76:	69fb      	ldr	r3, [r7, #28]
 8016b78:	fa02 f303 	lsl.w	r3, r2, r3
 8016b7c:	69ba      	ldr	r2, [r7, #24]
 8016b7e:	4313      	orrs	r3, r2
 8016b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	69ba      	ldr	r2, [r7, #24]
 8016b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8016b88:	683b      	ldr	r3, [r7, #0]
 8016b8a:	685b      	ldr	r3, [r3, #4]
 8016b8c:	f003 0303 	and.w	r3, r3, #3
 8016b90:	2b03      	cmp	r3, #3
 8016b92:	d017      	beq.n	8016bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	68db      	ldr	r3, [r3, #12]
 8016b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8016b9a:	69fb      	ldr	r3, [r7, #28]
 8016b9c:	005b      	lsls	r3, r3, #1
 8016b9e:	2203      	movs	r2, #3
 8016ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8016ba4:	43db      	mvns	r3, r3
 8016ba6:	69ba      	ldr	r2, [r7, #24]
 8016ba8:	4013      	ands	r3, r2
 8016baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	689a      	ldr	r2, [r3, #8]
 8016bb0:	69fb      	ldr	r3, [r7, #28]
 8016bb2:	005b      	lsls	r3, r3, #1
 8016bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8016bb8:	69ba      	ldr	r2, [r7, #24]
 8016bba:	4313      	orrs	r3, r2
 8016bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	69ba      	ldr	r2, [r7, #24]
 8016bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	685b      	ldr	r3, [r3, #4]
 8016bc8:	f003 0303 	and.w	r3, r3, #3
 8016bcc:	2b02      	cmp	r3, #2
 8016bce:	d123      	bne.n	8016c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016bd0:	69fb      	ldr	r3, [r7, #28]
 8016bd2:	08da      	lsrs	r2, r3, #3
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	3208      	adds	r2, #8
 8016bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016bde:	69fb      	ldr	r3, [r7, #28]
 8016be0:	f003 0307 	and.w	r3, r3, #7
 8016be4:	009b      	lsls	r3, r3, #2
 8016be6:	220f      	movs	r2, #15
 8016be8:	fa02 f303 	lsl.w	r3, r2, r3
 8016bec:	43db      	mvns	r3, r3
 8016bee:	69ba      	ldr	r2, [r7, #24]
 8016bf0:	4013      	ands	r3, r2
 8016bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8016bf4:	683b      	ldr	r3, [r7, #0]
 8016bf6:	691a      	ldr	r2, [r3, #16]
 8016bf8:	69fb      	ldr	r3, [r7, #28]
 8016bfa:	f003 0307 	and.w	r3, r3, #7
 8016bfe:	009b      	lsls	r3, r3, #2
 8016c00:	fa02 f303 	lsl.w	r3, r2, r3
 8016c04:	69ba      	ldr	r2, [r7, #24]
 8016c06:	4313      	orrs	r3, r2
 8016c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8016c0a:	69fb      	ldr	r3, [r7, #28]
 8016c0c:	08da      	lsrs	r2, r3, #3
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	3208      	adds	r2, #8
 8016c12:	69b9      	ldr	r1, [r7, #24]
 8016c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016c1e:	69fb      	ldr	r3, [r7, #28]
 8016c20:	005b      	lsls	r3, r3, #1
 8016c22:	2203      	movs	r2, #3
 8016c24:	fa02 f303 	lsl.w	r3, r2, r3
 8016c28:	43db      	mvns	r3, r3
 8016c2a:	69ba      	ldr	r2, [r7, #24]
 8016c2c:	4013      	ands	r3, r2
 8016c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016c30:	683b      	ldr	r3, [r7, #0]
 8016c32:	685b      	ldr	r3, [r3, #4]
 8016c34:	f003 0203 	and.w	r2, r3, #3
 8016c38:	69fb      	ldr	r3, [r7, #28]
 8016c3a:	005b      	lsls	r3, r3, #1
 8016c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8016c40:	69ba      	ldr	r2, [r7, #24]
 8016c42:	4313      	orrs	r3, r2
 8016c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	69ba      	ldr	r2, [r7, #24]
 8016c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8016c4c:	683b      	ldr	r3, [r7, #0]
 8016c4e:	685b      	ldr	r3, [r3, #4]
 8016c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	f000 80a2 	beq.w	8016d9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	60fb      	str	r3, [r7, #12]
 8016c5e:	4b57      	ldr	r3, [pc, #348]	; (8016dbc <HAL_GPIO_Init+0x2e8>)
 8016c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c62:	4a56      	ldr	r2, [pc, #344]	; (8016dbc <HAL_GPIO_Init+0x2e8>)
 8016c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016c68:	6453      	str	r3, [r2, #68]	; 0x44
 8016c6a:	4b54      	ldr	r3, [pc, #336]	; (8016dbc <HAL_GPIO_Init+0x2e8>)
 8016c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016c72:	60fb      	str	r3, [r7, #12]
 8016c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8016c76:	4a52      	ldr	r2, [pc, #328]	; (8016dc0 <HAL_GPIO_Init+0x2ec>)
 8016c78:	69fb      	ldr	r3, [r7, #28]
 8016c7a:	089b      	lsrs	r3, r3, #2
 8016c7c:	3302      	adds	r3, #2
 8016c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8016c84:	69fb      	ldr	r3, [r7, #28]
 8016c86:	f003 0303 	and.w	r3, r3, #3
 8016c8a:	009b      	lsls	r3, r3, #2
 8016c8c:	220f      	movs	r2, #15
 8016c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8016c92:	43db      	mvns	r3, r3
 8016c94:	69ba      	ldr	r2, [r7, #24]
 8016c96:	4013      	ands	r3, r2
 8016c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	4a49      	ldr	r2, [pc, #292]	; (8016dc4 <HAL_GPIO_Init+0x2f0>)
 8016c9e:	4293      	cmp	r3, r2
 8016ca0:	d019      	beq.n	8016cd6 <HAL_GPIO_Init+0x202>
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	4a48      	ldr	r2, [pc, #288]	; (8016dc8 <HAL_GPIO_Init+0x2f4>)
 8016ca6:	4293      	cmp	r3, r2
 8016ca8:	d013      	beq.n	8016cd2 <HAL_GPIO_Init+0x1fe>
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	4a47      	ldr	r2, [pc, #284]	; (8016dcc <HAL_GPIO_Init+0x2f8>)
 8016cae:	4293      	cmp	r3, r2
 8016cb0:	d00d      	beq.n	8016cce <HAL_GPIO_Init+0x1fa>
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	4a46      	ldr	r2, [pc, #280]	; (8016dd0 <HAL_GPIO_Init+0x2fc>)
 8016cb6:	4293      	cmp	r3, r2
 8016cb8:	d007      	beq.n	8016cca <HAL_GPIO_Init+0x1f6>
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	4a45      	ldr	r2, [pc, #276]	; (8016dd4 <HAL_GPIO_Init+0x300>)
 8016cbe:	4293      	cmp	r3, r2
 8016cc0:	d101      	bne.n	8016cc6 <HAL_GPIO_Init+0x1f2>
 8016cc2:	2304      	movs	r3, #4
 8016cc4:	e008      	b.n	8016cd8 <HAL_GPIO_Init+0x204>
 8016cc6:	2307      	movs	r3, #7
 8016cc8:	e006      	b.n	8016cd8 <HAL_GPIO_Init+0x204>
 8016cca:	2303      	movs	r3, #3
 8016ccc:	e004      	b.n	8016cd8 <HAL_GPIO_Init+0x204>
 8016cce:	2302      	movs	r3, #2
 8016cd0:	e002      	b.n	8016cd8 <HAL_GPIO_Init+0x204>
 8016cd2:	2301      	movs	r3, #1
 8016cd4:	e000      	b.n	8016cd8 <HAL_GPIO_Init+0x204>
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	69fa      	ldr	r2, [r7, #28]
 8016cda:	f002 0203 	and.w	r2, r2, #3
 8016cde:	0092      	lsls	r2, r2, #2
 8016ce0:	4093      	lsls	r3, r2
 8016ce2:	69ba      	ldr	r2, [r7, #24]
 8016ce4:	4313      	orrs	r3, r2
 8016ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016ce8:	4935      	ldr	r1, [pc, #212]	; (8016dc0 <HAL_GPIO_Init+0x2ec>)
 8016cea:	69fb      	ldr	r3, [r7, #28]
 8016cec:	089b      	lsrs	r3, r3, #2
 8016cee:	3302      	adds	r3, #2
 8016cf0:	69ba      	ldr	r2, [r7, #24]
 8016cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8016cf6:	4b38      	ldr	r3, [pc, #224]	; (8016dd8 <HAL_GPIO_Init+0x304>)
 8016cf8:	689b      	ldr	r3, [r3, #8]
 8016cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016cfc:	693b      	ldr	r3, [r7, #16]
 8016cfe:	43db      	mvns	r3, r3
 8016d00:	69ba      	ldr	r2, [r7, #24]
 8016d02:	4013      	ands	r3, r2
 8016d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8016d06:	683b      	ldr	r3, [r7, #0]
 8016d08:	685b      	ldr	r3, [r3, #4]
 8016d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d003      	beq.n	8016d1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8016d12:	69ba      	ldr	r2, [r7, #24]
 8016d14:	693b      	ldr	r3, [r7, #16]
 8016d16:	4313      	orrs	r3, r2
 8016d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8016d1a:	4a2f      	ldr	r2, [pc, #188]	; (8016dd8 <HAL_GPIO_Init+0x304>)
 8016d1c:	69bb      	ldr	r3, [r7, #24]
 8016d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8016d20:	4b2d      	ldr	r3, [pc, #180]	; (8016dd8 <HAL_GPIO_Init+0x304>)
 8016d22:	68db      	ldr	r3, [r3, #12]
 8016d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016d26:	693b      	ldr	r3, [r7, #16]
 8016d28:	43db      	mvns	r3, r3
 8016d2a:	69ba      	ldr	r2, [r7, #24]
 8016d2c:	4013      	ands	r3, r2
 8016d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8016d30:	683b      	ldr	r3, [r7, #0]
 8016d32:	685b      	ldr	r3, [r3, #4]
 8016d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d003      	beq.n	8016d44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8016d3c:	69ba      	ldr	r2, [r7, #24]
 8016d3e:	693b      	ldr	r3, [r7, #16]
 8016d40:	4313      	orrs	r3, r2
 8016d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8016d44:	4a24      	ldr	r2, [pc, #144]	; (8016dd8 <HAL_GPIO_Init+0x304>)
 8016d46:	69bb      	ldr	r3, [r7, #24]
 8016d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8016d4a:	4b23      	ldr	r3, [pc, #140]	; (8016dd8 <HAL_GPIO_Init+0x304>)
 8016d4c:	685b      	ldr	r3, [r3, #4]
 8016d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016d50:	693b      	ldr	r3, [r7, #16]
 8016d52:	43db      	mvns	r3, r3
 8016d54:	69ba      	ldr	r2, [r7, #24]
 8016d56:	4013      	ands	r3, r2
 8016d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8016d5a:	683b      	ldr	r3, [r7, #0]
 8016d5c:	685b      	ldr	r3, [r3, #4]
 8016d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d003      	beq.n	8016d6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8016d66:	69ba      	ldr	r2, [r7, #24]
 8016d68:	693b      	ldr	r3, [r7, #16]
 8016d6a:	4313      	orrs	r3, r2
 8016d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8016d6e:	4a1a      	ldr	r2, [pc, #104]	; (8016dd8 <HAL_GPIO_Init+0x304>)
 8016d70:	69bb      	ldr	r3, [r7, #24]
 8016d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8016d74:	4b18      	ldr	r3, [pc, #96]	; (8016dd8 <HAL_GPIO_Init+0x304>)
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016d7a:	693b      	ldr	r3, [r7, #16]
 8016d7c:	43db      	mvns	r3, r3
 8016d7e:	69ba      	ldr	r2, [r7, #24]
 8016d80:	4013      	ands	r3, r2
 8016d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8016d84:	683b      	ldr	r3, [r7, #0]
 8016d86:	685b      	ldr	r3, [r3, #4]
 8016d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d003      	beq.n	8016d98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8016d90:	69ba      	ldr	r2, [r7, #24]
 8016d92:	693b      	ldr	r3, [r7, #16]
 8016d94:	4313      	orrs	r3, r2
 8016d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8016d98:	4a0f      	ldr	r2, [pc, #60]	; (8016dd8 <HAL_GPIO_Init+0x304>)
 8016d9a:	69bb      	ldr	r3, [r7, #24]
 8016d9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016d9e:	69fb      	ldr	r3, [r7, #28]
 8016da0:	3301      	adds	r3, #1
 8016da2:	61fb      	str	r3, [r7, #28]
 8016da4:	69fb      	ldr	r3, [r7, #28]
 8016da6:	2b0f      	cmp	r3, #15
 8016da8:	f67f aea2 	bls.w	8016af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8016dac:	bf00      	nop
 8016dae:	bf00      	nop
 8016db0:	3724      	adds	r7, #36	; 0x24
 8016db2:	46bd      	mov	sp, r7
 8016db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db8:	4770      	bx	lr
 8016dba:	bf00      	nop
 8016dbc:	40023800 	.word	0x40023800
 8016dc0:	40013800 	.word	0x40013800
 8016dc4:	40020000 	.word	0x40020000
 8016dc8:	40020400 	.word	0x40020400
 8016dcc:	40020800 	.word	0x40020800
 8016dd0:	40020c00 	.word	0x40020c00
 8016dd4:	40021000 	.word	0x40021000
 8016dd8:	40013c00 	.word	0x40013c00

08016ddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8016ddc:	b480      	push	{r7}
 8016dde:	b085      	sub	sp, #20
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
 8016de4:	460b      	mov	r3, r1
 8016de6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	691a      	ldr	r2, [r3, #16]
 8016dec:	887b      	ldrh	r3, [r7, #2]
 8016dee:	4013      	ands	r3, r2
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d002      	beq.n	8016dfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8016df4:	2301      	movs	r3, #1
 8016df6:	73fb      	strb	r3, [r7, #15]
 8016df8:	e001      	b.n	8016dfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8016dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e00:	4618      	mov	r0, r3
 8016e02:	3714      	adds	r7, #20
 8016e04:	46bd      	mov	sp, r7
 8016e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0a:	4770      	bx	lr

08016e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016e0c:	b480      	push	{r7}
 8016e0e:	b083      	sub	sp, #12
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	6078      	str	r0, [r7, #4]
 8016e14:	460b      	mov	r3, r1
 8016e16:	807b      	strh	r3, [r7, #2]
 8016e18:	4613      	mov	r3, r2
 8016e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8016e1c:	787b      	ldrb	r3, [r7, #1]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d003      	beq.n	8016e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016e22:	887a      	ldrh	r2, [r7, #2]
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8016e28:	e003      	b.n	8016e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8016e2a:	887b      	ldrh	r3, [r7, #2]
 8016e2c:	041a      	lsls	r2, r3, #16
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	619a      	str	r2, [r3, #24]
}
 8016e32:	bf00      	nop
 8016e34:	370c      	adds	r7, #12
 8016e36:	46bd      	mov	sp, r7
 8016e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3c:	4770      	bx	lr
	...

08016e40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8016e40:	b580      	push	{r7, lr}
 8016e42:	b082      	sub	sp, #8
 8016e44:	af00      	add	r7, sp, #0
 8016e46:	4603      	mov	r3, r0
 8016e48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8016e4a:	4b08      	ldr	r3, [pc, #32]	; (8016e6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8016e4c:	695a      	ldr	r2, [r3, #20]
 8016e4e:	88fb      	ldrh	r3, [r7, #6]
 8016e50:	4013      	ands	r3, r2
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d006      	beq.n	8016e64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8016e56:	4a05      	ldr	r2, [pc, #20]	; (8016e6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8016e58:	88fb      	ldrh	r3, [r7, #6]
 8016e5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8016e5c:	88fb      	ldrh	r3, [r7, #6]
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f7ec fd8a 	bl	8003978 <HAL_GPIO_EXTI_Callback>
  }
}
 8016e64:	bf00      	nop
 8016e66:	3708      	adds	r7, #8
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd80      	pop	{r7, pc}
 8016e6c:	40013c00 	.word	0x40013c00

08016e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b084      	sub	sp, #16
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d101      	bne.n	8016e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8016e7e:	2301      	movs	r3, #1
 8016e80:	e12b      	b.n	80170da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016e88:	b2db      	uxtb	r3, r3
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d106      	bne.n	8016e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	2200      	movs	r2, #0
 8016e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8016e96:	6878      	ldr	r0, [r7, #4]
 8016e98:	f7fe fc6a 	bl	8015770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	2224      	movs	r2, #36	; 0x24
 8016ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	681a      	ldr	r2, [r3, #0]
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	f022 0201 	bic.w	r2, r2, #1
 8016eb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	681a      	ldr	r2, [r3, #0]
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016ec2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	681a      	ldr	r2, [r3, #0]
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016ed2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8016ed4:	f003 fa9a 	bl	801a40c <HAL_RCC_GetPCLK1Freq>
 8016ed8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	685b      	ldr	r3, [r3, #4]
 8016ede:	4a81      	ldr	r2, [pc, #516]	; (80170e4 <HAL_I2C_Init+0x274>)
 8016ee0:	4293      	cmp	r3, r2
 8016ee2:	d807      	bhi.n	8016ef4 <HAL_I2C_Init+0x84>
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	4a80      	ldr	r2, [pc, #512]	; (80170e8 <HAL_I2C_Init+0x278>)
 8016ee8:	4293      	cmp	r3, r2
 8016eea:	bf94      	ite	ls
 8016eec:	2301      	movls	r3, #1
 8016eee:	2300      	movhi	r3, #0
 8016ef0:	b2db      	uxtb	r3, r3
 8016ef2:	e006      	b.n	8016f02 <HAL_I2C_Init+0x92>
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	4a7d      	ldr	r2, [pc, #500]	; (80170ec <HAL_I2C_Init+0x27c>)
 8016ef8:	4293      	cmp	r3, r2
 8016efa:	bf94      	ite	ls
 8016efc:	2301      	movls	r3, #1
 8016efe:	2300      	movhi	r3, #0
 8016f00:	b2db      	uxtb	r3, r3
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d001      	beq.n	8016f0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8016f06:	2301      	movs	r3, #1
 8016f08:	e0e7      	b.n	80170da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	4a78      	ldr	r2, [pc, #480]	; (80170f0 <HAL_I2C_Init+0x280>)
 8016f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8016f12:	0c9b      	lsrs	r3, r3, #18
 8016f14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	685b      	ldr	r3, [r3, #4]
 8016f1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	68ba      	ldr	r2, [r7, #8]
 8016f26:	430a      	orrs	r2, r1
 8016f28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	6a1b      	ldr	r3, [r3, #32]
 8016f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	685b      	ldr	r3, [r3, #4]
 8016f38:	4a6a      	ldr	r2, [pc, #424]	; (80170e4 <HAL_I2C_Init+0x274>)
 8016f3a:	4293      	cmp	r3, r2
 8016f3c:	d802      	bhi.n	8016f44 <HAL_I2C_Init+0xd4>
 8016f3e:	68bb      	ldr	r3, [r7, #8]
 8016f40:	3301      	adds	r3, #1
 8016f42:	e009      	b.n	8016f58 <HAL_I2C_Init+0xe8>
 8016f44:	68bb      	ldr	r3, [r7, #8]
 8016f46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8016f4a:	fb02 f303 	mul.w	r3, r2, r3
 8016f4e:	4a69      	ldr	r2, [pc, #420]	; (80170f4 <HAL_I2C_Init+0x284>)
 8016f50:	fba2 2303 	umull	r2, r3, r2, r3
 8016f54:	099b      	lsrs	r3, r3, #6
 8016f56:	3301      	adds	r3, #1
 8016f58:	687a      	ldr	r2, [r7, #4]
 8016f5a:	6812      	ldr	r2, [r2, #0]
 8016f5c:	430b      	orrs	r3, r1
 8016f5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	69db      	ldr	r3, [r3, #28]
 8016f66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8016f6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	685b      	ldr	r3, [r3, #4]
 8016f72:	495c      	ldr	r1, [pc, #368]	; (80170e4 <HAL_I2C_Init+0x274>)
 8016f74:	428b      	cmp	r3, r1
 8016f76:	d819      	bhi.n	8016fac <HAL_I2C_Init+0x13c>
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	1e59      	subs	r1, r3, #1
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	685b      	ldr	r3, [r3, #4]
 8016f80:	005b      	lsls	r3, r3, #1
 8016f82:	fbb1 f3f3 	udiv	r3, r1, r3
 8016f86:	1c59      	adds	r1, r3, #1
 8016f88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8016f8c:	400b      	ands	r3, r1
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d00a      	beq.n	8016fa8 <HAL_I2C_Init+0x138>
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	1e59      	subs	r1, r3, #1
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	685b      	ldr	r3, [r3, #4]
 8016f9a:	005b      	lsls	r3, r3, #1
 8016f9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8016fa0:	3301      	adds	r3, #1
 8016fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016fa6:	e051      	b.n	801704c <HAL_I2C_Init+0x1dc>
 8016fa8:	2304      	movs	r3, #4
 8016faa:	e04f      	b.n	801704c <HAL_I2C_Init+0x1dc>
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	689b      	ldr	r3, [r3, #8]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d111      	bne.n	8016fd8 <HAL_I2C_Init+0x168>
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	1e58      	subs	r0, r3, #1
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	6859      	ldr	r1, [r3, #4]
 8016fbc:	460b      	mov	r3, r1
 8016fbe:	005b      	lsls	r3, r3, #1
 8016fc0:	440b      	add	r3, r1
 8016fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8016fc6:	3301      	adds	r3, #1
 8016fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	bf0c      	ite	eq
 8016fd0:	2301      	moveq	r3, #1
 8016fd2:	2300      	movne	r3, #0
 8016fd4:	b2db      	uxtb	r3, r3
 8016fd6:	e012      	b.n	8016ffe <HAL_I2C_Init+0x18e>
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	1e58      	subs	r0, r3, #1
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	6859      	ldr	r1, [r3, #4]
 8016fe0:	460b      	mov	r3, r1
 8016fe2:	009b      	lsls	r3, r3, #2
 8016fe4:	440b      	add	r3, r1
 8016fe6:	0099      	lsls	r1, r3, #2
 8016fe8:	440b      	add	r3, r1
 8016fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8016fee:	3301      	adds	r3, #1
 8016ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	bf0c      	ite	eq
 8016ff8:	2301      	moveq	r3, #1
 8016ffa:	2300      	movne	r3, #0
 8016ffc:	b2db      	uxtb	r3, r3
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d001      	beq.n	8017006 <HAL_I2C_Init+0x196>
 8017002:	2301      	movs	r3, #1
 8017004:	e022      	b.n	801704c <HAL_I2C_Init+0x1dc>
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	689b      	ldr	r3, [r3, #8]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d10e      	bne.n	801702c <HAL_I2C_Init+0x1bc>
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	1e58      	subs	r0, r3, #1
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	6859      	ldr	r1, [r3, #4]
 8017016:	460b      	mov	r3, r1
 8017018:	005b      	lsls	r3, r3, #1
 801701a:	440b      	add	r3, r1
 801701c:	fbb0 f3f3 	udiv	r3, r0, r3
 8017020:	3301      	adds	r3, #1
 8017022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801702a:	e00f      	b.n	801704c <HAL_I2C_Init+0x1dc>
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	1e58      	subs	r0, r3, #1
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	6859      	ldr	r1, [r3, #4]
 8017034:	460b      	mov	r3, r1
 8017036:	009b      	lsls	r3, r3, #2
 8017038:	440b      	add	r3, r1
 801703a:	0099      	lsls	r1, r3, #2
 801703c:	440b      	add	r3, r1
 801703e:	fbb0 f3f3 	udiv	r3, r0, r3
 8017042:	3301      	adds	r3, #1
 8017044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801704c:	6879      	ldr	r1, [r7, #4]
 801704e:	6809      	ldr	r1, [r1, #0]
 8017050:	4313      	orrs	r3, r2
 8017052:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	69da      	ldr	r2, [r3, #28]
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	6a1b      	ldr	r3, [r3, #32]
 8017066:	431a      	orrs	r2, r3
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	430a      	orrs	r2, r1
 801706e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	689b      	ldr	r3, [r3, #8]
 8017076:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801707a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801707e:	687a      	ldr	r2, [r7, #4]
 8017080:	6911      	ldr	r1, [r2, #16]
 8017082:	687a      	ldr	r2, [r7, #4]
 8017084:	68d2      	ldr	r2, [r2, #12]
 8017086:	4311      	orrs	r1, r2
 8017088:	687a      	ldr	r2, [r7, #4]
 801708a:	6812      	ldr	r2, [r2, #0]
 801708c:	430b      	orrs	r3, r1
 801708e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	68db      	ldr	r3, [r3, #12]
 8017096:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	695a      	ldr	r2, [r3, #20]
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	699b      	ldr	r3, [r3, #24]
 80170a2:	431a      	orrs	r2, r3
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	430a      	orrs	r2, r1
 80170aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	681a      	ldr	r2, [r3, #0]
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	f042 0201 	orr.w	r2, r2, #1
 80170ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	2200      	movs	r2, #0
 80170c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	2220      	movs	r2, #32
 80170c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	2200      	movs	r2, #0
 80170ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	2200      	movs	r2, #0
 80170d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80170d8:	2300      	movs	r3, #0
}
 80170da:	4618      	mov	r0, r3
 80170dc:	3710      	adds	r7, #16
 80170de:	46bd      	mov	sp, r7
 80170e0:	bd80      	pop	{r7, pc}
 80170e2:	bf00      	nop
 80170e4:	000186a0 	.word	0x000186a0
 80170e8:	001e847f 	.word	0x001e847f
 80170ec:	003d08ff 	.word	0x003d08ff
 80170f0:	431bde83 	.word	0x431bde83
 80170f4:	10624dd3 	.word	0x10624dd3

080170f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b088      	sub	sp, #32
 80170fc:	af02      	add	r7, sp, #8
 80170fe:	60f8      	str	r0, [r7, #12]
 8017100:	4608      	mov	r0, r1
 8017102:	4611      	mov	r1, r2
 8017104:	461a      	mov	r2, r3
 8017106:	4603      	mov	r3, r0
 8017108:	817b      	strh	r3, [r7, #10]
 801710a:	460b      	mov	r3, r1
 801710c:	813b      	strh	r3, [r7, #8]
 801710e:	4613      	mov	r3, r2
 8017110:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8017112:	f7fe ff8d 	bl	8016030 <HAL_GetTick>
 8017116:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801711e:	b2db      	uxtb	r3, r3
 8017120:	2b20      	cmp	r3, #32
 8017122:	f040 80d9 	bne.w	80172d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017126:	697b      	ldr	r3, [r7, #20]
 8017128:	9300      	str	r3, [sp, #0]
 801712a:	2319      	movs	r3, #25
 801712c:	2201      	movs	r2, #1
 801712e:	496d      	ldr	r1, [pc, #436]	; (80172e4 <HAL_I2C_Mem_Write+0x1ec>)
 8017130:	68f8      	ldr	r0, [r7, #12]
 8017132:	f002 fad1 	bl	80196d8 <I2C_WaitOnFlagUntilTimeout>
 8017136:	4603      	mov	r3, r0
 8017138:	2b00      	cmp	r3, #0
 801713a:	d001      	beq.n	8017140 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 801713c:	2302      	movs	r3, #2
 801713e:	e0cc      	b.n	80172da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017146:	2b01      	cmp	r3, #1
 8017148:	d101      	bne.n	801714e <HAL_I2C_Mem_Write+0x56>
 801714a:	2302      	movs	r3, #2
 801714c:	e0c5      	b.n	80172da <HAL_I2C_Mem_Write+0x1e2>
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	2201      	movs	r2, #1
 8017152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	f003 0301 	and.w	r3, r3, #1
 8017160:	2b01      	cmp	r3, #1
 8017162:	d007      	beq.n	8017174 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	681a      	ldr	r2, [r3, #0]
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	f042 0201 	orr.w	r2, r2, #1
 8017172:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	681a      	ldr	r2, [r3, #0]
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017182:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	2221      	movs	r2, #33	; 0x21
 8017188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	2240      	movs	r2, #64	; 0x40
 8017190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	2200      	movs	r2, #0
 8017198:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	6a3a      	ldr	r2, [r7, #32]
 801719e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80171a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80171aa:	b29a      	uxth	r2, r3
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	4a4d      	ldr	r2, [pc, #308]	; (80172e8 <HAL_I2C_Mem_Write+0x1f0>)
 80171b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80171b6:	88f8      	ldrh	r0, [r7, #6]
 80171b8:	893a      	ldrh	r2, [r7, #8]
 80171ba:	8979      	ldrh	r1, [r7, #10]
 80171bc:	697b      	ldr	r3, [r7, #20]
 80171be:	9301      	str	r3, [sp, #4]
 80171c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171c2:	9300      	str	r3, [sp, #0]
 80171c4:	4603      	mov	r3, r0
 80171c6:	68f8      	ldr	r0, [r7, #12]
 80171c8:	f002 f860 	bl	801928c <I2C_RequestMemoryWrite>
 80171cc:	4603      	mov	r3, r0
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d052      	beq.n	8017278 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80171d2:	2301      	movs	r3, #1
 80171d4:	e081      	b.n	80172da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80171d6:	697a      	ldr	r2, [r7, #20]
 80171d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80171da:	68f8      	ldr	r0, [r7, #12]
 80171dc:	f002 fb52 	bl	8019884 <I2C_WaitOnTXEFlagUntilTimeout>
 80171e0:	4603      	mov	r3, r0
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d00d      	beq.n	8017202 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171ea:	2b04      	cmp	r3, #4
 80171ec:	d107      	bne.n	80171fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	681a      	ldr	r2, [r3, #0]
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80171fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80171fe:	2301      	movs	r3, #1
 8017200:	e06b      	b.n	80172da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017206:	781a      	ldrb	r2, [r3, #0]
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017212:	1c5a      	adds	r2, r3, #1
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801721c:	3b01      	subs	r3, #1
 801721e:	b29a      	uxth	r2, r3
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017228:	b29b      	uxth	r3, r3
 801722a:	3b01      	subs	r3, #1
 801722c:	b29a      	uxth	r2, r3
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	695b      	ldr	r3, [r3, #20]
 8017238:	f003 0304 	and.w	r3, r3, #4
 801723c:	2b04      	cmp	r3, #4
 801723e:	d11b      	bne.n	8017278 <HAL_I2C_Mem_Write+0x180>
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017244:	2b00      	cmp	r3, #0
 8017246:	d017      	beq.n	8017278 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801724c:	781a      	ldrb	r2, [r3, #0]
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017258:	1c5a      	adds	r2, r3, #1
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017262:	3b01      	subs	r3, #1
 8017264:	b29a      	uxth	r2, r3
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801726e:	b29b      	uxth	r3, r3
 8017270:	3b01      	subs	r3, #1
 8017272:	b29a      	uxth	r2, r3
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801727c:	2b00      	cmp	r3, #0
 801727e:	d1aa      	bne.n	80171d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017280:	697a      	ldr	r2, [r7, #20]
 8017282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017284:	68f8      	ldr	r0, [r7, #12]
 8017286:	f002 fb3e 	bl	8019906 <I2C_WaitOnBTFFlagUntilTimeout>
 801728a:	4603      	mov	r3, r0
 801728c:	2b00      	cmp	r3, #0
 801728e:	d00d      	beq.n	80172ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017294:	2b04      	cmp	r3, #4
 8017296:	d107      	bne.n	80172a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	681a      	ldr	r2, [r3, #0]
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80172a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80172a8:	2301      	movs	r3, #1
 80172aa:	e016      	b.n	80172da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	681a      	ldr	r2, [r3, #0]
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80172ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	2220      	movs	r2, #32
 80172c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	2200      	movs	r2, #0
 80172c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	2200      	movs	r2, #0
 80172d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80172d4:	2300      	movs	r3, #0
 80172d6:	e000      	b.n	80172da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80172d8:	2302      	movs	r3, #2
  }
}
 80172da:	4618      	mov	r0, r3
 80172dc:	3718      	adds	r7, #24
 80172de:	46bd      	mov	sp, r7
 80172e0:	bd80      	pop	{r7, pc}
 80172e2:	bf00      	nop
 80172e4:	00100002 	.word	0x00100002
 80172e8:	ffff0000 	.word	0xffff0000

080172ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b08c      	sub	sp, #48	; 0x30
 80172f0:	af02      	add	r7, sp, #8
 80172f2:	60f8      	str	r0, [r7, #12]
 80172f4:	4608      	mov	r0, r1
 80172f6:	4611      	mov	r1, r2
 80172f8:	461a      	mov	r2, r3
 80172fa:	4603      	mov	r3, r0
 80172fc:	817b      	strh	r3, [r7, #10]
 80172fe:	460b      	mov	r3, r1
 8017300:	813b      	strh	r3, [r7, #8]
 8017302:	4613      	mov	r3, r2
 8017304:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8017306:	f7fe fe93 	bl	8016030 <HAL_GetTick>
 801730a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017312:	b2db      	uxtb	r3, r3
 8017314:	2b20      	cmp	r3, #32
 8017316:	f040 8208 	bne.w	801772a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801731c:	9300      	str	r3, [sp, #0]
 801731e:	2319      	movs	r3, #25
 8017320:	2201      	movs	r2, #1
 8017322:	497b      	ldr	r1, [pc, #492]	; (8017510 <HAL_I2C_Mem_Read+0x224>)
 8017324:	68f8      	ldr	r0, [r7, #12]
 8017326:	f002 f9d7 	bl	80196d8 <I2C_WaitOnFlagUntilTimeout>
 801732a:	4603      	mov	r3, r0
 801732c:	2b00      	cmp	r3, #0
 801732e:	d001      	beq.n	8017334 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8017330:	2302      	movs	r3, #2
 8017332:	e1fb      	b.n	801772c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801733a:	2b01      	cmp	r3, #1
 801733c:	d101      	bne.n	8017342 <HAL_I2C_Mem_Read+0x56>
 801733e:	2302      	movs	r3, #2
 8017340:	e1f4      	b.n	801772c <HAL_I2C_Mem_Read+0x440>
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	2201      	movs	r2, #1
 8017346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	f003 0301 	and.w	r3, r3, #1
 8017354:	2b01      	cmp	r3, #1
 8017356:	d007      	beq.n	8017368 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	681a      	ldr	r2, [r3, #0]
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	f042 0201 	orr.w	r2, r2, #1
 8017366:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	681a      	ldr	r2, [r3, #0]
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017376:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	2222      	movs	r2, #34	; 0x22
 801737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	2240      	movs	r2, #64	; 0x40
 8017384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	2200      	movs	r2, #0
 801738c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8017398:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801739e:	b29a      	uxth	r2, r3
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	4a5b      	ldr	r2, [pc, #364]	; (8017514 <HAL_I2C_Mem_Read+0x228>)
 80173a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80173aa:	88f8      	ldrh	r0, [r7, #6]
 80173ac:	893a      	ldrh	r2, [r7, #8]
 80173ae:	8979      	ldrh	r1, [r7, #10]
 80173b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173b2:	9301      	str	r3, [sp, #4]
 80173b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173b6:	9300      	str	r3, [sp, #0]
 80173b8:	4603      	mov	r3, r0
 80173ba:	68f8      	ldr	r0, [r7, #12]
 80173bc:	f001 fffc 	bl	80193b8 <I2C_RequestMemoryRead>
 80173c0:	4603      	mov	r3, r0
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d001      	beq.n	80173ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80173c6:	2301      	movs	r3, #1
 80173c8:	e1b0      	b.n	801772c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d113      	bne.n	80173fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80173d2:	2300      	movs	r3, #0
 80173d4:	623b      	str	r3, [r7, #32]
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	695b      	ldr	r3, [r3, #20]
 80173dc:	623b      	str	r3, [r7, #32]
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	699b      	ldr	r3, [r3, #24]
 80173e4:	623b      	str	r3, [r7, #32]
 80173e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	681a      	ldr	r2, [r3, #0]
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80173f6:	601a      	str	r2, [r3, #0]
 80173f8:	e184      	b.n	8017704 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173fe:	2b01      	cmp	r3, #1
 8017400:	d11b      	bne.n	801743a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	681a      	ldr	r2, [r3, #0]
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017410:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017412:	2300      	movs	r3, #0
 8017414:	61fb      	str	r3, [r7, #28]
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	695b      	ldr	r3, [r3, #20]
 801741c:	61fb      	str	r3, [r7, #28]
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	699b      	ldr	r3, [r3, #24]
 8017424:	61fb      	str	r3, [r7, #28]
 8017426:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	681a      	ldr	r2, [r3, #0]
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017436:	601a      	str	r2, [r3, #0]
 8017438:	e164      	b.n	8017704 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801743e:	2b02      	cmp	r3, #2
 8017440:	d11b      	bne.n	801747a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	681a      	ldr	r2, [r3, #0]
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017450:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	681a      	ldr	r2, [r3, #0]
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017460:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017462:	2300      	movs	r3, #0
 8017464:	61bb      	str	r3, [r7, #24]
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	695b      	ldr	r3, [r3, #20]
 801746c:	61bb      	str	r3, [r7, #24]
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	699b      	ldr	r3, [r3, #24]
 8017474:	61bb      	str	r3, [r7, #24]
 8017476:	69bb      	ldr	r3, [r7, #24]
 8017478:	e144      	b.n	8017704 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801747a:	2300      	movs	r3, #0
 801747c:	617b      	str	r3, [r7, #20]
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	695b      	ldr	r3, [r3, #20]
 8017484:	617b      	str	r3, [r7, #20]
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	699b      	ldr	r3, [r3, #24]
 801748c:	617b      	str	r3, [r7, #20]
 801748e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8017490:	e138      	b.n	8017704 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017496:	2b03      	cmp	r3, #3
 8017498:	f200 80f1 	bhi.w	801767e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80174a0:	2b01      	cmp	r3, #1
 80174a2:	d123      	bne.n	80174ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80174a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80174a8:	68f8      	ldr	r0, [r7, #12]
 80174aa:	f002 fa9f 	bl	80199ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80174ae:	4603      	mov	r3, r0
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d001      	beq.n	80174b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80174b4:	2301      	movs	r3, #1
 80174b6:	e139      	b.n	801772c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	691a      	ldr	r2, [r3, #16]
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174c2:	b2d2      	uxtb	r2, r2
 80174c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174ca:	1c5a      	adds	r2, r3, #1
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80174d4:	3b01      	subs	r3, #1
 80174d6:	b29a      	uxth	r2, r3
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80174e0:	b29b      	uxth	r3, r3
 80174e2:	3b01      	subs	r3, #1
 80174e4:	b29a      	uxth	r2, r3
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80174ea:	e10b      	b.n	8017704 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80174f0:	2b02      	cmp	r3, #2
 80174f2:	d14e      	bne.n	8017592 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80174f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174f6:	9300      	str	r3, [sp, #0]
 80174f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174fa:	2200      	movs	r2, #0
 80174fc:	4906      	ldr	r1, [pc, #24]	; (8017518 <HAL_I2C_Mem_Read+0x22c>)
 80174fe:	68f8      	ldr	r0, [r7, #12]
 8017500:	f002 f8ea 	bl	80196d8 <I2C_WaitOnFlagUntilTimeout>
 8017504:	4603      	mov	r3, r0
 8017506:	2b00      	cmp	r3, #0
 8017508:	d008      	beq.n	801751c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 801750a:	2301      	movs	r3, #1
 801750c:	e10e      	b.n	801772c <HAL_I2C_Mem_Read+0x440>
 801750e:	bf00      	nop
 8017510:	00100002 	.word	0x00100002
 8017514:	ffff0000 	.word	0xffff0000
 8017518:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	681a      	ldr	r2, [r3, #0]
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801752a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	691a      	ldr	r2, [r3, #16]
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017536:	b2d2      	uxtb	r2, r2
 8017538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801753e:	1c5a      	adds	r2, r3, #1
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017548:	3b01      	subs	r3, #1
 801754a:	b29a      	uxth	r2, r3
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017554:	b29b      	uxth	r3, r3
 8017556:	3b01      	subs	r3, #1
 8017558:	b29a      	uxth	r2, r3
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	691a      	ldr	r2, [r3, #16]
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017568:	b2d2      	uxtb	r2, r2
 801756a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017570:	1c5a      	adds	r2, r3, #1
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801757a:	3b01      	subs	r3, #1
 801757c:	b29a      	uxth	r2, r3
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017586:	b29b      	uxth	r3, r3
 8017588:	3b01      	subs	r3, #1
 801758a:	b29a      	uxth	r2, r3
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017590:	e0b8      	b.n	8017704 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017594:	9300      	str	r3, [sp, #0]
 8017596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017598:	2200      	movs	r2, #0
 801759a:	4966      	ldr	r1, [pc, #408]	; (8017734 <HAL_I2C_Mem_Read+0x448>)
 801759c:	68f8      	ldr	r0, [r7, #12]
 801759e:	f002 f89b 	bl	80196d8 <I2C_WaitOnFlagUntilTimeout>
 80175a2:	4603      	mov	r3, r0
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d001      	beq.n	80175ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80175a8:	2301      	movs	r3, #1
 80175aa:	e0bf      	b.n	801772c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	681a      	ldr	r2, [r3, #0]
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80175ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	691a      	ldr	r2, [r3, #16]
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175c6:	b2d2      	uxtb	r2, r2
 80175c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175ce:	1c5a      	adds	r2, r3, #1
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80175d8:	3b01      	subs	r3, #1
 80175da:	b29a      	uxth	r2, r3
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80175e4:	b29b      	uxth	r3, r3
 80175e6:	3b01      	subs	r3, #1
 80175e8:	b29a      	uxth	r2, r3
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80175ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175f0:	9300      	str	r3, [sp, #0]
 80175f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175f4:	2200      	movs	r2, #0
 80175f6:	494f      	ldr	r1, [pc, #316]	; (8017734 <HAL_I2C_Mem_Read+0x448>)
 80175f8:	68f8      	ldr	r0, [r7, #12]
 80175fa:	f002 f86d 	bl	80196d8 <I2C_WaitOnFlagUntilTimeout>
 80175fe:	4603      	mov	r3, r0
 8017600:	2b00      	cmp	r3, #0
 8017602:	d001      	beq.n	8017608 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8017604:	2301      	movs	r3, #1
 8017606:	e091      	b.n	801772c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	681a      	ldr	r2, [r3, #0]
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	691a      	ldr	r2, [r3, #16]
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017622:	b2d2      	uxtb	r2, r2
 8017624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801762a:	1c5a      	adds	r2, r3, #1
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017634:	3b01      	subs	r3, #1
 8017636:	b29a      	uxth	r2, r3
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017640:	b29b      	uxth	r3, r3
 8017642:	3b01      	subs	r3, #1
 8017644:	b29a      	uxth	r2, r3
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	691a      	ldr	r2, [r3, #16]
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017654:	b2d2      	uxtb	r2, r2
 8017656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801765c:	1c5a      	adds	r2, r3, #1
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017666:	3b01      	subs	r3, #1
 8017668:	b29a      	uxth	r2, r3
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017672:	b29b      	uxth	r3, r3
 8017674:	3b01      	subs	r3, #1
 8017676:	b29a      	uxth	r2, r3
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801767c:	e042      	b.n	8017704 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801767e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017680:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017682:	68f8      	ldr	r0, [r7, #12]
 8017684:	f002 f9b2 	bl	80199ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8017688:	4603      	mov	r3, r0
 801768a:	2b00      	cmp	r3, #0
 801768c:	d001      	beq.n	8017692 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 801768e:	2301      	movs	r3, #1
 8017690:	e04c      	b.n	801772c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	691a      	ldr	r2, [r3, #16]
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801769c:	b2d2      	uxtb	r2, r2
 801769e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176a4:	1c5a      	adds	r2, r3, #1
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176ae:	3b01      	subs	r3, #1
 80176b0:	b29a      	uxth	r2, r3
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80176ba:	b29b      	uxth	r3, r3
 80176bc:	3b01      	subs	r3, #1
 80176be:	b29a      	uxth	r2, r3
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	695b      	ldr	r3, [r3, #20]
 80176ca:	f003 0304 	and.w	r3, r3, #4
 80176ce:	2b04      	cmp	r3, #4
 80176d0:	d118      	bne.n	8017704 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	691a      	ldr	r2, [r3, #16]
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176dc:	b2d2      	uxtb	r2, r2
 80176de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176e4:	1c5a      	adds	r2, r3, #1
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176ee:	3b01      	subs	r3, #1
 80176f0:	b29a      	uxth	r2, r3
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80176fa:	b29b      	uxth	r3, r3
 80176fc:	3b01      	subs	r3, #1
 80176fe:	b29a      	uxth	r2, r3
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017708:	2b00      	cmp	r3, #0
 801770a:	f47f aec2 	bne.w	8017492 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	2220      	movs	r2, #32
 8017712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	2200      	movs	r2, #0
 801771a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	2200      	movs	r2, #0
 8017722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017726:	2300      	movs	r3, #0
 8017728:	e000      	b.n	801772c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 801772a:	2302      	movs	r3, #2
  }
}
 801772c:	4618      	mov	r0, r3
 801772e:	3728      	adds	r7, #40	; 0x28
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}
 8017734:	00010004 	.word	0x00010004

08017738 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017738:	b480      	push	{r7}
 801773a:	b087      	sub	sp, #28
 801773c:	af00      	add	r7, sp, #0
 801773e:	60f8      	str	r0, [r7, #12]
 8017740:	607a      	str	r2, [r7, #4]
 8017742:	461a      	mov	r2, r3
 8017744:	460b      	mov	r3, r1
 8017746:	817b      	strh	r3, [r7, #10]
 8017748:	4613      	mov	r3, r2
 801774a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 801774c:	2300      	movs	r3, #0
 801774e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8017750:	2300      	movs	r3, #0
 8017752:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801775a:	b2db      	uxtb	r3, r3
 801775c:	2b20      	cmp	r3, #32
 801775e:	f040 80a6 	bne.w	80178ae <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801776c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017770:	d005      	beq.n	801777e <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017772:	6a3b      	ldr	r3, [r7, #32]
 8017774:	2b08      	cmp	r3, #8
 8017776:	d002      	beq.n	801777e <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8017778:	6a3b      	ldr	r3, [r7, #32]
 801777a:	2b01      	cmp	r3, #1
 801777c:	d130      	bne.n	80177e0 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801777e:	4b4f      	ldr	r3, [pc, #316]	; (80178bc <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	08db      	lsrs	r3, r3, #3
 8017784:	4a4e      	ldr	r2, [pc, #312]	; (80178c0 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8017786:	fba2 2303 	umull	r2, r3, r2, r3
 801778a:	0a1a      	lsrs	r2, r3, #8
 801778c:	4613      	mov	r3, r2
 801778e:	009b      	lsls	r3, r3, #2
 8017790:	4413      	add	r3, r2
 8017792:	009a      	lsls	r2, r3, #2
 8017794:	4413      	add	r3, r2
 8017796:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8017798:	693b      	ldr	r3, [r7, #16]
 801779a:	3b01      	subs	r3, #1
 801779c:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 801779e:	693b      	ldr	r3, [r7, #16]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d116      	bne.n	80177d2 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	2200      	movs	r2, #0
 80177a8:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	2220      	movs	r2, #32
 80177ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	2200      	movs	r2, #0
 80177b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177be:	f043 0220 	orr.w	r2, r3, #32
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	2200      	movs	r2, #0
 80177ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80177ce:	2301      	movs	r3, #1
 80177d0:	e06e      	b.n	80178b0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	699b      	ldr	r3, [r3, #24]
 80177d8:	f003 0302 	and.w	r3, r3, #2
 80177dc:	2b02      	cmp	r3, #2
 80177de:	d0db      	beq.n	8017798 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80177e6:	2b01      	cmp	r3, #1
 80177e8:	d101      	bne.n	80177ee <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 80177ea:	2302      	movs	r3, #2
 80177ec:	e060      	b.n	80178b0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	2201      	movs	r2, #1
 80177f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	f003 0301 	and.w	r3, r3, #1
 8017800:	2b01      	cmp	r3, #1
 8017802:	d007      	beq.n	8017814 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	681a      	ldr	r2, [r3, #0]
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	f042 0201 	orr.w	r2, r2, #1
 8017812:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	681a      	ldr	r2, [r3, #0]
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017822:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	2221      	movs	r2, #33	; 0x21
 8017828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	2210      	movs	r2, #16
 8017830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	2200      	movs	r2, #0
 8017838:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	687a      	ldr	r2, [r7, #4]
 801783e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	893a      	ldrh	r2, [r7, #8]
 8017844:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801784a:	b29a      	uxth	r2, r3
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	6a3a      	ldr	r2, [r7, #32]
 8017854:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8017856:	897a      	ldrh	r2, [r7, #10]
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017860:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8017862:	697b      	ldr	r3, [r7, #20]
 8017864:	2b11      	cmp	r3, #17
 8017866:	d10c      	bne.n	8017882 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8017868:	6a3b      	ldr	r3, [r7, #32]
 801786a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801786e:	d003      	beq.n	8017878 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8017870:	6a3b      	ldr	r3, [r7, #32]
 8017872:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017876:	d101      	bne.n	801787c <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8017878:	2301      	movs	r3, #1
 801787a:	e000      	b.n	801787e <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 801787c:	2300      	movs	r3, #0
 801787e:	2b01      	cmp	r3, #1
 8017880:	d107      	bne.n	8017892 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	681a      	ldr	r2, [r3, #0]
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017890:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	2200      	movs	r2, #0
 8017896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	685a      	ldr	r2, [r3, #4]
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80178a8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80178aa:	2300      	movs	r3, #0
 80178ac:	e000      	b.n	80178b0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 80178ae:	2302      	movs	r3, #2
  }
}
 80178b0:	4618      	mov	r0, r3
 80178b2:	371c      	adds	r7, #28
 80178b4:	46bd      	mov	sp, r7
 80178b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ba:	4770      	bx	lr
 80178bc:	2000005c 	.word	0x2000005c
 80178c0:	14f8b589 	.word	0x14f8b589

080178c4 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80178c4:	b480      	push	{r7}
 80178c6:	b089      	sub	sp, #36	; 0x24
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	60f8      	str	r0, [r7, #12]
 80178cc:	607a      	str	r2, [r7, #4]
 80178ce:	461a      	mov	r2, r3
 80178d0:	460b      	mov	r3, r1
 80178d2:	817b      	strh	r3, [r7, #10]
 80178d4:	4613      	mov	r3, r2
 80178d6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80178d8:	2300      	movs	r3, #0
 80178da:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80178dc:	2300      	movs	r3, #0
 80178de:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80178e0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80178e4:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80178ec:	b2db      	uxtb	r3, r3
 80178ee:	2b20      	cmp	r3, #32
 80178f0:	f040 80da 	bne.w	8017aa8 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80178fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017902:	d005      	beq.n	8017910 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8017904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017906:	2b08      	cmp	r3, #8
 8017908:	d002      	beq.n	8017910 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 801790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801790c:	2b01      	cmp	r3, #1
 801790e:	d130      	bne.n	8017972 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8017910:	4b69      	ldr	r3, [pc, #420]	; (8017ab8 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	08db      	lsrs	r3, r3, #3
 8017916:	4a69      	ldr	r2, [pc, #420]	; (8017abc <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8017918:	fba2 2303 	umull	r2, r3, r2, r3
 801791c:	0a1a      	lsrs	r2, r3, #8
 801791e:	4613      	mov	r3, r2
 8017920:	009b      	lsls	r3, r3, #2
 8017922:	4413      	add	r3, r2
 8017924:	009a      	lsls	r2, r3, #2
 8017926:	4413      	add	r3, r2
 8017928:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 801792a:	697b      	ldr	r3, [r7, #20]
 801792c:	3b01      	subs	r3, #1
 801792e:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8017930:	697b      	ldr	r3, [r7, #20]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d116      	bne.n	8017964 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	2200      	movs	r2, #0
 801793a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	2220      	movs	r2, #32
 8017940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	2200      	movs	r2, #0
 8017948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017950:	f043 0220 	orr.w	r2, r3, #32
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	2200      	movs	r2, #0
 801795c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8017960:	2301      	movs	r3, #1
 8017962:	e0a2      	b.n	8017aaa <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	699b      	ldr	r3, [r3, #24]
 801796a:	f003 0302 	and.w	r3, r3, #2
 801796e:	2b02      	cmp	r3, #2
 8017970:	d0db      	beq.n	801792a <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017978:	2b01      	cmp	r3, #1
 801797a:	d101      	bne.n	8017980 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 801797c:	2302      	movs	r3, #2
 801797e:	e094      	b.n	8017aaa <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	2201      	movs	r2, #1
 8017984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	f003 0301 	and.w	r3, r3, #1
 8017992:	2b01      	cmp	r3, #1
 8017994:	d007      	beq.n	80179a6 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	681a      	ldr	r2, [r3, #0]
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	f042 0201 	orr.w	r2, r2, #1
 80179a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	681a      	ldr	r2, [r3, #0]
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80179b4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	2222      	movs	r2, #34	; 0x22
 80179ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	2210      	movs	r2, #16
 80179c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	2200      	movs	r2, #0
 80179ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	687a      	ldr	r2, [r7, #4]
 80179d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	893a      	ldrh	r2, [r7, #8]
 80179d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80179dc:	b29a      	uxth	r2, r3
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80179e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80179e8:	897a      	ldrh	r2, [r7, #10]
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179f2:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80179f8:	b29b      	uxth	r3, r3
 80179fa:	2b02      	cmp	r3, #2
 80179fc:	d126      	bne.n	8017a4c <HAL_I2C_Master_Seq_Receive_IT+0x188>
 80179fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a00:	2b20      	cmp	r3, #32
 8017a02:	d002      	beq.n	8017a0a <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8017a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a06:	2b10      	cmp	r3, #16
 8017a08:	d120      	bne.n	8017a4c <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017a0a:	69bb      	ldr	r3, [r7, #24]
 8017a0c:	2b12      	cmp	r3, #18
 8017a0e:	d114      	bne.n	8017a3a <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	681a      	ldr	r2, [r3, #0]
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017a1e:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	681a      	ldr	r2, [r3, #0]
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017a2e:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8017a30:	69fb      	ldr	r3, [r7, #28]
 8017a32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017a36:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017a38:	e010      	b.n	8017a5c <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	681a      	ldr	r2, [r3, #0]
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017a48:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017a4a:	e007      	b.n	8017a5c <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	681a      	ldr	r2, [r3, #0]
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017a5a:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8017a5c:	69bb      	ldr	r3, [r7, #24]
 8017a5e:	2b12      	cmp	r3, #18
 8017a60:	d10c      	bne.n	8017a7c <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8017a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a64:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017a68:	d003      	beq.n	8017a72 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8017a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a6c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017a70:	d101      	bne.n	8017a76 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8017a72:	2301      	movs	r3, #1
 8017a74:	e000      	b.n	8017a78 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8017a76:	2300      	movs	r3, #0
 8017a78:	2b01      	cmp	r3, #1
 8017a7a:	d107      	bne.n	8017a8c <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	681a      	ldr	r2, [r3, #0]
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017a8a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	2200      	movs	r2, #0
 8017a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	6859      	ldr	r1, [r3, #4]
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	69fa      	ldr	r2, [r7, #28]
 8017aa0:	430a      	orrs	r2, r1
 8017aa2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	e000      	b.n	8017aaa <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8017aa8:	2302      	movs	r3, #2
  }
}
 8017aaa:	4618      	mov	r0, r3
 8017aac:	3724      	adds	r7, #36	; 0x24
 8017aae:	46bd      	mov	sp, r7
 8017ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab4:	4770      	bx	lr
 8017ab6:	bf00      	nop
 8017ab8:	2000005c 	.word	0x2000005c
 8017abc:	14f8b589 	.word	0x14f8b589

08017ac0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b088      	sub	sp, #32
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8017ac8:	2300      	movs	r3, #0
 8017aca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	685b      	ldr	r3, [r3, #4]
 8017ad2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ad8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017ae0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017ae8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8017aea:	7bfb      	ldrb	r3, [r7, #15]
 8017aec:	2b10      	cmp	r3, #16
 8017aee:	d003      	beq.n	8017af8 <HAL_I2C_EV_IRQHandler+0x38>
 8017af0:	7bfb      	ldrb	r3, [r7, #15]
 8017af2:	2b40      	cmp	r3, #64	; 0x40
 8017af4:	f040 80c1 	bne.w	8017c7a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	699b      	ldr	r3, [r3, #24]
 8017afe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	695b      	ldr	r3, [r3, #20]
 8017b06:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8017b08:	69fb      	ldr	r3, [r7, #28]
 8017b0a:	f003 0301 	and.w	r3, r3, #1
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d10d      	bne.n	8017b2e <HAL_I2C_EV_IRQHandler+0x6e>
 8017b12:	693b      	ldr	r3, [r7, #16]
 8017b14:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017b18:	d003      	beq.n	8017b22 <HAL_I2C_EV_IRQHandler+0x62>
 8017b1a:	693b      	ldr	r3, [r7, #16]
 8017b1c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017b20:	d101      	bne.n	8017b26 <HAL_I2C_EV_IRQHandler+0x66>
 8017b22:	2301      	movs	r3, #1
 8017b24:	e000      	b.n	8017b28 <HAL_I2C_EV_IRQHandler+0x68>
 8017b26:	2300      	movs	r3, #0
 8017b28:	2b01      	cmp	r3, #1
 8017b2a:	f000 8132 	beq.w	8017d92 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017b2e:	69fb      	ldr	r3, [r7, #28]
 8017b30:	f003 0301 	and.w	r3, r3, #1
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d00c      	beq.n	8017b52 <HAL_I2C_EV_IRQHandler+0x92>
 8017b38:	697b      	ldr	r3, [r7, #20]
 8017b3a:	0a5b      	lsrs	r3, r3, #9
 8017b3c:	f003 0301 	and.w	r3, r3, #1
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d006      	beq.n	8017b52 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8017b44:	6878      	ldr	r0, [r7, #4]
 8017b46:	f001 ffd6 	bl	8019af6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8017b4a:	6878      	ldr	r0, [r7, #4]
 8017b4c:	f000 fd83 	bl	8018656 <I2C_Master_SB>
 8017b50:	e092      	b.n	8017c78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017b52:	69fb      	ldr	r3, [r7, #28]
 8017b54:	08db      	lsrs	r3, r3, #3
 8017b56:	f003 0301 	and.w	r3, r3, #1
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d009      	beq.n	8017b72 <HAL_I2C_EV_IRQHandler+0xb2>
 8017b5e:	697b      	ldr	r3, [r7, #20]
 8017b60:	0a5b      	lsrs	r3, r3, #9
 8017b62:	f003 0301 	and.w	r3, r3, #1
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d003      	beq.n	8017b72 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8017b6a:	6878      	ldr	r0, [r7, #4]
 8017b6c:	f000 fdf9 	bl	8018762 <I2C_Master_ADD10>
 8017b70:	e082      	b.n	8017c78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017b72:	69fb      	ldr	r3, [r7, #28]
 8017b74:	085b      	lsrs	r3, r3, #1
 8017b76:	f003 0301 	and.w	r3, r3, #1
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d009      	beq.n	8017b92 <HAL_I2C_EV_IRQHandler+0xd2>
 8017b7e:	697b      	ldr	r3, [r7, #20]
 8017b80:	0a5b      	lsrs	r3, r3, #9
 8017b82:	f003 0301 	and.w	r3, r3, #1
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d003      	beq.n	8017b92 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8017b8a:	6878      	ldr	r0, [r7, #4]
 8017b8c:	f000 fe13 	bl	80187b6 <I2C_Master_ADDR>
 8017b90:	e072      	b.n	8017c78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8017b92:	69bb      	ldr	r3, [r7, #24]
 8017b94:	089b      	lsrs	r3, r3, #2
 8017b96:	f003 0301 	and.w	r3, r3, #1
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d03b      	beq.n	8017c16 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	685b      	ldr	r3, [r3, #4]
 8017ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017bac:	f000 80f3 	beq.w	8017d96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017bb0:	69fb      	ldr	r3, [r7, #28]
 8017bb2:	09db      	lsrs	r3, r3, #7
 8017bb4:	f003 0301 	and.w	r3, r3, #1
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d00f      	beq.n	8017bdc <HAL_I2C_EV_IRQHandler+0x11c>
 8017bbc:	697b      	ldr	r3, [r7, #20]
 8017bbe:	0a9b      	lsrs	r3, r3, #10
 8017bc0:	f003 0301 	and.w	r3, r3, #1
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d009      	beq.n	8017bdc <HAL_I2C_EV_IRQHandler+0x11c>
 8017bc8:	69fb      	ldr	r3, [r7, #28]
 8017bca:	089b      	lsrs	r3, r3, #2
 8017bcc:	f003 0301 	and.w	r3, r3, #1
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d103      	bne.n	8017bdc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8017bd4:	6878      	ldr	r0, [r7, #4]
 8017bd6:	f000 f9f3 	bl	8017fc0 <I2C_MasterTransmit_TXE>
 8017bda:	e04d      	b.n	8017c78 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017bdc:	69fb      	ldr	r3, [r7, #28]
 8017bde:	089b      	lsrs	r3, r3, #2
 8017be0:	f003 0301 	and.w	r3, r3, #1
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	f000 80d6 	beq.w	8017d96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8017bea:	697b      	ldr	r3, [r7, #20]
 8017bec:	0a5b      	lsrs	r3, r3, #9
 8017bee:	f003 0301 	and.w	r3, r3, #1
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	f000 80cf 	beq.w	8017d96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8017bf8:	7bbb      	ldrb	r3, [r7, #14]
 8017bfa:	2b21      	cmp	r3, #33	; 0x21
 8017bfc:	d103      	bne.n	8017c06 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8017bfe:	6878      	ldr	r0, [r7, #4]
 8017c00:	f000 fa7a 	bl	80180f8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017c04:	e0c7      	b.n	8017d96 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8017c06:	7bfb      	ldrb	r3, [r7, #15]
 8017c08:	2b40      	cmp	r3, #64	; 0x40
 8017c0a:	f040 80c4 	bne.w	8017d96 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8017c0e:	6878      	ldr	r0, [r7, #4]
 8017c10:	f000 fae8 	bl	80181e4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017c14:	e0bf      	b.n	8017d96 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	685b      	ldr	r3, [r3, #4]
 8017c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017c24:	f000 80b7 	beq.w	8017d96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017c28:	69fb      	ldr	r3, [r7, #28]
 8017c2a:	099b      	lsrs	r3, r3, #6
 8017c2c:	f003 0301 	and.w	r3, r3, #1
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d00f      	beq.n	8017c54 <HAL_I2C_EV_IRQHandler+0x194>
 8017c34:	697b      	ldr	r3, [r7, #20]
 8017c36:	0a9b      	lsrs	r3, r3, #10
 8017c38:	f003 0301 	and.w	r3, r3, #1
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d009      	beq.n	8017c54 <HAL_I2C_EV_IRQHandler+0x194>
 8017c40:	69fb      	ldr	r3, [r7, #28]
 8017c42:	089b      	lsrs	r3, r3, #2
 8017c44:	f003 0301 	and.w	r3, r3, #1
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d103      	bne.n	8017c54 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8017c4c:	6878      	ldr	r0, [r7, #4]
 8017c4e:	f000 fb5d 	bl	801830c <I2C_MasterReceive_RXNE>
 8017c52:	e011      	b.n	8017c78 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017c54:	69fb      	ldr	r3, [r7, #28]
 8017c56:	089b      	lsrs	r3, r3, #2
 8017c58:	f003 0301 	and.w	r3, r3, #1
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	f000 809a 	beq.w	8017d96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8017c62:	697b      	ldr	r3, [r7, #20]
 8017c64:	0a5b      	lsrs	r3, r3, #9
 8017c66:	f003 0301 	and.w	r3, r3, #1
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	f000 8093 	beq.w	8017d96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8017c70:	6878      	ldr	r0, [r7, #4]
 8017c72:	f000 fc06 	bl	8018482 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017c76:	e08e      	b.n	8017d96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8017c78:	e08d      	b.n	8017d96 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d004      	beq.n	8017c8c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	695b      	ldr	r3, [r3, #20]
 8017c88:	61fb      	str	r3, [r7, #28]
 8017c8a:	e007      	b.n	8017c9c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	699b      	ldr	r3, [r3, #24]
 8017c92:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	695b      	ldr	r3, [r3, #20]
 8017c9a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017c9c:	69fb      	ldr	r3, [r7, #28]
 8017c9e:	085b      	lsrs	r3, r3, #1
 8017ca0:	f003 0301 	and.w	r3, r3, #1
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d012      	beq.n	8017cce <HAL_I2C_EV_IRQHandler+0x20e>
 8017ca8:	697b      	ldr	r3, [r7, #20]
 8017caa:	0a5b      	lsrs	r3, r3, #9
 8017cac:	f003 0301 	and.w	r3, r3, #1
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d00c      	beq.n	8017cce <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d003      	beq.n	8017cc4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	699b      	ldr	r3, [r3, #24]
 8017cc2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8017cc4:	69b9      	ldr	r1, [r7, #24]
 8017cc6:	6878      	ldr	r0, [r7, #4]
 8017cc8:	f000 ffc4 	bl	8018c54 <I2C_Slave_ADDR>
 8017ccc:	e066      	b.n	8017d9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017cce:	69fb      	ldr	r3, [r7, #28]
 8017cd0:	091b      	lsrs	r3, r3, #4
 8017cd2:	f003 0301 	and.w	r3, r3, #1
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d009      	beq.n	8017cee <HAL_I2C_EV_IRQHandler+0x22e>
 8017cda:	697b      	ldr	r3, [r7, #20]
 8017cdc:	0a5b      	lsrs	r3, r3, #9
 8017cde:	f003 0301 	and.w	r3, r3, #1
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d003      	beq.n	8017cee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8017ce6:	6878      	ldr	r0, [r7, #4]
 8017ce8:	f000 fffe 	bl	8018ce8 <I2C_Slave_STOPF>
 8017cec:	e056      	b.n	8017d9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017cee:	7bbb      	ldrb	r3, [r7, #14]
 8017cf0:	2b21      	cmp	r3, #33	; 0x21
 8017cf2:	d002      	beq.n	8017cfa <HAL_I2C_EV_IRQHandler+0x23a>
 8017cf4:	7bbb      	ldrb	r3, [r7, #14]
 8017cf6:	2b29      	cmp	r3, #41	; 0x29
 8017cf8:	d125      	bne.n	8017d46 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017cfa:	69fb      	ldr	r3, [r7, #28]
 8017cfc:	09db      	lsrs	r3, r3, #7
 8017cfe:	f003 0301 	and.w	r3, r3, #1
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d00f      	beq.n	8017d26 <HAL_I2C_EV_IRQHandler+0x266>
 8017d06:	697b      	ldr	r3, [r7, #20]
 8017d08:	0a9b      	lsrs	r3, r3, #10
 8017d0a:	f003 0301 	and.w	r3, r3, #1
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d009      	beq.n	8017d26 <HAL_I2C_EV_IRQHandler+0x266>
 8017d12:	69fb      	ldr	r3, [r7, #28]
 8017d14:	089b      	lsrs	r3, r3, #2
 8017d16:	f003 0301 	and.w	r3, r3, #1
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d103      	bne.n	8017d26 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8017d1e:	6878      	ldr	r0, [r7, #4]
 8017d20:	f000 feda 	bl	8018ad8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017d24:	e039      	b.n	8017d9a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017d26:	69fb      	ldr	r3, [r7, #28]
 8017d28:	089b      	lsrs	r3, r3, #2
 8017d2a:	f003 0301 	and.w	r3, r3, #1
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d033      	beq.n	8017d9a <HAL_I2C_EV_IRQHandler+0x2da>
 8017d32:	697b      	ldr	r3, [r7, #20]
 8017d34:	0a5b      	lsrs	r3, r3, #9
 8017d36:	f003 0301 	and.w	r3, r3, #1
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d02d      	beq.n	8017d9a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8017d3e:	6878      	ldr	r0, [r7, #4]
 8017d40:	f000 ff07 	bl	8018b52 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017d44:	e029      	b.n	8017d9a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017d46:	69fb      	ldr	r3, [r7, #28]
 8017d48:	099b      	lsrs	r3, r3, #6
 8017d4a:	f003 0301 	and.w	r3, r3, #1
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d00f      	beq.n	8017d72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8017d52:	697b      	ldr	r3, [r7, #20]
 8017d54:	0a9b      	lsrs	r3, r3, #10
 8017d56:	f003 0301 	and.w	r3, r3, #1
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d009      	beq.n	8017d72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8017d5e:	69fb      	ldr	r3, [r7, #28]
 8017d60:	089b      	lsrs	r3, r3, #2
 8017d62:	f003 0301 	and.w	r3, r3, #1
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d103      	bne.n	8017d72 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8017d6a:	6878      	ldr	r0, [r7, #4]
 8017d6c:	f000 ff12 	bl	8018b94 <I2C_SlaveReceive_RXNE>
 8017d70:	e014      	b.n	8017d9c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017d72:	69fb      	ldr	r3, [r7, #28]
 8017d74:	089b      	lsrs	r3, r3, #2
 8017d76:	f003 0301 	and.w	r3, r3, #1
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d00e      	beq.n	8017d9c <HAL_I2C_EV_IRQHandler+0x2dc>
 8017d7e:	697b      	ldr	r3, [r7, #20]
 8017d80:	0a5b      	lsrs	r3, r3, #9
 8017d82:	f003 0301 	and.w	r3, r3, #1
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d008      	beq.n	8017d9c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8017d8a:	6878      	ldr	r0, [r7, #4]
 8017d8c:	f000 ff40 	bl	8018c10 <I2C_SlaveReceive_BTF>
 8017d90:	e004      	b.n	8017d9c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8017d92:	bf00      	nop
 8017d94:	e002      	b.n	8017d9c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017d96:	bf00      	nop
 8017d98:	e000      	b.n	8017d9c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017d9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8017d9c:	3720      	adds	r7, #32
 8017d9e:	46bd      	mov	sp, r7
 8017da0:	bd80      	pop	{r7, pc}

08017da2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8017da2:	b580      	push	{r7, lr}
 8017da4:	b08a      	sub	sp, #40	; 0x28
 8017da6:	af00      	add	r7, sp, #0
 8017da8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	695b      	ldr	r3, [r3, #20]
 8017db0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	685b      	ldr	r3, [r3, #4]
 8017db8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8017dba:	2300      	movs	r3, #0
 8017dbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017dc4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8017dc6:	6a3b      	ldr	r3, [r7, #32]
 8017dc8:	0a1b      	lsrs	r3, r3, #8
 8017dca:	f003 0301 	and.w	r3, r3, #1
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d00e      	beq.n	8017df0 <HAL_I2C_ER_IRQHandler+0x4e>
 8017dd2:	69fb      	ldr	r3, [r7, #28]
 8017dd4:	0a1b      	lsrs	r3, r3, #8
 8017dd6:	f003 0301 	and.w	r3, r3, #1
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d008      	beq.n	8017df0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8017dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de0:	f043 0301 	orr.w	r3, r3, #1
 8017de4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8017dee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8017df0:	6a3b      	ldr	r3, [r7, #32]
 8017df2:	0a5b      	lsrs	r3, r3, #9
 8017df4:	f003 0301 	and.w	r3, r3, #1
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d00e      	beq.n	8017e1a <HAL_I2C_ER_IRQHandler+0x78>
 8017dfc:	69fb      	ldr	r3, [r7, #28]
 8017dfe:	0a1b      	lsrs	r3, r3, #8
 8017e00:	f003 0301 	and.w	r3, r3, #1
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d008      	beq.n	8017e1a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8017e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e0a:	f043 0302 	orr.w	r3, r3, #2
 8017e0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8017e18:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8017e1a:	6a3b      	ldr	r3, [r7, #32]
 8017e1c:	0a9b      	lsrs	r3, r3, #10
 8017e1e:	f003 0301 	and.w	r3, r3, #1
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d03f      	beq.n	8017ea6 <HAL_I2C_ER_IRQHandler+0x104>
 8017e26:	69fb      	ldr	r3, [r7, #28]
 8017e28:	0a1b      	lsrs	r3, r3, #8
 8017e2a:	f003 0301 	and.w	r3, r3, #1
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d039      	beq.n	8017ea6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8017e32:	7efb      	ldrb	r3, [r7, #27]
 8017e34:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017e3a:	b29b      	uxth	r3, r3
 8017e3c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017e44:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e4a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8017e4c:	7ebb      	ldrb	r3, [r7, #26]
 8017e4e:	2b20      	cmp	r3, #32
 8017e50:	d112      	bne.n	8017e78 <HAL_I2C_ER_IRQHandler+0xd6>
 8017e52:	697b      	ldr	r3, [r7, #20]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d10f      	bne.n	8017e78 <HAL_I2C_ER_IRQHandler+0xd6>
 8017e58:	7cfb      	ldrb	r3, [r7, #19]
 8017e5a:	2b21      	cmp	r3, #33	; 0x21
 8017e5c:	d008      	beq.n	8017e70 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8017e5e:	7cfb      	ldrb	r3, [r7, #19]
 8017e60:	2b29      	cmp	r3, #41	; 0x29
 8017e62:	d005      	beq.n	8017e70 <HAL_I2C_ER_IRQHandler+0xce>
 8017e64:	7cfb      	ldrb	r3, [r7, #19]
 8017e66:	2b28      	cmp	r3, #40	; 0x28
 8017e68:	d106      	bne.n	8017e78 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	2b21      	cmp	r3, #33	; 0x21
 8017e6e:	d103      	bne.n	8017e78 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8017e70:	6878      	ldr	r0, [r7, #4]
 8017e72:	f001 f869 	bl	8018f48 <I2C_Slave_AF>
 8017e76:	e016      	b.n	8017ea6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8017e80:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8017e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e84:	f043 0304 	orr.w	r3, r3, #4
 8017e88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8017e8a:	7efb      	ldrb	r3, [r7, #27]
 8017e8c:	2b10      	cmp	r3, #16
 8017e8e:	d002      	beq.n	8017e96 <HAL_I2C_ER_IRQHandler+0xf4>
 8017e90:	7efb      	ldrb	r3, [r7, #27]
 8017e92:	2b40      	cmp	r3, #64	; 0x40
 8017e94:	d107      	bne.n	8017ea6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	681a      	ldr	r2, [r3, #0]
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017ea4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8017ea6:	6a3b      	ldr	r3, [r7, #32]
 8017ea8:	0adb      	lsrs	r3, r3, #11
 8017eaa:	f003 0301 	and.w	r3, r3, #1
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d00e      	beq.n	8017ed0 <HAL_I2C_ER_IRQHandler+0x12e>
 8017eb2:	69fb      	ldr	r3, [r7, #28]
 8017eb4:	0a1b      	lsrs	r3, r3, #8
 8017eb6:	f003 0301 	and.w	r3, r3, #1
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d008      	beq.n	8017ed0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8017ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec0:	f043 0308 	orr.w	r3, r3, #8
 8017ec4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8017ece:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8017ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d008      	beq.n	8017ee8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017edc:	431a      	orrs	r2, r3
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8017ee2:	6878      	ldr	r0, [r7, #4]
 8017ee4:	f001 f8a0 	bl	8019028 <I2C_ITError>
  }
}
 8017ee8:	bf00      	nop
 8017eea:	3728      	adds	r7, #40	; 0x28
 8017eec:	46bd      	mov	sp, r7
 8017eee:	bd80      	pop	{r7, pc}

08017ef0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017ef0:	b480      	push	{r7}
 8017ef2:	b083      	sub	sp, #12
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8017ef8:	bf00      	nop
 8017efa:	370c      	adds	r7, #12
 8017efc:	46bd      	mov	sp, r7
 8017efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f02:	4770      	bx	lr

08017f04 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017f04:	b480      	push	{r7}
 8017f06:	b083      	sub	sp, #12
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8017f0c:	bf00      	nop
 8017f0e:	370c      	adds	r7, #12
 8017f10:	46bd      	mov	sp, r7
 8017f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f16:	4770      	bx	lr

08017f18 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017f18:	b480      	push	{r7}
 8017f1a:	b083      	sub	sp, #12
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8017f20:	bf00      	nop
 8017f22:	370c      	adds	r7, #12
 8017f24:	46bd      	mov	sp, r7
 8017f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f2a:	4770      	bx	lr

08017f2c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017f2c:	b480      	push	{r7}
 8017f2e:	b083      	sub	sp, #12
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8017f34:	bf00      	nop
 8017f36:	370c      	adds	r7, #12
 8017f38:	46bd      	mov	sp, r7
 8017f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f3e:	4770      	bx	lr

08017f40 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8017f40:	b480      	push	{r7}
 8017f42:	b083      	sub	sp, #12
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
 8017f48:	460b      	mov	r3, r1
 8017f4a:	70fb      	strb	r3, [r7, #3]
 8017f4c:	4613      	mov	r3, r2
 8017f4e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8017f50:	bf00      	nop
 8017f52:	370c      	adds	r7, #12
 8017f54:	46bd      	mov	sp, r7
 8017f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5a:	4770      	bx	lr

08017f5c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017f5c:	b480      	push	{r7}
 8017f5e:	b083      	sub	sp, #12
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8017f64:	bf00      	nop
 8017f66:	370c      	adds	r7, #12
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f6e:	4770      	bx	lr

08017f70 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017f70:	b480      	push	{r7}
 8017f72:	b083      	sub	sp, #12
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8017f78:	bf00      	nop
 8017f7a:	370c      	adds	r7, #12
 8017f7c:	46bd      	mov	sp, r7
 8017f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f82:	4770      	bx	lr

08017f84 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017f84:	b480      	push	{r7}
 8017f86:	b083      	sub	sp, #12
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8017f8c:	bf00      	nop
 8017f8e:	370c      	adds	r7, #12
 8017f90:	46bd      	mov	sp, r7
 8017f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f96:	4770      	bx	lr

08017f98 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8017f98:	b480      	push	{r7}
 8017f9a:	b083      	sub	sp, #12
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8017fa0:	bf00      	nop
 8017fa2:	370c      	adds	r7, #12
 8017fa4:	46bd      	mov	sp, r7
 8017fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017faa:	4770      	bx	lr

08017fac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017fac:	b480      	push	{r7}
 8017fae:	b083      	sub	sp, #12
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8017fb4:	bf00      	nop
 8017fb6:	370c      	adds	r7, #12
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fbe:	4770      	bx	lr

08017fc0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b084      	sub	sp, #16
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017fce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017fd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fdc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d150      	bne.n	8018088 <I2C_MasterTransmit_TXE+0xc8>
 8017fe6:	7bfb      	ldrb	r3, [r7, #15]
 8017fe8:	2b21      	cmp	r3, #33	; 0x21
 8017fea:	d14d      	bne.n	8018088 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8017fec:	68bb      	ldr	r3, [r7, #8]
 8017fee:	2b08      	cmp	r3, #8
 8017ff0:	d01d      	beq.n	801802e <I2C_MasterTransmit_TXE+0x6e>
 8017ff2:	68bb      	ldr	r3, [r7, #8]
 8017ff4:	2b20      	cmp	r3, #32
 8017ff6:	d01a      	beq.n	801802e <I2C_MasterTransmit_TXE+0x6e>
 8017ff8:	68bb      	ldr	r3, [r7, #8]
 8017ffa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017ffe:	d016      	beq.n	801802e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	685a      	ldr	r2, [r3, #4]
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801800e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	2211      	movs	r2, #17
 8018014:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	2200      	movs	r2, #0
 801801a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	2220      	movs	r2, #32
 8018022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8018026:	6878      	ldr	r0, [r7, #4]
 8018028:	f7ff ff62 	bl	8017ef0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801802c:	e060      	b.n	80180f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	685a      	ldr	r2, [r3, #4]
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801803c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	681a      	ldr	r2, [r3, #0]
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801804c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	2200      	movs	r2, #0
 8018052:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	2220      	movs	r2, #32
 8018058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018062:	b2db      	uxtb	r3, r3
 8018064:	2b40      	cmp	r3, #64	; 0x40
 8018066:	d107      	bne.n	8018078 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	2200      	movs	r2, #0
 801806c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8018070:	6878      	ldr	r0, [r7, #4]
 8018072:	f7ff ff7d 	bl	8017f70 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018076:	e03b      	b.n	80180f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	2200      	movs	r2, #0
 801807c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8018080:	6878      	ldr	r0, [r7, #4]
 8018082:	f7ff ff35 	bl	8017ef0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018086:	e033      	b.n	80180f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8018088:	7bfb      	ldrb	r3, [r7, #15]
 801808a:	2b21      	cmp	r3, #33	; 0x21
 801808c:	d005      	beq.n	801809a <I2C_MasterTransmit_TXE+0xda>
 801808e:	7bbb      	ldrb	r3, [r7, #14]
 8018090:	2b40      	cmp	r3, #64	; 0x40
 8018092:	d12d      	bne.n	80180f0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8018094:	7bfb      	ldrb	r3, [r7, #15]
 8018096:	2b22      	cmp	r3, #34	; 0x22
 8018098:	d12a      	bne.n	80180f0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801809e:	b29b      	uxth	r3, r3
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d108      	bne.n	80180b6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	685a      	ldr	r2, [r3, #4]
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80180b2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80180b4:	e01c      	b.n	80180f0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80180bc:	b2db      	uxtb	r3, r3
 80180be:	2b40      	cmp	r3, #64	; 0x40
 80180c0:	d103      	bne.n	80180ca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80180c2:	6878      	ldr	r0, [r7, #4]
 80180c4:	f000 f88e 	bl	80181e4 <I2C_MemoryTransmit_TXE_BTF>
}
 80180c8:	e012      	b.n	80180f0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180ce:	781a      	ldrb	r2, [r3, #0]
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180da:	1c5a      	adds	r2, r3, #1
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80180e4:	b29b      	uxth	r3, r3
 80180e6:	3b01      	subs	r3, #1
 80180e8:	b29a      	uxth	r2, r3
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80180ee:	e7ff      	b.n	80180f0 <I2C_MasterTransmit_TXE+0x130>
 80180f0:	bf00      	nop
 80180f2:	3710      	adds	r7, #16
 80180f4:	46bd      	mov	sp, r7
 80180f6:	bd80      	pop	{r7, pc}

080180f8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b084      	sub	sp, #16
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018104:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801810c:	b2db      	uxtb	r3, r3
 801810e:	2b21      	cmp	r3, #33	; 0x21
 8018110:	d164      	bne.n	80181dc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018116:	b29b      	uxth	r3, r3
 8018118:	2b00      	cmp	r3, #0
 801811a:	d012      	beq.n	8018142 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018120:	781a      	ldrb	r2, [r3, #0]
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801812c:	1c5a      	adds	r2, r3, #1
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018136:	b29b      	uxth	r3, r3
 8018138:	3b01      	subs	r3, #1
 801813a:	b29a      	uxth	r2, r3
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8018140:	e04c      	b.n	80181dc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	2b08      	cmp	r3, #8
 8018146:	d01d      	beq.n	8018184 <I2C_MasterTransmit_BTF+0x8c>
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	2b20      	cmp	r3, #32
 801814c:	d01a      	beq.n	8018184 <I2C_MasterTransmit_BTF+0x8c>
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018154:	d016      	beq.n	8018184 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	685a      	ldr	r2, [r3, #4]
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018164:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	2211      	movs	r2, #17
 801816a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	2200      	movs	r2, #0
 8018170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	2220      	movs	r2, #32
 8018178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801817c:	6878      	ldr	r0, [r7, #4]
 801817e:	f7ff feb7 	bl	8017ef0 <HAL_I2C_MasterTxCpltCallback>
}
 8018182:	e02b      	b.n	80181dc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	685a      	ldr	r2, [r3, #4]
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018192:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	681a      	ldr	r2, [r3, #0]
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80181a2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	2200      	movs	r2, #0
 80181a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	2220      	movs	r2, #32
 80181ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80181b8:	b2db      	uxtb	r3, r3
 80181ba:	2b40      	cmp	r3, #64	; 0x40
 80181bc:	d107      	bne.n	80181ce <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	2200      	movs	r2, #0
 80181c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80181c6:	6878      	ldr	r0, [r7, #4]
 80181c8:	f7ff fed2 	bl	8017f70 <HAL_I2C_MemTxCpltCallback>
}
 80181cc:	e006      	b.n	80181dc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	2200      	movs	r2, #0
 80181d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80181d6:	6878      	ldr	r0, [r7, #4]
 80181d8:	f7ff fe8a 	bl	8017ef0 <HAL_I2C_MasterTxCpltCallback>
}
 80181dc:	bf00      	nop
 80181de:	3710      	adds	r7, #16
 80181e0:	46bd      	mov	sp, r7
 80181e2:	bd80      	pop	{r7, pc}

080181e4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b084      	sub	sp, #16
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80181f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d11d      	bne.n	8018238 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018200:	2b01      	cmp	r3, #1
 8018202:	d10b      	bne.n	801821c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018208:	b2da      	uxtb	r2, r3
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018214:	1c9a      	adds	r2, r3, #2
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801821a:	e073      	b.n	8018304 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018220:	b29b      	uxth	r3, r3
 8018222:	121b      	asrs	r3, r3, #8
 8018224:	b2da      	uxtb	r2, r3
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018230:	1c5a      	adds	r2, r3, #1
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018236:	e065      	b.n	8018304 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801823c:	2b01      	cmp	r3, #1
 801823e:	d10b      	bne.n	8018258 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018244:	b2da      	uxtb	r2, r3
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018250:	1c5a      	adds	r2, r3, #1
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018256:	e055      	b.n	8018304 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801825c:	2b02      	cmp	r3, #2
 801825e:	d151      	bne.n	8018304 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8018260:	7bfb      	ldrb	r3, [r7, #15]
 8018262:	2b22      	cmp	r3, #34	; 0x22
 8018264:	d10d      	bne.n	8018282 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	681a      	ldr	r2, [r3, #0]
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018274:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801827a:	1c5a      	adds	r2, r3, #1
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018280:	e040      	b.n	8018304 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018286:	b29b      	uxth	r3, r3
 8018288:	2b00      	cmp	r3, #0
 801828a:	d015      	beq.n	80182b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 801828c:	7bfb      	ldrb	r3, [r7, #15]
 801828e:	2b21      	cmp	r3, #33	; 0x21
 8018290:	d112      	bne.n	80182b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018296:	781a      	ldrb	r2, [r3, #0]
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182a2:	1c5a      	adds	r2, r3, #1
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80182ac:	b29b      	uxth	r3, r3
 80182ae:	3b01      	subs	r3, #1
 80182b0:	b29a      	uxth	r2, r3
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80182b6:	e025      	b.n	8018304 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80182bc:	b29b      	uxth	r3, r3
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d120      	bne.n	8018304 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80182c2:	7bfb      	ldrb	r3, [r7, #15]
 80182c4:	2b21      	cmp	r3, #33	; 0x21
 80182c6:	d11d      	bne.n	8018304 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	685a      	ldr	r2, [r3, #4]
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80182d6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	681a      	ldr	r2, [r3, #0]
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80182e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	2200      	movs	r2, #0
 80182ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	2220      	movs	r2, #32
 80182f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	2200      	movs	r2, #0
 80182fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80182fe:	6878      	ldr	r0, [r7, #4]
 8018300:	f7ff fe36 	bl	8017f70 <HAL_I2C_MemTxCpltCallback>
}
 8018304:	bf00      	nop
 8018306:	3710      	adds	r7, #16
 8018308:	46bd      	mov	sp, r7
 801830a:	bd80      	pop	{r7, pc}

0801830c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801830c:	b580      	push	{r7, lr}
 801830e:	b084      	sub	sp, #16
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801831a:	b2db      	uxtb	r3, r3
 801831c:	2b22      	cmp	r3, #34	; 0x22
 801831e:	f040 80ac 	bne.w	801847a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018326:	b29b      	uxth	r3, r3
 8018328:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	2b03      	cmp	r3, #3
 801832e:	d921      	bls.n	8018374 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	691a      	ldr	r2, [r3, #16]
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801833a:	b2d2      	uxtb	r2, r2
 801833c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018342:	1c5a      	adds	r2, r3, #1
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801834c:	b29b      	uxth	r3, r3
 801834e:	3b01      	subs	r3, #1
 8018350:	b29a      	uxth	r2, r3
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801835a:	b29b      	uxth	r3, r3
 801835c:	2b03      	cmp	r3, #3
 801835e:	f040 808c 	bne.w	801847a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	685a      	ldr	r2, [r3, #4]
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018370:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8018372:	e082      	b.n	801847a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018378:	2b02      	cmp	r3, #2
 801837a:	d075      	beq.n	8018468 <I2C_MasterReceive_RXNE+0x15c>
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	2b01      	cmp	r3, #1
 8018380:	d002      	beq.n	8018388 <I2C_MasterReceive_RXNE+0x7c>
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d16f      	bne.n	8018468 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018388:	6878      	ldr	r0, [r7, #4]
 801838a:	f001 fafd 	bl	8019988 <I2C_WaitOnSTOPRequestThroughIT>
 801838e:	4603      	mov	r3, r0
 8018390:	2b00      	cmp	r3, #0
 8018392:	d142      	bne.n	801841a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	681a      	ldr	r2, [r3, #0]
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80183a2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	685a      	ldr	r2, [r3, #4]
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80183b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	691a      	ldr	r2, [r3, #16]
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183be:	b2d2      	uxtb	r2, r2
 80183c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183c6:	1c5a      	adds	r2, r3, #1
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80183d0:	b29b      	uxth	r3, r3
 80183d2:	3b01      	subs	r3, #1
 80183d4:	b29a      	uxth	r2, r3
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	2220      	movs	r2, #32
 80183de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80183e8:	b2db      	uxtb	r3, r3
 80183ea:	2b40      	cmp	r3, #64	; 0x40
 80183ec:	d10a      	bne.n	8018404 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	2200      	movs	r2, #0
 80183f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	2200      	movs	r2, #0
 80183fa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80183fc:	6878      	ldr	r0, [r7, #4]
 80183fe:	f7ff fdc1 	bl	8017f84 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018402:	e03a      	b.n	801847a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	2200      	movs	r2, #0
 8018408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	2212      	movs	r2, #18
 8018410:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8018412:	6878      	ldr	r0, [r7, #4]
 8018414:	f7ff fd76 	bl	8017f04 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018418:	e02f      	b.n	801847a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	685a      	ldr	r2, [r3, #4]
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018428:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	691a      	ldr	r2, [r3, #16]
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018434:	b2d2      	uxtb	r2, r2
 8018436:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801843c:	1c5a      	adds	r2, r3, #1
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018446:	b29b      	uxth	r3, r3
 8018448:	3b01      	subs	r3, #1
 801844a:	b29a      	uxth	r2, r3
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	2220      	movs	r2, #32
 8018454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	2200      	movs	r2, #0
 801845c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8018460:	6878      	ldr	r0, [r7, #4]
 8018462:	f7ff fd99 	bl	8017f98 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018466:	e008      	b.n	801847a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	685a      	ldr	r2, [r3, #4]
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018476:	605a      	str	r2, [r3, #4]
}
 8018478:	e7ff      	b.n	801847a <I2C_MasterReceive_RXNE+0x16e>
 801847a:	bf00      	nop
 801847c:	3710      	adds	r7, #16
 801847e:	46bd      	mov	sp, r7
 8018480:	bd80      	pop	{r7, pc}

08018482 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018482:	b580      	push	{r7, lr}
 8018484:	b084      	sub	sp, #16
 8018486:	af00      	add	r7, sp, #0
 8018488:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801848e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018494:	b29b      	uxth	r3, r3
 8018496:	2b04      	cmp	r3, #4
 8018498:	d11b      	bne.n	80184d2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	685a      	ldr	r2, [r3, #4]
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80184a8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	691a      	ldr	r2, [r3, #16]
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184b4:	b2d2      	uxtb	r2, r2
 80184b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184bc:	1c5a      	adds	r2, r3, #1
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184c6:	b29b      	uxth	r3, r3
 80184c8:	3b01      	subs	r3, #1
 80184ca:	b29a      	uxth	r2, r3
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80184d0:	e0bd      	b.n	801864e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184d6:	b29b      	uxth	r3, r3
 80184d8:	2b03      	cmp	r3, #3
 80184da:	d129      	bne.n	8018530 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	685a      	ldr	r2, [r3, #4]
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80184ea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	2b04      	cmp	r3, #4
 80184f0:	d00a      	beq.n	8018508 <I2C_MasterReceive_BTF+0x86>
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	2b02      	cmp	r3, #2
 80184f6:	d007      	beq.n	8018508 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	681a      	ldr	r2, [r3, #0]
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018506:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	691a      	ldr	r2, [r3, #16]
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018512:	b2d2      	uxtb	r2, r2
 8018514:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801851a:	1c5a      	adds	r2, r3, #1
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018524:	b29b      	uxth	r3, r3
 8018526:	3b01      	subs	r3, #1
 8018528:	b29a      	uxth	r2, r3
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801852e:	e08e      	b.n	801864e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018534:	b29b      	uxth	r3, r3
 8018536:	2b02      	cmp	r3, #2
 8018538:	d176      	bne.n	8018628 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	2b01      	cmp	r3, #1
 801853e:	d002      	beq.n	8018546 <I2C_MasterReceive_BTF+0xc4>
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	2b10      	cmp	r3, #16
 8018544:	d108      	bne.n	8018558 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	681a      	ldr	r2, [r3, #0]
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018554:	601a      	str	r2, [r3, #0]
 8018556:	e019      	b.n	801858c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	2b04      	cmp	r3, #4
 801855c:	d002      	beq.n	8018564 <I2C_MasterReceive_BTF+0xe2>
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	2b02      	cmp	r3, #2
 8018562:	d108      	bne.n	8018576 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	681a      	ldr	r2, [r3, #0]
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018572:	601a      	str	r2, [r3, #0]
 8018574:	e00a      	b.n	801858c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	2b10      	cmp	r3, #16
 801857a:	d007      	beq.n	801858c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	681a      	ldr	r2, [r3, #0]
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801858a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	691a      	ldr	r2, [r3, #16]
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018596:	b2d2      	uxtb	r2, r2
 8018598:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801859e:	1c5a      	adds	r2, r3, #1
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80185a8:	b29b      	uxth	r3, r3
 80185aa:	3b01      	subs	r3, #1
 80185ac:	b29a      	uxth	r2, r3
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	691a      	ldr	r2, [r3, #16]
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185bc:	b2d2      	uxtb	r2, r2
 80185be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185c4:	1c5a      	adds	r2, r3, #1
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80185ce:	b29b      	uxth	r3, r3
 80185d0:	3b01      	subs	r3, #1
 80185d2:	b29a      	uxth	r2, r3
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	685a      	ldr	r2, [r3, #4]
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80185e6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	2220      	movs	r2, #32
 80185ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80185f6:	b2db      	uxtb	r3, r3
 80185f8:	2b40      	cmp	r3, #64	; 0x40
 80185fa:	d10a      	bne.n	8018612 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	2200      	movs	r2, #0
 8018600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	2200      	movs	r2, #0
 8018608:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 801860a:	6878      	ldr	r0, [r7, #4]
 801860c:	f7ff fcba 	bl	8017f84 <HAL_I2C_MemRxCpltCallback>
}
 8018610:	e01d      	b.n	801864e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	2200      	movs	r2, #0
 8018616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	2212      	movs	r2, #18
 801861e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8018620:	6878      	ldr	r0, [r7, #4]
 8018622:	f7ff fc6f 	bl	8017f04 <HAL_I2C_MasterRxCpltCallback>
}
 8018626:	e012      	b.n	801864e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	691a      	ldr	r2, [r3, #16]
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018632:	b2d2      	uxtb	r2, r2
 8018634:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801863a:	1c5a      	adds	r2, r3, #1
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018644:	b29b      	uxth	r3, r3
 8018646:	3b01      	subs	r3, #1
 8018648:	b29a      	uxth	r2, r3
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801864e:	bf00      	nop
 8018650:	3710      	adds	r7, #16
 8018652:	46bd      	mov	sp, r7
 8018654:	bd80      	pop	{r7, pc}

08018656 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8018656:	b480      	push	{r7}
 8018658:	b083      	sub	sp, #12
 801865a:	af00      	add	r7, sp, #0
 801865c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018664:	b2db      	uxtb	r3, r3
 8018666:	2b40      	cmp	r3, #64	; 0x40
 8018668:	d117      	bne.n	801869a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801866e:	2b00      	cmp	r3, #0
 8018670:	d109      	bne.n	8018686 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018676:	b2db      	uxtb	r3, r3
 8018678:	461a      	mov	r2, r3
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018682:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8018684:	e067      	b.n	8018756 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801868a:	b2db      	uxtb	r3, r3
 801868c:	f043 0301 	orr.w	r3, r3, #1
 8018690:	b2da      	uxtb	r2, r3
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	611a      	str	r2, [r3, #16]
}
 8018698:	e05d      	b.n	8018756 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	691b      	ldr	r3, [r3, #16]
 801869e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80186a2:	d133      	bne.n	801870c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80186aa:	b2db      	uxtb	r3, r3
 80186ac:	2b21      	cmp	r3, #33	; 0x21
 80186ae:	d109      	bne.n	80186c4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80186b4:	b2db      	uxtb	r3, r3
 80186b6:	461a      	mov	r2, r3
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80186c0:	611a      	str	r2, [r3, #16]
 80186c2:	e008      	b.n	80186d6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80186c8:	b2db      	uxtb	r3, r3
 80186ca:	f043 0301 	orr.w	r3, r3, #1
 80186ce:	b2da      	uxtb	r2, r3
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d004      	beq.n	80186e8 <I2C_Master_SB+0x92>
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d108      	bne.n	80186fa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d032      	beq.n	8018756 <I2C_Master_SB+0x100>
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d02d      	beq.n	8018756 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	685a      	ldr	r2, [r3, #4]
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018708:	605a      	str	r2, [r3, #4]
}
 801870a:	e024      	b.n	8018756 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018710:	2b00      	cmp	r3, #0
 8018712:	d10e      	bne.n	8018732 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018718:	b29b      	uxth	r3, r3
 801871a:	11db      	asrs	r3, r3, #7
 801871c:	b2db      	uxtb	r3, r3
 801871e:	f003 0306 	and.w	r3, r3, #6
 8018722:	b2db      	uxtb	r3, r3
 8018724:	f063 030f 	orn	r3, r3, #15
 8018728:	b2da      	uxtb	r2, r3
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	611a      	str	r2, [r3, #16]
}
 8018730:	e011      	b.n	8018756 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018736:	2b01      	cmp	r3, #1
 8018738:	d10d      	bne.n	8018756 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801873e:	b29b      	uxth	r3, r3
 8018740:	11db      	asrs	r3, r3, #7
 8018742:	b2db      	uxtb	r3, r3
 8018744:	f003 0306 	and.w	r3, r3, #6
 8018748:	b2db      	uxtb	r3, r3
 801874a:	f063 030e 	orn	r3, r3, #14
 801874e:	b2da      	uxtb	r2, r3
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	611a      	str	r2, [r3, #16]
}
 8018756:	bf00      	nop
 8018758:	370c      	adds	r7, #12
 801875a:	46bd      	mov	sp, r7
 801875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018760:	4770      	bx	lr

08018762 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8018762:	b480      	push	{r7}
 8018764:	b083      	sub	sp, #12
 8018766:	af00      	add	r7, sp, #0
 8018768:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801876e:	b2da      	uxtb	r2, r3
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801877a:	2b00      	cmp	r3, #0
 801877c:	d004      	beq.n	8018788 <I2C_Master_ADD10+0x26>
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018784:	2b00      	cmp	r3, #0
 8018786:	d108      	bne.n	801879a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801878c:	2b00      	cmp	r3, #0
 801878e:	d00c      	beq.n	80187aa <I2C_Master_ADD10+0x48>
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018796:	2b00      	cmp	r3, #0
 8018798:	d007      	beq.n	80187aa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	685a      	ldr	r2, [r3, #4]
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80187a8:	605a      	str	r2, [r3, #4]
  }
}
 80187aa:	bf00      	nop
 80187ac:	370c      	adds	r7, #12
 80187ae:	46bd      	mov	sp, r7
 80187b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b4:	4770      	bx	lr

080187b6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80187b6:	b480      	push	{r7}
 80187b8:	b091      	sub	sp, #68	; 0x44
 80187ba:	af00      	add	r7, sp, #0
 80187bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80187c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80187d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80187da:	b2db      	uxtb	r3, r3
 80187dc:	2b22      	cmp	r3, #34	; 0x22
 80187de:	f040 8169 	bne.w	8018ab4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d10f      	bne.n	801880a <I2C_Master_ADDR+0x54>
 80187ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80187ee:	2b40      	cmp	r3, #64	; 0x40
 80187f0:	d10b      	bne.n	801880a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80187f2:	2300      	movs	r3, #0
 80187f4:	633b      	str	r3, [r7, #48]	; 0x30
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	695b      	ldr	r3, [r3, #20]
 80187fc:	633b      	str	r3, [r7, #48]	; 0x30
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	699b      	ldr	r3, [r3, #24]
 8018804:	633b      	str	r3, [r7, #48]	; 0x30
 8018806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018808:	e160      	b.n	8018acc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801880e:	2b00      	cmp	r3, #0
 8018810:	d11d      	bne.n	801884e <I2C_Master_ADDR+0x98>
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	691b      	ldr	r3, [r3, #16]
 8018816:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801881a:	d118      	bne.n	801884e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801881c:	2300      	movs	r3, #0
 801881e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	695b      	ldr	r3, [r3, #20]
 8018826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	699b      	ldr	r3, [r3, #24]
 801882e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018830:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	681a      	ldr	r2, [r3, #0]
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018840:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018846:	1c5a      	adds	r2, r3, #1
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	651a      	str	r2, [r3, #80]	; 0x50
 801884c:	e13e      	b.n	8018acc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018852:	b29b      	uxth	r3, r3
 8018854:	2b00      	cmp	r3, #0
 8018856:	d113      	bne.n	8018880 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018858:	2300      	movs	r3, #0
 801885a:	62bb      	str	r3, [r7, #40]	; 0x28
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	695b      	ldr	r3, [r3, #20]
 8018862:	62bb      	str	r3, [r7, #40]	; 0x28
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	699b      	ldr	r3, [r3, #24]
 801886a:	62bb      	str	r3, [r7, #40]	; 0x28
 801886c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	681a      	ldr	r2, [r3, #0]
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801887c:	601a      	str	r2, [r3, #0]
 801887e:	e115      	b.n	8018aac <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018884:	b29b      	uxth	r3, r3
 8018886:	2b01      	cmp	r3, #1
 8018888:	f040 808a 	bne.w	80189a0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801888c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801888e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018892:	d137      	bne.n	8018904 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	681a      	ldr	r2, [r3, #0]
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80188a2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	685b      	ldr	r3, [r3, #4]
 80188aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80188ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80188b2:	d113      	bne.n	80188dc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	681a      	ldr	r2, [r3, #0]
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80188c2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80188c4:	2300      	movs	r3, #0
 80188c6:	627b      	str	r3, [r7, #36]	; 0x24
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	695b      	ldr	r3, [r3, #20]
 80188ce:	627b      	str	r3, [r7, #36]	; 0x24
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	699b      	ldr	r3, [r3, #24]
 80188d6:	627b      	str	r3, [r7, #36]	; 0x24
 80188d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188da:	e0e7      	b.n	8018aac <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80188dc:	2300      	movs	r3, #0
 80188de:	623b      	str	r3, [r7, #32]
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	695b      	ldr	r3, [r3, #20]
 80188e6:	623b      	str	r3, [r7, #32]
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	699b      	ldr	r3, [r3, #24]
 80188ee:	623b      	str	r3, [r7, #32]
 80188f0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	681a      	ldr	r2, [r3, #0]
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018900:	601a      	str	r2, [r3, #0]
 8018902:	e0d3      	b.n	8018aac <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8018904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018906:	2b08      	cmp	r3, #8
 8018908:	d02e      	beq.n	8018968 <I2C_Master_ADDR+0x1b2>
 801890a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801890c:	2b20      	cmp	r3, #32
 801890e:	d02b      	beq.n	8018968 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8018910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018912:	2b12      	cmp	r3, #18
 8018914:	d102      	bne.n	801891c <I2C_Master_ADDR+0x166>
 8018916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018918:	2b01      	cmp	r3, #1
 801891a:	d125      	bne.n	8018968 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801891c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801891e:	2b04      	cmp	r3, #4
 8018920:	d00e      	beq.n	8018940 <I2C_Master_ADDR+0x18a>
 8018922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018924:	2b02      	cmp	r3, #2
 8018926:	d00b      	beq.n	8018940 <I2C_Master_ADDR+0x18a>
 8018928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801892a:	2b10      	cmp	r3, #16
 801892c:	d008      	beq.n	8018940 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	681a      	ldr	r2, [r3, #0]
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801893c:	601a      	str	r2, [r3, #0]
 801893e:	e007      	b.n	8018950 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	681a      	ldr	r2, [r3, #0]
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801894e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018950:	2300      	movs	r3, #0
 8018952:	61fb      	str	r3, [r7, #28]
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	695b      	ldr	r3, [r3, #20]
 801895a:	61fb      	str	r3, [r7, #28]
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	699b      	ldr	r3, [r3, #24]
 8018962:	61fb      	str	r3, [r7, #28]
 8018964:	69fb      	ldr	r3, [r7, #28]
 8018966:	e0a1      	b.n	8018aac <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	681a      	ldr	r2, [r3, #0]
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018976:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018978:	2300      	movs	r3, #0
 801897a:	61bb      	str	r3, [r7, #24]
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	695b      	ldr	r3, [r3, #20]
 8018982:	61bb      	str	r3, [r7, #24]
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	699b      	ldr	r3, [r3, #24]
 801898a:	61bb      	str	r3, [r7, #24]
 801898c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	681a      	ldr	r2, [r3, #0]
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801899c:	601a      	str	r2, [r3, #0]
 801899e:	e085      	b.n	8018aac <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189a4:	b29b      	uxth	r3, r3
 80189a6:	2b02      	cmp	r3, #2
 80189a8:	d14d      	bne.n	8018a46 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80189aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189ac:	2b04      	cmp	r3, #4
 80189ae:	d016      	beq.n	80189de <I2C_Master_ADDR+0x228>
 80189b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189b2:	2b02      	cmp	r3, #2
 80189b4:	d013      	beq.n	80189de <I2C_Master_ADDR+0x228>
 80189b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189b8:	2b10      	cmp	r3, #16
 80189ba:	d010      	beq.n	80189de <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	681a      	ldr	r2, [r3, #0]
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80189ca:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	681a      	ldr	r2, [r3, #0]
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80189da:	601a      	str	r2, [r3, #0]
 80189dc:	e007      	b.n	80189ee <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	681a      	ldr	r2, [r3, #0]
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80189ec:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	685b      	ldr	r3, [r3, #4]
 80189f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80189f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80189fc:	d117      	bne.n	8018a2e <I2C_Master_ADDR+0x278>
 80189fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018a04:	d00b      	beq.n	8018a1e <I2C_Master_ADDR+0x268>
 8018a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a08:	2b01      	cmp	r3, #1
 8018a0a:	d008      	beq.n	8018a1e <I2C_Master_ADDR+0x268>
 8018a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a0e:	2b08      	cmp	r3, #8
 8018a10:	d005      	beq.n	8018a1e <I2C_Master_ADDR+0x268>
 8018a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a14:	2b10      	cmp	r3, #16
 8018a16:	d002      	beq.n	8018a1e <I2C_Master_ADDR+0x268>
 8018a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a1a:	2b20      	cmp	r3, #32
 8018a1c:	d107      	bne.n	8018a2e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	685a      	ldr	r2, [r3, #4]
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018a2c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018a2e:	2300      	movs	r3, #0
 8018a30:	617b      	str	r3, [r7, #20]
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	695b      	ldr	r3, [r3, #20]
 8018a38:	617b      	str	r3, [r7, #20]
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	699b      	ldr	r3, [r3, #24]
 8018a40:	617b      	str	r3, [r7, #20]
 8018a42:	697b      	ldr	r3, [r7, #20]
 8018a44:	e032      	b.n	8018aac <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	681a      	ldr	r2, [r3, #0]
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018a54:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	685b      	ldr	r3, [r3, #4]
 8018a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018a64:	d117      	bne.n	8018a96 <I2C_Master_ADDR+0x2e0>
 8018a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018a6c:	d00b      	beq.n	8018a86 <I2C_Master_ADDR+0x2d0>
 8018a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a70:	2b01      	cmp	r3, #1
 8018a72:	d008      	beq.n	8018a86 <I2C_Master_ADDR+0x2d0>
 8018a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a76:	2b08      	cmp	r3, #8
 8018a78:	d005      	beq.n	8018a86 <I2C_Master_ADDR+0x2d0>
 8018a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a7c:	2b10      	cmp	r3, #16
 8018a7e:	d002      	beq.n	8018a86 <I2C_Master_ADDR+0x2d0>
 8018a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a82:	2b20      	cmp	r3, #32
 8018a84:	d107      	bne.n	8018a96 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	685a      	ldr	r2, [r3, #4]
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018a94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018a96:	2300      	movs	r3, #0
 8018a98:	613b      	str	r3, [r7, #16]
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	695b      	ldr	r3, [r3, #20]
 8018aa0:	613b      	str	r3, [r7, #16]
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	699b      	ldr	r3, [r3, #24]
 8018aa8:	613b      	str	r3, [r7, #16]
 8018aaa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	2200      	movs	r2, #0
 8018ab0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8018ab2:	e00b      	b.n	8018acc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018ab4:	2300      	movs	r3, #0
 8018ab6:	60fb      	str	r3, [r7, #12]
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	695b      	ldr	r3, [r3, #20]
 8018abe:	60fb      	str	r3, [r7, #12]
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	699b      	ldr	r3, [r3, #24]
 8018ac6:	60fb      	str	r3, [r7, #12]
 8018ac8:	68fb      	ldr	r3, [r7, #12]
}
 8018aca:	e7ff      	b.n	8018acc <I2C_Master_ADDR+0x316>
 8018acc:	bf00      	nop
 8018ace:	3744      	adds	r7, #68	; 0x44
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad6:	4770      	bx	lr

08018ad8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b084      	sub	sp, #16
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018ae6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018aec:	b29b      	uxth	r3, r3
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d02b      	beq.n	8018b4a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018af6:	781a      	ldrb	r2, [r3, #0]
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b02:	1c5a      	adds	r2, r3, #1
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b0c:	b29b      	uxth	r3, r3
 8018b0e:	3b01      	subs	r3, #1
 8018b10:	b29a      	uxth	r2, r3
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b1a:	b29b      	uxth	r3, r3
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d114      	bne.n	8018b4a <I2C_SlaveTransmit_TXE+0x72>
 8018b20:	7bfb      	ldrb	r3, [r7, #15]
 8018b22:	2b29      	cmp	r3, #41	; 0x29
 8018b24:	d111      	bne.n	8018b4a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	685a      	ldr	r2, [r3, #4]
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018b34:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	2221      	movs	r2, #33	; 0x21
 8018b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	2228      	movs	r2, #40	; 0x28
 8018b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8018b44:	6878      	ldr	r0, [r7, #4]
 8018b46:	f7ff f9e7 	bl	8017f18 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8018b4a:	bf00      	nop
 8018b4c:	3710      	adds	r7, #16
 8018b4e:	46bd      	mov	sp, r7
 8018b50:	bd80      	pop	{r7, pc}

08018b52 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8018b52:	b480      	push	{r7}
 8018b54:	b083      	sub	sp, #12
 8018b56:	af00      	add	r7, sp, #0
 8018b58:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b5e:	b29b      	uxth	r3, r3
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d011      	beq.n	8018b88 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b68:	781a      	ldrb	r2, [r3, #0]
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b74:	1c5a      	adds	r2, r3, #1
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b7e:	b29b      	uxth	r3, r3
 8018b80:	3b01      	subs	r3, #1
 8018b82:	b29a      	uxth	r2, r3
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8018b88:	bf00      	nop
 8018b8a:	370c      	adds	r7, #12
 8018b8c:	46bd      	mov	sp, r7
 8018b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b92:	4770      	bx	lr

08018b94 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b084      	sub	sp, #16
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018ba2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ba8:	b29b      	uxth	r3, r3
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d02c      	beq.n	8018c08 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	691a      	ldr	r2, [r3, #16]
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bb8:	b2d2      	uxtb	r2, r2
 8018bba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bc0:	1c5a      	adds	r2, r3, #1
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bca:	b29b      	uxth	r3, r3
 8018bcc:	3b01      	subs	r3, #1
 8018bce:	b29a      	uxth	r2, r3
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bd8:	b29b      	uxth	r3, r3
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d114      	bne.n	8018c08 <I2C_SlaveReceive_RXNE+0x74>
 8018bde:	7bfb      	ldrb	r3, [r7, #15]
 8018be0:	2b2a      	cmp	r3, #42	; 0x2a
 8018be2:	d111      	bne.n	8018c08 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	685a      	ldr	r2, [r3, #4]
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018bf2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	2222      	movs	r2, #34	; 0x22
 8018bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	2228      	movs	r2, #40	; 0x28
 8018bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018c02:	6878      	ldr	r0, [r7, #4]
 8018c04:	f7ff f992 	bl	8017f2c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8018c08:	bf00      	nop
 8018c0a:	3710      	adds	r7, #16
 8018c0c:	46bd      	mov	sp, r7
 8018c0e:	bd80      	pop	{r7, pc}

08018c10 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018c10:	b480      	push	{r7}
 8018c12:	b083      	sub	sp, #12
 8018c14:	af00      	add	r7, sp, #0
 8018c16:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c1c:	b29b      	uxth	r3, r3
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d012      	beq.n	8018c48 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	691a      	ldr	r2, [r3, #16]
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c2c:	b2d2      	uxtb	r2, r2
 8018c2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c34:	1c5a      	adds	r2, r3, #1
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c3e:	b29b      	uxth	r3, r3
 8018c40:	3b01      	subs	r3, #1
 8018c42:	b29a      	uxth	r2, r3
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8018c48:	bf00      	nop
 8018c4a:	370c      	adds	r7, #12
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c52:	4770      	bx	lr

08018c54 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8018c54:	b580      	push	{r7, lr}
 8018c56:	b084      	sub	sp, #16
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	6078      	str	r0, [r7, #4]
 8018c5c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8018c5e:	2300      	movs	r3, #0
 8018c60:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018c68:	b2db      	uxtb	r3, r3
 8018c6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018c6e:	2b28      	cmp	r3, #40	; 0x28
 8018c70:	d127      	bne.n	8018cc2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	685a      	ldr	r2, [r3, #4]
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c80:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8018c82:	683b      	ldr	r3, [r7, #0]
 8018c84:	089b      	lsrs	r3, r3, #2
 8018c86:	f003 0301 	and.w	r3, r3, #1
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d101      	bne.n	8018c92 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8018c8e:	2301      	movs	r3, #1
 8018c90:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8018c92:	683b      	ldr	r3, [r7, #0]
 8018c94:	09db      	lsrs	r3, r3, #7
 8018c96:	f003 0301 	and.w	r3, r3, #1
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d103      	bne.n	8018ca6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	68db      	ldr	r3, [r3, #12]
 8018ca2:	81bb      	strh	r3, [r7, #12]
 8018ca4:	e002      	b.n	8018cac <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	699b      	ldr	r3, [r3, #24]
 8018caa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	2200      	movs	r2, #0
 8018cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8018cb4:	89ba      	ldrh	r2, [r7, #12]
 8018cb6:	7bfb      	ldrb	r3, [r7, #15]
 8018cb8:	4619      	mov	r1, r3
 8018cba:	6878      	ldr	r0, [r7, #4]
 8018cbc:	f7ff f940 	bl	8017f40 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8018cc0:	e00e      	b.n	8018ce0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018cc2:	2300      	movs	r3, #0
 8018cc4:	60bb      	str	r3, [r7, #8]
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	695b      	ldr	r3, [r3, #20]
 8018ccc:	60bb      	str	r3, [r7, #8]
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	699b      	ldr	r3, [r3, #24]
 8018cd4:	60bb      	str	r3, [r7, #8]
 8018cd6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	2200      	movs	r2, #0
 8018cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8018ce0:	bf00      	nop
 8018ce2:	3710      	adds	r7, #16
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}

08018ce8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b084      	sub	sp, #16
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018cf6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	685a      	ldr	r2, [r3, #4]
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018d06:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8018d08:	2300      	movs	r3, #0
 8018d0a:	60bb      	str	r3, [r7, #8]
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	695b      	ldr	r3, [r3, #20]
 8018d12:	60bb      	str	r3, [r7, #8]
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	681a      	ldr	r2, [r3, #0]
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	f042 0201 	orr.w	r2, r2, #1
 8018d22:	601a      	str	r2, [r3, #0]
 8018d24:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	681a      	ldr	r2, [r3, #0]
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018d34:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	685b      	ldr	r3, [r3, #4]
 8018d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018d44:	d172      	bne.n	8018e2c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8018d46:	7bfb      	ldrb	r3, [r7, #15]
 8018d48:	2b22      	cmp	r3, #34	; 0x22
 8018d4a:	d002      	beq.n	8018d52 <I2C_Slave_STOPF+0x6a>
 8018d4c:	7bfb      	ldrb	r3, [r7, #15]
 8018d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8018d50:	d135      	bne.n	8018dbe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	685b      	ldr	r3, [r3, #4]
 8018d5a:	b29a      	uxth	r2, r3
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d64:	b29b      	uxth	r3, r3
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d005      	beq.n	8018d76 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d6e:	f043 0204 	orr.w	r2, r3, #4
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	685a      	ldr	r2, [r3, #4]
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018d84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	f7fd fdb4 	bl	80168f8 <HAL_DMA_GetState>
 8018d90:	4603      	mov	r3, r0
 8018d92:	2b01      	cmp	r3, #1
 8018d94:	d049      	beq.n	8018e2a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d9a:	4a69      	ldr	r2, [pc, #420]	; (8018f40 <I2C_Slave_STOPF+0x258>)
 8018d9c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018da2:	4618      	mov	r0, r3
 8018da4:	f7fd fbfc 	bl	80165a0 <HAL_DMA_Abort_IT>
 8018da8:	4603      	mov	r3, r0
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d03d      	beq.n	8018e2a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018db4:	687a      	ldr	r2, [r7, #4]
 8018db6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018db8:	4610      	mov	r0, r2
 8018dba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018dbc:	e035      	b.n	8018e2a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	685b      	ldr	r3, [r3, #4]
 8018dc6:	b29a      	uxth	r2, r3
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018dd0:	b29b      	uxth	r3, r3
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d005      	beq.n	8018de2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018dda:	f043 0204 	orr.w	r2, r3, #4
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	685a      	ldr	r2, [r3, #4]
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018df0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018df6:	4618      	mov	r0, r3
 8018df8:	f7fd fd7e 	bl	80168f8 <HAL_DMA_GetState>
 8018dfc:	4603      	mov	r3, r0
 8018dfe:	2b01      	cmp	r3, #1
 8018e00:	d014      	beq.n	8018e2c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e06:	4a4e      	ldr	r2, [pc, #312]	; (8018f40 <I2C_Slave_STOPF+0x258>)
 8018e08:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e0e:	4618      	mov	r0, r3
 8018e10:	f7fd fbc6 	bl	80165a0 <HAL_DMA_Abort_IT>
 8018e14:	4603      	mov	r3, r0
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d008      	beq.n	8018e2c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e20:	687a      	ldr	r2, [r7, #4]
 8018e22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8018e24:	4610      	mov	r0, r2
 8018e26:	4798      	blx	r3
 8018e28:	e000      	b.n	8018e2c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018e2a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e30:	b29b      	uxth	r3, r3
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d03e      	beq.n	8018eb4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	695b      	ldr	r3, [r3, #20]
 8018e3c:	f003 0304 	and.w	r3, r3, #4
 8018e40:	2b04      	cmp	r3, #4
 8018e42:	d112      	bne.n	8018e6a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	691a      	ldr	r2, [r3, #16]
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e4e:	b2d2      	uxtb	r2, r2
 8018e50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e56:	1c5a      	adds	r2, r3, #1
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e60:	b29b      	uxth	r3, r3
 8018e62:	3b01      	subs	r3, #1
 8018e64:	b29a      	uxth	r2, r3
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	695b      	ldr	r3, [r3, #20]
 8018e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018e74:	2b40      	cmp	r3, #64	; 0x40
 8018e76:	d112      	bne.n	8018e9e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	691a      	ldr	r2, [r3, #16]
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e82:	b2d2      	uxtb	r2, r2
 8018e84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e8a:	1c5a      	adds	r2, r3, #1
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e94:	b29b      	uxth	r3, r3
 8018e96:	3b01      	subs	r3, #1
 8018e98:	b29a      	uxth	r2, r3
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ea2:	b29b      	uxth	r3, r3
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d005      	beq.n	8018eb4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018eac:	f043 0204 	orr.w	r2, r3, #4
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d003      	beq.n	8018ec4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8018ebc:	6878      	ldr	r0, [r7, #4]
 8018ebe:	f000 f8b3 	bl	8019028 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8018ec2:	e039      	b.n	8018f38 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8018ec4:	7bfb      	ldrb	r3, [r7, #15]
 8018ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8018ec8:	d109      	bne.n	8018ede <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	2200      	movs	r2, #0
 8018ece:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	2228      	movs	r2, #40	; 0x28
 8018ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018ed8:	6878      	ldr	r0, [r7, #4]
 8018eda:	f7ff f827 	bl	8017f2c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018ee4:	b2db      	uxtb	r3, r3
 8018ee6:	2b28      	cmp	r3, #40	; 0x28
 8018ee8:	d111      	bne.n	8018f0e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	4a15      	ldr	r2, [pc, #84]	; (8018f44 <I2C_Slave_STOPF+0x25c>)
 8018eee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	2200      	movs	r2, #0
 8018ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	2220      	movs	r2, #32
 8018efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	2200      	movs	r2, #0
 8018f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8018f06:	6878      	ldr	r0, [r7, #4]
 8018f08:	f7ff f828 	bl	8017f5c <HAL_I2C_ListenCpltCallback>
}
 8018f0c:	e014      	b.n	8018f38 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f12:	2b22      	cmp	r3, #34	; 0x22
 8018f14:	d002      	beq.n	8018f1c <I2C_Slave_STOPF+0x234>
 8018f16:	7bfb      	ldrb	r3, [r7, #15]
 8018f18:	2b22      	cmp	r3, #34	; 0x22
 8018f1a:	d10d      	bne.n	8018f38 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	2200      	movs	r2, #0
 8018f20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	2220      	movs	r2, #32
 8018f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	2200      	movs	r2, #0
 8018f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018f32:	6878      	ldr	r0, [r7, #4]
 8018f34:	f7fe fffa 	bl	8017f2c <HAL_I2C_SlaveRxCpltCallback>
}
 8018f38:	bf00      	nop
 8018f3a:	3710      	adds	r7, #16
 8018f3c:	46bd      	mov	sp, r7
 8018f3e:	bd80      	pop	{r7, pc}
 8018f40:	08019589 	.word	0x08019589
 8018f44:	ffff0000 	.word	0xffff0000

08018f48 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b084      	sub	sp, #16
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018f56:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f5c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8018f5e:	68bb      	ldr	r3, [r7, #8]
 8018f60:	2b08      	cmp	r3, #8
 8018f62:	d002      	beq.n	8018f6a <I2C_Slave_AF+0x22>
 8018f64:	68bb      	ldr	r3, [r7, #8]
 8018f66:	2b20      	cmp	r3, #32
 8018f68:	d129      	bne.n	8018fbe <I2C_Slave_AF+0x76>
 8018f6a:	7bfb      	ldrb	r3, [r7, #15]
 8018f6c:	2b28      	cmp	r3, #40	; 0x28
 8018f6e:	d126      	bne.n	8018fbe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	4a2c      	ldr	r2, [pc, #176]	; (8019024 <I2C_Slave_AF+0xdc>)
 8018f74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	685a      	ldr	r2, [r3, #4]
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018f84:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8018f8e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	681a      	ldr	r2, [r3, #0]
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018f9e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	2200      	movs	r2, #0
 8018fa4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	2220      	movs	r2, #32
 8018faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	2200      	movs	r2, #0
 8018fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8018fb6:	6878      	ldr	r0, [r7, #4]
 8018fb8:	f7fe ffd0 	bl	8017f5c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8018fbc:	e02e      	b.n	801901c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8018fbe:	7bfb      	ldrb	r3, [r7, #15]
 8018fc0:	2b21      	cmp	r3, #33	; 0x21
 8018fc2:	d126      	bne.n	8019012 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	4a17      	ldr	r2, [pc, #92]	; (8019024 <I2C_Slave_AF+0xdc>)
 8018fc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	2221      	movs	r2, #33	; 0x21
 8018fce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2220      	movs	r2, #32
 8018fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	2200      	movs	r2, #0
 8018fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	685a      	ldr	r2, [r3, #4]
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018fee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8018ff8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	681a      	ldr	r2, [r3, #0]
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019008:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801900a:	6878      	ldr	r0, [r7, #4]
 801900c:	f7fe ff84 	bl	8017f18 <HAL_I2C_SlaveTxCpltCallback>
}
 8019010:	e004      	b.n	801901c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801901a:	615a      	str	r2, [r3, #20]
}
 801901c:	bf00      	nop
 801901e:	3710      	adds	r7, #16
 8019020:	46bd      	mov	sp, r7
 8019022:	bd80      	pop	{r7, pc}
 8019024:	ffff0000 	.word	0xffff0000

08019028 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8019028:	b580      	push	{r7, lr}
 801902a:	b084      	sub	sp, #16
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019036:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801903e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8019040:	7bbb      	ldrb	r3, [r7, #14]
 8019042:	2b10      	cmp	r3, #16
 8019044:	d002      	beq.n	801904c <I2C_ITError+0x24>
 8019046:	7bbb      	ldrb	r3, [r7, #14]
 8019048:	2b40      	cmp	r3, #64	; 0x40
 801904a:	d10a      	bne.n	8019062 <I2C_ITError+0x3a>
 801904c:	7bfb      	ldrb	r3, [r7, #15]
 801904e:	2b22      	cmp	r3, #34	; 0x22
 8019050:	d107      	bne.n	8019062 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	681a      	ldr	r2, [r3, #0]
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019060:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8019062:	7bfb      	ldrb	r3, [r7, #15]
 8019064:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019068:	2b28      	cmp	r3, #40	; 0x28
 801906a:	d107      	bne.n	801907c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	2200      	movs	r2, #0
 8019070:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	2228      	movs	r2, #40	; 0x28
 8019076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801907a:	e015      	b.n	80190a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	685b      	ldr	r3, [r3, #4]
 8019082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801908a:	d00a      	beq.n	80190a2 <I2C_ITError+0x7a>
 801908c:	7bfb      	ldrb	r3, [r7, #15]
 801908e:	2b60      	cmp	r3, #96	; 0x60
 8019090:	d007      	beq.n	80190a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	2220      	movs	r2, #32
 8019096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	2200      	movs	r2, #0
 801909e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	2200      	movs	r2, #0
 80190a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	685b      	ldr	r3, [r3, #4]
 80190ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80190b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80190b6:	d162      	bne.n	801917e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	685a      	ldr	r2, [r3, #4]
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80190c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80190cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80190d0:	b2db      	uxtb	r3, r3
 80190d2:	2b01      	cmp	r3, #1
 80190d4:	d020      	beq.n	8019118 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80190da:	4a6a      	ldr	r2, [pc, #424]	; (8019284 <I2C_ITError+0x25c>)
 80190dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80190e2:	4618      	mov	r0, r3
 80190e4:	f7fd fa5c 	bl	80165a0 <HAL_DMA_Abort_IT>
 80190e8:	4603      	mov	r3, r0
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	f000 8089 	beq.w	8019202 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	681a      	ldr	r2, [r3, #0]
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	f022 0201 	bic.w	r2, r2, #1
 80190fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	2220      	movs	r2, #32
 8019104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801910c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801910e:	687a      	ldr	r2, [r7, #4]
 8019110:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8019112:	4610      	mov	r0, r2
 8019114:	4798      	blx	r3
 8019116:	e074      	b.n	8019202 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801911c:	4a59      	ldr	r2, [pc, #356]	; (8019284 <I2C_ITError+0x25c>)
 801911e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019124:	4618      	mov	r0, r3
 8019126:	f7fd fa3b 	bl	80165a0 <HAL_DMA_Abort_IT>
 801912a:	4603      	mov	r3, r0
 801912c:	2b00      	cmp	r3, #0
 801912e:	d068      	beq.n	8019202 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	695b      	ldr	r3, [r3, #20]
 8019136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801913a:	2b40      	cmp	r3, #64	; 0x40
 801913c:	d10b      	bne.n	8019156 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	691a      	ldr	r2, [r3, #16]
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019148:	b2d2      	uxtb	r2, r2
 801914a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019150:	1c5a      	adds	r2, r3, #1
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	681a      	ldr	r2, [r3, #0]
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	f022 0201 	bic.w	r2, r2, #1
 8019164:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	2220      	movs	r2, #32
 801916a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019174:	687a      	ldr	r2, [r7, #4]
 8019176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8019178:	4610      	mov	r0, r2
 801917a:	4798      	blx	r3
 801917c:	e041      	b.n	8019202 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019184:	b2db      	uxtb	r3, r3
 8019186:	2b60      	cmp	r3, #96	; 0x60
 8019188:	d125      	bne.n	80191d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	2220      	movs	r2, #32
 801918e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	2200      	movs	r2, #0
 8019196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	695b      	ldr	r3, [r3, #20]
 801919e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80191a2:	2b40      	cmp	r3, #64	; 0x40
 80191a4:	d10b      	bne.n	80191be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	691a      	ldr	r2, [r3, #16]
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191b0:	b2d2      	uxtb	r2, r2
 80191b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191b8:	1c5a      	adds	r2, r3, #1
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	681a      	ldr	r2, [r3, #0]
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	f022 0201 	bic.w	r2, r2, #1
 80191cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80191ce:	6878      	ldr	r0, [r7, #4]
 80191d0:	f7fe feec 	bl	8017fac <HAL_I2C_AbortCpltCallback>
 80191d4:	e015      	b.n	8019202 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	695b      	ldr	r3, [r3, #20]
 80191dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80191e0:	2b40      	cmp	r3, #64	; 0x40
 80191e2:	d10b      	bne.n	80191fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	691a      	ldr	r2, [r3, #16]
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191ee:	b2d2      	uxtb	r2, r2
 80191f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191f6:	1c5a      	adds	r2, r3, #1
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80191fc:	6878      	ldr	r0, [r7, #4]
 80191fe:	f7fe fecb 	bl	8017f98 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019206:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8019208:	68bb      	ldr	r3, [r7, #8]
 801920a:	f003 0301 	and.w	r3, r3, #1
 801920e:	2b00      	cmp	r3, #0
 8019210:	d10e      	bne.n	8019230 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8019212:	68bb      	ldr	r3, [r7, #8]
 8019214:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8019218:	2b00      	cmp	r3, #0
 801921a:	d109      	bne.n	8019230 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801921c:	68bb      	ldr	r3, [r7, #8]
 801921e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8019222:	2b00      	cmp	r3, #0
 8019224:	d104      	bne.n	8019230 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8019226:	68bb      	ldr	r3, [r7, #8]
 8019228:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801922c:	2b00      	cmp	r3, #0
 801922e:	d007      	beq.n	8019240 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	685a      	ldr	r2, [r3, #4]
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801923e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019246:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801924c:	f003 0304 	and.w	r3, r3, #4
 8019250:	2b04      	cmp	r3, #4
 8019252:	d113      	bne.n	801927c <I2C_ITError+0x254>
 8019254:	7bfb      	ldrb	r3, [r7, #15]
 8019256:	2b28      	cmp	r3, #40	; 0x28
 8019258:	d110      	bne.n	801927c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	4a0a      	ldr	r2, [pc, #40]	; (8019288 <I2C_ITError+0x260>)
 801925e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	2200      	movs	r2, #0
 8019264:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	2220      	movs	r2, #32
 801926a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	2200      	movs	r2, #0
 8019272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8019276:	6878      	ldr	r0, [r7, #4]
 8019278:	f7fe fe70 	bl	8017f5c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801927c:	bf00      	nop
 801927e:	3710      	adds	r7, #16
 8019280:	46bd      	mov	sp, r7
 8019282:	bd80      	pop	{r7, pc}
 8019284:	08019589 	.word	0x08019589
 8019288:	ffff0000 	.word	0xffff0000

0801928c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801928c:	b580      	push	{r7, lr}
 801928e:	b088      	sub	sp, #32
 8019290:	af02      	add	r7, sp, #8
 8019292:	60f8      	str	r0, [r7, #12]
 8019294:	4608      	mov	r0, r1
 8019296:	4611      	mov	r1, r2
 8019298:	461a      	mov	r2, r3
 801929a:	4603      	mov	r3, r0
 801929c:	817b      	strh	r3, [r7, #10]
 801929e:	460b      	mov	r3, r1
 80192a0:	813b      	strh	r3, [r7, #8]
 80192a2:	4613      	mov	r3, r2
 80192a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	681a      	ldr	r2, [r3, #0]
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80192b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80192b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192b8:	9300      	str	r3, [sp, #0]
 80192ba:	6a3b      	ldr	r3, [r7, #32]
 80192bc:	2200      	movs	r2, #0
 80192be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80192c2:	68f8      	ldr	r0, [r7, #12]
 80192c4:	f000 fa08 	bl	80196d8 <I2C_WaitOnFlagUntilTimeout>
 80192c8:	4603      	mov	r3, r0
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d00d      	beq.n	80192ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80192d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80192dc:	d103      	bne.n	80192e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80192e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80192e6:	2303      	movs	r3, #3
 80192e8:	e05f      	b.n	80193aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80192ea:	897b      	ldrh	r3, [r7, #10]
 80192ec:	b2db      	uxtb	r3, r3
 80192ee:	461a      	mov	r2, r3
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80192f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80192fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192fc:	6a3a      	ldr	r2, [r7, #32]
 80192fe:	492d      	ldr	r1, [pc, #180]	; (80193b4 <I2C_RequestMemoryWrite+0x128>)
 8019300:	68f8      	ldr	r0, [r7, #12]
 8019302:	f000 fa40 	bl	8019786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019306:	4603      	mov	r3, r0
 8019308:	2b00      	cmp	r3, #0
 801930a:	d001      	beq.n	8019310 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801930c:	2301      	movs	r3, #1
 801930e:	e04c      	b.n	80193aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019310:	2300      	movs	r3, #0
 8019312:	617b      	str	r3, [r7, #20]
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	695b      	ldr	r3, [r3, #20]
 801931a:	617b      	str	r3, [r7, #20]
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	699b      	ldr	r3, [r3, #24]
 8019322:	617b      	str	r3, [r7, #20]
 8019324:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019328:	6a39      	ldr	r1, [r7, #32]
 801932a:	68f8      	ldr	r0, [r7, #12]
 801932c:	f000 faaa 	bl	8019884 <I2C_WaitOnTXEFlagUntilTimeout>
 8019330:	4603      	mov	r3, r0
 8019332:	2b00      	cmp	r3, #0
 8019334:	d00d      	beq.n	8019352 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801933a:	2b04      	cmp	r3, #4
 801933c:	d107      	bne.n	801934e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	681a      	ldr	r2, [r3, #0]
 8019344:	68fb      	ldr	r3, [r7, #12]
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801934c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801934e:	2301      	movs	r3, #1
 8019350:	e02b      	b.n	80193aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019352:	88fb      	ldrh	r3, [r7, #6]
 8019354:	2b01      	cmp	r3, #1
 8019356:	d105      	bne.n	8019364 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019358:	893b      	ldrh	r3, [r7, #8]
 801935a:	b2da      	uxtb	r2, r3
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	611a      	str	r2, [r3, #16]
 8019362:	e021      	b.n	80193a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8019364:	893b      	ldrh	r3, [r7, #8]
 8019366:	0a1b      	lsrs	r3, r3, #8
 8019368:	b29b      	uxth	r3, r3
 801936a:	b2da      	uxtb	r2, r3
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019374:	6a39      	ldr	r1, [r7, #32]
 8019376:	68f8      	ldr	r0, [r7, #12]
 8019378:	f000 fa84 	bl	8019884 <I2C_WaitOnTXEFlagUntilTimeout>
 801937c:	4603      	mov	r3, r0
 801937e:	2b00      	cmp	r3, #0
 8019380:	d00d      	beq.n	801939e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019386:	2b04      	cmp	r3, #4
 8019388:	d107      	bne.n	801939a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	681a      	ldr	r2, [r3, #0]
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019398:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801939a:	2301      	movs	r3, #1
 801939c:	e005      	b.n	80193aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801939e:	893b      	ldrh	r3, [r7, #8]
 80193a0:	b2da      	uxtb	r2, r3
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80193a8:	2300      	movs	r3, #0
}
 80193aa:	4618      	mov	r0, r3
 80193ac:	3718      	adds	r7, #24
 80193ae:	46bd      	mov	sp, r7
 80193b0:	bd80      	pop	{r7, pc}
 80193b2:	bf00      	nop
 80193b4:	00010002 	.word	0x00010002

080193b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b088      	sub	sp, #32
 80193bc:	af02      	add	r7, sp, #8
 80193be:	60f8      	str	r0, [r7, #12]
 80193c0:	4608      	mov	r0, r1
 80193c2:	4611      	mov	r1, r2
 80193c4:	461a      	mov	r2, r3
 80193c6:	4603      	mov	r3, r0
 80193c8:	817b      	strh	r3, [r7, #10]
 80193ca:	460b      	mov	r3, r1
 80193cc:	813b      	strh	r3, [r7, #8]
 80193ce:	4613      	mov	r3, r2
 80193d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	681a      	ldr	r2, [r3, #0]
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80193e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	681a      	ldr	r2, [r3, #0]
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80193f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80193f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193f4:	9300      	str	r3, [sp, #0]
 80193f6:	6a3b      	ldr	r3, [r7, #32]
 80193f8:	2200      	movs	r2, #0
 80193fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80193fe:	68f8      	ldr	r0, [r7, #12]
 8019400:	f000 f96a 	bl	80196d8 <I2C_WaitOnFlagUntilTimeout>
 8019404:	4603      	mov	r3, r0
 8019406:	2b00      	cmp	r3, #0
 8019408:	d00d      	beq.n	8019426 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019418:	d103      	bne.n	8019422 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019420:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019422:	2303      	movs	r3, #3
 8019424:	e0aa      	b.n	801957c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8019426:	897b      	ldrh	r3, [r7, #10]
 8019428:	b2db      	uxtb	r3, r3
 801942a:	461a      	mov	r2, r3
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019434:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019438:	6a3a      	ldr	r2, [r7, #32]
 801943a:	4952      	ldr	r1, [pc, #328]	; (8019584 <I2C_RequestMemoryRead+0x1cc>)
 801943c:	68f8      	ldr	r0, [r7, #12]
 801943e:	f000 f9a2 	bl	8019786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019442:	4603      	mov	r3, r0
 8019444:	2b00      	cmp	r3, #0
 8019446:	d001      	beq.n	801944c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8019448:	2301      	movs	r3, #1
 801944a:	e097      	b.n	801957c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801944c:	2300      	movs	r3, #0
 801944e:	617b      	str	r3, [r7, #20]
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	695b      	ldr	r3, [r3, #20]
 8019456:	617b      	str	r3, [r7, #20]
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	699b      	ldr	r3, [r3, #24]
 801945e:	617b      	str	r3, [r7, #20]
 8019460:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019464:	6a39      	ldr	r1, [r7, #32]
 8019466:	68f8      	ldr	r0, [r7, #12]
 8019468:	f000 fa0c 	bl	8019884 <I2C_WaitOnTXEFlagUntilTimeout>
 801946c:	4603      	mov	r3, r0
 801946e:	2b00      	cmp	r3, #0
 8019470:	d00d      	beq.n	801948e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019476:	2b04      	cmp	r3, #4
 8019478:	d107      	bne.n	801948a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	681a      	ldr	r2, [r3, #0]
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019488:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801948a:	2301      	movs	r3, #1
 801948c:	e076      	b.n	801957c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801948e:	88fb      	ldrh	r3, [r7, #6]
 8019490:	2b01      	cmp	r3, #1
 8019492:	d105      	bne.n	80194a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019494:	893b      	ldrh	r3, [r7, #8]
 8019496:	b2da      	uxtb	r2, r3
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	611a      	str	r2, [r3, #16]
 801949e:	e021      	b.n	80194e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80194a0:	893b      	ldrh	r3, [r7, #8]
 80194a2:	0a1b      	lsrs	r3, r3, #8
 80194a4:	b29b      	uxth	r3, r3
 80194a6:	b2da      	uxtb	r2, r3
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80194ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80194b0:	6a39      	ldr	r1, [r7, #32]
 80194b2:	68f8      	ldr	r0, [r7, #12]
 80194b4:	f000 f9e6 	bl	8019884 <I2C_WaitOnTXEFlagUntilTimeout>
 80194b8:	4603      	mov	r3, r0
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d00d      	beq.n	80194da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194c2:	2b04      	cmp	r3, #4
 80194c4:	d107      	bne.n	80194d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80194c6:	68fb      	ldr	r3, [r7, #12]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	681a      	ldr	r2, [r3, #0]
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80194d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80194d6:	2301      	movs	r3, #1
 80194d8:	e050      	b.n	801957c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80194da:	893b      	ldrh	r3, [r7, #8]
 80194dc:	b2da      	uxtb	r2, r3
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80194e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80194e6:	6a39      	ldr	r1, [r7, #32]
 80194e8:	68f8      	ldr	r0, [r7, #12]
 80194ea:	f000 f9cb 	bl	8019884 <I2C_WaitOnTXEFlagUntilTimeout>
 80194ee:	4603      	mov	r3, r0
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d00d      	beq.n	8019510 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194f8:	2b04      	cmp	r3, #4
 80194fa:	d107      	bne.n	801950c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	681a      	ldr	r2, [r3, #0]
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801950a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801950c:	2301      	movs	r3, #1
 801950e:	e035      	b.n	801957c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	681a      	ldr	r2, [r3, #0]
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801951e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019522:	9300      	str	r3, [sp, #0]
 8019524:	6a3b      	ldr	r3, [r7, #32]
 8019526:	2200      	movs	r2, #0
 8019528:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801952c:	68f8      	ldr	r0, [r7, #12]
 801952e:	f000 f8d3 	bl	80196d8 <I2C_WaitOnFlagUntilTimeout>
 8019532:	4603      	mov	r3, r0
 8019534:	2b00      	cmp	r3, #0
 8019536:	d00d      	beq.n	8019554 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019538:	68fb      	ldr	r3, [r7, #12]
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019546:	d103      	bne.n	8019550 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801954e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019550:	2303      	movs	r3, #3
 8019552:	e013      	b.n	801957c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8019554:	897b      	ldrh	r3, [r7, #10]
 8019556:	b2db      	uxtb	r3, r3
 8019558:	f043 0301 	orr.w	r3, r3, #1
 801955c:	b2da      	uxtb	r2, r3
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019566:	6a3a      	ldr	r2, [r7, #32]
 8019568:	4906      	ldr	r1, [pc, #24]	; (8019584 <I2C_RequestMemoryRead+0x1cc>)
 801956a:	68f8      	ldr	r0, [r7, #12]
 801956c:	f000 f90b 	bl	8019786 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019570:	4603      	mov	r3, r0
 8019572:	2b00      	cmp	r3, #0
 8019574:	d001      	beq.n	801957a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8019576:	2301      	movs	r3, #1
 8019578:	e000      	b.n	801957c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801957a:	2300      	movs	r3, #0
}
 801957c:	4618      	mov	r0, r3
 801957e:	3718      	adds	r7, #24
 8019580:	46bd      	mov	sp, r7
 8019582:	bd80      	pop	{r7, pc}
 8019584:	00010002 	.word	0x00010002

08019588 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8019588:	b580      	push	{r7, lr}
 801958a:	b086      	sub	sp, #24
 801958c:	af00      	add	r7, sp, #0
 801958e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019590:	2300      	movs	r3, #0
 8019592:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019598:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801959a:	697b      	ldr	r3, [r7, #20]
 801959c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80195a0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80195a2:	4b4b      	ldr	r3, [pc, #300]	; (80196d0 <I2C_DMAAbort+0x148>)
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	08db      	lsrs	r3, r3, #3
 80195a8:	4a4a      	ldr	r2, [pc, #296]	; (80196d4 <I2C_DMAAbort+0x14c>)
 80195aa:	fba2 2303 	umull	r2, r3, r2, r3
 80195ae:	0a1a      	lsrs	r2, r3, #8
 80195b0:	4613      	mov	r3, r2
 80195b2:	009b      	lsls	r3, r3, #2
 80195b4:	4413      	add	r3, r2
 80195b6:	00da      	lsls	r2, r3, #3
 80195b8:	1ad3      	subs	r3, r2, r3
 80195ba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d106      	bne.n	80195d0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80195c2:	697b      	ldr	r3, [r7, #20]
 80195c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195c6:	f043 0220 	orr.w	r2, r3, #32
 80195ca:	697b      	ldr	r3, [r7, #20]
 80195cc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80195ce:	e00a      	b.n	80195e6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	3b01      	subs	r3, #1
 80195d4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80195d6:	697b      	ldr	r3, [r7, #20]
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80195e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80195e4:	d0ea      	beq.n	80195bc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80195e6:	697b      	ldr	r3, [r7, #20]
 80195e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d003      	beq.n	80195f6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80195ee:	697b      	ldr	r3, [r7, #20]
 80195f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195f2:	2200      	movs	r2, #0
 80195f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80195f6:	697b      	ldr	r3, [r7, #20]
 80195f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d003      	beq.n	8019606 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80195fe:	697b      	ldr	r3, [r7, #20]
 8019600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019602:	2200      	movs	r2, #0
 8019604:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019606:	697b      	ldr	r3, [r7, #20]
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	681a      	ldr	r2, [r3, #0]
 801960c:	697b      	ldr	r3, [r7, #20]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019614:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8019616:	697b      	ldr	r3, [r7, #20]
 8019618:	2200      	movs	r2, #0
 801961a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 801961c:	697b      	ldr	r3, [r7, #20]
 801961e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019620:	2b00      	cmp	r3, #0
 8019622:	d003      	beq.n	801962c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8019624:	697b      	ldr	r3, [r7, #20]
 8019626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019628:	2200      	movs	r2, #0
 801962a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801962c:	697b      	ldr	r3, [r7, #20]
 801962e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019630:	2b00      	cmp	r3, #0
 8019632:	d003      	beq.n	801963c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8019634:	697b      	ldr	r3, [r7, #20]
 8019636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019638:	2200      	movs	r2, #0
 801963a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 801963c:	697b      	ldr	r3, [r7, #20]
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	681a      	ldr	r2, [r3, #0]
 8019642:	697b      	ldr	r3, [r7, #20]
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	f022 0201 	bic.w	r2, r2, #1
 801964a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801964c:	697b      	ldr	r3, [r7, #20]
 801964e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019652:	b2db      	uxtb	r3, r3
 8019654:	2b60      	cmp	r3, #96	; 0x60
 8019656:	d10e      	bne.n	8019676 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8019658:	697b      	ldr	r3, [r7, #20]
 801965a:	2220      	movs	r2, #32
 801965c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019660:	697b      	ldr	r3, [r7, #20]
 8019662:	2200      	movs	r2, #0
 8019664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8019668:	697b      	ldr	r3, [r7, #20]
 801966a:	2200      	movs	r2, #0
 801966c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801966e:	6978      	ldr	r0, [r7, #20]
 8019670:	f7fe fc9c 	bl	8017fac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019674:	e027      	b.n	80196c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8019676:	7cfb      	ldrb	r3, [r7, #19]
 8019678:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801967c:	2b28      	cmp	r3, #40	; 0x28
 801967e:	d117      	bne.n	80196b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8019680:	697b      	ldr	r3, [r7, #20]
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	681a      	ldr	r2, [r3, #0]
 8019686:	697b      	ldr	r3, [r7, #20]
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	f042 0201 	orr.w	r2, r2, #1
 801968e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019690:	697b      	ldr	r3, [r7, #20]
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	681a      	ldr	r2, [r3, #0]
 8019696:	697b      	ldr	r3, [r7, #20]
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801969e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80196a0:	697b      	ldr	r3, [r7, #20]
 80196a2:	2200      	movs	r2, #0
 80196a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80196a6:	697b      	ldr	r3, [r7, #20]
 80196a8:	2228      	movs	r2, #40	; 0x28
 80196aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80196ae:	e007      	b.n	80196c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80196b0:	697b      	ldr	r3, [r7, #20]
 80196b2:	2220      	movs	r2, #32
 80196b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80196b8:	697b      	ldr	r3, [r7, #20]
 80196ba:	2200      	movs	r2, #0
 80196bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80196c0:	6978      	ldr	r0, [r7, #20]
 80196c2:	f7fe fc69 	bl	8017f98 <HAL_I2C_ErrorCallback>
}
 80196c6:	bf00      	nop
 80196c8:	3718      	adds	r7, #24
 80196ca:	46bd      	mov	sp, r7
 80196cc:	bd80      	pop	{r7, pc}
 80196ce:	bf00      	nop
 80196d0:	2000005c 	.word	0x2000005c
 80196d4:	14f8b589 	.word	0x14f8b589

080196d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80196d8:	b580      	push	{r7, lr}
 80196da:	b084      	sub	sp, #16
 80196dc:	af00      	add	r7, sp, #0
 80196de:	60f8      	str	r0, [r7, #12]
 80196e0:	60b9      	str	r1, [r7, #8]
 80196e2:	603b      	str	r3, [r7, #0]
 80196e4:	4613      	mov	r3, r2
 80196e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80196e8:	e025      	b.n	8019736 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80196ea:	683b      	ldr	r3, [r7, #0]
 80196ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196f0:	d021      	beq.n	8019736 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80196f2:	f7fc fc9d 	bl	8016030 <HAL_GetTick>
 80196f6:	4602      	mov	r2, r0
 80196f8:	69bb      	ldr	r3, [r7, #24]
 80196fa:	1ad3      	subs	r3, r2, r3
 80196fc:	683a      	ldr	r2, [r7, #0]
 80196fe:	429a      	cmp	r2, r3
 8019700:	d302      	bcc.n	8019708 <I2C_WaitOnFlagUntilTimeout+0x30>
 8019702:	683b      	ldr	r3, [r7, #0]
 8019704:	2b00      	cmp	r3, #0
 8019706:	d116      	bne.n	8019736 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	2200      	movs	r2, #0
 801970c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801970e:	68fb      	ldr	r3, [r7, #12]
 8019710:	2220      	movs	r2, #32
 8019712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	2200      	movs	r2, #0
 801971a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019722:	f043 0220 	orr.w	r2, r3, #32
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	2200      	movs	r2, #0
 801972e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019732:	2301      	movs	r3, #1
 8019734:	e023      	b.n	801977e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019736:	68bb      	ldr	r3, [r7, #8]
 8019738:	0c1b      	lsrs	r3, r3, #16
 801973a:	b2db      	uxtb	r3, r3
 801973c:	2b01      	cmp	r3, #1
 801973e:	d10d      	bne.n	801975c <I2C_WaitOnFlagUntilTimeout+0x84>
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	695b      	ldr	r3, [r3, #20]
 8019746:	43da      	mvns	r2, r3
 8019748:	68bb      	ldr	r3, [r7, #8]
 801974a:	4013      	ands	r3, r2
 801974c:	b29b      	uxth	r3, r3
 801974e:	2b00      	cmp	r3, #0
 8019750:	bf0c      	ite	eq
 8019752:	2301      	moveq	r3, #1
 8019754:	2300      	movne	r3, #0
 8019756:	b2db      	uxtb	r3, r3
 8019758:	461a      	mov	r2, r3
 801975a:	e00c      	b.n	8019776 <I2C_WaitOnFlagUntilTimeout+0x9e>
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	699b      	ldr	r3, [r3, #24]
 8019762:	43da      	mvns	r2, r3
 8019764:	68bb      	ldr	r3, [r7, #8]
 8019766:	4013      	ands	r3, r2
 8019768:	b29b      	uxth	r3, r3
 801976a:	2b00      	cmp	r3, #0
 801976c:	bf0c      	ite	eq
 801976e:	2301      	moveq	r3, #1
 8019770:	2300      	movne	r3, #0
 8019772:	b2db      	uxtb	r3, r3
 8019774:	461a      	mov	r2, r3
 8019776:	79fb      	ldrb	r3, [r7, #7]
 8019778:	429a      	cmp	r2, r3
 801977a:	d0b6      	beq.n	80196ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801977c:	2300      	movs	r3, #0
}
 801977e:	4618      	mov	r0, r3
 8019780:	3710      	adds	r7, #16
 8019782:	46bd      	mov	sp, r7
 8019784:	bd80      	pop	{r7, pc}

08019786 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8019786:	b580      	push	{r7, lr}
 8019788:	b084      	sub	sp, #16
 801978a:	af00      	add	r7, sp, #0
 801978c:	60f8      	str	r0, [r7, #12]
 801978e:	60b9      	str	r1, [r7, #8]
 8019790:	607a      	str	r2, [r7, #4]
 8019792:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8019794:	e051      	b.n	801983a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	695b      	ldr	r3, [r3, #20]
 801979c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80197a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80197a4:	d123      	bne.n	80197ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	681a      	ldr	r2, [r3, #0]
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80197b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80197be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	2200      	movs	r2, #0
 80197c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	2220      	movs	r2, #32
 80197ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	2200      	movs	r2, #0
 80197d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197da:	f043 0204 	orr.w	r2, r3, #4
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	2200      	movs	r2, #0
 80197e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80197ea:	2301      	movs	r3, #1
 80197ec:	e046      	b.n	801987c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197f4:	d021      	beq.n	801983a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80197f6:	f7fc fc1b 	bl	8016030 <HAL_GetTick>
 80197fa:	4602      	mov	r2, r0
 80197fc:	683b      	ldr	r3, [r7, #0]
 80197fe:	1ad3      	subs	r3, r2, r3
 8019800:	687a      	ldr	r2, [r7, #4]
 8019802:	429a      	cmp	r2, r3
 8019804:	d302      	bcc.n	801980c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	2b00      	cmp	r3, #0
 801980a:	d116      	bne.n	801983a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	2200      	movs	r2, #0
 8019810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	2220      	movs	r2, #32
 8019816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	2200      	movs	r2, #0
 801981e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019826:	f043 0220 	orr.w	r2, r3, #32
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801982e:	68fb      	ldr	r3, [r7, #12]
 8019830:	2200      	movs	r2, #0
 8019832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019836:	2301      	movs	r3, #1
 8019838:	e020      	b.n	801987c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801983a:	68bb      	ldr	r3, [r7, #8]
 801983c:	0c1b      	lsrs	r3, r3, #16
 801983e:	b2db      	uxtb	r3, r3
 8019840:	2b01      	cmp	r3, #1
 8019842:	d10c      	bne.n	801985e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	695b      	ldr	r3, [r3, #20]
 801984a:	43da      	mvns	r2, r3
 801984c:	68bb      	ldr	r3, [r7, #8]
 801984e:	4013      	ands	r3, r2
 8019850:	b29b      	uxth	r3, r3
 8019852:	2b00      	cmp	r3, #0
 8019854:	bf14      	ite	ne
 8019856:	2301      	movne	r3, #1
 8019858:	2300      	moveq	r3, #0
 801985a:	b2db      	uxtb	r3, r3
 801985c:	e00b      	b.n	8019876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801985e:	68fb      	ldr	r3, [r7, #12]
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	699b      	ldr	r3, [r3, #24]
 8019864:	43da      	mvns	r2, r3
 8019866:	68bb      	ldr	r3, [r7, #8]
 8019868:	4013      	ands	r3, r2
 801986a:	b29b      	uxth	r3, r3
 801986c:	2b00      	cmp	r3, #0
 801986e:	bf14      	ite	ne
 8019870:	2301      	movne	r3, #1
 8019872:	2300      	moveq	r3, #0
 8019874:	b2db      	uxtb	r3, r3
 8019876:	2b00      	cmp	r3, #0
 8019878:	d18d      	bne.n	8019796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801987a:	2300      	movs	r3, #0
}
 801987c:	4618      	mov	r0, r3
 801987e:	3710      	adds	r7, #16
 8019880:	46bd      	mov	sp, r7
 8019882:	bd80      	pop	{r7, pc}

08019884 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019884:	b580      	push	{r7, lr}
 8019886:	b084      	sub	sp, #16
 8019888:	af00      	add	r7, sp, #0
 801988a:	60f8      	str	r0, [r7, #12]
 801988c:	60b9      	str	r1, [r7, #8]
 801988e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8019890:	e02d      	b.n	80198ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019892:	68f8      	ldr	r0, [r7, #12]
 8019894:	f000 f900 	bl	8019a98 <I2C_IsAcknowledgeFailed>
 8019898:	4603      	mov	r3, r0
 801989a:	2b00      	cmp	r3, #0
 801989c:	d001      	beq.n	80198a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801989e:	2301      	movs	r3, #1
 80198a0:	e02d      	b.n	80198fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80198a2:	68bb      	ldr	r3, [r7, #8]
 80198a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198a8:	d021      	beq.n	80198ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80198aa:	f7fc fbc1 	bl	8016030 <HAL_GetTick>
 80198ae:	4602      	mov	r2, r0
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	1ad3      	subs	r3, r2, r3
 80198b4:	68ba      	ldr	r2, [r7, #8]
 80198b6:	429a      	cmp	r2, r3
 80198b8:	d302      	bcc.n	80198c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80198ba:	68bb      	ldr	r3, [r7, #8]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d116      	bne.n	80198ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	2200      	movs	r2, #0
 80198c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	2220      	movs	r2, #32
 80198ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	2200      	movs	r2, #0
 80198d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198da:	f043 0220 	orr.w	r2, r3, #32
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	2200      	movs	r2, #0
 80198e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80198ea:	2301      	movs	r3, #1
 80198ec:	e007      	b.n	80198fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	695b      	ldr	r3, [r3, #20]
 80198f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80198f8:	2b80      	cmp	r3, #128	; 0x80
 80198fa:	d1ca      	bne.n	8019892 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80198fc:	2300      	movs	r3, #0
}
 80198fe:	4618      	mov	r0, r3
 8019900:	3710      	adds	r7, #16
 8019902:	46bd      	mov	sp, r7
 8019904:	bd80      	pop	{r7, pc}

08019906 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019906:	b580      	push	{r7, lr}
 8019908:	b084      	sub	sp, #16
 801990a:	af00      	add	r7, sp, #0
 801990c:	60f8      	str	r0, [r7, #12]
 801990e:	60b9      	str	r1, [r7, #8]
 8019910:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8019912:	e02d      	b.n	8019970 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019914:	68f8      	ldr	r0, [r7, #12]
 8019916:	f000 f8bf 	bl	8019a98 <I2C_IsAcknowledgeFailed>
 801991a:	4603      	mov	r3, r0
 801991c:	2b00      	cmp	r3, #0
 801991e:	d001      	beq.n	8019924 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8019920:	2301      	movs	r3, #1
 8019922:	e02d      	b.n	8019980 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019924:	68bb      	ldr	r3, [r7, #8]
 8019926:	f1b3 3fff 	cmp.w	r3, #4294967295
 801992a:	d021      	beq.n	8019970 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801992c:	f7fc fb80 	bl	8016030 <HAL_GetTick>
 8019930:	4602      	mov	r2, r0
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	1ad3      	subs	r3, r2, r3
 8019936:	68ba      	ldr	r2, [r7, #8]
 8019938:	429a      	cmp	r2, r3
 801993a:	d302      	bcc.n	8019942 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801993c:	68bb      	ldr	r3, [r7, #8]
 801993e:	2b00      	cmp	r3, #0
 8019940:	d116      	bne.n	8019970 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	2200      	movs	r2, #0
 8019946:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	2220      	movs	r2, #32
 801994c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019950:	68fb      	ldr	r3, [r7, #12]
 8019952:	2200      	movs	r2, #0
 8019954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801995c:	f043 0220 	orr.w	r2, r3, #32
 8019960:	68fb      	ldr	r3, [r7, #12]
 8019962:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	2200      	movs	r2, #0
 8019968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801996c:	2301      	movs	r3, #1
 801996e:	e007      	b.n	8019980 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	695b      	ldr	r3, [r3, #20]
 8019976:	f003 0304 	and.w	r3, r3, #4
 801997a:	2b04      	cmp	r3, #4
 801997c:	d1ca      	bne.n	8019914 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801997e:	2300      	movs	r3, #0
}
 8019980:	4618      	mov	r0, r3
 8019982:	3710      	adds	r7, #16
 8019984:	46bd      	mov	sp, r7
 8019986:	bd80      	pop	{r7, pc}

08019988 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8019988:	b480      	push	{r7}
 801998a:	b085      	sub	sp, #20
 801998c:	af00      	add	r7, sp, #0
 801998e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019990:	2300      	movs	r3, #0
 8019992:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8019994:	4b13      	ldr	r3, [pc, #76]	; (80199e4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	08db      	lsrs	r3, r3, #3
 801999a:	4a13      	ldr	r2, [pc, #76]	; (80199e8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 801999c:	fba2 2303 	umull	r2, r3, r2, r3
 80199a0:	0a1a      	lsrs	r2, r3, #8
 80199a2:	4613      	mov	r3, r2
 80199a4:	009b      	lsls	r3, r3, #2
 80199a6:	4413      	add	r3, r2
 80199a8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	3b01      	subs	r3, #1
 80199ae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80199b0:	68fb      	ldr	r3, [r7, #12]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d107      	bne.n	80199c6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80199ba:	f043 0220 	orr.w	r2, r3, #32
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80199c2:	2301      	movs	r3, #1
 80199c4:	e008      	b.n	80199d8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80199d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80199d4:	d0e9      	beq.n	80199aa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80199d6:	2300      	movs	r3, #0
}
 80199d8:	4618      	mov	r0, r3
 80199da:	3714      	adds	r7, #20
 80199dc:	46bd      	mov	sp, r7
 80199de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e2:	4770      	bx	lr
 80199e4:	2000005c 	.word	0x2000005c
 80199e8:	14f8b589 	.word	0x14f8b589

080199ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b084      	sub	sp, #16
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	60f8      	str	r0, [r7, #12]
 80199f4:	60b9      	str	r1, [r7, #8]
 80199f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80199f8:	e042      	b.n	8019a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	695b      	ldr	r3, [r3, #20]
 8019a00:	f003 0310 	and.w	r3, r3, #16
 8019a04:	2b10      	cmp	r3, #16
 8019a06:	d119      	bne.n	8019a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	f06f 0210 	mvn.w	r2, #16
 8019a10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	2200      	movs	r2, #0
 8019a16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	2220      	movs	r2, #32
 8019a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	2200      	movs	r2, #0
 8019a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	2200      	movs	r2, #0
 8019a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019a38:	2301      	movs	r3, #1
 8019a3a:	e029      	b.n	8019a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019a3c:	f7fc faf8 	bl	8016030 <HAL_GetTick>
 8019a40:	4602      	mov	r2, r0
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	1ad3      	subs	r3, r2, r3
 8019a46:	68ba      	ldr	r2, [r7, #8]
 8019a48:	429a      	cmp	r2, r3
 8019a4a:	d302      	bcc.n	8019a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8019a4c:	68bb      	ldr	r3, [r7, #8]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d116      	bne.n	8019a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	2200      	movs	r2, #0
 8019a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	2220      	movs	r2, #32
 8019a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	2200      	movs	r2, #0
 8019a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a6c:	f043 0220 	orr.w	r2, r3, #32
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	2200      	movs	r2, #0
 8019a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019a7c:	2301      	movs	r3, #1
 8019a7e:	e007      	b.n	8019a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	695b      	ldr	r3, [r3, #20]
 8019a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019a8a:	2b40      	cmp	r3, #64	; 0x40
 8019a8c:	d1b5      	bne.n	80199fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8019a8e:	2300      	movs	r3, #0
}
 8019a90:	4618      	mov	r0, r3
 8019a92:	3710      	adds	r7, #16
 8019a94:	46bd      	mov	sp, r7
 8019a96:	bd80      	pop	{r7, pc}

08019a98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8019a98:	b480      	push	{r7}
 8019a9a:	b083      	sub	sp, #12
 8019a9c:	af00      	add	r7, sp, #0
 8019a9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	695b      	ldr	r3, [r3, #20]
 8019aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019aae:	d11b      	bne.n	8019ae8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019ab8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	2200      	movs	r2, #0
 8019abe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	2220      	movs	r2, #32
 8019ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	2200      	movs	r2, #0
 8019acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ad4:	f043 0204 	orr.w	r2, r3, #4
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	2200      	movs	r2, #0
 8019ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	e000      	b.n	8019aea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8019ae8:	2300      	movs	r3, #0
}
 8019aea:	4618      	mov	r0, r3
 8019aec:	370c      	adds	r7, #12
 8019aee:	46bd      	mov	sp, r7
 8019af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af4:	4770      	bx	lr

08019af6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8019af6:	b480      	push	{r7}
 8019af8:	b083      	sub	sp, #12
 8019afa:	af00      	add	r7, sp, #0
 8019afc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b02:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8019b06:	d103      	bne.n	8019b10 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	2201      	movs	r2, #1
 8019b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8019b0e:	e007      	b.n	8019b20 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b14:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8019b18:	d102      	bne.n	8019b20 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	2208      	movs	r2, #8
 8019b1e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8019b20:	bf00      	nop
 8019b22:	370c      	adds	r7, #12
 8019b24:	46bd      	mov	sp, r7
 8019b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b2a:	4770      	bx	lr

08019b2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b086      	sub	sp, #24
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d101      	bne.n	8019b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8019b3a:	2301      	movs	r3, #1
 8019b3c:	e267      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	f003 0301 	and.w	r3, r3, #1
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d075      	beq.n	8019c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8019b4a:	4b88      	ldr	r3, [pc, #544]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019b4c:	689b      	ldr	r3, [r3, #8]
 8019b4e:	f003 030c 	and.w	r3, r3, #12
 8019b52:	2b04      	cmp	r3, #4
 8019b54:	d00c      	beq.n	8019b70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019b56:	4b85      	ldr	r3, [pc, #532]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019b58:	689b      	ldr	r3, [r3, #8]
 8019b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8019b5e:	2b08      	cmp	r3, #8
 8019b60:	d112      	bne.n	8019b88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019b62:	4b82      	ldr	r3, [pc, #520]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019b64:	685b      	ldr	r3, [r3, #4]
 8019b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019b6e:	d10b      	bne.n	8019b88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019b70:	4b7e      	ldr	r3, [pc, #504]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d05b      	beq.n	8019c34 <HAL_RCC_OscConfig+0x108>
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	685b      	ldr	r3, [r3, #4]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d157      	bne.n	8019c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8019b84:	2301      	movs	r3, #1
 8019b86:	e242      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	685b      	ldr	r3, [r3, #4]
 8019b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019b90:	d106      	bne.n	8019ba0 <HAL_RCC_OscConfig+0x74>
 8019b92:	4b76      	ldr	r3, [pc, #472]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	4a75      	ldr	r2, [pc, #468]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019b9c:	6013      	str	r3, [r2, #0]
 8019b9e:	e01d      	b.n	8019bdc <HAL_RCC_OscConfig+0xb0>
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	685b      	ldr	r3, [r3, #4]
 8019ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8019ba8:	d10c      	bne.n	8019bc4 <HAL_RCC_OscConfig+0x98>
 8019baa:	4b70      	ldr	r3, [pc, #448]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	4a6f      	ldr	r2, [pc, #444]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8019bb4:	6013      	str	r3, [r2, #0]
 8019bb6:	4b6d      	ldr	r3, [pc, #436]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	4a6c      	ldr	r2, [pc, #432]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019bc0:	6013      	str	r3, [r2, #0]
 8019bc2:	e00b      	b.n	8019bdc <HAL_RCC_OscConfig+0xb0>
 8019bc4:	4b69      	ldr	r3, [pc, #420]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	4a68      	ldr	r2, [pc, #416]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019bce:	6013      	str	r3, [r2, #0]
 8019bd0:	4b66      	ldr	r3, [pc, #408]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	4a65      	ldr	r2, [pc, #404]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8019bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	685b      	ldr	r3, [r3, #4]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d013      	beq.n	8019c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019be4:	f7fc fa24 	bl	8016030 <HAL_GetTick>
 8019be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019bea:	e008      	b.n	8019bfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019bec:	f7fc fa20 	bl	8016030 <HAL_GetTick>
 8019bf0:	4602      	mov	r2, r0
 8019bf2:	693b      	ldr	r3, [r7, #16]
 8019bf4:	1ad3      	subs	r3, r2, r3
 8019bf6:	2b64      	cmp	r3, #100	; 0x64
 8019bf8:	d901      	bls.n	8019bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8019bfa:	2303      	movs	r3, #3
 8019bfc:	e207      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019bfe:	4b5b      	ldr	r3, [pc, #364]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d0f0      	beq.n	8019bec <HAL_RCC_OscConfig+0xc0>
 8019c0a:	e014      	b.n	8019c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019c0c:	f7fc fa10 	bl	8016030 <HAL_GetTick>
 8019c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019c12:	e008      	b.n	8019c26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019c14:	f7fc fa0c 	bl	8016030 <HAL_GetTick>
 8019c18:	4602      	mov	r2, r0
 8019c1a:	693b      	ldr	r3, [r7, #16]
 8019c1c:	1ad3      	subs	r3, r2, r3
 8019c1e:	2b64      	cmp	r3, #100	; 0x64
 8019c20:	d901      	bls.n	8019c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8019c22:	2303      	movs	r3, #3
 8019c24:	e1f3      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019c26:	4b51      	ldr	r3, [pc, #324]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d1f0      	bne.n	8019c14 <HAL_RCC_OscConfig+0xe8>
 8019c32:	e000      	b.n	8019c36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	f003 0302 	and.w	r3, r3, #2
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d063      	beq.n	8019d0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8019c42:	4b4a      	ldr	r3, [pc, #296]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019c44:	689b      	ldr	r3, [r3, #8]
 8019c46:	f003 030c 	and.w	r3, r3, #12
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d00b      	beq.n	8019c66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8019c4e:	4b47      	ldr	r3, [pc, #284]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019c50:	689b      	ldr	r3, [r3, #8]
 8019c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8019c56:	2b08      	cmp	r3, #8
 8019c58:	d11c      	bne.n	8019c94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8019c5a:	4b44      	ldr	r3, [pc, #272]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019c5c:	685b      	ldr	r3, [r3, #4]
 8019c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d116      	bne.n	8019c94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019c66:	4b41      	ldr	r3, [pc, #260]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	f003 0302 	and.w	r3, r3, #2
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d005      	beq.n	8019c7e <HAL_RCC_OscConfig+0x152>
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	68db      	ldr	r3, [r3, #12]
 8019c76:	2b01      	cmp	r3, #1
 8019c78:	d001      	beq.n	8019c7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8019c7a:	2301      	movs	r3, #1
 8019c7c:	e1c7      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019c7e:	4b3b      	ldr	r3, [pc, #236]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	691b      	ldr	r3, [r3, #16]
 8019c8a:	00db      	lsls	r3, r3, #3
 8019c8c:	4937      	ldr	r1, [pc, #220]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019c8e:	4313      	orrs	r3, r2
 8019c90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019c92:	e03a      	b.n	8019d0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	68db      	ldr	r3, [r3, #12]
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d020      	beq.n	8019cde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8019c9c:	4b34      	ldr	r3, [pc, #208]	; (8019d70 <HAL_RCC_OscConfig+0x244>)
 8019c9e:	2201      	movs	r2, #1
 8019ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019ca2:	f7fc f9c5 	bl	8016030 <HAL_GetTick>
 8019ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019ca8:	e008      	b.n	8019cbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019caa:	f7fc f9c1 	bl	8016030 <HAL_GetTick>
 8019cae:	4602      	mov	r2, r0
 8019cb0:	693b      	ldr	r3, [r7, #16]
 8019cb2:	1ad3      	subs	r3, r2, r3
 8019cb4:	2b02      	cmp	r3, #2
 8019cb6:	d901      	bls.n	8019cbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8019cb8:	2303      	movs	r3, #3
 8019cba:	e1a8      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019cbc:	4b2b      	ldr	r3, [pc, #172]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	f003 0302 	and.w	r3, r3, #2
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d0f0      	beq.n	8019caa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019cc8:	4b28      	ldr	r3, [pc, #160]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	691b      	ldr	r3, [r3, #16]
 8019cd4:	00db      	lsls	r3, r3, #3
 8019cd6:	4925      	ldr	r1, [pc, #148]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019cd8:	4313      	orrs	r3, r2
 8019cda:	600b      	str	r3, [r1, #0]
 8019cdc:	e015      	b.n	8019d0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8019cde:	4b24      	ldr	r3, [pc, #144]	; (8019d70 <HAL_RCC_OscConfig+0x244>)
 8019ce0:	2200      	movs	r2, #0
 8019ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019ce4:	f7fc f9a4 	bl	8016030 <HAL_GetTick>
 8019ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019cea:	e008      	b.n	8019cfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019cec:	f7fc f9a0 	bl	8016030 <HAL_GetTick>
 8019cf0:	4602      	mov	r2, r0
 8019cf2:	693b      	ldr	r3, [r7, #16]
 8019cf4:	1ad3      	subs	r3, r2, r3
 8019cf6:	2b02      	cmp	r3, #2
 8019cf8:	d901      	bls.n	8019cfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8019cfa:	2303      	movs	r3, #3
 8019cfc:	e187      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019cfe:	4b1b      	ldr	r3, [pc, #108]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	f003 0302 	and.w	r3, r3, #2
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d1f0      	bne.n	8019cec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	f003 0308 	and.w	r3, r3, #8
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d036      	beq.n	8019d84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	695b      	ldr	r3, [r3, #20]
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d016      	beq.n	8019d4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8019d1e:	4b15      	ldr	r3, [pc, #84]	; (8019d74 <HAL_RCC_OscConfig+0x248>)
 8019d20:	2201      	movs	r2, #1
 8019d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019d24:	f7fc f984 	bl	8016030 <HAL_GetTick>
 8019d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8019d2a:	e008      	b.n	8019d3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8019d2c:	f7fc f980 	bl	8016030 <HAL_GetTick>
 8019d30:	4602      	mov	r2, r0
 8019d32:	693b      	ldr	r3, [r7, #16]
 8019d34:	1ad3      	subs	r3, r2, r3
 8019d36:	2b02      	cmp	r3, #2
 8019d38:	d901      	bls.n	8019d3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8019d3a:	2303      	movs	r3, #3
 8019d3c:	e167      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8019d3e:	4b0b      	ldr	r3, [pc, #44]	; (8019d6c <HAL_RCC_OscConfig+0x240>)
 8019d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d42:	f003 0302 	and.w	r3, r3, #2
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d0f0      	beq.n	8019d2c <HAL_RCC_OscConfig+0x200>
 8019d4a:	e01b      	b.n	8019d84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8019d4c:	4b09      	ldr	r3, [pc, #36]	; (8019d74 <HAL_RCC_OscConfig+0x248>)
 8019d4e:	2200      	movs	r2, #0
 8019d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019d52:	f7fc f96d 	bl	8016030 <HAL_GetTick>
 8019d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8019d58:	e00e      	b.n	8019d78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8019d5a:	f7fc f969 	bl	8016030 <HAL_GetTick>
 8019d5e:	4602      	mov	r2, r0
 8019d60:	693b      	ldr	r3, [r7, #16]
 8019d62:	1ad3      	subs	r3, r2, r3
 8019d64:	2b02      	cmp	r3, #2
 8019d66:	d907      	bls.n	8019d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8019d68:	2303      	movs	r3, #3
 8019d6a:	e150      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
 8019d6c:	40023800 	.word	0x40023800
 8019d70:	42470000 	.word	0x42470000
 8019d74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8019d78:	4b88      	ldr	r3, [pc, #544]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d7c:	f003 0302 	and.w	r3, r3, #2
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d1ea      	bne.n	8019d5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	f003 0304 	and.w	r3, r3, #4
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	f000 8097 	beq.w	8019ec0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8019d92:	2300      	movs	r3, #0
 8019d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019d96:	4b81      	ldr	r3, [pc, #516]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d10f      	bne.n	8019dc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8019da2:	2300      	movs	r3, #0
 8019da4:	60bb      	str	r3, [r7, #8]
 8019da6:	4b7d      	ldr	r3, [pc, #500]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019daa:	4a7c      	ldr	r2, [pc, #496]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019db0:	6413      	str	r3, [r2, #64]	; 0x40
 8019db2:	4b7a      	ldr	r3, [pc, #488]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019dba:	60bb      	str	r3, [r7, #8]
 8019dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8019dbe:	2301      	movs	r3, #1
 8019dc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019dc2:	4b77      	ldr	r3, [pc, #476]	; (8019fa0 <HAL_RCC_OscConfig+0x474>)
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d118      	bne.n	8019e00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8019dce:	4b74      	ldr	r3, [pc, #464]	; (8019fa0 <HAL_RCC_OscConfig+0x474>)
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	4a73      	ldr	r2, [pc, #460]	; (8019fa0 <HAL_RCC_OscConfig+0x474>)
 8019dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8019dda:	f7fc f929 	bl	8016030 <HAL_GetTick>
 8019dde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019de0:	e008      	b.n	8019df4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019de2:	f7fc f925 	bl	8016030 <HAL_GetTick>
 8019de6:	4602      	mov	r2, r0
 8019de8:	693b      	ldr	r3, [r7, #16]
 8019dea:	1ad3      	subs	r3, r2, r3
 8019dec:	2b02      	cmp	r3, #2
 8019dee:	d901      	bls.n	8019df4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8019df0:	2303      	movs	r3, #3
 8019df2:	e10c      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019df4:	4b6a      	ldr	r3, [pc, #424]	; (8019fa0 <HAL_RCC_OscConfig+0x474>)
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d0f0      	beq.n	8019de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	689b      	ldr	r3, [r3, #8]
 8019e04:	2b01      	cmp	r3, #1
 8019e06:	d106      	bne.n	8019e16 <HAL_RCC_OscConfig+0x2ea>
 8019e08:	4b64      	ldr	r3, [pc, #400]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e0c:	4a63      	ldr	r2, [pc, #396]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019e0e:	f043 0301 	orr.w	r3, r3, #1
 8019e12:	6713      	str	r3, [r2, #112]	; 0x70
 8019e14:	e01c      	b.n	8019e50 <HAL_RCC_OscConfig+0x324>
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	689b      	ldr	r3, [r3, #8]
 8019e1a:	2b05      	cmp	r3, #5
 8019e1c:	d10c      	bne.n	8019e38 <HAL_RCC_OscConfig+0x30c>
 8019e1e:	4b5f      	ldr	r3, [pc, #380]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e22:	4a5e      	ldr	r2, [pc, #376]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019e24:	f043 0304 	orr.w	r3, r3, #4
 8019e28:	6713      	str	r3, [r2, #112]	; 0x70
 8019e2a:	4b5c      	ldr	r3, [pc, #368]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e2e:	4a5b      	ldr	r2, [pc, #364]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019e30:	f043 0301 	orr.w	r3, r3, #1
 8019e34:	6713      	str	r3, [r2, #112]	; 0x70
 8019e36:	e00b      	b.n	8019e50 <HAL_RCC_OscConfig+0x324>
 8019e38:	4b58      	ldr	r3, [pc, #352]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e3c:	4a57      	ldr	r2, [pc, #348]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019e3e:	f023 0301 	bic.w	r3, r3, #1
 8019e42:	6713      	str	r3, [r2, #112]	; 0x70
 8019e44:	4b55      	ldr	r3, [pc, #340]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e48:	4a54      	ldr	r2, [pc, #336]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019e4a:	f023 0304 	bic.w	r3, r3, #4
 8019e4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	689b      	ldr	r3, [r3, #8]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d015      	beq.n	8019e84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019e58:	f7fc f8ea 	bl	8016030 <HAL_GetTick>
 8019e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019e5e:	e00a      	b.n	8019e76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019e60:	f7fc f8e6 	bl	8016030 <HAL_GetTick>
 8019e64:	4602      	mov	r2, r0
 8019e66:	693b      	ldr	r3, [r7, #16]
 8019e68:	1ad3      	subs	r3, r2, r3
 8019e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8019e6e:	4293      	cmp	r3, r2
 8019e70:	d901      	bls.n	8019e76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8019e72:	2303      	movs	r3, #3
 8019e74:	e0cb      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019e76:	4b49      	ldr	r3, [pc, #292]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e7a:	f003 0302 	and.w	r3, r3, #2
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d0ee      	beq.n	8019e60 <HAL_RCC_OscConfig+0x334>
 8019e82:	e014      	b.n	8019eae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019e84:	f7fc f8d4 	bl	8016030 <HAL_GetTick>
 8019e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019e8a:	e00a      	b.n	8019ea2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019e8c:	f7fc f8d0 	bl	8016030 <HAL_GetTick>
 8019e90:	4602      	mov	r2, r0
 8019e92:	693b      	ldr	r3, [r7, #16]
 8019e94:	1ad3      	subs	r3, r2, r3
 8019e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8019e9a:	4293      	cmp	r3, r2
 8019e9c:	d901      	bls.n	8019ea2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8019e9e:	2303      	movs	r3, #3
 8019ea0:	e0b5      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019ea2:	4b3e      	ldr	r3, [pc, #248]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ea6:	f003 0302 	and.w	r3, r3, #2
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d1ee      	bne.n	8019e8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8019eae:	7dfb      	ldrb	r3, [r7, #23]
 8019eb0:	2b01      	cmp	r3, #1
 8019eb2:	d105      	bne.n	8019ec0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8019eb4:	4b39      	ldr	r3, [pc, #228]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019eb8:	4a38      	ldr	r2, [pc, #224]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019ebe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	699b      	ldr	r3, [r3, #24]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	f000 80a1 	beq.w	801a00c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8019eca:	4b34      	ldr	r3, [pc, #208]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019ecc:	689b      	ldr	r3, [r3, #8]
 8019ece:	f003 030c 	and.w	r3, r3, #12
 8019ed2:	2b08      	cmp	r3, #8
 8019ed4:	d05c      	beq.n	8019f90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	699b      	ldr	r3, [r3, #24]
 8019eda:	2b02      	cmp	r3, #2
 8019edc:	d141      	bne.n	8019f62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019ede:	4b31      	ldr	r3, [pc, #196]	; (8019fa4 <HAL_RCC_OscConfig+0x478>)
 8019ee0:	2200      	movs	r2, #0
 8019ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019ee4:	f7fc f8a4 	bl	8016030 <HAL_GetTick>
 8019ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019eea:	e008      	b.n	8019efe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019eec:	f7fc f8a0 	bl	8016030 <HAL_GetTick>
 8019ef0:	4602      	mov	r2, r0
 8019ef2:	693b      	ldr	r3, [r7, #16]
 8019ef4:	1ad3      	subs	r3, r2, r3
 8019ef6:	2b02      	cmp	r3, #2
 8019ef8:	d901      	bls.n	8019efe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8019efa:	2303      	movs	r3, #3
 8019efc:	e087      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019efe:	4b27      	ldr	r3, [pc, #156]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d1f0      	bne.n	8019eec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	69da      	ldr	r2, [r3, #28]
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	6a1b      	ldr	r3, [r3, #32]
 8019f12:	431a      	orrs	r2, r3
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f18:	019b      	lsls	r3, r3, #6
 8019f1a:	431a      	orrs	r2, r3
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f20:	085b      	lsrs	r3, r3, #1
 8019f22:	3b01      	subs	r3, #1
 8019f24:	041b      	lsls	r3, r3, #16
 8019f26:	431a      	orrs	r2, r3
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f2c:	061b      	lsls	r3, r3, #24
 8019f2e:	491b      	ldr	r1, [pc, #108]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019f30:	4313      	orrs	r3, r2
 8019f32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8019f34:	4b1b      	ldr	r3, [pc, #108]	; (8019fa4 <HAL_RCC_OscConfig+0x478>)
 8019f36:	2201      	movs	r2, #1
 8019f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019f3a:	f7fc f879 	bl	8016030 <HAL_GetTick>
 8019f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019f40:	e008      	b.n	8019f54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019f42:	f7fc f875 	bl	8016030 <HAL_GetTick>
 8019f46:	4602      	mov	r2, r0
 8019f48:	693b      	ldr	r3, [r7, #16]
 8019f4a:	1ad3      	subs	r3, r2, r3
 8019f4c:	2b02      	cmp	r3, #2
 8019f4e:	d901      	bls.n	8019f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8019f50:	2303      	movs	r3, #3
 8019f52:	e05c      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019f54:	4b11      	ldr	r3, [pc, #68]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d0f0      	beq.n	8019f42 <HAL_RCC_OscConfig+0x416>
 8019f60:	e054      	b.n	801a00c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019f62:	4b10      	ldr	r3, [pc, #64]	; (8019fa4 <HAL_RCC_OscConfig+0x478>)
 8019f64:	2200      	movs	r2, #0
 8019f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019f68:	f7fc f862 	bl	8016030 <HAL_GetTick>
 8019f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019f6e:	e008      	b.n	8019f82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019f70:	f7fc f85e 	bl	8016030 <HAL_GetTick>
 8019f74:	4602      	mov	r2, r0
 8019f76:	693b      	ldr	r3, [r7, #16]
 8019f78:	1ad3      	subs	r3, r2, r3
 8019f7a:	2b02      	cmp	r3, #2
 8019f7c:	d901      	bls.n	8019f82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8019f7e:	2303      	movs	r3, #3
 8019f80:	e045      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019f82:	4b06      	ldr	r3, [pc, #24]	; (8019f9c <HAL_RCC_OscConfig+0x470>)
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d1f0      	bne.n	8019f70 <HAL_RCC_OscConfig+0x444>
 8019f8e:	e03d      	b.n	801a00c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	699b      	ldr	r3, [r3, #24]
 8019f94:	2b01      	cmp	r3, #1
 8019f96:	d107      	bne.n	8019fa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8019f98:	2301      	movs	r3, #1
 8019f9a:	e038      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
 8019f9c:	40023800 	.word	0x40023800
 8019fa0:	40007000 	.word	0x40007000
 8019fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8019fa8:	4b1b      	ldr	r3, [pc, #108]	; (801a018 <HAL_RCC_OscConfig+0x4ec>)
 8019faa:	685b      	ldr	r3, [r3, #4]
 8019fac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	699b      	ldr	r3, [r3, #24]
 8019fb2:	2b01      	cmp	r3, #1
 8019fb4:	d028      	beq.n	801a008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	d121      	bne.n	801a008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019fce:	429a      	cmp	r2, r3
 8019fd0:	d11a      	bne.n	801a008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8019fd2:	68fa      	ldr	r2, [r7, #12]
 8019fd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8019fd8:	4013      	ands	r3, r2
 8019fda:	687a      	ldr	r2, [r7, #4]
 8019fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8019fe0:	4293      	cmp	r3, r2
 8019fe2:	d111      	bne.n	801a008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019fee:	085b      	lsrs	r3, r3, #1
 8019ff0:	3b01      	subs	r3, #1
 8019ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8019ff4:	429a      	cmp	r2, r3
 8019ff6:	d107      	bne.n	801a008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a004:	429a      	cmp	r2, r3
 801a006:	d001      	beq.n	801a00c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801a008:	2301      	movs	r3, #1
 801a00a:	e000      	b.n	801a00e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801a00c:	2300      	movs	r3, #0
}
 801a00e:	4618      	mov	r0, r3
 801a010:	3718      	adds	r7, #24
 801a012:	46bd      	mov	sp, r7
 801a014:	bd80      	pop	{r7, pc}
 801a016:	bf00      	nop
 801a018:	40023800 	.word	0x40023800

0801a01c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b084      	sub	sp, #16
 801a020:	af00      	add	r7, sp, #0
 801a022:	6078      	str	r0, [r7, #4]
 801a024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d101      	bne.n	801a030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a02c:	2301      	movs	r3, #1
 801a02e:	e0cc      	b.n	801a1ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801a030:	4b68      	ldr	r3, [pc, #416]	; (801a1d4 <HAL_RCC_ClockConfig+0x1b8>)
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	f003 0307 	and.w	r3, r3, #7
 801a038:	683a      	ldr	r2, [r7, #0]
 801a03a:	429a      	cmp	r2, r3
 801a03c:	d90c      	bls.n	801a058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a03e:	4b65      	ldr	r3, [pc, #404]	; (801a1d4 <HAL_RCC_ClockConfig+0x1b8>)
 801a040:	683a      	ldr	r2, [r7, #0]
 801a042:	b2d2      	uxtb	r2, r2
 801a044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a046:	4b63      	ldr	r3, [pc, #396]	; (801a1d4 <HAL_RCC_ClockConfig+0x1b8>)
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	f003 0307 	and.w	r3, r3, #7
 801a04e:	683a      	ldr	r2, [r7, #0]
 801a050:	429a      	cmp	r2, r3
 801a052:	d001      	beq.n	801a058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801a054:	2301      	movs	r3, #1
 801a056:	e0b8      	b.n	801a1ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	f003 0302 	and.w	r3, r3, #2
 801a060:	2b00      	cmp	r3, #0
 801a062:	d020      	beq.n	801a0a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	f003 0304 	and.w	r3, r3, #4
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d005      	beq.n	801a07c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801a070:	4b59      	ldr	r3, [pc, #356]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a072:	689b      	ldr	r3, [r3, #8]
 801a074:	4a58      	ldr	r2, [pc, #352]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a076:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801a07a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	f003 0308 	and.w	r3, r3, #8
 801a084:	2b00      	cmp	r3, #0
 801a086:	d005      	beq.n	801a094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801a088:	4b53      	ldr	r3, [pc, #332]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a08a:	689b      	ldr	r3, [r3, #8]
 801a08c:	4a52      	ldr	r2, [pc, #328]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a08e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801a092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a094:	4b50      	ldr	r3, [pc, #320]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a096:	689b      	ldr	r3, [r3, #8]
 801a098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	689b      	ldr	r3, [r3, #8]
 801a0a0:	494d      	ldr	r1, [pc, #308]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a0a2:	4313      	orrs	r3, r2
 801a0a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	f003 0301 	and.w	r3, r3, #1
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d044      	beq.n	801a13c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	685b      	ldr	r3, [r3, #4]
 801a0b6:	2b01      	cmp	r3, #1
 801a0b8:	d107      	bne.n	801a0ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a0ba:	4b47      	ldr	r3, [pc, #284]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d119      	bne.n	801a0fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a0c6:	2301      	movs	r3, #1
 801a0c8:	e07f      	b.n	801a1ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	685b      	ldr	r3, [r3, #4]
 801a0ce:	2b02      	cmp	r3, #2
 801a0d0:	d003      	beq.n	801a0da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a0d6:	2b03      	cmp	r3, #3
 801a0d8:	d107      	bne.n	801a0ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a0da:	4b3f      	ldr	r3, [pc, #252]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d109      	bne.n	801a0fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a0e6:	2301      	movs	r3, #1
 801a0e8:	e06f      	b.n	801a1ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a0ea:	4b3b      	ldr	r3, [pc, #236]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	f003 0302 	and.w	r3, r3, #2
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d101      	bne.n	801a0fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a0f6:	2301      	movs	r3, #1
 801a0f8:	e067      	b.n	801a1ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801a0fa:	4b37      	ldr	r3, [pc, #220]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a0fc:	689b      	ldr	r3, [r3, #8]
 801a0fe:	f023 0203 	bic.w	r2, r3, #3
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	685b      	ldr	r3, [r3, #4]
 801a106:	4934      	ldr	r1, [pc, #208]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a108:	4313      	orrs	r3, r2
 801a10a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801a10c:	f7fb ff90 	bl	8016030 <HAL_GetTick>
 801a110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a112:	e00a      	b.n	801a12a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a114:	f7fb ff8c 	bl	8016030 <HAL_GetTick>
 801a118:	4602      	mov	r2, r0
 801a11a:	68fb      	ldr	r3, [r7, #12]
 801a11c:	1ad3      	subs	r3, r2, r3
 801a11e:	f241 3288 	movw	r2, #5000	; 0x1388
 801a122:	4293      	cmp	r3, r2
 801a124:	d901      	bls.n	801a12a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801a126:	2303      	movs	r3, #3
 801a128:	e04f      	b.n	801a1ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a12a:	4b2b      	ldr	r3, [pc, #172]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a12c:	689b      	ldr	r3, [r3, #8]
 801a12e:	f003 020c 	and.w	r2, r3, #12
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	685b      	ldr	r3, [r3, #4]
 801a136:	009b      	lsls	r3, r3, #2
 801a138:	429a      	cmp	r2, r3
 801a13a:	d1eb      	bne.n	801a114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801a13c:	4b25      	ldr	r3, [pc, #148]	; (801a1d4 <HAL_RCC_ClockConfig+0x1b8>)
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	f003 0307 	and.w	r3, r3, #7
 801a144:	683a      	ldr	r2, [r7, #0]
 801a146:	429a      	cmp	r2, r3
 801a148:	d20c      	bcs.n	801a164 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a14a:	4b22      	ldr	r3, [pc, #136]	; (801a1d4 <HAL_RCC_ClockConfig+0x1b8>)
 801a14c:	683a      	ldr	r2, [r7, #0]
 801a14e:	b2d2      	uxtb	r2, r2
 801a150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a152:	4b20      	ldr	r3, [pc, #128]	; (801a1d4 <HAL_RCC_ClockConfig+0x1b8>)
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	f003 0307 	and.w	r3, r3, #7
 801a15a:	683a      	ldr	r2, [r7, #0]
 801a15c:	429a      	cmp	r2, r3
 801a15e:	d001      	beq.n	801a164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801a160:	2301      	movs	r3, #1
 801a162:	e032      	b.n	801a1ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	f003 0304 	and.w	r3, r3, #4
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d008      	beq.n	801a182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801a170:	4b19      	ldr	r3, [pc, #100]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a172:	689b      	ldr	r3, [r3, #8]
 801a174:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	68db      	ldr	r3, [r3, #12]
 801a17c:	4916      	ldr	r1, [pc, #88]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a17e:	4313      	orrs	r3, r2
 801a180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	f003 0308 	and.w	r3, r3, #8
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d009      	beq.n	801a1a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801a18e:	4b12      	ldr	r3, [pc, #72]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a190:	689b      	ldr	r3, [r3, #8]
 801a192:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	691b      	ldr	r3, [r3, #16]
 801a19a:	00db      	lsls	r3, r3, #3
 801a19c:	490e      	ldr	r1, [pc, #56]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a19e:	4313      	orrs	r3, r2
 801a1a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a1a2:	f000 f821 	bl	801a1e8 <HAL_RCC_GetSysClockFreq>
 801a1a6:	4602      	mov	r2, r0
 801a1a8:	4b0b      	ldr	r3, [pc, #44]	; (801a1d8 <HAL_RCC_ClockConfig+0x1bc>)
 801a1aa:	689b      	ldr	r3, [r3, #8]
 801a1ac:	091b      	lsrs	r3, r3, #4
 801a1ae:	f003 030f 	and.w	r3, r3, #15
 801a1b2:	490a      	ldr	r1, [pc, #40]	; (801a1dc <HAL_RCC_ClockConfig+0x1c0>)
 801a1b4:	5ccb      	ldrb	r3, [r1, r3]
 801a1b6:	fa22 f303 	lsr.w	r3, r2, r3
 801a1ba:	4a09      	ldr	r2, [pc, #36]	; (801a1e0 <HAL_RCC_ClockConfig+0x1c4>)
 801a1bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801a1be:	4b09      	ldr	r3, [pc, #36]	; (801a1e4 <HAL_RCC_ClockConfig+0x1c8>)
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	4618      	mov	r0, r3
 801a1c4:	f7fb fef0 	bl	8015fa8 <HAL_InitTick>

  return HAL_OK;
 801a1c8:	2300      	movs	r3, #0
}
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	3710      	adds	r7, #16
 801a1ce:	46bd      	mov	sp, r7
 801a1d0:	bd80      	pop	{r7, pc}
 801a1d2:	bf00      	nop
 801a1d4:	40023c00 	.word	0x40023c00
 801a1d8:	40023800 	.word	0x40023800
 801a1dc:	08029bfc 	.word	0x08029bfc
 801a1e0:	2000005c 	.word	0x2000005c
 801a1e4:	20000060 	.word	0x20000060

0801a1e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a1e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a1ec:	b094      	sub	sp, #80	; 0x50
 801a1ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	647b      	str	r3, [r7, #68]	; 0x44
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801a200:	4b79      	ldr	r3, [pc, #484]	; (801a3e8 <HAL_RCC_GetSysClockFreq+0x200>)
 801a202:	689b      	ldr	r3, [r3, #8]
 801a204:	f003 030c 	and.w	r3, r3, #12
 801a208:	2b08      	cmp	r3, #8
 801a20a:	d00d      	beq.n	801a228 <HAL_RCC_GetSysClockFreq+0x40>
 801a20c:	2b08      	cmp	r3, #8
 801a20e:	f200 80e1 	bhi.w	801a3d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 801a212:	2b00      	cmp	r3, #0
 801a214:	d002      	beq.n	801a21c <HAL_RCC_GetSysClockFreq+0x34>
 801a216:	2b04      	cmp	r3, #4
 801a218:	d003      	beq.n	801a222 <HAL_RCC_GetSysClockFreq+0x3a>
 801a21a:	e0db      	b.n	801a3d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801a21c:	4b73      	ldr	r3, [pc, #460]	; (801a3ec <HAL_RCC_GetSysClockFreq+0x204>)
 801a21e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801a220:	e0db      	b.n	801a3da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801a222:	4b73      	ldr	r3, [pc, #460]	; (801a3f0 <HAL_RCC_GetSysClockFreq+0x208>)
 801a224:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a226:	e0d8      	b.n	801a3da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801a228:	4b6f      	ldr	r3, [pc, #444]	; (801a3e8 <HAL_RCC_GetSysClockFreq+0x200>)
 801a22a:	685b      	ldr	r3, [r3, #4]
 801a22c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a230:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801a232:	4b6d      	ldr	r3, [pc, #436]	; (801a3e8 <HAL_RCC_GetSysClockFreq+0x200>)
 801a234:	685b      	ldr	r3, [r3, #4]
 801a236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d063      	beq.n	801a306 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a23e:	4b6a      	ldr	r3, [pc, #424]	; (801a3e8 <HAL_RCC_GetSysClockFreq+0x200>)
 801a240:	685b      	ldr	r3, [r3, #4]
 801a242:	099b      	lsrs	r3, r3, #6
 801a244:	2200      	movs	r2, #0
 801a246:	63bb      	str	r3, [r7, #56]	; 0x38
 801a248:	63fa      	str	r2, [r7, #60]	; 0x3c
 801a24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a24c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a250:	633b      	str	r3, [r7, #48]	; 0x30
 801a252:	2300      	movs	r3, #0
 801a254:	637b      	str	r3, [r7, #52]	; 0x34
 801a256:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801a25a:	4622      	mov	r2, r4
 801a25c:	462b      	mov	r3, r5
 801a25e:	f04f 0000 	mov.w	r0, #0
 801a262:	f04f 0100 	mov.w	r1, #0
 801a266:	0159      	lsls	r1, r3, #5
 801a268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801a26c:	0150      	lsls	r0, r2, #5
 801a26e:	4602      	mov	r2, r0
 801a270:	460b      	mov	r3, r1
 801a272:	4621      	mov	r1, r4
 801a274:	1a51      	subs	r1, r2, r1
 801a276:	6139      	str	r1, [r7, #16]
 801a278:	4629      	mov	r1, r5
 801a27a:	eb63 0301 	sbc.w	r3, r3, r1
 801a27e:	617b      	str	r3, [r7, #20]
 801a280:	f04f 0200 	mov.w	r2, #0
 801a284:	f04f 0300 	mov.w	r3, #0
 801a288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801a28c:	4659      	mov	r1, fp
 801a28e:	018b      	lsls	r3, r1, #6
 801a290:	4651      	mov	r1, sl
 801a292:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801a296:	4651      	mov	r1, sl
 801a298:	018a      	lsls	r2, r1, #6
 801a29a:	4651      	mov	r1, sl
 801a29c:	ebb2 0801 	subs.w	r8, r2, r1
 801a2a0:	4659      	mov	r1, fp
 801a2a2:	eb63 0901 	sbc.w	r9, r3, r1
 801a2a6:	f04f 0200 	mov.w	r2, #0
 801a2aa:	f04f 0300 	mov.w	r3, #0
 801a2ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801a2b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801a2b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801a2ba:	4690      	mov	r8, r2
 801a2bc:	4699      	mov	r9, r3
 801a2be:	4623      	mov	r3, r4
 801a2c0:	eb18 0303 	adds.w	r3, r8, r3
 801a2c4:	60bb      	str	r3, [r7, #8]
 801a2c6:	462b      	mov	r3, r5
 801a2c8:	eb49 0303 	adc.w	r3, r9, r3
 801a2cc:	60fb      	str	r3, [r7, #12]
 801a2ce:	f04f 0200 	mov.w	r2, #0
 801a2d2:	f04f 0300 	mov.w	r3, #0
 801a2d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801a2da:	4629      	mov	r1, r5
 801a2dc:	024b      	lsls	r3, r1, #9
 801a2de:	4621      	mov	r1, r4
 801a2e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801a2e4:	4621      	mov	r1, r4
 801a2e6:	024a      	lsls	r2, r1, #9
 801a2e8:	4610      	mov	r0, r2
 801a2ea:	4619      	mov	r1, r3
 801a2ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a2ee:	2200      	movs	r2, #0
 801a2f0:	62bb      	str	r3, [r7, #40]	; 0x28
 801a2f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a2f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801a2f8:	f7e6 fc7e 	bl	8000bf8 <__aeabi_uldivmod>
 801a2fc:	4602      	mov	r2, r0
 801a2fe:	460b      	mov	r3, r1
 801a300:	4613      	mov	r3, r2
 801a302:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a304:	e058      	b.n	801a3b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a306:	4b38      	ldr	r3, [pc, #224]	; (801a3e8 <HAL_RCC_GetSysClockFreq+0x200>)
 801a308:	685b      	ldr	r3, [r3, #4]
 801a30a:	099b      	lsrs	r3, r3, #6
 801a30c:	2200      	movs	r2, #0
 801a30e:	4618      	mov	r0, r3
 801a310:	4611      	mov	r1, r2
 801a312:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801a316:	623b      	str	r3, [r7, #32]
 801a318:	2300      	movs	r3, #0
 801a31a:	627b      	str	r3, [r7, #36]	; 0x24
 801a31c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801a320:	4642      	mov	r2, r8
 801a322:	464b      	mov	r3, r9
 801a324:	f04f 0000 	mov.w	r0, #0
 801a328:	f04f 0100 	mov.w	r1, #0
 801a32c:	0159      	lsls	r1, r3, #5
 801a32e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801a332:	0150      	lsls	r0, r2, #5
 801a334:	4602      	mov	r2, r0
 801a336:	460b      	mov	r3, r1
 801a338:	4641      	mov	r1, r8
 801a33a:	ebb2 0a01 	subs.w	sl, r2, r1
 801a33e:	4649      	mov	r1, r9
 801a340:	eb63 0b01 	sbc.w	fp, r3, r1
 801a344:	f04f 0200 	mov.w	r2, #0
 801a348:	f04f 0300 	mov.w	r3, #0
 801a34c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801a350:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801a354:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801a358:	ebb2 040a 	subs.w	r4, r2, sl
 801a35c:	eb63 050b 	sbc.w	r5, r3, fp
 801a360:	f04f 0200 	mov.w	r2, #0
 801a364:	f04f 0300 	mov.w	r3, #0
 801a368:	00eb      	lsls	r3, r5, #3
 801a36a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801a36e:	00e2      	lsls	r2, r4, #3
 801a370:	4614      	mov	r4, r2
 801a372:	461d      	mov	r5, r3
 801a374:	4643      	mov	r3, r8
 801a376:	18e3      	adds	r3, r4, r3
 801a378:	603b      	str	r3, [r7, #0]
 801a37a:	464b      	mov	r3, r9
 801a37c:	eb45 0303 	adc.w	r3, r5, r3
 801a380:	607b      	str	r3, [r7, #4]
 801a382:	f04f 0200 	mov.w	r2, #0
 801a386:	f04f 0300 	mov.w	r3, #0
 801a38a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801a38e:	4629      	mov	r1, r5
 801a390:	028b      	lsls	r3, r1, #10
 801a392:	4621      	mov	r1, r4
 801a394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801a398:	4621      	mov	r1, r4
 801a39a:	028a      	lsls	r2, r1, #10
 801a39c:	4610      	mov	r0, r2
 801a39e:	4619      	mov	r1, r3
 801a3a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a3a2:	2200      	movs	r2, #0
 801a3a4:	61bb      	str	r3, [r7, #24]
 801a3a6:	61fa      	str	r2, [r7, #28]
 801a3a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a3ac:	f7e6 fc24 	bl	8000bf8 <__aeabi_uldivmod>
 801a3b0:	4602      	mov	r2, r0
 801a3b2:	460b      	mov	r3, r1
 801a3b4:	4613      	mov	r3, r2
 801a3b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801a3b8:	4b0b      	ldr	r3, [pc, #44]	; (801a3e8 <HAL_RCC_GetSysClockFreq+0x200>)
 801a3ba:	685b      	ldr	r3, [r3, #4]
 801a3bc:	0c1b      	lsrs	r3, r3, #16
 801a3be:	f003 0303 	and.w	r3, r3, #3
 801a3c2:	3301      	adds	r3, #1
 801a3c4:	005b      	lsls	r3, r3, #1
 801a3c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801a3c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a3ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3cc:	fbb2 f3f3 	udiv	r3, r2, r3
 801a3d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a3d2:	e002      	b.n	801a3da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801a3d4:	4b05      	ldr	r3, [pc, #20]	; (801a3ec <HAL_RCC_GetSysClockFreq+0x204>)
 801a3d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a3d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 801a3da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801a3dc:	4618      	mov	r0, r3
 801a3de:	3750      	adds	r7, #80	; 0x50
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a3e6:	bf00      	nop
 801a3e8:	40023800 	.word	0x40023800
 801a3ec:	00f42400 	.word	0x00f42400
 801a3f0:	007a1200 	.word	0x007a1200

0801a3f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801a3f4:	b480      	push	{r7}
 801a3f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801a3f8:	4b03      	ldr	r3, [pc, #12]	; (801a408 <HAL_RCC_GetHCLKFreq+0x14>)
 801a3fa:	681b      	ldr	r3, [r3, #0]
}
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	46bd      	mov	sp, r7
 801a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a404:	4770      	bx	lr
 801a406:	bf00      	nop
 801a408:	2000005c 	.word	0x2000005c

0801a40c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801a410:	f7ff fff0 	bl	801a3f4 <HAL_RCC_GetHCLKFreq>
 801a414:	4602      	mov	r2, r0
 801a416:	4b05      	ldr	r3, [pc, #20]	; (801a42c <HAL_RCC_GetPCLK1Freq+0x20>)
 801a418:	689b      	ldr	r3, [r3, #8]
 801a41a:	0a9b      	lsrs	r3, r3, #10
 801a41c:	f003 0307 	and.w	r3, r3, #7
 801a420:	4903      	ldr	r1, [pc, #12]	; (801a430 <HAL_RCC_GetPCLK1Freq+0x24>)
 801a422:	5ccb      	ldrb	r3, [r1, r3]
 801a424:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a428:	4618      	mov	r0, r3
 801a42a:	bd80      	pop	{r7, pc}
 801a42c:	40023800 	.word	0x40023800
 801a430:	08029c0c 	.word	0x08029c0c

0801a434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801a434:	b580      	push	{r7, lr}
 801a436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801a438:	f7ff ffdc 	bl	801a3f4 <HAL_RCC_GetHCLKFreq>
 801a43c:	4602      	mov	r2, r0
 801a43e:	4b05      	ldr	r3, [pc, #20]	; (801a454 <HAL_RCC_GetPCLK2Freq+0x20>)
 801a440:	689b      	ldr	r3, [r3, #8]
 801a442:	0b5b      	lsrs	r3, r3, #13
 801a444:	f003 0307 	and.w	r3, r3, #7
 801a448:	4903      	ldr	r1, [pc, #12]	; (801a458 <HAL_RCC_GetPCLK2Freq+0x24>)
 801a44a:	5ccb      	ldrb	r3, [r1, r3]
 801a44c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a450:	4618      	mov	r0, r3
 801a452:	bd80      	pop	{r7, pc}
 801a454:	40023800 	.word	0x40023800
 801a458:	08029c0c 	.word	0x08029c0c

0801a45c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a45c:	b580      	push	{r7, lr}
 801a45e:	b082      	sub	sp, #8
 801a460:	af00      	add	r7, sp, #0
 801a462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	2b00      	cmp	r3, #0
 801a468:	d101      	bne.n	801a46e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a46a:	2301      	movs	r3, #1
 801a46c:	e041      	b.n	801a4f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a474:	b2db      	uxtb	r3, r3
 801a476:	2b00      	cmp	r3, #0
 801a478:	d106      	bne.n	801a488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	2200      	movs	r2, #0
 801a47e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a482:	6878      	ldr	r0, [r7, #4]
 801a484:	f7fb fa34 	bl	80158f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	2202      	movs	r2, #2
 801a48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	681a      	ldr	r2, [r3, #0]
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	3304      	adds	r3, #4
 801a498:	4619      	mov	r1, r3
 801a49a:	4610      	mov	r0, r2
 801a49c:	f000 fda4 	bl	801afe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	2201      	movs	r2, #1
 801a4a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	2201      	movs	r2, #1
 801a4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	2201      	movs	r2, #1
 801a4b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	2201      	movs	r2, #1
 801a4bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	2201      	movs	r2, #1
 801a4c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	2201      	movs	r2, #1
 801a4cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	2201      	movs	r2, #1
 801a4d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	2201      	movs	r2, #1
 801a4dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	2201      	movs	r2, #1
 801a4e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	2201      	movs	r2, #1
 801a4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a4f0:	2300      	movs	r3, #0
}
 801a4f2:	4618      	mov	r0, r3
 801a4f4:	3708      	adds	r7, #8
 801a4f6:	46bd      	mov	sp, r7
 801a4f8:	bd80      	pop	{r7, pc}
	...

0801a4fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801a4fc:	b480      	push	{r7}
 801a4fe:	b085      	sub	sp, #20
 801a500:	af00      	add	r7, sp, #0
 801a502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a50a:	b2db      	uxtb	r3, r3
 801a50c:	2b01      	cmp	r3, #1
 801a50e:	d001      	beq.n	801a514 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801a510:	2301      	movs	r3, #1
 801a512:	e03c      	b.n	801a58e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	2202      	movs	r2, #2
 801a518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	4a1e      	ldr	r2, [pc, #120]	; (801a59c <HAL_TIM_Base_Start+0xa0>)
 801a522:	4293      	cmp	r3, r2
 801a524:	d018      	beq.n	801a558 <HAL_TIM_Base_Start+0x5c>
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a52e:	d013      	beq.n	801a558 <HAL_TIM_Base_Start+0x5c>
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	4a1a      	ldr	r2, [pc, #104]	; (801a5a0 <HAL_TIM_Base_Start+0xa4>)
 801a536:	4293      	cmp	r3, r2
 801a538:	d00e      	beq.n	801a558 <HAL_TIM_Base_Start+0x5c>
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	4a19      	ldr	r2, [pc, #100]	; (801a5a4 <HAL_TIM_Base_Start+0xa8>)
 801a540:	4293      	cmp	r3, r2
 801a542:	d009      	beq.n	801a558 <HAL_TIM_Base_Start+0x5c>
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	681b      	ldr	r3, [r3, #0]
 801a548:	4a17      	ldr	r2, [pc, #92]	; (801a5a8 <HAL_TIM_Base_Start+0xac>)
 801a54a:	4293      	cmp	r3, r2
 801a54c:	d004      	beq.n	801a558 <HAL_TIM_Base_Start+0x5c>
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	4a16      	ldr	r2, [pc, #88]	; (801a5ac <HAL_TIM_Base_Start+0xb0>)
 801a554:	4293      	cmp	r3, r2
 801a556:	d111      	bne.n	801a57c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	689b      	ldr	r3, [r3, #8]
 801a55e:	f003 0307 	and.w	r3, r3, #7
 801a562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a564:	68fb      	ldr	r3, [r7, #12]
 801a566:	2b06      	cmp	r3, #6
 801a568:	d010      	beq.n	801a58c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	681a      	ldr	r2, [r3, #0]
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	f042 0201 	orr.w	r2, r2, #1
 801a578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a57a:	e007      	b.n	801a58c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	681a      	ldr	r2, [r3, #0]
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	f042 0201 	orr.w	r2, r2, #1
 801a58a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a58c:	2300      	movs	r3, #0
}
 801a58e:	4618      	mov	r0, r3
 801a590:	3714      	adds	r7, #20
 801a592:	46bd      	mov	sp, r7
 801a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a598:	4770      	bx	lr
 801a59a:	bf00      	nop
 801a59c:	40010000 	.word	0x40010000
 801a5a0:	40000400 	.word	0x40000400
 801a5a4:	40000800 	.word	0x40000800
 801a5a8:	40000c00 	.word	0x40000c00
 801a5ac:	40014000 	.word	0x40014000

0801a5b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801a5b0:	b480      	push	{r7}
 801a5b2:	b085      	sub	sp, #20
 801a5b4:	af00      	add	r7, sp, #0
 801a5b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a5be:	b2db      	uxtb	r3, r3
 801a5c0:	2b01      	cmp	r3, #1
 801a5c2:	d001      	beq.n	801a5c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801a5c4:	2301      	movs	r3, #1
 801a5c6:	e044      	b.n	801a652 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	2202      	movs	r2, #2
 801a5cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	68da      	ldr	r2, [r3, #12]
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	f042 0201 	orr.w	r2, r2, #1
 801a5de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	4a1e      	ldr	r2, [pc, #120]	; (801a660 <HAL_TIM_Base_Start_IT+0xb0>)
 801a5e6:	4293      	cmp	r3, r2
 801a5e8:	d018      	beq.n	801a61c <HAL_TIM_Base_Start_IT+0x6c>
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a5f2:	d013      	beq.n	801a61c <HAL_TIM_Base_Start_IT+0x6c>
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	4a1a      	ldr	r2, [pc, #104]	; (801a664 <HAL_TIM_Base_Start_IT+0xb4>)
 801a5fa:	4293      	cmp	r3, r2
 801a5fc:	d00e      	beq.n	801a61c <HAL_TIM_Base_Start_IT+0x6c>
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	4a19      	ldr	r2, [pc, #100]	; (801a668 <HAL_TIM_Base_Start_IT+0xb8>)
 801a604:	4293      	cmp	r3, r2
 801a606:	d009      	beq.n	801a61c <HAL_TIM_Base_Start_IT+0x6c>
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	681b      	ldr	r3, [r3, #0]
 801a60c:	4a17      	ldr	r2, [pc, #92]	; (801a66c <HAL_TIM_Base_Start_IT+0xbc>)
 801a60e:	4293      	cmp	r3, r2
 801a610:	d004      	beq.n	801a61c <HAL_TIM_Base_Start_IT+0x6c>
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	681b      	ldr	r3, [r3, #0]
 801a616:	4a16      	ldr	r2, [pc, #88]	; (801a670 <HAL_TIM_Base_Start_IT+0xc0>)
 801a618:	4293      	cmp	r3, r2
 801a61a:	d111      	bne.n	801a640 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	689b      	ldr	r3, [r3, #8]
 801a622:	f003 0307 	and.w	r3, r3, #7
 801a626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a628:	68fb      	ldr	r3, [r7, #12]
 801a62a:	2b06      	cmp	r3, #6
 801a62c:	d010      	beq.n	801a650 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	681a      	ldr	r2, [r3, #0]
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	f042 0201 	orr.w	r2, r2, #1
 801a63c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a63e:	e007      	b.n	801a650 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	681a      	ldr	r2, [r3, #0]
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	f042 0201 	orr.w	r2, r2, #1
 801a64e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a650:	2300      	movs	r3, #0
}
 801a652:	4618      	mov	r0, r3
 801a654:	3714      	adds	r7, #20
 801a656:	46bd      	mov	sp, r7
 801a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a65c:	4770      	bx	lr
 801a65e:	bf00      	nop
 801a660:	40010000 	.word	0x40010000
 801a664:	40000400 	.word	0x40000400
 801a668:	40000800 	.word	0x40000800
 801a66c:	40000c00 	.word	0x40000c00
 801a670:	40014000 	.word	0x40014000

0801a674 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801a674:	b580      	push	{r7, lr}
 801a676:	b082      	sub	sp, #8
 801a678:	af00      	add	r7, sp, #0
 801a67a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d101      	bne.n	801a686 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801a682:	2301      	movs	r3, #1
 801a684:	e041      	b.n	801a70a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a68c:	b2db      	uxtb	r3, r3
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d106      	bne.n	801a6a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	2200      	movs	r2, #0
 801a696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801a69a:	6878      	ldr	r0, [r7, #4]
 801a69c:	f000 f839 	bl	801a712 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	2202      	movs	r2, #2
 801a6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	681a      	ldr	r2, [r3, #0]
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	3304      	adds	r3, #4
 801a6b0:	4619      	mov	r1, r3
 801a6b2:	4610      	mov	r0, r2
 801a6b4:	f000 fc98 	bl	801afe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	2201      	movs	r2, #1
 801a6bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	2201      	movs	r2, #1
 801a6c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	2201      	movs	r2, #1
 801a6cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	2201      	movs	r2, #1
 801a6d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	2201      	movs	r2, #1
 801a6dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	2201      	movs	r2, #1
 801a6e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	2201      	movs	r2, #1
 801a6ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	2201      	movs	r2, #1
 801a6f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	2201      	movs	r2, #1
 801a6fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	2201      	movs	r2, #1
 801a704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a708:	2300      	movs	r3, #0
}
 801a70a:	4618      	mov	r0, r3
 801a70c:	3708      	adds	r7, #8
 801a70e:	46bd      	mov	sp, r7
 801a710:	bd80      	pop	{r7, pc}

0801a712 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801a712:	b480      	push	{r7}
 801a714:	b083      	sub	sp, #12
 801a716:	af00      	add	r7, sp, #0
 801a718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801a71a:	bf00      	nop
 801a71c:	370c      	adds	r7, #12
 801a71e:	46bd      	mov	sp, r7
 801a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a724:	4770      	bx	lr
	...

0801a728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a728:	b580      	push	{r7, lr}
 801a72a:	b084      	sub	sp, #16
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	6078      	str	r0, [r7, #4]
 801a730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801a732:	683b      	ldr	r3, [r7, #0]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d109      	bne.n	801a74c <HAL_TIM_PWM_Start+0x24>
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801a73e:	b2db      	uxtb	r3, r3
 801a740:	2b01      	cmp	r3, #1
 801a742:	bf14      	ite	ne
 801a744:	2301      	movne	r3, #1
 801a746:	2300      	moveq	r3, #0
 801a748:	b2db      	uxtb	r3, r3
 801a74a:	e022      	b.n	801a792 <HAL_TIM_PWM_Start+0x6a>
 801a74c:	683b      	ldr	r3, [r7, #0]
 801a74e:	2b04      	cmp	r3, #4
 801a750:	d109      	bne.n	801a766 <HAL_TIM_PWM_Start+0x3e>
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801a758:	b2db      	uxtb	r3, r3
 801a75a:	2b01      	cmp	r3, #1
 801a75c:	bf14      	ite	ne
 801a75e:	2301      	movne	r3, #1
 801a760:	2300      	moveq	r3, #0
 801a762:	b2db      	uxtb	r3, r3
 801a764:	e015      	b.n	801a792 <HAL_TIM_PWM_Start+0x6a>
 801a766:	683b      	ldr	r3, [r7, #0]
 801a768:	2b08      	cmp	r3, #8
 801a76a:	d109      	bne.n	801a780 <HAL_TIM_PWM_Start+0x58>
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a772:	b2db      	uxtb	r3, r3
 801a774:	2b01      	cmp	r3, #1
 801a776:	bf14      	ite	ne
 801a778:	2301      	movne	r3, #1
 801a77a:	2300      	moveq	r3, #0
 801a77c:	b2db      	uxtb	r3, r3
 801a77e:	e008      	b.n	801a792 <HAL_TIM_PWM_Start+0x6a>
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a786:	b2db      	uxtb	r3, r3
 801a788:	2b01      	cmp	r3, #1
 801a78a:	bf14      	ite	ne
 801a78c:	2301      	movne	r3, #1
 801a78e:	2300      	moveq	r3, #0
 801a790:	b2db      	uxtb	r3, r3
 801a792:	2b00      	cmp	r3, #0
 801a794:	d001      	beq.n	801a79a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801a796:	2301      	movs	r3, #1
 801a798:	e068      	b.n	801a86c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801a79a:	683b      	ldr	r3, [r7, #0]
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d104      	bne.n	801a7aa <HAL_TIM_PWM_Start+0x82>
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	2202      	movs	r2, #2
 801a7a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a7a8:	e013      	b.n	801a7d2 <HAL_TIM_PWM_Start+0xaa>
 801a7aa:	683b      	ldr	r3, [r7, #0]
 801a7ac:	2b04      	cmp	r3, #4
 801a7ae:	d104      	bne.n	801a7ba <HAL_TIM_PWM_Start+0x92>
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	2202      	movs	r2, #2
 801a7b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a7b8:	e00b      	b.n	801a7d2 <HAL_TIM_PWM_Start+0xaa>
 801a7ba:	683b      	ldr	r3, [r7, #0]
 801a7bc:	2b08      	cmp	r3, #8
 801a7be:	d104      	bne.n	801a7ca <HAL_TIM_PWM_Start+0xa2>
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	2202      	movs	r2, #2
 801a7c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a7c8:	e003      	b.n	801a7d2 <HAL_TIM_PWM_Start+0xaa>
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	2202      	movs	r2, #2
 801a7ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	2201      	movs	r2, #1
 801a7d8:	6839      	ldr	r1, [r7, #0]
 801a7da:	4618      	mov	r0, r3
 801a7dc:	f000 ffc8 	bl	801b770 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	4a23      	ldr	r2, [pc, #140]	; (801a874 <HAL_TIM_PWM_Start+0x14c>)
 801a7e6:	4293      	cmp	r3, r2
 801a7e8:	d107      	bne.n	801a7fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a7f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	4a1d      	ldr	r2, [pc, #116]	; (801a874 <HAL_TIM_PWM_Start+0x14c>)
 801a800:	4293      	cmp	r3, r2
 801a802:	d018      	beq.n	801a836 <HAL_TIM_PWM_Start+0x10e>
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a80c:	d013      	beq.n	801a836 <HAL_TIM_PWM_Start+0x10e>
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	4a19      	ldr	r2, [pc, #100]	; (801a878 <HAL_TIM_PWM_Start+0x150>)
 801a814:	4293      	cmp	r3, r2
 801a816:	d00e      	beq.n	801a836 <HAL_TIM_PWM_Start+0x10e>
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	4a17      	ldr	r2, [pc, #92]	; (801a87c <HAL_TIM_PWM_Start+0x154>)
 801a81e:	4293      	cmp	r3, r2
 801a820:	d009      	beq.n	801a836 <HAL_TIM_PWM_Start+0x10e>
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	4a16      	ldr	r2, [pc, #88]	; (801a880 <HAL_TIM_PWM_Start+0x158>)
 801a828:	4293      	cmp	r3, r2
 801a82a:	d004      	beq.n	801a836 <HAL_TIM_PWM_Start+0x10e>
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	4a14      	ldr	r2, [pc, #80]	; (801a884 <HAL_TIM_PWM_Start+0x15c>)
 801a832:	4293      	cmp	r3, r2
 801a834:	d111      	bne.n	801a85a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	689b      	ldr	r3, [r3, #8]
 801a83c:	f003 0307 	and.w	r3, r3, #7
 801a840:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	2b06      	cmp	r3, #6
 801a846:	d010      	beq.n	801a86a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	681a      	ldr	r2, [r3, #0]
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	f042 0201 	orr.w	r2, r2, #1
 801a856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a858:	e007      	b.n	801a86a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	681a      	ldr	r2, [r3, #0]
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	f042 0201 	orr.w	r2, r2, #1
 801a868:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a86a:	2300      	movs	r3, #0
}
 801a86c:	4618      	mov	r0, r3
 801a86e:	3710      	adds	r7, #16
 801a870:	46bd      	mov	sp, r7
 801a872:	bd80      	pop	{r7, pc}
 801a874:	40010000 	.word	0x40010000
 801a878:	40000400 	.word	0x40000400
 801a87c:	40000800 	.word	0x40000800
 801a880:	40000c00 	.word	0x40000c00
 801a884:	40014000 	.word	0x40014000

0801a888 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801a888:	b580      	push	{r7, lr}
 801a88a:	b082      	sub	sp, #8
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	2b00      	cmp	r3, #0
 801a894:	d101      	bne.n	801a89a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801a896:	2301      	movs	r3, #1
 801a898:	e041      	b.n	801a91e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a8a0:	b2db      	uxtb	r3, r3
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d106      	bne.n	801a8b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	2200      	movs	r2, #0
 801a8aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801a8ae:	6878      	ldr	r0, [r7, #4]
 801a8b0:	f000 f839 	bl	801a926 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	2202      	movs	r2, #2
 801a8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	681a      	ldr	r2, [r3, #0]
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	3304      	adds	r3, #4
 801a8c4:	4619      	mov	r1, r3
 801a8c6:	4610      	mov	r0, r2
 801a8c8:	f000 fb8e 	bl	801afe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	2201      	movs	r2, #1
 801a8d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	2201      	movs	r2, #1
 801a8d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	2201      	movs	r2, #1
 801a8e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	2201      	movs	r2, #1
 801a8e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	2201      	movs	r2, #1
 801a8f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	2201      	movs	r2, #1
 801a8f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	2201      	movs	r2, #1
 801a900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	2201      	movs	r2, #1
 801a908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	2201      	movs	r2, #1
 801a910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	2201      	movs	r2, #1
 801a918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a91c:	2300      	movs	r3, #0
}
 801a91e:	4618      	mov	r0, r3
 801a920:	3708      	adds	r7, #8
 801a922:	46bd      	mov	sp, r7
 801a924:	bd80      	pop	{r7, pc}

0801a926 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801a926:	b480      	push	{r7}
 801a928:	b083      	sub	sp, #12
 801a92a:	af00      	add	r7, sp, #0
 801a92c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801a92e:	bf00      	nop
 801a930:	370c      	adds	r7, #12
 801a932:	46bd      	mov	sp, r7
 801a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a938:	4770      	bx	lr

0801a93a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801a93a:	b580      	push	{r7, lr}
 801a93c:	b082      	sub	sp, #8
 801a93e:	af00      	add	r7, sp, #0
 801a940:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	691b      	ldr	r3, [r3, #16]
 801a948:	f003 0302 	and.w	r3, r3, #2
 801a94c:	2b02      	cmp	r3, #2
 801a94e:	d122      	bne.n	801a996 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	68db      	ldr	r3, [r3, #12]
 801a956:	f003 0302 	and.w	r3, r3, #2
 801a95a:	2b02      	cmp	r3, #2
 801a95c:	d11b      	bne.n	801a996 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	f06f 0202 	mvn.w	r2, #2
 801a966:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	2201      	movs	r2, #1
 801a96c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	699b      	ldr	r3, [r3, #24]
 801a974:	f003 0303 	and.w	r3, r3, #3
 801a978:	2b00      	cmp	r3, #0
 801a97a:	d003      	beq.n	801a984 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801a97c:	6878      	ldr	r0, [r7, #4]
 801a97e:	f000 fb14 	bl	801afaa <HAL_TIM_IC_CaptureCallback>
 801a982:	e005      	b.n	801a990 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801a984:	6878      	ldr	r0, [r7, #4]
 801a986:	f000 fb06 	bl	801af96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a98a:	6878      	ldr	r0, [r7, #4]
 801a98c:	f000 fb17 	bl	801afbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	2200      	movs	r2, #0
 801a994:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	691b      	ldr	r3, [r3, #16]
 801a99c:	f003 0304 	and.w	r3, r3, #4
 801a9a0:	2b04      	cmp	r3, #4
 801a9a2:	d122      	bne.n	801a9ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	68db      	ldr	r3, [r3, #12]
 801a9aa:	f003 0304 	and.w	r3, r3, #4
 801a9ae:	2b04      	cmp	r3, #4
 801a9b0:	d11b      	bne.n	801a9ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	f06f 0204 	mvn.w	r2, #4
 801a9ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	2202      	movs	r2, #2
 801a9c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	699b      	ldr	r3, [r3, #24]
 801a9c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d003      	beq.n	801a9d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a9d0:	6878      	ldr	r0, [r7, #4]
 801a9d2:	f000 faea 	bl	801afaa <HAL_TIM_IC_CaptureCallback>
 801a9d6:	e005      	b.n	801a9e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a9d8:	6878      	ldr	r0, [r7, #4]
 801a9da:	f000 fadc 	bl	801af96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a9de:	6878      	ldr	r0, [r7, #4]
 801a9e0:	f000 faed 	bl	801afbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	2200      	movs	r2, #0
 801a9e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	691b      	ldr	r3, [r3, #16]
 801a9f0:	f003 0308 	and.w	r3, r3, #8
 801a9f4:	2b08      	cmp	r3, #8
 801a9f6:	d122      	bne.n	801aa3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	68db      	ldr	r3, [r3, #12]
 801a9fe:	f003 0308 	and.w	r3, r3, #8
 801aa02:	2b08      	cmp	r3, #8
 801aa04:	d11b      	bne.n	801aa3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	f06f 0208 	mvn.w	r2, #8
 801aa0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	2204      	movs	r2, #4
 801aa14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	69db      	ldr	r3, [r3, #28]
 801aa1c:	f003 0303 	and.w	r3, r3, #3
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d003      	beq.n	801aa2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801aa24:	6878      	ldr	r0, [r7, #4]
 801aa26:	f000 fac0 	bl	801afaa <HAL_TIM_IC_CaptureCallback>
 801aa2a:	e005      	b.n	801aa38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801aa2c:	6878      	ldr	r0, [r7, #4]
 801aa2e:	f000 fab2 	bl	801af96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801aa32:	6878      	ldr	r0, [r7, #4]
 801aa34:	f000 fac3 	bl	801afbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	2200      	movs	r2, #0
 801aa3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	691b      	ldr	r3, [r3, #16]
 801aa44:	f003 0310 	and.w	r3, r3, #16
 801aa48:	2b10      	cmp	r3, #16
 801aa4a:	d122      	bne.n	801aa92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	68db      	ldr	r3, [r3, #12]
 801aa52:	f003 0310 	and.w	r3, r3, #16
 801aa56:	2b10      	cmp	r3, #16
 801aa58:	d11b      	bne.n	801aa92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	f06f 0210 	mvn.w	r2, #16
 801aa62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	2208      	movs	r2, #8
 801aa68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	69db      	ldr	r3, [r3, #28]
 801aa70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d003      	beq.n	801aa80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801aa78:	6878      	ldr	r0, [r7, #4]
 801aa7a:	f000 fa96 	bl	801afaa <HAL_TIM_IC_CaptureCallback>
 801aa7e:	e005      	b.n	801aa8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801aa80:	6878      	ldr	r0, [r7, #4]
 801aa82:	f000 fa88 	bl	801af96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801aa86:	6878      	ldr	r0, [r7, #4]
 801aa88:	f000 fa99 	bl	801afbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	2200      	movs	r2, #0
 801aa90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	691b      	ldr	r3, [r3, #16]
 801aa98:	f003 0301 	and.w	r3, r3, #1
 801aa9c:	2b01      	cmp	r3, #1
 801aa9e:	d10e      	bne.n	801aabe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	68db      	ldr	r3, [r3, #12]
 801aaa6:	f003 0301 	and.w	r3, r3, #1
 801aaaa:	2b01      	cmp	r3, #1
 801aaac:	d107      	bne.n	801aabe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	f06f 0201 	mvn.w	r2, #1
 801aab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801aab8:	6878      	ldr	r0, [r7, #4]
 801aaba:	f7e8 ffc1 	bl	8003a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	691b      	ldr	r3, [r3, #16]
 801aac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aac8:	2b80      	cmp	r3, #128	; 0x80
 801aaca:	d10e      	bne.n	801aaea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	68db      	ldr	r3, [r3, #12]
 801aad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aad6:	2b80      	cmp	r3, #128	; 0x80
 801aad8:	d107      	bne.n	801aaea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801aae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801aae4:	6878      	ldr	r0, [r7, #4]
 801aae6:	f000 fee1 	bl	801b8ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	691b      	ldr	r3, [r3, #16]
 801aaf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aaf4:	2b40      	cmp	r3, #64	; 0x40
 801aaf6:	d10e      	bne.n	801ab16 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	68db      	ldr	r3, [r3, #12]
 801aafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ab02:	2b40      	cmp	r3, #64	; 0x40
 801ab04:	d107      	bne.n	801ab16 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801ab0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801ab10:	6878      	ldr	r0, [r7, #4]
 801ab12:	f000 fa5e 	bl	801afd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	691b      	ldr	r3, [r3, #16]
 801ab1c:	f003 0320 	and.w	r3, r3, #32
 801ab20:	2b20      	cmp	r3, #32
 801ab22:	d10e      	bne.n	801ab42 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	68db      	ldr	r3, [r3, #12]
 801ab2a:	f003 0320 	and.w	r3, r3, #32
 801ab2e:	2b20      	cmp	r3, #32
 801ab30:	d107      	bne.n	801ab42 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	f06f 0220 	mvn.w	r2, #32
 801ab3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801ab3c:	6878      	ldr	r0, [r7, #4]
 801ab3e:	f000 feab 	bl	801b898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801ab42:	bf00      	nop
 801ab44:	3708      	adds	r7, #8
 801ab46:	46bd      	mov	sp, r7
 801ab48:	bd80      	pop	{r7, pc}

0801ab4a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801ab4a:	b580      	push	{r7, lr}
 801ab4c:	b086      	sub	sp, #24
 801ab4e:	af00      	add	r7, sp, #0
 801ab50:	60f8      	str	r0, [r7, #12]
 801ab52:	60b9      	str	r1, [r7, #8]
 801ab54:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ab56:	2300      	movs	r3, #0
 801ab58:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ab60:	2b01      	cmp	r3, #1
 801ab62:	d101      	bne.n	801ab68 <HAL_TIM_IC_ConfigChannel+0x1e>
 801ab64:	2302      	movs	r3, #2
 801ab66:	e088      	b.n	801ac7a <HAL_TIM_IC_ConfigChannel+0x130>
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	2201      	movs	r2, #1
 801ab6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d11b      	bne.n	801abae <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	6818      	ldr	r0, [r3, #0]
 801ab7a:	68bb      	ldr	r3, [r7, #8]
 801ab7c:	6819      	ldr	r1, [r3, #0]
 801ab7e:	68bb      	ldr	r3, [r7, #8]
 801ab80:	685a      	ldr	r2, [r3, #4]
 801ab82:	68bb      	ldr	r3, [r7, #8]
 801ab84:	68db      	ldr	r3, [r3, #12]
 801ab86:	f000 fc3b 	bl	801b400 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801ab8a:	68fb      	ldr	r3, [r7, #12]
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	699a      	ldr	r2, [r3, #24]
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	f022 020c 	bic.w	r2, r2, #12
 801ab98:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	6999      	ldr	r1, [r3, #24]
 801aba0:	68bb      	ldr	r3, [r7, #8]
 801aba2:	689a      	ldr	r2, [r3, #8]
 801aba4:	68fb      	ldr	r3, [r7, #12]
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	430a      	orrs	r2, r1
 801abaa:	619a      	str	r2, [r3, #24]
 801abac:	e060      	b.n	801ac70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	2b04      	cmp	r3, #4
 801abb2:	d11c      	bne.n	801abee <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	6818      	ldr	r0, [r3, #0]
 801abb8:	68bb      	ldr	r3, [r7, #8]
 801abba:	6819      	ldr	r1, [r3, #0]
 801abbc:	68bb      	ldr	r3, [r7, #8]
 801abbe:	685a      	ldr	r2, [r3, #4]
 801abc0:	68bb      	ldr	r3, [r7, #8]
 801abc2:	68db      	ldr	r3, [r3, #12]
 801abc4:	f000 fcb3 	bl	801b52e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	681b      	ldr	r3, [r3, #0]
 801abcc:	699a      	ldr	r2, [r3, #24]
 801abce:	68fb      	ldr	r3, [r7, #12]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801abd6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	6999      	ldr	r1, [r3, #24]
 801abde:	68bb      	ldr	r3, [r7, #8]
 801abe0:	689b      	ldr	r3, [r3, #8]
 801abe2:	021a      	lsls	r2, r3, #8
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	430a      	orrs	r2, r1
 801abea:	619a      	str	r2, [r3, #24]
 801abec:	e040      	b.n	801ac70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	2b08      	cmp	r3, #8
 801abf2:	d11b      	bne.n	801ac2c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	6818      	ldr	r0, [r3, #0]
 801abf8:	68bb      	ldr	r3, [r7, #8]
 801abfa:	6819      	ldr	r1, [r3, #0]
 801abfc:	68bb      	ldr	r3, [r7, #8]
 801abfe:	685a      	ldr	r2, [r3, #4]
 801ac00:	68bb      	ldr	r3, [r7, #8]
 801ac02:	68db      	ldr	r3, [r3, #12]
 801ac04:	f000 fd00 	bl	801b608 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	69da      	ldr	r2, [r3, #28]
 801ac0e:	68fb      	ldr	r3, [r7, #12]
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	f022 020c 	bic.w	r2, r2, #12
 801ac16:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	69d9      	ldr	r1, [r3, #28]
 801ac1e:	68bb      	ldr	r3, [r7, #8]
 801ac20:	689a      	ldr	r2, [r3, #8]
 801ac22:	68fb      	ldr	r3, [r7, #12]
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	430a      	orrs	r2, r1
 801ac28:	61da      	str	r2, [r3, #28]
 801ac2a:	e021      	b.n	801ac70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	2b0c      	cmp	r3, #12
 801ac30:	d11c      	bne.n	801ac6c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	6818      	ldr	r0, [r3, #0]
 801ac36:	68bb      	ldr	r3, [r7, #8]
 801ac38:	6819      	ldr	r1, [r3, #0]
 801ac3a:	68bb      	ldr	r3, [r7, #8]
 801ac3c:	685a      	ldr	r2, [r3, #4]
 801ac3e:	68bb      	ldr	r3, [r7, #8]
 801ac40:	68db      	ldr	r3, [r3, #12]
 801ac42:	f000 fd1d 	bl	801b680 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	69da      	ldr	r2, [r3, #28]
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801ac54:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801ac56:	68fb      	ldr	r3, [r7, #12]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	69d9      	ldr	r1, [r3, #28]
 801ac5c:	68bb      	ldr	r3, [r7, #8]
 801ac5e:	689b      	ldr	r3, [r3, #8]
 801ac60:	021a      	lsls	r2, r3, #8
 801ac62:	68fb      	ldr	r3, [r7, #12]
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	430a      	orrs	r2, r1
 801ac68:	61da      	str	r2, [r3, #28]
 801ac6a:	e001      	b.n	801ac70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801ac6c:	2301      	movs	r3, #1
 801ac6e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	2200      	movs	r2, #0
 801ac74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801ac78:	7dfb      	ldrb	r3, [r7, #23]
}
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	3718      	adds	r7, #24
 801ac7e:	46bd      	mov	sp, r7
 801ac80:	bd80      	pop	{r7, pc}
	...

0801ac84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801ac84:	b580      	push	{r7, lr}
 801ac86:	b086      	sub	sp, #24
 801ac88:	af00      	add	r7, sp, #0
 801ac8a:	60f8      	str	r0, [r7, #12]
 801ac8c:	60b9      	str	r1, [r7, #8]
 801ac8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ac90:	2300      	movs	r3, #0
 801ac92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ac9a:	2b01      	cmp	r3, #1
 801ac9c:	d101      	bne.n	801aca2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801ac9e:	2302      	movs	r3, #2
 801aca0:	e0ae      	b.n	801ae00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801aca2:	68fb      	ldr	r3, [r7, #12]
 801aca4:	2201      	movs	r2, #1
 801aca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	2b0c      	cmp	r3, #12
 801acae:	f200 809f 	bhi.w	801adf0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801acb2:	a201      	add	r2, pc, #4	; (adr r2, 801acb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801acb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801acb8:	0801aced 	.word	0x0801aced
 801acbc:	0801adf1 	.word	0x0801adf1
 801acc0:	0801adf1 	.word	0x0801adf1
 801acc4:	0801adf1 	.word	0x0801adf1
 801acc8:	0801ad2d 	.word	0x0801ad2d
 801accc:	0801adf1 	.word	0x0801adf1
 801acd0:	0801adf1 	.word	0x0801adf1
 801acd4:	0801adf1 	.word	0x0801adf1
 801acd8:	0801ad6f 	.word	0x0801ad6f
 801acdc:	0801adf1 	.word	0x0801adf1
 801ace0:	0801adf1 	.word	0x0801adf1
 801ace4:	0801adf1 	.word	0x0801adf1
 801ace8:	0801adaf 	.word	0x0801adaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	68b9      	ldr	r1, [r7, #8]
 801acf2:	4618      	mov	r0, r3
 801acf4:	f000 f9f8 	bl	801b0e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801acf8:	68fb      	ldr	r3, [r7, #12]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	699a      	ldr	r2, [r3, #24]
 801acfe:	68fb      	ldr	r3, [r7, #12]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	f042 0208 	orr.w	r2, r2, #8
 801ad06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	699a      	ldr	r2, [r3, #24]
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	f022 0204 	bic.w	r2, r2, #4
 801ad16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	6999      	ldr	r1, [r3, #24]
 801ad1e:	68bb      	ldr	r3, [r7, #8]
 801ad20:	691a      	ldr	r2, [r3, #16]
 801ad22:	68fb      	ldr	r3, [r7, #12]
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	430a      	orrs	r2, r1
 801ad28:	619a      	str	r2, [r3, #24]
      break;
 801ad2a:	e064      	b.n	801adf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	68b9      	ldr	r1, [r7, #8]
 801ad32:	4618      	mov	r0, r3
 801ad34:	f000 fa3e 	bl	801b1b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	699a      	ldr	r2, [r3, #24]
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ad46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801ad48:	68fb      	ldr	r3, [r7, #12]
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	699a      	ldr	r2, [r3, #24]
 801ad4e:	68fb      	ldr	r3, [r7, #12]
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ad56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	6999      	ldr	r1, [r3, #24]
 801ad5e:	68bb      	ldr	r3, [r7, #8]
 801ad60:	691b      	ldr	r3, [r3, #16]
 801ad62:	021a      	lsls	r2, r3, #8
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	430a      	orrs	r2, r1
 801ad6a:	619a      	str	r2, [r3, #24]
      break;
 801ad6c:	e043      	b.n	801adf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801ad6e:	68fb      	ldr	r3, [r7, #12]
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	68b9      	ldr	r1, [r7, #8]
 801ad74:	4618      	mov	r0, r3
 801ad76:	f000 fa89 	bl	801b28c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801ad7a:	68fb      	ldr	r3, [r7, #12]
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	69da      	ldr	r2, [r3, #28]
 801ad80:	68fb      	ldr	r3, [r7, #12]
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	f042 0208 	orr.w	r2, r2, #8
 801ad88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	69da      	ldr	r2, [r3, #28]
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	f022 0204 	bic.w	r2, r2, #4
 801ad98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801ad9a:	68fb      	ldr	r3, [r7, #12]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	69d9      	ldr	r1, [r3, #28]
 801ada0:	68bb      	ldr	r3, [r7, #8]
 801ada2:	691a      	ldr	r2, [r3, #16]
 801ada4:	68fb      	ldr	r3, [r7, #12]
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	430a      	orrs	r2, r1
 801adaa:	61da      	str	r2, [r3, #28]
      break;
 801adac:	e023      	b.n	801adf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	68b9      	ldr	r1, [r7, #8]
 801adb4:	4618      	mov	r0, r3
 801adb6:	f000 fad3 	bl	801b360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801adba:	68fb      	ldr	r3, [r7, #12]
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	69da      	ldr	r2, [r3, #28]
 801adc0:	68fb      	ldr	r3, [r7, #12]
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801adc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	69da      	ldr	r2, [r3, #28]
 801add0:	68fb      	ldr	r3, [r7, #12]
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801add8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801adda:	68fb      	ldr	r3, [r7, #12]
 801addc:	681b      	ldr	r3, [r3, #0]
 801adde:	69d9      	ldr	r1, [r3, #28]
 801ade0:	68bb      	ldr	r3, [r7, #8]
 801ade2:	691b      	ldr	r3, [r3, #16]
 801ade4:	021a      	lsls	r2, r3, #8
 801ade6:	68fb      	ldr	r3, [r7, #12]
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	430a      	orrs	r2, r1
 801adec:	61da      	str	r2, [r3, #28]
      break;
 801adee:	e002      	b.n	801adf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801adf0:	2301      	movs	r3, #1
 801adf2:	75fb      	strb	r3, [r7, #23]
      break;
 801adf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801adf6:	68fb      	ldr	r3, [r7, #12]
 801adf8:	2200      	movs	r2, #0
 801adfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801adfe:	7dfb      	ldrb	r3, [r7, #23]
}
 801ae00:	4618      	mov	r0, r3
 801ae02:	3718      	adds	r7, #24
 801ae04:	46bd      	mov	sp, r7
 801ae06:	bd80      	pop	{r7, pc}

0801ae08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801ae08:	b580      	push	{r7, lr}
 801ae0a:	b084      	sub	sp, #16
 801ae0c:	af00      	add	r7, sp, #0
 801ae0e:	6078      	str	r0, [r7, #4]
 801ae10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801ae12:	2300      	movs	r3, #0
 801ae14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ae1c:	2b01      	cmp	r3, #1
 801ae1e:	d101      	bne.n	801ae24 <HAL_TIM_ConfigClockSource+0x1c>
 801ae20:	2302      	movs	r3, #2
 801ae22:	e0b4      	b.n	801af8e <HAL_TIM_ConfigClockSource+0x186>
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	2201      	movs	r2, #1
 801ae28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	2202      	movs	r2, #2
 801ae30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	681b      	ldr	r3, [r3, #0]
 801ae38:	689b      	ldr	r3, [r3, #8]
 801ae3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801ae3c:	68bb      	ldr	r3, [r7, #8]
 801ae3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801ae42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801ae44:	68bb      	ldr	r3, [r7, #8]
 801ae46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801ae4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	68ba      	ldr	r2, [r7, #8]
 801ae52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801ae54:	683b      	ldr	r3, [r7, #0]
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ae5c:	d03e      	beq.n	801aedc <HAL_TIM_ConfigClockSource+0xd4>
 801ae5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ae62:	f200 8087 	bhi.w	801af74 <HAL_TIM_ConfigClockSource+0x16c>
 801ae66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ae6a:	f000 8086 	beq.w	801af7a <HAL_TIM_ConfigClockSource+0x172>
 801ae6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ae72:	d87f      	bhi.n	801af74 <HAL_TIM_ConfigClockSource+0x16c>
 801ae74:	2b70      	cmp	r3, #112	; 0x70
 801ae76:	d01a      	beq.n	801aeae <HAL_TIM_ConfigClockSource+0xa6>
 801ae78:	2b70      	cmp	r3, #112	; 0x70
 801ae7a:	d87b      	bhi.n	801af74 <HAL_TIM_ConfigClockSource+0x16c>
 801ae7c:	2b60      	cmp	r3, #96	; 0x60
 801ae7e:	d050      	beq.n	801af22 <HAL_TIM_ConfigClockSource+0x11a>
 801ae80:	2b60      	cmp	r3, #96	; 0x60
 801ae82:	d877      	bhi.n	801af74 <HAL_TIM_ConfigClockSource+0x16c>
 801ae84:	2b50      	cmp	r3, #80	; 0x50
 801ae86:	d03c      	beq.n	801af02 <HAL_TIM_ConfigClockSource+0xfa>
 801ae88:	2b50      	cmp	r3, #80	; 0x50
 801ae8a:	d873      	bhi.n	801af74 <HAL_TIM_ConfigClockSource+0x16c>
 801ae8c:	2b40      	cmp	r3, #64	; 0x40
 801ae8e:	d058      	beq.n	801af42 <HAL_TIM_ConfigClockSource+0x13a>
 801ae90:	2b40      	cmp	r3, #64	; 0x40
 801ae92:	d86f      	bhi.n	801af74 <HAL_TIM_ConfigClockSource+0x16c>
 801ae94:	2b30      	cmp	r3, #48	; 0x30
 801ae96:	d064      	beq.n	801af62 <HAL_TIM_ConfigClockSource+0x15a>
 801ae98:	2b30      	cmp	r3, #48	; 0x30
 801ae9a:	d86b      	bhi.n	801af74 <HAL_TIM_ConfigClockSource+0x16c>
 801ae9c:	2b20      	cmp	r3, #32
 801ae9e:	d060      	beq.n	801af62 <HAL_TIM_ConfigClockSource+0x15a>
 801aea0:	2b20      	cmp	r3, #32
 801aea2:	d867      	bhi.n	801af74 <HAL_TIM_ConfigClockSource+0x16c>
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	d05c      	beq.n	801af62 <HAL_TIM_ConfigClockSource+0x15a>
 801aea8:	2b10      	cmp	r3, #16
 801aeaa:	d05a      	beq.n	801af62 <HAL_TIM_ConfigClockSource+0x15a>
 801aeac:	e062      	b.n	801af74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	6818      	ldr	r0, [r3, #0]
 801aeb2:	683b      	ldr	r3, [r7, #0]
 801aeb4:	6899      	ldr	r1, [r3, #8]
 801aeb6:	683b      	ldr	r3, [r7, #0]
 801aeb8:	685a      	ldr	r2, [r3, #4]
 801aeba:	683b      	ldr	r3, [r7, #0]
 801aebc:	68db      	ldr	r3, [r3, #12]
 801aebe:	f000 fc37 	bl	801b730 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	689b      	ldr	r3, [r3, #8]
 801aec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801aeca:	68bb      	ldr	r3, [r7, #8]
 801aecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801aed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	68ba      	ldr	r2, [r7, #8]
 801aed8:	609a      	str	r2, [r3, #8]
      break;
 801aeda:	e04f      	b.n	801af7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	6818      	ldr	r0, [r3, #0]
 801aee0:	683b      	ldr	r3, [r7, #0]
 801aee2:	6899      	ldr	r1, [r3, #8]
 801aee4:	683b      	ldr	r3, [r7, #0]
 801aee6:	685a      	ldr	r2, [r3, #4]
 801aee8:	683b      	ldr	r3, [r7, #0]
 801aeea:	68db      	ldr	r3, [r3, #12]
 801aeec:	f000 fc20 	bl	801b730 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	689a      	ldr	r2, [r3, #8]
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801aefe:	609a      	str	r2, [r3, #8]
      break;
 801af00:	e03c      	b.n	801af7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	6818      	ldr	r0, [r3, #0]
 801af06:	683b      	ldr	r3, [r7, #0]
 801af08:	6859      	ldr	r1, [r3, #4]
 801af0a:	683b      	ldr	r3, [r7, #0]
 801af0c:	68db      	ldr	r3, [r3, #12]
 801af0e:	461a      	mov	r2, r3
 801af10:	f000 fade 	bl	801b4d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	2150      	movs	r1, #80	; 0x50
 801af1a:	4618      	mov	r0, r3
 801af1c:	f000 fbed 	bl	801b6fa <TIM_ITRx_SetConfig>
      break;
 801af20:	e02c      	b.n	801af7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	6818      	ldr	r0, [r3, #0]
 801af26:	683b      	ldr	r3, [r7, #0]
 801af28:	6859      	ldr	r1, [r3, #4]
 801af2a:	683b      	ldr	r3, [r7, #0]
 801af2c:	68db      	ldr	r3, [r3, #12]
 801af2e:	461a      	mov	r2, r3
 801af30:	f000 fb3a 	bl	801b5a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	2160      	movs	r1, #96	; 0x60
 801af3a:	4618      	mov	r0, r3
 801af3c:	f000 fbdd 	bl	801b6fa <TIM_ITRx_SetConfig>
      break;
 801af40:	e01c      	b.n	801af7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	6818      	ldr	r0, [r3, #0]
 801af46:	683b      	ldr	r3, [r7, #0]
 801af48:	6859      	ldr	r1, [r3, #4]
 801af4a:	683b      	ldr	r3, [r7, #0]
 801af4c:	68db      	ldr	r3, [r3, #12]
 801af4e:	461a      	mov	r2, r3
 801af50:	f000 fabe 	bl	801b4d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	2140      	movs	r1, #64	; 0x40
 801af5a:	4618      	mov	r0, r3
 801af5c:	f000 fbcd 	bl	801b6fa <TIM_ITRx_SetConfig>
      break;
 801af60:	e00c      	b.n	801af7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	681a      	ldr	r2, [r3, #0]
 801af66:	683b      	ldr	r3, [r7, #0]
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	4619      	mov	r1, r3
 801af6c:	4610      	mov	r0, r2
 801af6e:	f000 fbc4 	bl	801b6fa <TIM_ITRx_SetConfig>
      break;
 801af72:	e003      	b.n	801af7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801af74:	2301      	movs	r3, #1
 801af76:	73fb      	strb	r3, [r7, #15]
      break;
 801af78:	e000      	b.n	801af7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 801af7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	2201      	movs	r2, #1
 801af80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	2200      	movs	r2, #0
 801af88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801af8c:	7bfb      	ldrb	r3, [r7, #15]
}
 801af8e:	4618      	mov	r0, r3
 801af90:	3710      	adds	r7, #16
 801af92:	46bd      	mov	sp, r7
 801af94:	bd80      	pop	{r7, pc}

0801af96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801af96:	b480      	push	{r7}
 801af98:	b083      	sub	sp, #12
 801af9a:	af00      	add	r7, sp, #0
 801af9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801af9e:	bf00      	nop
 801afa0:	370c      	adds	r7, #12
 801afa2:	46bd      	mov	sp, r7
 801afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afa8:	4770      	bx	lr

0801afaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801afaa:	b480      	push	{r7}
 801afac:	b083      	sub	sp, #12
 801afae:	af00      	add	r7, sp, #0
 801afb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801afb2:	bf00      	nop
 801afb4:	370c      	adds	r7, #12
 801afb6:	46bd      	mov	sp, r7
 801afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afbc:	4770      	bx	lr

0801afbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801afbe:	b480      	push	{r7}
 801afc0:	b083      	sub	sp, #12
 801afc2:	af00      	add	r7, sp, #0
 801afc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801afc6:	bf00      	nop
 801afc8:	370c      	adds	r7, #12
 801afca:	46bd      	mov	sp, r7
 801afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afd0:	4770      	bx	lr

0801afd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801afd2:	b480      	push	{r7}
 801afd4:	b083      	sub	sp, #12
 801afd6:	af00      	add	r7, sp, #0
 801afd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801afda:	bf00      	nop
 801afdc:	370c      	adds	r7, #12
 801afde:	46bd      	mov	sp, r7
 801afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afe4:	4770      	bx	lr
	...

0801afe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801afe8:	b480      	push	{r7}
 801afea:	b085      	sub	sp, #20
 801afec:	af00      	add	r7, sp, #0
 801afee:	6078      	str	r0, [r7, #4]
 801aff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	4a34      	ldr	r2, [pc, #208]	; (801b0cc <TIM_Base_SetConfig+0xe4>)
 801affc:	4293      	cmp	r3, r2
 801affe:	d00f      	beq.n	801b020 <TIM_Base_SetConfig+0x38>
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b006:	d00b      	beq.n	801b020 <TIM_Base_SetConfig+0x38>
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	4a31      	ldr	r2, [pc, #196]	; (801b0d0 <TIM_Base_SetConfig+0xe8>)
 801b00c:	4293      	cmp	r3, r2
 801b00e:	d007      	beq.n	801b020 <TIM_Base_SetConfig+0x38>
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	4a30      	ldr	r2, [pc, #192]	; (801b0d4 <TIM_Base_SetConfig+0xec>)
 801b014:	4293      	cmp	r3, r2
 801b016:	d003      	beq.n	801b020 <TIM_Base_SetConfig+0x38>
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	4a2f      	ldr	r2, [pc, #188]	; (801b0d8 <TIM_Base_SetConfig+0xf0>)
 801b01c:	4293      	cmp	r3, r2
 801b01e:	d108      	bne.n	801b032 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b028:	683b      	ldr	r3, [r7, #0]
 801b02a:	685b      	ldr	r3, [r3, #4]
 801b02c:	68fa      	ldr	r2, [r7, #12]
 801b02e:	4313      	orrs	r3, r2
 801b030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	4a25      	ldr	r2, [pc, #148]	; (801b0cc <TIM_Base_SetConfig+0xe4>)
 801b036:	4293      	cmp	r3, r2
 801b038:	d01b      	beq.n	801b072 <TIM_Base_SetConfig+0x8a>
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b040:	d017      	beq.n	801b072 <TIM_Base_SetConfig+0x8a>
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	4a22      	ldr	r2, [pc, #136]	; (801b0d0 <TIM_Base_SetConfig+0xe8>)
 801b046:	4293      	cmp	r3, r2
 801b048:	d013      	beq.n	801b072 <TIM_Base_SetConfig+0x8a>
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	4a21      	ldr	r2, [pc, #132]	; (801b0d4 <TIM_Base_SetConfig+0xec>)
 801b04e:	4293      	cmp	r3, r2
 801b050:	d00f      	beq.n	801b072 <TIM_Base_SetConfig+0x8a>
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	4a20      	ldr	r2, [pc, #128]	; (801b0d8 <TIM_Base_SetConfig+0xf0>)
 801b056:	4293      	cmp	r3, r2
 801b058:	d00b      	beq.n	801b072 <TIM_Base_SetConfig+0x8a>
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	4a1f      	ldr	r2, [pc, #124]	; (801b0dc <TIM_Base_SetConfig+0xf4>)
 801b05e:	4293      	cmp	r3, r2
 801b060:	d007      	beq.n	801b072 <TIM_Base_SetConfig+0x8a>
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	4a1e      	ldr	r2, [pc, #120]	; (801b0e0 <TIM_Base_SetConfig+0xf8>)
 801b066:	4293      	cmp	r3, r2
 801b068:	d003      	beq.n	801b072 <TIM_Base_SetConfig+0x8a>
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	4a1d      	ldr	r2, [pc, #116]	; (801b0e4 <TIM_Base_SetConfig+0xfc>)
 801b06e:	4293      	cmp	r3, r2
 801b070:	d108      	bne.n	801b084 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b07a:	683b      	ldr	r3, [r7, #0]
 801b07c:	68db      	ldr	r3, [r3, #12]
 801b07e:	68fa      	ldr	r2, [r7, #12]
 801b080:	4313      	orrs	r3, r2
 801b082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b084:	68fb      	ldr	r3, [r7, #12]
 801b086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b08a:	683b      	ldr	r3, [r7, #0]
 801b08c:	695b      	ldr	r3, [r3, #20]
 801b08e:	4313      	orrs	r3, r2
 801b090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	68fa      	ldr	r2, [r7, #12]
 801b096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b098:	683b      	ldr	r3, [r7, #0]
 801b09a:	689a      	ldr	r2, [r3, #8]
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b0a0:	683b      	ldr	r3, [r7, #0]
 801b0a2:	681a      	ldr	r2, [r3, #0]
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	4a08      	ldr	r2, [pc, #32]	; (801b0cc <TIM_Base_SetConfig+0xe4>)
 801b0ac:	4293      	cmp	r3, r2
 801b0ae:	d103      	bne.n	801b0b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b0b0:	683b      	ldr	r3, [r7, #0]
 801b0b2:	691a      	ldr	r2, [r3, #16]
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	2201      	movs	r2, #1
 801b0bc:	615a      	str	r2, [r3, #20]
}
 801b0be:	bf00      	nop
 801b0c0:	3714      	adds	r7, #20
 801b0c2:	46bd      	mov	sp, r7
 801b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0c8:	4770      	bx	lr
 801b0ca:	bf00      	nop
 801b0cc:	40010000 	.word	0x40010000
 801b0d0:	40000400 	.word	0x40000400
 801b0d4:	40000800 	.word	0x40000800
 801b0d8:	40000c00 	.word	0x40000c00
 801b0dc:	40014000 	.word	0x40014000
 801b0e0:	40014400 	.word	0x40014400
 801b0e4:	40014800 	.word	0x40014800

0801b0e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b0e8:	b480      	push	{r7}
 801b0ea:	b087      	sub	sp, #28
 801b0ec:	af00      	add	r7, sp, #0
 801b0ee:	6078      	str	r0, [r7, #4]
 801b0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	6a1b      	ldr	r3, [r3, #32]
 801b0f6:	f023 0201 	bic.w	r2, r3, #1
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	6a1b      	ldr	r3, [r3, #32]
 801b102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	685b      	ldr	r3, [r3, #4]
 801b108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	699b      	ldr	r3, [r3, #24]
 801b10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801b110:	68fb      	ldr	r3, [r7, #12]
 801b112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	f023 0303 	bic.w	r3, r3, #3
 801b11e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b120:	683b      	ldr	r3, [r7, #0]
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	68fa      	ldr	r2, [r7, #12]
 801b126:	4313      	orrs	r3, r2
 801b128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801b12a:	697b      	ldr	r3, [r7, #20]
 801b12c:	f023 0302 	bic.w	r3, r3, #2
 801b130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801b132:	683b      	ldr	r3, [r7, #0]
 801b134:	689b      	ldr	r3, [r3, #8]
 801b136:	697a      	ldr	r2, [r7, #20]
 801b138:	4313      	orrs	r3, r2
 801b13a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	4a1c      	ldr	r2, [pc, #112]	; (801b1b0 <TIM_OC1_SetConfig+0xc8>)
 801b140:	4293      	cmp	r3, r2
 801b142:	d10c      	bne.n	801b15e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801b144:	697b      	ldr	r3, [r7, #20]
 801b146:	f023 0308 	bic.w	r3, r3, #8
 801b14a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801b14c:	683b      	ldr	r3, [r7, #0]
 801b14e:	68db      	ldr	r3, [r3, #12]
 801b150:	697a      	ldr	r2, [r7, #20]
 801b152:	4313      	orrs	r3, r2
 801b154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801b156:	697b      	ldr	r3, [r7, #20]
 801b158:	f023 0304 	bic.w	r3, r3, #4
 801b15c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	4a13      	ldr	r2, [pc, #76]	; (801b1b0 <TIM_OC1_SetConfig+0xc8>)
 801b162:	4293      	cmp	r3, r2
 801b164:	d111      	bne.n	801b18a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801b166:	693b      	ldr	r3, [r7, #16]
 801b168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b16c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801b16e:	693b      	ldr	r3, [r7, #16]
 801b170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801b176:	683b      	ldr	r3, [r7, #0]
 801b178:	695b      	ldr	r3, [r3, #20]
 801b17a:	693a      	ldr	r2, [r7, #16]
 801b17c:	4313      	orrs	r3, r2
 801b17e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801b180:	683b      	ldr	r3, [r7, #0]
 801b182:	699b      	ldr	r3, [r3, #24]
 801b184:	693a      	ldr	r2, [r7, #16]
 801b186:	4313      	orrs	r3, r2
 801b188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	693a      	ldr	r2, [r7, #16]
 801b18e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	68fa      	ldr	r2, [r7, #12]
 801b194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801b196:	683b      	ldr	r3, [r7, #0]
 801b198:	685a      	ldr	r2, [r3, #4]
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	697a      	ldr	r2, [r7, #20]
 801b1a2:	621a      	str	r2, [r3, #32]
}
 801b1a4:	bf00      	nop
 801b1a6:	371c      	adds	r7, #28
 801b1a8:	46bd      	mov	sp, r7
 801b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ae:	4770      	bx	lr
 801b1b0:	40010000 	.word	0x40010000

0801b1b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b1b4:	b480      	push	{r7}
 801b1b6:	b087      	sub	sp, #28
 801b1b8:	af00      	add	r7, sp, #0
 801b1ba:	6078      	str	r0, [r7, #4]
 801b1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	6a1b      	ldr	r3, [r3, #32]
 801b1c2:	f023 0210 	bic.w	r2, r3, #16
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	6a1b      	ldr	r3, [r3, #32]
 801b1ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	685b      	ldr	r3, [r3, #4]
 801b1d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	699b      	ldr	r3, [r3, #24]
 801b1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b1dc:	68fb      	ldr	r3, [r7, #12]
 801b1de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b1e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b1ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b1ec:	683b      	ldr	r3, [r7, #0]
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	021b      	lsls	r3, r3, #8
 801b1f2:	68fa      	ldr	r2, [r7, #12]
 801b1f4:	4313      	orrs	r3, r2
 801b1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b1f8:	697b      	ldr	r3, [r7, #20]
 801b1fa:	f023 0320 	bic.w	r3, r3, #32
 801b1fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b200:	683b      	ldr	r3, [r7, #0]
 801b202:	689b      	ldr	r3, [r3, #8]
 801b204:	011b      	lsls	r3, r3, #4
 801b206:	697a      	ldr	r2, [r7, #20]
 801b208:	4313      	orrs	r3, r2
 801b20a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	4a1e      	ldr	r2, [pc, #120]	; (801b288 <TIM_OC2_SetConfig+0xd4>)
 801b210:	4293      	cmp	r3, r2
 801b212:	d10d      	bne.n	801b230 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801b214:	697b      	ldr	r3, [r7, #20]
 801b216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b21a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801b21c:	683b      	ldr	r3, [r7, #0]
 801b21e:	68db      	ldr	r3, [r3, #12]
 801b220:	011b      	lsls	r3, r3, #4
 801b222:	697a      	ldr	r2, [r7, #20]
 801b224:	4313      	orrs	r3, r2
 801b226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801b228:	697b      	ldr	r3, [r7, #20]
 801b22a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b22e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	4a15      	ldr	r2, [pc, #84]	; (801b288 <TIM_OC2_SetConfig+0xd4>)
 801b234:	4293      	cmp	r3, r2
 801b236:	d113      	bne.n	801b260 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801b238:	693b      	ldr	r3, [r7, #16]
 801b23a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b23e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801b240:	693b      	ldr	r3, [r7, #16]
 801b242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b246:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801b248:	683b      	ldr	r3, [r7, #0]
 801b24a:	695b      	ldr	r3, [r3, #20]
 801b24c:	009b      	lsls	r3, r3, #2
 801b24e:	693a      	ldr	r2, [r7, #16]
 801b250:	4313      	orrs	r3, r2
 801b252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801b254:	683b      	ldr	r3, [r7, #0]
 801b256:	699b      	ldr	r3, [r3, #24]
 801b258:	009b      	lsls	r3, r3, #2
 801b25a:	693a      	ldr	r2, [r7, #16]
 801b25c:	4313      	orrs	r3, r2
 801b25e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	693a      	ldr	r2, [r7, #16]
 801b264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	68fa      	ldr	r2, [r7, #12]
 801b26a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801b26c:	683b      	ldr	r3, [r7, #0]
 801b26e:	685a      	ldr	r2, [r3, #4]
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	697a      	ldr	r2, [r7, #20]
 801b278:	621a      	str	r2, [r3, #32]
}
 801b27a:	bf00      	nop
 801b27c:	371c      	adds	r7, #28
 801b27e:	46bd      	mov	sp, r7
 801b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b284:	4770      	bx	lr
 801b286:	bf00      	nop
 801b288:	40010000 	.word	0x40010000

0801b28c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b28c:	b480      	push	{r7}
 801b28e:	b087      	sub	sp, #28
 801b290:	af00      	add	r7, sp, #0
 801b292:	6078      	str	r0, [r7, #4]
 801b294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	6a1b      	ldr	r3, [r3, #32]
 801b29a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	6a1b      	ldr	r3, [r3, #32]
 801b2a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	685b      	ldr	r3, [r3, #4]
 801b2ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	69db      	ldr	r3, [r3, #28]
 801b2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b2ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	f023 0303 	bic.w	r3, r3, #3
 801b2c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b2c4:	683b      	ldr	r3, [r7, #0]
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	68fa      	ldr	r2, [r7, #12]
 801b2ca:	4313      	orrs	r3, r2
 801b2cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801b2ce:	697b      	ldr	r3, [r7, #20]
 801b2d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b2d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801b2d6:	683b      	ldr	r3, [r7, #0]
 801b2d8:	689b      	ldr	r3, [r3, #8]
 801b2da:	021b      	lsls	r3, r3, #8
 801b2dc:	697a      	ldr	r2, [r7, #20]
 801b2de:	4313      	orrs	r3, r2
 801b2e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	4a1d      	ldr	r2, [pc, #116]	; (801b35c <TIM_OC3_SetConfig+0xd0>)
 801b2e6:	4293      	cmp	r3, r2
 801b2e8:	d10d      	bne.n	801b306 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801b2ea:	697b      	ldr	r3, [r7, #20]
 801b2ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b2f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801b2f2:	683b      	ldr	r3, [r7, #0]
 801b2f4:	68db      	ldr	r3, [r3, #12]
 801b2f6:	021b      	lsls	r3, r3, #8
 801b2f8:	697a      	ldr	r2, [r7, #20]
 801b2fa:	4313      	orrs	r3, r2
 801b2fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801b2fe:	697b      	ldr	r3, [r7, #20]
 801b300:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	4a14      	ldr	r2, [pc, #80]	; (801b35c <TIM_OC3_SetConfig+0xd0>)
 801b30a:	4293      	cmp	r3, r2
 801b30c:	d113      	bne.n	801b336 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801b30e:	693b      	ldr	r3, [r7, #16]
 801b310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801b316:	693b      	ldr	r3, [r7, #16]
 801b318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b31c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801b31e:	683b      	ldr	r3, [r7, #0]
 801b320:	695b      	ldr	r3, [r3, #20]
 801b322:	011b      	lsls	r3, r3, #4
 801b324:	693a      	ldr	r2, [r7, #16]
 801b326:	4313      	orrs	r3, r2
 801b328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801b32a:	683b      	ldr	r3, [r7, #0]
 801b32c:	699b      	ldr	r3, [r3, #24]
 801b32e:	011b      	lsls	r3, r3, #4
 801b330:	693a      	ldr	r2, [r7, #16]
 801b332:	4313      	orrs	r3, r2
 801b334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	693a      	ldr	r2, [r7, #16]
 801b33a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	68fa      	ldr	r2, [r7, #12]
 801b340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801b342:	683b      	ldr	r3, [r7, #0]
 801b344:	685a      	ldr	r2, [r3, #4]
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	697a      	ldr	r2, [r7, #20]
 801b34e:	621a      	str	r2, [r3, #32]
}
 801b350:	bf00      	nop
 801b352:	371c      	adds	r7, #28
 801b354:	46bd      	mov	sp, r7
 801b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b35a:	4770      	bx	lr
 801b35c:	40010000 	.word	0x40010000

0801b360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b360:	b480      	push	{r7}
 801b362:	b087      	sub	sp, #28
 801b364:	af00      	add	r7, sp, #0
 801b366:	6078      	str	r0, [r7, #4]
 801b368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	6a1b      	ldr	r3, [r3, #32]
 801b36e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	6a1b      	ldr	r3, [r3, #32]
 801b37a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	685b      	ldr	r3, [r3, #4]
 801b380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	69db      	ldr	r3, [r3, #28]
 801b386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b38e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b398:	683b      	ldr	r3, [r7, #0]
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	021b      	lsls	r3, r3, #8
 801b39e:	68fa      	ldr	r2, [r7, #12]
 801b3a0:	4313      	orrs	r3, r2
 801b3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801b3a4:	693b      	ldr	r3, [r7, #16]
 801b3a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b3aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801b3ac:	683b      	ldr	r3, [r7, #0]
 801b3ae:	689b      	ldr	r3, [r3, #8]
 801b3b0:	031b      	lsls	r3, r3, #12
 801b3b2:	693a      	ldr	r2, [r7, #16]
 801b3b4:	4313      	orrs	r3, r2
 801b3b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	4a10      	ldr	r2, [pc, #64]	; (801b3fc <TIM_OC4_SetConfig+0x9c>)
 801b3bc:	4293      	cmp	r3, r2
 801b3be:	d109      	bne.n	801b3d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801b3c0:	697b      	ldr	r3, [r7, #20]
 801b3c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b3c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801b3c8:	683b      	ldr	r3, [r7, #0]
 801b3ca:	695b      	ldr	r3, [r3, #20]
 801b3cc:	019b      	lsls	r3, r3, #6
 801b3ce:	697a      	ldr	r2, [r7, #20]
 801b3d0:	4313      	orrs	r3, r2
 801b3d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	697a      	ldr	r2, [r7, #20]
 801b3d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	68fa      	ldr	r2, [r7, #12]
 801b3de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801b3e0:	683b      	ldr	r3, [r7, #0]
 801b3e2:	685a      	ldr	r2, [r3, #4]
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	693a      	ldr	r2, [r7, #16]
 801b3ec:	621a      	str	r2, [r3, #32]
}
 801b3ee:	bf00      	nop
 801b3f0:	371c      	adds	r7, #28
 801b3f2:	46bd      	mov	sp, r7
 801b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3f8:	4770      	bx	lr
 801b3fa:	bf00      	nop
 801b3fc:	40010000 	.word	0x40010000

0801b400 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801b400:	b480      	push	{r7}
 801b402:	b087      	sub	sp, #28
 801b404:	af00      	add	r7, sp, #0
 801b406:	60f8      	str	r0, [r7, #12]
 801b408:	60b9      	str	r1, [r7, #8]
 801b40a:	607a      	str	r2, [r7, #4]
 801b40c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b40e:	68fb      	ldr	r3, [r7, #12]
 801b410:	6a1b      	ldr	r3, [r3, #32]
 801b412:	f023 0201 	bic.w	r2, r3, #1
 801b416:	68fb      	ldr	r3, [r7, #12]
 801b418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b41a:	68fb      	ldr	r3, [r7, #12]
 801b41c:	699b      	ldr	r3, [r3, #24]
 801b41e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	6a1b      	ldr	r3, [r3, #32]
 801b424:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801b426:	68fb      	ldr	r3, [r7, #12]
 801b428:	4a24      	ldr	r2, [pc, #144]	; (801b4bc <TIM_TI1_SetConfig+0xbc>)
 801b42a:	4293      	cmp	r3, r2
 801b42c:	d013      	beq.n	801b456 <TIM_TI1_SetConfig+0x56>
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b434:	d00f      	beq.n	801b456 <TIM_TI1_SetConfig+0x56>
 801b436:	68fb      	ldr	r3, [r7, #12]
 801b438:	4a21      	ldr	r2, [pc, #132]	; (801b4c0 <TIM_TI1_SetConfig+0xc0>)
 801b43a:	4293      	cmp	r3, r2
 801b43c:	d00b      	beq.n	801b456 <TIM_TI1_SetConfig+0x56>
 801b43e:	68fb      	ldr	r3, [r7, #12]
 801b440:	4a20      	ldr	r2, [pc, #128]	; (801b4c4 <TIM_TI1_SetConfig+0xc4>)
 801b442:	4293      	cmp	r3, r2
 801b444:	d007      	beq.n	801b456 <TIM_TI1_SetConfig+0x56>
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	4a1f      	ldr	r2, [pc, #124]	; (801b4c8 <TIM_TI1_SetConfig+0xc8>)
 801b44a:	4293      	cmp	r3, r2
 801b44c:	d003      	beq.n	801b456 <TIM_TI1_SetConfig+0x56>
 801b44e:	68fb      	ldr	r3, [r7, #12]
 801b450:	4a1e      	ldr	r2, [pc, #120]	; (801b4cc <TIM_TI1_SetConfig+0xcc>)
 801b452:	4293      	cmp	r3, r2
 801b454:	d101      	bne.n	801b45a <TIM_TI1_SetConfig+0x5a>
 801b456:	2301      	movs	r3, #1
 801b458:	e000      	b.n	801b45c <TIM_TI1_SetConfig+0x5c>
 801b45a:	2300      	movs	r3, #0
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	d008      	beq.n	801b472 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801b460:	697b      	ldr	r3, [r7, #20]
 801b462:	f023 0303 	bic.w	r3, r3, #3
 801b466:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801b468:	697a      	ldr	r2, [r7, #20]
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	4313      	orrs	r3, r2
 801b46e:	617b      	str	r3, [r7, #20]
 801b470:	e003      	b.n	801b47a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801b472:	697b      	ldr	r3, [r7, #20]
 801b474:	f043 0301 	orr.w	r3, r3, #1
 801b478:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b47a:	697b      	ldr	r3, [r7, #20]
 801b47c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801b482:	683b      	ldr	r3, [r7, #0]
 801b484:	011b      	lsls	r3, r3, #4
 801b486:	b2db      	uxtb	r3, r3
 801b488:	697a      	ldr	r2, [r7, #20]
 801b48a:	4313      	orrs	r3, r2
 801b48c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b48e:	693b      	ldr	r3, [r7, #16]
 801b490:	f023 030a 	bic.w	r3, r3, #10
 801b494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801b496:	68bb      	ldr	r3, [r7, #8]
 801b498:	f003 030a 	and.w	r3, r3, #10
 801b49c:	693a      	ldr	r2, [r7, #16]
 801b49e:	4313      	orrs	r3, r2
 801b4a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	697a      	ldr	r2, [r7, #20]
 801b4a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b4a8:	68fb      	ldr	r3, [r7, #12]
 801b4aa:	693a      	ldr	r2, [r7, #16]
 801b4ac:	621a      	str	r2, [r3, #32]
}
 801b4ae:	bf00      	nop
 801b4b0:	371c      	adds	r7, #28
 801b4b2:	46bd      	mov	sp, r7
 801b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4b8:	4770      	bx	lr
 801b4ba:	bf00      	nop
 801b4bc:	40010000 	.word	0x40010000
 801b4c0:	40000400 	.word	0x40000400
 801b4c4:	40000800 	.word	0x40000800
 801b4c8:	40000c00 	.word	0x40000c00
 801b4cc:	40014000 	.word	0x40014000

0801b4d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b4d0:	b480      	push	{r7}
 801b4d2:	b087      	sub	sp, #28
 801b4d4:	af00      	add	r7, sp, #0
 801b4d6:	60f8      	str	r0, [r7, #12]
 801b4d8:	60b9      	str	r1, [r7, #8]
 801b4da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	6a1b      	ldr	r3, [r3, #32]
 801b4e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	6a1b      	ldr	r3, [r3, #32]
 801b4e6:	f023 0201 	bic.w	r2, r3, #1
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	699b      	ldr	r3, [r3, #24]
 801b4f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b4f4:	693b      	ldr	r3, [r7, #16]
 801b4f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b4fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	011b      	lsls	r3, r3, #4
 801b500:	693a      	ldr	r2, [r7, #16]
 801b502:	4313      	orrs	r3, r2
 801b504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b506:	697b      	ldr	r3, [r7, #20]
 801b508:	f023 030a 	bic.w	r3, r3, #10
 801b50c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801b50e:	697a      	ldr	r2, [r7, #20]
 801b510:	68bb      	ldr	r3, [r7, #8]
 801b512:	4313      	orrs	r3, r2
 801b514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b516:	68fb      	ldr	r3, [r7, #12]
 801b518:	693a      	ldr	r2, [r7, #16]
 801b51a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b51c:	68fb      	ldr	r3, [r7, #12]
 801b51e:	697a      	ldr	r2, [r7, #20]
 801b520:	621a      	str	r2, [r3, #32]
}
 801b522:	bf00      	nop
 801b524:	371c      	adds	r7, #28
 801b526:	46bd      	mov	sp, r7
 801b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b52c:	4770      	bx	lr

0801b52e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801b52e:	b480      	push	{r7}
 801b530:	b087      	sub	sp, #28
 801b532:	af00      	add	r7, sp, #0
 801b534:	60f8      	str	r0, [r7, #12]
 801b536:	60b9      	str	r1, [r7, #8]
 801b538:	607a      	str	r2, [r7, #4]
 801b53a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	6a1b      	ldr	r3, [r3, #32]
 801b540:	f023 0210 	bic.w	r2, r3, #16
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	699b      	ldr	r3, [r3, #24]
 801b54c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b54e:	68fb      	ldr	r3, [r7, #12]
 801b550:	6a1b      	ldr	r3, [r3, #32]
 801b552:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801b554:	697b      	ldr	r3, [r7, #20]
 801b556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b55a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	021b      	lsls	r3, r3, #8
 801b560:	697a      	ldr	r2, [r7, #20]
 801b562:	4313      	orrs	r3, r2
 801b564:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b566:	697b      	ldr	r3, [r7, #20]
 801b568:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b56c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801b56e:	683b      	ldr	r3, [r7, #0]
 801b570:	031b      	lsls	r3, r3, #12
 801b572:	b29b      	uxth	r3, r3
 801b574:	697a      	ldr	r2, [r7, #20]
 801b576:	4313      	orrs	r3, r2
 801b578:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b57a:	693b      	ldr	r3, [r7, #16]
 801b57c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801b580:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801b582:	68bb      	ldr	r3, [r7, #8]
 801b584:	011b      	lsls	r3, r3, #4
 801b586:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801b58a:	693a      	ldr	r2, [r7, #16]
 801b58c:	4313      	orrs	r3, r2
 801b58e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	697a      	ldr	r2, [r7, #20]
 801b594:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b596:	68fb      	ldr	r3, [r7, #12]
 801b598:	693a      	ldr	r2, [r7, #16]
 801b59a:	621a      	str	r2, [r3, #32]
}
 801b59c:	bf00      	nop
 801b59e:	371c      	adds	r7, #28
 801b5a0:	46bd      	mov	sp, r7
 801b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5a6:	4770      	bx	lr

0801b5a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b5a8:	b480      	push	{r7}
 801b5aa:	b087      	sub	sp, #28
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	60f8      	str	r0, [r7, #12]
 801b5b0:	60b9      	str	r1, [r7, #8]
 801b5b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	6a1b      	ldr	r3, [r3, #32]
 801b5b8:	f023 0210 	bic.w	r2, r3, #16
 801b5bc:	68fb      	ldr	r3, [r7, #12]
 801b5be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b5c0:	68fb      	ldr	r3, [r7, #12]
 801b5c2:	699b      	ldr	r3, [r3, #24]
 801b5c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b5c6:	68fb      	ldr	r3, [r7, #12]
 801b5c8:	6a1b      	ldr	r3, [r3, #32]
 801b5ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b5cc:	697b      	ldr	r3, [r7, #20]
 801b5ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b5d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	031b      	lsls	r3, r3, #12
 801b5d8:	697a      	ldr	r2, [r7, #20]
 801b5da:	4313      	orrs	r3, r2
 801b5dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b5de:	693b      	ldr	r3, [r7, #16]
 801b5e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801b5e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801b5e6:	68bb      	ldr	r3, [r7, #8]
 801b5e8:	011b      	lsls	r3, r3, #4
 801b5ea:	693a      	ldr	r2, [r7, #16]
 801b5ec:	4313      	orrs	r3, r2
 801b5ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	697a      	ldr	r2, [r7, #20]
 801b5f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b5f6:	68fb      	ldr	r3, [r7, #12]
 801b5f8:	693a      	ldr	r2, [r7, #16]
 801b5fa:	621a      	str	r2, [r3, #32]
}
 801b5fc:	bf00      	nop
 801b5fe:	371c      	adds	r7, #28
 801b600:	46bd      	mov	sp, r7
 801b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b606:	4770      	bx	lr

0801b608 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801b608:	b480      	push	{r7}
 801b60a:	b087      	sub	sp, #28
 801b60c:	af00      	add	r7, sp, #0
 801b60e:	60f8      	str	r0, [r7, #12]
 801b610:	60b9      	str	r1, [r7, #8]
 801b612:	607a      	str	r2, [r7, #4]
 801b614:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b616:	68fb      	ldr	r3, [r7, #12]
 801b618:	6a1b      	ldr	r3, [r3, #32]
 801b61a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b61e:	68fb      	ldr	r3, [r7, #12]
 801b620:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	69db      	ldr	r3, [r3, #28]
 801b626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b628:	68fb      	ldr	r3, [r7, #12]
 801b62a:	6a1b      	ldr	r3, [r3, #32]
 801b62c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801b62e:	697b      	ldr	r3, [r7, #20]
 801b630:	f023 0303 	bic.w	r3, r3, #3
 801b634:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801b636:	697a      	ldr	r2, [r7, #20]
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	4313      	orrs	r3, r2
 801b63c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801b63e:	697b      	ldr	r3, [r7, #20]
 801b640:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b644:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801b646:	683b      	ldr	r3, [r7, #0]
 801b648:	011b      	lsls	r3, r3, #4
 801b64a:	b2db      	uxtb	r3, r3
 801b64c:	697a      	ldr	r2, [r7, #20]
 801b64e:	4313      	orrs	r3, r2
 801b650:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801b652:	693b      	ldr	r3, [r7, #16]
 801b654:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 801b658:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801b65a:	68bb      	ldr	r3, [r7, #8]
 801b65c:	021b      	lsls	r3, r3, #8
 801b65e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801b662:	693a      	ldr	r2, [r7, #16]
 801b664:	4313      	orrs	r3, r2
 801b666:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801b668:	68fb      	ldr	r3, [r7, #12]
 801b66a:	697a      	ldr	r2, [r7, #20]
 801b66c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801b66e:	68fb      	ldr	r3, [r7, #12]
 801b670:	693a      	ldr	r2, [r7, #16]
 801b672:	621a      	str	r2, [r3, #32]
}
 801b674:	bf00      	nop
 801b676:	371c      	adds	r7, #28
 801b678:	46bd      	mov	sp, r7
 801b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b67e:	4770      	bx	lr

0801b680 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801b680:	b480      	push	{r7}
 801b682:	b087      	sub	sp, #28
 801b684:	af00      	add	r7, sp, #0
 801b686:	60f8      	str	r0, [r7, #12]
 801b688:	60b9      	str	r1, [r7, #8]
 801b68a:	607a      	str	r2, [r7, #4]
 801b68c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	6a1b      	ldr	r3, [r3, #32]
 801b692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b696:	68fb      	ldr	r3, [r7, #12]
 801b698:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	69db      	ldr	r3, [r3, #28]
 801b69e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b6a0:	68fb      	ldr	r3, [r7, #12]
 801b6a2:	6a1b      	ldr	r3, [r3, #32]
 801b6a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801b6a6:	697b      	ldr	r3, [r7, #20]
 801b6a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b6ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	021b      	lsls	r3, r3, #8
 801b6b2:	697a      	ldr	r2, [r7, #20]
 801b6b4:	4313      	orrs	r3, r2
 801b6b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801b6b8:	697b      	ldr	r3, [r7, #20]
 801b6ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b6be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801b6c0:	683b      	ldr	r3, [r7, #0]
 801b6c2:	031b      	lsls	r3, r3, #12
 801b6c4:	b29b      	uxth	r3, r3
 801b6c6:	697a      	ldr	r2, [r7, #20]
 801b6c8:	4313      	orrs	r3, r2
 801b6ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801b6cc:	693b      	ldr	r3, [r7, #16]
 801b6ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801b6d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801b6d4:	68bb      	ldr	r3, [r7, #8]
 801b6d6:	031b      	lsls	r3, r3, #12
 801b6d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 801b6dc:	693a      	ldr	r2, [r7, #16]
 801b6de:	4313      	orrs	r3, r2
 801b6e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801b6e2:	68fb      	ldr	r3, [r7, #12]
 801b6e4:	697a      	ldr	r2, [r7, #20]
 801b6e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801b6e8:	68fb      	ldr	r3, [r7, #12]
 801b6ea:	693a      	ldr	r2, [r7, #16]
 801b6ec:	621a      	str	r2, [r3, #32]
}
 801b6ee:	bf00      	nop
 801b6f0:	371c      	adds	r7, #28
 801b6f2:	46bd      	mov	sp, r7
 801b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6f8:	4770      	bx	lr

0801b6fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801b6fa:	b480      	push	{r7}
 801b6fc:	b085      	sub	sp, #20
 801b6fe:	af00      	add	r7, sp, #0
 801b700:	6078      	str	r0, [r7, #4]
 801b702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	689b      	ldr	r3, [r3, #8]
 801b708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801b70a:	68fb      	ldr	r3, [r7, #12]
 801b70c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801b712:	683a      	ldr	r2, [r7, #0]
 801b714:	68fb      	ldr	r3, [r7, #12]
 801b716:	4313      	orrs	r3, r2
 801b718:	f043 0307 	orr.w	r3, r3, #7
 801b71c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	68fa      	ldr	r2, [r7, #12]
 801b722:	609a      	str	r2, [r3, #8]
}
 801b724:	bf00      	nop
 801b726:	3714      	adds	r7, #20
 801b728:	46bd      	mov	sp, r7
 801b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b72e:	4770      	bx	lr

0801b730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801b730:	b480      	push	{r7}
 801b732:	b087      	sub	sp, #28
 801b734:	af00      	add	r7, sp, #0
 801b736:	60f8      	str	r0, [r7, #12]
 801b738:	60b9      	str	r1, [r7, #8]
 801b73a:	607a      	str	r2, [r7, #4]
 801b73c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801b73e:	68fb      	ldr	r3, [r7, #12]
 801b740:	689b      	ldr	r3, [r3, #8]
 801b742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b744:	697b      	ldr	r3, [r7, #20]
 801b746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b74a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801b74c:	683b      	ldr	r3, [r7, #0]
 801b74e:	021a      	lsls	r2, r3, #8
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	431a      	orrs	r2, r3
 801b754:	68bb      	ldr	r3, [r7, #8]
 801b756:	4313      	orrs	r3, r2
 801b758:	697a      	ldr	r2, [r7, #20]
 801b75a:	4313      	orrs	r3, r2
 801b75c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b75e:	68fb      	ldr	r3, [r7, #12]
 801b760:	697a      	ldr	r2, [r7, #20]
 801b762:	609a      	str	r2, [r3, #8]
}
 801b764:	bf00      	nop
 801b766:	371c      	adds	r7, #28
 801b768:	46bd      	mov	sp, r7
 801b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b76e:	4770      	bx	lr

0801b770 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801b770:	b480      	push	{r7}
 801b772:	b087      	sub	sp, #28
 801b774:	af00      	add	r7, sp, #0
 801b776:	60f8      	str	r0, [r7, #12]
 801b778:	60b9      	str	r1, [r7, #8]
 801b77a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801b77c:	68bb      	ldr	r3, [r7, #8]
 801b77e:	f003 031f 	and.w	r3, r3, #31
 801b782:	2201      	movs	r2, #1
 801b784:	fa02 f303 	lsl.w	r3, r2, r3
 801b788:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801b78a:	68fb      	ldr	r3, [r7, #12]
 801b78c:	6a1a      	ldr	r2, [r3, #32]
 801b78e:	697b      	ldr	r3, [r7, #20]
 801b790:	43db      	mvns	r3, r3
 801b792:	401a      	ands	r2, r3
 801b794:	68fb      	ldr	r3, [r7, #12]
 801b796:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801b798:	68fb      	ldr	r3, [r7, #12]
 801b79a:	6a1a      	ldr	r2, [r3, #32]
 801b79c:	68bb      	ldr	r3, [r7, #8]
 801b79e:	f003 031f 	and.w	r3, r3, #31
 801b7a2:	6879      	ldr	r1, [r7, #4]
 801b7a4:	fa01 f303 	lsl.w	r3, r1, r3
 801b7a8:	431a      	orrs	r2, r3
 801b7aa:	68fb      	ldr	r3, [r7, #12]
 801b7ac:	621a      	str	r2, [r3, #32]
}
 801b7ae:	bf00      	nop
 801b7b0:	371c      	adds	r7, #28
 801b7b2:	46bd      	mov	sp, r7
 801b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7b8:	4770      	bx	lr
	...

0801b7bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801b7bc:	b480      	push	{r7}
 801b7be:	b085      	sub	sp, #20
 801b7c0:	af00      	add	r7, sp, #0
 801b7c2:	6078      	str	r0, [r7, #4]
 801b7c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b7cc:	2b01      	cmp	r3, #1
 801b7ce:	d101      	bne.n	801b7d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801b7d0:	2302      	movs	r3, #2
 801b7d2:	e050      	b.n	801b876 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	2201      	movs	r2, #1
 801b7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	2202      	movs	r2, #2
 801b7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	685b      	ldr	r3, [r3, #4]
 801b7ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	689b      	ldr	r3, [r3, #8]
 801b7f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801b7f4:	68fb      	ldr	r3, [r7, #12]
 801b7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b7fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801b7fc:	683b      	ldr	r3, [r7, #0]
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	68fa      	ldr	r2, [r7, #12]
 801b802:	4313      	orrs	r3, r2
 801b804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	681b      	ldr	r3, [r3, #0]
 801b80a:	68fa      	ldr	r2, [r7, #12]
 801b80c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	4a1c      	ldr	r2, [pc, #112]	; (801b884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801b814:	4293      	cmp	r3, r2
 801b816:	d018      	beq.n	801b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b820:	d013      	beq.n	801b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	4a18      	ldr	r2, [pc, #96]	; (801b888 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801b828:	4293      	cmp	r3, r2
 801b82a:	d00e      	beq.n	801b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	4a16      	ldr	r2, [pc, #88]	; (801b88c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801b832:	4293      	cmp	r3, r2
 801b834:	d009      	beq.n	801b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	681b      	ldr	r3, [r3, #0]
 801b83a:	4a15      	ldr	r2, [pc, #84]	; (801b890 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801b83c:	4293      	cmp	r3, r2
 801b83e:	d004      	beq.n	801b84a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	4a13      	ldr	r2, [pc, #76]	; (801b894 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801b846:	4293      	cmp	r3, r2
 801b848:	d10c      	bne.n	801b864 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801b84a:	68bb      	ldr	r3, [r7, #8]
 801b84c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801b852:	683b      	ldr	r3, [r7, #0]
 801b854:	685b      	ldr	r3, [r3, #4]
 801b856:	68ba      	ldr	r2, [r7, #8]
 801b858:	4313      	orrs	r3, r2
 801b85a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	68ba      	ldr	r2, [r7, #8]
 801b862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	2201      	movs	r2, #1
 801b868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	2200      	movs	r2, #0
 801b870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b874:	2300      	movs	r3, #0
}
 801b876:	4618      	mov	r0, r3
 801b878:	3714      	adds	r7, #20
 801b87a:	46bd      	mov	sp, r7
 801b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b880:	4770      	bx	lr
 801b882:	bf00      	nop
 801b884:	40010000 	.word	0x40010000
 801b888:	40000400 	.word	0x40000400
 801b88c:	40000800 	.word	0x40000800
 801b890:	40000c00 	.word	0x40000c00
 801b894:	40014000 	.word	0x40014000

0801b898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801b898:	b480      	push	{r7}
 801b89a:	b083      	sub	sp, #12
 801b89c:	af00      	add	r7, sp, #0
 801b89e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801b8a0:	bf00      	nop
 801b8a2:	370c      	adds	r7, #12
 801b8a4:	46bd      	mov	sp, r7
 801b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8aa:	4770      	bx	lr

0801b8ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801b8ac:	b480      	push	{r7}
 801b8ae:	b083      	sub	sp, #12
 801b8b0:	af00      	add	r7, sp, #0
 801b8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801b8b4:	bf00      	nop
 801b8b6:	370c      	adds	r7, #12
 801b8b8:	46bd      	mov	sp, r7
 801b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8be:	4770      	bx	lr

0801b8c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b8c0:	b580      	push	{r7, lr}
 801b8c2:	b082      	sub	sp, #8
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d101      	bne.n	801b8d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b8ce:	2301      	movs	r3, #1
 801b8d0:	e03f      	b.n	801b952 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b8d8:	b2db      	uxtb	r3, r3
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d106      	bne.n	801b8ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	2200      	movs	r2, #0
 801b8e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801b8e6:	6878      	ldr	r0, [r7, #4]
 801b8e8:	f7fa f8ea 	bl	8015ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	2224      	movs	r2, #36	; 0x24
 801b8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	68da      	ldr	r2, [r3, #12]
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801b902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801b904:	6878      	ldr	r0, [r7, #4]
 801b906:	f000 ff9b 	bl	801c840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	691a      	ldr	r2, [r3, #16]
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	695a      	ldr	r2, [r3, #20]
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	681b      	ldr	r3, [r3, #0]
 801b924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	68da      	ldr	r2, [r3, #12]
 801b930:	687b      	ldr	r3, [r7, #4]
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801b938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	2200      	movs	r2, #0
 801b93e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	2220      	movs	r2, #32
 801b944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	2220      	movs	r2, #32
 801b94c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801b950:	2300      	movs	r3, #0
}
 801b952:	4618      	mov	r0, r3
 801b954:	3708      	adds	r7, #8
 801b956:	46bd      	mov	sp, r7
 801b958:	bd80      	pop	{r7, pc}

0801b95a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b95a:	b580      	push	{r7, lr}
 801b95c:	b08a      	sub	sp, #40	; 0x28
 801b95e:	af02      	add	r7, sp, #8
 801b960:	60f8      	str	r0, [r7, #12]
 801b962:	60b9      	str	r1, [r7, #8]
 801b964:	603b      	str	r3, [r7, #0]
 801b966:	4613      	mov	r3, r2
 801b968:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801b96a:	2300      	movs	r3, #0
 801b96c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b974:	b2db      	uxtb	r3, r3
 801b976:	2b20      	cmp	r3, #32
 801b978:	d17c      	bne.n	801ba74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801b97a:	68bb      	ldr	r3, [r7, #8]
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d002      	beq.n	801b986 <HAL_UART_Transmit+0x2c>
 801b980:	88fb      	ldrh	r3, [r7, #6]
 801b982:	2b00      	cmp	r3, #0
 801b984:	d101      	bne.n	801b98a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801b986:	2301      	movs	r3, #1
 801b988:	e075      	b.n	801ba76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801b98a:	68fb      	ldr	r3, [r7, #12]
 801b98c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b990:	2b01      	cmp	r3, #1
 801b992:	d101      	bne.n	801b998 <HAL_UART_Transmit+0x3e>
 801b994:	2302      	movs	r3, #2
 801b996:	e06e      	b.n	801ba76 <HAL_UART_Transmit+0x11c>
 801b998:	68fb      	ldr	r3, [r7, #12]
 801b99a:	2201      	movs	r2, #1
 801b99c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	2200      	movs	r2, #0
 801b9a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b9a6:	68fb      	ldr	r3, [r7, #12]
 801b9a8:	2221      	movs	r2, #33	; 0x21
 801b9aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801b9ae:	f7fa fb3f 	bl	8016030 <HAL_GetTick>
 801b9b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801b9b4:	68fb      	ldr	r3, [r7, #12]
 801b9b6:	88fa      	ldrh	r2, [r7, #6]
 801b9b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801b9ba:	68fb      	ldr	r3, [r7, #12]
 801b9bc:	88fa      	ldrh	r2, [r7, #6]
 801b9be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b9c0:	68fb      	ldr	r3, [r7, #12]
 801b9c2:	689b      	ldr	r3, [r3, #8]
 801b9c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b9c8:	d108      	bne.n	801b9dc <HAL_UART_Transmit+0x82>
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	691b      	ldr	r3, [r3, #16]
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d104      	bne.n	801b9dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801b9d2:	2300      	movs	r3, #0
 801b9d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801b9d6:	68bb      	ldr	r3, [r7, #8]
 801b9d8:	61bb      	str	r3, [r7, #24]
 801b9da:	e003      	b.n	801b9e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801b9dc:	68bb      	ldr	r3, [r7, #8]
 801b9de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801b9e0:	2300      	movs	r3, #0
 801b9e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	2200      	movs	r2, #0
 801b9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801b9ec:	e02a      	b.n	801ba44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b9ee:	683b      	ldr	r3, [r7, #0]
 801b9f0:	9300      	str	r3, [sp, #0]
 801b9f2:	697b      	ldr	r3, [r7, #20]
 801b9f4:	2200      	movs	r2, #0
 801b9f6:	2180      	movs	r1, #128	; 0x80
 801b9f8:	68f8      	ldr	r0, [r7, #12]
 801b9fa:	f000 fc53 	bl	801c2a4 <UART_WaitOnFlagUntilTimeout>
 801b9fe:	4603      	mov	r3, r0
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	d001      	beq.n	801ba08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801ba04:	2303      	movs	r3, #3
 801ba06:	e036      	b.n	801ba76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801ba08:	69fb      	ldr	r3, [r7, #28]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d10b      	bne.n	801ba26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801ba0e:	69bb      	ldr	r3, [r7, #24]
 801ba10:	881b      	ldrh	r3, [r3, #0]
 801ba12:	461a      	mov	r2, r3
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	681b      	ldr	r3, [r3, #0]
 801ba18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801ba1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801ba1e:	69bb      	ldr	r3, [r7, #24]
 801ba20:	3302      	adds	r3, #2
 801ba22:	61bb      	str	r3, [r7, #24]
 801ba24:	e007      	b.n	801ba36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801ba26:	69fb      	ldr	r3, [r7, #28]
 801ba28:	781a      	ldrb	r2, [r3, #0]
 801ba2a:	68fb      	ldr	r3, [r7, #12]
 801ba2c:	681b      	ldr	r3, [r3, #0]
 801ba2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801ba30:	69fb      	ldr	r3, [r7, #28]
 801ba32:	3301      	adds	r3, #1
 801ba34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801ba36:	68fb      	ldr	r3, [r7, #12]
 801ba38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801ba3a:	b29b      	uxth	r3, r3
 801ba3c:	3b01      	subs	r3, #1
 801ba3e:	b29a      	uxth	r2, r3
 801ba40:	68fb      	ldr	r3, [r7, #12]
 801ba42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801ba44:	68fb      	ldr	r3, [r7, #12]
 801ba46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801ba48:	b29b      	uxth	r3, r3
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	d1cf      	bne.n	801b9ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801ba4e:	683b      	ldr	r3, [r7, #0]
 801ba50:	9300      	str	r3, [sp, #0]
 801ba52:	697b      	ldr	r3, [r7, #20]
 801ba54:	2200      	movs	r2, #0
 801ba56:	2140      	movs	r1, #64	; 0x40
 801ba58:	68f8      	ldr	r0, [r7, #12]
 801ba5a:	f000 fc23 	bl	801c2a4 <UART_WaitOnFlagUntilTimeout>
 801ba5e:	4603      	mov	r3, r0
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d001      	beq.n	801ba68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801ba64:	2303      	movs	r3, #3
 801ba66:	e006      	b.n	801ba76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801ba68:	68fb      	ldr	r3, [r7, #12]
 801ba6a:	2220      	movs	r2, #32
 801ba6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801ba70:	2300      	movs	r3, #0
 801ba72:	e000      	b.n	801ba76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801ba74:	2302      	movs	r3, #2
  }
}
 801ba76:	4618      	mov	r0, r3
 801ba78:	3720      	adds	r7, #32
 801ba7a:	46bd      	mov	sp, r7
 801ba7c:	bd80      	pop	{r7, pc}

0801ba7e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ba7e:	b580      	push	{r7, lr}
 801ba80:	b08c      	sub	sp, #48	; 0x30
 801ba82:	af00      	add	r7, sp, #0
 801ba84:	60f8      	str	r0, [r7, #12]
 801ba86:	60b9      	str	r1, [r7, #8]
 801ba88:	4613      	mov	r3, r2
 801ba8a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801ba8c:	68fb      	ldr	r3, [r7, #12]
 801ba8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ba92:	b2db      	uxtb	r3, r3
 801ba94:	2b20      	cmp	r3, #32
 801ba96:	d152      	bne.n	801bb3e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 801ba98:	68bb      	ldr	r3, [r7, #8]
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d002      	beq.n	801baa4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 801ba9e:	88fb      	ldrh	r3, [r7, #6]
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d101      	bne.n	801baa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801baa4:	2301      	movs	r3, #1
 801baa6:	e04b      	b.n	801bb40 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 801baa8:	68fb      	ldr	r3, [r7, #12]
 801baaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801baae:	2b01      	cmp	r3, #1
 801bab0:	d101      	bne.n	801bab6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801bab2:	2302      	movs	r3, #2
 801bab4:	e044      	b.n	801bb40 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 801bab6:	68fb      	ldr	r3, [r7, #12]
 801bab8:	2201      	movs	r2, #1
 801baba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801babe:	68fb      	ldr	r3, [r7, #12]
 801bac0:	2201      	movs	r2, #1
 801bac2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801bac4:	88fb      	ldrh	r3, [r7, #6]
 801bac6:	461a      	mov	r2, r3
 801bac8:	68b9      	ldr	r1, [r7, #8]
 801baca:	68f8      	ldr	r0, [r7, #12]
 801bacc:	f000 fc58 	bl	801c380 <UART_Start_Receive_DMA>
 801bad0:	4603      	mov	r3, r0
 801bad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801bad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801bada:	2b00      	cmp	r3, #0
 801badc:	d12c      	bne.n	801bb38 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bade:	68fb      	ldr	r3, [r7, #12]
 801bae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bae2:	2b01      	cmp	r3, #1
 801bae4:	d125      	bne.n	801bb32 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801bae6:	2300      	movs	r3, #0
 801bae8:	613b      	str	r3, [r7, #16]
 801baea:	68fb      	ldr	r3, [r7, #12]
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	613b      	str	r3, [r7, #16]
 801baf2:	68fb      	ldr	r3, [r7, #12]
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	685b      	ldr	r3, [r3, #4]
 801baf8:	613b      	str	r3, [r7, #16]
 801bafa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bafc:	68fb      	ldr	r3, [r7, #12]
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	330c      	adds	r3, #12
 801bb02:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb04:	69bb      	ldr	r3, [r7, #24]
 801bb06:	e853 3f00 	ldrex	r3, [r3]
 801bb0a:	617b      	str	r3, [r7, #20]
   return(result);
 801bb0c:	697b      	ldr	r3, [r7, #20]
 801bb0e:	f043 0310 	orr.w	r3, r3, #16
 801bb12:	62bb      	str	r3, [r7, #40]	; 0x28
 801bb14:	68fb      	ldr	r3, [r7, #12]
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	330c      	adds	r3, #12
 801bb1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bb1c:	627a      	str	r2, [r7, #36]	; 0x24
 801bb1e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb20:	6a39      	ldr	r1, [r7, #32]
 801bb22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bb24:	e841 2300 	strex	r3, r2, [r1]
 801bb28:	61fb      	str	r3, [r7, #28]
   return(result);
 801bb2a:	69fb      	ldr	r3, [r7, #28]
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d1e5      	bne.n	801bafc <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 801bb30:	e002      	b.n	801bb38 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801bb32:	2301      	movs	r3, #1
 801bb34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801bb38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801bb3c:	e000      	b.n	801bb40 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 801bb3e:	2302      	movs	r3, #2
  }
}
 801bb40:	4618      	mov	r0, r3
 801bb42:	3730      	adds	r7, #48	; 0x30
 801bb44:	46bd      	mov	sp, r7
 801bb46:	bd80      	pop	{r7, pc}

0801bb48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801bb48:	b580      	push	{r7, lr}
 801bb4a:	b0ba      	sub	sp, #232	; 0xe8
 801bb4c:	af00      	add	r7, sp, #0
 801bb4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	681b      	ldr	r3, [r3, #0]
 801bb5e:	68db      	ldr	r3, [r3, #12]
 801bb60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	681b      	ldr	r3, [r3, #0]
 801bb68:	695b      	ldr	r3, [r3, #20]
 801bb6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801bb6e:	2300      	movs	r3, #0
 801bb70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801bb74:	2300      	movs	r3, #0
 801bb76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801bb7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bb7e:	f003 030f 	and.w	r3, r3, #15
 801bb82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801bb86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d10f      	bne.n	801bbae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bb8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bb92:	f003 0320 	and.w	r3, r3, #32
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d009      	beq.n	801bbae <HAL_UART_IRQHandler+0x66>
 801bb9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bb9e:	f003 0320 	and.w	r3, r3, #32
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d003      	beq.n	801bbae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801bba6:	6878      	ldr	r0, [r7, #4]
 801bba8:	f000 fd8f 	bl	801c6ca <UART_Receive_IT>
      return;
 801bbac:	e256      	b.n	801c05c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801bbae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	f000 80de 	beq.w	801bd74 <HAL_UART_IRQHandler+0x22c>
 801bbb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bbbc:	f003 0301 	and.w	r3, r3, #1
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	d106      	bne.n	801bbd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801bbc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bbc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	f000 80d1 	beq.w	801bd74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801bbd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbd6:	f003 0301 	and.w	r3, r3, #1
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d00b      	beq.n	801bbf6 <HAL_UART_IRQHandler+0xae>
 801bbde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bbe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	d005      	beq.n	801bbf6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bbee:	f043 0201 	orr.w	r2, r3, #1
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bbf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbfa:	f003 0304 	and.w	r3, r3, #4
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d00b      	beq.n	801bc1a <HAL_UART_IRQHandler+0xd2>
 801bc02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bc06:	f003 0301 	and.w	r3, r3, #1
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d005      	beq.n	801bc1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc12:	f043 0202 	orr.w	r2, r3, #2
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bc1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc1e:	f003 0302 	and.w	r3, r3, #2
 801bc22:	2b00      	cmp	r3, #0
 801bc24:	d00b      	beq.n	801bc3e <HAL_UART_IRQHandler+0xf6>
 801bc26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bc2a:	f003 0301 	and.w	r3, r3, #1
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d005      	beq.n	801bc3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc36:	f043 0204 	orr.w	r2, r3, #4
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801bc3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc42:	f003 0308 	and.w	r3, r3, #8
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d011      	beq.n	801bc6e <HAL_UART_IRQHandler+0x126>
 801bc4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bc4e:	f003 0320 	and.w	r3, r3, #32
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d105      	bne.n	801bc62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801bc56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bc5a:	f003 0301 	and.w	r3, r3, #1
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d005      	beq.n	801bc6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc66:	f043 0208 	orr.w	r2, r3, #8
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	f000 81ed 	beq.w	801c052 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bc78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc7c:	f003 0320 	and.w	r3, r3, #32
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d008      	beq.n	801bc96 <HAL_UART_IRQHandler+0x14e>
 801bc84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bc88:	f003 0320 	and.w	r3, r3, #32
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d002      	beq.n	801bc96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801bc90:	6878      	ldr	r0, [r7, #4]
 801bc92:	f000 fd1a 	bl	801c6ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	695b      	ldr	r3, [r3, #20]
 801bc9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bca0:	2b40      	cmp	r3, #64	; 0x40
 801bca2:	bf0c      	ite	eq
 801bca4:	2301      	moveq	r3, #1
 801bca6:	2300      	movne	r3, #0
 801bca8:	b2db      	uxtb	r3, r3
 801bcaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bcb2:	f003 0308 	and.w	r3, r3, #8
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d103      	bne.n	801bcc2 <HAL_UART_IRQHandler+0x17a>
 801bcba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d04f      	beq.n	801bd62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801bcc2:	6878      	ldr	r0, [r7, #4]
 801bcc4:	f000 fc22 	bl	801c50c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	695b      	ldr	r3, [r3, #20]
 801bcce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bcd2:	2b40      	cmp	r3, #64	; 0x40
 801bcd4:	d141      	bne.n	801bd5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bcd6:	687b      	ldr	r3, [r7, #4]
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	3314      	adds	r3, #20
 801bcdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bce4:	e853 3f00 	ldrex	r3, [r3]
 801bce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801bcec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bcf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bcf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	3314      	adds	r3, #20
 801bcfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801bd02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801bd06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801bd0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801bd12:	e841 2300 	strex	r3, r2, [r1]
 801bd16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801bd1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d1d9      	bne.n	801bcd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d013      	beq.n	801bd52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd2e:	4a7d      	ldr	r2, [pc, #500]	; (801bf24 <HAL_UART_IRQHandler+0x3dc>)
 801bd30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd36:	4618      	mov	r0, r3
 801bd38:	f7fa fc32 	bl	80165a0 <HAL_DMA_Abort_IT>
 801bd3c:	4603      	mov	r3, r0
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d016      	beq.n	801bd70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd48:	687a      	ldr	r2, [r7, #4]
 801bd4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801bd4c:	4610      	mov	r0, r2
 801bd4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bd50:	e00e      	b.n	801bd70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801bd52:	6878      	ldr	r0, [r7, #4]
 801bd54:	f000 f9a4 	bl	801c0a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bd58:	e00a      	b.n	801bd70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801bd5a:	6878      	ldr	r0, [r7, #4]
 801bd5c:	f000 f9a0 	bl	801c0a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bd60:	e006      	b.n	801bd70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801bd62:	6878      	ldr	r0, [r7, #4]
 801bd64:	f000 f99c 	bl	801c0a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	2200      	movs	r2, #0
 801bd6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801bd6e:	e170      	b.n	801c052 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bd70:	bf00      	nop
    return;
 801bd72:	e16e      	b.n	801c052 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd78:	2b01      	cmp	r3, #1
 801bd7a:	f040 814a 	bne.w	801c012 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801bd7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bd82:	f003 0310 	and.w	r3, r3, #16
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	f000 8143 	beq.w	801c012 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801bd8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bd90:	f003 0310 	and.w	r3, r3, #16
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	f000 813c 	beq.w	801c012 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801bd9a:	2300      	movs	r3, #0
 801bd9c:	60bb      	str	r3, [r7, #8]
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	60bb      	str	r3, [r7, #8]
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	681b      	ldr	r3, [r3, #0]
 801bdaa:	685b      	ldr	r3, [r3, #4]
 801bdac:	60bb      	str	r3, [r7, #8]
 801bdae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	695b      	ldr	r3, [r3, #20]
 801bdb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bdba:	2b40      	cmp	r3, #64	; 0x40
 801bdbc:	f040 80b4 	bne.w	801bf28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	685b      	ldr	r3, [r3, #4]
 801bdc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801bdcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	f000 8140 	beq.w	801c056 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801bdda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801bdde:	429a      	cmp	r2, r3
 801bde0:	f080 8139 	bcs.w	801c056 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801bdea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bdf0:	69db      	ldr	r3, [r3, #28]
 801bdf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bdf6:	f000 8088 	beq.w	801bf0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	330c      	adds	r3, #12
 801be00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801be08:	e853 3f00 	ldrex	r3, [r3]
 801be0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801be10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801be14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801be18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	330c      	adds	r3, #12
 801be22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801be26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801be2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801be32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801be36:	e841 2300 	strex	r3, r2, [r1]
 801be3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801be3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801be42:	2b00      	cmp	r3, #0
 801be44:	d1d9      	bne.n	801bdfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	3314      	adds	r3, #20
 801be4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801be50:	e853 3f00 	ldrex	r3, [r3]
 801be54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801be56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801be58:	f023 0301 	bic.w	r3, r3, #1
 801be5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	3314      	adds	r3, #20
 801be66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801be6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801be6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801be72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801be76:	e841 2300 	strex	r3, r2, [r1]
 801be7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801be7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d1e1      	bne.n	801be46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	3314      	adds	r3, #20
 801be88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801be8c:	e853 3f00 	ldrex	r3, [r3]
 801be90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801be92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801be94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801be98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	681b      	ldr	r3, [r3, #0]
 801bea0:	3314      	adds	r3, #20
 801bea2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801bea6:	66fa      	str	r2, [r7, #108]	; 0x6c
 801bea8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801beaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801beac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801beae:	e841 2300 	strex	r3, r2, [r1]
 801beb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801beb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d1e3      	bne.n	801be82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	2220      	movs	r2, #32
 801bebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	2200      	movs	r2, #0
 801bec6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	330c      	adds	r3, #12
 801bece:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bed2:	e853 3f00 	ldrex	r3, [r3]
 801bed6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801bed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801beda:	f023 0310 	bic.w	r3, r3, #16
 801bede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	681b      	ldr	r3, [r3, #0]
 801bee6:	330c      	adds	r3, #12
 801bee8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801beec:	65ba      	str	r2, [r7, #88]	; 0x58
 801beee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bef2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bef4:	e841 2300 	strex	r3, r2, [r1]
 801bef8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801befa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801befc:	2b00      	cmp	r3, #0
 801befe:	d1e3      	bne.n	801bec8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf04:	4618      	mov	r0, r3
 801bf06:	f7fa fadb 	bl	80164c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801bf12:	b29b      	uxth	r3, r3
 801bf14:	1ad3      	subs	r3, r2, r3
 801bf16:	b29b      	uxth	r3, r3
 801bf18:	4619      	mov	r1, r3
 801bf1a:	6878      	ldr	r0, [r7, #4]
 801bf1c:	f7e5 f826 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801bf20:	e099      	b.n	801c056 <HAL_UART_IRQHandler+0x50e>
 801bf22:	bf00      	nop
 801bf24:	0801c5d3 	.word	0x0801c5d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801bf30:	b29b      	uxth	r3, r3
 801bf32:	1ad3      	subs	r3, r2, r3
 801bf34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801bf3c:	b29b      	uxth	r3, r3
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	f000 808b 	beq.w	801c05a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801bf44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	f000 8086 	beq.w	801c05a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	681b      	ldr	r3, [r3, #0]
 801bf52:	330c      	adds	r3, #12
 801bf54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf58:	e853 3f00 	ldrex	r3, [r3]
 801bf5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801bf5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801bf64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	330c      	adds	r3, #12
 801bf6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801bf72:	647a      	str	r2, [r7, #68]	; 0x44
 801bf74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801bf78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bf7a:	e841 2300 	strex	r3, r2, [r1]
 801bf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801bf80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d1e3      	bne.n	801bf4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	3314      	adds	r3, #20
 801bf8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf90:	e853 3f00 	ldrex	r3, [r3]
 801bf94:	623b      	str	r3, [r7, #32]
   return(result);
 801bf96:	6a3b      	ldr	r3, [r7, #32]
 801bf98:	f023 0301 	bic.w	r3, r3, #1
 801bf9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	3314      	adds	r3, #20
 801bfa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801bfaa:	633a      	str	r2, [r7, #48]	; 0x30
 801bfac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bfae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bfb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bfb2:	e841 2300 	strex	r3, r2, [r1]
 801bfb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801bfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d1e3      	bne.n	801bf86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	2220      	movs	r2, #32
 801bfc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	2200      	movs	r2, #0
 801bfca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	330c      	adds	r3, #12
 801bfd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfd4:	693b      	ldr	r3, [r7, #16]
 801bfd6:	e853 3f00 	ldrex	r3, [r3]
 801bfda:	60fb      	str	r3, [r7, #12]
   return(result);
 801bfdc:	68fb      	ldr	r3, [r7, #12]
 801bfde:	f023 0310 	bic.w	r3, r3, #16
 801bfe2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	330c      	adds	r3, #12
 801bfec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801bff0:	61fa      	str	r2, [r7, #28]
 801bff2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bff4:	69b9      	ldr	r1, [r7, #24]
 801bff6:	69fa      	ldr	r2, [r7, #28]
 801bff8:	e841 2300 	strex	r3, r2, [r1]
 801bffc:	617b      	str	r3, [r7, #20]
   return(result);
 801bffe:	697b      	ldr	r3, [r7, #20]
 801c000:	2b00      	cmp	r3, #0
 801c002:	d1e3      	bne.n	801bfcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801c004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c008:	4619      	mov	r1, r3
 801c00a:	6878      	ldr	r0, [r7, #4]
 801c00c:	f7e4 ffae 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801c010:	e023      	b.n	801c05a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801c012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d009      	beq.n	801c032 <HAL_UART_IRQHandler+0x4ea>
 801c01e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c026:	2b00      	cmp	r3, #0
 801c028:	d003      	beq.n	801c032 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801c02a:	6878      	ldr	r0, [r7, #4]
 801c02c:	f000 fae5 	bl	801c5fa <UART_Transmit_IT>
    return;
 801c030:	e014      	b.n	801c05c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801c032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d00e      	beq.n	801c05c <HAL_UART_IRQHandler+0x514>
 801c03e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c046:	2b00      	cmp	r3, #0
 801c048:	d008      	beq.n	801c05c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801c04a:	6878      	ldr	r0, [r7, #4]
 801c04c:	f000 fb25 	bl	801c69a <UART_EndTransmit_IT>
    return;
 801c050:	e004      	b.n	801c05c <HAL_UART_IRQHandler+0x514>
    return;
 801c052:	bf00      	nop
 801c054:	e002      	b.n	801c05c <HAL_UART_IRQHandler+0x514>
      return;
 801c056:	bf00      	nop
 801c058:	e000      	b.n	801c05c <HAL_UART_IRQHandler+0x514>
      return;
 801c05a:	bf00      	nop
  }
}
 801c05c:	37e8      	adds	r7, #232	; 0xe8
 801c05e:	46bd      	mov	sp, r7
 801c060:	bd80      	pop	{r7, pc}
 801c062:	bf00      	nop

0801c064 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801c064:	b480      	push	{r7}
 801c066:	b083      	sub	sp, #12
 801c068:	af00      	add	r7, sp, #0
 801c06a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801c06c:	bf00      	nop
 801c06e:	370c      	adds	r7, #12
 801c070:	46bd      	mov	sp, r7
 801c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c076:	4770      	bx	lr

0801c078 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801c078:	b480      	push	{r7}
 801c07a:	b083      	sub	sp, #12
 801c07c:	af00      	add	r7, sp, #0
 801c07e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801c080:	bf00      	nop
 801c082:	370c      	adds	r7, #12
 801c084:	46bd      	mov	sp, r7
 801c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c08a:	4770      	bx	lr

0801c08c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801c08c:	b480      	push	{r7}
 801c08e:	b083      	sub	sp, #12
 801c090:	af00      	add	r7, sp, #0
 801c092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801c094:	bf00      	nop
 801c096:	370c      	adds	r7, #12
 801c098:	46bd      	mov	sp, r7
 801c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c09e:	4770      	bx	lr

0801c0a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801c0a0:	b480      	push	{r7}
 801c0a2:	b083      	sub	sp, #12
 801c0a4:	af00      	add	r7, sp, #0
 801c0a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801c0a8:	bf00      	nop
 801c0aa:	370c      	adds	r7, #12
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0b2:	4770      	bx	lr

0801c0b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801c0b4:	b580      	push	{r7, lr}
 801c0b6:	b09c      	sub	sp, #112	; 0x70
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d172      	bne.n	801c1b6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801c0d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c0d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	330c      	adds	r3, #12
 801c0dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c0de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c0e0:	e853 3f00 	ldrex	r3, [r3]
 801c0e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c0e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c0e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c0ec:	66bb      	str	r3, [r7, #104]	; 0x68
 801c0ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0f0:	681b      	ldr	r3, [r3, #0]
 801c0f2:	330c      	adds	r3, #12
 801c0f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c0f6:	65ba      	str	r2, [r7, #88]	; 0x58
 801c0f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c0fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c0fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c0fe:	e841 2300 	strex	r3, r2, [r1]
 801c102:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c106:	2b00      	cmp	r3, #0
 801c108:	d1e5      	bne.n	801c0d6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c10a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	3314      	adds	r3, #20
 801c110:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c114:	e853 3f00 	ldrex	r3, [r3]
 801c118:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c11c:	f023 0301 	bic.w	r3, r3, #1
 801c120:	667b      	str	r3, [r7, #100]	; 0x64
 801c122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	3314      	adds	r3, #20
 801c128:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c12a:	647a      	str	r2, [r7, #68]	; 0x44
 801c12c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c12e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c132:	e841 2300 	strex	r3, r2, [r1]
 801c136:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d1e5      	bne.n	801c10a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c13e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c140:	681b      	ldr	r3, [r3, #0]
 801c142:	3314      	adds	r3, #20
 801c144:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c148:	e853 3f00 	ldrex	r3, [r3]
 801c14c:	623b      	str	r3, [r7, #32]
   return(result);
 801c14e:	6a3b      	ldr	r3, [r7, #32]
 801c150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c154:	663b      	str	r3, [r7, #96]	; 0x60
 801c156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c158:	681b      	ldr	r3, [r3, #0]
 801c15a:	3314      	adds	r3, #20
 801c15c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c15e:	633a      	str	r2, [r7, #48]	; 0x30
 801c160:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c166:	e841 2300 	strex	r3, r2, [r1]
 801c16a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d1e5      	bne.n	801c13e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801c172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c174:	2220      	movs	r2, #32
 801c176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c17e:	2b01      	cmp	r3, #1
 801c180:	d119      	bne.n	801c1b6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	330c      	adds	r3, #12
 801c188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c18a:	693b      	ldr	r3, [r7, #16]
 801c18c:	e853 3f00 	ldrex	r3, [r3]
 801c190:	60fb      	str	r3, [r7, #12]
   return(result);
 801c192:	68fb      	ldr	r3, [r7, #12]
 801c194:	f023 0310 	bic.w	r3, r3, #16
 801c198:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c19a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	330c      	adds	r3, #12
 801c1a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c1a2:	61fa      	str	r2, [r7, #28]
 801c1a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1a6:	69b9      	ldr	r1, [r7, #24]
 801c1a8:	69fa      	ldr	r2, [r7, #28]
 801c1aa:	e841 2300 	strex	r3, r2, [r1]
 801c1ae:	617b      	str	r3, [r7, #20]
   return(result);
 801c1b0:	697b      	ldr	r3, [r7, #20]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d1e5      	bne.n	801c182 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c1b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1ba:	2b01      	cmp	r3, #1
 801c1bc:	d106      	bne.n	801c1cc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c1be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c1c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c1c2:	4619      	mov	r1, r3
 801c1c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c1c6:	f7e4 fed1 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c1ca:	e002      	b.n	801c1d2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801c1cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c1ce:	f7ff ff53 	bl	801c078 <HAL_UART_RxCpltCallback>
}
 801c1d2:	bf00      	nop
 801c1d4:	3770      	adds	r7, #112	; 0x70
 801c1d6:	46bd      	mov	sp, r7
 801c1d8:	bd80      	pop	{r7, pc}

0801c1da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c1da:	b580      	push	{r7, lr}
 801c1dc:	b084      	sub	sp, #16
 801c1de:	af00      	add	r7, sp, #0
 801c1e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1e6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c1e8:	68fb      	ldr	r3, [r7, #12]
 801c1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1ec:	2b01      	cmp	r3, #1
 801c1ee:	d108      	bne.n	801c202 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801c1f0:	68fb      	ldr	r3, [r7, #12]
 801c1f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c1f4:	085b      	lsrs	r3, r3, #1
 801c1f6:	b29b      	uxth	r3, r3
 801c1f8:	4619      	mov	r1, r3
 801c1fa:	68f8      	ldr	r0, [r7, #12]
 801c1fc:	f7e4 feb6 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c200:	e002      	b.n	801c208 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801c202:	68f8      	ldr	r0, [r7, #12]
 801c204:	f7ff ff42 	bl	801c08c <HAL_UART_RxHalfCpltCallback>
}
 801c208:	bf00      	nop
 801c20a:	3710      	adds	r7, #16
 801c20c:	46bd      	mov	sp, r7
 801c20e:	bd80      	pop	{r7, pc}

0801c210 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c210:	b580      	push	{r7, lr}
 801c212:	b084      	sub	sp, #16
 801c214:	af00      	add	r7, sp, #0
 801c216:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801c218:	2300      	movs	r3, #0
 801c21a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c220:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801c222:	68bb      	ldr	r3, [r7, #8]
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	695b      	ldr	r3, [r3, #20]
 801c228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c22c:	2b80      	cmp	r3, #128	; 0x80
 801c22e:	bf0c      	ite	eq
 801c230:	2301      	moveq	r3, #1
 801c232:	2300      	movne	r3, #0
 801c234:	b2db      	uxtb	r3, r3
 801c236:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801c238:	68bb      	ldr	r3, [r7, #8]
 801c23a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c23e:	b2db      	uxtb	r3, r3
 801c240:	2b21      	cmp	r3, #33	; 0x21
 801c242:	d108      	bne.n	801c256 <UART_DMAError+0x46>
 801c244:	68fb      	ldr	r3, [r7, #12]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d005      	beq.n	801c256 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801c24a:	68bb      	ldr	r3, [r7, #8]
 801c24c:	2200      	movs	r2, #0
 801c24e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801c250:	68b8      	ldr	r0, [r7, #8]
 801c252:	f000 f933 	bl	801c4bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801c256:	68bb      	ldr	r3, [r7, #8]
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	695b      	ldr	r3, [r3, #20]
 801c25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c260:	2b40      	cmp	r3, #64	; 0x40
 801c262:	bf0c      	ite	eq
 801c264:	2301      	moveq	r3, #1
 801c266:	2300      	movne	r3, #0
 801c268:	b2db      	uxtb	r3, r3
 801c26a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801c26c:	68bb      	ldr	r3, [r7, #8]
 801c26e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c272:	b2db      	uxtb	r3, r3
 801c274:	2b22      	cmp	r3, #34	; 0x22
 801c276:	d108      	bne.n	801c28a <UART_DMAError+0x7a>
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d005      	beq.n	801c28a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801c27e:	68bb      	ldr	r3, [r7, #8]
 801c280:	2200      	movs	r2, #0
 801c282:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801c284:	68b8      	ldr	r0, [r7, #8]
 801c286:	f000 f941 	bl	801c50c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c28a:	68bb      	ldr	r3, [r7, #8]
 801c28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c28e:	f043 0210 	orr.w	r2, r3, #16
 801c292:	68bb      	ldr	r3, [r7, #8]
 801c294:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c296:	68b8      	ldr	r0, [r7, #8]
 801c298:	f7ff ff02 	bl	801c0a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c29c:	bf00      	nop
 801c29e:	3710      	adds	r7, #16
 801c2a0:	46bd      	mov	sp, r7
 801c2a2:	bd80      	pop	{r7, pc}

0801c2a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801c2a4:	b580      	push	{r7, lr}
 801c2a6:	b090      	sub	sp, #64	; 0x40
 801c2a8:	af00      	add	r7, sp, #0
 801c2aa:	60f8      	str	r0, [r7, #12]
 801c2ac:	60b9      	str	r1, [r7, #8]
 801c2ae:	603b      	str	r3, [r7, #0]
 801c2b0:	4613      	mov	r3, r2
 801c2b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c2b4:	e050      	b.n	801c358 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c2b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2bc:	d04c      	beq.n	801c358 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801c2be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	d007      	beq.n	801c2d4 <UART_WaitOnFlagUntilTimeout+0x30>
 801c2c4:	f7f9 feb4 	bl	8016030 <HAL_GetTick>
 801c2c8:	4602      	mov	r2, r0
 801c2ca:	683b      	ldr	r3, [r7, #0]
 801c2cc:	1ad3      	subs	r3, r2, r3
 801c2ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c2d0:	429a      	cmp	r2, r3
 801c2d2:	d241      	bcs.n	801c358 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	330c      	adds	r3, #12
 801c2da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2de:	e853 3f00 	ldrex	r3, [r3]
 801c2e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	681b      	ldr	r3, [r3, #0]
 801c2f0:	330c      	adds	r3, #12
 801c2f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c2f4:	637a      	str	r2, [r7, #52]	; 0x34
 801c2f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c2fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c2fc:	e841 2300 	strex	r3, r2, [r1]
 801c300:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c304:	2b00      	cmp	r3, #0
 801c306:	d1e5      	bne.n	801c2d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c308:	68fb      	ldr	r3, [r7, #12]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	3314      	adds	r3, #20
 801c30e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c310:	697b      	ldr	r3, [r7, #20]
 801c312:	e853 3f00 	ldrex	r3, [r3]
 801c316:	613b      	str	r3, [r7, #16]
   return(result);
 801c318:	693b      	ldr	r3, [r7, #16]
 801c31a:	f023 0301 	bic.w	r3, r3, #1
 801c31e:	63bb      	str	r3, [r7, #56]	; 0x38
 801c320:	68fb      	ldr	r3, [r7, #12]
 801c322:	681b      	ldr	r3, [r3, #0]
 801c324:	3314      	adds	r3, #20
 801c326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c328:	623a      	str	r2, [r7, #32]
 801c32a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c32c:	69f9      	ldr	r1, [r7, #28]
 801c32e:	6a3a      	ldr	r2, [r7, #32]
 801c330:	e841 2300 	strex	r3, r2, [r1]
 801c334:	61bb      	str	r3, [r7, #24]
   return(result);
 801c336:	69bb      	ldr	r3, [r7, #24]
 801c338:	2b00      	cmp	r3, #0
 801c33a:	d1e5      	bne.n	801c308 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801c33c:	68fb      	ldr	r3, [r7, #12]
 801c33e:	2220      	movs	r2, #32
 801c340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801c344:	68fb      	ldr	r3, [r7, #12]
 801c346:	2220      	movs	r2, #32
 801c348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801c34c:	68fb      	ldr	r3, [r7, #12]
 801c34e:	2200      	movs	r2, #0
 801c350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801c354:	2303      	movs	r3, #3
 801c356:	e00f      	b.n	801c378 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c358:	68fb      	ldr	r3, [r7, #12]
 801c35a:	681b      	ldr	r3, [r3, #0]
 801c35c:	681a      	ldr	r2, [r3, #0]
 801c35e:	68bb      	ldr	r3, [r7, #8]
 801c360:	4013      	ands	r3, r2
 801c362:	68ba      	ldr	r2, [r7, #8]
 801c364:	429a      	cmp	r2, r3
 801c366:	bf0c      	ite	eq
 801c368:	2301      	moveq	r3, #1
 801c36a:	2300      	movne	r3, #0
 801c36c:	b2db      	uxtb	r3, r3
 801c36e:	461a      	mov	r2, r3
 801c370:	79fb      	ldrb	r3, [r7, #7]
 801c372:	429a      	cmp	r2, r3
 801c374:	d09f      	beq.n	801c2b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c376:	2300      	movs	r3, #0
}
 801c378:	4618      	mov	r0, r3
 801c37a:	3740      	adds	r7, #64	; 0x40
 801c37c:	46bd      	mov	sp, r7
 801c37e:	bd80      	pop	{r7, pc}

0801c380 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c380:	b580      	push	{r7, lr}
 801c382:	b098      	sub	sp, #96	; 0x60
 801c384:	af00      	add	r7, sp, #0
 801c386:	60f8      	str	r0, [r7, #12]
 801c388:	60b9      	str	r1, [r7, #8]
 801c38a:	4613      	mov	r3, r2
 801c38c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801c38e:	68ba      	ldr	r2, [r7, #8]
 801c390:	68fb      	ldr	r3, [r7, #12]
 801c392:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	88fa      	ldrh	r2, [r7, #6]
 801c398:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c39a:	68fb      	ldr	r3, [r7, #12]
 801c39c:	2200      	movs	r2, #0
 801c39e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	2222      	movs	r2, #34	; 0x22
 801c3a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801c3a8:	68fb      	ldr	r3, [r7, #12]
 801c3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3ac:	4a40      	ldr	r2, [pc, #256]	; (801c4b0 <UART_Start_Receive_DMA+0x130>)
 801c3ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3b4:	4a3f      	ldr	r2, [pc, #252]	; (801c4b4 <UART_Start_Receive_DMA+0x134>)
 801c3b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801c3b8:	68fb      	ldr	r3, [r7, #12]
 801c3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3bc:	4a3e      	ldr	r2, [pc, #248]	; (801c4b8 <UART_Start_Receive_DMA+0x138>)
 801c3be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801c3c0:	68fb      	ldr	r3, [r7, #12]
 801c3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3c4:	2200      	movs	r2, #0
 801c3c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801c3c8:	f107 0308 	add.w	r3, r7, #8
 801c3cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c3d2:	68fb      	ldr	r3, [r7, #12]
 801c3d4:	681b      	ldr	r3, [r3, #0]
 801c3d6:	3304      	adds	r3, #4
 801c3d8:	4619      	mov	r1, r3
 801c3da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c3dc:	681a      	ldr	r2, [r3, #0]
 801c3de:	88fb      	ldrh	r3, [r7, #6]
 801c3e0:	f7fa f816 	bl	8016410 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	613b      	str	r3, [r7, #16]
 801c3e8:	68fb      	ldr	r3, [r7, #12]
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	681b      	ldr	r3, [r3, #0]
 801c3ee:	613b      	str	r3, [r7, #16]
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	685b      	ldr	r3, [r3, #4]
 801c3f6:	613b      	str	r3, [r7, #16]
 801c3f8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801c3fa:	68fb      	ldr	r3, [r7, #12]
 801c3fc:	2200      	movs	r2, #0
 801c3fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801c402:	68fb      	ldr	r3, [r7, #12]
 801c404:	691b      	ldr	r3, [r3, #16]
 801c406:	2b00      	cmp	r3, #0
 801c408:	d019      	beq.n	801c43e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c40a:	68fb      	ldr	r3, [r7, #12]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	330c      	adds	r3, #12
 801c410:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c414:	e853 3f00 	ldrex	r3, [r3]
 801c418:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c41c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c420:	65bb      	str	r3, [r7, #88]	; 0x58
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	330c      	adds	r3, #12
 801c428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c42a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801c42c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c42e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801c430:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c432:	e841 2300 	strex	r3, r2, [r1]
 801c436:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801c438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d1e5      	bne.n	801c40a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c43e:	68fb      	ldr	r3, [r7, #12]
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	3314      	adds	r3, #20
 801c444:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c448:	e853 3f00 	ldrex	r3, [r3]
 801c44c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c450:	f043 0301 	orr.w	r3, r3, #1
 801c454:	657b      	str	r3, [r7, #84]	; 0x54
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	3314      	adds	r3, #20
 801c45c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c45e:	63ba      	str	r2, [r7, #56]	; 0x38
 801c460:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c462:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c466:	e841 2300 	strex	r3, r2, [r1]
 801c46a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d1e5      	bne.n	801c43e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	3314      	adds	r3, #20
 801c478:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c47a:	69bb      	ldr	r3, [r7, #24]
 801c47c:	e853 3f00 	ldrex	r3, [r3]
 801c480:	617b      	str	r3, [r7, #20]
   return(result);
 801c482:	697b      	ldr	r3, [r7, #20]
 801c484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c488:	653b      	str	r3, [r7, #80]	; 0x50
 801c48a:	68fb      	ldr	r3, [r7, #12]
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	3314      	adds	r3, #20
 801c490:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c492:	627a      	str	r2, [r7, #36]	; 0x24
 801c494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c496:	6a39      	ldr	r1, [r7, #32]
 801c498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c49a:	e841 2300 	strex	r3, r2, [r1]
 801c49e:	61fb      	str	r3, [r7, #28]
   return(result);
 801c4a0:	69fb      	ldr	r3, [r7, #28]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d1e5      	bne.n	801c472 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 801c4a6:	2300      	movs	r3, #0
}
 801c4a8:	4618      	mov	r0, r3
 801c4aa:	3760      	adds	r7, #96	; 0x60
 801c4ac:	46bd      	mov	sp, r7
 801c4ae:	bd80      	pop	{r7, pc}
 801c4b0:	0801c0b5 	.word	0x0801c0b5
 801c4b4:	0801c1db 	.word	0x0801c1db
 801c4b8:	0801c211 	.word	0x0801c211

0801c4bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c4bc:	b480      	push	{r7}
 801c4be:	b089      	sub	sp, #36	; 0x24
 801c4c0:	af00      	add	r7, sp, #0
 801c4c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	681b      	ldr	r3, [r3, #0]
 801c4c8:	330c      	adds	r3, #12
 801c4ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	e853 3f00 	ldrex	r3, [r3]
 801c4d2:	60bb      	str	r3, [r7, #8]
   return(result);
 801c4d4:	68bb      	ldr	r3, [r7, #8]
 801c4d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801c4da:	61fb      	str	r3, [r7, #28]
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	330c      	adds	r3, #12
 801c4e2:	69fa      	ldr	r2, [r7, #28]
 801c4e4:	61ba      	str	r2, [r7, #24]
 801c4e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4e8:	6979      	ldr	r1, [r7, #20]
 801c4ea:	69ba      	ldr	r2, [r7, #24]
 801c4ec:	e841 2300 	strex	r3, r2, [r1]
 801c4f0:	613b      	str	r3, [r7, #16]
   return(result);
 801c4f2:	693b      	ldr	r3, [r7, #16]
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	d1e5      	bne.n	801c4c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	2220      	movs	r2, #32
 801c4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801c500:	bf00      	nop
 801c502:	3724      	adds	r7, #36	; 0x24
 801c504:	46bd      	mov	sp, r7
 801c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c50a:	4770      	bx	lr

0801c50c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c50c:	b480      	push	{r7}
 801c50e:	b095      	sub	sp, #84	; 0x54
 801c510:	af00      	add	r7, sp, #0
 801c512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	681b      	ldr	r3, [r3, #0]
 801c518:	330c      	adds	r3, #12
 801c51a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c51e:	e853 3f00 	ldrex	r3, [r3]
 801c522:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c526:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c52a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	681b      	ldr	r3, [r3, #0]
 801c530:	330c      	adds	r3, #12
 801c532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c534:	643a      	str	r2, [r7, #64]	; 0x40
 801c536:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c538:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c53a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c53c:	e841 2300 	strex	r3, r2, [r1]
 801c540:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c544:	2b00      	cmp	r3, #0
 801c546:	d1e5      	bne.n	801c514 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	681b      	ldr	r3, [r3, #0]
 801c54c:	3314      	adds	r3, #20
 801c54e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c550:	6a3b      	ldr	r3, [r7, #32]
 801c552:	e853 3f00 	ldrex	r3, [r3]
 801c556:	61fb      	str	r3, [r7, #28]
   return(result);
 801c558:	69fb      	ldr	r3, [r7, #28]
 801c55a:	f023 0301 	bic.w	r3, r3, #1
 801c55e:	64bb      	str	r3, [r7, #72]	; 0x48
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	3314      	adds	r3, #20
 801c566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c568:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c56a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c56c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c56e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c570:	e841 2300 	strex	r3, r2, [r1]
 801c574:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d1e5      	bne.n	801c548 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c580:	2b01      	cmp	r3, #1
 801c582:	d119      	bne.n	801c5b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	681b      	ldr	r3, [r3, #0]
 801c588:	330c      	adds	r3, #12
 801c58a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c58c:	68fb      	ldr	r3, [r7, #12]
 801c58e:	e853 3f00 	ldrex	r3, [r3]
 801c592:	60bb      	str	r3, [r7, #8]
   return(result);
 801c594:	68bb      	ldr	r3, [r7, #8]
 801c596:	f023 0310 	bic.w	r3, r3, #16
 801c59a:	647b      	str	r3, [r7, #68]	; 0x44
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	330c      	adds	r3, #12
 801c5a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c5a4:	61ba      	str	r2, [r7, #24]
 801c5a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c5a8:	6979      	ldr	r1, [r7, #20]
 801c5aa:	69ba      	ldr	r2, [r7, #24]
 801c5ac:	e841 2300 	strex	r3, r2, [r1]
 801c5b0:	613b      	str	r3, [r7, #16]
   return(result);
 801c5b2:	693b      	ldr	r3, [r7, #16]
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	d1e5      	bne.n	801c584 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	2220      	movs	r2, #32
 801c5bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	2200      	movs	r2, #0
 801c5c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 801c5c6:	bf00      	nop
 801c5c8:	3754      	adds	r7, #84	; 0x54
 801c5ca:	46bd      	mov	sp, r7
 801c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5d0:	4770      	bx	lr

0801c5d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c5d2:	b580      	push	{r7, lr}
 801c5d4:	b084      	sub	sp, #16
 801c5d6:	af00      	add	r7, sp, #0
 801c5d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	2200      	movs	r2, #0
 801c5e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	2200      	movs	r2, #0
 801c5ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c5ec:	68f8      	ldr	r0, [r7, #12]
 801c5ee:	f7ff fd57 	bl	801c0a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c5f2:	bf00      	nop
 801c5f4:	3710      	adds	r7, #16
 801c5f6:	46bd      	mov	sp, r7
 801c5f8:	bd80      	pop	{r7, pc}

0801c5fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801c5fa:	b480      	push	{r7}
 801c5fc:	b085      	sub	sp, #20
 801c5fe:	af00      	add	r7, sp, #0
 801c600:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c608:	b2db      	uxtb	r3, r3
 801c60a:	2b21      	cmp	r3, #33	; 0x21
 801c60c:	d13e      	bne.n	801c68c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	689b      	ldr	r3, [r3, #8]
 801c612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c616:	d114      	bne.n	801c642 <UART_Transmit_IT+0x48>
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	691b      	ldr	r3, [r3, #16]
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d110      	bne.n	801c642 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	6a1b      	ldr	r3, [r3, #32]
 801c624:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801c626:	68fb      	ldr	r3, [r7, #12]
 801c628:	881b      	ldrh	r3, [r3, #0]
 801c62a:	461a      	mov	r2, r3
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	681b      	ldr	r3, [r3, #0]
 801c630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c634:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	6a1b      	ldr	r3, [r3, #32]
 801c63a:	1c9a      	adds	r2, r3, #2
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	621a      	str	r2, [r3, #32]
 801c640:	e008      	b.n	801c654 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	6a1b      	ldr	r3, [r3, #32]
 801c646:	1c59      	adds	r1, r3, #1
 801c648:	687a      	ldr	r2, [r7, #4]
 801c64a:	6211      	str	r1, [r2, #32]
 801c64c:	781a      	ldrb	r2, [r3, #0]
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c658:	b29b      	uxth	r3, r3
 801c65a:	3b01      	subs	r3, #1
 801c65c:	b29b      	uxth	r3, r3
 801c65e:	687a      	ldr	r2, [r7, #4]
 801c660:	4619      	mov	r1, r3
 801c662:	84d1      	strh	r1, [r2, #38]	; 0x26
 801c664:	2b00      	cmp	r3, #0
 801c666:	d10f      	bne.n	801c688 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	68da      	ldr	r2, [r3, #12]
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	681b      	ldr	r3, [r3, #0]
 801c672:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c676:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	68da      	ldr	r2, [r3, #12]
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c686:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801c688:	2300      	movs	r3, #0
 801c68a:	e000      	b.n	801c68e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801c68c:	2302      	movs	r3, #2
  }
}
 801c68e:	4618      	mov	r0, r3
 801c690:	3714      	adds	r7, #20
 801c692:	46bd      	mov	sp, r7
 801c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c698:	4770      	bx	lr

0801c69a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c69a:	b580      	push	{r7, lr}
 801c69c:	b082      	sub	sp, #8
 801c69e:	af00      	add	r7, sp, #0
 801c6a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	68da      	ldr	r2, [r3, #12]
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	681b      	ldr	r3, [r3, #0]
 801c6ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c6b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	2220      	movs	r2, #32
 801c6b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801c6ba:	6878      	ldr	r0, [r7, #4]
 801c6bc:	f7ff fcd2 	bl	801c064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801c6c0:	2300      	movs	r3, #0
}
 801c6c2:	4618      	mov	r0, r3
 801c6c4:	3708      	adds	r7, #8
 801c6c6:	46bd      	mov	sp, r7
 801c6c8:	bd80      	pop	{r7, pc}

0801c6ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801c6ca:	b580      	push	{r7, lr}
 801c6cc:	b08c      	sub	sp, #48	; 0x30
 801c6ce:	af00      	add	r7, sp, #0
 801c6d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c6d8:	b2db      	uxtb	r3, r3
 801c6da:	2b22      	cmp	r3, #34	; 0x22
 801c6dc:	f040 80ab 	bne.w	801c836 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	689b      	ldr	r3, [r3, #8]
 801c6e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c6e8:	d117      	bne.n	801c71a <UART_Receive_IT+0x50>
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	691b      	ldr	r3, [r3, #16]
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d113      	bne.n	801c71a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801c6f2:	2300      	movs	r3, #0
 801c6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	685b      	ldr	r3, [r3, #4]
 801c702:	b29b      	uxth	r3, r3
 801c704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c708:	b29a      	uxth	r2, r3
 801c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c70c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c712:	1c9a      	adds	r2, r3, #2
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	629a      	str	r2, [r3, #40]	; 0x28
 801c718:	e026      	b.n	801c768 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c71e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801c720:	2300      	movs	r3, #0
 801c722:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	689b      	ldr	r3, [r3, #8]
 801c728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c72c:	d007      	beq.n	801c73e <UART_Receive_IT+0x74>
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	689b      	ldr	r3, [r3, #8]
 801c732:	2b00      	cmp	r3, #0
 801c734:	d10a      	bne.n	801c74c <UART_Receive_IT+0x82>
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	691b      	ldr	r3, [r3, #16]
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	d106      	bne.n	801c74c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	685b      	ldr	r3, [r3, #4]
 801c744:	b2da      	uxtb	r2, r3
 801c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c748:	701a      	strb	r2, [r3, #0]
 801c74a:	e008      	b.n	801c75e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	681b      	ldr	r3, [r3, #0]
 801c750:	685b      	ldr	r3, [r3, #4]
 801c752:	b2db      	uxtb	r3, r3
 801c754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c758:	b2da      	uxtb	r2, r3
 801c75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c75c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c762:	1c5a      	adds	r2, r3, #1
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c76c:	b29b      	uxth	r3, r3
 801c76e:	3b01      	subs	r3, #1
 801c770:	b29b      	uxth	r3, r3
 801c772:	687a      	ldr	r2, [r7, #4]
 801c774:	4619      	mov	r1, r3
 801c776:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d15a      	bne.n	801c832 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	681b      	ldr	r3, [r3, #0]
 801c780:	68da      	ldr	r2, [r3, #12]
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	f022 0220 	bic.w	r2, r2, #32
 801c78a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	68da      	ldr	r2, [r3, #12]
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c79a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	695a      	ldr	r2, [r3, #20]
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	681b      	ldr	r3, [r3, #0]
 801c7a6:	f022 0201 	bic.w	r2, r2, #1
 801c7aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	2220      	movs	r2, #32
 801c7b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7b8:	2b01      	cmp	r3, #1
 801c7ba:	d135      	bne.n	801c828 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	2200      	movs	r2, #0
 801c7c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	330c      	adds	r3, #12
 801c7c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c7ca:	697b      	ldr	r3, [r7, #20]
 801c7cc:	e853 3f00 	ldrex	r3, [r3]
 801c7d0:	613b      	str	r3, [r7, #16]
   return(result);
 801c7d2:	693b      	ldr	r3, [r7, #16]
 801c7d4:	f023 0310 	bic.w	r3, r3, #16
 801c7d8:	627b      	str	r3, [r7, #36]	; 0x24
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	330c      	adds	r3, #12
 801c7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c7e2:	623a      	str	r2, [r7, #32]
 801c7e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c7e6:	69f9      	ldr	r1, [r7, #28]
 801c7e8:	6a3a      	ldr	r2, [r7, #32]
 801c7ea:	e841 2300 	strex	r3, r2, [r1]
 801c7ee:	61bb      	str	r3, [r7, #24]
   return(result);
 801c7f0:	69bb      	ldr	r3, [r7, #24]
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d1e5      	bne.n	801c7c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	681b      	ldr	r3, [r3, #0]
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	f003 0310 	and.w	r3, r3, #16
 801c800:	2b10      	cmp	r3, #16
 801c802:	d10a      	bne.n	801c81a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801c804:	2300      	movs	r3, #0
 801c806:	60fb      	str	r3, [r7, #12]
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	681b      	ldr	r3, [r3, #0]
 801c80c:	681b      	ldr	r3, [r3, #0]
 801c80e:	60fb      	str	r3, [r7, #12]
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	681b      	ldr	r3, [r3, #0]
 801c814:	685b      	ldr	r3, [r3, #4]
 801c816:	60fb      	str	r3, [r7, #12]
 801c818:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c81e:	4619      	mov	r1, r3
 801c820:	6878      	ldr	r0, [r7, #4]
 801c822:	f7e4 fba3 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
 801c826:	e002      	b.n	801c82e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801c828:	6878      	ldr	r0, [r7, #4]
 801c82a:	f7ff fc25 	bl	801c078 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801c82e:	2300      	movs	r3, #0
 801c830:	e002      	b.n	801c838 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801c832:	2300      	movs	r3, #0
 801c834:	e000      	b.n	801c838 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801c836:	2302      	movs	r3, #2
  }
}
 801c838:	4618      	mov	r0, r3
 801c83a:	3730      	adds	r7, #48	; 0x30
 801c83c:	46bd      	mov	sp, r7
 801c83e:	bd80      	pop	{r7, pc}

0801c840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801c840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c844:	b0c0      	sub	sp, #256	; 0x100
 801c846:	af00      	add	r7, sp, #0
 801c848:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801c84c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c850:	681b      	ldr	r3, [r3, #0]
 801c852:	691b      	ldr	r3, [r3, #16]
 801c854:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801c858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c85c:	68d9      	ldr	r1, [r3, #12]
 801c85e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c862:	681a      	ldr	r2, [r3, #0]
 801c864:	ea40 0301 	orr.w	r3, r0, r1
 801c868:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801c86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c86e:	689a      	ldr	r2, [r3, #8]
 801c870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c874:	691b      	ldr	r3, [r3, #16]
 801c876:	431a      	orrs	r2, r3
 801c878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c87c:	695b      	ldr	r3, [r3, #20]
 801c87e:	431a      	orrs	r2, r3
 801c880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c884:	69db      	ldr	r3, [r3, #28]
 801c886:	4313      	orrs	r3, r2
 801c888:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801c88c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c890:	681b      	ldr	r3, [r3, #0]
 801c892:	68db      	ldr	r3, [r3, #12]
 801c894:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801c898:	f021 010c 	bic.w	r1, r1, #12
 801c89c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8a0:	681a      	ldr	r2, [r3, #0]
 801c8a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801c8a6:	430b      	orrs	r3, r1
 801c8a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801c8aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	695b      	ldr	r3, [r3, #20]
 801c8b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801c8b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8ba:	6999      	ldr	r1, [r3, #24]
 801c8bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8c0:	681a      	ldr	r2, [r3, #0]
 801c8c2:	ea40 0301 	orr.w	r3, r0, r1
 801c8c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801c8c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8cc:	681a      	ldr	r2, [r3, #0]
 801c8ce:	4b8f      	ldr	r3, [pc, #572]	; (801cb0c <UART_SetConfig+0x2cc>)
 801c8d0:	429a      	cmp	r2, r3
 801c8d2:	d005      	beq.n	801c8e0 <UART_SetConfig+0xa0>
 801c8d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8d8:	681a      	ldr	r2, [r3, #0]
 801c8da:	4b8d      	ldr	r3, [pc, #564]	; (801cb10 <UART_SetConfig+0x2d0>)
 801c8dc:	429a      	cmp	r2, r3
 801c8de:	d104      	bne.n	801c8ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801c8e0:	f7fd fda8 	bl	801a434 <HAL_RCC_GetPCLK2Freq>
 801c8e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801c8e8:	e003      	b.n	801c8f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801c8ea:	f7fd fd8f 	bl	801a40c <HAL_RCC_GetPCLK1Freq>
 801c8ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c8f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c8f6:	69db      	ldr	r3, [r3, #28]
 801c8f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c8fc:	f040 810c 	bne.w	801cb18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801c900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c904:	2200      	movs	r2, #0
 801c906:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801c90a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801c90e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801c912:	4622      	mov	r2, r4
 801c914:	462b      	mov	r3, r5
 801c916:	1891      	adds	r1, r2, r2
 801c918:	65b9      	str	r1, [r7, #88]	; 0x58
 801c91a:	415b      	adcs	r3, r3
 801c91c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c91e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801c922:	4621      	mov	r1, r4
 801c924:	eb12 0801 	adds.w	r8, r2, r1
 801c928:	4629      	mov	r1, r5
 801c92a:	eb43 0901 	adc.w	r9, r3, r1
 801c92e:	f04f 0200 	mov.w	r2, #0
 801c932:	f04f 0300 	mov.w	r3, #0
 801c936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801c93a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801c93e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801c942:	4690      	mov	r8, r2
 801c944:	4699      	mov	r9, r3
 801c946:	4623      	mov	r3, r4
 801c948:	eb18 0303 	adds.w	r3, r8, r3
 801c94c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c950:	462b      	mov	r3, r5
 801c952:	eb49 0303 	adc.w	r3, r9, r3
 801c956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801c95a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c95e:	685b      	ldr	r3, [r3, #4]
 801c960:	2200      	movs	r2, #0
 801c962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801c966:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c96a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801c96e:	460b      	mov	r3, r1
 801c970:	18db      	adds	r3, r3, r3
 801c972:	653b      	str	r3, [r7, #80]	; 0x50
 801c974:	4613      	mov	r3, r2
 801c976:	eb42 0303 	adc.w	r3, r2, r3
 801c97a:	657b      	str	r3, [r7, #84]	; 0x54
 801c97c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801c980:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c984:	f7e4 f938 	bl	8000bf8 <__aeabi_uldivmod>
 801c988:	4602      	mov	r2, r0
 801c98a:	460b      	mov	r3, r1
 801c98c:	4b61      	ldr	r3, [pc, #388]	; (801cb14 <UART_SetConfig+0x2d4>)
 801c98e:	fba3 2302 	umull	r2, r3, r3, r2
 801c992:	095b      	lsrs	r3, r3, #5
 801c994:	011c      	lsls	r4, r3, #4
 801c996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c99a:	2200      	movs	r2, #0
 801c99c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c9a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801c9a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801c9a8:	4642      	mov	r2, r8
 801c9aa:	464b      	mov	r3, r9
 801c9ac:	1891      	adds	r1, r2, r2
 801c9ae:	64b9      	str	r1, [r7, #72]	; 0x48
 801c9b0:	415b      	adcs	r3, r3
 801c9b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c9b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801c9b8:	4641      	mov	r1, r8
 801c9ba:	eb12 0a01 	adds.w	sl, r2, r1
 801c9be:	4649      	mov	r1, r9
 801c9c0:	eb43 0b01 	adc.w	fp, r3, r1
 801c9c4:	f04f 0200 	mov.w	r2, #0
 801c9c8:	f04f 0300 	mov.w	r3, #0
 801c9cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801c9d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801c9d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801c9d8:	4692      	mov	sl, r2
 801c9da:	469b      	mov	fp, r3
 801c9dc:	4643      	mov	r3, r8
 801c9de:	eb1a 0303 	adds.w	r3, sl, r3
 801c9e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c9e6:	464b      	mov	r3, r9
 801c9e8:	eb4b 0303 	adc.w	r3, fp, r3
 801c9ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c9f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c9f4:	685b      	ldr	r3, [r3, #4]
 801c9f6:	2200      	movs	r2, #0
 801c9f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c9fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801ca00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801ca04:	460b      	mov	r3, r1
 801ca06:	18db      	adds	r3, r3, r3
 801ca08:	643b      	str	r3, [r7, #64]	; 0x40
 801ca0a:	4613      	mov	r3, r2
 801ca0c:	eb42 0303 	adc.w	r3, r2, r3
 801ca10:	647b      	str	r3, [r7, #68]	; 0x44
 801ca12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801ca16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801ca1a:	f7e4 f8ed 	bl	8000bf8 <__aeabi_uldivmod>
 801ca1e:	4602      	mov	r2, r0
 801ca20:	460b      	mov	r3, r1
 801ca22:	4611      	mov	r1, r2
 801ca24:	4b3b      	ldr	r3, [pc, #236]	; (801cb14 <UART_SetConfig+0x2d4>)
 801ca26:	fba3 2301 	umull	r2, r3, r3, r1
 801ca2a:	095b      	lsrs	r3, r3, #5
 801ca2c:	2264      	movs	r2, #100	; 0x64
 801ca2e:	fb02 f303 	mul.w	r3, r2, r3
 801ca32:	1acb      	subs	r3, r1, r3
 801ca34:	00db      	lsls	r3, r3, #3
 801ca36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801ca3a:	4b36      	ldr	r3, [pc, #216]	; (801cb14 <UART_SetConfig+0x2d4>)
 801ca3c:	fba3 2302 	umull	r2, r3, r3, r2
 801ca40:	095b      	lsrs	r3, r3, #5
 801ca42:	005b      	lsls	r3, r3, #1
 801ca44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801ca48:	441c      	add	r4, r3
 801ca4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ca4e:	2200      	movs	r2, #0
 801ca50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801ca54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801ca58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801ca5c:	4642      	mov	r2, r8
 801ca5e:	464b      	mov	r3, r9
 801ca60:	1891      	adds	r1, r2, r2
 801ca62:	63b9      	str	r1, [r7, #56]	; 0x38
 801ca64:	415b      	adcs	r3, r3
 801ca66:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ca68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801ca6c:	4641      	mov	r1, r8
 801ca6e:	1851      	adds	r1, r2, r1
 801ca70:	6339      	str	r1, [r7, #48]	; 0x30
 801ca72:	4649      	mov	r1, r9
 801ca74:	414b      	adcs	r3, r1
 801ca76:	637b      	str	r3, [r7, #52]	; 0x34
 801ca78:	f04f 0200 	mov.w	r2, #0
 801ca7c:	f04f 0300 	mov.w	r3, #0
 801ca80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801ca84:	4659      	mov	r1, fp
 801ca86:	00cb      	lsls	r3, r1, #3
 801ca88:	4651      	mov	r1, sl
 801ca8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801ca8e:	4651      	mov	r1, sl
 801ca90:	00ca      	lsls	r2, r1, #3
 801ca92:	4610      	mov	r0, r2
 801ca94:	4619      	mov	r1, r3
 801ca96:	4603      	mov	r3, r0
 801ca98:	4642      	mov	r2, r8
 801ca9a:	189b      	adds	r3, r3, r2
 801ca9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801caa0:	464b      	mov	r3, r9
 801caa2:	460a      	mov	r2, r1
 801caa4:	eb42 0303 	adc.w	r3, r2, r3
 801caa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801caac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cab0:	685b      	ldr	r3, [r3, #4]
 801cab2:	2200      	movs	r2, #0
 801cab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801cab8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801cabc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801cac0:	460b      	mov	r3, r1
 801cac2:	18db      	adds	r3, r3, r3
 801cac4:	62bb      	str	r3, [r7, #40]	; 0x28
 801cac6:	4613      	mov	r3, r2
 801cac8:	eb42 0303 	adc.w	r3, r2, r3
 801cacc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cace:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801cad2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801cad6:	f7e4 f88f 	bl	8000bf8 <__aeabi_uldivmod>
 801cada:	4602      	mov	r2, r0
 801cadc:	460b      	mov	r3, r1
 801cade:	4b0d      	ldr	r3, [pc, #52]	; (801cb14 <UART_SetConfig+0x2d4>)
 801cae0:	fba3 1302 	umull	r1, r3, r3, r2
 801cae4:	095b      	lsrs	r3, r3, #5
 801cae6:	2164      	movs	r1, #100	; 0x64
 801cae8:	fb01 f303 	mul.w	r3, r1, r3
 801caec:	1ad3      	subs	r3, r2, r3
 801caee:	00db      	lsls	r3, r3, #3
 801caf0:	3332      	adds	r3, #50	; 0x32
 801caf2:	4a08      	ldr	r2, [pc, #32]	; (801cb14 <UART_SetConfig+0x2d4>)
 801caf4:	fba2 2303 	umull	r2, r3, r2, r3
 801caf8:	095b      	lsrs	r3, r3, #5
 801cafa:	f003 0207 	and.w	r2, r3, #7
 801cafe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb02:	681b      	ldr	r3, [r3, #0]
 801cb04:	4422      	add	r2, r4
 801cb06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801cb08:	e105      	b.n	801cd16 <UART_SetConfig+0x4d6>
 801cb0a:	bf00      	nop
 801cb0c:	40011000 	.word	0x40011000
 801cb10:	40011400 	.word	0x40011400
 801cb14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801cb18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cb1c:	2200      	movs	r2, #0
 801cb1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801cb22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801cb26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801cb2a:	4642      	mov	r2, r8
 801cb2c:	464b      	mov	r3, r9
 801cb2e:	1891      	adds	r1, r2, r2
 801cb30:	6239      	str	r1, [r7, #32]
 801cb32:	415b      	adcs	r3, r3
 801cb34:	627b      	str	r3, [r7, #36]	; 0x24
 801cb36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801cb3a:	4641      	mov	r1, r8
 801cb3c:	1854      	adds	r4, r2, r1
 801cb3e:	4649      	mov	r1, r9
 801cb40:	eb43 0501 	adc.w	r5, r3, r1
 801cb44:	f04f 0200 	mov.w	r2, #0
 801cb48:	f04f 0300 	mov.w	r3, #0
 801cb4c:	00eb      	lsls	r3, r5, #3
 801cb4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801cb52:	00e2      	lsls	r2, r4, #3
 801cb54:	4614      	mov	r4, r2
 801cb56:	461d      	mov	r5, r3
 801cb58:	4643      	mov	r3, r8
 801cb5a:	18e3      	adds	r3, r4, r3
 801cb5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801cb60:	464b      	mov	r3, r9
 801cb62:	eb45 0303 	adc.w	r3, r5, r3
 801cb66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801cb6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb6e:	685b      	ldr	r3, [r3, #4]
 801cb70:	2200      	movs	r2, #0
 801cb72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cb76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801cb7a:	f04f 0200 	mov.w	r2, #0
 801cb7e:	f04f 0300 	mov.w	r3, #0
 801cb82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801cb86:	4629      	mov	r1, r5
 801cb88:	008b      	lsls	r3, r1, #2
 801cb8a:	4621      	mov	r1, r4
 801cb8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cb90:	4621      	mov	r1, r4
 801cb92:	008a      	lsls	r2, r1, #2
 801cb94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801cb98:	f7e4 f82e 	bl	8000bf8 <__aeabi_uldivmod>
 801cb9c:	4602      	mov	r2, r0
 801cb9e:	460b      	mov	r3, r1
 801cba0:	4b60      	ldr	r3, [pc, #384]	; (801cd24 <UART_SetConfig+0x4e4>)
 801cba2:	fba3 2302 	umull	r2, r3, r3, r2
 801cba6:	095b      	lsrs	r3, r3, #5
 801cba8:	011c      	lsls	r4, r3, #4
 801cbaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cbae:	2200      	movs	r2, #0
 801cbb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801cbb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801cbb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801cbbc:	4642      	mov	r2, r8
 801cbbe:	464b      	mov	r3, r9
 801cbc0:	1891      	adds	r1, r2, r2
 801cbc2:	61b9      	str	r1, [r7, #24]
 801cbc4:	415b      	adcs	r3, r3
 801cbc6:	61fb      	str	r3, [r7, #28]
 801cbc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801cbcc:	4641      	mov	r1, r8
 801cbce:	1851      	adds	r1, r2, r1
 801cbd0:	6139      	str	r1, [r7, #16]
 801cbd2:	4649      	mov	r1, r9
 801cbd4:	414b      	adcs	r3, r1
 801cbd6:	617b      	str	r3, [r7, #20]
 801cbd8:	f04f 0200 	mov.w	r2, #0
 801cbdc:	f04f 0300 	mov.w	r3, #0
 801cbe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801cbe4:	4659      	mov	r1, fp
 801cbe6:	00cb      	lsls	r3, r1, #3
 801cbe8:	4651      	mov	r1, sl
 801cbea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cbee:	4651      	mov	r1, sl
 801cbf0:	00ca      	lsls	r2, r1, #3
 801cbf2:	4610      	mov	r0, r2
 801cbf4:	4619      	mov	r1, r3
 801cbf6:	4603      	mov	r3, r0
 801cbf8:	4642      	mov	r2, r8
 801cbfa:	189b      	adds	r3, r3, r2
 801cbfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801cc00:	464b      	mov	r3, r9
 801cc02:	460a      	mov	r2, r1
 801cc04:	eb42 0303 	adc.w	r3, r2, r3
 801cc08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cc0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cc10:	685b      	ldr	r3, [r3, #4]
 801cc12:	2200      	movs	r2, #0
 801cc14:	67bb      	str	r3, [r7, #120]	; 0x78
 801cc16:	67fa      	str	r2, [r7, #124]	; 0x7c
 801cc18:	f04f 0200 	mov.w	r2, #0
 801cc1c:	f04f 0300 	mov.w	r3, #0
 801cc20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801cc24:	4649      	mov	r1, r9
 801cc26:	008b      	lsls	r3, r1, #2
 801cc28:	4641      	mov	r1, r8
 801cc2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cc2e:	4641      	mov	r1, r8
 801cc30:	008a      	lsls	r2, r1, #2
 801cc32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801cc36:	f7e3 ffdf 	bl	8000bf8 <__aeabi_uldivmod>
 801cc3a:	4602      	mov	r2, r0
 801cc3c:	460b      	mov	r3, r1
 801cc3e:	4b39      	ldr	r3, [pc, #228]	; (801cd24 <UART_SetConfig+0x4e4>)
 801cc40:	fba3 1302 	umull	r1, r3, r3, r2
 801cc44:	095b      	lsrs	r3, r3, #5
 801cc46:	2164      	movs	r1, #100	; 0x64
 801cc48:	fb01 f303 	mul.w	r3, r1, r3
 801cc4c:	1ad3      	subs	r3, r2, r3
 801cc4e:	011b      	lsls	r3, r3, #4
 801cc50:	3332      	adds	r3, #50	; 0x32
 801cc52:	4a34      	ldr	r2, [pc, #208]	; (801cd24 <UART_SetConfig+0x4e4>)
 801cc54:	fba2 2303 	umull	r2, r3, r2, r3
 801cc58:	095b      	lsrs	r3, r3, #5
 801cc5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cc5e:	441c      	add	r4, r3
 801cc60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cc64:	2200      	movs	r2, #0
 801cc66:	673b      	str	r3, [r7, #112]	; 0x70
 801cc68:	677a      	str	r2, [r7, #116]	; 0x74
 801cc6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801cc6e:	4642      	mov	r2, r8
 801cc70:	464b      	mov	r3, r9
 801cc72:	1891      	adds	r1, r2, r2
 801cc74:	60b9      	str	r1, [r7, #8]
 801cc76:	415b      	adcs	r3, r3
 801cc78:	60fb      	str	r3, [r7, #12]
 801cc7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cc7e:	4641      	mov	r1, r8
 801cc80:	1851      	adds	r1, r2, r1
 801cc82:	6039      	str	r1, [r7, #0]
 801cc84:	4649      	mov	r1, r9
 801cc86:	414b      	adcs	r3, r1
 801cc88:	607b      	str	r3, [r7, #4]
 801cc8a:	f04f 0200 	mov.w	r2, #0
 801cc8e:	f04f 0300 	mov.w	r3, #0
 801cc92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801cc96:	4659      	mov	r1, fp
 801cc98:	00cb      	lsls	r3, r1, #3
 801cc9a:	4651      	mov	r1, sl
 801cc9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cca0:	4651      	mov	r1, sl
 801cca2:	00ca      	lsls	r2, r1, #3
 801cca4:	4610      	mov	r0, r2
 801cca6:	4619      	mov	r1, r3
 801cca8:	4603      	mov	r3, r0
 801ccaa:	4642      	mov	r2, r8
 801ccac:	189b      	adds	r3, r3, r2
 801ccae:	66bb      	str	r3, [r7, #104]	; 0x68
 801ccb0:	464b      	mov	r3, r9
 801ccb2:	460a      	mov	r2, r1
 801ccb4:	eb42 0303 	adc.w	r3, r2, r3
 801ccb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 801ccba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ccbe:	685b      	ldr	r3, [r3, #4]
 801ccc0:	2200      	movs	r2, #0
 801ccc2:	663b      	str	r3, [r7, #96]	; 0x60
 801ccc4:	667a      	str	r2, [r7, #100]	; 0x64
 801ccc6:	f04f 0200 	mov.w	r2, #0
 801ccca:	f04f 0300 	mov.w	r3, #0
 801ccce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801ccd2:	4649      	mov	r1, r9
 801ccd4:	008b      	lsls	r3, r1, #2
 801ccd6:	4641      	mov	r1, r8
 801ccd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801ccdc:	4641      	mov	r1, r8
 801ccde:	008a      	lsls	r2, r1, #2
 801cce0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801cce4:	f7e3 ff88 	bl	8000bf8 <__aeabi_uldivmod>
 801cce8:	4602      	mov	r2, r0
 801ccea:	460b      	mov	r3, r1
 801ccec:	4b0d      	ldr	r3, [pc, #52]	; (801cd24 <UART_SetConfig+0x4e4>)
 801ccee:	fba3 1302 	umull	r1, r3, r3, r2
 801ccf2:	095b      	lsrs	r3, r3, #5
 801ccf4:	2164      	movs	r1, #100	; 0x64
 801ccf6:	fb01 f303 	mul.w	r3, r1, r3
 801ccfa:	1ad3      	subs	r3, r2, r3
 801ccfc:	011b      	lsls	r3, r3, #4
 801ccfe:	3332      	adds	r3, #50	; 0x32
 801cd00:	4a08      	ldr	r2, [pc, #32]	; (801cd24 <UART_SetConfig+0x4e4>)
 801cd02:	fba2 2303 	umull	r2, r3, r2, r3
 801cd06:	095b      	lsrs	r3, r3, #5
 801cd08:	f003 020f 	and.w	r2, r3, #15
 801cd0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd10:	681b      	ldr	r3, [r3, #0]
 801cd12:	4422      	add	r2, r4
 801cd14:	609a      	str	r2, [r3, #8]
}
 801cd16:	bf00      	nop
 801cd18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801cd1c:	46bd      	mov	sp, r7
 801cd1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801cd22:	bf00      	nop
 801cd24:	51eb851f 	.word	0x51eb851f

0801cd28 <pow>:
 801cd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd2a:	ed2d 8b02 	vpush	{d8}
 801cd2e:	eeb0 8a40 	vmov.f32	s16, s0
 801cd32:	eef0 8a60 	vmov.f32	s17, s1
 801cd36:	ec55 4b11 	vmov	r4, r5, d1
 801cd3a:	f000 f885 	bl	801ce48 <__ieee754_pow>
 801cd3e:	4622      	mov	r2, r4
 801cd40:	462b      	mov	r3, r5
 801cd42:	4620      	mov	r0, r4
 801cd44:	4629      	mov	r1, r5
 801cd46:	ec57 6b10 	vmov	r6, r7, d0
 801cd4a:	f7e3 feef 	bl	8000b2c <__aeabi_dcmpun>
 801cd4e:	2800      	cmp	r0, #0
 801cd50:	d13b      	bne.n	801cdca <pow+0xa2>
 801cd52:	ec51 0b18 	vmov	r0, r1, d8
 801cd56:	2200      	movs	r2, #0
 801cd58:	2300      	movs	r3, #0
 801cd5a:	f7e3 feb5 	bl	8000ac8 <__aeabi_dcmpeq>
 801cd5e:	b1b8      	cbz	r0, 801cd90 <pow+0x68>
 801cd60:	2200      	movs	r2, #0
 801cd62:	2300      	movs	r3, #0
 801cd64:	4620      	mov	r0, r4
 801cd66:	4629      	mov	r1, r5
 801cd68:	f7e3 feae 	bl	8000ac8 <__aeabi_dcmpeq>
 801cd6c:	2800      	cmp	r0, #0
 801cd6e:	d146      	bne.n	801cdfe <pow+0xd6>
 801cd70:	ec45 4b10 	vmov	d0, r4, r5
 801cd74:	f000 fe84 	bl	801da80 <finite>
 801cd78:	b338      	cbz	r0, 801cdca <pow+0xa2>
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	2300      	movs	r3, #0
 801cd7e:	4620      	mov	r0, r4
 801cd80:	4629      	mov	r1, r5
 801cd82:	f7e3 feab 	bl	8000adc <__aeabi_dcmplt>
 801cd86:	b300      	cbz	r0, 801cdca <pow+0xa2>
 801cd88:	f000 ff2a 	bl	801dbe0 <__errno>
 801cd8c:	2322      	movs	r3, #34	; 0x22
 801cd8e:	e01b      	b.n	801cdc8 <pow+0xa0>
 801cd90:	ec47 6b10 	vmov	d0, r6, r7
 801cd94:	f000 fe74 	bl	801da80 <finite>
 801cd98:	b9e0      	cbnz	r0, 801cdd4 <pow+0xac>
 801cd9a:	eeb0 0a48 	vmov.f32	s0, s16
 801cd9e:	eef0 0a68 	vmov.f32	s1, s17
 801cda2:	f000 fe6d 	bl	801da80 <finite>
 801cda6:	b1a8      	cbz	r0, 801cdd4 <pow+0xac>
 801cda8:	ec45 4b10 	vmov	d0, r4, r5
 801cdac:	f000 fe68 	bl	801da80 <finite>
 801cdb0:	b180      	cbz	r0, 801cdd4 <pow+0xac>
 801cdb2:	4632      	mov	r2, r6
 801cdb4:	463b      	mov	r3, r7
 801cdb6:	4630      	mov	r0, r6
 801cdb8:	4639      	mov	r1, r7
 801cdba:	f7e3 feb7 	bl	8000b2c <__aeabi_dcmpun>
 801cdbe:	2800      	cmp	r0, #0
 801cdc0:	d0e2      	beq.n	801cd88 <pow+0x60>
 801cdc2:	f000 ff0d 	bl	801dbe0 <__errno>
 801cdc6:	2321      	movs	r3, #33	; 0x21
 801cdc8:	6003      	str	r3, [r0, #0]
 801cdca:	ecbd 8b02 	vpop	{d8}
 801cdce:	ec47 6b10 	vmov	d0, r6, r7
 801cdd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cdd4:	2200      	movs	r2, #0
 801cdd6:	2300      	movs	r3, #0
 801cdd8:	4630      	mov	r0, r6
 801cdda:	4639      	mov	r1, r7
 801cddc:	f7e3 fe74 	bl	8000ac8 <__aeabi_dcmpeq>
 801cde0:	2800      	cmp	r0, #0
 801cde2:	d0f2      	beq.n	801cdca <pow+0xa2>
 801cde4:	eeb0 0a48 	vmov.f32	s0, s16
 801cde8:	eef0 0a68 	vmov.f32	s1, s17
 801cdec:	f000 fe48 	bl	801da80 <finite>
 801cdf0:	2800      	cmp	r0, #0
 801cdf2:	d0ea      	beq.n	801cdca <pow+0xa2>
 801cdf4:	ec45 4b10 	vmov	d0, r4, r5
 801cdf8:	f000 fe42 	bl	801da80 <finite>
 801cdfc:	e7c3      	b.n	801cd86 <pow+0x5e>
 801cdfe:	4f01      	ldr	r7, [pc, #4]	; (801ce04 <pow+0xdc>)
 801ce00:	2600      	movs	r6, #0
 801ce02:	e7e2      	b.n	801cdca <pow+0xa2>
 801ce04:	3ff00000 	.word	0x3ff00000

0801ce08 <sqrtf>:
 801ce08:	b508      	push	{r3, lr}
 801ce0a:	ed2d 8b02 	vpush	{d8}
 801ce0e:	eeb0 8a40 	vmov.f32	s16, s0
 801ce12:	f000 fdf9 	bl	801da08 <__ieee754_sqrtf>
 801ce16:	eeb4 8a48 	vcmp.f32	s16, s16
 801ce1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce1e:	d60c      	bvs.n	801ce3a <sqrtf+0x32>
 801ce20:	eddf 8a07 	vldr	s17, [pc, #28]	; 801ce40 <sqrtf+0x38>
 801ce24:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801ce28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce2c:	d505      	bpl.n	801ce3a <sqrtf+0x32>
 801ce2e:	f000 fed7 	bl	801dbe0 <__errno>
 801ce32:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801ce36:	2321      	movs	r3, #33	; 0x21
 801ce38:	6003      	str	r3, [r0, #0]
 801ce3a:	ecbd 8b02 	vpop	{d8}
 801ce3e:	bd08      	pop	{r3, pc}
	...

0801ce48 <__ieee754_pow>:
 801ce48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce4c:	ed2d 8b06 	vpush	{d8-d10}
 801ce50:	b089      	sub	sp, #36	; 0x24
 801ce52:	ed8d 1b00 	vstr	d1, [sp]
 801ce56:	e9dd 2900 	ldrd	r2, r9, [sp]
 801ce5a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801ce5e:	ea58 0102 	orrs.w	r1, r8, r2
 801ce62:	ec57 6b10 	vmov	r6, r7, d0
 801ce66:	d115      	bne.n	801ce94 <__ieee754_pow+0x4c>
 801ce68:	19b3      	adds	r3, r6, r6
 801ce6a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801ce6e:	4152      	adcs	r2, r2
 801ce70:	4299      	cmp	r1, r3
 801ce72:	4b89      	ldr	r3, [pc, #548]	; (801d098 <__ieee754_pow+0x250>)
 801ce74:	4193      	sbcs	r3, r2
 801ce76:	f080 84d2 	bcs.w	801d81e <__ieee754_pow+0x9d6>
 801ce7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ce7e:	4630      	mov	r0, r6
 801ce80:	4639      	mov	r1, r7
 801ce82:	f7e3 fa03 	bl	800028c <__adddf3>
 801ce86:	ec41 0b10 	vmov	d0, r0, r1
 801ce8a:	b009      	add	sp, #36	; 0x24
 801ce8c:	ecbd 8b06 	vpop	{d8-d10}
 801ce90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce94:	4b81      	ldr	r3, [pc, #516]	; (801d09c <__ieee754_pow+0x254>)
 801ce96:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801ce9a:	429c      	cmp	r4, r3
 801ce9c:	ee10 aa10 	vmov	sl, s0
 801cea0:	463d      	mov	r5, r7
 801cea2:	dc06      	bgt.n	801ceb2 <__ieee754_pow+0x6a>
 801cea4:	d101      	bne.n	801ceaa <__ieee754_pow+0x62>
 801cea6:	2e00      	cmp	r6, #0
 801cea8:	d1e7      	bne.n	801ce7a <__ieee754_pow+0x32>
 801ceaa:	4598      	cmp	r8, r3
 801ceac:	dc01      	bgt.n	801ceb2 <__ieee754_pow+0x6a>
 801ceae:	d10f      	bne.n	801ced0 <__ieee754_pow+0x88>
 801ceb0:	b172      	cbz	r2, 801ced0 <__ieee754_pow+0x88>
 801ceb2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801ceb6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801ceba:	ea55 050a 	orrs.w	r5, r5, sl
 801cebe:	d1dc      	bne.n	801ce7a <__ieee754_pow+0x32>
 801cec0:	e9dd 3200 	ldrd	r3, r2, [sp]
 801cec4:	18db      	adds	r3, r3, r3
 801cec6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801ceca:	4152      	adcs	r2, r2
 801cecc:	429d      	cmp	r5, r3
 801cece:	e7d0      	b.n	801ce72 <__ieee754_pow+0x2a>
 801ced0:	2d00      	cmp	r5, #0
 801ced2:	da3b      	bge.n	801cf4c <__ieee754_pow+0x104>
 801ced4:	4b72      	ldr	r3, [pc, #456]	; (801d0a0 <__ieee754_pow+0x258>)
 801ced6:	4598      	cmp	r8, r3
 801ced8:	dc51      	bgt.n	801cf7e <__ieee754_pow+0x136>
 801ceda:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801cede:	4598      	cmp	r8, r3
 801cee0:	f340 84ac 	ble.w	801d83c <__ieee754_pow+0x9f4>
 801cee4:	ea4f 5328 	mov.w	r3, r8, asr #20
 801cee8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ceec:	2b14      	cmp	r3, #20
 801ceee:	dd0f      	ble.n	801cf10 <__ieee754_pow+0xc8>
 801cef0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801cef4:	fa22 f103 	lsr.w	r1, r2, r3
 801cef8:	fa01 f303 	lsl.w	r3, r1, r3
 801cefc:	4293      	cmp	r3, r2
 801cefe:	f040 849d 	bne.w	801d83c <__ieee754_pow+0x9f4>
 801cf02:	f001 0101 	and.w	r1, r1, #1
 801cf06:	f1c1 0302 	rsb	r3, r1, #2
 801cf0a:	9304      	str	r3, [sp, #16]
 801cf0c:	b182      	cbz	r2, 801cf30 <__ieee754_pow+0xe8>
 801cf0e:	e05f      	b.n	801cfd0 <__ieee754_pow+0x188>
 801cf10:	2a00      	cmp	r2, #0
 801cf12:	d15b      	bne.n	801cfcc <__ieee754_pow+0x184>
 801cf14:	f1c3 0314 	rsb	r3, r3, #20
 801cf18:	fa48 f103 	asr.w	r1, r8, r3
 801cf1c:	fa01 f303 	lsl.w	r3, r1, r3
 801cf20:	4543      	cmp	r3, r8
 801cf22:	f040 8488 	bne.w	801d836 <__ieee754_pow+0x9ee>
 801cf26:	f001 0101 	and.w	r1, r1, #1
 801cf2a:	f1c1 0302 	rsb	r3, r1, #2
 801cf2e:	9304      	str	r3, [sp, #16]
 801cf30:	4b5c      	ldr	r3, [pc, #368]	; (801d0a4 <__ieee754_pow+0x25c>)
 801cf32:	4598      	cmp	r8, r3
 801cf34:	d132      	bne.n	801cf9c <__ieee754_pow+0x154>
 801cf36:	f1b9 0f00 	cmp.w	r9, #0
 801cf3a:	f280 8478 	bge.w	801d82e <__ieee754_pow+0x9e6>
 801cf3e:	4959      	ldr	r1, [pc, #356]	; (801d0a4 <__ieee754_pow+0x25c>)
 801cf40:	4632      	mov	r2, r6
 801cf42:	463b      	mov	r3, r7
 801cf44:	2000      	movs	r0, #0
 801cf46:	f7e3 fc81 	bl	800084c <__aeabi_ddiv>
 801cf4a:	e79c      	b.n	801ce86 <__ieee754_pow+0x3e>
 801cf4c:	2300      	movs	r3, #0
 801cf4e:	9304      	str	r3, [sp, #16]
 801cf50:	2a00      	cmp	r2, #0
 801cf52:	d13d      	bne.n	801cfd0 <__ieee754_pow+0x188>
 801cf54:	4b51      	ldr	r3, [pc, #324]	; (801d09c <__ieee754_pow+0x254>)
 801cf56:	4598      	cmp	r8, r3
 801cf58:	d1ea      	bne.n	801cf30 <__ieee754_pow+0xe8>
 801cf5a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801cf5e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801cf62:	ea53 030a 	orrs.w	r3, r3, sl
 801cf66:	f000 845a 	beq.w	801d81e <__ieee754_pow+0x9d6>
 801cf6a:	4b4f      	ldr	r3, [pc, #316]	; (801d0a8 <__ieee754_pow+0x260>)
 801cf6c:	429c      	cmp	r4, r3
 801cf6e:	dd08      	ble.n	801cf82 <__ieee754_pow+0x13a>
 801cf70:	f1b9 0f00 	cmp.w	r9, #0
 801cf74:	f2c0 8457 	blt.w	801d826 <__ieee754_pow+0x9de>
 801cf78:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cf7c:	e783      	b.n	801ce86 <__ieee754_pow+0x3e>
 801cf7e:	2302      	movs	r3, #2
 801cf80:	e7e5      	b.n	801cf4e <__ieee754_pow+0x106>
 801cf82:	f1b9 0f00 	cmp.w	r9, #0
 801cf86:	f04f 0000 	mov.w	r0, #0
 801cf8a:	f04f 0100 	mov.w	r1, #0
 801cf8e:	f6bf af7a 	bge.w	801ce86 <__ieee754_pow+0x3e>
 801cf92:	e9dd 0300 	ldrd	r0, r3, [sp]
 801cf96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801cf9a:	e774      	b.n	801ce86 <__ieee754_pow+0x3e>
 801cf9c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801cfa0:	d106      	bne.n	801cfb0 <__ieee754_pow+0x168>
 801cfa2:	4632      	mov	r2, r6
 801cfa4:	463b      	mov	r3, r7
 801cfa6:	4630      	mov	r0, r6
 801cfa8:	4639      	mov	r1, r7
 801cfaa:	f7e3 fb25 	bl	80005f8 <__aeabi_dmul>
 801cfae:	e76a      	b.n	801ce86 <__ieee754_pow+0x3e>
 801cfb0:	4b3e      	ldr	r3, [pc, #248]	; (801d0ac <__ieee754_pow+0x264>)
 801cfb2:	4599      	cmp	r9, r3
 801cfb4:	d10c      	bne.n	801cfd0 <__ieee754_pow+0x188>
 801cfb6:	2d00      	cmp	r5, #0
 801cfb8:	db0a      	blt.n	801cfd0 <__ieee754_pow+0x188>
 801cfba:	ec47 6b10 	vmov	d0, r6, r7
 801cfbe:	b009      	add	sp, #36	; 0x24
 801cfc0:	ecbd 8b06 	vpop	{d8-d10}
 801cfc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfc8:	f000 bc6c 	b.w	801d8a4 <__ieee754_sqrt>
 801cfcc:	2300      	movs	r3, #0
 801cfce:	9304      	str	r3, [sp, #16]
 801cfd0:	ec47 6b10 	vmov	d0, r6, r7
 801cfd4:	f000 fd4b 	bl	801da6e <fabs>
 801cfd8:	ec51 0b10 	vmov	r0, r1, d0
 801cfdc:	f1ba 0f00 	cmp.w	sl, #0
 801cfe0:	d129      	bne.n	801d036 <__ieee754_pow+0x1ee>
 801cfe2:	b124      	cbz	r4, 801cfee <__ieee754_pow+0x1a6>
 801cfe4:	4b2f      	ldr	r3, [pc, #188]	; (801d0a4 <__ieee754_pow+0x25c>)
 801cfe6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801cfea:	429a      	cmp	r2, r3
 801cfec:	d123      	bne.n	801d036 <__ieee754_pow+0x1ee>
 801cfee:	f1b9 0f00 	cmp.w	r9, #0
 801cff2:	da05      	bge.n	801d000 <__ieee754_pow+0x1b8>
 801cff4:	4602      	mov	r2, r0
 801cff6:	460b      	mov	r3, r1
 801cff8:	2000      	movs	r0, #0
 801cffa:	492a      	ldr	r1, [pc, #168]	; (801d0a4 <__ieee754_pow+0x25c>)
 801cffc:	f7e3 fc26 	bl	800084c <__aeabi_ddiv>
 801d000:	2d00      	cmp	r5, #0
 801d002:	f6bf af40 	bge.w	801ce86 <__ieee754_pow+0x3e>
 801d006:	9b04      	ldr	r3, [sp, #16]
 801d008:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801d00c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801d010:	4323      	orrs	r3, r4
 801d012:	d108      	bne.n	801d026 <__ieee754_pow+0x1de>
 801d014:	4602      	mov	r2, r0
 801d016:	460b      	mov	r3, r1
 801d018:	4610      	mov	r0, r2
 801d01a:	4619      	mov	r1, r3
 801d01c:	f7e3 f934 	bl	8000288 <__aeabi_dsub>
 801d020:	4602      	mov	r2, r0
 801d022:	460b      	mov	r3, r1
 801d024:	e78f      	b.n	801cf46 <__ieee754_pow+0xfe>
 801d026:	9b04      	ldr	r3, [sp, #16]
 801d028:	2b01      	cmp	r3, #1
 801d02a:	f47f af2c 	bne.w	801ce86 <__ieee754_pow+0x3e>
 801d02e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d032:	4619      	mov	r1, r3
 801d034:	e727      	b.n	801ce86 <__ieee754_pow+0x3e>
 801d036:	0feb      	lsrs	r3, r5, #31
 801d038:	3b01      	subs	r3, #1
 801d03a:	9306      	str	r3, [sp, #24]
 801d03c:	9a06      	ldr	r2, [sp, #24]
 801d03e:	9b04      	ldr	r3, [sp, #16]
 801d040:	4313      	orrs	r3, r2
 801d042:	d102      	bne.n	801d04a <__ieee754_pow+0x202>
 801d044:	4632      	mov	r2, r6
 801d046:	463b      	mov	r3, r7
 801d048:	e7e6      	b.n	801d018 <__ieee754_pow+0x1d0>
 801d04a:	4b19      	ldr	r3, [pc, #100]	; (801d0b0 <__ieee754_pow+0x268>)
 801d04c:	4598      	cmp	r8, r3
 801d04e:	f340 80fb 	ble.w	801d248 <__ieee754_pow+0x400>
 801d052:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801d056:	4598      	cmp	r8, r3
 801d058:	4b13      	ldr	r3, [pc, #76]	; (801d0a8 <__ieee754_pow+0x260>)
 801d05a:	dd0c      	ble.n	801d076 <__ieee754_pow+0x22e>
 801d05c:	429c      	cmp	r4, r3
 801d05e:	dc0f      	bgt.n	801d080 <__ieee754_pow+0x238>
 801d060:	f1b9 0f00 	cmp.w	r9, #0
 801d064:	da0f      	bge.n	801d086 <__ieee754_pow+0x23e>
 801d066:	2000      	movs	r0, #0
 801d068:	b009      	add	sp, #36	; 0x24
 801d06a:	ecbd 8b06 	vpop	{d8-d10}
 801d06e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d072:	f000 bcf3 	b.w	801da5c <__math_oflow>
 801d076:	429c      	cmp	r4, r3
 801d078:	dbf2      	blt.n	801d060 <__ieee754_pow+0x218>
 801d07a:	4b0a      	ldr	r3, [pc, #40]	; (801d0a4 <__ieee754_pow+0x25c>)
 801d07c:	429c      	cmp	r4, r3
 801d07e:	dd19      	ble.n	801d0b4 <__ieee754_pow+0x26c>
 801d080:	f1b9 0f00 	cmp.w	r9, #0
 801d084:	dcef      	bgt.n	801d066 <__ieee754_pow+0x21e>
 801d086:	2000      	movs	r0, #0
 801d088:	b009      	add	sp, #36	; 0x24
 801d08a:	ecbd 8b06 	vpop	{d8-d10}
 801d08e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d092:	f000 bcda 	b.w	801da4a <__math_uflow>
 801d096:	bf00      	nop
 801d098:	fff00000 	.word	0xfff00000
 801d09c:	7ff00000 	.word	0x7ff00000
 801d0a0:	433fffff 	.word	0x433fffff
 801d0a4:	3ff00000 	.word	0x3ff00000
 801d0a8:	3fefffff 	.word	0x3fefffff
 801d0ac:	3fe00000 	.word	0x3fe00000
 801d0b0:	41e00000 	.word	0x41e00000
 801d0b4:	4b60      	ldr	r3, [pc, #384]	; (801d238 <__ieee754_pow+0x3f0>)
 801d0b6:	2200      	movs	r2, #0
 801d0b8:	f7e3 f8e6 	bl	8000288 <__aeabi_dsub>
 801d0bc:	a354      	add	r3, pc, #336	; (adr r3, 801d210 <__ieee754_pow+0x3c8>)
 801d0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0c2:	4604      	mov	r4, r0
 801d0c4:	460d      	mov	r5, r1
 801d0c6:	f7e3 fa97 	bl	80005f8 <__aeabi_dmul>
 801d0ca:	a353      	add	r3, pc, #332	; (adr r3, 801d218 <__ieee754_pow+0x3d0>)
 801d0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0d0:	4606      	mov	r6, r0
 801d0d2:	460f      	mov	r7, r1
 801d0d4:	4620      	mov	r0, r4
 801d0d6:	4629      	mov	r1, r5
 801d0d8:	f7e3 fa8e 	bl	80005f8 <__aeabi_dmul>
 801d0dc:	4b57      	ldr	r3, [pc, #348]	; (801d23c <__ieee754_pow+0x3f4>)
 801d0de:	4682      	mov	sl, r0
 801d0e0:	468b      	mov	fp, r1
 801d0e2:	2200      	movs	r2, #0
 801d0e4:	4620      	mov	r0, r4
 801d0e6:	4629      	mov	r1, r5
 801d0e8:	f7e3 fa86 	bl	80005f8 <__aeabi_dmul>
 801d0ec:	4602      	mov	r2, r0
 801d0ee:	460b      	mov	r3, r1
 801d0f0:	a14b      	add	r1, pc, #300	; (adr r1, 801d220 <__ieee754_pow+0x3d8>)
 801d0f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d0f6:	f7e3 f8c7 	bl	8000288 <__aeabi_dsub>
 801d0fa:	4622      	mov	r2, r4
 801d0fc:	462b      	mov	r3, r5
 801d0fe:	f7e3 fa7b 	bl	80005f8 <__aeabi_dmul>
 801d102:	4602      	mov	r2, r0
 801d104:	460b      	mov	r3, r1
 801d106:	2000      	movs	r0, #0
 801d108:	494d      	ldr	r1, [pc, #308]	; (801d240 <__ieee754_pow+0x3f8>)
 801d10a:	f7e3 f8bd 	bl	8000288 <__aeabi_dsub>
 801d10e:	4622      	mov	r2, r4
 801d110:	4680      	mov	r8, r0
 801d112:	4689      	mov	r9, r1
 801d114:	462b      	mov	r3, r5
 801d116:	4620      	mov	r0, r4
 801d118:	4629      	mov	r1, r5
 801d11a:	f7e3 fa6d 	bl	80005f8 <__aeabi_dmul>
 801d11e:	4602      	mov	r2, r0
 801d120:	460b      	mov	r3, r1
 801d122:	4640      	mov	r0, r8
 801d124:	4649      	mov	r1, r9
 801d126:	f7e3 fa67 	bl	80005f8 <__aeabi_dmul>
 801d12a:	a33f      	add	r3, pc, #252	; (adr r3, 801d228 <__ieee754_pow+0x3e0>)
 801d12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d130:	f7e3 fa62 	bl	80005f8 <__aeabi_dmul>
 801d134:	4602      	mov	r2, r0
 801d136:	460b      	mov	r3, r1
 801d138:	4650      	mov	r0, sl
 801d13a:	4659      	mov	r1, fp
 801d13c:	f7e3 f8a4 	bl	8000288 <__aeabi_dsub>
 801d140:	4602      	mov	r2, r0
 801d142:	460b      	mov	r3, r1
 801d144:	4680      	mov	r8, r0
 801d146:	4689      	mov	r9, r1
 801d148:	4630      	mov	r0, r6
 801d14a:	4639      	mov	r1, r7
 801d14c:	f7e3 f89e 	bl	800028c <__adddf3>
 801d150:	2000      	movs	r0, #0
 801d152:	4632      	mov	r2, r6
 801d154:	463b      	mov	r3, r7
 801d156:	4604      	mov	r4, r0
 801d158:	460d      	mov	r5, r1
 801d15a:	f7e3 f895 	bl	8000288 <__aeabi_dsub>
 801d15e:	4602      	mov	r2, r0
 801d160:	460b      	mov	r3, r1
 801d162:	4640      	mov	r0, r8
 801d164:	4649      	mov	r1, r9
 801d166:	f7e3 f88f 	bl	8000288 <__aeabi_dsub>
 801d16a:	9b04      	ldr	r3, [sp, #16]
 801d16c:	9a06      	ldr	r2, [sp, #24]
 801d16e:	3b01      	subs	r3, #1
 801d170:	4313      	orrs	r3, r2
 801d172:	4682      	mov	sl, r0
 801d174:	468b      	mov	fp, r1
 801d176:	f040 81e7 	bne.w	801d548 <__ieee754_pow+0x700>
 801d17a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801d230 <__ieee754_pow+0x3e8>
 801d17e:	eeb0 8a47 	vmov.f32	s16, s14
 801d182:	eef0 8a67 	vmov.f32	s17, s15
 801d186:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d18a:	2600      	movs	r6, #0
 801d18c:	4632      	mov	r2, r6
 801d18e:	463b      	mov	r3, r7
 801d190:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d194:	f7e3 f878 	bl	8000288 <__aeabi_dsub>
 801d198:	4622      	mov	r2, r4
 801d19a:	462b      	mov	r3, r5
 801d19c:	f7e3 fa2c 	bl	80005f8 <__aeabi_dmul>
 801d1a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d1a4:	4680      	mov	r8, r0
 801d1a6:	4689      	mov	r9, r1
 801d1a8:	4650      	mov	r0, sl
 801d1aa:	4659      	mov	r1, fp
 801d1ac:	f7e3 fa24 	bl	80005f8 <__aeabi_dmul>
 801d1b0:	4602      	mov	r2, r0
 801d1b2:	460b      	mov	r3, r1
 801d1b4:	4640      	mov	r0, r8
 801d1b6:	4649      	mov	r1, r9
 801d1b8:	f7e3 f868 	bl	800028c <__adddf3>
 801d1bc:	4632      	mov	r2, r6
 801d1be:	463b      	mov	r3, r7
 801d1c0:	4680      	mov	r8, r0
 801d1c2:	4689      	mov	r9, r1
 801d1c4:	4620      	mov	r0, r4
 801d1c6:	4629      	mov	r1, r5
 801d1c8:	f7e3 fa16 	bl	80005f8 <__aeabi_dmul>
 801d1cc:	460b      	mov	r3, r1
 801d1ce:	4604      	mov	r4, r0
 801d1d0:	460d      	mov	r5, r1
 801d1d2:	4602      	mov	r2, r0
 801d1d4:	4649      	mov	r1, r9
 801d1d6:	4640      	mov	r0, r8
 801d1d8:	f7e3 f858 	bl	800028c <__adddf3>
 801d1dc:	4b19      	ldr	r3, [pc, #100]	; (801d244 <__ieee754_pow+0x3fc>)
 801d1de:	4299      	cmp	r1, r3
 801d1e0:	ec45 4b19 	vmov	d9, r4, r5
 801d1e4:	4606      	mov	r6, r0
 801d1e6:	460f      	mov	r7, r1
 801d1e8:	468b      	mov	fp, r1
 801d1ea:	f340 82f1 	ble.w	801d7d0 <__ieee754_pow+0x988>
 801d1ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801d1f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801d1f6:	4303      	orrs	r3, r0
 801d1f8:	f000 81e4 	beq.w	801d5c4 <__ieee754_pow+0x77c>
 801d1fc:	ec51 0b18 	vmov	r0, r1, d8
 801d200:	2200      	movs	r2, #0
 801d202:	2300      	movs	r3, #0
 801d204:	f7e3 fc6a 	bl	8000adc <__aeabi_dcmplt>
 801d208:	3800      	subs	r0, #0
 801d20a:	bf18      	it	ne
 801d20c:	2001      	movne	r0, #1
 801d20e:	e72b      	b.n	801d068 <__ieee754_pow+0x220>
 801d210:	60000000 	.word	0x60000000
 801d214:	3ff71547 	.word	0x3ff71547
 801d218:	f85ddf44 	.word	0xf85ddf44
 801d21c:	3e54ae0b 	.word	0x3e54ae0b
 801d220:	55555555 	.word	0x55555555
 801d224:	3fd55555 	.word	0x3fd55555
 801d228:	652b82fe 	.word	0x652b82fe
 801d22c:	3ff71547 	.word	0x3ff71547
 801d230:	00000000 	.word	0x00000000
 801d234:	bff00000 	.word	0xbff00000
 801d238:	3ff00000 	.word	0x3ff00000
 801d23c:	3fd00000 	.word	0x3fd00000
 801d240:	3fe00000 	.word	0x3fe00000
 801d244:	408fffff 	.word	0x408fffff
 801d248:	4bd5      	ldr	r3, [pc, #852]	; (801d5a0 <__ieee754_pow+0x758>)
 801d24a:	402b      	ands	r3, r5
 801d24c:	2200      	movs	r2, #0
 801d24e:	b92b      	cbnz	r3, 801d25c <__ieee754_pow+0x414>
 801d250:	4bd4      	ldr	r3, [pc, #848]	; (801d5a4 <__ieee754_pow+0x75c>)
 801d252:	f7e3 f9d1 	bl	80005f8 <__aeabi_dmul>
 801d256:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801d25a:	460c      	mov	r4, r1
 801d25c:	1523      	asrs	r3, r4, #20
 801d25e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d262:	4413      	add	r3, r2
 801d264:	9305      	str	r3, [sp, #20]
 801d266:	4bd0      	ldr	r3, [pc, #832]	; (801d5a8 <__ieee754_pow+0x760>)
 801d268:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d26c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801d270:	429c      	cmp	r4, r3
 801d272:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d276:	dd08      	ble.n	801d28a <__ieee754_pow+0x442>
 801d278:	4bcc      	ldr	r3, [pc, #816]	; (801d5ac <__ieee754_pow+0x764>)
 801d27a:	429c      	cmp	r4, r3
 801d27c:	f340 8162 	ble.w	801d544 <__ieee754_pow+0x6fc>
 801d280:	9b05      	ldr	r3, [sp, #20]
 801d282:	3301      	adds	r3, #1
 801d284:	9305      	str	r3, [sp, #20]
 801d286:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801d28a:	2400      	movs	r4, #0
 801d28c:	00e3      	lsls	r3, r4, #3
 801d28e:	9307      	str	r3, [sp, #28]
 801d290:	4bc7      	ldr	r3, [pc, #796]	; (801d5b0 <__ieee754_pow+0x768>)
 801d292:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d296:	ed93 7b00 	vldr	d7, [r3]
 801d29a:	4629      	mov	r1, r5
 801d29c:	ec53 2b17 	vmov	r2, r3, d7
 801d2a0:	eeb0 9a47 	vmov.f32	s18, s14
 801d2a4:	eef0 9a67 	vmov.f32	s19, s15
 801d2a8:	4682      	mov	sl, r0
 801d2aa:	f7e2 ffed 	bl	8000288 <__aeabi_dsub>
 801d2ae:	4652      	mov	r2, sl
 801d2b0:	4606      	mov	r6, r0
 801d2b2:	460f      	mov	r7, r1
 801d2b4:	462b      	mov	r3, r5
 801d2b6:	ec51 0b19 	vmov	r0, r1, d9
 801d2ba:	f7e2 ffe7 	bl	800028c <__adddf3>
 801d2be:	4602      	mov	r2, r0
 801d2c0:	460b      	mov	r3, r1
 801d2c2:	2000      	movs	r0, #0
 801d2c4:	49bb      	ldr	r1, [pc, #748]	; (801d5b4 <__ieee754_pow+0x76c>)
 801d2c6:	f7e3 fac1 	bl	800084c <__aeabi_ddiv>
 801d2ca:	ec41 0b1a 	vmov	d10, r0, r1
 801d2ce:	4602      	mov	r2, r0
 801d2d0:	460b      	mov	r3, r1
 801d2d2:	4630      	mov	r0, r6
 801d2d4:	4639      	mov	r1, r7
 801d2d6:	f7e3 f98f 	bl	80005f8 <__aeabi_dmul>
 801d2da:	2300      	movs	r3, #0
 801d2dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d2e0:	9302      	str	r3, [sp, #8]
 801d2e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d2e6:	46ab      	mov	fp, r5
 801d2e8:	106d      	asrs	r5, r5, #1
 801d2ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801d2ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801d2f2:	ec41 0b18 	vmov	d8, r0, r1
 801d2f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801d2fa:	2200      	movs	r2, #0
 801d2fc:	4640      	mov	r0, r8
 801d2fe:	4649      	mov	r1, r9
 801d300:	4614      	mov	r4, r2
 801d302:	461d      	mov	r5, r3
 801d304:	f7e3 f978 	bl	80005f8 <__aeabi_dmul>
 801d308:	4602      	mov	r2, r0
 801d30a:	460b      	mov	r3, r1
 801d30c:	4630      	mov	r0, r6
 801d30e:	4639      	mov	r1, r7
 801d310:	f7e2 ffba 	bl	8000288 <__aeabi_dsub>
 801d314:	ec53 2b19 	vmov	r2, r3, d9
 801d318:	4606      	mov	r6, r0
 801d31a:	460f      	mov	r7, r1
 801d31c:	4620      	mov	r0, r4
 801d31e:	4629      	mov	r1, r5
 801d320:	f7e2 ffb2 	bl	8000288 <__aeabi_dsub>
 801d324:	4602      	mov	r2, r0
 801d326:	460b      	mov	r3, r1
 801d328:	4650      	mov	r0, sl
 801d32a:	4659      	mov	r1, fp
 801d32c:	f7e2 ffac 	bl	8000288 <__aeabi_dsub>
 801d330:	4642      	mov	r2, r8
 801d332:	464b      	mov	r3, r9
 801d334:	f7e3 f960 	bl	80005f8 <__aeabi_dmul>
 801d338:	4602      	mov	r2, r0
 801d33a:	460b      	mov	r3, r1
 801d33c:	4630      	mov	r0, r6
 801d33e:	4639      	mov	r1, r7
 801d340:	f7e2 ffa2 	bl	8000288 <__aeabi_dsub>
 801d344:	ec53 2b1a 	vmov	r2, r3, d10
 801d348:	f7e3 f956 	bl	80005f8 <__aeabi_dmul>
 801d34c:	ec53 2b18 	vmov	r2, r3, d8
 801d350:	ec41 0b19 	vmov	d9, r0, r1
 801d354:	ec51 0b18 	vmov	r0, r1, d8
 801d358:	f7e3 f94e 	bl	80005f8 <__aeabi_dmul>
 801d35c:	a37c      	add	r3, pc, #496	; (adr r3, 801d550 <__ieee754_pow+0x708>)
 801d35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d362:	4604      	mov	r4, r0
 801d364:	460d      	mov	r5, r1
 801d366:	f7e3 f947 	bl	80005f8 <__aeabi_dmul>
 801d36a:	a37b      	add	r3, pc, #492	; (adr r3, 801d558 <__ieee754_pow+0x710>)
 801d36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d370:	f7e2 ff8c 	bl	800028c <__adddf3>
 801d374:	4622      	mov	r2, r4
 801d376:	462b      	mov	r3, r5
 801d378:	f7e3 f93e 	bl	80005f8 <__aeabi_dmul>
 801d37c:	a378      	add	r3, pc, #480	; (adr r3, 801d560 <__ieee754_pow+0x718>)
 801d37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d382:	f7e2 ff83 	bl	800028c <__adddf3>
 801d386:	4622      	mov	r2, r4
 801d388:	462b      	mov	r3, r5
 801d38a:	f7e3 f935 	bl	80005f8 <__aeabi_dmul>
 801d38e:	a376      	add	r3, pc, #472	; (adr r3, 801d568 <__ieee754_pow+0x720>)
 801d390:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d394:	f7e2 ff7a 	bl	800028c <__adddf3>
 801d398:	4622      	mov	r2, r4
 801d39a:	462b      	mov	r3, r5
 801d39c:	f7e3 f92c 	bl	80005f8 <__aeabi_dmul>
 801d3a0:	a373      	add	r3, pc, #460	; (adr r3, 801d570 <__ieee754_pow+0x728>)
 801d3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3a6:	f7e2 ff71 	bl	800028c <__adddf3>
 801d3aa:	4622      	mov	r2, r4
 801d3ac:	462b      	mov	r3, r5
 801d3ae:	f7e3 f923 	bl	80005f8 <__aeabi_dmul>
 801d3b2:	a371      	add	r3, pc, #452	; (adr r3, 801d578 <__ieee754_pow+0x730>)
 801d3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3b8:	f7e2 ff68 	bl	800028c <__adddf3>
 801d3bc:	4622      	mov	r2, r4
 801d3be:	4606      	mov	r6, r0
 801d3c0:	460f      	mov	r7, r1
 801d3c2:	462b      	mov	r3, r5
 801d3c4:	4620      	mov	r0, r4
 801d3c6:	4629      	mov	r1, r5
 801d3c8:	f7e3 f916 	bl	80005f8 <__aeabi_dmul>
 801d3cc:	4602      	mov	r2, r0
 801d3ce:	460b      	mov	r3, r1
 801d3d0:	4630      	mov	r0, r6
 801d3d2:	4639      	mov	r1, r7
 801d3d4:	f7e3 f910 	bl	80005f8 <__aeabi_dmul>
 801d3d8:	4642      	mov	r2, r8
 801d3da:	4604      	mov	r4, r0
 801d3dc:	460d      	mov	r5, r1
 801d3de:	464b      	mov	r3, r9
 801d3e0:	ec51 0b18 	vmov	r0, r1, d8
 801d3e4:	f7e2 ff52 	bl	800028c <__adddf3>
 801d3e8:	ec53 2b19 	vmov	r2, r3, d9
 801d3ec:	f7e3 f904 	bl	80005f8 <__aeabi_dmul>
 801d3f0:	4622      	mov	r2, r4
 801d3f2:	462b      	mov	r3, r5
 801d3f4:	f7e2 ff4a 	bl	800028c <__adddf3>
 801d3f8:	4642      	mov	r2, r8
 801d3fa:	4682      	mov	sl, r0
 801d3fc:	468b      	mov	fp, r1
 801d3fe:	464b      	mov	r3, r9
 801d400:	4640      	mov	r0, r8
 801d402:	4649      	mov	r1, r9
 801d404:	f7e3 f8f8 	bl	80005f8 <__aeabi_dmul>
 801d408:	4b6b      	ldr	r3, [pc, #428]	; (801d5b8 <__ieee754_pow+0x770>)
 801d40a:	2200      	movs	r2, #0
 801d40c:	4606      	mov	r6, r0
 801d40e:	460f      	mov	r7, r1
 801d410:	f7e2 ff3c 	bl	800028c <__adddf3>
 801d414:	4652      	mov	r2, sl
 801d416:	465b      	mov	r3, fp
 801d418:	f7e2 ff38 	bl	800028c <__adddf3>
 801d41c:	2000      	movs	r0, #0
 801d41e:	4604      	mov	r4, r0
 801d420:	460d      	mov	r5, r1
 801d422:	4602      	mov	r2, r0
 801d424:	460b      	mov	r3, r1
 801d426:	4640      	mov	r0, r8
 801d428:	4649      	mov	r1, r9
 801d42a:	f7e3 f8e5 	bl	80005f8 <__aeabi_dmul>
 801d42e:	4b62      	ldr	r3, [pc, #392]	; (801d5b8 <__ieee754_pow+0x770>)
 801d430:	4680      	mov	r8, r0
 801d432:	4689      	mov	r9, r1
 801d434:	2200      	movs	r2, #0
 801d436:	4620      	mov	r0, r4
 801d438:	4629      	mov	r1, r5
 801d43a:	f7e2 ff25 	bl	8000288 <__aeabi_dsub>
 801d43e:	4632      	mov	r2, r6
 801d440:	463b      	mov	r3, r7
 801d442:	f7e2 ff21 	bl	8000288 <__aeabi_dsub>
 801d446:	4602      	mov	r2, r0
 801d448:	460b      	mov	r3, r1
 801d44a:	4650      	mov	r0, sl
 801d44c:	4659      	mov	r1, fp
 801d44e:	f7e2 ff1b 	bl	8000288 <__aeabi_dsub>
 801d452:	ec53 2b18 	vmov	r2, r3, d8
 801d456:	f7e3 f8cf 	bl	80005f8 <__aeabi_dmul>
 801d45a:	4622      	mov	r2, r4
 801d45c:	4606      	mov	r6, r0
 801d45e:	460f      	mov	r7, r1
 801d460:	462b      	mov	r3, r5
 801d462:	ec51 0b19 	vmov	r0, r1, d9
 801d466:	f7e3 f8c7 	bl	80005f8 <__aeabi_dmul>
 801d46a:	4602      	mov	r2, r0
 801d46c:	460b      	mov	r3, r1
 801d46e:	4630      	mov	r0, r6
 801d470:	4639      	mov	r1, r7
 801d472:	f7e2 ff0b 	bl	800028c <__adddf3>
 801d476:	4606      	mov	r6, r0
 801d478:	460f      	mov	r7, r1
 801d47a:	4602      	mov	r2, r0
 801d47c:	460b      	mov	r3, r1
 801d47e:	4640      	mov	r0, r8
 801d480:	4649      	mov	r1, r9
 801d482:	f7e2 ff03 	bl	800028c <__adddf3>
 801d486:	a33e      	add	r3, pc, #248	; (adr r3, 801d580 <__ieee754_pow+0x738>)
 801d488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d48c:	2000      	movs	r0, #0
 801d48e:	4604      	mov	r4, r0
 801d490:	460d      	mov	r5, r1
 801d492:	f7e3 f8b1 	bl	80005f8 <__aeabi_dmul>
 801d496:	4642      	mov	r2, r8
 801d498:	ec41 0b18 	vmov	d8, r0, r1
 801d49c:	464b      	mov	r3, r9
 801d49e:	4620      	mov	r0, r4
 801d4a0:	4629      	mov	r1, r5
 801d4a2:	f7e2 fef1 	bl	8000288 <__aeabi_dsub>
 801d4a6:	4602      	mov	r2, r0
 801d4a8:	460b      	mov	r3, r1
 801d4aa:	4630      	mov	r0, r6
 801d4ac:	4639      	mov	r1, r7
 801d4ae:	f7e2 feeb 	bl	8000288 <__aeabi_dsub>
 801d4b2:	a335      	add	r3, pc, #212	; (adr r3, 801d588 <__ieee754_pow+0x740>)
 801d4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4b8:	f7e3 f89e 	bl	80005f8 <__aeabi_dmul>
 801d4bc:	a334      	add	r3, pc, #208	; (adr r3, 801d590 <__ieee754_pow+0x748>)
 801d4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4c2:	4606      	mov	r6, r0
 801d4c4:	460f      	mov	r7, r1
 801d4c6:	4620      	mov	r0, r4
 801d4c8:	4629      	mov	r1, r5
 801d4ca:	f7e3 f895 	bl	80005f8 <__aeabi_dmul>
 801d4ce:	4602      	mov	r2, r0
 801d4d0:	460b      	mov	r3, r1
 801d4d2:	4630      	mov	r0, r6
 801d4d4:	4639      	mov	r1, r7
 801d4d6:	f7e2 fed9 	bl	800028c <__adddf3>
 801d4da:	9a07      	ldr	r2, [sp, #28]
 801d4dc:	4b37      	ldr	r3, [pc, #220]	; (801d5bc <__ieee754_pow+0x774>)
 801d4de:	4413      	add	r3, r2
 801d4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4e4:	f7e2 fed2 	bl	800028c <__adddf3>
 801d4e8:	4682      	mov	sl, r0
 801d4ea:	9805      	ldr	r0, [sp, #20]
 801d4ec:	468b      	mov	fp, r1
 801d4ee:	f7e3 f819 	bl	8000524 <__aeabi_i2d>
 801d4f2:	9a07      	ldr	r2, [sp, #28]
 801d4f4:	4b32      	ldr	r3, [pc, #200]	; (801d5c0 <__ieee754_pow+0x778>)
 801d4f6:	4413      	add	r3, r2
 801d4f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d4fc:	4606      	mov	r6, r0
 801d4fe:	460f      	mov	r7, r1
 801d500:	4652      	mov	r2, sl
 801d502:	465b      	mov	r3, fp
 801d504:	ec51 0b18 	vmov	r0, r1, d8
 801d508:	f7e2 fec0 	bl	800028c <__adddf3>
 801d50c:	4642      	mov	r2, r8
 801d50e:	464b      	mov	r3, r9
 801d510:	f7e2 febc 	bl	800028c <__adddf3>
 801d514:	4632      	mov	r2, r6
 801d516:	463b      	mov	r3, r7
 801d518:	f7e2 feb8 	bl	800028c <__adddf3>
 801d51c:	2000      	movs	r0, #0
 801d51e:	4632      	mov	r2, r6
 801d520:	463b      	mov	r3, r7
 801d522:	4604      	mov	r4, r0
 801d524:	460d      	mov	r5, r1
 801d526:	f7e2 feaf 	bl	8000288 <__aeabi_dsub>
 801d52a:	4642      	mov	r2, r8
 801d52c:	464b      	mov	r3, r9
 801d52e:	f7e2 feab 	bl	8000288 <__aeabi_dsub>
 801d532:	ec53 2b18 	vmov	r2, r3, d8
 801d536:	f7e2 fea7 	bl	8000288 <__aeabi_dsub>
 801d53a:	4602      	mov	r2, r0
 801d53c:	460b      	mov	r3, r1
 801d53e:	4650      	mov	r0, sl
 801d540:	4659      	mov	r1, fp
 801d542:	e610      	b.n	801d166 <__ieee754_pow+0x31e>
 801d544:	2401      	movs	r4, #1
 801d546:	e6a1      	b.n	801d28c <__ieee754_pow+0x444>
 801d548:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801d598 <__ieee754_pow+0x750>
 801d54c:	e617      	b.n	801d17e <__ieee754_pow+0x336>
 801d54e:	bf00      	nop
 801d550:	4a454eef 	.word	0x4a454eef
 801d554:	3fca7e28 	.word	0x3fca7e28
 801d558:	93c9db65 	.word	0x93c9db65
 801d55c:	3fcd864a 	.word	0x3fcd864a
 801d560:	a91d4101 	.word	0xa91d4101
 801d564:	3fd17460 	.word	0x3fd17460
 801d568:	518f264d 	.word	0x518f264d
 801d56c:	3fd55555 	.word	0x3fd55555
 801d570:	db6fabff 	.word	0xdb6fabff
 801d574:	3fdb6db6 	.word	0x3fdb6db6
 801d578:	33333303 	.word	0x33333303
 801d57c:	3fe33333 	.word	0x3fe33333
 801d580:	e0000000 	.word	0xe0000000
 801d584:	3feec709 	.word	0x3feec709
 801d588:	dc3a03fd 	.word	0xdc3a03fd
 801d58c:	3feec709 	.word	0x3feec709
 801d590:	145b01f5 	.word	0x145b01f5
 801d594:	be3e2fe0 	.word	0xbe3e2fe0
 801d598:	00000000 	.word	0x00000000
 801d59c:	3ff00000 	.word	0x3ff00000
 801d5a0:	7ff00000 	.word	0x7ff00000
 801d5a4:	43400000 	.word	0x43400000
 801d5a8:	0003988e 	.word	0x0003988e
 801d5ac:	000bb679 	.word	0x000bb679
 801d5b0:	08029c20 	.word	0x08029c20
 801d5b4:	3ff00000 	.word	0x3ff00000
 801d5b8:	40080000 	.word	0x40080000
 801d5bc:	08029c40 	.word	0x08029c40
 801d5c0:	08029c30 	.word	0x08029c30
 801d5c4:	a3b5      	add	r3, pc, #724	; (adr r3, 801d89c <__ieee754_pow+0xa54>)
 801d5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5ca:	4640      	mov	r0, r8
 801d5cc:	4649      	mov	r1, r9
 801d5ce:	f7e2 fe5d 	bl	800028c <__adddf3>
 801d5d2:	4622      	mov	r2, r4
 801d5d4:	ec41 0b1a 	vmov	d10, r0, r1
 801d5d8:	462b      	mov	r3, r5
 801d5da:	4630      	mov	r0, r6
 801d5dc:	4639      	mov	r1, r7
 801d5de:	f7e2 fe53 	bl	8000288 <__aeabi_dsub>
 801d5e2:	4602      	mov	r2, r0
 801d5e4:	460b      	mov	r3, r1
 801d5e6:	ec51 0b1a 	vmov	r0, r1, d10
 801d5ea:	f7e3 fa95 	bl	8000b18 <__aeabi_dcmpgt>
 801d5ee:	2800      	cmp	r0, #0
 801d5f0:	f47f ae04 	bne.w	801d1fc <__ieee754_pow+0x3b4>
 801d5f4:	4aa4      	ldr	r2, [pc, #656]	; (801d888 <__ieee754_pow+0xa40>)
 801d5f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d5fa:	4293      	cmp	r3, r2
 801d5fc:	f340 8108 	ble.w	801d810 <__ieee754_pow+0x9c8>
 801d600:	151b      	asrs	r3, r3, #20
 801d602:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801d606:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801d60a:	fa4a f303 	asr.w	r3, sl, r3
 801d60e:	445b      	add	r3, fp
 801d610:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801d614:	4e9d      	ldr	r6, [pc, #628]	; (801d88c <__ieee754_pow+0xa44>)
 801d616:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801d61a:	4116      	asrs	r6, r2
 801d61c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801d620:	2000      	movs	r0, #0
 801d622:	ea23 0106 	bic.w	r1, r3, r6
 801d626:	f1c2 0214 	rsb	r2, r2, #20
 801d62a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801d62e:	fa4a fa02 	asr.w	sl, sl, r2
 801d632:	f1bb 0f00 	cmp.w	fp, #0
 801d636:	4602      	mov	r2, r0
 801d638:	460b      	mov	r3, r1
 801d63a:	4620      	mov	r0, r4
 801d63c:	4629      	mov	r1, r5
 801d63e:	bfb8      	it	lt
 801d640:	f1ca 0a00 	rsblt	sl, sl, #0
 801d644:	f7e2 fe20 	bl	8000288 <__aeabi_dsub>
 801d648:	ec41 0b19 	vmov	d9, r0, r1
 801d64c:	4642      	mov	r2, r8
 801d64e:	464b      	mov	r3, r9
 801d650:	ec51 0b19 	vmov	r0, r1, d9
 801d654:	f7e2 fe1a 	bl	800028c <__adddf3>
 801d658:	a37b      	add	r3, pc, #492	; (adr r3, 801d848 <__ieee754_pow+0xa00>)
 801d65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d65e:	2000      	movs	r0, #0
 801d660:	4604      	mov	r4, r0
 801d662:	460d      	mov	r5, r1
 801d664:	f7e2 ffc8 	bl	80005f8 <__aeabi_dmul>
 801d668:	ec53 2b19 	vmov	r2, r3, d9
 801d66c:	4606      	mov	r6, r0
 801d66e:	460f      	mov	r7, r1
 801d670:	4620      	mov	r0, r4
 801d672:	4629      	mov	r1, r5
 801d674:	f7e2 fe08 	bl	8000288 <__aeabi_dsub>
 801d678:	4602      	mov	r2, r0
 801d67a:	460b      	mov	r3, r1
 801d67c:	4640      	mov	r0, r8
 801d67e:	4649      	mov	r1, r9
 801d680:	f7e2 fe02 	bl	8000288 <__aeabi_dsub>
 801d684:	a372      	add	r3, pc, #456	; (adr r3, 801d850 <__ieee754_pow+0xa08>)
 801d686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d68a:	f7e2 ffb5 	bl	80005f8 <__aeabi_dmul>
 801d68e:	a372      	add	r3, pc, #456	; (adr r3, 801d858 <__ieee754_pow+0xa10>)
 801d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d694:	4680      	mov	r8, r0
 801d696:	4689      	mov	r9, r1
 801d698:	4620      	mov	r0, r4
 801d69a:	4629      	mov	r1, r5
 801d69c:	f7e2 ffac 	bl	80005f8 <__aeabi_dmul>
 801d6a0:	4602      	mov	r2, r0
 801d6a2:	460b      	mov	r3, r1
 801d6a4:	4640      	mov	r0, r8
 801d6a6:	4649      	mov	r1, r9
 801d6a8:	f7e2 fdf0 	bl	800028c <__adddf3>
 801d6ac:	4604      	mov	r4, r0
 801d6ae:	460d      	mov	r5, r1
 801d6b0:	4602      	mov	r2, r0
 801d6b2:	460b      	mov	r3, r1
 801d6b4:	4630      	mov	r0, r6
 801d6b6:	4639      	mov	r1, r7
 801d6b8:	f7e2 fde8 	bl	800028c <__adddf3>
 801d6bc:	4632      	mov	r2, r6
 801d6be:	463b      	mov	r3, r7
 801d6c0:	4680      	mov	r8, r0
 801d6c2:	4689      	mov	r9, r1
 801d6c4:	f7e2 fde0 	bl	8000288 <__aeabi_dsub>
 801d6c8:	4602      	mov	r2, r0
 801d6ca:	460b      	mov	r3, r1
 801d6cc:	4620      	mov	r0, r4
 801d6ce:	4629      	mov	r1, r5
 801d6d0:	f7e2 fdda 	bl	8000288 <__aeabi_dsub>
 801d6d4:	4642      	mov	r2, r8
 801d6d6:	4606      	mov	r6, r0
 801d6d8:	460f      	mov	r7, r1
 801d6da:	464b      	mov	r3, r9
 801d6dc:	4640      	mov	r0, r8
 801d6de:	4649      	mov	r1, r9
 801d6e0:	f7e2 ff8a 	bl	80005f8 <__aeabi_dmul>
 801d6e4:	a35e      	add	r3, pc, #376	; (adr r3, 801d860 <__ieee754_pow+0xa18>)
 801d6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6ea:	4604      	mov	r4, r0
 801d6ec:	460d      	mov	r5, r1
 801d6ee:	f7e2 ff83 	bl	80005f8 <__aeabi_dmul>
 801d6f2:	a35d      	add	r3, pc, #372	; (adr r3, 801d868 <__ieee754_pow+0xa20>)
 801d6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6f8:	f7e2 fdc6 	bl	8000288 <__aeabi_dsub>
 801d6fc:	4622      	mov	r2, r4
 801d6fe:	462b      	mov	r3, r5
 801d700:	f7e2 ff7a 	bl	80005f8 <__aeabi_dmul>
 801d704:	a35a      	add	r3, pc, #360	; (adr r3, 801d870 <__ieee754_pow+0xa28>)
 801d706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d70a:	f7e2 fdbf 	bl	800028c <__adddf3>
 801d70e:	4622      	mov	r2, r4
 801d710:	462b      	mov	r3, r5
 801d712:	f7e2 ff71 	bl	80005f8 <__aeabi_dmul>
 801d716:	a358      	add	r3, pc, #352	; (adr r3, 801d878 <__ieee754_pow+0xa30>)
 801d718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d71c:	f7e2 fdb4 	bl	8000288 <__aeabi_dsub>
 801d720:	4622      	mov	r2, r4
 801d722:	462b      	mov	r3, r5
 801d724:	f7e2 ff68 	bl	80005f8 <__aeabi_dmul>
 801d728:	a355      	add	r3, pc, #340	; (adr r3, 801d880 <__ieee754_pow+0xa38>)
 801d72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d72e:	f7e2 fdad 	bl	800028c <__adddf3>
 801d732:	4622      	mov	r2, r4
 801d734:	462b      	mov	r3, r5
 801d736:	f7e2 ff5f 	bl	80005f8 <__aeabi_dmul>
 801d73a:	4602      	mov	r2, r0
 801d73c:	460b      	mov	r3, r1
 801d73e:	4640      	mov	r0, r8
 801d740:	4649      	mov	r1, r9
 801d742:	f7e2 fda1 	bl	8000288 <__aeabi_dsub>
 801d746:	4604      	mov	r4, r0
 801d748:	460d      	mov	r5, r1
 801d74a:	4602      	mov	r2, r0
 801d74c:	460b      	mov	r3, r1
 801d74e:	4640      	mov	r0, r8
 801d750:	4649      	mov	r1, r9
 801d752:	f7e2 ff51 	bl	80005f8 <__aeabi_dmul>
 801d756:	2200      	movs	r2, #0
 801d758:	ec41 0b19 	vmov	d9, r0, r1
 801d75c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d760:	4620      	mov	r0, r4
 801d762:	4629      	mov	r1, r5
 801d764:	f7e2 fd90 	bl	8000288 <__aeabi_dsub>
 801d768:	4602      	mov	r2, r0
 801d76a:	460b      	mov	r3, r1
 801d76c:	ec51 0b19 	vmov	r0, r1, d9
 801d770:	f7e3 f86c 	bl	800084c <__aeabi_ddiv>
 801d774:	4632      	mov	r2, r6
 801d776:	4604      	mov	r4, r0
 801d778:	460d      	mov	r5, r1
 801d77a:	463b      	mov	r3, r7
 801d77c:	4640      	mov	r0, r8
 801d77e:	4649      	mov	r1, r9
 801d780:	f7e2 ff3a 	bl	80005f8 <__aeabi_dmul>
 801d784:	4632      	mov	r2, r6
 801d786:	463b      	mov	r3, r7
 801d788:	f7e2 fd80 	bl	800028c <__adddf3>
 801d78c:	4602      	mov	r2, r0
 801d78e:	460b      	mov	r3, r1
 801d790:	4620      	mov	r0, r4
 801d792:	4629      	mov	r1, r5
 801d794:	f7e2 fd78 	bl	8000288 <__aeabi_dsub>
 801d798:	4642      	mov	r2, r8
 801d79a:	464b      	mov	r3, r9
 801d79c:	f7e2 fd74 	bl	8000288 <__aeabi_dsub>
 801d7a0:	460b      	mov	r3, r1
 801d7a2:	4602      	mov	r2, r0
 801d7a4:	493a      	ldr	r1, [pc, #232]	; (801d890 <__ieee754_pow+0xa48>)
 801d7a6:	2000      	movs	r0, #0
 801d7a8:	f7e2 fd6e 	bl	8000288 <__aeabi_dsub>
 801d7ac:	ec41 0b10 	vmov	d0, r0, r1
 801d7b0:	ee10 3a90 	vmov	r3, s1
 801d7b4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801d7b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d7bc:	da2b      	bge.n	801d816 <__ieee754_pow+0x9ce>
 801d7be:	4650      	mov	r0, sl
 801d7c0:	f000 f96a 	bl	801da98 <scalbn>
 801d7c4:	ec51 0b10 	vmov	r0, r1, d0
 801d7c8:	ec53 2b18 	vmov	r2, r3, d8
 801d7cc:	f7ff bbed 	b.w	801cfaa <__ieee754_pow+0x162>
 801d7d0:	4b30      	ldr	r3, [pc, #192]	; (801d894 <__ieee754_pow+0xa4c>)
 801d7d2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801d7d6:	429e      	cmp	r6, r3
 801d7d8:	f77f af0c 	ble.w	801d5f4 <__ieee754_pow+0x7ac>
 801d7dc:	4b2e      	ldr	r3, [pc, #184]	; (801d898 <__ieee754_pow+0xa50>)
 801d7de:	440b      	add	r3, r1
 801d7e0:	4303      	orrs	r3, r0
 801d7e2:	d009      	beq.n	801d7f8 <__ieee754_pow+0x9b0>
 801d7e4:	ec51 0b18 	vmov	r0, r1, d8
 801d7e8:	2200      	movs	r2, #0
 801d7ea:	2300      	movs	r3, #0
 801d7ec:	f7e3 f976 	bl	8000adc <__aeabi_dcmplt>
 801d7f0:	3800      	subs	r0, #0
 801d7f2:	bf18      	it	ne
 801d7f4:	2001      	movne	r0, #1
 801d7f6:	e447      	b.n	801d088 <__ieee754_pow+0x240>
 801d7f8:	4622      	mov	r2, r4
 801d7fa:	462b      	mov	r3, r5
 801d7fc:	f7e2 fd44 	bl	8000288 <__aeabi_dsub>
 801d800:	4642      	mov	r2, r8
 801d802:	464b      	mov	r3, r9
 801d804:	f7e3 f97e 	bl	8000b04 <__aeabi_dcmpge>
 801d808:	2800      	cmp	r0, #0
 801d80a:	f43f aef3 	beq.w	801d5f4 <__ieee754_pow+0x7ac>
 801d80e:	e7e9      	b.n	801d7e4 <__ieee754_pow+0x99c>
 801d810:	f04f 0a00 	mov.w	sl, #0
 801d814:	e71a      	b.n	801d64c <__ieee754_pow+0x804>
 801d816:	ec51 0b10 	vmov	r0, r1, d0
 801d81a:	4619      	mov	r1, r3
 801d81c:	e7d4      	b.n	801d7c8 <__ieee754_pow+0x980>
 801d81e:	491c      	ldr	r1, [pc, #112]	; (801d890 <__ieee754_pow+0xa48>)
 801d820:	2000      	movs	r0, #0
 801d822:	f7ff bb30 	b.w	801ce86 <__ieee754_pow+0x3e>
 801d826:	2000      	movs	r0, #0
 801d828:	2100      	movs	r1, #0
 801d82a:	f7ff bb2c 	b.w	801ce86 <__ieee754_pow+0x3e>
 801d82e:	4630      	mov	r0, r6
 801d830:	4639      	mov	r1, r7
 801d832:	f7ff bb28 	b.w	801ce86 <__ieee754_pow+0x3e>
 801d836:	9204      	str	r2, [sp, #16]
 801d838:	f7ff bb7a 	b.w	801cf30 <__ieee754_pow+0xe8>
 801d83c:	2300      	movs	r3, #0
 801d83e:	f7ff bb64 	b.w	801cf0a <__ieee754_pow+0xc2>
 801d842:	bf00      	nop
 801d844:	f3af 8000 	nop.w
 801d848:	00000000 	.word	0x00000000
 801d84c:	3fe62e43 	.word	0x3fe62e43
 801d850:	fefa39ef 	.word	0xfefa39ef
 801d854:	3fe62e42 	.word	0x3fe62e42
 801d858:	0ca86c39 	.word	0x0ca86c39
 801d85c:	be205c61 	.word	0xbe205c61
 801d860:	72bea4d0 	.word	0x72bea4d0
 801d864:	3e663769 	.word	0x3e663769
 801d868:	c5d26bf1 	.word	0xc5d26bf1
 801d86c:	3ebbbd41 	.word	0x3ebbbd41
 801d870:	af25de2c 	.word	0xaf25de2c
 801d874:	3f11566a 	.word	0x3f11566a
 801d878:	16bebd93 	.word	0x16bebd93
 801d87c:	3f66c16c 	.word	0x3f66c16c
 801d880:	5555553e 	.word	0x5555553e
 801d884:	3fc55555 	.word	0x3fc55555
 801d888:	3fe00000 	.word	0x3fe00000
 801d88c:	000fffff 	.word	0x000fffff
 801d890:	3ff00000 	.word	0x3ff00000
 801d894:	4090cbff 	.word	0x4090cbff
 801d898:	3f6f3400 	.word	0x3f6f3400
 801d89c:	652b82fe 	.word	0x652b82fe
 801d8a0:	3c971547 	.word	0x3c971547

0801d8a4 <__ieee754_sqrt>:
 801d8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8a8:	ec55 4b10 	vmov	r4, r5, d0
 801d8ac:	4e55      	ldr	r6, [pc, #340]	; (801da04 <__ieee754_sqrt+0x160>)
 801d8ae:	43ae      	bics	r6, r5
 801d8b0:	ee10 0a10 	vmov	r0, s0
 801d8b4:	ee10 3a10 	vmov	r3, s0
 801d8b8:	462a      	mov	r2, r5
 801d8ba:	4629      	mov	r1, r5
 801d8bc:	d110      	bne.n	801d8e0 <__ieee754_sqrt+0x3c>
 801d8be:	ee10 2a10 	vmov	r2, s0
 801d8c2:	462b      	mov	r3, r5
 801d8c4:	f7e2 fe98 	bl	80005f8 <__aeabi_dmul>
 801d8c8:	4602      	mov	r2, r0
 801d8ca:	460b      	mov	r3, r1
 801d8cc:	4620      	mov	r0, r4
 801d8ce:	4629      	mov	r1, r5
 801d8d0:	f7e2 fcdc 	bl	800028c <__adddf3>
 801d8d4:	4604      	mov	r4, r0
 801d8d6:	460d      	mov	r5, r1
 801d8d8:	ec45 4b10 	vmov	d0, r4, r5
 801d8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8e0:	2d00      	cmp	r5, #0
 801d8e2:	dc10      	bgt.n	801d906 <__ieee754_sqrt+0x62>
 801d8e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d8e8:	4330      	orrs	r0, r6
 801d8ea:	d0f5      	beq.n	801d8d8 <__ieee754_sqrt+0x34>
 801d8ec:	b15d      	cbz	r5, 801d906 <__ieee754_sqrt+0x62>
 801d8ee:	ee10 2a10 	vmov	r2, s0
 801d8f2:	462b      	mov	r3, r5
 801d8f4:	ee10 0a10 	vmov	r0, s0
 801d8f8:	f7e2 fcc6 	bl	8000288 <__aeabi_dsub>
 801d8fc:	4602      	mov	r2, r0
 801d8fe:	460b      	mov	r3, r1
 801d900:	f7e2 ffa4 	bl	800084c <__aeabi_ddiv>
 801d904:	e7e6      	b.n	801d8d4 <__ieee754_sqrt+0x30>
 801d906:	1512      	asrs	r2, r2, #20
 801d908:	d074      	beq.n	801d9f4 <__ieee754_sqrt+0x150>
 801d90a:	07d4      	lsls	r4, r2, #31
 801d90c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801d910:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801d914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801d918:	bf5e      	ittt	pl
 801d91a:	0fda      	lsrpl	r2, r3, #31
 801d91c:	005b      	lslpl	r3, r3, #1
 801d91e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801d922:	2400      	movs	r4, #0
 801d924:	0fda      	lsrs	r2, r3, #31
 801d926:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801d92a:	107f      	asrs	r7, r7, #1
 801d92c:	005b      	lsls	r3, r3, #1
 801d92e:	2516      	movs	r5, #22
 801d930:	4620      	mov	r0, r4
 801d932:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801d936:	1886      	adds	r6, r0, r2
 801d938:	428e      	cmp	r6, r1
 801d93a:	bfde      	ittt	le
 801d93c:	1b89      	suble	r1, r1, r6
 801d93e:	18b0      	addle	r0, r6, r2
 801d940:	18a4      	addle	r4, r4, r2
 801d942:	0049      	lsls	r1, r1, #1
 801d944:	3d01      	subs	r5, #1
 801d946:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801d94a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801d94e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d952:	d1f0      	bne.n	801d936 <__ieee754_sqrt+0x92>
 801d954:	462a      	mov	r2, r5
 801d956:	f04f 0e20 	mov.w	lr, #32
 801d95a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801d95e:	4281      	cmp	r1, r0
 801d960:	eb06 0c05 	add.w	ip, r6, r5
 801d964:	dc02      	bgt.n	801d96c <__ieee754_sqrt+0xc8>
 801d966:	d113      	bne.n	801d990 <__ieee754_sqrt+0xec>
 801d968:	459c      	cmp	ip, r3
 801d96a:	d811      	bhi.n	801d990 <__ieee754_sqrt+0xec>
 801d96c:	f1bc 0f00 	cmp.w	ip, #0
 801d970:	eb0c 0506 	add.w	r5, ip, r6
 801d974:	da43      	bge.n	801d9fe <__ieee754_sqrt+0x15a>
 801d976:	2d00      	cmp	r5, #0
 801d978:	db41      	blt.n	801d9fe <__ieee754_sqrt+0x15a>
 801d97a:	f100 0801 	add.w	r8, r0, #1
 801d97e:	1a09      	subs	r1, r1, r0
 801d980:	459c      	cmp	ip, r3
 801d982:	bf88      	it	hi
 801d984:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801d988:	eba3 030c 	sub.w	r3, r3, ip
 801d98c:	4432      	add	r2, r6
 801d98e:	4640      	mov	r0, r8
 801d990:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801d994:	f1be 0e01 	subs.w	lr, lr, #1
 801d998:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801d99c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d9a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d9a4:	d1db      	bne.n	801d95e <__ieee754_sqrt+0xba>
 801d9a6:	430b      	orrs	r3, r1
 801d9a8:	d006      	beq.n	801d9b8 <__ieee754_sqrt+0x114>
 801d9aa:	1c50      	adds	r0, r2, #1
 801d9ac:	bf13      	iteet	ne
 801d9ae:	3201      	addne	r2, #1
 801d9b0:	3401      	addeq	r4, #1
 801d9b2:	4672      	moveq	r2, lr
 801d9b4:	f022 0201 	bicne.w	r2, r2, #1
 801d9b8:	1063      	asrs	r3, r4, #1
 801d9ba:	0852      	lsrs	r2, r2, #1
 801d9bc:	07e1      	lsls	r1, r4, #31
 801d9be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801d9c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801d9c6:	bf48      	it	mi
 801d9c8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801d9cc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801d9d0:	4614      	mov	r4, r2
 801d9d2:	e781      	b.n	801d8d8 <__ieee754_sqrt+0x34>
 801d9d4:	0ad9      	lsrs	r1, r3, #11
 801d9d6:	3815      	subs	r0, #21
 801d9d8:	055b      	lsls	r3, r3, #21
 801d9da:	2900      	cmp	r1, #0
 801d9dc:	d0fa      	beq.n	801d9d4 <__ieee754_sqrt+0x130>
 801d9de:	02cd      	lsls	r5, r1, #11
 801d9e0:	d50a      	bpl.n	801d9f8 <__ieee754_sqrt+0x154>
 801d9e2:	f1c2 0420 	rsb	r4, r2, #32
 801d9e6:	fa23 f404 	lsr.w	r4, r3, r4
 801d9ea:	1e55      	subs	r5, r2, #1
 801d9ec:	4093      	lsls	r3, r2
 801d9ee:	4321      	orrs	r1, r4
 801d9f0:	1b42      	subs	r2, r0, r5
 801d9f2:	e78a      	b.n	801d90a <__ieee754_sqrt+0x66>
 801d9f4:	4610      	mov	r0, r2
 801d9f6:	e7f0      	b.n	801d9da <__ieee754_sqrt+0x136>
 801d9f8:	0049      	lsls	r1, r1, #1
 801d9fa:	3201      	adds	r2, #1
 801d9fc:	e7ef      	b.n	801d9de <__ieee754_sqrt+0x13a>
 801d9fe:	4680      	mov	r8, r0
 801da00:	e7bd      	b.n	801d97e <__ieee754_sqrt+0xda>
 801da02:	bf00      	nop
 801da04:	7ff00000 	.word	0x7ff00000

0801da08 <__ieee754_sqrtf>:
 801da08:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801da0c:	4770      	bx	lr

0801da0e <with_errno>:
 801da0e:	b570      	push	{r4, r5, r6, lr}
 801da10:	4604      	mov	r4, r0
 801da12:	460d      	mov	r5, r1
 801da14:	4616      	mov	r6, r2
 801da16:	f000 f8e3 	bl	801dbe0 <__errno>
 801da1a:	4629      	mov	r1, r5
 801da1c:	6006      	str	r6, [r0, #0]
 801da1e:	4620      	mov	r0, r4
 801da20:	bd70      	pop	{r4, r5, r6, pc}

0801da22 <xflow>:
 801da22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801da24:	4614      	mov	r4, r2
 801da26:	461d      	mov	r5, r3
 801da28:	b108      	cbz	r0, 801da2e <xflow+0xc>
 801da2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801da2e:	e9cd 2300 	strd	r2, r3, [sp]
 801da32:	e9dd 2300 	ldrd	r2, r3, [sp]
 801da36:	4620      	mov	r0, r4
 801da38:	4629      	mov	r1, r5
 801da3a:	f7e2 fddd 	bl	80005f8 <__aeabi_dmul>
 801da3e:	2222      	movs	r2, #34	; 0x22
 801da40:	b003      	add	sp, #12
 801da42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801da46:	f7ff bfe2 	b.w	801da0e <with_errno>

0801da4a <__math_uflow>:
 801da4a:	b508      	push	{r3, lr}
 801da4c:	2200      	movs	r2, #0
 801da4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801da52:	f7ff ffe6 	bl	801da22 <xflow>
 801da56:	ec41 0b10 	vmov	d0, r0, r1
 801da5a:	bd08      	pop	{r3, pc}

0801da5c <__math_oflow>:
 801da5c:	b508      	push	{r3, lr}
 801da5e:	2200      	movs	r2, #0
 801da60:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801da64:	f7ff ffdd 	bl	801da22 <xflow>
 801da68:	ec41 0b10 	vmov	d0, r0, r1
 801da6c:	bd08      	pop	{r3, pc}

0801da6e <fabs>:
 801da6e:	ec51 0b10 	vmov	r0, r1, d0
 801da72:	ee10 2a10 	vmov	r2, s0
 801da76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801da7a:	ec43 2b10 	vmov	d0, r2, r3
 801da7e:	4770      	bx	lr

0801da80 <finite>:
 801da80:	b082      	sub	sp, #8
 801da82:	ed8d 0b00 	vstr	d0, [sp]
 801da86:	9801      	ldr	r0, [sp, #4]
 801da88:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801da8c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801da90:	0fc0      	lsrs	r0, r0, #31
 801da92:	b002      	add	sp, #8
 801da94:	4770      	bx	lr
	...

0801da98 <scalbn>:
 801da98:	b570      	push	{r4, r5, r6, lr}
 801da9a:	ec55 4b10 	vmov	r4, r5, d0
 801da9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801daa2:	4606      	mov	r6, r0
 801daa4:	462b      	mov	r3, r5
 801daa6:	b99a      	cbnz	r2, 801dad0 <scalbn+0x38>
 801daa8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801daac:	4323      	orrs	r3, r4
 801daae:	d036      	beq.n	801db1e <scalbn+0x86>
 801dab0:	4b39      	ldr	r3, [pc, #228]	; (801db98 <scalbn+0x100>)
 801dab2:	4629      	mov	r1, r5
 801dab4:	ee10 0a10 	vmov	r0, s0
 801dab8:	2200      	movs	r2, #0
 801daba:	f7e2 fd9d 	bl	80005f8 <__aeabi_dmul>
 801dabe:	4b37      	ldr	r3, [pc, #220]	; (801db9c <scalbn+0x104>)
 801dac0:	429e      	cmp	r6, r3
 801dac2:	4604      	mov	r4, r0
 801dac4:	460d      	mov	r5, r1
 801dac6:	da10      	bge.n	801daea <scalbn+0x52>
 801dac8:	a32b      	add	r3, pc, #172	; (adr r3, 801db78 <scalbn+0xe0>)
 801daca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dace:	e03a      	b.n	801db46 <scalbn+0xae>
 801dad0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801dad4:	428a      	cmp	r2, r1
 801dad6:	d10c      	bne.n	801daf2 <scalbn+0x5a>
 801dad8:	ee10 2a10 	vmov	r2, s0
 801dadc:	4620      	mov	r0, r4
 801dade:	4629      	mov	r1, r5
 801dae0:	f7e2 fbd4 	bl	800028c <__adddf3>
 801dae4:	4604      	mov	r4, r0
 801dae6:	460d      	mov	r5, r1
 801dae8:	e019      	b.n	801db1e <scalbn+0x86>
 801daea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801daee:	460b      	mov	r3, r1
 801daf0:	3a36      	subs	r2, #54	; 0x36
 801daf2:	4432      	add	r2, r6
 801daf4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801daf8:	428a      	cmp	r2, r1
 801dafa:	dd08      	ble.n	801db0e <scalbn+0x76>
 801dafc:	2d00      	cmp	r5, #0
 801dafe:	a120      	add	r1, pc, #128	; (adr r1, 801db80 <scalbn+0xe8>)
 801db00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db04:	da1c      	bge.n	801db40 <scalbn+0xa8>
 801db06:	a120      	add	r1, pc, #128	; (adr r1, 801db88 <scalbn+0xf0>)
 801db08:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db0c:	e018      	b.n	801db40 <scalbn+0xa8>
 801db0e:	2a00      	cmp	r2, #0
 801db10:	dd08      	ble.n	801db24 <scalbn+0x8c>
 801db12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801db16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801db1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801db1e:	ec45 4b10 	vmov	d0, r4, r5
 801db22:	bd70      	pop	{r4, r5, r6, pc}
 801db24:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801db28:	da19      	bge.n	801db5e <scalbn+0xc6>
 801db2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801db2e:	429e      	cmp	r6, r3
 801db30:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801db34:	dd0a      	ble.n	801db4c <scalbn+0xb4>
 801db36:	a112      	add	r1, pc, #72	; (adr r1, 801db80 <scalbn+0xe8>)
 801db38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db3c:	2b00      	cmp	r3, #0
 801db3e:	d1e2      	bne.n	801db06 <scalbn+0x6e>
 801db40:	a30f      	add	r3, pc, #60	; (adr r3, 801db80 <scalbn+0xe8>)
 801db42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db46:	f7e2 fd57 	bl	80005f8 <__aeabi_dmul>
 801db4a:	e7cb      	b.n	801dae4 <scalbn+0x4c>
 801db4c:	a10a      	add	r1, pc, #40	; (adr r1, 801db78 <scalbn+0xe0>)
 801db4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db52:	2b00      	cmp	r3, #0
 801db54:	d0b8      	beq.n	801dac8 <scalbn+0x30>
 801db56:	a10e      	add	r1, pc, #56	; (adr r1, 801db90 <scalbn+0xf8>)
 801db58:	e9d1 0100 	ldrd	r0, r1, [r1]
 801db5c:	e7b4      	b.n	801dac8 <scalbn+0x30>
 801db5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801db62:	3236      	adds	r2, #54	; 0x36
 801db64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801db68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801db6c:	4620      	mov	r0, r4
 801db6e:	4b0c      	ldr	r3, [pc, #48]	; (801dba0 <scalbn+0x108>)
 801db70:	2200      	movs	r2, #0
 801db72:	e7e8      	b.n	801db46 <scalbn+0xae>
 801db74:	f3af 8000 	nop.w
 801db78:	c2f8f359 	.word	0xc2f8f359
 801db7c:	01a56e1f 	.word	0x01a56e1f
 801db80:	8800759c 	.word	0x8800759c
 801db84:	7e37e43c 	.word	0x7e37e43c
 801db88:	8800759c 	.word	0x8800759c
 801db8c:	fe37e43c 	.word	0xfe37e43c
 801db90:	c2f8f359 	.word	0xc2f8f359
 801db94:	81a56e1f 	.word	0x81a56e1f
 801db98:	43500000 	.word	0x43500000
 801db9c:	ffff3cb0 	.word	0xffff3cb0
 801dba0:	3c900000 	.word	0x3c900000

0801dba4 <__assert_func>:
 801dba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dba6:	4614      	mov	r4, r2
 801dba8:	461a      	mov	r2, r3
 801dbaa:	4b09      	ldr	r3, [pc, #36]	; (801dbd0 <__assert_func+0x2c>)
 801dbac:	681b      	ldr	r3, [r3, #0]
 801dbae:	4605      	mov	r5, r0
 801dbb0:	68d8      	ldr	r0, [r3, #12]
 801dbb2:	b14c      	cbz	r4, 801dbc8 <__assert_func+0x24>
 801dbb4:	4b07      	ldr	r3, [pc, #28]	; (801dbd4 <__assert_func+0x30>)
 801dbb6:	9100      	str	r1, [sp, #0]
 801dbb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dbbc:	4906      	ldr	r1, [pc, #24]	; (801dbd8 <__assert_func+0x34>)
 801dbbe:	462b      	mov	r3, r5
 801dbc0:	f000 f814 	bl	801dbec <fiprintf>
 801dbc4:	f000 fc0c 	bl	801e3e0 <abort>
 801dbc8:	4b04      	ldr	r3, [pc, #16]	; (801dbdc <__assert_func+0x38>)
 801dbca:	461c      	mov	r4, r3
 801dbcc:	e7f3      	b.n	801dbb6 <__assert_func+0x12>
 801dbce:	bf00      	nop
 801dbd0:	20000068 	.word	0x20000068
 801dbd4:	08029c50 	.word	0x08029c50
 801dbd8:	08029c5d 	.word	0x08029c5d
 801dbdc:	08029c8b 	.word	0x08029c8b

0801dbe0 <__errno>:
 801dbe0:	4b01      	ldr	r3, [pc, #4]	; (801dbe8 <__errno+0x8>)
 801dbe2:	6818      	ldr	r0, [r3, #0]
 801dbe4:	4770      	bx	lr
 801dbe6:	bf00      	nop
 801dbe8:	20000068 	.word	0x20000068

0801dbec <fiprintf>:
 801dbec:	b40e      	push	{r1, r2, r3}
 801dbee:	b503      	push	{r0, r1, lr}
 801dbf0:	4601      	mov	r1, r0
 801dbf2:	ab03      	add	r3, sp, #12
 801dbf4:	4805      	ldr	r0, [pc, #20]	; (801dc0c <fiprintf+0x20>)
 801dbf6:	f853 2b04 	ldr.w	r2, [r3], #4
 801dbfa:	6800      	ldr	r0, [r0, #0]
 801dbfc:	9301      	str	r3, [sp, #4]
 801dbfe:	f000 f86b 	bl	801dcd8 <_vfiprintf_r>
 801dc02:	b002      	add	sp, #8
 801dc04:	f85d eb04 	ldr.w	lr, [sp], #4
 801dc08:	b003      	add	sp, #12
 801dc0a:	4770      	bx	lr
 801dc0c:	20000068 	.word	0x20000068

0801dc10 <__libc_init_array>:
 801dc10:	b570      	push	{r4, r5, r6, lr}
 801dc12:	4d0d      	ldr	r5, [pc, #52]	; (801dc48 <__libc_init_array+0x38>)
 801dc14:	4c0d      	ldr	r4, [pc, #52]	; (801dc4c <__libc_init_array+0x3c>)
 801dc16:	1b64      	subs	r4, r4, r5
 801dc18:	10a4      	asrs	r4, r4, #2
 801dc1a:	2600      	movs	r6, #0
 801dc1c:	42a6      	cmp	r6, r4
 801dc1e:	d109      	bne.n	801dc34 <__libc_init_array+0x24>
 801dc20:	4d0b      	ldr	r5, [pc, #44]	; (801dc50 <__libc_init_array+0x40>)
 801dc22:	4c0c      	ldr	r4, [pc, #48]	; (801dc54 <__libc_init_array+0x44>)
 801dc24:	f000 fff0 	bl	801ec08 <_init>
 801dc28:	1b64      	subs	r4, r4, r5
 801dc2a:	10a4      	asrs	r4, r4, #2
 801dc2c:	2600      	movs	r6, #0
 801dc2e:	42a6      	cmp	r6, r4
 801dc30:	d105      	bne.n	801dc3e <__libc_init_array+0x2e>
 801dc32:	bd70      	pop	{r4, r5, r6, pc}
 801dc34:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc38:	4798      	blx	r3
 801dc3a:	3601      	adds	r6, #1
 801dc3c:	e7ee      	b.n	801dc1c <__libc_init_array+0xc>
 801dc3e:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc42:	4798      	blx	r3
 801dc44:	3601      	adds	r6, #1
 801dc46:	e7f2      	b.n	801dc2e <__libc_init_array+0x1e>
 801dc48:	08029d2c 	.word	0x08029d2c
 801dc4c:	08029d2c 	.word	0x08029d2c
 801dc50:	08029d2c 	.word	0x08029d2c
 801dc54:	08029d34 	.word	0x08029d34

0801dc58 <memcpy>:
 801dc58:	440a      	add	r2, r1
 801dc5a:	4291      	cmp	r1, r2
 801dc5c:	f100 33ff 	add.w	r3, r0, #4294967295
 801dc60:	d100      	bne.n	801dc64 <memcpy+0xc>
 801dc62:	4770      	bx	lr
 801dc64:	b510      	push	{r4, lr}
 801dc66:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dc6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dc6e:	4291      	cmp	r1, r2
 801dc70:	d1f9      	bne.n	801dc66 <memcpy+0xe>
 801dc72:	bd10      	pop	{r4, pc}

0801dc74 <memset>:
 801dc74:	4402      	add	r2, r0
 801dc76:	4603      	mov	r3, r0
 801dc78:	4293      	cmp	r3, r2
 801dc7a:	d100      	bne.n	801dc7e <memset+0xa>
 801dc7c:	4770      	bx	lr
 801dc7e:	f803 1b01 	strb.w	r1, [r3], #1
 801dc82:	e7f9      	b.n	801dc78 <memset+0x4>

0801dc84 <__sfputc_r>:
 801dc84:	6893      	ldr	r3, [r2, #8]
 801dc86:	3b01      	subs	r3, #1
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	b410      	push	{r4}
 801dc8c:	6093      	str	r3, [r2, #8]
 801dc8e:	da08      	bge.n	801dca2 <__sfputc_r+0x1e>
 801dc90:	6994      	ldr	r4, [r2, #24]
 801dc92:	42a3      	cmp	r3, r4
 801dc94:	db01      	blt.n	801dc9a <__sfputc_r+0x16>
 801dc96:	290a      	cmp	r1, #10
 801dc98:	d103      	bne.n	801dca2 <__sfputc_r+0x1e>
 801dc9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dc9e:	f000 badf 	b.w	801e260 <__swbuf_r>
 801dca2:	6813      	ldr	r3, [r2, #0]
 801dca4:	1c58      	adds	r0, r3, #1
 801dca6:	6010      	str	r0, [r2, #0]
 801dca8:	7019      	strb	r1, [r3, #0]
 801dcaa:	4608      	mov	r0, r1
 801dcac:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dcb0:	4770      	bx	lr

0801dcb2 <__sfputs_r>:
 801dcb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcb4:	4606      	mov	r6, r0
 801dcb6:	460f      	mov	r7, r1
 801dcb8:	4614      	mov	r4, r2
 801dcba:	18d5      	adds	r5, r2, r3
 801dcbc:	42ac      	cmp	r4, r5
 801dcbe:	d101      	bne.n	801dcc4 <__sfputs_r+0x12>
 801dcc0:	2000      	movs	r0, #0
 801dcc2:	e007      	b.n	801dcd4 <__sfputs_r+0x22>
 801dcc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dcc8:	463a      	mov	r2, r7
 801dcca:	4630      	mov	r0, r6
 801dccc:	f7ff ffda 	bl	801dc84 <__sfputc_r>
 801dcd0:	1c43      	adds	r3, r0, #1
 801dcd2:	d1f3      	bne.n	801dcbc <__sfputs_r+0xa>
 801dcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dcd8 <_vfiprintf_r>:
 801dcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcdc:	460d      	mov	r5, r1
 801dcde:	b09d      	sub	sp, #116	; 0x74
 801dce0:	4614      	mov	r4, r2
 801dce2:	4698      	mov	r8, r3
 801dce4:	4606      	mov	r6, r0
 801dce6:	b118      	cbz	r0, 801dcf0 <_vfiprintf_r+0x18>
 801dce8:	6983      	ldr	r3, [r0, #24]
 801dcea:	b90b      	cbnz	r3, 801dcf0 <_vfiprintf_r+0x18>
 801dcec:	f000 fc9a 	bl	801e624 <__sinit>
 801dcf0:	4b89      	ldr	r3, [pc, #548]	; (801df18 <_vfiprintf_r+0x240>)
 801dcf2:	429d      	cmp	r5, r3
 801dcf4:	d11b      	bne.n	801dd2e <_vfiprintf_r+0x56>
 801dcf6:	6875      	ldr	r5, [r6, #4]
 801dcf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dcfa:	07d9      	lsls	r1, r3, #31
 801dcfc:	d405      	bmi.n	801dd0a <_vfiprintf_r+0x32>
 801dcfe:	89ab      	ldrh	r3, [r5, #12]
 801dd00:	059a      	lsls	r2, r3, #22
 801dd02:	d402      	bmi.n	801dd0a <_vfiprintf_r+0x32>
 801dd04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dd06:	f000 fd2b 	bl	801e760 <__retarget_lock_acquire_recursive>
 801dd0a:	89ab      	ldrh	r3, [r5, #12]
 801dd0c:	071b      	lsls	r3, r3, #28
 801dd0e:	d501      	bpl.n	801dd14 <_vfiprintf_r+0x3c>
 801dd10:	692b      	ldr	r3, [r5, #16]
 801dd12:	b9eb      	cbnz	r3, 801dd50 <_vfiprintf_r+0x78>
 801dd14:	4629      	mov	r1, r5
 801dd16:	4630      	mov	r0, r6
 801dd18:	f000 faf4 	bl	801e304 <__swsetup_r>
 801dd1c:	b1c0      	cbz	r0, 801dd50 <_vfiprintf_r+0x78>
 801dd1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dd20:	07dc      	lsls	r4, r3, #31
 801dd22:	d50e      	bpl.n	801dd42 <_vfiprintf_r+0x6a>
 801dd24:	f04f 30ff 	mov.w	r0, #4294967295
 801dd28:	b01d      	add	sp, #116	; 0x74
 801dd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd2e:	4b7b      	ldr	r3, [pc, #492]	; (801df1c <_vfiprintf_r+0x244>)
 801dd30:	429d      	cmp	r5, r3
 801dd32:	d101      	bne.n	801dd38 <_vfiprintf_r+0x60>
 801dd34:	68b5      	ldr	r5, [r6, #8]
 801dd36:	e7df      	b.n	801dcf8 <_vfiprintf_r+0x20>
 801dd38:	4b79      	ldr	r3, [pc, #484]	; (801df20 <_vfiprintf_r+0x248>)
 801dd3a:	429d      	cmp	r5, r3
 801dd3c:	bf08      	it	eq
 801dd3e:	68f5      	ldreq	r5, [r6, #12]
 801dd40:	e7da      	b.n	801dcf8 <_vfiprintf_r+0x20>
 801dd42:	89ab      	ldrh	r3, [r5, #12]
 801dd44:	0598      	lsls	r0, r3, #22
 801dd46:	d4ed      	bmi.n	801dd24 <_vfiprintf_r+0x4c>
 801dd48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dd4a:	f000 fd0a 	bl	801e762 <__retarget_lock_release_recursive>
 801dd4e:	e7e9      	b.n	801dd24 <_vfiprintf_r+0x4c>
 801dd50:	2300      	movs	r3, #0
 801dd52:	9309      	str	r3, [sp, #36]	; 0x24
 801dd54:	2320      	movs	r3, #32
 801dd56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dd5a:	f8cd 800c 	str.w	r8, [sp, #12]
 801dd5e:	2330      	movs	r3, #48	; 0x30
 801dd60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801df24 <_vfiprintf_r+0x24c>
 801dd64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dd68:	f04f 0901 	mov.w	r9, #1
 801dd6c:	4623      	mov	r3, r4
 801dd6e:	469a      	mov	sl, r3
 801dd70:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dd74:	b10a      	cbz	r2, 801dd7a <_vfiprintf_r+0xa2>
 801dd76:	2a25      	cmp	r2, #37	; 0x25
 801dd78:	d1f9      	bne.n	801dd6e <_vfiprintf_r+0x96>
 801dd7a:	ebba 0b04 	subs.w	fp, sl, r4
 801dd7e:	d00b      	beq.n	801dd98 <_vfiprintf_r+0xc0>
 801dd80:	465b      	mov	r3, fp
 801dd82:	4622      	mov	r2, r4
 801dd84:	4629      	mov	r1, r5
 801dd86:	4630      	mov	r0, r6
 801dd88:	f7ff ff93 	bl	801dcb2 <__sfputs_r>
 801dd8c:	3001      	adds	r0, #1
 801dd8e:	f000 80aa 	beq.w	801dee6 <_vfiprintf_r+0x20e>
 801dd92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dd94:	445a      	add	r2, fp
 801dd96:	9209      	str	r2, [sp, #36]	; 0x24
 801dd98:	f89a 3000 	ldrb.w	r3, [sl]
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	f000 80a2 	beq.w	801dee6 <_vfiprintf_r+0x20e>
 801dda2:	2300      	movs	r3, #0
 801dda4:	f04f 32ff 	mov.w	r2, #4294967295
 801dda8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ddac:	f10a 0a01 	add.w	sl, sl, #1
 801ddb0:	9304      	str	r3, [sp, #16]
 801ddb2:	9307      	str	r3, [sp, #28]
 801ddb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ddb8:	931a      	str	r3, [sp, #104]	; 0x68
 801ddba:	4654      	mov	r4, sl
 801ddbc:	2205      	movs	r2, #5
 801ddbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ddc2:	4858      	ldr	r0, [pc, #352]	; (801df24 <_vfiprintf_r+0x24c>)
 801ddc4:	f7e2 fa0c 	bl	80001e0 <memchr>
 801ddc8:	9a04      	ldr	r2, [sp, #16]
 801ddca:	b9d8      	cbnz	r0, 801de04 <_vfiprintf_r+0x12c>
 801ddcc:	06d1      	lsls	r1, r2, #27
 801ddce:	bf44      	itt	mi
 801ddd0:	2320      	movmi	r3, #32
 801ddd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ddd6:	0713      	lsls	r3, r2, #28
 801ddd8:	bf44      	itt	mi
 801ddda:	232b      	movmi	r3, #43	; 0x2b
 801dddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dde0:	f89a 3000 	ldrb.w	r3, [sl]
 801dde4:	2b2a      	cmp	r3, #42	; 0x2a
 801dde6:	d015      	beq.n	801de14 <_vfiprintf_r+0x13c>
 801dde8:	9a07      	ldr	r2, [sp, #28]
 801ddea:	4654      	mov	r4, sl
 801ddec:	2000      	movs	r0, #0
 801ddee:	f04f 0c0a 	mov.w	ip, #10
 801ddf2:	4621      	mov	r1, r4
 801ddf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ddf8:	3b30      	subs	r3, #48	; 0x30
 801ddfa:	2b09      	cmp	r3, #9
 801ddfc:	d94e      	bls.n	801de9c <_vfiprintf_r+0x1c4>
 801ddfe:	b1b0      	cbz	r0, 801de2e <_vfiprintf_r+0x156>
 801de00:	9207      	str	r2, [sp, #28]
 801de02:	e014      	b.n	801de2e <_vfiprintf_r+0x156>
 801de04:	eba0 0308 	sub.w	r3, r0, r8
 801de08:	fa09 f303 	lsl.w	r3, r9, r3
 801de0c:	4313      	orrs	r3, r2
 801de0e:	9304      	str	r3, [sp, #16]
 801de10:	46a2      	mov	sl, r4
 801de12:	e7d2      	b.n	801ddba <_vfiprintf_r+0xe2>
 801de14:	9b03      	ldr	r3, [sp, #12]
 801de16:	1d19      	adds	r1, r3, #4
 801de18:	681b      	ldr	r3, [r3, #0]
 801de1a:	9103      	str	r1, [sp, #12]
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	bfbb      	ittet	lt
 801de20:	425b      	neglt	r3, r3
 801de22:	f042 0202 	orrlt.w	r2, r2, #2
 801de26:	9307      	strge	r3, [sp, #28]
 801de28:	9307      	strlt	r3, [sp, #28]
 801de2a:	bfb8      	it	lt
 801de2c:	9204      	strlt	r2, [sp, #16]
 801de2e:	7823      	ldrb	r3, [r4, #0]
 801de30:	2b2e      	cmp	r3, #46	; 0x2e
 801de32:	d10c      	bne.n	801de4e <_vfiprintf_r+0x176>
 801de34:	7863      	ldrb	r3, [r4, #1]
 801de36:	2b2a      	cmp	r3, #42	; 0x2a
 801de38:	d135      	bne.n	801dea6 <_vfiprintf_r+0x1ce>
 801de3a:	9b03      	ldr	r3, [sp, #12]
 801de3c:	1d1a      	adds	r2, r3, #4
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	9203      	str	r2, [sp, #12]
 801de42:	2b00      	cmp	r3, #0
 801de44:	bfb8      	it	lt
 801de46:	f04f 33ff 	movlt.w	r3, #4294967295
 801de4a:	3402      	adds	r4, #2
 801de4c:	9305      	str	r3, [sp, #20]
 801de4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801df34 <_vfiprintf_r+0x25c>
 801de52:	7821      	ldrb	r1, [r4, #0]
 801de54:	2203      	movs	r2, #3
 801de56:	4650      	mov	r0, sl
 801de58:	f7e2 f9c2 	bl	80001e0 <memchr>
 801de5c:	b140      	cbz	r0, 801de70 <_vfiprintf_r+0x198>
 801de5e:	2340      	movs	r3, #64	; 0x40
 801de60:	eba0 000a 	sub.w	r0, r0, sl
 801de64:	fa03 f000 	lsl.w	r0, r3, r0
 801de68:	9b04      	ldr	r3, [sp, #16]
 801de6a:	4303      	orrs	r3, r0
 801de6c:	3401      	adds	r4, #1
 801de6e:	9304      	str	r3, [sp, #16]
 801de70:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de74:	482c      	ldr	r0, [pc, #176]	; (801df28 <_vfiprintf_r+0x250>)
 801de76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801de7a:	2206      	movs	r2, #6
 801de7c:	f7e2 f9b0 	bl	80001e0 <memchr>
 801de80:	2800      	cmp	r0, #0
 801de82:	d03f      	beq.n	801df04 <_vfiprintf_r+0x22c>
 801de84:	4b29      	ldr	r3, [pc, #164]	; (801df2c <_vfiprintf_r+0x254>)
 801de86:	bb1b      	cbnz	r3, 801ded0 <_vfiprintf_r+0x1f8>
 801de88:	9b03      	ldr	r3, [sp, #12]
 801de8a:	3307      	adds	r3, #7
 801de8c:	f023 0307 	bic.w	r3, r3, #7
 801de90:	3308      	adds	r3, #8
 801de92:	9303      	str	r3, [sp, #12]
 801de94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de96:	443b      	add	r3, r7
 801de98:	9309      	str	r3, [sp, #36]	; 0x24
 801de9a:	e767      	b.n	801dd6c <_vfiprintf_r+0x94>
 801de9c:	fb0c 3202 	mla	r2, ip, r2, r3
 801dea0:	460c      	mov	r4, r1
 801dea2:	2001      	movs	r0, #1
 801dea4:	e7a5      	b.n	801ddf2 <_vfiprintf_r+0x11a>
 801dea6:	2300      	movs	r3, #0
 801dea8:	3401      	adds	r4, #1
 801deaa:	9305      	str	r3, [sp, #20]
 801deac:	4619      	mov	r1, r3
 801deae:	f04f 0c0a 	mov.w	ip, #10
 801deb2:	4620      	mov	r0, r4
 801deb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801deb8:	3a30      	subs	r2, #48	; 0x30
 801deba:	2a09      	cmp	r2, #9
 801debc:	d903      	bls.n	801dec6 <_vfiprintf_r+0x1ee>
 801debe:	2b00      	cmp	r3, #0
 801dec0:	d0c5      	beq.n	801de4e <_vfiprintf_r+0x176>
 801dec2:	9105      	str	r1, [sp, #20]
 801dec4:	e7c3      	b.n	801de4e <_vfiprintf_r+0x176>
 801dec6:	fb0c 2101 	mla	r1, ip, r1, r2
 801deca:	4604      	mov	r4, r0
 801decc:	2301      	movs	r3, #1
 801dece:	e7f0      	b.n	801deb2 <_vfiprintf_r+0x1da>
 801ded0:	ab03      	add	r3, sp, #12
 801ded2:	9300      	str	r3, [sp, #0]
 801ded4:	462a      	mov	r2, r5
 801ded6:	4b16      	ldr	r3, [pc, #88]	; (801df30 <_vfiprintf_r+0x258>)
 801ded8:	a904      	add	r1, sp, #16
 801deda:	4630      	mov	r0, r6
 801dedc:	f3af 8000 	nop.w
 801dee0:	4607      	mov	r7, r0
 801dee2:	1c78      	adds	r0, r7, #1
 801dee4:	d1d6      	bne.n	801de94 <_vfiprintf_r+0x1bc>
 801dee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dee8:	07d9      	lsls	r1, r3, #31
 801deea:	d405      	bmi.n	801def8 <_vfiprintf_r+0x220>
 801deec:	89ab      	ldrh	r3, [r5, #12]
 801deee:	059a      	lsls	r2, r3, #22
 801def0:	d402      	bmi.n	801def8 <_vfiprintf_r+0x220>
 801def2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801def4:	f000 fc35 	bl	801e762 <__retarget_lock_release_recursive>
 801def8:	89ab      	ldrh	r3, [r5, #12]
 801defa:	065b      	lsls	r3, r3, #25
 801defc:	f53f af12 	bmi.w	801dd24 <_vfiprintf_r+0x4c>
 801df00:	9809      	ldr	r0, [sp, #36]	; 0x24
 801df02:	e711      	b.n	801dd28 <_vfiprintf_r+0x50>
 801df04:	ab03      	add	r3, sp, #12
 801df06:	9300      	str	r3, [sp, #0]
 801df08:	462a      	mov	r2, r5
 801df0a:	4b09      	ldr	r3, [pc, #36]	; (801df30 <_vfiprintf_r+0x258>)
 801df0c:	a904      	add	r1, sp, #16
 801df0e:	4630      	mov	r0, r6
 801df10:	f000 f880 	bl	801e014 <_printf_i>
 801df14:	e7e4      	b.n	801dee0 <_vfiprintf_r+0x208>
 801df16:	bf00      	nop
 801df18:	08029ce4 	.word	0x08029ce4
 801df1c:	08029d04 	.word	0x08029d04
 801df20:	08029cc4 	.word	0x08029cc4
 801df24:	08029c90 	.word	0x08029c90
 801df28:	08029c9a 	.word	0x08029c9a
 801df2c:	00000000 	.word	0x00000000
 801df30:	0801dcb3 	.word	0x0801dcb3
 801df34:	08029c96 	.word	0x08029c96

0801df38 <_printf_common>:
 801df38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df3c:	4616      	mov	r6, r2
 801df3e:	4699      	mov	r9, r3
 801df40:	688a      	ldr	r2, [r1, #8]
 801df42:	690b      	ldr	r3, [r1, #16]
 801df44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801df48:	4293      	cmp	r3, r2
 801df4a:	bfb8      	it	lt
 801df4c:	4613      	movlt	r3, r2
 801df4e:	6033      	str	r3, [r6, #0]
 801df50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801df54:	4607      	mov	r7, r0
 801df56:	460c      	mov	r4, r1
 801df58:	b10a      	cbz	r2, 801df5e <_printf_common+0x26>
 801df5a:	3301      	adds	r3, #1
 801df5c:	6033      	str	r3, [r6, #0]
 801df5e:	6823      	ldr	r3, [r4, #0]
 801df60:	0699      	lsls	r1, r3, #26
 801df62:	bf42      	ittt	mi
 801df64:	6833      	ldrmi	r3, [r6, #0]
 801df66:	3302      	addmi	r3, #2
 801df68:	6033      	strmi	r3, [r6, #0]
 801df6a:	6825      	ldr	r5, [r4, #0]
 801df6c:	f015 0506 	ands.w	r5, r5, #6
 801df70:	d106      	bne.n	801df80 <_printf_common+0x48>
 801df72:	f104 0a19 	add.w	sl, r4, #25
 801df76:	68e3      	ldr	r3, [r4, #12]
 801df78:	6832      	ldr	r2, [r6, #0]
 801df7a:	1a9b      	subs	r3, r3, r2
 801df7c:	42ab      	cmp	r3, r5
 801df7e:	dc26      	bgt.n	801dfce <_printf_common+0x96>
 801df80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801df84:	1e13      	subs	r3, r2, #0
 801df86:	6822      	ldr	r2, [r4, #0]
 801df88:	bf18      	it	ne
 801df8a:	2301      	movne	r3, #1
 801df8c:	0692      	lsls	r2, r2, #26
 801df8e:	d42b      	bmi.n	801dfe8 <_printf_common+0xb0>
 801df90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801df94:	4649      	mov	r1, r9
 801df96:	4638      	mov	r0, r7
 801df98:	47c0      	blx	r8
 801df9a:	3001      	adds	r0, #1
 801df9c:	d01e      	beq.n	801dfdc <_printf_common+0xa4>
 801df9e:	6823      	ldr	r3, [r4, #0]
 801dfa0:	68e5      	ldr	r5, [r4, #12]
 801dfa2:	6832      	ldr	r2, [r6, #0]
 801dfa4:	f003 0306 	and.w	r3, r3, #6
 801dfa8:	2b04      	cmp	r3, #4
 801dfaa:	bf08      	it	eq
 801dfac:	1aad      	subeq	r5, r5, r2
 801dfae:	68a3      	ldr	r3, [r4, #8]
 801dfb0:	6922      	ldr	r2, [r4, #16]
 801dfb2:	bf0c      	ite	eq
 801dfb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dfb8:	2500      	movne	r5, #0
 801dfba:	4293      	cmp	r3, r2
 801dfbc:	bfc4      	itt	gt
 801dfbe:	1a9b      	subgt	r3, r3, r2
 801dfc0:	18ed      	addgt	r5, r5, r3
 801dfc2:	2600      	movs	r6, #0
 801dfc4:	341a      	adds	r4, #26
 801dfc6:	42b5      	cmp	r5, r6
 801dfc8:	d11a      	bne.n	801e000 <_printf_common+0xc8>
 801dfca:	2000      	movs	r0, #0
 801dfcc:	e008      	b.n	801dfe0 <_printf_common+0xa8>
 801dfce:	2301      	movs	r3, #1
 801dfd0:	4652      	mov	r2, sl
 801dfd2:	4649      	mov	r1, r9
 801dfd4:	4638      	mov	r0, r7
 801dfd6:	47c0      	blx	r8
 801dfd8:	3001      	adds	r0, #1
 801dfda:	d103      	bne.n	801dfe4 <_printf_common+0xac>
 801dfdc:	f04f 30ff 	mov.w	r0, #4294967295
 801dfe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dfe4:	3501      	adds	r5, #1
 801dfe6:	e7c6      	b.n	801df76 <_printf_common+0x3e>
 801dfe8:	18e1      	adds	r1, r4, r3
 801dfea:	1c5a      	adds	r2, r3, #1
 801dfec:	2030      	movs	r0, #48	; 0x30
 801dfee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801dff2:	4422      	add	r2, r4
 801dff4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801dff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801dffc:	3302      	adds	r3, #2
 801dffe:	e7c7      	b.n	801df90 <_printf_common+0x58>
 801e000:	2301      	movs	r3, #1
 801e002:	4622      	mov	r2, r4
 801e004:	4649      	mov	r1, r9
 801e006:	4638      	mov	r0, r7
 801e008:	47c0      	blx	r8
 801e00a:	3001      	adds	r0, #1
 801e00c:	d0e6      	beq.n	801dfdc <_printf_common+0xa4>
 801e00e:	3601      	adds	r6, #1
 801e010:	e7d9      	b.n	801dfc6 <_printf_common+0x8e>
	...

0801e014 <_printf_i>:
 801e014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e018:	7e0f      	ldrb	r7, [r1, #24]
 801e01a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e01c:	2f78      	cmp	r7, #120	; 0x78
 801e01e:	4691      	mov	r9, r2
 801e020:	4680      	mov	r8, r0
 801e022:	460c      	mov	r4, r1
 801e024:	469a      	mov	sl, r3
 801e026:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e02a:	d807      	bhi.n	801e03c <_printf_i+0x28>
 801e02c:	2f62      	cmp	r7, #98	; 0x62
 801e02e:	d80a      	bhi.n	801e046 <_printf_i+0x32>
 801e030:	2f00      	cmp	r7, #0
 801e032:	f000 80d8 	beq.w	801e1e6 <_printf_i+0x1d2>
 801e036:	2f58      	cmp	r7, #88	; 0x58
 801e038:	f000 80a3 	beq.w	801e182 <_printf_i+0x16e>
 801e03c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e044:	e03a      	b.n	801e0bc <_printf_i+0xa8>
 801e046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e04a:	2b15      	cmp	r3, #21
 801e04c:	d8f6      	bhi.n	801e03c <_printf_i+0x28>
 801e04e:	a101      	add	r1, pc, #4	; (adr r1, 801e054 <_printf_i+0x40>)
 801e050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e054:	0801e0ad 	.word	0x0801e0ad
 801e058:	0801e0c1 	.word	0x0801e0c1
 801e05c:	0801e03d 	.word	0x0801e03d
 801e060:	0801e03d 	.word	0x0801e03d
 801e064:	0801e03d 	.word	0x0801e03d
 801e068:	0801e03d 	.word	0x0801e03d
 801e06c:	0801e0c1 	.word	0x0801e0c1
 801e070:	0801e03d 	.word	0x0801e03d
 801e074:	0801e03d 	.word	0x0801e03d
 801e078:	0801e03d 	.word	0x0801e03d
 801e07c:	0801e03d 	.word	0x0801e03d
 801e080:	0801e1cd 	.word	0x0801e1cd
 801e084:	0801e0f1 	.word	0x0801e0f1
 801e088:	0801e1af 	.word	0x0801e1af
 801e08c:	0801e03d 	.word	0x0801e03d
 801e090:	0801e03d 	.word	0x0801e03d
 801e094:	0801e1ef 	.word	0x0801e1ef
 801e098:	0801e03d 	.word	0x0801e03d
 801e09c:	0801e0f1 	.word	0x0801e0f1
 801e0a0:	0801e03d 	.word	0x0801e03d
 801e0a4:	0801e03d 	.word	0x0801e03d
 801e0a8:	0801e1b7 	.word	0x0801e1b7
 801e0ac:	682b      	ldr	r3, [r5, #0]
 801e0ae:	1d1a      	adds	r2, r3, #4
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	602a      	str	r2, [r5, #0]
 801e0b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e0b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e0bc:	2301      	movs	r3, #1
 801e0be:	e0a3      	b.n	801e208 <_printf_i+0x1f4>
 801e0c0:	6820      	ldr	r0, [r4, #0]
 801e0c2:	6829      	ldr	r1, [r5, #0]
 801e0c4:	0606      	lsls	r6, r0, #24
 801e0c6:	f101 0304 	add.w	r3, r1, #4
 801e0ca:	d50a      	bpl.n	801e0e2 <_printf_i+0xce>
 801e0cc:	680e      	ldr	r6, [r1, #0]
 801e0ce:	602b      	str	r3, [r5, #0]
 801e0d0:	2e00      	cmp	r6, #0
 801e0d2:	da03      	bge.n	801e0dc <_printf_i+0xc8>
 801e0d4:	232d      	movs	r3, #45	; 0x2d
 801e0d6:	4276      	negs	r6, r6
 801e0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e0dc:	485e      	ldr	r0, [pc, #376]	; (801e258 <_printf_i+0x244>)
 801e0de:	230a      	movs	r3, #10
 801e0e0:	e019      	b.n	801e116 <_printf_i+0x102>
 801e0e2:	680e      	ldr	r6, [r1, #0]
 801e0e4:	602b      	str	r3, [r5, #0]
 801e0e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e0ea:	bf18      	it	ne
 801e0ec:	b236      	sxthne	r6, r6
 801e0ee:	e7ef      	b.n	801e0d0 <_printf_i+0xbc>
 801e0f0:	682b      	ldr	r3, [r5, #0]
 801e0f2:	6820      	ldr	r0, [r4, #0]
 801e0f4:	1d19      	adds	r1, r3, #4
 801e0f6:	6029      	str	r1, [r5, #0]
 801e0f8:	0601      	lsls	r1, r0, #24
 801e0fa:	d501      	bpl.n	801e100 <_printf_i+0xec>
 801e0fc:	681e      	ldr	r6, [r3, #0]
 801e0fe:	e002      	b.n	801e106 <_printf_i+0xf2>
 801e100:	0646      	lsls	r6, r0, #25
 801e102:	d5fb      	bpl.n	801e0fc <_printf_i+0xe8>
 801e104:	881e      	ldrh	r6, [r3, #0]
 801e106:	4854      	ldr	r0, [pc, #336]	; (801e258 <_printf_i+0x244>)
 801e108:	2f6f      	cmp	r7, #111	; 0x6f
 801e10a:	bf0c      	ite	eq
 801e10c:	2308      	moveq	r3, #8
 801e10e:	230a      	movne	r3, #10
 801e110:	2100      	movs	r1, #0
 801e112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e116:	6865      	ldr	r5, [r4, #4]
 801e118:	60a5      	str	r5, [r4, #8]
 801e11a:	2d00      	cmp	r5, #0
 801e11c:	bfa2      	ittt	ge
 801e11e:	6821      	ldrge	r1, [r4, #0]
 801e120:	f021 0104 	bicge.w	r1, r1, #4
 801e124:	6021      	strge	r1, [r4, #0]
 801e126:	b90e      	cbnz	r6, 801e12c <_printf_i+0x118>
 801e128:	2d00      	cmp	r5, #0
 801e12a:	d04d      	beq.n	801e1c8 <_printf_i+0x1b4>
 801e12c:	4615      	mov	r5, r2
 801e12e:	fbb6 f1f3 	udiv	r1, r6, r3
 801e132:	fb03 6711 	mls	r7, r3, r1, r6
 801e136:	5dc7      	ldrb	r7, [r0, r7]
 801e138:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e13c:	4637      	mov	r7, r6
 801e13e:	42bb      	cmp	r3, r7
 801e140:	460e      	mov	r6, r1
 801e142:	d9f4      	bls.n	801e12e <_printf_i+0x11a>
 801e144:	2b08      	cmp	r3, #8
 801e146:	d10b      	bne.n	801e160 <_printf_i+0x14c>
 801e148:	6823      	ldr	r3, [r4, #0]
 801e14a:	07de      	lsls	r6, r3, #31
 801e14c:	d508      	bpl.n	801e160 <_printf_i+0x14c>
 801e14e:	6923      	ldr	r3, [r4, #16]
 801e150:	6861      	ldr	r1, [r4, #4]
 801e152:	4299      	cmp	r1, r3
 801e154:	bfde      	ittt	le
 801e156:	2330      	movle	r3, #48	; 0x30
 801e158:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e15c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e160:	1b52      	subs	r2, r2, r5
 801e162:	6122      	str	r2, [r4, #16]
 801e164:	f8cd a000 	str.w	sl, [sp]
 801e168:	464b      	mov	r3, r9
 801e16a:	aa03      	add	r2, sp, #12
 801e16c:	4621      	mov	r1, r4
 801e16e:	4640      	mov	r0, r8
 801e170:	f7ff fee2 	bl	801df38 <_printf_common>
 801e174:	3001      	adds	r0, #1
 801e176:	d14c      	bne.n	801e212 <_printf_i+0x1fe>
 801e178:	f04f 30ff 	mov.w	r0, #4294967295
 801e17c:	b004      	add	sp, #16
 801e17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e182:	4835      	ldr	r0, [pc, #212]	; (801e258 <_printf_i+0x244>)
 801e184:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e188:	6829      	ldr	r1, [r5, #0]
 801e18a:	6823      	ldr	r3, [r4, #0]
 801e18c:	f851 6b04 	ldr.w	r6, [r1], #4
 801e190:	6029      	str	r1, [r5, #0]
 801e192:	061d      	lsls	r5, r3, #24
 801e194:	d514      	bpl.n	801e1c0 <_printf_i+0x1ac>
 801e196:	07df      	lsls	r7, r3, #31
 801e198:	bf44      	itt	mi
 801e19a:	f043 0320 	orrmi.w	r3, r3, #32
 801e19e:	6023      	strmi	r3, [r4, #0]
 801e1a0:	b91e      	cbnz	r6, 801e1aa <_printf_i+0x196>
 801e1a2:	6823      	ldr	r3, [r4, #0]
 801e1a4:	f023 0320 	bic.w	r3, r3, #32
 801e1a8:	6023      	str	r3, [r4, #0]
 801e1aa:	2310      	movs	r3, #16
 801e1ac:	e7b0      	b.n	801e110 <_printf_i+0xfc>
 801e1ae:	6823      	ldr	r3, [r4, #0]
 801e1b0:	f043 0320 	orr.w	r3, r3, #32
 801e1b4:	6023      	str	r3, [r4, #0]
 801e1b6:	2378      	movs	r3, #120	; 0x78
 801e1b8:	4828      	ldr	r0, [pc, #160]	; (801e25c <_printf_i+0x248>)
 801e1ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e1be:	e7e3      	b.n	801e188 <_printf_i+0x174>
 801e1c0:	0659      	lsls	r1, r3, #25
 801e1c2:	bf48      	it	mi
 801e1c4:	b2b6      	uxthmi	r6, r6
 801e1c6:	e7e6      	b.n	801e196 <_printf_i+0x182>
 801e1c8:	4615      	mov	r5, r2
 801e1ca:	e7bb      	b.n	801e144 <_printf_i+0x130>
 801e1cc:	682b      	ldr	r3, [r5, #0]
 801e1ce:	6826      	ldr	r6, [r4, #0]
 801e1d0:	6961      	ldr	r1, [r4, #20]
 801e1d2:	1d18      	adds	r0, r3, #4
 801e1d4:	6028      	str	r0, [r5, #0]
 801e1d6:	0635      	lsls	r5, r6, #24
 801e1d8:	681b      	ldr	r3, [r3, #0]
 801e1da:	d501      	bpl.n	801e1e0 <_printf_i+0x1cc>
 801e1dc:	6019      	str	r1, [r3, #0]
 801e1de:	e002      	b.n	801e1e6 <_printf_i+0x1d2>
 801e1e0:	0670      	lsls	r0, r6, #25
 801e1e2:	d5fb      	bpl.n	801e1dc <_printf_i+0x1c8>
 801e1e4:	8019      	strh	r1, [r3, #0]
 801e1e6:	2300      	movs	r3, #0
 801e1e8:	6123      	str	r3, [r4, #16]
 801e1ea:	4615      	mov	r5, r2
 801e1ec:	e7ba      	b.n	801e164 <_printf_i+0x150>
 801e1ee:	682b      	ldr	r3, [r5, #0]
 801e1f0:	1d1a      	adds	r2, r3, #4
 801e1f2:	602a      	str	r2, [r5, #0]
 801e1f4:	681d      	ldr	r5, [r3, #0]
 801e1f6:	6862      	ldr	r2, [r4, #4]
 801e1f8:	2100      	movs	r1, #0
 801e1fa:	4628      	mov	r0, r5
 801e1fc:	f7e1 fff0 	bl	80001e0 <memchr>
 801e200:	b108      	cbz	r0, 801e206 <_printf_i+0x1f2>
 801e202:	1b40      	subs	r0, r0, r5
 801e204:	6060      	str	r0, [r4, #4]
 801e206:	6863      	ldr	r3, [r4, #4]
 801e208:	6123      	str	r3, [r4, #16]
 801e20a:	2300      	movs	r3, #0
 801e20c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e210:	e7a8      	b.n	801e164 <_printf_i+0x150>
 801e212:	6923      	ldr	r3, [r4, #16]
 801e214:	462a      	mov	r2, r5
 801e216:	4649      	mov	r1, r9
 801e218:	4640      	mov	r0, r8
 801e21a:	47d0      	blx	sl
 801e21c:	3001      	adds	r0, #1
 801e21e:	d0ab      	beq.n	801e178 <_printf_i+0x164>
 801e220:	6823      	ldr	r3, [r4, #0]
 801e222:	079b      	lsls	r3, r3, #30
 801e224:	d413      	bmi.n	801e24e <_printf_i+0x23a>
 801e226:	68e0      	ldr	r0, [r4, #12]
 801e228:	9b03      	ldr	r3, [sp, #12]
 801e22a:	4298      	cmp	r0, r3
 801e22c:	bfb8      	it	lt
 801e22e:	4618      	movlt	r0, r3
 801e230:	e7a4      	b.n	801e17c <_printf_i+0x168>
 801e232:	2301      	movs	r3, #1
 801e234:	4632      	mov	r2, r6
 801e236:	4649      	mov	r1, r9
 801e238:	4640      	mov	r0, r8
 801e23a:	47d0      	blx	sl
 801e23c:	3001      	adds	r0, #1
 801e23e:	d09b      	beq.n	801e178 <_printf_i+0x164>
 801e240:	3501      	adds	r5, #1
 801e242:	68e3      	ldr	r3, [r4, #12]
 801e244:	9903      	ldr	r1, [sp, #12]
 801e246:	1a5b      	subs	r3, r3, r1
 801e248:	42ab      	cmp	r3, r5
 801e24a:	dcf2      	bgt.n	801e232 <_printf_i+0x21e>
 801e24c:	e7eb      	b.n	801e226 <_printf_i+0x212>
 801e24e:	2500      	movs	r5, #0
 801e250:	f104 0619 	add.w	r6, r4, #25
 801e254:	e7f5      	b.n	801e242 <_printf_i+0x22e>
 801e256:	bf00      	nop
 801e258:	08029ca1 	.word	0x08029ca1
 801e25c:	08029cb2 	.word	0x08029cb2

0801e260 <__swbuf_r>:
 801e260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e262:	460e      	mov	r6, r1
 801e264:	4614      	mov	r4, r2
 801e266:	4605      	mov	r5, r0
 801e268:	b118      	cbz	r0, 801e272 <__swbuf_r+0x12>
 801e26a:	6983      	ldr	r3, [r0, #24]
 801e26c:	b90b      	cbnz	r3, 801e272 <__swbuf_r+0x12>
 801e26e:	f000 f9d9 	bl	801e624 <__sinit>
 801e272:	4b21      	ldr	r3, [pc, #132]	; (801e2f8 <__swbuf_r+0x98>)
 801e274:	429c      	cmp	r4, r3
 801e276:	d12b      	bne.n	801e2d0 <__swbuf_r+0x70>
 801e278:	686c      	ldr	r4, [r5, #4]
 801e27a:	69a3      	ldr	r3, [r4, #24]
 801e27c:	60a3      	str	r3, [r4, #8]
 801e27e:	89a3      	ldrh	r3, [r4, #12]
 801e280:	071a      	lsls	r2, r3, #28
 801e282:	d52f      	bpl.n	801e2e4 <__swbuf_r+0x84>
 801e284:	6923      	ldr	r3, [r4, #16]
 801e286:	b36b      	cbz	r3, 801e2e4 <__swbuf_r+0x84>
 801e288:	6923      	ldr	r3, [r4, #16]
 801e28a:	6820      	ldr	r0, [r4, #0]
 801e28c:	1ac0      	subs	r0, r0, r3
 801e28e:	6963      	ldr	r3, [r4, #20]
 801e290:	b2f6      	uxtb	r6, r6
 801e292:	4283      	cmp	r3, r0
 801e294:	4637      	mov	r7, r6
 801e296:	dc04      	bgt.n	801e2a2 <__swbuf_r+0x42>
 801e298:	4621      	mov	r1, r4
 801e29a:	4628      	mov	r0, r5
 801e29c:	f000 f92e 	bl	801e4fc <_fflush_r>
 801e2a0:	bb30      	cbnz	r0, 801e2f0 <__swbuf_r+0x90>
 801e2a2:	68a3      	ldr	r3, [r4, #8]
 801e2a4:	3b01      	subs	r3, #1
 801e2a6:	60a3      	str	r3, [r4, #8]
 801e2a8:	6823      	ldr	r3, [r4, #0]
 801e2aa:	1c5a      	adds	r2, r3, #1
 801e2ac:	6022      	str	r2, [r4, #0]
 801e2ae:	701e      	strb	r6, [r3, #0]
 801e2b0:	6963      	ldr	r3, [r4, #20]
 801e2b2:	3001      	adds	r0, #1
 801e2b4:	4283      	cmp	r3, r0
 801e2b6:	d004      	beq.n	801e2c2 <__swbuf_r+0x62>
 801e2b8:	89a3      	ldrh	r3, [r4, #12]
 801e2ba:	07db      	lsls	r3, r3, #31
 801e2bc:	d506      	bpl.n	801e2cc <__swbuf_r+0x6c>
 801e2be:	2e0a      	cmp	r6, #10
 801e2c0:	d104      	bne.n	801e2cc <__swbuf_r+0x6c>
 801e2c2:	4621      	mov	r1, r4
 801e2c4:	4628      	mov	r0, r5
 801e2c6:	f000 f919 	bl	801e4fc <_fflush_r>
 801e2ca:	b988      	cbnz	r0, 801e2f0 <__swbuf_r+0x90>
 801e2cc:	4638      	mov	r0, r7
 801e2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e2d0:	4b0a      	ldr	r3, [pc, #40]	; (801e2fc <__swbuf_r+0x9c>)
 801e2d2:	429c      	cmp	r4, r3
 801e2d4:	d101      	bne.n	801e2da <__swbuf_r+0x7a>
 801e2d6:	68ac      	ldr	r4, [r5, #8]
 801e2d8:	e7cf      	b.n	801e27a <__swbuf_r+0x1a>
 801e2da:	4b09      	ldr	r3, [pc, #36]	; (801e300 <__swbuf_r+0xa0>)
 801e2dc:	429c      	cmp	r4, r3
 801e2de:	bf08      	it	eq
 801e2e0:	68ec      	ldreq	r4, [r5, #12]
 801e2e2:	e7ca      	b.n	801e27a <__swbuf_r+0x1a>
 801e2e4:	4621      	mov	r1, r4
 801e2e6:	4628      	mov	r0, r5
 801e2e8:	f000 f80c 	bl	801e304 <__swsetup_r>
 801e2ec:	2800      	cmp	r0, #0
 801e2ee:	d0cb      	beq.n	801e288 <__swbuf_r+0x28>
 801e2f0:	f04f 37ff 	mov.w	r7, #4294967295
 801e2f4:	e7ea      	b.n	801e2cc <__swbuf_r+0x6c>
 801e2f6:	bf00      	nop
 801e2f8:	08029ce4 	.word	0x08029ce4
 801e2fc:	08029d04 	.word	0x08029d04
 801e300:	08029cc4 	.word	0x08029cc4

0801e304 <__swsetup_r>:
 801e304:	4b32      	ldr	r3, [pc, #200]	; (801e3d0 <__swsetup_r+0xcc>)
 801e306:	b570      	push	{r4, r5, r6, lr}
 801e308:	681d      	ldr	r5, [r3, #0]
 801e30a:	4606      	mov	r6, r0
 801e30c:	460c      	mov	r4, r1
 801e30e:	b125      	cbz	r5, 801e31a <__swsetup_r+0x16>
 801e310:	69ab      	ldr	r3, [r5, #24]
 801e312:	b913      	cbnz	r3, 801e31a <__swsetup_r+0x16>
 801e314:	4628      	mov	r0, r5
 801e316:	f000 f985 	bl	801e624 <__sinit>
 801e31a:	4b2e      	ldr	r3, [pc, #184]	; (801e3d4 <__swsetup_r+0xd0>)
 801e31c:	429c      	cmp	r4, r3
 801e31e:	d10f      	bne.n	801e340 <__swsetup_r+0x3c>
 801e320:	686c      	ldr	r4, [r5, #4]
 801e322:	89a3      	ldrh	r3, [r4, #12]
 801e324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e328:	0719      	lsls	r1, r3, #28
 801e32a:	d42c      	bmi.n	801e386 <__swsetup_r+0x82>
 801e32c:	06dd      	lsls	r5, r3, #27
 801e32e:	d411      	bmi.n	801e354 <__swsetup_r+0x50>
 801e330:	2309      	movs	r3, #9
 801e332:	6033      	str	r3, [r6, #0]
 801e334:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e338:	81a3      	strh	r3, [r4, #12]
 801e33a:	f04f 30ff 	mov.w	r0, #4294967295
 801e33e:	e03e      	b.n	801e3be <__swsetup_r+0xba>
 801e340:	4b25      	ldr	r3, [pc, #148]	; (801e3d8 <__swsetup_r+0xd4>)
 801e342:	429c      	cmp	r4, r3
 801e344:	d101      	bne.n	801e34a <__swsetup_r+0x46>
 801e346:	68ac      	ldr	r4, [r5, #8]
 801e348:	e7eb      	b.n	801e322 <__swsetup_r+0x1e>
 801e34a:	4b24      	ldr	r3, [pc, #144]	; (801e3dc <__swsetup_r+0xd8>)
 801e34c:	429c      	cmp	r4, r3
 801e34e:	bf08      	it	eq
 801e350:	68ec      	ldreq	r4, [r5, #12]
 801e352:	e7e6      	b.n	801e322 <__swsetup_r+0x1e>
 801e354:	0758      	lsls	r0, r3, #29
 801e356:	d512      	bpl.n	801e37e <__swsetup_r+0x7a>
 801e358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e35a:	b141      	cbz	r1, 801e36e <__swsetup_r+0x6a>
 801e35c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e360:	4299      	cmp	r1, r3
 801e362:	d002      	beq.n	801e36a <__swsetup_r+0x66>
 801e364:	4630      	mov	r0, r6
 801e366:	f000 fa63 	bl	801e830 <_free_r>
 801e36a:	2300      	movs	r3, #0
 801e36c:	6363      	str	r3, [r4, #52]	; 0x34
 801e36e:	89a3      	ldrh	r3, [r4, #12]
 801e370:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e374:	81a3      	strh	r3, [r4, #12]
 801e376:	2300      	movs	r3, #0
 801e378:	6063      	str	r3, [r4, #4]
 801e37a:	6923      	ldr	r3, [r4, #16]
 801e37c:	6023      	str	r3, [r4, #0]
 801e37e:	89a3      	ldrh	r3, [r4, #12]
 801e380:	f043 0308 	orr.w	r3, r3, #8
 801e384:	81a3      	strh	r3, [r4, #12]
 801e386:	6923      	ldr	r3, [r4, #16]
 801e388:	b94b      	cbnz	r3, 801e39e <__swsetup_r+0x9a>
 801e38a:	89a3      	ldrh	r3, [r4, #12]
 801e38c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e394:	d003      	beq.n	801e39e <__swsetup_r+0x9a>
 801e396:	4621      	mov	r1, r4
 801e398:	4630      	mov	r0, r6
 801e39a:	f000 fa09 	bl	801e7b0 <__smakebuf_r>
 801e39e:	89a0      	ldrh	r0, [r4, #12]
 801e3a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e3a4:	f010 0301 	ands.w	r3, r0, #1
 801e3a8:	d00a      	beq.n	801e3c0 <__swsetup_r+0xbc>
 801e3aa:	2300      	movs	r3, #0
 801e3ac:	60a3      	str	r3, [r4, #8]
 801e3ae:	6963      	ldr	r3, [r4, #20]
 801e3b0:	425b      	negs	r3, r3
 801e3b2:	61a3      	str	r3, [r4, #24]
 801e3b4:	6923      	ldr	r3, [r4, #16]
 801e3b6:	b943      	cbnz	r3, 801e3ca <__swsetup_r+0xc6>
 801e3b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e3bc:	d1ba      	bne.n	801e334 <__swsetup_r+0x30>
 801e3be:	bd70      	pop	{r4, r5, r6, pc}
 801e3c0:	0781      	lsls	r1, r0, #30
 801e3c2:	bf58      	it	pl
 801e3c4:	6963      	ldrpl	r3, [r4, #20]
 801e3c6:	60a3      	str	r3, [r4, #8]
 801e3c8:	e7f4      	b.n	801e3b4 <__swsetup_r+0xb0>
 801e3ca:	2000      	movs	r0, #0
 801e3cc:	e7f7      	b.n	801e3be <__swsetup_r+0xba>
 801e3ce:	bf00      	nop
 801e3d0:	20000068 	.word	0x20000068
 801e3d4:	08029ce4 	.word	0x08029ce4
 801e3d8:	08029d04 	.word	0x08029d04
 801e3dc:	08029cc4 	.word	0x08029cc4

0801e3e0 <abort>:
 801e3e0:	b508      	push	{r3, lr}
 801e3e2:	2006      	movs	r0, #6
 801e3e4:	f000 fb3c 	bl	801ea60 <raise>
 801e3e8:	2001      	movs	r0, #1
 801e3ea:	f7f7 fcd1 	bl	8015d90 <_exit>
	...

0801e3f0 <__sflush_r>:
 801e3f0:	898a      	ldrh	r2, [r1, #12]
 801e3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3f6:	4605      	mov	r5, r0
 801e3f8:	0710      	lsls	r0, r2, #28
 801e3fa:	460c      	mov	r4, r1
 801e3fc:	d458      	bmi.n	801e4b0 <__sflush_r+0xc0>
 801e3fe:	684b      	ldr	r3, [r1, #4]
 801e400:	2b00      	cmp	r3, #0
 801e402:	dc05      	bgt.n	801e410 <__sflush_r+0x20>
 801e404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e406:	2b00      	cmp	r3, #0
 801e408:	dc02      	bgt.n	801e410 <__sflush_r+0x20>
 801e40a:	2000      	movs	r0, #0
 801e40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e412:	2e00      	cmp	r6, #0
 801e414:	d0f9      	beq.n	801e40a <__sflush_r+0x1a>
 801e416:	2300      	movs	r3, #0
 801e418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e41c:	682f      	ldr	r7, [r5, #0]
 801e41e:	602b      	str	r3, [r5, #0]
 801e420:	d032      	beq.n	801e488 <__sflush_r+0x98>
 801e422:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e424:	89a3      	ldrh	r3, [r4, #12]
 801e426:	075a      	lsls	r2, r3, #29
 801e428:	d505      	bpl.n	801e436 <__sflush_r+0x46>
 801e42a:	6863      	ldr	r3, [r4, #4]
 801e42c:	1ac0      	subs	r0, r0, r3
 801e42e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e430:	b10b      	cbz	r3, 801e436 <__sflush_r+0x46>
 801e432:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e434:	1ac0      	subs	r0, r0, r3
 801e436:	2300      	movs	r3, #0
 801e438:	4602      	mov	r2, r0
 801e43a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e43c:	6a21      	ldr	r1, [r4, #32]
 801e43e:	4628      	mov	r0, r5
 801e440:	47b0      	blx	r6
 801e442:	1c43      	adds	r3, r0, #1
 801e444:	89a3      	ldrh	r3, [r4, #12]
 801e446:	d106      	bne.n	801e456 <__sflush_r+0x66>
 801e448:	6829      	ldr	r1, [r5, #0]
 801e44a:	291d      	cmp	r1, #29
 801e44c:	d82c      	bhi.n	801e4a8 <__sflush_r+0xb8>
 801e44e:	4a2a      	ldr	r2, [pc, #168]	; (801e4f8 <__sflush_r+0x108>)
 801e450:	40ca      	lsrs	r2, r1
 801e452:	07d6      	lsls	r6, r2, #31
 801e454:	d528      	bpl.n	801e4a8 <__sflush_r+0xb8>
 801e456:	2200      	movs	r2, #0
 801e458:	6062      	str	r2, [r4, #4]
 801e45a:	04d9      	lsls	r1, r3, #19
 801e45c:	6922      	ldr	r2, [r4, #16]
 801e45e:	6022      	str	r2, [r4, #0]
 801e460:	d504      	bpl.n	801e46c <__sflush_r+0x7c>
 801e462:	1c42      	adds	r2, r0, #1
 801e464:	d101      	bne.n	801e46a <__sflush_r+0x7a>
 801e466:	682b      	ldr	r3, [r5, #0]
 801e468:	b903      	cbnz	r3, 801e46c <__sflush_r+0x7c>
 801e46a:	6560      	str	r0, [r4, #84]	; 0x54
 801e46c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e46e:	602f      	str	r7, [r5, #0]
 801e470:	2900      	cmp	r1, #0
 801e472:	d0ca      	beq.n	801e40a <__sflush_r+0x1a>
 801e474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e478:	4299      	cmp	r1, r3
 801e47a:	d002      	beq.n	801e482 <__sflush_r+0x92>
 801e47c:	4628      	mov	r0, r5
 801e47e:	f000 f9d7 	bl	801e830 <_free_r>
 801e482:	2000      	movs	r0, #0
 801e484:	6360      	str	r0, [r4, #52]	; 0x34
 801e486:	e7c1      	b.n	801e40c <__sflush_r+0x1c>
 801e488:	6a21      	ldr	r1, [r4, #32]
 801e48a:	2301      	movs	r3, #1
 801e48c:	4628      	mov	r0, r5
 801e48e:	47b0      	blx	r6
 801e490:	1c41      	adds	r1, r0, #1
 801e492:	d1c7      	bne.n	801e424 <__sflush_r+0x34>
 801e494:	682b      	ldr	r3, [r5, #0]
 801e496:	2b00      	cmp	r3, #0
 801e498:	d0c4      	beq.n	801e424 <__sflush_r+0x34>
 801e49a:	2b1d      	cmp	r3, #29
 801e49c:	d001      	beq.n	801e4a2 <__sflush_r+0xb2>
 801e49e:	2b16      	cmp	r3, #22
 801e4a0:	d101      	bne.n	801e4a6 <__sflush_r+0xb6>
 801e4a2:	602f      	str	r7, [r5, #0]
 801e4a4:	e7b1      	b.n	801e40a <__sflush_r+0x1a>
 801e4a6:	89a3      	ldrh	r3, [r4, #12]
 801e4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e4ac:	81a3      	strh	r3, [r4, #12]
 801e4ae:	e7ad      	b.n	801e40c <__sflush_r+0x1c>
 801e4b0:	690f      	ldr	r7, [r1, #16]
 801e4b2:	2f00      	cmp	r7, #0
 801e4b4:	d0a9      	beq.n	801e40a <__sflush_r+0x1a>
 801e4b6:	0793      	lsls	r3, r2, #30
 801e4b8:	680e      	ldr	r6, [r1, #0]
 801e4ba:	bf08      	it	eq
 801e4bc:	694b      	ldreq	r3, [r1, #20]
 801e4be:	600f      	str	r7, [r1, #0]
 801e4c0:	bf18      	it	ne
 801e4c2:	2300      	movne	r3, #0
 801e4c4:	eba6 0807 	sub.w	r8, r6, r7
 801e4c8:	608b      	str	r3, [r1, #8]
 801e4ca:	f1b8 0f00 	cmp.w	r8, #0
 801e4ce:	dd9c      	ble.n	801e40a <__sflush_r+0x1a>
 801e4d0:	6a21      	ldr	r1, [r4, #32]
 801e4d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e4d4:	4643      	mov	r3, r8
 801e4d6:	463a      	mov	r2, r7
 801e4d8:	4628      	mov	r0, r5
 801e4da:	47b0      	blx	r6
 801e4dc:	2800      	cmp	r0, #0
 801e4de:	dc06      	bgt.n	801e4ee <__sflush_r+0xfe>
 801e4e0:	89a3      	ldrh	r3, [r4, #12]
 801e4e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e4e6:	81a3      	strh	r3, [r4, #12]
 801e4e8:	f04f 30ff 	mov.w	r0, #4294967295
 801e4ec:	e78e      	b.n	801e40c <__sflush_r+0x1c>
 801e4ee:	4407      	add	r7, r0
 801e4f0:	eba8 0800 	sub.w	r8, r8, r0
 801e4f4:	e7e9      	b.n	801e4ca <__sflush_r+0xda>
 801e4f6:	bf00      	nop
 801e4f8:	20400001 	.word	0x20400001

0801e4fc <_fflush_r>:
 801e4fc:	b538      	push	{r3, r4, r5, lr}
 801e4fe:	690b      	ldr	r3, [r1, #16]
 801e500:	4605      	mov	r5, r0
 801e502:	460c      	mov	r4, r1
 801e504:	b913      	cbnz	r3, 801e50c <_fflush_r+0x10>
 801e506:	2500      	movs	r5, #0
 801e508:	4628      	mov	r0, r5
 801e50a:	bd38      	pop	{r3, r4, r5, pc}
 801e50c:	b118      	cbz	r0, 801e516 <_fflush_r+0x1a>
 801e50e:	6983      	ldr	r3, [r0, #24]
 801e510:	b90b      	cbnz	r3, 801e516 <_fflush_r+0x1a>
 801e512:	f000 f887 	bl	801e624 <__sinit>
 801e516:	4b14      	ldr	r3, [pc, #80]	; (801e568 <_fflush_r+0x6c>)
 801e518:	429c      	cmp	r4, r3
 801e51a:	d11b      	bne.n	801e554 <_fflush_r+0x58>
 801e51c:	686c      	ldr	r4, [r5, #4]
 801e51e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e522:	2b00      	cmp	r3, #0
 801e524:	d0ef      	beq.n	801e506 <_fflush_r+0xa>
 801e526:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e528:	07d0      	lsls	r0, r2, #31
 801e52a:	d404      	bmi.n	801e536 <_fflush_r+0x3a>
 801e52c:	0599      	lsls	r1, r3, #22
 801e52e:	d402      	bmi.n	801e536 <_fflush_r+0x3a>
 801e530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e532:	f000 f915 	bl	801e760 <__retarget_lock_acquire_recursive>
 801e536:	4628      	mov	r0, r5
 801e538:	4621      	mov	r1, r4
 801e53a:	f7ff ff59 	bl	801e3f0 <__sflush_r>
 801e53e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e540:	07da      	lsls	r2, r3, #31
 801e542:	4605      	mov	r5, r0
 801e544:	d4e0      	bmi.n	801e508 <_fflush_r+0xc>
 801e546:	89a3      	ldrh	r3, [r4, #12]
 801e548:	059b      	lsls	r3, r3, #22
 801e54a:	d4dd      	bmi.n	801e508 <_fflush_r+0xc>
 801e54c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e54e:	f000 f908 	bl	801e762 <__retarget_lock_release_recursive>
 801e552:	e7d9      	b.n	801e508 <_fflush_r+0xc>
 801e554:	4b05      	ldr	r3, [pc, #20]	; (801e56c <_fflush_r+0x70>)
 801e556:	429c      	cmp	r4, r3
 801e558:	d101      	bne.n	801e55e <_fflush_r+0x62>
 801e55a:	68ac      	ldr	r4, [r5, #8]
 801e55c:	e7df      	b.n	801e51e <_fflush_r+0x22>
 801e55e:	4b04      	ldr	r3, [pc, #16]	; (801e570 <_fflush_r+0x74>)
 801e560:	429c      	cmp	r4, r3
 801e562:	bf08      	it	eq
 801e564:	68ec      	ldreq	r4, [r5, #12]
 801e566:	e7da      	b.n	801e51e <_fflush_r+0x22>
 801e568:	08029ce4 	.word	0x08029ce4
 801e56c:	08029d04 	.word	0x08029d04
 801e570:	08029cc4 	.word	0x08029cc4

0801e574 <std>:
 801e574:	2300      	movs	r3, #0
 801e576:	b510      	push	{r4, lr}
 801e578:	4604      	mov	r4, r0
 801e57a:	e9c0 3300 	strd	r3, r3, [r0]
 801e57e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e582:	6083      	str	r3, [r0, #8]
 801e584:	8181      	strh	r1, [r0, #12]
 801e586:	6643      	str	r3, [r0, #100]	; 0x64
 801e588:	81c2      	strh	r2, [r0, #14]
 801e58a:	6183      	str	r3, [r0, #24]
 801e58c:	4619      	mov	r1, r3
 801e58e:	2208      	movs	r2, #8
 801e590:	305c      	adds	r0, #92	; 0x5c
 801e592:	f7ff fb6f 	bl	801dc74 <memset>
 801e596:	4b05      	ldr	r3, [pc, #20]	; (801e5ac <std+0x38>)
 801e598:	6263      	str	r3, [r4, #36]	; 0x24
 801e59a:	4b05      	ldr	r3, [pc, #20]	; (801e5b0 <std+0x3c>)
 801e59c:	62a3      	str	r3, [r4, #40]	; 0x28
 801e59e:	4b05      	ldr	r3, [pc, #20]	; (801e5b4 <std+0x40>)
 801e5a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e5a2:	4b05      	ldr	r3, [pc, #20]	; (801e5b8 <std+0x44>)
 801e5a4:	6224      	str	r4, [r4, #32]
 801e5a6:	6323      	str	r3, [r4, #48]	; 0x30
 801e5a8:	bd10      	pop	{r4, pc}
 801e5aa:	bf00      	nop
 801e5ac:	0801ea99 	.word	0x0801ea99
 801e5b0:	0801eabb 	.word	0x0801eabb
 801e5b4:	0801eaf3 	.word	0x0801eaf3
 801e5b8:	0801eb17 	.word	0x0801eb17

0801e5bc <_cleanup_r>:
 801e5bc:	4901      	ldr	r1, [pc, #4]	; (801e5c4 <_cleanup_r+0x8>)
 801e5be:	f000 b8af 	b.w	801e720 <_fwalk_reent>
 801e5c2:	bf00      	nop
 801e5c4:	0801e4fd 	.word	0x0801e4fd

0801e5c8 <__sfmoreglue>:
 801e5c8:	b570      	push	{r4, r5, r6, lr}
 801e5ca:	2268      	movs	r2, #104	; 0x68
 801e5cc:	1e4d      	subs	r5, r1, #1
 801e5ce:	4355      	muls	r5, r2
 801e5d0:	460e      	mov	r6, r1
 801e5d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e5d6:	f000 f997 	bl	801e908 <_malloc_r>
 801e5da:	4604      	mov	r4, r0
 801e5dc:	b140      	cbz	r0, 801e5f0 <__sfmoreglue+0x28>
 801e5de:	2100      	movs	r1, #0
 801e5e0:	e9c0 1600 	strd	r1, r6, [r0]
 801e5e4:	300c      	adds	r0, #12
 801e5e6:	60a0      	str	r0, [r4, #8]
 801e5e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e5ec:	f7ff fb42 	bl	801dc74 <memset>
 801e5f0:	4620      	mov	r0, r4
 801e5f2:	bd70      	pop	{r4, r5, r6, pc}

0801e5f4 <__sfp_lock_acquire>:
 801e5f4:	4801      	ldr	r0, [pc, #4]	; (801e5fc <__sfp_lock_acquire+0x8>)
 801e5f6:	f000 b8b3 	b.w	801e760 <__retarget_lock_acquire_recursive>
 801e5fa:	bf00      	nop
 801e5fc:	20000639 	.word	0x20000639

0801e600 <__sfp_lock_release>:
 801e600:	4801      	ldr	r0, [pc, #4]	; (801e608 <__sfp_lock_release+0x8>)
 801e602:	f000 b8ae 	b.w	801e762 <__retarget_lock_release_recursive>
 801e606:	bf00      	nop
 801e608:	20000639 	.word	0x20000639

0801e60c <__sinit_lock_acquire>:
 801e60c:	4801      	ldr	r0, [pc, #4]	; (801e614 <__sinit_lock_acquire+0x8>)
 801e60e:	f000 b8a7 	b.w	801e760 <__retarget_lock_acquire_recursive>
 801e612:	bf00      	nop
 801e614:	2000063a 	.word	0x2000063a

0801e618 <__sinit_lock_release>:
 801e618:	4801      	ldr	r0, [pc, #4]	; (801e620 <__sinit_lock_release+0x8>)
 801e61a:	f000 b8a2 	b.w	801e762 <__retarget_lock_release_recursive>
 801e61e:	bf00      	nop
 801e620:	2000063a 	.word	0x2000063a

0801e624 <__sinit>:
 801e624:	b510      	push	{r4, lr}
 801e626:	4604      	mov	r4, r0
 801e628:	f7ff fff0 	bl	801e60c <__sinit_lock_acquire>
 801e62c:	69a3      	ldr	r3, [r4, #24]
 801e62e:	b11b      	cbz	r3, 801e638 <__sinit+0x14>
 801e630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e634:	f7ff bff0 	b.w	801e618 <__sinit_lock_release>
 801e638:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e63c:	6523      	str	r3, [r4, #80]	; 0x50
 801e63e:	4b13      	ldr	r3, [pc, #76]	; (801e68c <__sinit+0x68>)
 801e640:	4a13      	ldr	r2, [pc, #76]	; (801e690 <__sinit+0x6c>)
 801e642:	681b      	ldr	r3, [r3, #0]
 801e644:	62a2      	str	r2, [r4, #40]	; 0x28
 801e646:	42a3      	cmp	r3, r4
 801e648:	bf04      	itt	eq
 801e64a:	2301      	moveq	r3, #1
 801e64c:	61a3      	streq	r3, [r4, #24]
 801e64e:	4620      	mov	r0, r4
 801e650:	f000 f820 	bl	801e694 <__sfp>
 801e654:	6060      	str	r0, [r4, #4]
 801e656:	4620      	mov	r0, r4
 801e658:	f000 f81c 	bl	801e694 <__sfp>
 801e65c:	60a0      	str	r0, [r4, #8]
 801e65e:	4620      	mov	r0, r4
 801e660:	f000 f818 	bl	801e694 <__sfp>
 801e664:	2200      	movs	r2, #0
 801e666:	60e0      	str	r0, [r4, #12]
 801e668:	2104      	movs	r1, #4
 801e66a:	6860      	ldr	r0, [r4, #4]
 801e66c:	f7ff ff82 	bl	801e574 <std>
 801e670:	68a0      	ldr	r0, [r4, #8]
 801e672:	2201      	movs	r2, #1
 801e674:	2109      	movs	r1, #9
 801e676:	f7ff ff7d 	bl	801e574 <std>
 801e67a:	68e0      	ldr	r0, [r4, #12]
 801e67c:	2202      	movs	r2, #2
 801e67e:	2112      	movs	r1, #18
 801e680:	f7ff ff78 	bl	801e574 <std>
 801e684:	2301      	movs	r3, #1
 801e686:	61a3      	str	r3, [r4, #24]
 801e688:	e7d2      	b.n	801e630 <__sinit+0xc>
 801e68a:	bf00      	nop
 801e68c:	08029c8c 	.word	0x08029c8c
 801e690:	0801e5bd 	.word	0x0801e5bd

0801e694 <__sfp>:
 801e694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e696:	4607      	mov	r7, r0
 801e698:	f7ff ffac 	bl	801e5f4 <__sfp_lock_acquire>
 801e69c:	4b1e      	ldr	r3, [pc, #120]	; (801e718 <__sfp+0x84>)
 801e69e:	681e      	ldr	r6, [r3, #0]
 801e6a0:	69b3      	ldr	r3, [r6, #24]
 801e6a2:	b913      	cbnz	r3, 801e6aa <__sfp+0x16>
 801e6a4:	4630      	mov	r0, r6
 801e6a6:	f7ff ffbd 	bl	801e624 <__sinit>
 801e6aa:	3648      	adds	r6, #72	; 0x48
 801e6ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e6b0:	3b01      	subs	r3, #1
 801e6b2:	d503      	bpl.n	801e6bc <__sfp+0x28>
 801e6b4:	6833      	ldr	r3, [r6, #0]
 801e6b6:	b30b      	cbz	r3, 801e6fc <__sfp+0x68>
 801e6b8:	6836      	ldr	r6, [r6, #0]
 801e6ba:	e7f7      	b.n	801e6ac <__sfp+0x18>
 801e6bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e6c0:	b9d5      	cbnz	r5, 801e6f8 <__sfp+0x64>
 801e6c2:	4b16      	ldr	r3, [pc, #88]	; (801e71c <__sfp+0x88>)
 801e6c4:	60e3      	str	r3, [r4, #12]
 801e6c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e6ca:	6665      	str	r5, [r4, #100]	; 0x64
 801e6cc:	f000 f847 	bl	801e75e <__retarget_lock_init_recursive>
 801e6d0:	f7ff ff96 	bl	801e600 <__sfp_lock_release>
 801e6d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e6d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e6dc:	6025      	str	r5, [r4, #0]
 801e6de:	61a5      	str	r5, [r4, #24]
 801e6e0:	2208      	movs	r2, #8
 801e6e2:	4629      	mov	r1, r5
 801e6e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e6e8:	f7ff fac4 	bl	801dc74 <memset>
 801e6ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e6f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e6f4:	4620      	mov	r0, r4
 801e6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e6f8:	3468      	adds	r4, #104	; 0x68
 801e6fa:	e7d9      	b.n	801e6b0 <__sfp+0x1c>
 801e6fc:	2104      	movs	r1, #4
 801e6fe:	4638      	mov	r0, r7
 801e700:	f7ff ff62 	bl	801e5c8 <__sfmoreglue>
 801e704:	4604      	mov	r4, r0
 801e706:	6030      	str	r0, [r6, #0]
 801e708:	2800      	cmp	r0, #0
 801e70a:	d1d5      	bne.n	801e6b8 <__sfp+0x24>
 801e70c:	f7ff ff78 	bl	801e600 <__sfp_lock_release>
 801e710:	230c      	movs	r3, #12
 801e712:	603b      	str	r3, [r7, #0]
 801e714:	e7ee      	b.n	801e6f4 <__sfp+0x60>
 801e716:	bf00      	nop
 801e718:	08029c8c 	.word	0x08029c8c
 801e71c:	ffff0001 	.word	0xffff0001

0801e720 <_fwalk_reent>:
 801e720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e724:	4606      	mov	r6, r0
 801e726:	4688      	mov	r8, r1
 801e728:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e72c:	2700      	movs	r7, #0
 801e72e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e732:	f1b9 0901 	subs.w	r9, r9, #1
 801e736:	d505      	bpl.n	801e744 <_fwalk_reent+0x24>
 801e738:	6824      	ldr	r4, [r4, #0]
 801e73a:	2c00      	cmp	r4, #0
 801e73c:	d1f7      	bne.n	801e72e <_fwalk_reent+0xe>
 801e73e:	4638      	mov	r0, r7
 801e740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e744:	89ab      	ldrh	r3, [r5, #12]
 801e746:	2b01      	cmp	r3, #1
 801e748:	d907      	bls.n	801e75a <_fwalk_reent+0x3a>
 801e74a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e74e:	3301      	adds	r3, #1
 801e750:	d003      	beq.n	801e75a <_fwalk_reent+0x3a>
 801e752:	4629      	mov	r1, r5
 801e754:	4630      	mov	r0, r6
 801e756:	47c0      	blx	r8
 801e758:	4307      	orrs	r7, r0
 801e75a:	3568      	adds	r5, #104	; 0x68
 801e75c:	e7e9      	b.n	801e732 <_fwalk_reent+0x12>

0801e75e <__retarget_lock_init_recursive>:
 801e75e:	4770      	bx	lr

0801e760 <__retarget_lock_acquire_recursive>:
 801e760:	4770      	bx	lr

0801e762 <__retarget_lock_release_recursive>:
 801e762:	4770      	bx	lr

0801e764 <__swhatbuf_r>:
 801e764:	b570      	push	{r4, r5, r6, lr}
 801e766:	460e      	mov	r6, r1
 801e768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e76c:	2900      	cmp	r1, #0
 801e76e:	b096      	sub	sp, #88	; 0x58
 801e770:	4614      	mov	r4, r2
 801e772:	461d      	mov	r5, r3
 801e774:	da08      	bge.n	801e788 <__swhatbuf_r+0x24>
 801e776:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e77a:	2200      	movs	r2, #0
 801e77c:	602a      	str	r2, [r5, #0]
 801e77e:	061a      	lsls	r2, r3, #24
 801e780:	d410      	bmi.n	801e7a4 <__swhatbuf_r+0x40>
 801e782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e786:	e00e      	b.n	801e7a6 <__swhatbuf_r+0x42>
 801e788:	466a      	mov	r2, sp
 801e78a:	f000 f9eb 	bl	801eb64 <_fstat_r>
 801e78e:	2800      	cmp	r0, #0
 801e790:	dbf1      	blt.n	801e776 <__swhatbuf_r+0x12>
 801e792:	9a01      	ldr	r2, [sp, #4]
 801e794:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e798:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e79c:	425a      	negs	r2, r3
 801e79e:	415a      	adcs	r2, r3
 801e7a0:	602a      	str	r2, [r5, #0]
 801e7a2:	e7ee      	b.n	801e782 <__swhatbuf_r+0x1e>
 801e7a4:	2340      	movs	r3, #64	; 0x40
 801e7a6:	2000      	movs	r0, #0
 801e7a8:	6023      	str	r3, [r4, #0]
 801e7aa:	b016      	add	sp, #88	; 0x58
 801e7ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e7b0 <__smakebuf_r>:
 801e7b0:	898b      	ldrh	r3, [r1, #12]
 801e7b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e7b4:	079d      	lsls	r5, r3, #30
 801e7b6:	4606      	mov	r6, r0
 801e7b8:	460c      	mov	r4, r1
 801e7ba:	d507      	bpl.n	801e7cc <__smakebuf_r+0x1c>
 801e7bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e7c0:	6023      	str	r3, [r4, #0]
 801e7c2:	6123      	str	r3, [r4, #16]
 801e7c4:	2301      	movs	r3, #1
 801e7c6:	6163      	str	r3, [r4, #20]
 801e7c8:	b002      	add	sp, #8
 801e7ca:	bd70      	pop	{r4, r5, r6, pc}
 801e7cc:	ab01      	add	r3, sp, #4
 801e7ce:	466a      	mov	r2, sp
 801e7d0:	f7ff ffc8 	bl	801e764 <__swhatbuf_r>
 801e7d4:	9900      	ldr	r1, [sp, #0]
 801e7d6:	4605      	mov	r5, r0
 801e7d8:	4630      	mov	r0, r6
 801e7da:	f000 f895 	bl	801e908 <_malloc_r>
 801e7de:	b948      	cbnz	r0, 801e7f4 <__smakebuf_r+0x44>
 801e7e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e7e4:	059a      	lsls	r2, r3, #22
 801e7e6:	d4ef      	bmi.n	801e7c8 <__smakebuf_r+0x18>
 801e7e8:	f023 0303 	bic.w	r3, r3, #3
 801e7ec:	f043 0302 	orr.w	r3, r3, #2
 801e7f0:	81a3      	strh	r3, [r4, #12]
 801e7f2:	e7e3      	b.n	801e7bc <__smakebuf_r+0xc>
 801e7f4:	4b0d      	ldr	r3, [pc, #52]	; (801e82c <__smakebuf_r+0x7c>)
 801e7f6:	62b3      	str	r3, [r6, #40]	; 0x28
 801e7f8:	89a3      	ldrh	r3, [r4, #12]
 801e7fa:	6020      	str	r0, [r4, #0]
 801e7fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e800:	81a3      	strh	r3, [r4, #12]
 801e802:	9b00      	ldr	r3, [sp, #0]
 801e804:	6163      	str	r3, [r4, #20]
 801e806:	9b01      	ldr	r3, [sp, #4]
 801e808:	6120      	str	r0, [r4, #16]
 801e80a:	b15b      	cbz	r3, 801e824 <__smakebuf_r+0x74>
 801e80c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e810:	4630      	mov	r0, r6
 801e812:	f000 f9b9 	bl	801eb88 <_isatty_r>
 801e816:	b128      	cbz	r0, 801e824 <__smakebuf_r+0x74>
 801e818:	89a3      	ldrh	r3, [r4, #12]
 801e81a:	f023 0303 	bic.w	r3, r3, #3
 801e81e:	f043 0301 	orr.w	r3, r3, #1
 801e822:	81a3      	strh	r3, [r4, #12]
 801e824:	89a0      	ldrh	r0, [r4, #12]
 801e826:	4305      	orrs	r5, r0
 801e828:	81a5      	strh	r5, [r4, #12]
 801e82a:	e7cd      	b.n	801e7c8 <__smakebuf_r+0x18>
 801e82c:	0801e5bd 	.word	0x0801e5bd

0801e830 <_free_r>:
 801e830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e832:	2900      	cmp	r1, #0
 801e834:	d044      	beq.n	801e8c0 <_free_r+0x90>
 801e836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e83a:	9001      	str	r0, [sp, #4]
 801e83c:	2b00      	cmp	r3, #0
 801e83e:	f1a1 0404 	sub.w	r4, r1, #4
 801e842:	bfb8      	it	lt
 801e844:	18e4      	addlt	r4, r4, r3
 801e846:	f000 f9c1 	bl	801ebcc <__malloc_lock>
 801e84a:	4a1e      	ldr	r2, [pc, #120]	; (801e8c4 <_free_r+0x94>)
 801e84c:	9801      	ldr	r0, [sp, #4]
 801e84e:	6813      	ldr	r3, [r2, #0]
 801e850:	b933      	cbnz	r3, 801e860 <_free_r+0x30>
 801e852:	6063      	str	r3, [r4, #4]
 801e854:	6014      	str	r4, [r2, #0]
 801e856:	b003      	add	sp, #12
 801e858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e85c:	f000 b9bc 	b.w	801ebd8 <__malloc_unlock>
 801e860:	42a3      	cmp	r3, r4
 801e862:	d908      	bls.n	801e876 <_free_r+0x46>
 801e864:	6825      	ldr	r5, [r4, #0]
 801e866:	1961      	adds	r1, r4, r5
 801e868:	428b      	cmp	r3, r1
 801e86a:	bf01      	itttt	eq
 801e86c:	6819      	ldreq	r1, [r3, #0]
 801e86e:	685b      	ldreq	r3, [r3, #4]
 801e870:	1949      	addeq	r1, r1, r5
 801e872:	6021      	streq	r1, [r4, #0]
 801e874:	e7ed      	b.n	801e852 <_free_r+0x22>
 801e876:	461a      	mov	r2, r3
 801e878:	685b      	ldr	r3, [r3, #4]
 801e87a:	b10b      	cbz	r3, 801e880 <_free_r+0x50>
 801e87c:	42a3      	cmp	r3, r4
 801e87e:	d9fa      	bls.n	801e876 <_free_r+0x46>
 801e880:	6811      	ldr	r1, [r2, #0]
 801e882:	1855      	adds	r5, r2, r1
 801e884:	42a5      	cmp	r5, r4
 801e886:	d10b      	bne.n	801e8a0 <_free_r+0x70>
 801e888:	6824      	ldr	r4, [r4, #0]
 801e88a:	4421      	add	r1, r4
 801e88c:	1854      	adds	r4, r2, r1
 801e88e:	42a3      	cmp	r3, r4
 801e890:	6011      	str	r1, [r2, #0]
 801e892:	d1e0      	bne.n	801e856 <_free_r+0x26>
 801e894:	681c      	ldr	r4, [r3, #0]
 801e896:	685b      	ldr	r3, [r3, #4]
 801e898:	6053      	str	r3, [r2, #4]
 801e89a:	4421      	add	r1, r4
 801e89c:	6011      	str	r1, [r2, #0]
 801e89e:	e7da      	b.n	801e856 <_free_r+0x26>
 801e8a0:	d902      	bls.n	801e8a8 <_free_r+0x78>
 801e8a2:	230c      	movs	r3, #12
 801e8a4:	6003      	str	r3, [r0, #0]
 801e8a6:	e7d6      	b.n	801e856 <_free_r+0x26>
 801e8a8:	6825      	ldr	r5, [r4, #0]
 801e8aa:	1961      	adds	r1, r4, r5
 801e8ac:	428b      	cmp	r3, r1
 801e8ae:	bf04      	itt	eq
 801e8b0:	6819      	ldreq	r1, [r3, #0]
 801e8b2:	685b      	ldreq	r3, [r3, #4]
 801e8b4:	6063      	str	r3, [r4, #4]
 801e8b6:	bf04      	itt	eq
 801e8b8:	1949      	addeq	r1, r1, r5
 801e8ba:	6021      	streq	r1, [r4, #0]
 801e8bc:	6054      	str	r4, [r2, #4]
 801e8be:	e7ca      	b.n	801e856 <_free_r+0x26>
 801e8c0:	b003      	add	sp, #12
 801e8c2:	bd30      	pop	{r4, r5, pc}
 801e8c4:	2000063c 	.word	0x2000063c

0801e8c8 <sbrk_aligned>:
 801e8c8:	b570      	push	{r4, r5, r6, lr}
 801e8ca:	4e0e      	ldr	r6, [pc, #56]	; (801e904 <sbrk_aligned+0x3c>)
 801e8cc:	460c      	mov	r4, r1
 801e8ce:	6831      	ldr	r1, [r6, #0]
 801e8d0:	4605      	mov	r5, r0
 801e8d2:	b911      	cbnz	r1, 801e8da <sbrk_aligned+0x12>
 801e8d4:	f000 f88c 	bl	801e9f0 <_sbrk_r>
 801e8d8:	6030      	str	r0, [r6, #0]
 801e8da:	4621      	mov	r1, r4
 801e8dc:	4628      	mov	r0, r5
 801e8de:	f000 f887 	bl	801e9f0 <_sbrk_r>
 801e8e2:	1c43      	adds	r3, r0, #1
 801e8e4:	d00a      	beq.n	801e8fc <sbrk_aligned+0x34>
 801e8e6:	1cc4      	adds	r4, r0, #3
 801e8e8:	f024 0403 	bic.w	r4, r4, #3
 801e8ec:	42a0      	cmp	r0, r4
 801e8ee:	d007      	beq.n	801e900 <sbrk_aligned+0x38>
 801e8f0:	1a21      	subs	r1, r4, r0
 801e8f2:	4628      	mov	r0, r5
 801e8f4:	f000 f87c 	bl	801e9f0 <_sbrk_r>
 801e8f8:	3001      	adds	r0, #1
 801e8fa:	d101      	bne.n	801e900 <sbrk_aligned+0x38>
 801e8fc:	f04f 34ff 	mov.w	r4, #4294967295
 801e900:	4620      	mov	r0, r4
 801e902:	bd70      	pop	{r4, r5, r6, pc}
 801e904:	20000640 	.word	0x20000640

0801e908 <_malloc_r>:
 801e908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e90c:	1ccd      	adds	r5, r1, #3
 801e90e:	f025 0503 	bic.w	r5, r5, #3
 801e912:	3508      	adds	r5, #8
 801e914:	2d0c      	cmp	r5, #12
 801e916:	bf38      	it	cc
 801e918:	250c      	movcc	r5, #12
 801e91a:	2d00      	cmp	r5, #0
 801e91c:	4607      	mov	r7, r0
 801e91e:	db01      	blt.n	801e924 <_malloc_r+0x1c>
 801e920:	42a9      	cmp	r1, r5
 801e922:	d905      	bls.n	801e930 <_malloc_r+0x28>
 801e924:	230c      	movs	r3, #12
 801e926:	603b      	str	r3, [r7, #0]
 801e928:	2600      	movs	r6, #0
 801e92a:	4630      	mov	r0, r6
 801e92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e930:	4e2e      	ldr	r6, [pc, #184]	; (801e9ec <_malloc_r+0xe4>)
 801e932:	f000 f94b 	bl	801ebcc <__malloc_lock>
 801e936:	6833      	ldr	r3, [r6, #0]
 801e938:	461c      	mov	r4, r3
 801e93a:	bb34      	cbnz	r4, 801e98a <_malloc_r+0x82>
 801e93c:	4629      	mov	r1, r5
 801e93e:	4638      	mov	r0, r7
 801e940:	f7ff ffc2 	bl	801e8c8 <sbrk_aligned>
 801e944:	1c43      	adds	r3, r0, #1
 801e946:	4604      	mov	r4, r0
 801e948:	d14d      	bne.n	801e9e6 <_malloc_r+0xde>
 801e94a:	6834      	ldr	r4, [r6, #0]
 801e94c:	4626      	mov	r6, r4
 801e94e:	2e00      	cmp	r6, #0
 801e950:	d140      	bne.n	801e9d4 <_malloc_r+0xcc>
 801e952:	6823      	ldr	r3, [r4, #0]
 801e954:	4631      	mov	r1, r6
 801e956:	4638      	mov	r0, r7
 801e958:	eb04 0803 	add.w	r8, r4, r3
 801e95c:	f000 f848 	bl	801e9f0 <_sbrk_r>
 801e960:	4580      	cmp	r8, r0
 801e962:	d13a      	bne.n	801e9da <_malloc_r+0xd2>
 801e964:	6821      	ldr	r1, [r4, #0]
 801e966:	3503      	adds	r5, #3
 801e968:	1a6d      	subs	r5, r5, r1
 801e96a:	f025 0503 	bic.w	r5, r5, #3
 801e96e:	3508      	adds	r5, #8
 801e970:	2d0c      	cmp	r5, #12
 801e972:	bf38      	it	cc
 801e974:	250c      	movcc	r5, #12
 801e976:	4629      	mov	r1, r5
 801e978:	4638      	mov	r0, r7
 801e97a:	f7ff ffa5 	bl	801e8c8 <sbrk_aligned>
 801e97e:	3001      	adds	r0, #1
 801e980:	d02b      	beq.n	801e9da <_malloc_r+0xd2>
 801e982:	6823      	ldr	r3, [r4, #0]
 801e984:	442b      	add	r3, r5
 801e986:	6023      	str	r3, [r4, #0]
 801e988:	e00e      	b.n	801e9a8 <_malloc_r+0xa0>
 801e98a:	6822      	ldr	r2, [r4, #0]
 801e98c:	1b52      	subs	r2, r2, r5
 801e98e:	d41e      	bmi.n	801e9ce <_malloc_r+0xc6>
 801e990:	2a0b      	cmp	r2, #11
 801e992:	d916      	bls.n	801e9c2 <_malloc_r+0xba>
 801e994:	1961      	adds	r1, r4, r5
 801e996:	42a3      	cmp	r3, r4
 801e998:	6025      	str	r5, [r4, #0]
 801e99a:	bf18      	it	ne
 801e99c:	6059      	strne	r1, [r3, #4]
 801e99e:	6863      	ldr	r3, [r4, #4]
 801e9a0:	bf08      	it	eq
 801e9a2:	6031      	streq	r1, [r6, #0]
 801e9a4:	5162      	str	r2, [r4, r5]
 801e9a6:	604b      	str	r3, [r1, #4]
 801e9a8:	4638      	mov	r0, r7
 801e9aa:	f104 060b 	add.w	r6, r4, #11
 801e9ae:	f000 f913 	bl	801ebd8 <__malloc_unlock>
 801e9b2:	f026 0607 	bic.w	r6, r6, #7
 801e9b6:	1d23      	adds	r3, r4, #4
 801e9b8:	1af2      	subs	r2, r6, r3
 801e9ba:	d0b6      	beq.n	801e92a <_malloc_r+0x22>
 801e9bc:	1b9b      	subs	r3, r3, r6
 801e9be:	50a3      	str	r3, [r4, r2]
 801e9c0:	e7b3      	b.n	801e92a <_malloc_r+0x22>
 801e9c2:	6862      	ldr	r2, [r4, #4]
 801e9c4:	42a3      	cmp	r3, r4
 801e9c6:	bf0c      	ite	eq
 801e9c8:	6032      	streq	r2, [r6, #0]
 801e9ca:	605a      	strne	r2, [r3, #4]
 801e9cc:	e7ec      	b.n	801e9a8 <_malloc_r+0xa0>
 801e9ce:	4623      	mov	r3, r4
 801e9d0:	6864      	ldr	r4, [r4, #4]
 801e9d2:	e7b2      	b.n	801e93a <_malloc_r+0x32>
 801e9d4:	4634      	mov	r4, r6
 801e9d6:	6876      	ldr	r6, [r6, #4]
 801e9d8:	e7b9      	b.n	801e94e <_malloc_r+0x46>
 801e9da:	230c      	movs	r3, #12
 801e9dc:	603b      	str	r3, [r7, #0]
 801e9de:	4638      	mov	r0, r7
 801e9e0:	f000 f8fa 	bl	801ebd8 <__malloc_unlock>
 801e9e4:	e7a1      	b.n	801e92a <_malloc_r+0x22>
 801e9e6:	6025      	str	r5, [r4, #0]
 801e9e8:	e7de      	b.n	801e9a8 <_malloc_r+0xa0>
 801e9ea:	bf00      	nop
 801e9ec:	2000063c 	.word	0x2000063c

0801e9f0 <_sbrk_r>:
 801e9f0:	b538      	push	{r3, r4, r5, lr}
 801e9f2:	4d06      	ldr	r5, [pc, #24]	; (801ea0c <_sbrk_r+0x1c>)
 801e9f4:	2300      	movs	r3, #0
 801e9f6:	4604      	mov	r4, r0
 801e9f8:	4608      	mov	r0, r1
 801e9fa:	602b      	str	r3, [r5, #0]
 801e9fc:	f7f7 fa40 	bl	8015e80 <_sbrk>
 801ea00:	1c43      	adds	r3, r0, #1
 801ea02:	d102      	bne.n	801ea0a <_sbrk_r+0x1a>
 801ea04:	682b      	ldr	r3, [r5, #0]
 801ea06:	b103      	cbz	r3, 801ea0a <_sbrk_r+0x1a>
 801ea08:	6023      	str	r3, [r4, #0]
 801ea0a:	bd38      	pop	{r3, r4, r5, pc}
 801ea0c:	20000644 	.word	0x20000644

0801ea10 <_raise_r>:
 801ea10:	291f      	cmp	r1, #31
 801ea12:	b538      	push	{r3, r4, r5, lr}
 801ea14:	4604      	mov	r4, r0
 801ea16:	460d      	mov	r5, r1
 801ea18:	d904      	bls.n	801ea24 <_raise_r+0x14>
 801ea1a:	2316      	movs	r3, #22
 801ea1c:	6003      	str	r3, [r0, #0]
 801ea1e:	f04f 30ff 	mov.w	r0, #4294967295
 801ea22:	bd38      	pop	{r3, r4, r5, pc}
 801ea24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ea26:	b112      	cbz	r2, 801ea2e <_raise_r+0x1e>
 801ea28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ea2c:	b94b      	cbnz	r3, 801ea42 <_raise_r+0x32>
 801ea2e:	4620      	mov	r0, r4
 801ea30:	f000 f830 	bl	801ea94 <_getpid_r>
 801ea34:	462a      	mov	r2, r5
 801ea36:	4601      	mov	r1, r0
 801ea38:	4620      	mov	r0, r4
 801ea3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ea3e:	f000 b817 	b.w	801ea70 <_kill_r>
 801ea42:	2b01      	cmp	r3, #1
 801ea44:	d00a      	beq.n	801ea5c <_raise_r+0x4c>
 801ea46:	1c59      	adds	r1, r3, #1
 801ea48:	d103      	bne.n	801ea52 <_raise_r+0x42>
 801ea4a:	2316      	movs	r3, #22
 801ea4c:	6003      	str	r3, [r0, #0]
 801ea4e:	2001      	movs	r0, #1
 801ea50:	e7e7      	b.n	801ea22 <_raise_r+0x12>
 801ea52:	2400      	movs	r4, #0
 801ea54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ea58:	4628      	mov	r0, r5
 801ea5a:	4798      	blx	r3
 801ea5c:	2000      	movs	r0, #0
 801ea5e:	e7e0      	b.n	801ea22 <_raise_r+0x12>

0801ea60 <raise>:
 801ea60:	4b02      	ldr	r3, [pc, #8]	; (801ea6c <raise+0xc>)
 801ea62:	4601      	mov	r1, r0
 801ea64:	6818      	ldr	r0, [r3, #0]
 801ea66:	f7ff bfd3 	b.w	801ea10 <_raise_r>
 801ea6a:	bf00      	nop
 801ea6c:	20000068 	.word	0x20000068

0801ea70 <_kill_r>:
 801ea70:	b538      	push	{r3, r4, r5, lr}
 801ea72:	4d07      	ldr	r5, [pc, #28]	; (801ea90 <_kill_r+0x20>)
 801ea74:	2300      	movs	r3, #0
 801ea76:	4604      	mov	r4, r0
 801ea78:	4608      	mov	r0, r1
 801ea7a:	4611      	mov	r1, r2
 801ea7c:	602b      	str	r3, [r5, #0]
 801ea7e:	f7f7 f977 	bl	8015d70 <_kill>
 801ea82:	1c43      	adds	r3, r0, #1
 801ea84:	d102      	bne.n	801ea8c <_kill_r+0x1c>
 801ea86:	682b      	ldr	r3, [r5, #0]
 801ea88:	b103      	cbz	r3, 801ea8c <_kill_r+0x1c>
 801ea8a:	6023      	str	r3, [r4, #0]
 801ea8c:	bd38      	pop	{r3, r4, r5, pc}
 801ea8e:	bf00      	nop
 801ea90:	20000644 	.word	0x20000644

0801ea94 <_getpid_r>:
 801ea94:	f7f7 b964 	b.w	8015d60 <_getpid>

0801ea98 <__sread>:
 801ea98:	b510      	push	{r4, lr}
 801ea9a:	460c      	mov	r4, r1
 801ea9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eaa0:	f000 f8a0 	bl	801ebe4 <_read_r>
 801eaa4:	2800      	cmp	r0, #0
 801eaa6:	bfab      	itete	ge
 801eaa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801eaaa:	89a3      	ldrhlt	r3, [r4, #12]
 801eaac:	181b      	addge	r3, r3, r0
 801eaae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801eab2:	bfac      	ite	ge
 801eab4:	6563      	strge	r3, [r4, #84]	; 0x54
 801eab6:	81a3      	strhlt	r3, [r4, #12]
 801eab8:	bd10      	pop	{r4, pc}

0801eaba <__swrite>:
 801eaba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eabe:	461f      	mov	r7, r3
 801eac0:	898b      	ldrh	r3, [r1, #12]
 801eac2:	05db      	lsls	r3, r3, #23
 801eac4:	4605      	mov	r5, r0
 801eac6:	460c      	mov	r4, r1
 801eac8:	4616      	mov	r6, r2
 801eaca:	d505      	bpl.n	801ead8 <__swrite+0x1e>
 801eacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ead0:	2302      	movs	r3, #2
 801ead2:	2200      	movs	r2, #0
 801ead4:	f000 f868 	bl	801eba8 <_lseek_r>
 801ead8:	89a3      	ldrh	r3, [r4, #12]
 801eada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801eae2:	81a3      	strh	r3, [r4, #12]
 801eae4:	4632      	mov	r2, r6
 801eae6:	463b      	mov	r3, r7
 801eae8:	4628      	mov	r0, r5
 801eaea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eaee:	f000 b817 	b.w	801eb20 <_write_r>

0801eaf2 <__sseek>:
 801eaf2:	b510      	push	{r4, lr}
 801eaf4:	460c      	mov	r4, r1
 801eaf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eafa:	f000 f855 	bl	801eba8 <_lseek_r>
 801eafe:	1c43      	adds	r3, r0, #1
 801eb00:	89a3      	ldrh	r3, [r4, #12]
 801eb02:	bf15      	itete	ne
 801eb04:	6560      	strne	r0, [r4, #84]	; 0x54
 801eb06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801eb0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801eb0e:	81a3      	strheq	r3, [r4, #12]
 801eb10:	bf18      	it	ne
 801eb12:	81a3      	strhne	r3, [r4, #12]
 801eb14:	bd10      	pop	{r4, pc}

0801eb16 <__sclose>:
 801eb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb1a:	f000 b813 	b.w	801eb44 <_close_r>
	...

0801eb20 <_write_r>:
 801eb20:	b538      	push	{r3, r4, r5, lr}
 801eb22:	4d07      	ldr	r5, [pc, #28]	; (801eb40 <_write_r+0x20>)
 801eb24:	4604      	mov	r4, r0
 801eb26:	4608      	mov	r0, r1
 801eb28:	4611      	mov	r1, r2
 801eb2a:	2200      	movs	r2, #0
 801eb2c:	602a      	str	r2, [r5, #0]
 801eb2e:	461a      	mov	r2, r3
 801eb30:	f7f7 f955 	bl	8015dde <_write>
 801eb34:	1c43      	adds	r3, r0, #1
 801eb36:	d102      	bne.n	801eb3e <_write_r+0x1e>
 801eb38:	682b      	ldr	r3, [r5, #0]
 801eb3a:	b103      	cbz	r3, 801eb3e <_write_r+0x1e>
 801eb3c:	6023      	str	r3, [r4, #0]
 801eb3e:	bd38      	pop	{r3, r4, r5, pc}
 801eb40:	20000644 	.word	0x20000644

0801eb44 <_close_r>:
 801eb44:	b538      	push	{r3, r4, r5, lr}
 801eb46:	4d06      	ldr	r5, [pc, #24]	; (801eb60 <_close_r+0x1c>)
 801eb48:	2300      	movs	r3, #0
 801eb4a:	4604      	mov	r4, r0
 801eb4c:	4608      	mov	r0, r1
 801eb4e:	602b      	str	r3, [r5, #0]
 801eb50:	f7f7 f961 	bl	8015e16 <_close>
 801eb54:	1c43      	adds	r3, r0, #1
 801eb56:	d102      	bne.n	801eb5e <_close_r+0x1a>
 801eb58:	682b      	ldr	r3, [r5, #0]
 801eb5a:	b103      	cbz	r3, 801eb5e <_close_r+0x1a>
 801eb5c:	6023      	str	r3, [r4, #0]
 801eb5e:	bd38      	pop	{r3, r4, r5, pc}
 801eb60:	20000644 	.word	0x20000644

0801eb64 <_fstat_r>:
 801eb64:	b538      	push	{r3, r4, r5, lr}
 801eb66:	4d07      	ldr	r5, [pc, #28]	; (801eb84 <_fstat_r+0x20>)
 801eb68:	2300      	movs	r3, #0
 801eb6a:	4604      	mov	r4, r0
 801eb6c:	4608      	mov	r0, r1
 801eb6e:	4611      	mov	r1, r2
 801eb70:	602b      	str	r3, [r5, #0]
 801eb72:	f7f7 f95c 	bl	8015e2e <_fstat>
 801eb76:	1c43      	adds	r3, r0, #1
 801eb78:	d102      	bne.n	801eb80 <_fstat_r+0x1c>
 801eb7a:	682b      	ldr	r3, [r5, #0]
 801eb7c:	b103      	cbz	r3, 801eb80 <_fstat_r+0x1c>
 801eb7e:	6023      	str	r3, [r4, #0]
 801eb80:	bd38      	pop	{r3, r4, r5, pc}
 801eb82:	bf00      	nop
 801eb84:	20000644 	.word	0x20000644

0801eb88 <_isatty_r>:
 801eb88:	b538      	push	{r3, r4, r5, lr}
 801eb8a:	4d06      	ldr	r5, [pc, #24]	; (801eba4 <_isatty_r+0x1c>)
 801eb8c:	2300      	movs	r3, #0
 801eb8e:	4604      	mov	r4, r0
 801eb90:	4608      	mov	r0, r1
 801eb92:	602b      	str	r3, [r5, #0]
 801eb94:	f7f7 f95b 	bl	8015e4e <_isatty>
 801eb98:	1c43      	adds	r3, r0, #1
 801eb9a:	d102      	bne.n	801eba2 <_isatty_r+0x1a>
 801eb9c:	682b      	ldr	r3, [r5, #0]
 801eb9e:	b103      	cbz	r3, 801eba2 <_isatty_r+0x1a>
 801eba0:	6023      	str	r3, [r4, #0]
 801eba2:	bd38      	pop	{r3, r4, r5, pc}
 801eba4:	20000644 	.word	0x20000644

0801eba8 <_lseek_r>:
 801eba8:	b538      	push	{r3, r4, r5, lr}
 801ebaa:	4d07      	ldr	r5, [pc, #28]	; (801ebc8 <_lseek_r+0x20>)
 801ebac:	4604      	mov	r4, r0
 801ebae:	4608      	mov	r0, r1
 801ebb0:	4611      	mov	r1, r2
 801ebb2:	2200      	movs	r2, #0
 801ebb4:	602a      	str	r2, [r5, #0]
 801ebb6:	461a      	mov	r2, r3
 801ebb8:	f7f7 f954 	bl	8015e64 <_lseek>
 801ebbc:	1c43      	adds	r3, r0, #1
 801ebbe:	d102      	bne.n	801ebc6 <_lseek_r+0x1e>
 801ebc0:	682b      	ldr	r3, [r5, #0]
 801ebc2:	b103      	cbz	r3, 801ebc6 <_lseek_r+0x1e>
 801ebc4:	6023      	str	r3, [r4, #0]
 801ebc6:	bd38      	pop	{r3, r4, r5, pc}
 801ebc8:	20000644 	.word	0x20000644

0801ebcc <__malloc_lock>:
 801ebcc:	4801      	ldr	r0, [pc, #4]	; (801ebd4 <__malloc_lock+0x8>)
 801ebce:	f7ff bdc7 	b.w	801e760 <__retarget_lock_acquire_recursive>
 801ebd2:	bf00      	nop
 801ebd4:	20000638 	.word	0x20000638

0801ebd8 <__malloc_unlock>:
 801ebd8:	4801      	ldr	r0, [pc, #4]	; (801ebe0 <__malloc_unlock+0x8>)
 801ebda:	f7ff bdc2 	b.w	801e762 <__retarget_lock_release_recursive>
 801ebde:	bf00      	nop
 801ebe0:	20000638 	.word	0x20000638

0801ebe4 <_read_r>:
 801ebe4:	b538      	push	{r3, r4, r5, lr}
 801ebe6:	4d07      	ldr	r5, [pc, #28]	; (801ec04 <_read_r+0x20>)
 801ebe8:	4604      	mov	r4, r0
 801ebea:	4608      	mov	r0, r1
 801ebec:	4611      	mov	r1, r2
 801ebee:	2200      	movs	r2, #0
 801ebf0:	602a      	str	r2, [r5, #0]
 801ebf2:	461a      	mov	r2, r3
 801ebf4:	f7f7 f8d6 	bl	8015da4 <_read>
 801ebf8:	1c43      	adds	r3, r0, #1
 801ebfa:	d102      	bne.n	801ec02 <_read_r+0x1e>
 801ebfc:	682b      	ldr	r3, [r5, #0]
 801ebfe:	b103      	cbz	r3, 801ec02 <_read_r+0x1e>
 801ec00:	6023      	str	r3, [r4, #0]
 801ec02:	bd38      	pop	{r3, r4, r5, pc}
 801ec04:	20000644 	.word	0x20000644

0801ec08 <_init>:
 801ec08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec0a:	bf00      	nop
 801ec0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec0e:	bc08      	pop	{r3}
 801ec10:	469e      	mov	lr, r3
 801ec12:	4770      	bx	lr

0801ec14 <_fini>:
 801ec14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec16:	bf00      	nop
 801ec18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec1a:	bc08      	pop	{r3}
 801ec1c:	469e      	mov	lr, r3
 801ec1e:	4770      	bx	lr
