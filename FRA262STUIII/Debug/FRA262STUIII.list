
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086e0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008898  08008898  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08008898  08008898  00018898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088a0  080088a0  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088a4  080088a4  000188a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080088a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000030  080088d8  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  080088d8  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e5e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eec  00000000  00000000  00030ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00032db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  00033d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016733  00000000  00000000  00034bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118aa  00000000  00000000  0004b303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090474  00000000  00000000  0005cbad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed021  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000439c  00000000  00000000  000ed074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000030 	.word	0x20000030
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008860 	.word	0x08008860

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000034 	.word	0x20000034
 80001d4:	08008860 	.word	0x08008860

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_frsub>:
 8000a14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a18:	e002      	b.n	8000a20 <__addsf3>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fsub>:
 8000a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a20 <__addsf3>:
 8000a20:	0042      	lsls	r2, r0, #1
 8000a22:	bf1f      	itttt	ne
 8000a24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a28:	ea92 0f03 	teqne	r2, r3
 8000a2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a34:	d06a      	beq.n	8000b0c <__addsf3+0xec>
 8000a36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a3e:	bfc1      	itttt	gt
 8000a40:	18d2      	addgt	r2, r2, r3
 8000a42:	4041      	eorgt	r1, r0
 8000a44:	4048      	eorgt	r0, r1
 8000a46:	4041      	eorgt	r1, r0
 8000a48:	bfb8      	it	lt
 8000a4a:	425b      	neglt	r3, r3
 8000a4c:	2b19      	cmp	r3, #25
 8000a4e:	bf88      	it	hi
 8000a50:	4770      	bxhi	lr
 8000a52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a6e:	bf18      	it	ne
 8000a70:	4249      	negne	r1, r1
 8000a72:	ea92 0f03 	teq	r2, r3
 8000a76:	d03f      	beq.n	8000af8 <__addsf3+0xd8>
 8000a78:	f1a2 0201 	sub.w	r2, r2, #1
 8000a7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a80:	eb10 000c 	adds.w	r0, r0, ip
 8000a84:	f1c3 0320 	rsb	r3, r3, #32
 8000a88:	fa01 f103 	lsl.w	r1, r1, r3
 8000a8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a90:	d502      	bpl.n	8000a98 <__addsf3+0x78>
 8000a92:	4249      	negs	r1, r1
 8000a94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a9c:	d313      	bcc.n	8000ac6 <__addsf3+0xa6>
 8000a9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aa2:	d306      	bcc.n	8000ab2 <__addsf3+0x92>
 8000aa4:	0840      	lsrs	r0, r0, #1
 8000aa6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aaa:	f102 0201 	add.w	r2, r2, #1
 8000aae:	2afe      	cmp	r2, #254	; 0xfe
 8000ab0:	d251      	bcs.n	8000b56 <__addsf3+0x136>
 8000ab2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aba:	bf08      	it	eq
 8000abc:	f020 0001 	biceq.w	r0, r0, #1
 8000ac0:	ea40 0003 	orr.w	r0, r0, r3
 8000ac4:	4770      	bx	lr
 8000ac6:	0049      	lsls	r1, r1, #1
 8000ac8:	eb40 0000 	adc.w	r0, r0, r0
 8000acc:	3a01      	subs	r2, #1
 8000ace:	bf28      	it	cs
 8000ad0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ad4:	d2ed      	bcs.n	8000ab2 <__addsf3+0x92>
 8000ad6:	fab0 fc80 	clz	ip, r0
 8000ada:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ade:	ebb2 020c 	subs.w	r2, r2, ip
 8000ae2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ae6:	bfaa      	itet	ge
 8000ae8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aec:	4252      	neglt	r2, r2
 8000aee:	4318      	orrge	r0, r3
 8000af0:	bfbc      	itt	lt
 8000af2:	40d0      	lsrlt	r0, r2
 8000af4:	4318      	orrlt	r0, r3
 8000af6:	4770      	bx	lr
 8000af8:	f092 0f00 	teq	r2, #0
 8000afc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b00:	bf06      	itte	eq
 8000b02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b06:	3201      	addeq	r2, #1
 8000b08:	3b01      	subne	r3, #1
 8000b0a:	e7b5      	b.n	8000a78 <__addsf3+0x58>
 8000b0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b14:	bf18      	it	ne
 8000b16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1a:	d021      	beq.n	8000b60 <__addsf3+0x140>
 8000b1c:	ea92 0f03 	teq	r2, r3
 8000b20:	d004      	beq.n	8000b2c <__addsf3+0x10c>
 8000b22:	f092 0f00 	teq	r2, #0
 8000b26:	bf08      	it	eq
 8000b28:	4608      	moveq	r0, r1
 8000b2a:	4770      	bx	lr
 8000b2c:	ea90 0f01 	teq	r0, r1
 8000b30:	bf1c      	itt	ne
 8000b32:	2000      	movne	r0, #0
 8000b34:	4770      	bxne	lr
 8000b36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b3a:	d104      	bne.n	8000b46 <__addsf3+0x126>
 8000b3c:	0040      	lsls	r0, r0, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	4770      	bx	lr
 8000b46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b4a:	bf3c      	itt	cc
 8000b4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bxcc	lr
 8000b52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	4770      	bx	lr
 8000b60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b64:	bf16      	itet	ne
 8000b66:	4608      	movne	r0, r1
 8000b68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b6c:	4601      	movne	r1, r0
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	bf06      	itte	eq
 8000b72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b76:	ea90 0f01 	teqeq	r0, r1
 8000b7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_ui2f>:
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e004      	b.n	8000b90 <__aeabi_i2f+0x8>
 8000b86:	bf00      	nop

08000b88 <__aeabi_i2f>:
 8000b88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	bf48      	it	mi
 8000b8e:	4240      	negmi	r0, r0
 8000b90:	ea5f 0c00 	movs.w	ip, r0
 8000b94:	bf08      	it	eq
 8000b96:	4770      	bxeq	lr
 8000b98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	e01c      	b.n	8000bde <__aeabi_l2f+0x2a>

08000ba4 <__aeabi_ul2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e00a      	b.n	8000bc8 <__aeabi_l2f+0x14>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_l2f>:
 8000bb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb8:	bf08      	it	eq
 8000bba:	4770      	bxeq	lr
 8000bbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__aeabi_l2f+0x14>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	ea5f 0c01 	movs.w	ip, r1
 8000bcc:	bf02      	ittt	eq
 8000bce:	4684      	moveq	ip, r0
 8000bd0:	4601      	moveq	r1, r0
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd8:	bf08      	it	eq
 8000bda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000be2:	fabc f28c 	clz	r2, ip
 8000be6:	3a08      	subs	r2, #8
 8000be8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bec:	db10      	blt.n	8000c10 <__aeabi_l2f+0x5c>
 8000bee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf8:	f1c2 0220 	rsb	r2, r2, #32
 8000bfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c00:	fa20 f202 	lsr.w	r2, r0, r2
 8000c04:	eb43 0002 	adc.w	r0, r3, r2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f102 0220 	add.w	r2, r2, #32
 8000c14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c20:	fa21 f202 	lsr.w	r2, r1, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_uldivmod>:
 8000c30:	b953      	cbnz	r3, 8000c48 <__aeabi_uldivmod+0x18>
 8000c32:	b94a      	cbnz	r2, 8000c48 <__aeabi_uldivmod+0x18>
 8000c34:	2900      	cmp	r1, #0
 8000c36:	bf08      	it	eq
 8000c38:	2800      	cmpeq	r0, #0
 8000c3a:	bf1c      	itt	ne
 8000c3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c40:	f04f 30ff 	movne.w	r0, #4294967295
 8000c44:	f000 b974 	b.w	8000f30 <__aeabi_idiv0>
 8000c48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c50:	f000 f806 	bl	8000c60 <__udivmoddi4>
 8000c54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5c:	b004      	add	sp, #16
 8000c5e:	4770      	bx	lr

08000c60 <__udivmoddi4>:
 8000c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c64:	9d08      	ldr	r5, [sp, #32]
 8000c66:	4604      	mov	r4, r0
 8000c68:	468e      	mov	lr, r1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d14d      	bne.n	8000d0a <__udivmoddi4+0xaa>
 8000c6e:	428a      	cmp	r2, r1
 8000c70:	4694      	mov	ip, r2
 8000c72:	d969      	bls.n	8000d48 <__udivmoddi4+0xe8>
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	b152      	cbz	r2, 8000c90 <__udivmoddi4+0x30>
 8000c7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7e:	f1c2 0120 	rsb	r1, r2, #32
 8000c82:	fa20 f101 	lsr.w	r1, r0, r1
 8000c86:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c8a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c8e:	4094      	lsls	r4, r2
 8000c90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c94:	0c21      	lsrs	r1, r4, #16
 8000c96:	fbbe f6f8 	udiv	r6, lr, r8
 8000c9a:	fa1f f78c 	uxth.w	r7, ip
 8000c9e:	fb08 e316 	mls	r3, r8, r6, lr
 8000ca2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ca6:	fb06 f107 	mul.w	r1, r6, r7
 8000caa:	4299      	cmp	r1, r3
 8000cac:	d90a      	bls.n	8000cc4 <__udivmoddi4+0x64>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cb6:	f080 811f 	bcs.w	8000ef8 <__udivmoddi4+0x298>
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	f240 811c 	bls.w	8000ef8 <__udivmoddi4+0x298>
 8000cc0:	3e02      	subs	r6, #2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	1a5b      	subs	r3, r3, r1
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ccc:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd4:	fb00 f707 	mul.w	r7, r0, r7
 8000cd8:	42a7      	cmp	r7, r4
 8000cda:	d90a      	bls.n	8000cf2 <__udivmoddi4+0x92>
 8000cdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce4:	f080 810a 	bcs.w	8000efc <__udivmoddi4+0x29c>
 8000ce8:	42a7      	cmp	r7, r4
 8000cea:	f240 8107 	bls.w	8000efc <__udivmoddi4+0x29c>
 8000cee:	4464      	add	r4, ip
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf6:	1be4      	subs	r4, r4, r7
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	b11d      	cbz	r5, 8000d04 <__udivmoddi4+0xa4>
 8000cfc:	40d4      	lsrs	r4, r2
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e9c5 4300 	strd	r4, r3, [r5]
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d909      	bls.n	8000d22 <__udivmoddi4+0xc2>
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	f000 80ef 	beq.w	8000ef2 <__udivmoddi4+0x292>
 8000d14:	2600      	movs	r6, #0
 8000d16:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	fab3 f683 	clz	r6, r3
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d14a      	bne.n	8000dc0 <__udivmoddi4+0x160>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xd4>
 8000d2e:	4282      	cmp	r2, r0
 8000d30:	f200 80f9 	bhi.w	8000f26 <__udivmoddi4+0x2c6>
 8000d34:	1a84      	subs	r4, r0, r2
 8000d36:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	2d00      	cmp	r5, #0
 8000d40:	d0e0      	beq.n	8000d04 <__udivmoddi4+0xa4>
 8000d42:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d46:	e7dd      	b.n	8000d04 <__udivmoddi4+0xa4>
 8000d48:	b902      	cbnz	r2, 8000d4c <__udivmoddi4+0xec>
 8000d4a:	deff      	udf	#255	; 0xff
 8000d4c:	fab2 f282 	clz	r2, r2
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	f040 8092 	bne.w	8000e7a <__udivmoddi4+0x21a>
 8000d56:	eba1 010c 	sub.w	r1, r1, ip
 8000d5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	2601      	movs	r6, #1
 8000d64:	0c20      	lsrs	r0, r4, #16
 8000d66:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d6a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d72:	fb0e f003 	mul.w	r0, lr, r3
 8000d76:	4288      	cmp	r0, r1
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x12c>
 8000d7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x12a>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f200 80cb 	bhi.w	8000f20 <__udivmoddi4+0x2c0>
 8000d8a:	4643      	mov	r3, r8
 8000d8c:	1a09      	subs	r1, r1, r0
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d94:	fb07 1110 	mls	r1, r7, r0, r1
 8000d98:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x156>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x154>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2ca>
 8000db4:	4608      	mov	r0, r1
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dbe:	e79c      	b.n	8000cfa <__udivmoddi4+0x9a>
 8000dc0:	f1c6 0720 	rsb	r7, r6, #32
 8000dc4:	40b3      	lsls	r3, r6
 8000dc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dce:	fa20 f407 	lsr.w	r4, r0, r7
 8000dd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dd6:	431c      	orrs	r4, r3
 8000dd8:	40f9      	lsrs	r1, r7
 8000dda:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dde:	fa00 f306 	lsl.w	r3, r0, r6
 8000de2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000de6:	0c20      	lsrs	r0, r4, #16
 8000de8:	fa1f fe8c 	uxth.w	lr, ip
 8000dec:	fb09 1118 	mls	r1, r9, r8, r1
 8000df0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df4:	fb08 f00e 	mul.w	r0, r8, lr
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b8>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e08:	f080 8088 	bcs.w	8000f1c <__udivmoddi4+0x2bc>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f240 8085 	bls.w	8000f1c <__udivmoddi4+0x2bc>
 8000e12:	f1a8 0802 	sub.w	r8, r8, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	1a09      	subs	r1, r1, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e20:	fb09 1110 	mls	r1, r9, r0, r1
 8000e24:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e2c:	458e      	cmp	lr, r1
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1e2>
 8000e30:	eb1c 0101 	adds.w	r1, ip, r1
 8000e34:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e38:	d26c      	bcs.n	8000f14 <__udivmoddi4+0x2b4>
 8000e3a:	458e      	cmp	lr, r1
 8000e3c:	d96a      	bls.n	8000f14 <__udivmoddi4+0x2b4>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4461      	add	r1, ip
 8000e42:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e46:	fba0 9402 	umull	r9, r4, r0, r2
 8000e4a:	eba1 010e 	sub.w	r1, r1, lr
 8000e4e:	42a1      	cmp	r1, r4
 8000e50:	46c8      	mov	r8, r9
 8000e52:	46a6      	mov	lr, r4
 8000e54:	d356      	bcc.n	8000f04 <__udivmoddi4+0x2a4>
 8000e56:	d053      	beq.n	8000f00 <__udivmoddi4+0x2a0>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x212>
 8000e5a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e5e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e62:	fa01 f707 	lsl.w	r7, r1, r7
 8000e66:	fa22 f306 	lsr.w	r3, r2, r6
 8000e6a:	40f1      	lsrs	r1, r6
 8000e6c:	431f      	orrs	r7, r3
 8000e6e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	f1c2 0320 	rsb	r3, r2, #32
 8000e7e:	40d8      	lsrs	r0, r3
 8000e80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e84:	fa21 f303 	lsr.w	r3, r1, r3
 8000e88:	4091      	lsls	r1, r2
 8000e8a:	4301      	orrs	r1, r0
 8000e8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e98:	fb07 3610 	mls	r6, r7, r0, r3
 8000e9c:	0c0b      	lsrs	r3, r1, #16
 8000e9e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ea2:	fb00 f60e 	mul.w	r6, r0, lr
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x260>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eb6:	d22f      	bcs.n	8000f18 <__udivmoddi4+0x2b8>
 8000eb8:	429e      	cmp	r6, r3
 8000eba:	d92d      	bls.n	8000f18 <__udivmoddi4+0x2b8>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	1b9b      	subs	r3, r3, r6
 8000ec2:	b289      	uxth	r1, r1
 8000ec4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x28a>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee0:	d216      	bcs.n	8000f10 <__udivmoddi4+0x2b0>
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d914      	bls.n	8000f10 <__udivmoddi4+0x2b0>
 8000ee6:	3e02      	subs	r6, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	1ac9      	subs	r1, r1, r3
 8000eec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef0:	e738      	b.n	8000d64 <__udivmoddi4+0x104>
 8000ef2:	462e      	mov	r6, r5
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	e705      	b.n	8000d04 <__udivmoddi4+0xa4>
 8000ef8:	4606      	mov	r6, r0
 8000efa:	e6e3      	b.n	8000cc4 <__udivmoddi4+0x64>
 8000efc:	4618      	mov	r0, r3
 8000efe:	e6f8      	b.n	8000cf2 <__udivmoddi4+0x92>
 8000f00:	454b      	cmp	r3, r9
 8000f02:	d2a9      	bcs.n	8000e58 <__udivmoddi4+0x1f8>
 8000f04:	ebb9 0802 	subs.w	r8, r9, r2
 8000f08:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f0c:	3801      	subs	r0, #1
 8000f0e:	e7a3      	b.n	8000e58 <__udivmoddi4+0x1f8>
 8000f10:	4646      	mov	r6, r8
 8000f12:	e7ea      	b.n	8000eea <__udivmoddi4+0x28a>
 8000f14:	4620      	mov	r0, r4
 8000f16:	e794      	b.n	8000e42 <__udivmoddi4+0x1e2>
 8000f18:	4640      	mov	r0, r8
 8000f1a:	e7d1      	b.n	8000ec0 <__udivmoddi4+0x260>
 8000f1c:	46d0      	mov	r8, sl
 8000f1e:	e77b      	b.n	8000e18 <__udivmoddi4+0x1b8>
 8000f20:	3b02      	subs	r3, #2
 8000f22:	4461      	add	r1, ip
 8000f24:	e732      	b.n	8000d8c <__udivmoddi4+0x12c>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e709      	b.n	8000d3e <__udivmoddi4+0xde>
 8000f2a:	4464      	add	r4, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x156>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f38:	b087      	sub	sp, #28
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     HAL_Init();
 8000f3c:	f001 faba 	bl	80024b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f938 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 fb20 	bl	8001588 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f48:	f000 fad4 	bl	80014f4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000f4c:	f000 fafc 	bl	8001548 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f50:	f000 f998 	bl	8001284 <MX_I2C1_Init>
  MX_TIM11_Init();
 8000f54:	f000 faaa 	bl	80014ac <MX_TIM11_Init>
  MX_TIM2_Init();
 8000f58:	f000 f9c2 	bl	80012e0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000f5c:	f000 fa30 	bl	80013c0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8000f60:	487a      	ldr	r0, [pc, #488]	; (800114c <main+0x218>)
 8000f62:	f005 fd77 	bl	8006a54 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start(&htim2); // Speed
 8000f66:	487a      	ldr	r0, [pc, #488]	; (8001150 <main+0x21c>)
 8000f68:	f005 fd1a 	bl	80069a0 <HAL_TIM_Base_Start>
    HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	4a79      	ldr	r2, [pc, #484]	; (8001154 <main+0x220>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4877      	ldr	r0, [pc, #476]	; (8001150 <main+0x21c>)
 8000f74:	f005 ff34 	bl	8006de0 <HAL_TIM_IC_Start_DMA>
    			CAPTURENUM);

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8000f78:	4877      	ldr	r0, [pc, #476]	; (8001158 <main+0x224>)
 8000f7a:	f005 fd11 	bl	80069a0 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4875      	ldr	r0, [pc, #468]	; (8001158 <main+0x224>)
 8000f82:	f005 fe23 	bl	8006bcc <HAL_TIM_PWM_Start>

    //MCP23017 setting init
    HAL_Delay(100);
 8000f86:	2064      	movs	r0, #100	; 0x64
 8000f88:	f001 fb06 	bl	8002598 <HAL_Delay>
    IOExpenderInit();
 8000f8c:	f000 feae 	bl	8001cec <IOExpenderInit>
	  	  //if(micros() - TimeStampGrand >= 1000){
	  		//TimeStampGrand = micros();

	  	  //}
	  	  // Encoder I2CRead
	  	  if (micros()-timeStampSR >= 1000)      // don't use 1
 8000f90:	f000 fffe 	bl	8001f90 <micros>
 8000f94:	4b71      	ldr	r3, [pc, #452]	; (800115c <main+0x228>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	617a      	str	r2, [r7, #20]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ac4      	subs	r4, r0, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	eb61 0503 	sbc.w	r5, r1, r3
 8000fa8:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8000fac:	f175 0300 	sbcs.w	r3, r5, #0
 8000fb0:	d30a      	bcc.n	8000fc8 <main+0x94>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 8000fb2:	f000 ffed 	bl	8001f90 <micros>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4b68      	ldr	r3, [pc, #416]	; (800115c <main+0x228>)
 8000fbc:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 8000fbe:	4a68      	ldr	r2, [pc, #416]	; (8001160 <main+0x22c>)
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	7013      	strb	r3, [r2, #0]
	  	              GrandStatumix();
 8000fc4:	f000 fbba 	bl	800173c <GrandStatumix>
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 8000fc8:	4866      	ldr	r0, [pc, #408]	; (8001164 <main+0x230>)
 8000fca:	f000 fea5 	bl	8001d18 <AbsEncI2CReadx>
	  	  encoderSpeedReaderCycle();
 8000fce:	f000 fcd7 	bl	8001980 <encoderSpeedReaderCycle>
	  	  pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	4864      	ldr	r0, [pc, #400]	; (8001168 <main+0x234>)
 8000fd6:	f002 f939 	bl	800324c <HAL_GPIO_ReadPin>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a63      	ldr	r2, [pc, #396]	; (800116c <main+0x238>)
 8000fde:	7013      	strb	r3, [r2, #0]

	  	  ///////////////////////// speed measyre////////
	  	if(micros() - timestampve >= 10000){
 8000fe0:	f000 ffd6 	bl	8001f90 <micros>
 8000fe4:	4b62      	ldr	r3, [pc, #392]	; (8001170 <main+0x23c>)
 8000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fea:	ebb0 0802 	subs.w	r8, r0, r2
 8000fee:	eb61 0903 	sbc.w	r9, r1, r3
 8000ff2:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ff6:	4598      	cmp	r8, r3
 8000ff8:	f179 0300 	sbcs.w	r3, r9, #0
 8000ffc:	d344      	bcc.n	8001088 <main+0x154>
	  			  timestampve = micros();
 8000ffe:	f000 ffc7 	bl	8001f90 <micros>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	495a      	ldr	r1, [pc, #360]	; (8001170 <main+0x23c>)
 8001008:	e9c1 2300 	strd	r2, r3, [r1]
	  			  posSpeedlog[1] = posSpeedlog[0];
 800100c:	4b59      	ldr	r3, [pc, #356]	; (8001174 <main+0x240>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	4a58      	ldr	r2, [pc, #352]	; (8001174 <main+0x240>)
 8001012:	8053      	strh	r3, [r2, #2]
	  			  posSpeedlog[0] = BinPosXI;
 8001014:	4b58      	ldr	r3, [pc, #352]	; (8001178 <main+0x244>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	4a56      	ldr	r2, [pc, #344]	; (8001174 <main+0x240>)
 800101a:	8013      	strh	r3, [r2, #0]
	  			  deltaar = (fabsf(posSpeedlog[1]-posSpeedlog[0])) / 1024.0;
 800101c:	4b55      	ldr	r3, [pc, #340]	; (8001174 <main+0x240>)
 800101e:	885b      	ldrh	r3, [r3, #2]
 8001020:	461a      	mov	r2, r3
 8001022:	4b54      	ldr	r3, [pc, #336]	; (8001174 <main+0x240>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001030:	eeb0 7ae7 	vabs.f32	s14, s15
 8001034:	eddf 6a51 	vldr	s13, [pc, #324]	; 800117c <main+0x248>
 8001038:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103c:	4b50      	ldr	r3, [pc, #320]	; (8001180 <main+0x24c>)
 800103e:	edc3 7a00 	vstr	s15, [r3]
	  			  RoundNumnd = deltaar*100.0*60.0;
 8001042:	4b4f      	ldr	r3, [pc, #316]	; (8001180 <main+0x24c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa2a 	bl	80004a0 <__aeabi_f2d>
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <main+0x250>)
 8001052:	f7ff fa7d 	bl	8000550 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4b49      	ldr	r3, [pc, #292]	; (8001188 <main+0x254>)
 8001064:	f7ff fa74 	bl	8000550 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fc80 	bl	8000974 <__aeabi_d2f>
 8001074:	4603      	mov	r3, r0
 8001076:	4a45      	ldr	r2, [pc, #276]	; (800118c <main+0x258>)
 8001078:	6013      	str	r3, [r2, #0]
	  			  Speedsmoothfunc(RoundNumnd);
 800107a:	4b44      	ldr	r3, [pc, #272]	; (800118c <main+0x258>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	eeb0 0a67 	vmov.f32	s0, s15
 8001084:	f000 fcf0 	bl	8001a68 <Speedsmoothfunc>
	  		 }

	  	  ///////////////////// 2KHz change PWM PB6////////////////////
	  	  if(micros() - timestampPWM >= 500){
 8001088:	f000 ff82 	bl	8001f90 <micros>
 800108c:	4b40      	ldr	r3, [pc, #256]	; (8001190 <main+0x25c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2200      	movs	r2, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	60fa      	str	r2, [r7, #12]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	ebb0 0a03 	subs.w	sl, r0, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	eb61 0b03 	sbc.w	fp, r1, r3
 80010a2:	f5ba 7ffa 	cmp.w	sl, #500	; 0x1f4
 80010a6:	f17b 0300 	sbcs.w	r3, fp, #0
 80010aa:	d312      	bcc.n	80010d2 <main+0x19e>
	  		  	  timestampPWM = micros(); // stamp
 80010ac:	f000 ff70 	bl	8001f90 <micros>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4b36      	ldr	r3, [pc, #216]	; (8001190 <main+0x25c>)
 80010b6:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut);
 80010b8:	4b36      	ldr	r3, [pc, #216]	; (8001194 <main+0x260>)
 80010ba:	8819      	ldrh	r1, [r3, #0]
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <main+0x224>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	460b      	mov	r3, r1
 80010c2:	6353      	str	r3, [r2, #52]	; 0x34
	  	  		  //ADC_Target = ADCFeedx[1].datt;
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, mot_dirctn);
 80010c4:	4b34      	ldr	r3, [pc, #208]	; (8001198 <main+0x264>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	2104      	movs	r1, #4
 80010cc:	4826      	ldr	r0, [pc, #152]	; (8001168 <main+0x234>)
 80010ce:	f002 f8d5 	bl	800327c <HAL_GPIO_WritePin>
	  	  	  }

	  	 if (grandState ==  work){
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <main+0x268>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d103      	bne.n	80010e2 <main+0x1ae>
	  		 PIDzero();
 80010da:	f000 fd27 	bl	8001b2c <PIDzero>
	  		 MotDrvCytron();}
 80010de:	f000 fdaf 	bl	8001c40 <MotDrvCytron>

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 80010e2:	f000 fe75 	bl	8001dd0 <Efft_activate>
	  	 Efft_read(&efft_status);
 80010e6:	482e      	ldr	r0, [pc, #184]	; (80011a0 <main+0x26c>)
 80010e8:	f000 feb8 	bl	8001e5c <Efft_read>
	  	 // trig_efftRead up for 10 times afrer shoot / trig at shoot state
	  	 if(trig_efftRead != 0 && micros() - timestamp_efft >= 500000){
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <main+0x270>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d022      	beq.n	800113a <main+0x206>
 80010f4:	f000 ff4c 	bl	8001f90 <micros>
 80010f8:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <main+0x274>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	1a86      	subs	r6, r0, r2
 8001100:	603e      	str	r6, [r7, #0]
 8001102:	eb61 0303 	sbc.w	r3, r1, r3
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	4b28      	ldr	r3, [pc, #160]	; (80011ac <main+0x278>)
 800110a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800110e:	4602      	mov	r2, r0
 8001110:	429a      	cmp	r2, r3
 8001112:	460b      	mov	r3, r1
 8001114:	f173 0300 	sbcs.w	r3, r3, #0
 8001118:	d30f      	bcc.n	800113a <main+0x206>
	  		 timestamp_efft = micros();
 800111a:	f000 ff39 	bl	8001f90 <micros>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4921      	ldr	r1, [pc, #132]	; (80011a8 <main+0x274>)
 8001124:	e9c1 2300 	strd	r2, r3, [r1]
	  		 flag_efftRead = 1;
 8001128:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <main+0x27c>)
 800112a:	2301      	movs	r3, #1
 800112c:	7013      	strb	r3, [r2, #0]
	  		 trig_efftRead++;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <main+0x270>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <main+0x270>)
 8001138:	7013      	strb	r3, [r2, #0]
	  	 }if(trig_efftRead >= 12){trig_efftRead = 0;} // read xx times
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <main+0x270>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b0b      	cmp	r3, #11
 8001140:	f67f af26 	bls.w	8000f90 <main+0x5c>
 8001144:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <main+0x270>)
 8001146:	2300      	movs	r3, #0
 8001148:	7013      	strb	r3, [r2, #0]
	  	  if (micros()-timeStampSR >= 1000)      // don't use 1
 800114a:	e721      	b.n	8000f90 <main+0x5c>
 800114c:	20000130 	.word	0x20000130
 8001150:	200000a0 	.word	0x200000a0
 8001154:	20000238 	.word	0x20000238
 8001158:	200000e8 	.word	0x200000e8
 800115c:	2000022c 	.word	0x2000022c
 8001160:	20000236 	.word	0x20000236
 8001164:	20000230 	.word	0x20000230
 8001168:	40020400 	.word	0x40020400
 800116c:	2000021d 	.word	0x2000021d
 8001170:	20000350 	.word	0x20000350
 8001174:	200002f8 	.word	0x200002f8
 8001178:	20000234 	.word	0x20000234
 800117c:	44800000 	.word	0x44800000
 8001180:	20000340 	.word	0x20000340
 8001184:	40590000 	.word	0x40590000
 8001188:	404e0000 	.word	0x404e0000
 800118c:	20000344 	.word	0x20000344
 8001190:	20000358 	.word	0x20000358
 8001194:	20000000 	.word	0x20000000
 8001198:	2000035c 	.word	0x2000035c
 800119c:	2000021c 	.word	0x2000021c
 80011a0:	20000388 	.word	0x20000388
 80011a4:	2000038b 	.word	0x2000038b
 80011a8:	20000390 	.word	0x20000390
 80011ac:	0007a120 	.word	0x0007a120
 80011b0:	2000038a 	.word	0x2000038a

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b094      	sub	sp, #80	; 0x50
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	2230      	movs	r2, #48	; 0x30
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f007 fb44 	bl	8008850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <SystemClock_Config+0xc8>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	4a26      	ldr	r2, [pc, #152]	; (800127c <SystemClock_Config+0xc8>)
 80011e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e6:	6413      	str	r3, [r2, #64]	; 0x40
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <SystemClock_Config+0xc8>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <SystemClock_Config+0xcc>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a20      	ldr	r2, [pc, #128]	; (8001280 <SystemClock_Config+0xcc>)
 80011fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <SystemClock_Config+0xcc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001210:	2302      	movs	r3, #2
 8001212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001214:	2301      	movs	r3, #1
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001218:	2310      	movs	r3, #16
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121c:	2302      	movs	r3, #2
 800121e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001220:	2300      	movs	r3, #0
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001224:	2308      	movs	r3, #8
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001228:	2364      	movs	r3, #100	; 0x64
 800122a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800122c:	2302      	movs	r3, #2
 800122e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001230:	2304      	movs	r3, #4
 8001232:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	4618      	mov	r0, r3
 800123a:	f004 fec9 	bl	8005fd0 <HAL_RCC_OscConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001244:	f000 feda 	bl	8001ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001248:	230f      	movs	r3, #15
 800124a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124c:	2302      	movs	r3, #2
 800124e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	2103      	movs	r1, #3
 8001264:	4618      	mov	r0, r3
 8001266:	f005 f92b 	bl	80064c0 <HAL_RCC_ClockConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001270:	f000 fec4 	bl	8001ffc <Error_Handler>
  }
}
 8001274:	bf00      	nop
 8001276:	3750      	adds	r7, #80	; 0x50
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	40007000 	.word	0x40007000

08001284 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_I2C1_Init+0x50>)
 800128a:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <MX_I2C1_Init+0x54>)
 800128c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_I2C1_Init+0x50>)
 8001290:	4a12      	ldr	r2, [pc, #72]	; (80012dc <MX_I2C1_Init+0x58>)
 8001292:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_I2C1_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_I2C1_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_I2C1_Init+0x50>)
 80012a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <MX_I2C1_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_I2C1_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <MX_I2C1_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_I2C1_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_I2C1_Init+0x50>)
 80012c2:	f002 f827 	bl	8003314 <HAL_I2C_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012cc:	f000 fe96 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000004c 	.word	0x2000004c
 80012d8:	40005400 	.word	0x40005400
 80012dc:	00061a80 	.word	0x00061a80

080012e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0318 	add.w	r3, r7, #24
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012fe:	463b      	mov	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <MX_TIM2_Init+0xdc>)
 800130c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001310:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <MX_TIM2_Init+0xdc>)
 8001314:	2263      	movs	r2, #99	; 0x63
 8001316:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <MX_TIM2_Init+0xdc>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800131e:	4b27      	ldr	r3, [pc, #156]	; (80013bc <MX_TIM2_Init+0xdc>)
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <MX_TIM2_Init+0xdc>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <MX_TIM2_Init+0xdc>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001332:	4822      	ldr	r0, [pc, #136]	; (80013bc <MX_TIM2_Init+0xdc>)
 8001334:	f005 fae4 	bl	8006900 <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800133e:	f000 fe5d 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001346:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	4619      	mov	r1, r3
 800134e:	481b      	ldr	r0, [pc, #108]	; (80013bc <MX_TIM2_Init+0xdc>)
 8001350:	f006 f948 	bl	80075e4 <HAL_TIM_ConfigClockSource>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800135a:	f000 fe4f 	bl	8001ffc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800135e:	4817      	ldr	r0, [pc, #92]	; (80013bc <MX_TIM2_Init+0xdc>)
 8001360:	f005 fce4 	bl	8006d2c <HAL_TIM_IC_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800136a:	f000 fe47 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	4619      	mov	r1, r3
 800137c:	480f      	ldr	r0, [pc, #60]	; (80013bc <MX_TIM2_Init+0xdc>)
 800137e:	f006 feff 	bl	8008180 <HAL_TIMEx_MasterConfigSynchronization>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001388:	f000 fe38 	bl	8001ffc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001390:	2301      	movs	r3, #1
 8001392:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_TIM2_Init+0xdc>)
 80013a4:	f005 ffc0 	bl	8007328 <HAL_TIM_IC_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80013ae:	f000 fe25 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200000a0 	.word	0x200000a0

080013c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08e      	sub	sp, #56	; 0x38
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	f107 0320 	add.w	r3, r7, #32
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
 80013ec:	615a      	str	r2, [r3, #20]
 80013ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013f0:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <MX_TIM4_Init+0xe4>)
 80013f2:	4a2d      	ldr	r2, [pc, #180]	; (80014a8 <MX_TIM4_Init+0xe8>)
 80013f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <MX_TIM4_Init+0xe4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <MX_TIM4_Init+0xe4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001402:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <MX_TIM4_Init+0xe4>)
 8001404:	f242 720f 	movw	r2, #9999	; 0x270f
 8001408:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <MX_TIM4_Init+0xe4>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <MX_TIM4_Init+0xe4>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001416:	4823      	ldr	r0, [pc, #140]	; (80014a4 <MX_TIM4_Init+0xe4>)
 8001418:	f005 fa72 	bl	8006900 <HAL_TIM_Base_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001422:	f000 fdeb 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800142c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001430:	4619      	mov	r1, r3
 8001432:	481c      	ldr	r0, [pc, #112]	; (80014a4 <MX_TIM4_Init+0xe4>)
 8001434:	f006 f8d6 	bl	80075e4 <HAL_TIM_ConfigClockSource>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800143e:	f000 fddd 	bl	8001ffc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001442:	4818      	ldr	r0, [pc, #96]	; (80014a4 <MX_TIM4_Init+0xe4>)
 8001444:	f005 fb68 	bl	8006b18 <HAL_TIM_PWM_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800144e:	f000 fdd5 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800145a:	f107 0320 	add.w	r3, r7, #32
 800145e:	4619      	mov	r1, r3
 8001460:	4810      	ldr	r0, [pc, #64]	; (80014a4 <MX_TIM4_Init+0xe4>)
 8001462:	f006 fe8d 	bl	8008180 <HAL_TIMEx_MasterConfigSynchronization>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800146c:	f000 fdc6 	bl	8001ffc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001470:	2360      	movs	r3, #96	; 0x60
 8001472:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	4619      	mov	r1, r3
 8001486:	4807      	ldr	r0, [pc, #28]	; (80014a4 <MX_TIM4_Init+0xe4>)
 8001488:	f005 ffea 	bl	8007460 <HAL_TIM_PWM_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001492:	f000 fdb3 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <MX_TIM4_Init+0xe4>)
 8001498:	f000 fee4 	bl	8002264 <HAL_TIM_MspPostInit>

}
 800149c:	bf00      	nop
 800149e:	3738      	adds	r7, #56	; 0x38
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200000e8 	.word	0x200000e8
 80014a8:	40000800 	.word	0x40000800

080014ac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_TIM11_Init+0x40>)
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <MX_TIM11_Init+0x44>)
 80014b4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <MX_TIM11_Init+0x40>)
 80014b8:	2263      	movs	r2, #99	; 0x63
 80014ba:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_TIM11_Init+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <MX_TIM11_Init+0x40>)
 80014c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <MX_TIM11_Init+0x40>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_TIM11_Init+0x40>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_TIM11_Init+0x40>)
 80014d8:	f005 fa12 	bl	8006900 <HAL_TIM_Base_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80014e2:	f000 fd8b 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000130 	.word	0x20000130
 80014f0:	40014800 	.word	0x40014800

080014f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <MX_USART2_UART_Init+0x50>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001504:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 800152c:	f006 feaa 	bl	8008284 <HAL_UART_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001536:	f000 fd61 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200001d8 	.word	0x200001d8
 8001544:	40004400 	.word	0x40004400

08001548 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_DMA_Init+0x3c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <MX_DMA_Init+0x3c>)
 8001558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_DMA_Init+0x3c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	2010      	movs	r0, #16
 8001570:	f001 f911 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001574:	2010      	movs	r0, #16
 8001576:	f001 f92a 	bl	80027ce <HAL_NVIC_EnableIRQ>

}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b61      	ldr	r3, [pc, #388]	; (8001728 <MX_GPIO_Init+0x1a0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a60      	ldr	r2, [pc, #384]	; (8001728 <MX_GPIO_Init+0x1a0>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b5e      	ldr	r3, [pc, #376]	; (8001728 <MX_GPIO_Init+0x1a0>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b5a      	ldr	r3, [pc, #360]	; (8001728 <MX_GPIO_Init+0x1a0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a59      	ldr	r2, [pc, #356]	; (8001728 <MX_GPIO_Init+0x1a0>)
 80015c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b57      	ldr	r3, [pc, #348]	; (8001728 <MX_GPIO_Init+0x1a0>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	4b53      	ldr	r3, [pc, #332]	; (8001728 <MX_GPIO_Init+0x1a0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a52      	ldr	r2, [pc, #328]	; (8001728 <MX_GPIO_Init+0x1a0>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b50      	ldr	r3, [pc, #320]	; (8001728 <MX_GPIO_Init+0x1a0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <MX_GPIO_Init+0x1a0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a4b      	ldr	r2, [pc, #300]	; (8001728 <MX_GPIO_Init+0x1a0>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b49      	ldr	r3, [pc, #292]	; (8001728 <MX_GPIO_Init+0x1a0>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	4b45      	ldr	r3, [pc, #276]	; (8001728 <MX_GPIO_Init+0x1a0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a44      	ldr	r2, [pc, #272]	; (8001728 <MX_GPIO_Init+0x1a0>)
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b42      	ldr	r3, [pc, #264]	; (8001728 <MX_GPIO_Init+0x1a0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	2120      	movs	r1, #32
 800162e:	483f      	ldr	r0, [pc, #252]	; (800172c <MX_GPIO_Init+0x1a4>)
 8001630:	f001 fe24 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	f24e 0104 	movw	r1, #57348	; 0xe004
 800163a:	483d      	ldr	r0, [pc, #244]	; (8001730 <MX_GPIO_Init+0x1a8>)
 800163c:	f001 fe1e 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 8001640:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001646:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	4837      	ldr	r0, [pc, #220]	; (8001734 <MX_GPIO_Init+0x1ac>)
 8001658:	f001 fc74 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800165c:	2320      	movs	r3, #32
 800165e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	482e      	ldr	r0, [pc, #184]	; (800172c <MX_GPIO_Init+0x1a4>)
 8001674:	f001 fc66 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 8001678:	2302      	movs	r3, #2
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4829      	ldr	r0, [pc, #164]	; (8001730 <MX_GPIO_Init+0x1a8>)
 800168c:	f001 fc5a 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 8001690:	f24e 0304 	movw	r3, #57348	; 0xe004
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4821      	ldr	r0, [pc, #132]	; (8001730 <MX_GPIO_Init+0x1a8>)
 80016aa:	f001 fc4b 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 80016ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	481b      	ldr	r0, [pc, #108]	; (8001734 <MX_GPIO_Init+0x1ac>)
 80016c6:	f001 fc3d 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 80016ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	4815      	ldr	r0, [pc, #84]	; (8001734 <MX_GPIO_Init+0x1ac>)
 80016e0:	f001 fc30 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 80016e4:	2304      	movs	r3, #4
 80016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	480f      	ldr	r0, [pc, #60]	; (8001738 <MX_GPIO_Init+0x1b0>)
 80016fa:	f001 fc23 	bl	8002f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2008      	movs	r0, #8
 8001704:	f001 f847 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001708:	2008      	movs	r0, #8
 800170a:	f001 f860 	bl	80027ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2028      	movs	r0, #40	; 0x28
 8001714:	f001 f83f 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001718:	2028      	movs	r0, #40	; 0x28
 800171a:	f001 f858 	bl	80027ce <HAL_NVIC_EnableIRQ>

}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	; 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000
 8001730:	40020400 	.word	0x40020400
 8001734:	40020800 	.word	0x40020800
 8001738:	40020c00 	.word	0x40020c00

0800173c <GrandStatumix>:

/* USER CODE BEGIN 4 */
////////// Grand State //////////////////////////////////////////////////////
void GrandStatumix(){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 8001740:	4b64      	ldr	r3, [pc, #400]	; (80018d4 <GrandStatumix+0x198>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <GrandStatumix+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174e:	4862      	ldr	r0, [pc, #392]	; (80018d8 <GrandStatumix+0x19c>)
 8001750:	f001 fd94 	bl	800327c <HAL_GPIO_WritePin>
	}
	if (grandState != work){
 8001754:	4b5f      	ldr	r3, [pc, #380]	; (80018d4 <GrandStatumix+0x198>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d005      	beq.n	8001768 <GrandStatumix+0x2c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001762:	485d      	ldr	r0, [pc, #372]	; (80018d8 <GrandStatumix+0x19c>)
 8001764:	f001 fd8a 	bl	800327c <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 8001768:	4b5a      	ldr	r3, [pc, #360]	; (80018d4 <GrandStatumix+0x198>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d103      	bne.n	8001778 <GrandStatumix+0x3c>
 8001770:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <GrandStatumix+0x198>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b04      	cmp	r3, #4
 8001776:	d005      	beq.n	8001784 <GrandStatumix+0x48>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800177e:	4856      	ldr	r0, [pc, #344]	; (80018d8 <GrandStatumix+0x19c>)
 8001780:	f001 fd7c 	bl	800327c <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8001784:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001788:	4854      	ldr	r0, [pc, #336]	; (80018dc <GrandStatumix+0x1a0>)
 800178a:	f001 fd5f 	bl	800324c <HAL_GPIO_ReadPin>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <GrandStatumix+0x1a4>)
 8001794:	701a      	strb	r2, [r3, #0]


	switch(grandState){
 8001796:	4b4f      	ldr	r3, [pc, #316]	; (80018d4 <GrandStatumix+0x198>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	3b01      	subs	r3, #1
 800179c:	2b03      	cmp	r3, #3
 800179e:	d80b      	bhi.n	80017b8 <GrandStatumix+0x7c>
 80017a0:	a201      	add	r2, pc, #4	; (adr r2, 80017a8 <GrandStatumix+0x6c>)
 80017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a6:	bf00      	nop
 80017a8:	080017f9 	.word	0x080017f9
 80017ac:	08001839 	.word	0x08001839
 80017b0:	0800189f 	.word	0x0800189f
 80017b4:	08001875 	.word	0x08001875
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017be:	4846      	ldr	r0, [pc, #280]	; (80018d8 <GrandStatumix+0x19c>)
 80017c0:	f001 fd5c 	bl	800327c <HAL_GPIO_WritePin>
		PWMOut = 1200;
 80017c4:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <GrandStatumix+0x1a8>)
 80017c6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80017ca:	801a      	strh	r2, [r3, #0]
		if (pwr_sense == 1){grandState = emer;}
 80017cc:	4b46      	ldr	r3, [pc, #280]	; (80018e8 <GrandStatumix+0x1ac>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d102      	bne.n	80017da <GrandStatumix+0x9e>
 80017d4:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <GrandStatumix+0x198>)
 80017d6:	2203      	movs	r2, #3
 80017d8:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 80017da:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <GrandStatumix+0x1a4>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <GrandStatumix+0xac>
 80017e2:	4b3c      	ldr	r3, [pc, #240]	; (80018d4 <GrandStatumix+0x198>)
 80017e4:	2202      	movs	r2, #2
 80017e6:	701a      	strb	r2, [r3, #0]
		if (bluecounter != 0){grandState = work;} // can go work from ready only
 80017e8:	4b40      	ldr	r3, [pc, #256]	; (80018ec <GrandStatumix+0x1b0>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d066      	beq.n	80018be <GrandStatumix+0x182>
 80017f0:	4b38      	ldr	r3, [pc, #224]	; (80018d4 <GrandStatumix+0x198>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
	break;
 80017f6:	e062      	b.n	80018be <GrandStatumix+0x182>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017fe:	4836      	ldr	r0, [pc, #216]	; (80018d8 <GrandStatumix+0x19c>)
 8001800:	f001 fd3c 	bl	800327c <HAL_GPIO_WritePin>

	// transfer to while

		if (pwr_sense == 1){
 8001804:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <GrandStatumix+0x1ac>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d106      	bne.n	800181a <GrandStatumix+0xde>
			grandState = emer;
 800180c:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <GrandStatumix+0x198>)
 800180e:	2203      	movs	r2, #3
 8001810:	701a      	strb	r2, [r3, #0]
			u_contr = 0;}
 8001812:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <GrandStatumix+0x1b4>)
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
		if (stop_sense == 0){
 800181a:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <GrandStatumix+0x1a4>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d14f      	bne.n	80018c2 <GrandStatumix+0x186>
			PWMOut = 0;
 8001822:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <GrandStatumix+0x1a8>)
 8001824:	2200      	movs	r2, #0
 8001826:	801a      	strh	r2, [r3, #0]
			grandState = stopnd;
 8001828:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <GrandStatumix+0x198>)
 800182a:	2204      	movs	r2, #4
 800182c:	701a      	strb	r2, [r3, #0]
			u_contr = 0;}
 800182e:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <GrandStatumix+0x1b4>)
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
	break;
 8001836:	e044      	b.n	80018c2 <GrandStatumix+0x186>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800183e:	4826      	ldr	r0, [pc, #152]	; (80018d8 <GrandStatumix+0x19c>)
 8001840:	f001 fd1c 	bl	800327c <HAL_GPIO_WritePin>
		PWMOut = 0;
 8001844:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <GrandStatumix+0x1a8>)
 8001846:	2200      	movs	r2, #0
 8001848:	801a      	strh	r2, [r3, #0]

		if (stop_sense == 1){
 800184a:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <GrandStatumix+0x1a4>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d139      	bne.n	80018c6 <GrandStatumix+0x18a>
			grandState = Ready;
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <GrandStatumix+0x198>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]

			mot_dirctn++;
 8001858:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <GrandStatumix+0x1b8>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <GrandStatumix+0x1b8>)
 8001862:	701a      	strb	r2, [r3, #0]
			mot_dirctn%=2;
 8001864:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <GrandStatumix+0x1b8>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <GrandStatumix+0x1b8>)
 8001870:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001872:	e028      	b.n	80018c6 <GrandStatumix+0x18a>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800187a:	4817      	ldr	r0, [pc, #92]	; (80018d8 <GrandStatumix+0x19c>)
 800187c:	f001 fcfe 	bl	800327c <HAL_GPIO_WritePin>
			PWMOut = 0;
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <GrandStatumix+0x1a8>)
 8001882:	2200      	movs	r2, #0
 8001884:	801a      	strh	r2, [r3, #0]
			Integral = 0;
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <GrandStatumix+0x1bc>)
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	601a      	str	r2, [r3, #0]

			if (stop_sense == 1){
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <GrandStatumix+0x1a4>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d119      	bne.n	80018ca <GrandStatumix+0x18e>
				grandState = work;
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <GrandStatumix+0x198>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800189c:	e015      	b.n	80018ca <GrandStatumix+0x18e>

	case emer:
		PWMOut = 0;
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <GrandStatumix+0x1a8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	801a      	strh	r2, [r3, #0]
		if (pwr_sense == 0){
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <GrandStatumix+0x1ac>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d110      	bne.n	80018ce <GrandStatumix+0x192>
			grandState = Ready;
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <GrandStatumix+0x198>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 80018b2:	2064      	movs	r0, #100	; 0x64
 80018b4:	f000 fe70 	bl	8002598 <HAL_Delay>
			IOExpenderInit();
 80018b8:	f000 fa18 	bl	8001cec <IOExpenderInit>
		}
	break;
 80018bc:	e007      	b.n	80018ce <GrandStatumix+0x192>
	break;
 80018be:	bf00      	nop
 80018c0:	e006      	b.n	80018d0 <GrandStatumix+0x194>
	break;
 80018c2:	bf00      	nop
 80018c4:	e004      	b.n	80018d0 <GrandStatumix+0x194>
	break;
 80018c6:	bf00      	nop
 80018c8:	e002      	b.n	80018d0 <GrandStatumix+0x194>
		break;
 80018ca:	bf00      	nop
 80018cc:	e000      	b.n	80018d0 <GrandStatumix+0x194>
	break;
 80018ce:	bf00      	nop
	}
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000021c 	.word	0x2000021c
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40020800 	.word	0x40020800
 80018e0:	2000021e 	.word	0x2000021e
 80018e4:	20000000 	.word	0x20000000
 80018e8:	2000021d 	.word	0x2000021d
 80018ec:	2000035d 	.word	0x2000035d
 80018f0:	2000036c 	.word	0x2000036c
 80018f4:	2000035c 	.word	0x2000035c
 80018f8:	20000380 	.word	0x20000380

080018fc <GraytoBinario>:
////////// Absolute Encoder ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	460a      	mov	r2, r1
 8001906:	80fb      	strh	r3, [r7, #6]
 8001908:	4613      	mov	r3, r2
 800190a:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 800190c:	2300      	movs	r3, #0
 800190e:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 8001910:	88fa      	ldrh	r2, [r7, #6]
 8001912:	797b      	ldrb	r3, [r7, #5]
 8001914:	3b01      	subs	r3, #1
 8001916:	fa42 f303 	asr.w	r3, r2, r3
 800191a:	b29b      	uxth	r3, r3
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 8001922:	2301      	movs	r3, #1
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	e01d      	b.n	8001964 <GraytoBinario+0x68>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 8001928:	8afb      	ldrh	r3, [r7, #22]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 8001930:	88fa      	ldrh	r2, [r7, #6]
 8001932:	7979      	ldrb	r1, [r7, #5]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	3301      	adds	r3, #1
 8001938:	1acb      	subs	r3, r1, r3
 800193a:	fa42 f303 	asr.w	r3, r2, r3
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	429a      	cmp	r2, r3
 800194a:	d103      	bne.n	8001954 <GraytoBinario+0x58>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 800194c:	8afb      	ldrh	r3, [r7, #22]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	82fb      	strh	r3, [r7, #22]
 8001952:	e004      	b.n	800195e <GraytoBinario+0x62>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8001954:	8afb      	ldrh	r3, [r7, #22]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	b29b      	uxth	r3, r3
 800195a:	3301      	adds	r3, #1
 800195c:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	3301      	adds	r3, #1
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	dbdd      	blt.n	8001928 <GraytoBinario+0x2c>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 800196c:	8afb      	ldrh	r3, [r7, #22]
}
 800196e:	4618      	mov	r0, r3
 8001970:	371c      	adds	r7, #28
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	0000      	movs	r0, r0
 800197c:	0000      	movs	r0, r0
	...

08001980 <encoderSpeedReaderCycle>:

void encoderSpeedReaderCycle() {
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
	// re code using position dif time
	//get DMA Position form number of data
	uint32_t CapPos =CAPTURENUM -  __HAL_DMA_GET_COUNTER(htim2.hdma[TIM_DMA_ID_CC1]);
 8001986:	4932      	ldr	r1, [pc, #200]	; (8001a50 <encoderSpeedReaderCycle+0xd0>)
 8001988:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800198a:	6809      	ldr	r1, [r1, #0]
 800198c:	6849      	ldr	r1, [r1, #4]
 800198e:	f1c1 0110 	rsb	r1, r1, #16
 8001992:	6039      	str	r1, [r7, #0]
	uint32_t sum = 0 ;
 8001994:	2100      	movs	r1, #0
 8001996:	6079      	str	r1, [r7, #4]

	//calculate diff from all buffer except current dma
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 8001998:	2402      	movs	r4, #2
 800199a:	e022      	b.n	80019e2 <encoderSpeedReaderCycle+0x62>
	{
		DiffTime[i]  = capturedata[(CapPos+1+i)%CAPTURENUM]-capturedata[(CapPos+i)%CAPTURENUM];
 800199c:	4620      	mov	r0, r4
 800199e:	6839      	ldr	r1, [r7, #0]
 80019a0:	4401      	add	r1, r0
 80019a2:	3101      	adds	r1, #1
 80019a4:	f001 010f 	and.w	r1, r1, #15
 80019a8:	482a      	ldr	r0, [pc, #168]	; (8001a54 <encoderSpeedReaderCycle+0xd4>)
 80019aa:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80019ae:	4625      	mov	r5, r4
 80019b0:	6839      	ldr	r1, [r7, #0]
 80019b2:	4429      	add	r1, r5
 80019b4:	f001 010f 	and.w	r1, r1, #15
 80019b8:	4d26      	ldr	r5, [pc, #152]	; (8001a54 <encoderSpeedReaderCycle+0xd4>)
 80019ba:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80019be:	1a41      	subs	r1, r0, r1
 80019c0:	2000      	movs	r0, #0
 80019c2:	460a      	mov	r2, r1
 80019c4:	4603      	mov	r3, r0
 80019c6:	4824      	ldr	r0, [pc, #144]	; (8001a58 <encoderSpeedReaderCycle+0xd8>)
 80019c8:	00e1      	lsls	r1, r4, #3
 80019ca:	4401      	add	r1, r0
 80019cc:	e9c1 2300 	strd	r2, r3, [r1]
		//Sum all  Diff
		sum += DiffTime[i];
 80019d0:	4821      	ldr	r0, [pc, #132]	; (8001a58 <encoderSpeedReaderCycle+0xd8>)
 80019d2:	00e1      	lsls	r1, r4, #3
 80019d4:	4401      	add	r1, r0
 80019d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4401      	add	r1, r0
 80019de:	6079      	str	r1, [r7, #4]
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 80019e0:	3401      	adds	r4, #1
 80019e2:	2c0e      	cmp	r4, #14
 80019e4:	ddda      	ble.n	800199c <encoderSpeedReaderCycle+0x1c>
	}

	//mean all Diff
	MeanTime =sum / (float)(CAPTURENUM-3);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	ee07 3a90 	vmov	s15, r3
 80019ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019f0:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 80019f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <encoderSpeedReaderCycle+0xdc>)
 80019fa:	edc3 7a00 	vstr	s15, [r3]
	// Meantime = 1 time period for 1 pulse
	// 60000000 / MeanTime = amount of pulse in 1 minute with that time period
	// 1024 pulse per round

	RoundNum = (60000000.0 / MeanTime)/1024.0; // round per min detect by 1024 clk
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <encoderSpeedReaderCycle+0xdc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fd4c 	bl	80004a0 <__aeabi_f2d>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	a10e      	add	r1, pc, #56	; (adr r1, 8001a48 <encoderSpeedReaderCycle+0xc8>)
 8001a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a12:	f7fe fec7 	bl	80007a4 <__aeabi_ddiv>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <encoderSpeedReaderCycle+0xe0>)
 8001a24:	f7fe febe 	bl	80007a4 <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7fe ffa0 	bl	8000974 <__aeabi_d2f>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <encoderSpeedReaderCycle+0xe4>)
 8001a38:	6013      	str	r3, [r2, #0]

}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	f3af 8000 	nop.w
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	418c9c38 	.word	0x418c9c38
 8001a50:	200000a0 	.word	0x200000a0
 8001a54:	20000238 	.word	0x20000238
 8001a58:	20000278 	.word	0x20000278
 8001a5c:	200002f0 	.word	0x200002f0
 8001a60:	40900000 	.word	0x40900000
 8001a64:	200002f4 	.word	0x200002f4

08001a68 <Speedsmoothfunc>:

void Speedsmoothfunc(float inpdat){
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	ed87 0a01 	vstr	s0, [r7, #4]
	//static uint8_t scc 0;
	for(int j = CAPTURENUM-1; j >= 0;j--){
 8001a72:	230f      	movs	r3, #15
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e00d      	b.n	8001a94 <Speedsmoothfunc+0x2c>
		speedsmoothlog[j] = speedsmoothlog[j-1];
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	4a28      	ldr	r2, [pc, #160]	; (8001b20 <Speedsmoothfunc+0xb8>)
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4926      	ldr	r1, [pc, #152]	; (8001b20 <Speedsmoothfunc+0xb8>)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	601a      	str	r2, [r3, #0]
	for(int j = CAPTURENUM-1; j >= 0;j--){
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	daee      	bge.n	8001a78 <Speedsmoothfunc+0x10>
	}
	speedsmoothlog[0] = inpdat;
 8001a9a:	4a21      	ldr	r2, [pc, #132]	; (8001b20 <Speedsmoothfunc+0xb8>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6013      	str	r3, [r2, #0]

	float summa = 0.0;
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
	int errcut = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
	for (int k = 0; k < CAPTURENUM;k++){
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	e01f      	b.n	8001af0 <Speedsmoothfunc+0x88>
		if (speedsmoothlog[k]>=500){errcut++;}
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <Speedsmoothfunc+0xb8>)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001b24 <Speedsmoothfunc+0xbc>
 8001ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac8:	db03      	blt.n	8001ad2 <Speedsmoothfunc+0x6a>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3301      	adds	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	e00b      	b.n	8001aea <Speedsmoothfunc+0x82>
		else{summa+= speedsmoothlog[k];}
 8001ad2:	4a13      	ldr	r2, [pc, #76]	; (8001b20 <Speedsmoothfunc+0xb8>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae6:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int k = 0; k < CAPTURENUM;k++){
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	3301      	adds	r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	dddc      	ble.n	8001ab0 <Speedsmoothfunc+0x48>

	}
	RoundNumnd_sm =  summa / (CAPTURENUM-errcut);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f1c3 0310 	rsb	r3, r3, #16
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b04:	edd7 6a04 	vldr	s13, [r7, #16]
 8001b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <Speedsmoothfunc+0xc0>)
 8001b0e:	edc3 7a00 	vstr	s15, [r3]
}
 8001b12:	bf00      	nop
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000300 	.word	0x20000300
 8001b24:	43fa0000 	.word	0x43fa0000
 8001b28:	20000348 	.word	0x20000348

08001b2c <PIDzero>:

///////////////////// PID Zero /////////////////////////////
void PIDzero(){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	CrrntTime = micros();
 8001b30:	f000 fa2e 	bl	8001f90 <micros>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f832 	bl	8000ba4 <__aeabi_ul2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a32      	ldr	r2, [pc, #200]	; (8001c0c <PIDzero+0xe0>)
 8001b44:	6013      	str	r3, [r2, #0]
	DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
 8001b46:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <PIDzero+0xe0>)
 8001b48:	ed93 7a00 	vldr	s14, [r3]
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <PIDzero+0xe4>)
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b56:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001c14 <PIDzero+0xe8>
 8001b5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b5e:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <PIDzero+0xec>)
 8001b60:	edc3 7a00 	vstr	s15, [r3]
	PreviTime = CrrntTime; // log previ here for next loop
 8001b64:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <PIDzero+0xe0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a29      	ldr	r2, [pc, #164]	; (8001c10 <PIDzero+0xe4>)
 8001b6a:	6013      	str	r3, [r2, #0]

	ErrPos[0] = TargetDeg - BinPosXI;
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <PIDzero+0xf0>)
 8001b6e:	ed93 7a00 	vldr	s14, [r3]
 8001b72:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <PIDzero+0xf4>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <PIDzero+0xf8>)
 8001b84:	edc3 7a00 	vstr	s15, [r3]

	Propo = K_P * ErrPos[0];
 8001b88:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <PIDzero+0xf8>)
 8001b8a:	ed93 7a00 	vldr	s14, [r3]
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <PIDzero+0xfc>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b98:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <PIDzero+0x100>)
 8001b9a:	edc3 7a00 	vstr	s15, [r3]

	Integral = Integral + ( ErrPos[0] * DeltaTime ); // Integral -Newton-Leibniz
 8001b9e:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <PIDzero+0xf8>)
 8001ba0:	ed93 7a00 	vldr	s14, [r3]
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <PIDzero+0xec>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <PIDzero+0x104>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <PIDzero+0x104>)
 8001bba:	edc3 7a00 	vstr	s15, [r3]

	Derivate = (ErrPos[0]-ErrPos[1]) / DeltaTime; // d/dt position
 8001bbe:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <PIDzero+0xf8>)
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <PIDzero+0xf8>)
 8001bc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bca:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <PIDzero+0xec>)
 8001bd0:	ed93 7a00 	vldr	s14, [r3]
 8001bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <PIDzero+0x108>)
 8001bda:	edc3 7a00 	vstr	s15, [r3]

	u_contr = Propo + (K_I * Integral) ; // PID u[k] + (K_D * Derivate)
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <PIDzero+0x10c>)
 8001be0:	ed93 7a00 	vldr	s14, [r3]
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <PIDzero+0x104>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <PIDzero+0x100>)
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <PIDzero+0x110>)
 8001bfa:	edc3 7a00 	vstr	s15, [r3]

	ErrPos[1] = ErrPos[0]; // log previous error
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <PIDzero+0xf8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <PIDzero+0xf8>)
 8001c04:	6053      	str	r3, [r2, #4]
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000378 	.word	0x20000378
 8001c10:	20000370 	.word	0x20000370
 8001c14:	49742400 	.word	0x49742400
 8001c18:	20000374 	.word	0x20000374
 8001c1c:	20000360 	.word	0x20000360
 8001c20:	20000234 	.word	0x20000234
 8001c24:	20000364 	.word	0x20000364
 8001c28:	20000004 	.word	0x20000004
 8001c2c:	2000037c 	.word	0x2000037c
 8001c30:	20000380 	.word	0x20000380
 8001c34:	20000384 	.word	0x20000384
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	2000036c 	.word	0x2000036c

08001c40 <MotDrvCytron>:

void MotDrvCytron(){
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

	//   direction chk
	if(u_contr < 0){mot_dirctn= 1;}
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <MotDrvCytron+0x9c>)
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	d503      	bpl.n	8001c5c <MotDrvCytron+0x1c>
 8001c54:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <MotDrvCytron+0xa0>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e00e      	b.n	8001c7a <MotDrvCytron+0x3a>
	else if(u_contr > 0) {mot_dirctn = 0;}
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <MotDrvCytron+0x9c>)
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	dd03      	ble.n	8001c74 <MotDrvCytron+0x34>
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <MotDrvCytron+0xa0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
 8001c72:	e002      	b.n	8001c7a <MotDrvCytron+0x3a>
	else{PWMOut = 0;}
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <MotDrvCytron+0xa4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	801a      	strh	r2, [r3, #0]

	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <MotDrvCytron+0x9c>)
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	eef0 7ae7 	vabs.f32	s15, s15
 8001c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c88:	ee17 3a90 	vmov	r3, s15
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <MotDrvCytron+0xa4>)
 8001c90:	801a      	strh	r2, [r3, #0]
	if(PWMOut> 7000){PWMOut = 7000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MotDrvCytron+0xa4>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d903      	bls.n	8001ca6 <MotDrvCytron+0x66>
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MotDrvCytron+0xa4>)
 8001ca0:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001ca4:	801a      	strh	r2, [r3, #0]
	if(PWMOut < 1600 && fabsf(ErrPos[0]) >= 4){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MotDrvCytron+0xa4>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001cae:	d210      	bcs.n	8001cd2 <MotDrvCytron+0x92>
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <MotDrvCytron+0xa8>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	eef0 7ae7 	vabs.f32	s15, s15
 8001cba:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	da00      	bge.n	8001cca <MotDrvCytron+0x8a>
	//if(ErrPos[0] < 2){PWMOut = 0;}
}
 8001cc8:	e003      	b.n	8001cd2 <MotDrvCytron+0x92>
	if(PWMOut < 1600 && fabsf(ErrPos[0]) >= 4){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MotDrvCytron+0xa4>)
 8001ccc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001cd0:	801a      	strh	r2, [r3, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	2000036c 	.word	0x2000036c
 8001ce0:	2000035c 	.word	0x2000035c
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000364 	.word	0x20000364

08001cec <IOExpenderInit>:

/////////////////////Abs Encoder I2C////////////////////////////////////////////
void IOExpenderInit() {// call when start system
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 8001cf2:	2364      	movs	r3, #100	; 0x64
 8001cf4:	9302      	str	r3, [sp, #8]
 8001cf6:	2316      	movs	r3, #22
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <IOExpenderInit+0x24>)
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	2200      	movs	r2, #0
 8001d02:	2140      	movs	r1, #64	; 0x40
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <IOExpenderInit+0x28>)
 8001d06:	f001 fc49 	bl	800359c <HAL_I2C_Mem_Write>
			0x16, 100);
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	2000000c 	.word	0x2000000c
 8001d14:	2000004c 	.word	0x2000004c

08001d18 <AbsEncI2CReadx>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af04      	add	r7, sp, #16
 8001d1e:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8001d20:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <AbsEncI2CReadx+0xa4>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d044      	beq.n	8001db2 <AbsEncI2CReadx+0x9a>
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <AbsEncI2CReadx+0xa8>)
 8001d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d13e      	bne.n	8001db2 <AbsEncI2CReadx+0x9a>
		switch(flag_absenc){
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <AbsEncI2CReadx+0xa4>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d002      	beq.n	8001d42 <AbsEncI2CReadx+0x2a>
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d010      	beq.n	8001d62 <AbsEncI2CReadx+0x4a>
		default:
			break;
 8001d40:	e038      	b.n	8001db4 <AbsEncI2CReadx+0x9c>

		case 1:
			//HAL_I2C_Master_Receive(&hi2c1, ADDR_IOXT, GrayCBitx, 1, 100);
			//HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, Size, XferOptions);
			HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	2302      	movs	r3, #2
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	2212      	movs	r2, #18
 8001d52:	2140      	movs	r1, #64	; 0x40
 8001d54:	481a      	ldr	r0, [pc, #104]	; (8001dc0 <AbsEncI2CReadx+0xa8>)
 8001d56:	f001 fd1b 	bl	8003790 <HAL_I2C_Mem_Read>
						RawRAB, 2, 100);
			flag_absenc = 2;
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <AbsEncI2CReadx+0xa4>)
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	701a      	strb	r2, [r3, #0]
		break;
 8001d60:	e028      	b.n	8001db4 <AbsEncI2CReadx+0x9c>

		case 2:
			//invert in IPOL
			GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <AbsEncI2CReadx+0xac>)
 8001d64:	785b      	ldrb	r3, [r3, #1]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	b21a      	sxth	r2, r3
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <AbsEncI2CReadx+0xac>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <AbsEncI2CReadx+0xb0>)
 8001d78:	801a      	strh	r2, [r3, #0]

			//GrayCBitXI = ~GrayCBitx - 0b1111110000000000; // invert and clear 6 high
			//GrayCBitXI = ~GrayCBitx & 0b0000001111111111;
			BinPosXI = GraytoBinario(GrayCBitXI, 10) + POSOFFSET;  //
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <AbsEncI2CReadx+0xb0>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	210a      	movs	r1, #10
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fdbb 	bl	80018fc <GraytoBinario>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f5a3 73dd 	sub.w	r3, r3, #442	; 0x1ba
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <AbsEncI2CReadx+0xb4>)
 8001d90:	801a      	strh	r2, [r3, #0]
			if (BinPosXI >= 1024){BinPosXI = BinPosXI % 1024;}
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <AbsEncI2CReadx+0xb4>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9a:	d306      	bcc.n	8001daa <AbsEncI2CReadx+0x92>
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <AbsEncI2CReadx+0xb4>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <AbsEncI2CReadx+0xb4>)
 8001da8:	801a      	strh	r2, [r3, #0]
			flag_absenc = 0;
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <AbsEncI2CReadx+0xa4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
		break;
 8001db0:	e000      	b.n	8001db4 <AbsEncI2CReadx+0x9c>
		}
	}
 8001db2:	bf00      	nop
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000236 	.word	0x20000236
 8001dc0:	2000004c 	.word	0x2000004c
 8001dc4:	20000230 	.word	0x20000230
 8001dc8:	20000232 	.word	0x20000232
 8001dcc:	20000234 	.word	0x20000234

08001dd0 <Efft_activate>:
//////////////// End Effector /////////////////////////////////
void Efft_activate(){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 8001dd6:	2345      	movs	r3, #69	; 0x45
 8001dd8:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;
	switch(efshoot){
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <Efft_activate+0x7c>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d015      	beq.n	8001e0e <Efft_activate+0x3e>
	default:
	case ef_INIT:
		if(flag_efftActi != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <Efft_activate+0x80>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d029      	beq.n	8001e3e <Efft_activate+0x6e>
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <Efft_activate+0x84>)
 8001dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d123      	bne.n	8001e3e <Efft_activate+0x6e>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 8001df6:	1dfa      	adds	r2, r7, #7
 8001df8:	2301      	movs	r3, #1
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	2146      	movs	r1, #70	; 0x46
 8001e00:	4814      	ldr	r0, [pc, #80]	; (8001e54 <Efft_activate+0x84>)
 8001e02:	f001 feeb 	bl	8003bdc <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_shoot;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <Efft_activate+0x7c>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001e0c:	e017      	b.n	8001e3e <Efft_activate+0x6e>

	case ef_shoot:
		if (hi2c1.State == HAL_I2C_STATE_READY){
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <Efft_activate+0x84>)
 8001e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d113      	bne.n	8001e42 <Efft_activate+0x72>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 8001e1a:	1dfa      	adds	r2, r7, #7
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	2146      	movs	r1, #70	; 0x46
 8001e24:	480b      	ldr	r0, [pc, #44]	; (8001e54 <Efft_activate+0x84>)
 8001e26:	f001 fed9 	bl	8003bdc <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <Efft_activate+0x7c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <Efft_activate+0x80>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 1;
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <Efft_activate+0x88>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001e3c:	e001      	b.n	8001e42 <Efft_activate+0x72>
	break;
 8001e3e:	bf00      	nop
 8001e40:	e000      	b.n	8001e44 <Efft_activate+0x74>
	break;
 8001e42:	bf00      	nop
	}

}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000398 	.word	0x20000398
 8001e50:	20000389 	.word	0x20000389
 8001e54:	2000004c 	.word	0x2000004c
 8001e58:	2000038b 	.word	0x2000038b

08001e5c <Efft_read>:
void Efft_read(uint8_t *Rddata){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	6078      	str	r0, [r7, #4]
	if (flag_efftRead != 0 && hi2c1.State == HAL_I2C_STATE_READY){
		//HAL_I2C_Mem_Read_IT(&hi2c1, ADDR_EFFT, 0x23, I2C_MEMADD_SIZE_8BIT, Rddata, 1);
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, 0x23, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		//flag_efftRead = 0;
	}*/
	switch(efrdStatus){
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <Efft_read+0x74>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d015      	beq.n	8001e98 <Efft_read+0x3c>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <Efft_read+0x78>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d026      	beq.n	8001ec2 <Efft_read+0x66>
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <Efft_read+0x7c>)
 8001e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d120      	bne.n	8001ec2 <Efft_read+0x66>
			//HAL_I2C_Master_Transmit_IT(&hi2c1, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 8001e80:	2302      	movs	r3, #2
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2301      	movs	r3, #1
 8001e86:	4a15      	ldr	r2, [pc, #84]	; (8001edc <Efft_read+0x80>)
 8001e88:	2146      	movs	r1, #70	; 0x46
 8001e8a:	4813      	ldr	r0, [pc, #76]	; (8001ed8 <Efft_read+0x7c>)
 8001e8c:	f001 fea6 	bl	8003bdc <HAL_I2C_Master_Seq_Transmit_IT>
			efrdStatus = 1;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <Efft_read+0x74>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001e96:	e014      	b.n	8001ec2 <Efft_read+0x66>

	case 1:

		if (hi2c1.State == HAL_I2C_STATE_READY){
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <Efft_read+0x7c>)
 8001e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d110      	bne.n	8001ec6 <Efft_read+0x6a>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	2146      	movs	r1, #70	; 0x46
 8001eae:	480a      	ldr	r0, [pc, #40]	; (8001ed8 <Efft_read+0x7c>)
 8001eb0:	f001 ff5a 	bl	8003d68 <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Receive_IT(&hi2c1, ADDR_EFFT, Rddata, 1);
		flag_efftRead = 0;
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <Efft_read+0x78>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <Efft_read+0x74>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]

			}
	break;
 8001ec0:	e001      	b.n	8001ec6 <Efft_read+0x6a>
	break;
 8001ec2:	bf00      	nop
 8001ec4:	e000      	b.n	8001ec8 <Efft_read+0x6c>
	break;
 8001ec6:	bf00      	nop
	}

}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000399 	.word	0x20000399
 8001ed4:	2000038a 	.word	0x2000038a
 8001ed8:	2000004c 	.word	0x2000004c
 8001edc:	20000022 	.word	0x20000022

08001ee0 <HAL_GPIO_EXTI_Callback>:


/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	80fb      	strh	r3, [r7, #6]
	//// EMER ////
	if(GPIO_Pin == GPIO_PIN_11){
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ef0:	d112      	bne.n	8001f18 <HAL_GPIO_EXTI_Callback+0x38>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001ef2:	2120      	movs	r1, #32
 8001ef4:	481e      	ldr	r0, [pc, #120]	; (8001f70 <HAL_GPIO_EXTI_Callback+0x90>)
 8001ef6:	f001 f9da 	bl	80032ae <HAL_GPIO_TogglePin>
		counter_e++;
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <HAL_GPIO_EXTI_Callback+0x94>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	3301      	adds	r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <HAL_GPIO_EXTI_Callback+0x94>)
 8001f04:	701a      	strb	r2, [r3, #0]
		grandState = emer;
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x98>)
 8001f08:	2203      	movs	r2, #3
 8001f0a:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x9c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//// Stop ////
	if(GPIO_Pin == GPIO_PIN_10){
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1e:	d10c      	bne.n	8001f3a <HAL_GPIO_EXTI_Callback+0x5a>
		PWMOut = 0;
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x9c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x98>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d102      	bne.n	8001f3a <HAL_GPIO_EXTI_Callback+0x5a>
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x98>)
 8001f36:	2204      	movs	r2, #4
 8001f38:	701a      	strb	r2, [r3, #0]
		//else{grandState = stop;}

		}
	//// work Blue button////
	if(GPIO_Pin == GPIO_PIN_13){
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f40:	d10b      	bne.n	8001f5a <HAL_GPIO_EXTI_Callback+0x7a>
		bluecounter++;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x9c>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x9c>)
 8001f4c:	701a      	strb	r2, [r3, #0]
		flag_efftActi = 1;
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
		trig_efftRead = 1;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
		//flag_efftRead = 1;
	}

	//// setzero ////
		if(GPIO_Pin == GPIO_PIN_2){
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d103      	bne.n	8001f68 <HAL_GPIO_EXTI_Callback+0x88>
			TargetDeg = 0;
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_GPIO_EXTI_Callback+0xac>)
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
		}
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40020000 	.word	0x40020000
 8001f74:	20000228 	.word	0x20000228
 8001f78:	2000021c 	.word	0x2000021c
 8001f7c:	2000035d 	.word	0x2000035d
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000389 	.word	0x20000389
 8001f88:	2000038b 	.word	0x2000038b
 8001f8c:	20000360 	.word	0x20000360

08001f90 <micros>:
///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 8001f90:	b4b0      	push	{r4, r5, r7}
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <micros+0x2c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <micros+0x30>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	1884      	adds	r4, r0, r2
 8001fa8:	eb41 0503 	adc.w	r5, r1, r3
 8001fac:	4622      	mov	r2, r4
 8001fae:	462b      	mov	r3, r5
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bcb0      	pop	{r4, r5, r7}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000130 	.word	0x20000130
 8001fc0:	20000220 	.word	0x20000220

08001fc4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001fc4:	b4b0      	push	{r4, r5, r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d10a      	bne.n	8001fea <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fde:	1854      	adds	r4, r2, r1
 8001fe0:	f143 0500 	adc.w	r5, r3, #0
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001fe6:	e9c3 4500 	strd	r4, r5, [r3]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bcb0      	pop	{r4, r5, r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	20000130 	.word	0x20000130
 8001ff8:	20000220 	.word	0x20000220

08001ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002004:	e7fe      	b.n	8002004 <Error_Handler+0x8>
	...

08002008 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_MspInit+0x4c>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <HAL_MspInit+0x4c>)
 8002018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <HAL_MspInit+0x4c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_MspInit+0x4c>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_MspInit+0x4c>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_MspInit+0x4c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002046:	2007      	movs	r0, #7
 8002048:	f000 fb9a 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a21      	ldr	r2, [pc, #132]	; (80020fc <HAL_I2C_MspInit+0xa4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d13c      	bne.n	80020f4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_I2C_MspInit+0xa8>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <HAL_I2C_MspInit+0xa8>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_I2C_MspInit+0xa8>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002096:	f44f 7340 	mov.w	r3, #768	; 0x300
 800209a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800209c:	2312      	movs	r3, #18
 800209e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020a8:	2304      	movs	r3, #4
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	4814      	ldr	r0, [pc, #80]	; (8002104 <HAL_I2C_MspInit+0xac>)
 80020b4:	f000 ff46 	bl	8002f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_I2C_MspInit+0xa8>)
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <HAL_I2C_MspInit+0xa8>)
 80020c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c6:	6413      	str	r3, [r2, #64]	; 0x40
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_I2C_MspInit+0xa8>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2100      	movs	r1, #0
 80020d8:	201f      	movs	r0, #31
 80020da:	f000 fb5c 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020de:	201f      	movs	r0, #31
 80020e0:	f000 fb75 	bl	80027ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2100      	movs	r1, #0
 80020e8:	2020      	movs	r0, #32
 80020ea:	f000 fb54 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80020ee:	2020      	movs	r0, #32
 80020f0:	f000 fb6d 	bl	80027ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020f4:	bf00      	nop
 80020f6:	3728      	adds	r7, #40	; 0x28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40005400 	.word	0x40005400
 8002100:	40023800 	.word	0x40023800
 8002104:	40020400 	.word	0x40020400

08002108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d15d      	bne.n	80021e6 <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	4b47      	ldr	r3, [pc, #284]	; (800224c <HAL_TIM_Base_MspInit+0x144>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a46      	ldr	r2, [pc, #280]	; (800224c <HAL_TIM_Base_MspInit+0x144>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
 800213a:	4b44      	ldr	r3, [pc, #272]	; (800224c <HAL_TIM_Base_MspInit+0x144>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	4b40      	ldr	r3, [pc, #256]	; (800224c <HAL_TIM_Base_MspInit+0x144>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a3f      	ldr	r2, [pc, #252]	; (800224c <HAL_TIM_Base_MspInit+0x144>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b3d      	ldr	r3, [pc, #244]	; (800224c <HAL_TIM_Base_MspInit+0x144>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 8002162:	2301      	movs	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002172:	2301      	movs	r3, #1
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	4619      	mov	r1, r3
 800217c:	4834      	ldr	r0, [pc, #208]	; (8002250 <HAL_TIM_Base_MspInit+0x148>)
 800217e:	f000 fee1 	bl	8002f44 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002182:	4b34      	ldr	r3, [pc, #208]	; (8002254 <HAL_TIM_Base_MspInit+0x14c>)
 8002184:	4a34      	ldr	r2, [pc, #208]	; (8002258 <HAL_TIM_Base_MspInit+0x150>)
 8002186:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002188:	4b32      	ldr	r3, [pc, #200]	; (8002254 <HAL_TIM_Base_MspInit+0x14c>)
 800218a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800218e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002190:	4b30      	ldr	r3, [pc, #192]	; (8002254 <HAL_TIM_Base_MspInit+0x14c>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002196:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <HAL_TIM_Base_MspInit+0x14c>)
 8002198:	2200      	movs	r2, #0
 800219a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800219c:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <HAL_TIM_Base_MspInit+0x14c>)
 800219e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021a2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021a4:	4b2b      	ldr	r3, [pc, #172]	; (8002254 <HAL_TIM_Base_MspInit+0x14c>)
 80021a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021aa:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021ac:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_TIM_Base_MspInit+0x14c>)
 80021ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021b2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80021b4:	4b27      	ldr	r3, [pc, #156]	; (8002254 <HAL_TIM_Base_MspInit+0x14c>)
 80021b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ba:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_TIM_Base_MspInit+0x14c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_TIM_Base_MspInit+0x14c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80021c8:	4822      	ldr	r0, [pc, #136]	; (8002254 <HAL_TIM_Base_MspInit+0x14c>)
 80021ca:	f000 fb1b 	bl	8002804 <HAL_DMA_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 80021d4:	f7ff ff12 	bl	8001ffc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a1e      	ldr	r2, [pc, #120]	; (8002254 <HAL_TIM_Base_MspInit+0x14c>)
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
 80021de:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <HAL_TIM_Base_MspInit+0x14c>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80021e4:	e02e      	b.n	8002244 <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM4)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1c      	ldr	r2, [pc, #112]	; (800225c <HAL_TIM_Base_MspInit+0x154>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d10e      	bne.n	800220e <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021f0:	2300      	movs	r3, #0
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_TIM_Base_MspInit+0x144>)
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	4a14      	ldr	r2, [pc, #80]	; (800224c <HAL_TIM_Base_MspInit+0x144>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_TIM_Base_MspInit+0x144>)
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]
}
 800220c:	e01a      	b.n	8002244 <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM11)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a13      	ldr	r2, [pc, #76]	; (8002260 <HAL_TIM_Base_MspInit+0x158>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d115      	bne.n	8002244 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_TIM_Base_MspInit+0x144>)
 800221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002220:	4a0a      	ldr	r2, [pc, #40]	; (800224c <HAL_TIM_Base_MspInit+0x144>)
 8002222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002226:	6453      	str	r3, [r2, #68]	; 0x44
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_TIM_Base_MspInit+0x144>)
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	201a      	movs	r0, #26
 800223a:	f000 faac 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800223e:	201a      	movs	r0, #26
 8002240:	f000 fac5 	bl	80027ce <HAL_NVIC_EnableIRQ>
}
 8002244:	bf00      	nop
 8002246:	3730      	adds	r7, #48	; 0x30
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	40020000 	.word	0x40020000
 8002254:	20000178 	.word	0x20000178
 8002258:	40026088 	.word	0x40026088
 800225c:	40000800 	.word	0x40000800
 8002260:	40014800 	.word	0x40014800

08002264 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a12      	ldr	r2, [pc, #72]	; (80022cc <HAL_TIM_MspPostInit+0x68>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d11d      	bne.n	80022c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_TIM_MspPostInit+0x6c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a10      	ldr	r2, [pc, #64]	; (80022d0 <HAL_TIM_MspPostInit+0x6c>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_TIM_MspPostInit+0x6c>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 80022a2:	2340      	movs	r3, #64	; 0x40
 80022a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 80022b6:	f107 030c 	add.w	r3, r7, #12
 80022ba:	4619      	mov	r1, r3
 80022bc:	4805      	ldr	r0, [pc, #20]	; (80022d4 <HAL_TIM_MspPostInit+0x70>)
 80022be:	f000 fe41 	bl	8002f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80022c2:	bf00      	nop
 80022c4:	3720      	adds	r7, #32
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40000800 	.word	0x40000800
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020400 	.word	0x40020400

080022d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <HAL_UART_MspInit+0x84>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d12b      	bne.n	8002352 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_UART_MspInit+0x88>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a17      	ldr	r2, [pc, #92]	; (8002360 <HAL_UART_MspInit+0x88>)
 8002304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_UART_MspInit+0x88>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_UART_MspInit+0x88>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a10      	ldr	r2, [pc, #64]	; (8002360 <HAL_UART_MspInit+0x88>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_UART_MspInit+0x88>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002332:	230c      	movs	r3, #12
 8002334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233e:	2303      	movs	r3, #3
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002342:	2307      	movs	r3, #7
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <HAL_UART_MspInit+0x8c>)
 800234e:	f000 fdf9 	bl	8002f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002352:	bf00      	nop
 8002354:	3728      	adds	r7, #40	; 0x28
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40004400 	.word	0x40004400
 8002360:	40023800 	.word	0x40023800
 8002364:	40020000 	.word	0x40020000

08002368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800236c:	e7fe      	b.n	800236c <NMI_Handler+0x4>

0800236e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002372:	e7fe      	b.n	8002372 <HardFault_Handler+0x4>

08002374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <MemManage_Handler+0x4>

0800237a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800237e:	e7fe      	b.n	800237e <BusFault_Handler+0x4>

08002380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <UsageFault_Handler+0x4>

08002386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b4:	f000 f8d0 	bl	8002558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}

080023bc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 80023c0:	2004      	movs	r0, #4
 80023c2:	f000 ff8f 	bl	80032e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <DMA1_Stream5_IRQHandler+0x10>)
 80023d2:	f000 fb3f 	bl	8002a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000178 	.word	0x20000178

080023e0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80023e6:	f004 fe97 	bl	8007118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000130 	.word	0x20000130

080023f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <I2C1_EV_IRQHandler+0x10>)
 80023fa:	f001 fdb3 	bl	8003f64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	2000004c 	.word	0x2000004c

08002408 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <I2C1_ER_IRQHandler+0x10>)
 800240e:	f001 ff1a 	bl	8004246 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000004c 	.word	0x2000004c

0800241c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 8002420:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002424:	f000 ff5e 	bl	80032e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 8002428:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800242c:	f000 ff5a 	bl	80032e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002430:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002434:	f000 ff56 	bl	80032e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <SystemInit+0x20>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <SystemInit+0x20>)
 8002448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800244c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002498 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002464:	480d      	ldr	r0, [pc, #52]	; (800249c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002466:	490e      	ldr	r1, [pc, #56]	; (80024a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002468:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800246c:	e002      	b.n	8002474 <LoopCopyDataInit>

0800246e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002472:	3304      	adds	r3, #4

08002474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002478:	d3f9      	bcc.n	800246e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247a:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800247c:	4c0b      	ldr	r4, [pc, #44]	; (80024ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002480:	e001      	b.n	8002486 <LoopFillZerobss>

08002482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002484:	3204      	adds	r2, #4

08002486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002488:	d3fb      	bcc.n	8002482 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800248a:	f7ff ffd7 	bl	800243c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800248e:	f006 f9bb 	bl	8008808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002492:	f7fe fd4f 	bl	8000f34 <main>
  bx  lr    
 8002496:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002498:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800249c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a0:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80024a4:	080088a8 	.word	0x080088a8
  ldr r2, =_sbss
 80024a8:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80024ac:	200003a0 	.word	0x200003a0

080024b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b0:	e7fe      	b.n	80024b0 <ADC_IRQHandler>
	...

080024b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_Init+0x40>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0d      	ldr	r2, [pc, #52]	; (80024f4 <HAL_Init+0x40>)
 80024be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_Init+0x40>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <HAL_Init+0x40>)
 80024ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_Init+0x40>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <HAL_Init+0x40>)
 80024d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024dc:	2003      	movs	r0, #3
 80024de:	f000 f94f 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f000 f808 	bl	80024f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e8:	f7ff fd8e 	bl	8002008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023c00 	.word	0x40023c00

080024f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_InitTick+0x54>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_InitTick+0x58>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4619      	mov	r1, r3
 800250a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800250e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f967 	bl	80027ea <HAL_SYSTICK_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e00e      	b.n	8002544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b0f      	cmp	r3, #15
 800252a:	d80a      	bhi.n	8002542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800252c:	2200      	movs	r2, #0
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	f000 f92f 	bl	8002796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002538:	4a06      	ldr	r2, [pc, #24]	; (8002554 <HAL_InitTick+0x5c>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e000      	b.n	8002544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000024 	.word	0x20000024
 8002550:	2000002c 	.word	0x2000002c
 8002554:	20000028 	.word	0x20000028

08002558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_IncTick+0x20>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_IncTick+0x24>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4413      	add	r3, r2
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <HAL_IncTick+0x24>)
 800256a:	6013      	str	r3, [r2, #0]
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	2000002c 	.word	0x2000002c
 800257c:	2000039c 	.word	0x2000039c

08002580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return uwTick;
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <HAL_GetTick+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	2000039c 	.word	0x2000039c

08002598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a0:	f7ff ffee 	bl	8002580 <HAL_GetTick>
 80025a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d005      	beq.n	80025be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <HAL_Delay+0x44>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4413      	add	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025be:	bf00      	nop
 80025c0:	f7ff ffde 	bl	8002580 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d8f7      	bhi.n	80025c0 <HAL_Delay+0x28>
  {
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000002c 	.word	0x2000002c

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f7ff ff8e 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff29 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a8:	f7ff ff3e 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80027ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7ff ff8e 	bl	80026d4 <NVIC_EncodePriority>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff5d 	bl	8002680 <__NVIC_SetPriority>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff31 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ffa2 	bl	800273c <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff feb6 	bl	8002580 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e099      	b.n	8002954 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002840:	e00f      	b.n	8002862 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002842:	f7ff fe9d 	bl	8002580 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b05      	cmp	r3, #5
 800284e:	d908      	bls.n	8002862 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2203      	movs	r2, #3
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e078      	b.n	8002954 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e8      	bne.n	8002842 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	4b38      	ldr	r3, [pc, #224]	; (800295c <HAL_DMA_Init+0x158>)
 800287c:	4013      	ands	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800288e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d107      	bne.n	80028cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	4313      	orrs	r3, r2
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f023 0307 	bic.w	r3, r3, #7
 80028e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d117      	bne.n	8002926 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00e      	beq.n	8002926 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fa9f 	bl	8002e4c <DMA_CheckFifoParam>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002922:	2301      	movs	r3, #1
 8002924:	e016      	b.n	8002954 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa56 	bl	8002de0 <DMA_CalcBaseAndBitshift>
 8002934:	4603      	mov	r3, r0
 8002936:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	223f      	movs	r2, #63	; 0x3f
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	f010803f 	.word	0xf010803f

08002960 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_DMA_Start_IT+0x26>
 8002982:	2302      	movs	r3, #2
 8002984:	e040      	b.n	8002a08 <HAL_DMA_Start_IT+0xa8>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d12f      	bne.n	80029fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2202      	movs	r2, #2
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f9e8 	bl	8002d84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	223f      	movs	r2, #63	; 0x3f
 80029ba:	409a      	lsls	r2, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0216 	orr.w	r2, r2, #22
 80029ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0208 	orr.w	r2, r2, #8
 80029e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e005      	b.n	8002a06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
 8002a04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d004      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00c      	b.n	8002a48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2205      	movs	r2, #5
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a60:	4b8e      	ldr	r3, [pc, #568]	; (8002c9c <HAL_DMA_IRQHandler+0x248>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a8e      	ldr	r2, [pc, #568]	; (8002ca0 <HAL_DMA_IRQHandler+0x24c>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	0a9b      	lsrs	r3, r3, #10
 8002a6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	2208      	movs	r2, #8
 8002a80:	409a      	lsls	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01a      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0204 	bic.w	r2, r2, #4
 8002aa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	2208      	movs	r2, #8
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	f043 0201 	orr.w	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f043 0202 	orr.w	r2, r3, #2
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	2204      	movs	r2, #4
 8002afc:	409a      	lsls	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d012      	beq.n	8002b2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	2204      	movs	r2, #4
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f043 0204 	orr.w	r2, r3, #4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	2210      	movs	r2, #16
 8002b32:	409a      	lsls	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d043      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d03c      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	2210      	movs	r2, #16
 8002b50:	409a      	lsls	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d018      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d108      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d024      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4798      	blx	r3
 8002b82:	e01f      	b.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01b      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
 8002b94:	e016      	b.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0208 	bic.w	r2, r2, #8
 8002bb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	2220      	movs	r2, #32
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 808f 	beq.w	8002cf4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8087 	beq.w	8002cf4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2220      	movs	r2, #32
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d136      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0216 	bic.w	r2, r2, #22
 8002c0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <HAL_DMA_IRQHandler+0x1da>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0208 	bic.w	r2, r2, #8
 8002c3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c42:	223f      	movs	r2, #63	; 0x3f
 8002c44:	409a      	lsls	r2, r3
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d07e      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
        }
        return;
 8002c6a:	e079      	b.n	8002d60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01d      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d031      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
 8002c98:	e02c      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x2a0>
 8002c9a:	bf00      	nop
 8002c9c:	20000024 	.word	0x20000024
 8002ca0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d023      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
 8002cb4:	e01e      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10f      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0210 	bic.w	r2, r2, #16
 8002cd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d032      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d022      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2205      	movs	r2, #5
 8002d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	3301      	adds	r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d307      	bcc.n	8002d3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f2      	bne.n	8002d20 <HAL_DMA_IRQHandler+0x2cc>
 8002d3a:	e000      	b.n	8002d3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
 8002d5e:	e000      	b.n	8002d62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d60:	bf00      	nop
    }
  }
}
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d76:	b2db      	uxtb	r3, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002da0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d108      	bne.n	8002dc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dc2:	e007      	b.n	8002dd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	60da      	str	r2, [r3, #12]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	3b10      	subs	r3, #16
 8002df0:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <DMA_CalcBaseAndBitshift+0x64>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dfa:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <DMA_CalcBaseAndBitshift+0x68>)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d909      	bls.n	8002e22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e16:	f023 0303 	bic.w	r3, r3, #3
 8002e1a:	1d1a      	adds	r2, r3, #4
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e20:	e007      	b.n	8002e32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	aaaaaaab 	.word	0xaaaaaaab
 8002e48:	08008890 	.word	0x08008890

08002e4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d11f      	bne.n	8002ea6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d856      	bhi.n	8002f1a <DMA_CheckFifoParam+0xce>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <DMA_CheckFifoParam+0x28>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002e97 	.word	0x08002e97
 8002e7c:	08002e85 	.word	0x08002e85
 8002e80:	08002f1b 	.word	0x08002f1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d046      	beq.n	8002f1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e94:	e043      	b.n	8002f1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e9e:	d140      	bne.n	8002f22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea4:	e03d      	b.n	8002f22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eae:	d121      	bne.n	8002ef4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d837      	bhi.n	8002f26 <DMA_CheckFifoParam+0xda>
 8002eb6:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <DMA_CheckFifoParam+0x70>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002ed3 	.word	0x08002ed3
 8002ec4:	08002ecd 	.word	0x08002ecd
 8002ec8:	08002ee5 	.word	0x08002ee5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed0:	e030      	b.n	8002f34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d025      	beq.n	8002f2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee2:	e022      	b.n	8002f2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eec:	d11f      	bne.n	8002f2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ef2:	e01c      	b.n	8002f2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d903      	bls.n	8002f02 <DMA_CheckFifoParam+0xb6>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d003      	beq.n	8002f08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f00:	e018      	b.n	8002f34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
      break;
 8002f06:	e015      	b.n	8002f34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00e      	beq.n	8002f32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      break;
 8002f18:	e00b      	b.n	8002f32 <DMA_CheckFifoParam+0xe6>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e00a      	b.n	8002f34 <DMA_CheckFifoParam+0xe8>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e008      	b.n	8002f34 <DMA_CheckFifoParam+0xe8>
      break;
 8002f22:	bf00      	nop
 8002f24:	e006      	b.n	8002f34 <DMA_CheckFifoParam+0xe8>
      break;
 8002f26:	bf00      	nop
 8002f28:	e004      	b.n	8002f34 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e002      	b.n	8002f34 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f2e:	bf00      	nop
 8002f30:	e000      	b.n	8002f34 <DMA_CheckFifoParam+0xe8>
      break;
 8002f32:	bf00      	nop
    }
  } 
  
  return status; 
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop

08002f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	e159      	b.n	8003214 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f60:	2201      	movs	r2, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	f040 8148 	bne.w	800320e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d005      	beq.n	8002f96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d130      	bne.n	8002ff8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fcc:	2201      	movs	r2, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 0201 	and.w	r2, r3, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	2b03      	cmp	r3, #3
 8003002:	d017      	beq.n	8003034 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	2203      	movs	r2, #3
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d123      	bne.n	8003088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	08da      	lsrs	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3208      	adds	r2, #8
 8003048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	220f      	movs	r2, #15
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	08da      	lsrs	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3208      	adds	r2, #8
 8003082:	69b9      	ldr	r1, [r7, #24]
 8003084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0203 	and.w	r2, r3, #3
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80a2 	beq.w	800320e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b57      	ldr	r3, [pc, #348]	; (800322c <HAL_GPIO_Init+0x2e8>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	4a56      	ldr	r2, [pc, #344]	; (800322c <HAL_GPIO_Init+0x2e8>)
 80030d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d8:	6453      	str	r3, [r2, #68]	; 0x44
 80030da:	4b54      	ldr	r3, [pc, #336]	; (800322c <HAL_GPIO_Init+0x2e8>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030e6:	4a52      	ldr	r2, [pc, #328]	; (8003230 <HAL_GPIO_Init+0x2ec>)
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	3302      	adds	r3, #2
 80030ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	220f      	movs	r2, #15
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a49      	ldr	r2, [pc, #292]	; (8003234 <HAL_GPIO_Init+0x2f0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d019      	beq.n	8003146 <HAL_GPIO_Init+0x202>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a48      	ldr	r2, [pc, #288]	; (8003238 <HAL_GPIO_Init+0x2f4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <HAL_GPIO_Init+0x1fe>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a47      	ldr	r2, [pc, #284]	; (800323c <HAL_GPIO_Init+0x2f8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00d      	beq.n	800313e <HAL_GPIO_Init+0x1fa>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a46      	ldr	r2, [pc, #280]	; (8003240 <HAL_GPIO_Init+0x2fc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d007      	beq.n	800313a <HAL_GPIO_Init+0x1f6>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a45      	ldr	r2, [pc, #276]	; (8003244 <HAL_GPIO_Init+0x300>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d101      	bne.n	8003136 <HAL_GPIO_Init+0x1f2>
 8003132:	2304      	movs	r3, #4
 8003134:	e008      	b.n	8003148 <HAL_GPIO_Init+0x204>
 8003136:	2307      	movs	r3, #7
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x204>
 800313a:	2303      	movs	r3, #3
 800313c:	e004      	b.n	8003148 <HAL_GPIO_Init+0x204>
 800313e:	2302      	movs	r3, #2
 8003140:	e002      	b.n	8003148 <HAL_GPIO_Init+0x204>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_GPIO_Init+0x204>
 8003146:	2300      	movs	r3, #0
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	f002 0203 	and.w	r2, r2, #3
 800314e:	0092      	lsls	r2, r2, #2
 8003150:	4093      	lsls	r3, r2
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003158:	4935      	ldr	r1, [pc, #212]	; (8003230 <HAL_GPIO_Init+0x2ec>)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	3302      	adds	r3, #2
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003166:	4b38      	ldr	r3, [pc, #224]	; (8003248 <HAL_GPIO_Init+0x304>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800318a:	4a2f      	ldr	r2, [pc, #188]	; (8003248 <HAL_GPIO_Init+0x304>)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003190:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_GPIO_Init+0x304>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b4:	4a24      	ldr	r2, [pc, #144]	; (8003248 <HAL_GPIO_Init+0x304>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ba:	4b23      	ldr	r3, [pc, #140]	; (8003248 <HAL_GPIO_Init+0x304>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031de:	4a1a      	ldr	r2, [pc, #104]	; (8003248 <HAL_GPIO_Init+0x304>)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e4:	4b18      	ldr	r3, [pc, #96]	; (8003248 <HAL_GPIO_Init+0x304>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003208:	4a0f      	ldr	r2, [pc, #60]	; (8003248 <HAL_GPIO_Init+0x304>)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3301      	adds	r3, #1
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	f67f aea2 	bls.w	8002f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	3724      	adds	r7, #36	; 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	40013800 	.word	0x40013800
 8003234:	40020000 	.word	0x40020000
 8003238:	40020400 	.word	0x40020400
 800323c:	40020800 	.word	0x40020800
 8003240:	40020c00 	.word	0x40020c00
 8003244:	40021000 	.word	0x40021000
 8003248:	40013c00 	.word	0x40013c00

0800324c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	887b      	ldrh	r3, [r7, #2]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	e001      	b.n	800326e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
 8003288:	4613      	mov	r3, r2
 800328a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800328c:	787b      	ldrb	r3, [r7, #1]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003298:	e003      	b.n	80032a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	619a      	str	r2, [r3, #24]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b085      	sub	sp, #20
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032c0:	887a      	ldrh	r2, [r7, #2]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4013      	ands	r3, r2
 80032c6:	041a      	lsls	r2, r3, #16
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	43d9      	mvns	r1, r3
 80032cc:	887b      	ldrh	r3, [r7, #2]
 80032ce:	400b      	ands	r3, r1
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	619a      	str	r2, [r3, #24]
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032ee:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d006      	beq.n	8003308 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032fa:	4a05      	ldr	r2, [pc, #20]	; (8003310 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fdec 	bl	8001ee0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40013c00 	.word	0x40013c00

08003314 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e12b      	b.n	800357e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7fe fe8c 	bl	8002058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2224      	movs	r2, #36	; 0x24
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0201 	bic.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003366:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003376:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003378:	f003 fa9a 	bl	80068b0 <HAL_RCC_GetPCLK1Freq>
 800337c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4a81      	ldr	r2, [pc, #516]	; (8003588 <HAL_I2C_Init+0x274>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d807      	bhi.n	8003398 <HAL_I2C_Init+0x84>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4a80      	ldr	r2, [pc, #512]	; (800358c <HAL_I2C_Init+0x278>)
 800338c:	4293      	cmp	r3, r2
 800338e:	bf94      	ite	ls
 8003390:	2301      	movls	r3, #1
 8003392:	2300      	movhi	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e006      	b.n	80033a6 <HAL_I2C_Init+0x92>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4a7d      	ldr	r2, [pc, #500]	; (8003590 <HAL_I2C_Init+0x27c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	bf94      	ite	ls
 80033a0:	2301      	movls	r3, #1
 80033a2:	2300      	movhi	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e0e7      	b.n	800357e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4a78      	ldr	r2, [pc, #480]	; (8003594 <HAL_I2C_Init+0x280>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	0c9b      	lsrs	r3, r3, #18
 80033b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a6a      	ldr	r2, [pc, #424]	; (8003588 <HAL_I2C_Init+0x274>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d802      	bhi.n	80033e8 <HAL_I2C_Init+0xd4>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	3301      	adds	r3, #1
 80033e6:	e009      	b.n	80033fc <HAL_I2C_Init+0xe8>
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	4a69      	ldr	r2, [pc, #420]	; (8003598 <HAL_I2C_Init+0x284>)
 80033f4:	fba2 2303 	umull	r2, r3, r2, r3
 80033f8:	099b      	lsrs	r3, r3, #6
 80033fa:	3301      	adds	r3, #1
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	430b      	orrs	r3, r1
 8003402:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800340e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	495c      	ldr	r1, [pc, #368]	; (8003588 <HAL_I2C_Init+0x274>)
 8003418:	428b      	cmp	r3, r1
 800341a:	d819      	bhi.n	8003450 <HAL_I2C_Init+0x13c>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1e59      	subs	r1, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	fbb1 f3f3 	udiv	r3, r1, r3
 800342a:	1c59      	adds	r1, r3, #1
 800342c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003430:	400b      	ands	r3, r1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_I2C_Init+0x138>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1e59      	subs	r1, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fbb1 f3f3 	udiv	r3, r1, r3
 8003444:	3301      	adds	r3, #1
 8003446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344a:	e051      	b.n	80034f0 <HAL_I2C_Init+0x1dc>
 800344c:	2304      	movs	r3, #4
 800344e:	e04f      	b.n	80034f0 <HAL_I2C_Init+0x1dc>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d111      	bne.n	800347c <HAL_I2C_Init+0x168>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1e58      	subs	r0, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	440b      	add	r3, r1
 8003466:	fbb0 f3f3 	udiv	r3, r0, r3
 800346a:	3301      	adds	r3, #1
 800346c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	e012      	b.n	80034a2 <HAL_I2C_Init+0x18e>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e58      	subs	r0, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	0099      	lsls	r1, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003492:	3301      	adds	r3, #1
 8003494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Init+0x196>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e022      	b.n	80034f0 <HAL_I2C_Init+0x1dc>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10e      	bne.n	80034d0 <HAL_I2C_Init+0x1bc>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1e58      	subs	r0, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6859      	ldr	r1, [r3, #4]
 80034ba:	460b      	mov	r3, r1
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	440b      	add	r3, r1
 80034c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c4:	3301      	adds	r3, #1
 80034c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ce:	e00f      	b.n	80034f0 <HAL_I2C_Init+0x1dc>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	1e58      	subs	r0, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	0099      	lsls	r1, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e6:	3301      	adds	r3, #1
 80034e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	6809      	ldr	r1, [r1, #0]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69da      	ldr	r2, [r3, #28]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800351e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6911      	ldr	r1, [r2, #16]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68d2      	ldr	r2, [r2, #12]
 800352a:	4311      	orrs	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	430b      	orrs	r3, r1
 8003532:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	000186a0 	.word	0x000186a0
 800358c:	001e847f 	.word	0x001e847f
 8003590:	003d08ff 	.word	0x003d08ff
 8003594:	431bde83 	.word	0x431bde83
 8003598:	10624dd3 	.word	0x10624dd3

0800359c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	4608      	mov	r0, r1
 80035a6:	4611      	mov	r1, r2
 80035a8:	461a      	mov	r2, r3
 80035aa:	4603      	mov	r3, r0
 80035ac:	817b      	strh	r3, [r7, #10]
 80035ae:	460b      	mov	r3, r1
 80035b0:	813b      	strh	r3, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035b6:	f7fe ffe3 	bl	8002580 <HAL_GetTick>
 80035ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	f040 80d9 	bne.w	800377c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	2319      	movs	r3, #25
 80035d0:	2201      	movs	r2, #1
 80035d2:	496d      	ldr	r1, [pc, #436]	; (8003788 <HAL_I2C_Mem_Write+0x1ec>)
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f002 fad1 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035e0:	2302      	movs	r3, #2
 80035e2:	e0cc      	b.n	800377e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_I2C_Mem_Write+0x56>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e0c5      	b.n	800377e <HAL_I2C_Mem_Write+0x1e2>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d007      	beq.n	8003618 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003626:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2221      	movs	r2, #33	; 0x21
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a3a      	ldr	r2, [r7, #32]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003648:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a4d      	ldr	r2, [pc, #308]	; (800378c <HAL_I2C_Mem_Write+0x1f0>)
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800365a:	88f8      	ldrh	r0, [r7, #6]
 800365c:	893a      	ldrh	r2, [r7, #8]
 800365e:	8979      	ldrh	r1, [r7, #10]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	4603      	mov	r3, r0
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f002 f860 	bl	8005730 <I2C_RequestMemoryWrite>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d052      	beq.n	800371c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e081      	b.n	800377e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f002 fb52 	bl	8005d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00d      	beq.n	80036a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	2b04      	cmp	r3, #4
 8003690:	d107      	bne.n	80036a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e06b      	b.n	800377e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	781a      	ldrb	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d11b      	bne.n	800371c <HAL_I2C_Mem_Write+0x180>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d017      	beq.n	800371c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1aa      	bne.n	800367a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f002 fb3e 	bl	8005daa <I2C_WaitOnBTFFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00d      	beq.n	8003750 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	2b04      	cmp	r3, #4
 800373a:	d107      	bne.n	800374c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e016      	b.n	800377e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	e000      	b.n	800377e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
  }
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	00100002 	.word	0x00100002
 800378c:	ffff0000 	.word	0xffff0000

08003790 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08c      	sub	sp, #48	; 0x30
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	4608      	mov	r0, r1
 800379a:	4611      	mov	r1, r2
 800379c:	461a      	mov	r2, r3
 800379e:	4603      	mov	r3, r0
 80037a0:	817b      	strh	r3, [r7, #10]
 80037a2:	460b      	mov	r3, r1
 80037a4:	813b      	strh	r3, [r7, #8]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037aa:	f7fe fee9 	bl	8002580 <HAL_GetTick>
 80037ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	f040 8208 	bne.w	8003bce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	2319      	movs	r3, #25
 80037c4:	2201      	movs	r2, #1
 80037c6:	497b      	ldr	r1, [pc, #492]	; (80039b4 <HAL_I2C_Mem_Read+0x224>)
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f002 f9d7 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
 80037d6:	e1fb      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_I2C_Mem_Read+0x56>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e1f4      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d007      	beq.n	800380c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800381a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2222      	movs	r2, #34	; 0x22
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2240      	movs	r2, #64	; 0x40
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800383c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a5b      	ldr	r2, [pc, #364]	; (80039b8 <HAL_I2C_Mem_Read+0x228>)
 800384c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800384e:	88f8      	ldrh	r0, [r7, #6]
 8003850:	893a      	ldrh	r2, [r7, #8]
 8003852:	8979      	ldrh	r1, [r7, #10]
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	4603      	mov	r3, r0
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f001 fffc 	bl	800585c <I2C_RequestMemoryRead>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e1b0      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	2b00      	cmp	r3, #0
 8003874:	d113      	bne.n	800389e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003876:	2300      	movs	r3, #0
 8003878:	623b      	str	r3, [r7, #32]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	623b      	str	r3, [r7, #32]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	623b      	str	r3, [r7, #32]
 800388a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e184      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d11b      	bne.n	80038de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	e164      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d11b      	bne.n	800391e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003904:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	e144      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003934:	e138      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393a:	2b03      	cmp	r3, #3
 800393c:	f200 80f1 	bhi.w	8003b22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	2b01      	cmp	r3, #1
 8003946:	d123      	bne.n	8003990 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f002 fa9f 	bl	8005e90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e139      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800398e:	e10b      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	2b02      	cmp	r3, #2
 8003996:	d14e      	bne.n	8003a36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	2200      	movs	r2, #0
 80039a0:	4906      	ldr	r1, [pc, #24]	; (80039bc <HAL_I2C_Mem_Read+0x22c>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f002 f8ea 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d008      	beq.n	80039c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e10e      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
 80039b2:	bf00      	nop
 80039b4:	00100002 	.word	0x00100002
 80039b8:	ffff0000 	.word	0xffff0000
 80039bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a34:	e0b8      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	4966      	ldr	r1, [pc, #408]	; (8003bd8 <HAL_I2C_Mem_Read+0x448>)
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f002 f89b 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0bf      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	2200      	movs	r2, #0
 8003a9a:	494f      	ldr	r1, [pc, #316]	; (8003bd8 <HAL_I2C_Mem_Read+0x448>)
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f002 f86d 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e091      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b20:	e042      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f002 f9b2 	bl	8005e90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e04c      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d118      	bne.n	8003ba8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f47f aec2 	bne.w	8003936 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e000      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3728      	adds	r7, #40	; 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	00010004 	.word	0x00010004

08003bdc <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	461a      	mov	r2, r3
 8003be8:	460b      	mov	r3, r1
 8003bea:	817b      	strh	r3, [r7, #10]
 8003bec:	4613      	mov	r3, r2
 8003bee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	f040 80a6 	bne.w	8003d52 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c14:	d005      	beq.n	8003c22 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d002      	beq.n	8003c22 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d130      	bne.n	8003c84 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c22:	4b4f      	ldr	r3, [pc, #316]	; (8003d60 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	08db      	lsrs	r3, r3, #3
 8003c28:	4a4e      	ldr	r2, [pc, #312]	; (8003d64 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	0a1a      	lsrs	r2, r3, #8
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009a      	lsls	r2, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d116      	bne.n	8003c76 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f043 0220 	orr.w	r2, r3, #32
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e06e      	b.n	8003d54 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d0db      	beq.n	8003c3c <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e060      	b.n	8003d54 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d007      	beq.n	8003cb8 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2221      	movs	r2, #33	; 0x21
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2210      	movs	r2, #16
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	893a      	ldrh	r2, [r7, #8]
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a3a      	ldr	r2, [r7, #32]
 8003cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003cfa:	897a      	ldrh	r2, [r7, #10]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b11      	cmp	r3, #17
 8003d0a:	d10c      	bne.n	8003d26 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d12:	d003      	beq.n	8003d1c <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d1a:	d101      	bne.n	8003d20 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8003d20:	2300      	movs	r3, #0
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d107      	bne.n	8003d36 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d34:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003d4c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e000      	b.n	8003d54 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
  }
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	20000024 	.word	0x20000024
 8003d64:	14f8b589 	.word	0x14f8b589

08003d68 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b089      	sub	sp, #36	; 0x24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	461a      	mov	r2, r3
 8003d74:	460b      	mov	r3, r1
 8003d76:	817b      	strh	r3, [r7, #10]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d84:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003d88:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	f040 80da 	bne.w	8003f4c <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da6:	d005      	beq.n	8003db4 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d002      	beq.n	8003db4 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d130      	bne.n	8003e16 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003db4:	4b69      	ldr	r3, [pc, #420]	; (8003f5c <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	08db      	lsrs	r3, r3, #3
 8003dba:	4a69      	ldr	r2, [pc, #420]	; (8003f60 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	0a1a      	lsrs	r2, r3, #8
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009a      	lsls	r2, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d116      	bne.n	8003e08 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f043 0220 	orr.w	r2, r3, #32
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0a2      	b.n	8003f4e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d0db      	beq.n	8003dce <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e094      	b.n	8003f4e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d007      	beq.n	8003e4a <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e58:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2222      	movs	r2, #34	; 0x22
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2210      	movs	r2, #16
 8003e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	893a      	ldrh	r2, [r7, #8]
 8003e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003e8c:	897a      	ldrh	r2, [r7, #10]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d126      	bne.n	8003ef0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d002      	beq.n	8003eae <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	2b10      	cmp	r3, #16
 8003eac:	d120      	bne.n	8003ef0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b12      	cmp	r3, #18
 8003eb2:	d114      	bne.n	8003ede <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ed2:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eda:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8003edc:	e010      	b.n	8003f00 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eec:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8003eee:	e007      	b.n	8003f00 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003efe:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b12      	cmp	r3, #18
 8003f04:	d10c      	bne.n	8003f20 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f0c:	d003      	beq.n	8003f16 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8003f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f10:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f14:	d101      	bne.n	8003f1a <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f2e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e000      	b.n	8003f4e <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
  }
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3724      	adds	r7, #36	; 0x24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000024 	.word	0x20000024
 8003f60:	14f8b589 	.word	0x14f8b589

08003f64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f84:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d003      	beq.n	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	f040 80c1 	bne.w	800411e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10d      	bne.n	8003fd2 <HAL_I2C_EV_IRQHandler+0x6e>
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003fbc:	d003      	beq.n	8003fc6 <HAL_I2C_EV_IRQHandler+0x62>
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003fc4:	d101      	bne.n	8003fca <HAL_I2C_EV_IRQHandler+0x66>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <HAL_I2C_EV_IRQHandler+0x68>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	f000 8132 	beq.w	8004236 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00c      	beq.n	8003ff6 <HAL_I2C_EV_IRQHandler+0x92>
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	0a5b      	lsrs	r3, r3, #9
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d006      	beq.n	8003ff6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f001 ffd6 	bl	8005f9a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fd83 	bl	8004afa <I2C_Master_SB>
 8003ff4:	e092      	b.n	800411c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	08db      	lsrs	r3, r3, #3
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_I2C_EV_IRQHandler+0xb2>
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	0a5b      	lsrs	r3, r3, #9
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fdf9 	bl	8004c06 <I2C_Master_ADD10>
 8004014:	e082      	b.n	800411c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_I2C_EV_IRQHandler+0xd2>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	0a5b      	lsrs	r3, r3, #9
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fe13 	bl	8004c5a <I2C_Master_ADDR>
 8004034:	e072      	b.n	800411c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d03b      	beq.n	80040ba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800404c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004050:	f000 80f3 	beq.w	800423a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	09db      	lsrs	r3, r3, #7
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00f      	beq.n	8004080 <HAL_I2C_EV_IRQHandler+0x11c>
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	0a9b      	lsrs	r3, r3, #10
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d009      	beq.n	8004080 <HAL_I2C_EV_IRQHandler+0x11c>
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	089b      	lsrs	r3, r3, #2
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d103      	bne.n	8004080 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f9f3 	bl	8004464 <I2C_MasterTransmit_TXE>
 800407e:	e04d      	b.n	800411c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	089b      	lsrs	r3, r3, #2
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80d6 	beq.w	800423a <HAL_I2C_EV_IRQHandler+0x2d6>
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	0a5b      	lsrs	r3, r3, #9
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80cf 	beq.w	800423a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800409c:	7bbb      	ldrb	r3, [r7, #14]
 800409e:	2b21      	cmp	r3, #33	; 0x21
 80040a0:	d103      	bne.n	80040aa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fa7a 	bl	800459c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040a8:	e0c7      	b.n	800423a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	f040 80c4 	bne.w	800423a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fae8 	bl	8004688 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040b8:	e0bf      	b.n	800423a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c8:	f000 80b7 	beq.w	800423a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	099b      	lsrs	r3, r3, #6
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00f      	beq.n	80040f8 <HAL_I2C_EV_IRQHandler+0x194>
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	0a9b      	lsrs	r3, r3, #10
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d009      	beq.n	80040f8 <HAL_I2C_EV_IRQHandler+0x194>
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	089b      	lsrs	r3, r3, #2
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d103      	bne.n	80040f8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fb5d 	bl	80047b0 <I2C_MasterReceive_RXNE>
 80040f6:	e011      	b.n	800411c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 809a 	beq.w	800423a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	0a5b      	lsrs	r3, r3, #9
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 8093 	beq.w	800423a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fc06 	bl	8004926 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800411a:	e08e      	b.n	800423a <HAL_I2C_EV_IRQHandler+0x2d6>
 800411c:	e08d      	b.n	800423a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	e007      	b.n	8004140 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	085b      	lsrs	r3, r3, #1
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d012      	beq.n	8004172 <HAL_I2C_EV_IRQHandler+0x20e>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	0a5b      	lsrs	r3, r3, #9
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00c      	beq.n	8004172 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004168:	69b9      	ldr	r1, [r7, #24]
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 ffc4 	bl	80050f8 <I2C_Slave_ADDR>
 8004170:	e066      	b.n	8004240 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <HAL_I2C_EV_IRQHandler+0x22e>
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	0a5b      	lsrs	r3, r3, #9
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fffe 	bl	800518c <I2C_Slave_STOPF>
 8004190:	e056      	b.n	8004240 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004192:	7bbb      	ldrb	r3, [r7, #14]
 8004194:	2b21      	cmp	r3, #33	; 0x21
 8004196:	d002      	beq.n	800419e <HAL_I2C_EV_IRQHandler+0x23a>
 8004198:	7bbb      	ldrb	r3, [r7, #14]
 800419a:	2b29      	cmp	r3, #41	; 0x29
 800419c:	d125      	bne.n	80041ea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	09db      	lsrs	r3, r3, #7
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00f      	beq.n	80041ca <HAL_I2C_EV_IRQHandler+0x266>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	0a9b      	lsrs	r3, r3, #10
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HAL_I2C_EV_IRQHandler+0x266>
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	089b      	lsrs	r3, r3, #2
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d103      	bne.n	80041ca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 feda 	bl	8004f7c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041c8:	e039      	b.n	800423e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	089b      	lsrs	r3, r3, #2
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d033      	beq.n	800423e <HAL_I2C_EV_IRQHandler+0x2da>
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	0a5b      	lsrs	r3, r3, #9
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d02d      	beq.n	800423e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 ff07 	bl	8004ff6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041e8:	e029      	b.n	800423e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	099b      	lsrs	r3, r3, #6
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00f      	beq.n	8004216 <HAL_I2C_EV_IRQHandler+0x2b2>
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	0a9b      	lsrs	r3, r3, #10
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	089b      	lsrs	r3, r3, #2
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d103      	bne.n	8004216 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 ff12 	bl	8005038 <I2C_SlaveReceive_RXNE>
 8004214:	e014      	b.n	8004240 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00e      	beq.n	8004240 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	0a5b      	lsrs	r3, r3, #9
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 ff40 	bl	80050b4 <I2C_SlaveReceive_BTF>
 8004234:	e004      	b.n	8004240 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004236:	bf00      	nop
 8004238:	e002      	b.n	8004240 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800423a:	bf00      	nop
 800423c:	e000      	b.n	8004240 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800423e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004240:	3720      	adds	r7, #32
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b08a      	sub	sp, #40	; 0x28
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800425e:	2300      	movs	r3, #0
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004268:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	0a1b      	lsrs	r3, r3, #8
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00e      	beq.n	8004294 <HAL_I2C_ER_IRQHandler+0x4e>
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	0a1b      	lsrs	r3, r3, #8
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004292:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	0a5b      	lsrs	r3, r3, #9
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00e      	beq.n	80042be <HAL_I2C_ER_IRQHandler+0x78>
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	f043 0302 	orr.w	r3, r3, #2
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80042bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	0a9b      	lsrs	r3, r3, #10
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d03f      	beq.n	800434a <HAL_I2C_ER_IRQHandler+0x104>
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	0a1b      	lsrs	r3, r3, #8
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d039      	beq.n	800434a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80042d6:	7efb      	ldrb	r3, [r7, #27]
 80042d8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80042f0:	7ebb      	ldrb	r3, [r7, #26]
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d112      	bne.n	800431c <HAL_I2C_ER_IRQHandler+0xd6>
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10f      	bne.n	800431c <HAL_I2C_ER_IRQHandler+0xd6>
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
 80042fe:	2b21      	cmp	r3, #33	; 0x21
 8004300:	d008      	beq.n	8004314 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	2b29      	cmp	r3, #41	; 0x29
 8004306:	d005      	beq.n	8004314 <HAL_I2C_ER_IRQHandler+0xce>
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	2b28      	cmp	r3, #40	; 0x28
 800430c:	d106      	bne.n	800431c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b21      	cmp	r3, #33	; 0x21
 8004312:	d103      	bne.n	800431c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f001 f869 	bl	80053ec <I2C_Slave_AF>
 800431a:	e016      	b.n	800434a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004324:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	f043 0304 	orr.w	r3, r3, #4
 800432c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800432e:	7efb      	ldrb	r3, [r7, #27]
 8004330:	2b10      	cmp	r3, #16
 8004332:	d002      	beq.n	800433a <HAL_I2C_ER_IRQHandler+0xf4>
 8004334:	7efb      	ldrb	r3, [r7, #27]
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	d107      	bne.n	800434a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004348:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	0adb      	lsrs	r3, r3, #11
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00e      	beq.n	8004374 <HAL_I2C_ER_IRQHandler+0x12e>
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	0a1b      	lsrs	r3, r3, #8
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	f043 0308 	orr.w	r3, r3, #8
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004372:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f001 f8a0 	bl	80054cc <I2C_ITError>
  }
}
 800438c:	bf00      	nop
 800438e:	3728      	adds	r7, #40	; 0x28
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	70fb      	strb	r3, [r7, #3]
 80043f0:	4613      	mov	r3, r2
 80043f2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004472:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800447a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	2b00      	cmp	r3, #0
 8004488:	d150      	bne.n	800452c <I2C_MasterTransmit_TXE+0xc8>
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	2b21      	cmp	r3, #33	; 0x21
 800448e:	d14d      	bne.n	800452c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2b08      	cmp	r3, #8
 8004494:	d01d      	beq.n	80044d2 <I2C_MasterTransmit_TXE+0x6e>
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b20      	cmp	r3, #32
 800449a:	d01a      	beq.n	80044d2 <I2C_MasterTransmit_TXE+0x6e>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044a2:	d016      	beq.n	80044d2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044b2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2211      	movs	r2, #17
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff ff62 	bl	8004394 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044d0:	e060      	b.n	8004594 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044e0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d107      	bne.n	800451c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ff7d 	bl	8004414 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800451a:	e03b      	b.n	8004594 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff ff35 	bl	8004394 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800452a:	e033      	b.n	8004594 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b21      	cmp	r3, #33	; 0x21
 8004530:	d005      	beq.n	800453e <I2C_MasterTransmit_TXE+0xda>
 8004532:	7bbb      	ldrb	r3, [r7, #14]
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	d12d      	bne.n	8004594 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	2b22      	cmp	r3, #34	; 0x22
 800453c:	d12a      	bne.n	8004594 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d108      	bne.n	800455a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004556:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004558:	e01c      	b.n	8004594 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b40      	cmp	r3, #64	; 0x40
 8004564:	d103      	bne.n	800456e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f88e 	bl	8004688 <I2C_MemoryTransmit_TXE_BTF>
}
 800456c:	e012      	b.n	8004594 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	781a      	ldrb	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004592:	e7ff      	b.n	8004594 <I2C_MasterTransmit_TXE+0x130>
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b21      	cmp	r3, #33	; 0x21
 80045b4:	d164      	bne.n	8004680 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d012      	beq.n	80045e6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80045e4:	e04c      	b.n	8004680 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d01d      	beq.n	8004628 <I2C_MasterTransmit_BTF+0x8c>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d01a      	beq.n	8004628 <I2C_MasterTransmit_BTF+0x8c>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045f8:	d016      	beq.n	8004628 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004608:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2211      	movs	r2, #17
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7ff feb7 	bl	8004394 <HAL_I2C_MasterTxCpltCallback>
}
 8004626:	e02b      	b.n	8004680 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004636:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004646:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b40      	cmp	r3, #64	; 0x40
 8004660:	d107      	bne.n	8004672 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff fed2 	bl	8004414 <HAL_I2C_MemTxCpltCallback>
}
 8004670:	e006      	b.n	8004680 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff fe8a 	bl	8004394 <HAL_I2C_MasterTxCpltCallback>
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004696:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469c:	2b00      	cmp	r3, #0
 800469e:	d11d      	bne.n	80046dc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d10b      	bne.n	80046c0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b8:	1c9a      	adds	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80046be:	e073      	b.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	121b      	asrs	r3, r3, #8
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046da:	e065      	b.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d10b      	bne.n	80046fc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046fa:	e055      	b.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004700:	2b02      	cmp	r3, #2
 8004702:	d151      	bne.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b22      	cmp	r3, #34	; 0x22
 8004708:	d10d      	bne.n	8004726 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004718:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004724:	e040      	b.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d015      	beq.n	800475c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b21      	cmp	r3, #33	; 0x21
 8004734:	d112      	bne.n	800475c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	781a      	ldrb	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800475a:	e025      	b.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d120      	bne.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	2b21      	cmp	r3, #33	; 0x21
 800476a:	d11d      	bne.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800477a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff fe36 	bl	8004414 <HAL_I2C_MemTxCpltCallback>
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b22      	cmp	r3, #34	; 0x22
 80047c2:	f040 80ac 	bne.w	800491e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d921      	bls.n	8004818 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b03      	cmp	r3, #3
 8004802:	f040 808c 	bne.w	800491e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004814:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004816:	e082      	b.n	800491e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	2b02      	cmp	r3, #2
 800481e:	d075      	beq.n	800490c <I2C_MasterReceive_RXNE+0x15c>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d002      	beq.n	800482c <I2C_MasterReceive_RXNE+0x7c>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d16f      	bne.n	800490c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f001 fafd 	bl	8005e2c <I2C_WaitOnSTOPRequestThroughIT>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d142      	bne.n	80048be <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004846:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004856:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d10a      	bne.n	80048a8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff fdc1 	bl	8004428 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048a6:	e03a      	b.n	800491e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2212      	movs	r2, #18
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fd76 	bl	80043a8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048bc:	e02f      	b.n	800491e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff fd99 	bl	800443c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800490a:	e008      	b.n	800491e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491a:	605a      	str	r2, [r3, #4]
}
 800491c:	e7ff      	b.n	800491e <I2C_MasterReceive_RXNE+0x16e>
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b04      	cmp	r3, #4
 800493c:	d11b      	bne.n	8004976 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800494c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004974:	e0bd      	b.n	8004af2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b03      	cmp	r3, #3
 800497e:	d129      	bne.n	80049d4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b04      	cmp	r3, #4
 8004994:	d00a      	beq.n	80049ac <I2C_MasterReceive_BTF+0x86>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b02      	cmp	r3, #2
 800499a:	d007      	beq.n	80049ac <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049d2:	e08e      	b.n	8004af2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d176      	bne.n	8004acc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d002      	beq.n	80049ea <I2C_MasterReceive_BTF+0xc4>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b10      	cmp	r3, #16
 80049e8:	d108      	bne.n	80049fc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	e019      	b.n	8004a30 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d002      	beq.n	8004a08 <I2C_MasterReceive_BTF+0xe2>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d108      	bne.n	8004a1a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	e00a      	b.n	8004a30 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d007      	beq.n	8004a30 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a8a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b40      	cmp	r3, #64	; 0x40
 8004a9e:	d10a      	bne.n	8004ab6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff fcba 	bl	8004428 <HAL_I2C_MemRxCpltCallback>
}
 8004ab4:	e01d      	b.n	8004af2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2212      	movs	r2, #18
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff fc6f 	bl	80043a8 <HAL_I2C_MasterRxCpltCallback>
}
 8004aca:	e012      	b.n	8004af2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b40      	cmp	r3, #64	; 0x40
 8004b0c:	d117      	bne.n	8004b3e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b26:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b28:	e067      	b.n	8004bfa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	611a      	str	r2, [r3, #16]
}
 8004b3c:	e05d      	b.n	8004bfa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b46:	d133      	bne.n	8004bb0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b21      	cmp	r3, #33	; 0x21
 8004b52:	d109      	bne.n	8004b68 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b64:	611a      	str	r2, [r3, #16]
 8004b66:	e008      	b.n	8004b7a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <I2C_Master_SB+0x92>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d108      	bne.n	8004b9e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d032      	beq.n	8004bfa <I2C_Master_SB+0x100>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d02d      	beq.n	8004bfa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bac:	605a      	str	r2, [r3, #4]
}
 8004bae:	e024      	b.n	8004bfa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10e      	bne.n	8004bd6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	11db      	asrs	r3, r3, #7
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f003 0306 	and.w	r3, r3, #6
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f063 030f 	orn	r3, r3, #15
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	611a      	str	r2, [r3, #16]
}
 8004bd4:	e011      	b.n	8004bfa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d10d      	bne.n	8004bfa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	11db      	asrs	r3, r3, #7
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f003 0306 	and.w	r3, r3, #6
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f063 030e 	orn	r3, r3, #14
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	611a      	str	r2, [r3, #16]
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d004      	beq.n	8004c2c <I2C_Master_ADD10+0x26>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d108      	bne.n	8004c3e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00c      	beq.n	8004c4e <I2C_Master_ADD10+0x48>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4c:	605a      	str	r2, [r3, #4]
  }
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b091      	sub	sp, #68	; 0x44
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b22      	cmp	r3, #34	; 0x22
 8004c82:	f040 8169 	bne.w	8004f58 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10f      	bne.n	8004cae <I2C_Master_ADDR+0x54>
 8004c8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d10b      	bne.n	8004cae <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c96:	2300      	movs	r3, #0
 8004c98:	633b      	str	r3, [r7, #48]	; 0x30
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	e160      	b.n	8004f70 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d11d      	bne.n	8004cf2 <I2C_Master_ADDR+0x98>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cbe:	d118      	bne.n	8004cf2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ce4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	651a      	str	r2, [r3, #80]	; 0x50
 8004cf0:	e13e      	b.n	8004f70 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d113      	bne.n	8004d24 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	e115      	b.n	8004f50 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	f040 808a 	bne.w	8004e44 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d36:	d137      	bne.n	8004da8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d46:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d56:	d113      	bne.n	8004d80 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d66:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d68:	2300      	movs	r3, #0
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	e0e7      	b.n	8004f50 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d80:	2300      	movs	r3, #0
 8004d82:	623b      	str	r3, [r7, #32]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	623b      	str	r3, [r7, #32]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	623b      	str	r3, [r7, #32]
 8004d94:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e0d3      	b.n	8004f50 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d02e      	beq.n	8004e0c <I2C_Master_ADDR+0x1b2>
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d02b      	beq.n	8004e0c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	2b12      	cmp	r3, #18
 8004db8:	d102      	bne.n	8004dc0 <I2C_Master_ADDR+0x166>
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d125      	bne.n	8004e0c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d00e      	beq.n	8004de4 <I2C_Master_ADDR+0x18a>
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d00b      	beq.n	8004de4 <I2C_Master_ADDR+0x18a>
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d008      	beq.n	8004de4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e007      	b.n	8004df4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004df2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	61fb      	str	r3, [r7, #28]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	61fb      	str	r3, [r7, #28]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	e0a1      	b.n	8004f50 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e1a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	e085      	b.n	8004f50 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d14d      	bne.n	8004eea <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d016      	beq.n	8004e82 <I2C_Master_ADDR+0x228>
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d013      	beq.n	8004e82 <I2C_Master_ADDR+0x228>
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	2b10      	cmp	r3, #16
 8004e5e:	d010      	beq.n	8004e82 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	e007      	b.n	8004e92 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e90:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea0:	d117      	bne.n	8004ed2 <I2C_Master_ADDR+0x278>
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ea8:	d00b      	beq.n	8004ec2 <I2C_Master_ADDR+0x268>
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d008      	beq.n	8004ec2 <I2C_Master_ADDR+0x268>
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d005      	beq.n	8004ec2 <I2C_Master_ADDR+0x268>
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d002      	beq.n	8004ec2 <I2C_Master_ADDR+0x268>
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	d107      	bne.n	8004ed2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ed0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	e032      	b.n	8004f50 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ef8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f08:	d117      	bne.n	8004f3a <I2C_Master_ADDR+0x2e0>
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f10:	d00b      	beq.n	8004f2a <I2C_Master_ADDR+0x2d0>
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d008      	beq.n	8004f2a <I2C_Master_ADDR+0x2d0>
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d005      	beq.n	8004f2a <I2C_Master_ADDR+0x2d0>
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d002      	beq.n	8004f2a <I2C_Master_ADDR+0x2d0>
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	d107      	bne.n	8004f3a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f38:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004f56:	e00b      	b.n	8004f70 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
}
 8004f6e:	e7ff      	b.n	8004f70 <I2C_Master_ADDR+0x316>
 8004f70:	bf00      	nop
 8004f72:	3744      	adds	r7, #68	; 0x44
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d02b      	beq.n	8004fee <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	781a      	ldrb	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d114      	bne.n	8004fee <I2C_SlaveTransmit_TXE+0x72>
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b29      	cmp	r3, #41	; 0x29
 8004fc8:	d111      	bne.n	8004fee <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2221      	movs	r2, #33	; 0x21
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2228      	movs	r2, #40	; 0x28
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff f9e7 	bl	80043bc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004fee:	bf00      	nop
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d011      	beq.n	800502c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	781a      	ldrb	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005022:	b29b      	uxth	r3, r3
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005046:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d02c      	beq.n	80050ac <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d114      	bne.n	80050ac <I2C_SlaveReceive_RXNE+0x74>
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	2b2a      	cmp	r3, #42	; 0x2a
 8005086:	d111      	bne.n	80050ac <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005096:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2222      	movs	r2, #34	; 0x22
 800509c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2228      	movs	r2, #40	; 0x28
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff f992 	bl	80043d0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d012      	beq.n	80050ec <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005102:	2300      	movs	r3, #0
 8005104:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005112:	2b28      	cmp	r3, #40	; 0x28
 8005114:	d127      	bne.n	8005166 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005124:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	089b      	lsrs	r3, r3, #2
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005132:	2301      	movs	r3, #1
 8005134:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	09db      	lsrs	r3, r3, #7
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	81bb      	strh	r3, [r7, #12]
 8005148:	e002      	b.n	8005150 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005158:	89ba      	ldrh	r2, [r7, #12]
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	4619      	mov	r1, r3
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff f940 	bl	80043e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005164:	e00e      	b.n	8005184 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005166:	2300      	movs	r3, #0
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80051ac:	2300      	movs	r3, #0
 80051ae:	60bb      	str	r3, [r7, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e8:	d172      	bne.n	80052d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	2b22      	cmp	r3, #34	; 0x22
 80051ee:	d002      	beq.n	80051f6 <I2C_Slave_STOPF+0x6a>
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	2b2a      	cmp	r3, #42	; 0x2a
 80051f4:	d135      	bne.n	8005262 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	b29a      	uxth	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f043 0204 	orr.w	r2, r3, #4
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005228:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	4618      	mov	r0, r3
 8005230:	f7fd fd9a 	bl	8002d68 <HAL_DMA_GetState>
 8005234:	4603      	mov	r3, r0
 8005236:	2b01      	cmp	r3, #1
 8005238:	d049      	beq.n	80052ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	4a69      	ldr	r2, [pc, #420]	; (80053e4 <I2C_Slave_STOPF+0x258>)
 8005240:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	4618      	mov	r0, r3
 8005248:	f7fd fbe2 	bl	8002a10 <HAL_DMA_Abort_IT>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d03d      	beq.n	80052ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800525c:	4610      	mov	r0, r2
 800525e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005260:	e035      	b.n	80052ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	b29a      	uxth	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f043 0204 	orr.w	r2, r3, #4
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005294:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529a:	4618      	mov	r0, r3
 800529c:	f7fd fd64 	bl	8002d68 <HAL_DMA_GetState>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d014      	beq.n	80052d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	4a4e      	ldr	r2, [pc, #312]	; (80053e4 <I2C_Slave_STOPF+0x258>)
 80052ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fd fbac 	bl	8002a10 <HAL_DMA_Abort_IT>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d008      	beq.n	80052d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052c8:	4610      	mov	r0, r2
 80052ca:	4798      	blx	r3
 80052cc:	e000      	b.n	80052d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d03e      	beq.n	8005358 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d112      	bne.n	800530e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d112      	bne.n	8005342 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	f043 0204 	orr.w	r2, r3, #4
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f8b3 	bl	80054cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005366:	e039      	b.n	80053dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	2b2a      	cmp	r3, #42	; 0x2a
 800536c:	d109      	bne.n	8005382 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2228      	movs	r2, #40	; 0x28
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff f827 	bl	80043d0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b28      	cmp	r3, #40	; 0x28
 800538c:	d111      	bne.n	80053b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <I2C_Slave_STOPF+0x25c>)
 8005392:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff f828 	bl	8004400 <HAL_I2C_ListenCpltCallback>
}
 80053b0:	e014      	b.n	80053dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	2b22      	cmp	r3, #34	; 0x22
 80053b8:	d002      	beq.n	80053c0 <I2C_Slave_STOPF+0x234>
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
 80053bc:	2b22      	cmp	r3, #34	; 0x22
 80053be:	d10d      	bne.n	80053dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fe fffa 	bl	80043d0 <HAL_I2C_SlaveRxCpltCallback>
}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	08005a2d 	.word	0x08005a2d
 80053e8:	ffff0000 	.word	0xffff0000

080053ec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b08      	cmp	r3, #8
 8005406:	d002      	beq.n	800540e <I2C_Slave_AF+0x22>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b20      	cmp	r3, #32
 800540c:	d129      	bne.n	8005462 <I2C_Slave_AF+0x76>
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	2b28      	cmp	r3, #40	; 0x28
 8005412:	d126      	bne.n	8005462 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a2c      	ldr	r2, [pc, #176]	; (80054c8 <I2C_Slave_AF+0xdc>)
 8005418:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005428:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005432:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005442:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fe ffd0 	bl	8004400 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005460:	e02e      	b.n	80054c0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	2b21      	cmp	r3, #33	; 0x21
 8005466:	d126      	bne.n	80054b6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <I2C_Slave_AF+0xdc>)
 800546c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2221      	movs	r2, #33	; 0x21
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005492:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800549c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7fe ff84 	bl	80043bc <HAL_I2C_SlaveTxCpltCallback>
}
 80054b4:	e004      	b.n	80054c0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054be:	615a      	str	r2, [r3, #20]
}
 80054c0:	bf00      	nop
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	ffff0000 	.word	0xffff0000

080054cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80054e4:	7bbb      	ldrb	r3, [r7, #14]
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d002      	beq.n	80054f0 <I2C_ITError+0x24>
 80054ea:	7bbb      	ldrb	r3, [r7, #14]
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d10a      	bne.n	8005506 <I2C_ITError+0x3a>
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	2b22      	cmp	r3, #34	; 0x22
 80054f4:	d107      	bne.n	8005506 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005504:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800550c:	2b28      	cmp	r3, #40	; 0x28
 800550e:	d107      	bne.n	8005520 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2228      	movs	r2, #40	; 0x28
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800551e:	e015      	b.n	800554c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800552a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800552e:	d00a      	beq.n	8005546 <I2C_ITError+0x7a>
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	2b60      	cmp	r3, #96	; 0x60
 8005534:	d007      	beq.n	8005546 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555a:	d162      	bne.n	8005622 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800556a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b01      	cmp	r3, #1
 8005578:	d020      	beq.n	80055bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557e:	4a6a      	ldr	r2, [pc, #424]	; (8005728 <I2C_ITError+0x25c>)
 8005580:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005586:	4618      	mov	r0, r3
 8005588:	f7fd fa42 	bl	8002a10 <HAL_DMA_Abort_IT>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 8089 	beq.w	80056a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0201 	bic.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055b6:	4610      	mov	r0, r2
 80055b8:	4798      	blx	r3
 80055ba:	e074      	b.n	80056a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	4a59      	ldr	r2, [pc, #356]	; (8005728 <I2C_ITError+0x25c>)
 80055c2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fd fa21 	bl	8002a10 <HAL_DMA_Abort_IT>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d068      	beq.n	80056a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d10b      	bne.n	80055fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800561c:	4610      	mov	r0, r2
 800561e:	4798      	blx	r3
 8005620:	e041      	b.n	80056a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b60      	cmp	r3, #96	; 0x60
 800562c:	d125      	bne.n	800567a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005646:	2b40      	cmp	r3, #64	; 0x40
 8005648:	d10b      	bne.n	8005662 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0201 	bic.w	r2, r2, #1
 8005670:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fe feec 	bl	8004450 <HAL_I2C_AbortCpltCallback>
 8005678:	e015      	b.n	80056a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d10b      	bne.n	80056a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7fe fecb 	bl	800443c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10e      	bne.n	80056d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d109      	bne.n	80056d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d104      	bne.n	80056d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d113      	bne.n	8005720 <I2C_ITError+0x254>
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2b28      	cmp	r3, #40	; 0x28
 80056fc:	d110      	bne.n	8005720 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a0a      	ldr	r2, [pc, #40]	; (800572c <I2C_ITError+0x260>)
 8005702:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fe fe70 	bl	8004400 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005720:	bf00      	nop
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	08005a2d 	.word	0x08005a2d
 800572c:	ffff0000 	.word	0xffff0000

08005730 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af02      	add	r7, sp, #8
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	4608      	mov	r0, r1
 800573a:	4611      	mov	r1, r2
 800573c:	461a      	mov	r2, r3
 800573e:	4603      	mov	r3, r0
 8005740:	817b      	strh	r3, [r7, #10]
 8005742:	460b      	mov	r3, r1
 8005744:	813b      	strh	r3, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005758:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	2200      	movs	r2, #0
 8005762:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 fa08 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00d      	beq.n	800578e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005780:	d103      	bne.n	800578a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e05f      	b.n	800584e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800578e:	897b      	ldrh	r3, [r7, #10]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	461a      	mov	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800579c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	6a3a      	ldr	r2, [r7, #32]
 80057a2:	492d      	ldr	r1, [pc, #180]	; (8005858 <I2C_RequestMemoryWrite+0x128>)
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fa40 	bl	8005c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e04c      	b.n	800584e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b4:	2300      	movs	r3, #0
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057cc:	6a39      	ldr	r1, [r7, #32]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 faaa 	bl	8005d28 <I2C_WaitOnTXEFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00d      	beq.n	80057f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d107      	bne.n	80057f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e02b      	b.n	800584e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d105      	bne.n	8005808 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057fc:	893b      	ldrh	r3, [r7, #8]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	611a      	str	r2, [r3, #16]
 8005806:	e021      	b.n	800584c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005808:	893b      	ldrh	r3, [r7, #8]
 800580a:	0a1b      	lsrs	r3, r3, #8
 800580c:	b29b      	uxth	r3, r3
 800580e:	b2da      	uxtb	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005818:	6a39      	ldr	r1, [r7, #32]
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 fa84 	bl	8005d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00d      	beq.n	8005842 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	2b04      	cmp	r3, #4
 800582c:	d107      	bne.n	800583e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800583c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e005      	b.n	800584e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005842:	893b      	ldrh	r3, [r7, #8]
 8005844:	b2da      	uxtb	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	00010002 	.word	0x00010002

0800585c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af02      	add	r7, sp, #8
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	4608      	mov	r0, r1
 8005866:	4611      	mov	r1, r2
 8005868:	461a      	mov	r2, r3
 800586a:	4603      	mov	r3, r0
 800586c:	817b      	strh	r3, [r7, #10]
 800586e:	460b      	mov	r3, r1
 8005870:	813b      	strh	r3, [r7, #8]
 8005872:	4613      	mov	r3, r2
 8005874:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005884:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005894:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	2200      	movs	r2, #0
 800589e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f96a 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00d      	beq.n	80058ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058bc:	d103      	bne.n	80058c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e0aa      	b.n	8005a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058ca:	897b      	ldrh	r3, [r7, #10]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	461a      	mov	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	6a3a      	ldr	r2, [r7, #32]
 80058de:	4952      	ldr	r1, [pc, #328]	; (8005a28 <I2C_RequestMemoryRead+0x1cc>)
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f9a2 	bl	8005c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e097      	b.n	8005a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f0:	2300      	movs	r3, #0
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005908:	6a39      	ldr	r1, [r7, #32]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 fa0c 	bl	8005d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00d      	beq.n	8005932 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	2b04      	cmp	r3, #4
 800591c:	d107      	bne.n	800592e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e076      	b.n	8005a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d105      	bne.n	8005944 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005938:	893b      	ldrh	r3, [r7, #8]
 800593a:	b2da      	uxtb	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	611a      	str	r2, [r3, #16]
 8005942:	e021      	b.n	8005988 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005944:	893b      	ldrh	r3, [r7, #8]
 8005946:	0a1b      	lsrs	r3, r3, #8
 8005948:	b29b      	uxth	r3, r3
 800594a:	b2da      	uxtb	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005954:	6a39      	ldr	r1, [r7, #32]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f9e6 	bl	8005d28 <I2C_WaitOnTXEFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	2b04      	cmp	r3, #4
 8005968:	d107      	bne.n	800597a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005978:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e050      	b.n	8005a20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800597e:	893b      	ldrh	r3, [r7, #8]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598a:	6a39      	ldr	r1, [r7, #32]
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f9cb 	bl	8005d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00d      	beq.n	80059b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	2b04      	cmp	r3, #4
 800599e:	d107      	bne.n	80059b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e035      	b.n	8005a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 f8d3 	bl	8005b7c <I2C_WaitOnFlagUntilTimeout>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00d      	beq.n	80059f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ea:	d103      	bne.n	80059f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e013      	b.n	8005a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059f8:	897b      	ldrh	r3, [r7, #10]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	f043 0301 	orr.w	r3, r3, #1
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	4906      	ldr	r1, [pc, #24]	; (8005a28 <I2C_RequestMemoryRead+0x1cc>)
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 f90b 	bl	8005c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	00010002 	.word	0x00010002

08005a2c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a44:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a46:	4b4b      	ldr	r3, [pc, #300]	; (8005b74 <I2C_DMAAbort+0x148>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	08db      	lsrs	r3, r3, #3
 8005a4c:	4a4a      	ldr	r2, [pc, #296]	; (8005b78 <I2C_DMAAbort+0x14c>)
 8005a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a52:	0a1a      	lsrs	r2, r3, #8
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	00da      	lsls	r2, r3, #3
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	f043 0220 	orr.w	r2, r3, #32
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005a72:	e00a      	b.n	8005a8a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a88:	d0ea      	beq.n	8005a60 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a96:	2200      	movs	r2, #0
 8005a98:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2200      	movs	r2, #0
 8005abe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005acc:	2200      	movs	r2, #0
 8005ace:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	2200      	movs	r2, #0
 8005ade:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b60      	cmp	r3, #96	; 0x60
 8005afa:	d10e      	bne.n	8005b1a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b12:	6978      	ldr	r0, [r7, #20]
 8005b14:	f7fe fc9c 	bl	8004450 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b18:	e027      	b.n	8005b6a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b1a:	7cfb      	ldrb	r3, [r7, #19]
 8005b1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b20:	2b28      	cmp	r3, #40	; 0x28
 8005b22:	d117      	bne.n	8005b54 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b42:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2228      	movs	r2, #40	; 0x28
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b52:	e007      	b.n	8005b64 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005b64:	6978      	ldr	r0, [r7, #20]
 8005b66:	f7fe fc69 	bl	800443c <HAL_I2C_ErrorCallback>
}
 8005b6a:	bf00      	nop
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000024 	.word	0x20000024
 8005b78:	14f8b589 	.word	0x14f8b589

08005b7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b8c:	e025      	b.n	8005bda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d021      	beq.n	8005bda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b96:	f7fc fcf3 	bl	8002580 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d302      	bcc.n	8005bac <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d116      	bne.n	8005bda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e023      	b.n	8005c22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	0c1b      	lsrs	r3, r3, #16
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d10d      	bne.n	8005c00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	43da      	mvns	r2, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	bf0c      	ite	eq
 8005bf6:	2301      	moveq	r3, #1
 8005bf8:	2300      	movne	r3, #0
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	e00c      	b.n	8005c1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	43da      	mvns	r2, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bf0c      	ite	eq
 8005c12:	2301      	moveq	r3, #1
 8005c14:	2300      	movne	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d0b6      	beq.n	8005b8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c38:	e051      	b.n	8005cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c48:	d123      	bne.n	8005c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f043 0204 	orr.w	r2, r3, #4
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e046      	b.n	8005d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d021      	beq.n	8005cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9a:	f7fc fc71 	bl	8002580 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d302      	bcc.n	8005cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d116      	bne.n	8005cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e020      	b.n	8005d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	0c1b      	lsrs	r3, r3, #16
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d10c      	bne.n	8005d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	43da      	mvns	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bf14      	ite	ne
 8005cfa:	2301      	movne	r3, #1
 8005cfc:	2300      	moveq	r3, #0
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	e00b      	b.n	8005d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	43da      	mvns	r2, r3
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	bf14      	ite	ne
 8005d14:	2301      	movne	r3, #1
 8005d16:	2300      	moveq	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d18d      	bne.n	8005c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d34:	e02d      	b.n	8005d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f900 	bl	8005f3c <I2C_IsAcknowledgeFailed>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e02d      	b.n	8005da2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d021      	beq.n	8005d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fc fc17 	bl	8002580 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d116      	bne.n	8005d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	f043 0220 	orr.w	r2, r3, #32
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e007      	b.n	8005da2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9c:	2b80      	cmp	r3, #128	; 0x80
 8005d9e:	d1ca      	bne.n	8005d36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005db6:	e02d      	b.n	8005e14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f8bf 	bl	8005f3c <I2C_IsAcknowledgeFailed>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e02d      	b.n	8005e24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d021      	beq.n	8005e14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd0:	f7fc fbd6 	bl	8002580 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d302      	bcc.n	8005de6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d116      	bne.n	8005e14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	f043 0220 	orr.w	r2, r3, #32
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e007      	b.n	8005e24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d1ca      	bne.n	8005db8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e38:	4b13      	ldr	r3, [pc, #76]	; (8005e88 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	08db      	lsrs	r3, r3, #3
 8005e3e:	4a13      	ldr	r2, [pc, #76]	; (8005e8c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005e40:	fba2 2303 	umull	r2, r3, r2, r3
 8005e44:	0a1a      	lsrs	r2, r3, #8
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d107      	bne.n	8005e6a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f043 0220 	orr.w	r2, r3, #32
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e008      	b.n	8005e7c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e78:	d0e9      	beq.n	8005e4e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	20000024 	.word	0x20000024
 8005e8c:	14f8b589 	.word	0x14f8b589

08005e90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e9c:	e042      	b.n	8005f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f003 0310 	and.w	r3, r3, #16
 8005ea8:	2b10      	cmp	r3, #16
 8005eaa:	d119      	bne.n	8005ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0210 	mvn.w	r2, #16
 8005eb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e029      	b.n	8005f34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee0:	f7fc fb4e 	bl	8002580 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d302      	bcc.n	8005ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d116      	bne.n	8005f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	f043 0220 	orr.w	r2, r3, #32
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e007      	b.n	8005f34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2e:	2b40      	cmp	r3, #64	; 0x40
 8005f30:	d1b5      	bne.n	8005e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f52:	d11b      	bne.n	8005f8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	f043 0204 	orr.w	r2, r3, #4
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005faa:	d103      	bne.n	8005fb4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005fb2:	e007      	b.n	8005fc4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005fbc:	d102      	bne.n	8005fc4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2208      	movs	r2, #8
 8005fc2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e267      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d075      	beq.n	80060da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fee:	4b88      	ldr	r3, [pc, #544]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f003 030c 	and.w	r3, r3, #12
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d00c      	beq.n	8006014 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ffa:	4b85      	ldr	r3, [pc, #532]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006002:	2b08      	cmp	r3, #8
 8006004:	d112      	bne.n	800602c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006006:	4b82      	ldr	r3, [pc, #520]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800600e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006012:	d10b      	bne.n	800602c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006014:	4b7e      	ldr	r3, [pc, #504]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d05b      	beq.n	80060d8 <HAL_RCC_OscConfig+0x108>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d157      	bne.n	80060d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e242      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006034:	d106      	bne.n	8006044 <HAL_RCC_OscConfig+0x74>
 8006036:	4b76      	ldr	r3, [pc, #472]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a75      	ldr	r2, [pc, #468]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 800603c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	e01d      	b.n	8006080 <HAL_RCC_OscConfig+0xb0>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800604c:	d10c      	bne.n	8006068 <HAL_RCC_OscConfig+0x98>
 800604e:	4b70      	ldr	r3, [pc, #448]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a6f      	ldr	r2, [pc, #444]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 8006054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	4b6d      	ldr	r3, [pc, #436]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a6c      	ldr	r2, [pc, #432]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 8006060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e00b      	b.n	8006080 <HAL_RCC_OscConfig+0xb0>
 8006068:	4b69      	ldr	r3, [pc, #420]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a68      	ldr	r2, [pc, #416]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 800606e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	4b66      	ldr	r3, [pc, #408]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a65      	ldr	r2, [pc, #404]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 800607a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800607e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d013      	beq.n	80060b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006088:	f7fc fa7a 	bl	8002580 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006090:	f7fc fa76 	bl	8002580 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b64      	cmp	r3, #100	; 0x64
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e207      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a2:	4b5b      	ldr	r3, [pc, #364]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0f0      	beq.n	8006090 <HAL_RCC_OscConfig+0xc0>
 80060ae:	e014      	b.n	80060da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b0:	f7fc fa66 	bl	8002580 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b8:	f7fc fa62 	bl	8002580 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b64      	cmp	r3, #100	; 0x64
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e1f3      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ca:	4b51      	ldr	r3, [pc, #324]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f0      	bne.n	80060b8 <HAL_RCC_OscConfig+0xe8>
 80060d6:	e000      	b.n	80060da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d063      	beq.n	80061ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060e6:	4b4a      	ldr	r3, [pc, #296]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 030c 	and.w	r3, r3, #12
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00b      	beq.n	800610a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060f2:	4b47      	ldr	r3, [pc, #284]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d11c      	bne.n	8006138 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060fe:	4b44      	ldr	r3, [pc, #272]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d116      	bne.n	8006138 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800610a:	4b41      	ldr	r3, [pc, #260]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <HAL_RCC_OscConfig+0x152>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d001      	beq.n	8006122 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e1c7      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006122:	4b3b      	ldr	r3, [pc, #236]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	4937      	ldr	r1, [pc, #220]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 8006132:	4313      	orrs	r3, r2
 8006134:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006136:	e03a      	b.n	80061ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d020      	beq.n	8006182 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006140:	4b34      	ldr	r3, [pc, #208]	; (8006214 <HAL_RCC_OscConfig+0x244>)
 8006142:	2201      	movs	r2, #1
 8006144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006146:	f7fc fa1b 	bl	8002580 <HAL_GetTick>
 800614a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800614e:	f7fc fa17 	bl	8002580 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e1a8      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006160:	4b2b      	ldr	r3, [pc, #172]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0f0      	beq.n	800614e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800616c:	4b28      	ldr	r3, [pc, #160]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	4925      	ldr	r1, [pc, #148]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 800617c:	4313      	orrs	r3, r2
 800617e:	600b      	str	r3, [r1, #0]
 8006180:	e015      	b.n	80061ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006182:	4b24      	ldr	r3, [pc, #144]	; (8006214 <HAL_RCC_OscConfig+0x244>)
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006188:	f7fc f9fa 	bl	8002580 <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006190:	f7fc f9f6 	bl	8002580 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e187      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061a2:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1f0      	bne.n	8006190 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d036      	beq.n	8006228 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d016      	beq.n	80061f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061c2:	4b15      	ldr	r3, [pc, #84]	; (8006218 <HAL_RCC_OscConfig+0x248>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c8:	f7fc f9da 	bl	8002580 <HAL_GetTick>
 80061cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061d0:	f7fc f9d6 	bl	8002580 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e167      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061e2:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <HAL_RCC_OscConfig+0x240>)
 80061e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0f0      	beq.n	80061d0 <HAL_RCC_OscConfig+0x200>
 80061ee:	e01b      	b.n	8006228 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061f0:	4b09      	ldr	r3, [pc, #36]	; (8006218 <HAL_RCC_OscConfig+0x248>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061f6:	f7fc f9c3 	bl	8002580 <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061fc:	e00e      	b.n	800621c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061fe:	f7fc f9bf 	bl	8002580 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d907      	bls.n	800621c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e150      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
 8006210:	40023800 	.word	0x40023800
 8006214:	42470000 	.word	0x42470000
 8006218:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800621c:	4b88      	ldr	r3, [pc, #544]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 800621e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1ea      	bne.n	80061fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8097 	beq.w	8006364 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006236:	2300      	movs	r3, #0
 8006238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800623a:	4b81      	ldr	r3, [pc, #516]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10f      	bne.n	8006266 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006246:	2300      	movs	r3, #0
 8006248:	60bb      	str	r3, [r7, #8]
 800624a:	4b7d      	ldr	r3, [pc, #500]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	4a7c      	ldr	r2, [pc, #496]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 8006250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006254:	6413      	str	r3, [r2, #64]	; 0x40
 8006256:	4b7a      	ldr	r3, [pc, #488]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625e:	60bb      	str	r3, [r7, #8]
 8006260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006262:	2301      	movs	r3, #1
 8006264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006266:	4b77      	ldr	r3, [pc, #476]	; (8006444 <HAL_RCC_OscConfig+0x474>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626e:	2b00      	cmp	r3, #0
 8006270:	d118      	bne.n	80062a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006272:	4b74      	ldr	r3, [pc, #464]	; (8006444 <HAL_RCC_OscConfig+0x474>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a73      	ldr	r2, [pc, #460]	; (8006444 <HAL_RCC_OscConfig+0x474>)
 8006278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800627c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800627e:	f7fc f97f 	bl	8002580 <HAL_GetTick>
 8006282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006286:	f7fc f97b 	bl	8002580 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e10c      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006298:	4b6a      	ldr	r3, [pc, #424]	; (8006444 <HAL_RCC_OscConfig+0x474>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0f0      	beq.n	8006286 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d106      	bne.n	80062ba <HAL_RCC_OscConfig+0x2ea>
 80062ac:	4b64      	ldr	r3, [pc, #400]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 80062ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b0:	4a63      	ldr	r2, [pc, #396]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 80062b2:	f043 0301 	orr.w	r3, r3, #1
 80062b6:	6713      	str	r3, [r2, #112]	; 0x70
 80062b8:	e01c      	b.n	80062f4 <HAL_RCC_OscConfig+0x324>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b05      	cmp	r3, #5
 80062c0:	d10c      	bne.n	80062dc <HAL_RCC_OscConfig+0x30c>
 80062c2:	4b5f      	ldr	r3, [pc, #380]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 80062c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c6:	4a5e      	ldr	r2, [pc, #376]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 80062c8:	f043 0304 	orr.w	r3, r3, #4
 80062cc:	6713      	str	r3, [r2, #112]	; 0x70
 80062ce:	4b5c      	ldr	r3, [pc, #368]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 80062d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d2:	4a5b      	ldr	r2, [pc, #364]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 80062d4:	f043 0301 	orr.w	r3, r3, #1
 80062d8:	6713      	str	r3, [r2, #112]	; 0x70
 80062da:	e00b      	b.n	80062f4 <HAL_RCC_OscConfig+0x324>
 80062dc:	4b58      	ldr	r3, [pc, #352]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 80062de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e0:	4a57      	ldr	r2, [pc, #348]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 80062e2:	f023 0301 	bic.w	r3, r3, #1
 80062e6:	6713      	str	r3, [r2, #112]	; 0x70
 80062e8:	4b55      	ldr	r3, [pc, #340]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 80062ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ec:	4a54      	ldr	r2, [pc, #336]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 80062ee:	f023 0304 	bic.w	r3, r3, #4
 80062f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d015      	beq.n	8006328 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062fc:	f7fc f940 	bl	8002580 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006302:	e00a      	b.n	800631a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006304:	f7fc f93c 	bl	8002580 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006312:	4293      	cmp	r3, r2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e0cb      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631a:	4b49      	ldr	r3, [pc, #292]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 800631c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0ee      	beq.n	8006304 <HAL_RCC_OscConfig+0x334>
 8006326:	e014      	b.n	8006352 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006328:	f7fc f92a 	bl	8002580 <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800632e:	e00a      	b.n	8006346 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006330:	f7fc f926 	bl	8002580 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	f241 3288 	movw	r2, #5000	; 0x1388
 800633e:	4293      	cmp	r3, r2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e0b5      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006346:	4b3e      	ldr	r3, [pc, #248]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 8006348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1ee      	bne.n	8006330 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006352:	7dfb      	ldrb	r3, [r7, #23]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d105      	bne.n	8006364 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006358:	4b39      	ldr	r3, [pc, #228]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	4a38      	ldr	r2, [pc, #224]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 800635e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006362:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 80a1 	beq.w	80064b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800636e:	4b34      	ldr	r3, [pc, #208]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 030c 	and.w	r3, r3, #12
 8006376:	2b08      	cmp	r3, #8
 8006378:	d05c      	beq.n	8006434 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d141      	bne.n	8006406 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006382:	4b31      	ldr	r3, [pc, #196]	; (8006448 <HAL_RCC_OscConfig+0x478>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006388:	f7fc f8fa 	bl	8002580 <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006390:	f7fc f8f6 	bl	8002580 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e087      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a2:	4b27      	ldr	r3, [pc, #156]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f0      	bne.n	8006390 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69da      	ldr	r2, [r3, #28]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	019b      	lsls	r3, r3, #6
 80063be:	431a      	orrs	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c4:	085b      	lsrs	r3, r3, #1
 80063c6:	3b01      	subs	r3, #1
 80063c8:	041b      	lsls	r3, r3, #16
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	061b      	lsls	r3, r3, #24
 80063d2:	491b      	ldr	r1, [pc, #108]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063d8:	4b1b      	ldr	r3, [pc, #108]	; (8006448 <HAL_RCC_OscConfig+0x478>)
 80063da:	2201      	movs	r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063de:	f7fc f8cf 	bl	8002580 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063e6:	f7fc f8cb 	bl	8002580 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e05c      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063f8:	4b11      	ldr	r3, [pc, #68]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0f0      	beq.n	80063e6 <HAL_RCC_OscConfig+0x416>
 8006404:	e054      	b.n	80064b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006406:	4b10      	ldr	r3, [pc, #64]	; (8006448 <HAL_RCC_OscConfig+0x478>)
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640c:	f7fc f8b8 	bl	8002580 <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006414:	f7fc f8b4 	bl	8002580 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e045      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006426:	4b06      	ldr	r3, [pc, #24]	; (8006440 <HAL_RCC_OscConfig+0x470>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f0      	bne.n	8006414 <HAL_RCC_OscConfig+0x444>
 8006432:	e03d      	b.n	80064b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d107      	bne.n	800644c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e038      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
 8006440:	40023800 	.word	0x40023800
 8006444:	40007000 	.word	0x40007000
 8006448:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800644c:	4b1b      	ldr	r3, [pc, #108]	; (80064bc <HAL_RCC_OscConfig+0x4ec>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d028      	beq.n	80064ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006464:	429a      	cmp	r2, r3
 8006466:	d121      	bne.n	80064ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006472:	429a      	cmp	r2, r3
 8006474:	d11a      	bne.n	80064ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800647c:	4013      	ands	r3, r2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006482:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006484:	4293      	cmp	r3, r2
 8006486:	d111      	bne.n	80064ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	3b01      	subs	r3, #1
 8006496:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006498:	429a      	cmp	r2, r3
 800649a:	d107      	bne.n	80064ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d001      	beq.n	80064b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	40023800 	.word	0x40023800

080064c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0cc      	b.n	800666e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064d4:	4b68      	ldr	r3, [pc, #416]	; (8006678 <HAL_RCC_ClockConfig+0x1b8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d90c      	bls.n	80064fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064e2:	4b65      	ldr	r3, [pc, #404]	; (8006678 <HAL_RCC_ClockConfig+0x1b8>)
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ea:	4b63      	ldr	r3, [pc, #396]	; (8006678 <HAL_RCC_ClockConfig+0x1b8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d001      	beq.n	80064fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0b8      	b.n	800666e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d020      	beq.n	800654a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006514:	4b59      	ldr	r3, [pc, #356]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	4a58      	ldr	r2, [pc, #352]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 800651a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800651e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800652c:	4b53      	ldr	r3, [pc, #332]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4a52      	ldr	r2, [pc, #328]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006538:	4b50      	ldr	r3, [pc, #320]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	494d      	ldr	r1, [pc, #308]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	4313      	orrs	r3, r2
 8006548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d044      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d107      	bne.n	800656e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800655e:	4b47      	ldr	r3, [pc, #284]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d119      	bne.n	800659e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e07f      	b.n	800666e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d003      	beq.n	800657e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800657a:	2b03      	cmp	r3, #3
 800657c:	d107      	bne.n	800658e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800657e:	4b3f      	ldr	r3, [pc, #252]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d109      	bne.n	800659e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e06f      	b.n	800666e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800658e:	4b3b      	ldr	r3, [pc, #236]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e067      	b.n	800666e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800659e:	4b37      	ldr	r3, [pc, #220]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f023 0203 	bic.w	r2, r3, #3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	4934      	ldr	r1, [pc, #208]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065b0:	f7fb ffe6 	bl	8002580 <HAL_GetTick>
 80065b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065b6:	e00a      	b.n	80065ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065b8:	f7fb ffe2 	bl	8002580 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e04f      	b.n	800666e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ce:	4b2b      	ldr	r3, [pc, #172]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 020c 	and.w	r2, r3, #12
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	429a      	cmp	r2, r3
 80065de:	d1eb      	bne.n	80065b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065e0:	4b25      	ldr	r3, [pc, #148]	; (8006678 <HAL_RCC_ClockConfig+0x1b8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d20c      	bcs.n	8006608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ee:	4b22      	ldr	r3, [pc, #136]	; (8006678 <HAL_RCC_ClockConfig+0x1b8>)
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f6:	4b20      	ldr	r3, [pc, #128]	; (8006678 <HAL_RCC_ClockConfig+0x1b8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d001      	beq.n	8006608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e032      	b.n	800666e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d008      	beq.n	8006626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006614:	4b19      	ldr	r3, [pc, #100]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	4916      	ldr	r1, [pc, #88]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006622:	4313      	orrs	r3, r2
 8006624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0308 	and.w	r3, r3, #8
 800662e:	2b00      	cmp	r3, #0
 8006630:	d009      	beq.n	8006646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006632:	4b12      	ldr	r3, [pc, #72]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	490e      	ldr	r1, [pc, #56]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006642:	4313      	orrs	r3, r2
 8006644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006646:	f000 f821 	bl	800668c <HAL_RCC_GetSysClockFreq>
 800664a:	4602      	mov	r2, r0
 800664c:	4b0b      	ldr	r3, [pc, #44]	; (800667c <HAL_RCC_ClockConfig+0x1bc>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	091b      	lsrs	r3, r3, #4
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	490a      	ldr	r1, [pc, #40]	; (8006680 <HAL_RCC_ClockConfig+0x1c0>)
 8006658:	5ccb      	ldrb	r3, [r1, r3]
 800665a:	fa22 f303 	lsr.w	r3, r2, r3
 800665e:	4a09      	ldr	r2, [pc, #36]	; (8006684 <HAL_RCC_ClockConfig+0x1c4>)
 8006660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006662:	4b09      	ldr	r3, [pc, #36]	; (8006688 <HAL_RCC_ClockConfig+0x1c8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4618      	mov	r0, r3
 8006668:	f7fb ff46 	bl	80024f8 <HAL_InitTick>

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	40023c00 	.word	0x40023c00
 800667c:	40023800 	.word	0x40023800
 8006680:	08008878 	.word	0x08008878
 8006684:	20000024 	.word	0x20000024
 8006688:	20000028 	.word	0x20000028

0800668c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800668c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006690:	b094      	sub	sp, #80	; 0x50
 8006692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	647b      	str	r3, [r7, #68]	; 0x44
 8006698:	2300      	movs	r3, #0
 800669a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800669c:	2300      	movs	r3, #0
 800669e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066a4:	4b79      	ldr	r3, [pc, #484]	; (800688c <HAL_RCC_GetSysClockFreq+0x200>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f003 030c 	and.w	r3, r3, #12
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d00d      	beq.n	80066cc <HAL_RCC_GetSysClockFreq+0x40>
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	f200 80e1 	bhi.w	8006878 <HAL_RCC_GetSysClockFreq+0x1ec>
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <HAL_RCC_GetSysClockFreq+0x34>
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d003      	beq.n	80066c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80066be:	e0db      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066c0:	4b73      	ldr	r3, [pc, #460]	; (8006890 <HAL_RCC_GetSysClockFreq+0x204>)
 80066c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80066c4:	e0db      	b.n	800687e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066c6:	4b73      	ldr	r3, [pc, #460]	; (8006894 <HAL_RCC_GetSysClockFreq+0x208>)
 80066c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066ca:	e0d8      	b.n	800687e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066cc:	4b6f      	ldr	r3, [pc, #444]	; (800688c <HAL_RCC_GetSysClockFreq+0x200>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066d6:	4b6d      	ldr	r3, [pc, #436]	; (800688c <HAL_RCC_GetSysClockFreq+0x200>)
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d063      	beq.n	80067aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066e2:	4b6a      	ldr	r3, [pc, #424]	; (800688c <HAL_RCC_GetSysClockFreq+0x200>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	099b      	lsrs	r3, r3, #6
 80066e8:	2200      	movs	r2, #0
 80066ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80066ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f4:	633b      	str	r3, [r7, #48]	; 0x30
 80066f6:	2300      	movs	r3, #0
 80066f8:	637b      	str	r3, [r7, #52]	; 0x34
 80066fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80066fe:	4622      	mov	r2, r4
 8006700:	462b      	mov	r3, r5
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f04f 0100 	mov.w	r1, #0
 800670a:	0159      	lsls	r1, r3, #5
 800670c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006710:	0150      	lsls	r0, r2, #5
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4621      	mov	r1, r4
 8006718:	1a51      	subs	r1, r2, r1
 800671a:	6139      	str	r1, [r7, #16]
 800671c:	4629      	mov	r1, r5
 800671e:	eb63 0301 	sbc.w	r3, r3, r1
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006730:	4659      	mov	r1, fp
 8006732:	018b      	lsls	r3, r1, #6
 8006734:	4651      	mov	r1, sl
 8006736:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800673a:	4651      	mov	r1, sl
 800673c:	018a      	lsls	r2, r1, #6
 800673e:	4651      	mov	r1, sl
 8006740:	ebb2 0801 	subs.w	r8, r2, r1
 8006744:	4659      	mov	r1, fp
 8006746:	eb63 0901 	sbc.w	r9, r3, r1
 800674a:	f04f 0200 	mov.w	r2, #0
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800675a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800675e:	4690      	mov	r8, r2
 8006760:	4699      	mov	r9, r3
 8006762:	4623      	mov	r3, r4
 8006764:	eb18 0303 	adds.w	r3, r8, r3
 8006768:	60bb      	str	r3, [r7, #8]
 800676a:	462b      	mov	r3, r5
 800676c:	eb49 0303 	adc.w	r3, r9, r3
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	f04f 0200 	mov.w	r2, #0
 8006776:	f04f 0300 	mov.w	r3, #0
 800677a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800677e:	4629      	mov	r1, r5
 8006780:	024b      	lsls	r3, r1, #9
 8006782:	4621      	mov	r1, r4
 8006784:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006788:	4621      	mov	r1, r4
 800678a:	024a      	lsls	r2, r1, #9
 800678c:	4610      	mov	r0, r2
 800678e:	4619      	mov	r1, r3
 8006790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006792:	2200      	movs	r2, #0
 8006794:	62bb      	str	r3, [r7, #40]	; 0x28
 8006796:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006798:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800679c:	f7fa fa48 	bl	8000c30 <__aeabi_uldivmod>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	4613      	mov	r3, r2
 80067a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a8:	e058      	b.n	800685c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067aa:	4b38      	ldr	r3, [pc, #224]	; (800688c <HAL_RCC_GetSysClockFreq+0x200>)
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	099b      	lsrs	r3, r3, #6
 80067b0:	2200      	movs	r2, #0
 80067b2:	4618      	mov	r0, r3
 80067b4:	4611      	mov	r1, r2
 80067b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067ba:	623b      	str	r3, [r7, #32]
 80067bc:	2300      	movs	r3, #0
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
 80067c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	f04f 0000 	mov.w	r0, #0
 80067cc:	f04f 0100 	mov.w	r1, #0
 80067d0:	0159      	lsls	r1, r3, #5
 80067d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067d6:	0150      	lsls	r0, r2, #5
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4641      	mov	r1, r8
 80067de:	ebb2 0a01 	subs.w	sl, r2, r1
 80067e2:	4649      	mov	r1, r9
 80067e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067fc:	ebb2 040a 	subs.w	r4, r2, sl
 8006800:	eb63 050b 	sbc.w	r5, r3, fp
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	f04f 0300 	mov.w	r3, #0
 800680c:	00eb      	lsls	r3, r5, #3
 800680e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006812:	00e2      	lsls	r2, r4, #3
 8006814:	4614      	mov	r4, r2
 8006816:	461d      	mov	r5, r3
 8006818:	4643      	mov	r3, r8
 800681a:	18e3      	adds	r3, r4, r3
 800681c:	603b      	str	r3, [r7, #0]
 800681e:	464b      	mov	r3, r9
 8006820:	eb45 0303 	adc.w	r3, r5, r3
 8006824:	607b      	str	r3, [r7, #4]
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	f04f 0300 	mov.w	r3, #0
 800682e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006832:	4629      	mov	r1, r5
 8006834:	028b      	lsls	r3, r1, #10
 8006836:	4621      	mov	r1, r4
 8006838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800683c:	4621      	mov	r1, r4
 800683e:	028a      	lsls	r2, r1, #10
 8006840:	4610      	mov	r0, r2
 8006842:	4619      	mov	r1, r3
 8006844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006846:	2200      	movs	r2, #0
 8006848:	61bb      	str	r3, [r7, #24]
 800684a:	61fa      	str	r2, [r7, #28]
 800684c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006850:	f7fa f9ee 	bl	8000c30 <__aeabi_uldivmod>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4613      	mov	r3, r2
 800685a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800685c:	4b0b      	ldr	r3, [pc, #44]	; (800688c <HAL_RCC_GetSysClockFreq+0x200>)
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	0c1b      	lsrs	r3, r3, #16
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	3301      	adds	r3, #1
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800686c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800686e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006870:	fbb2 f3f3 	udiv	r3, r2, r3
 8006874:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006876:	e002      	b.n	800687e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006878:	4b05      	ldr	r3, [pc, #20]	; (8006890 <HAL_RCC_GetSysClockFreq+0x204>)
 800687a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800687c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800687e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006880:	4618      	mov	r0, r3
 8006882:	3750      	adds	r7, #80	; 0x50
 8006884:	46bd      	mov	sp, r7
 8006886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800688a:	bf00      	nop
 800688c:	40023800 	.word	0x40023800
 8006890:	00f42400 	.word	0x00f42400
 8006894:	007a1200 	.word	0x007a1200

08006898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800689c:	4b03      	ldr	r3, [pc, #12]	; (80068ac <HAL_RCC_GetHCLKFreq+0x14>)
 800689e:	681b      	ldr	r3, [r3, #0]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	20000024 	.word	0x20000024

080068b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068b4:	f7ff fff0 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 80068b8:	4602      	mov	r2, r0
 80068ba:	4b05      	ldr	r3, [pc, #20]	; (80068d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	0a9b      	lsrs	r3, r3, #10
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	4903      	ldr	r1, [pc, #12]	; (80068d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068c6:	5ccb      	ldrb	r3, [r1, r3]
 80068c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40023800 	.word	0x40023800
 80068d4:	08008888 	.word	0x08008888

080068d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068dc:	f7ff ffdc 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 80068e0:	4602      	mov	r2, r0
 80068e2:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	0b5b      	lsrs	r3, r3, #13
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	4903      	ldr	r1, [pc, #12]	; (80068fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80068ee:	5ccb      	ldrb	r3, [r1, r3]
 80068f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40023800 	.word	0x40023800
 80068fc:	08008888 	.word	0x08008888

08006900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e041      	b.n	8006996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fb fbee 	bl	8002108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3304      	adds	r3, #4
 800693c:	4619      	mov	r1, r3
 800693e:	4610      	mov	r0, r2
 8006940:	f001 f834 	bl	80079ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
	...

080069a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d001      	beq.n	80069b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e03c      	b.n	8006a32 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <HAL_TIM_Base_Start+0xa0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d018      	beq.n	80069fc <HAL_TIM_Base_Start+0x5c>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d2:	d013      	beq.n	80069fc <HAL_TIM_Base_Start+0x5c>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a1a      	ldr	r2, [pc, #104]	; (8006a44 <HAL_TIM_Base_Start+0xa4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d00e      	beq.n	80069fc <HAL_TIM_Base_Start+0x5c>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a19      	ldr	r2, [pc, #100]	; (8006a48 <HAL_TIM_Base_Start+0xa8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d009      	beq.n	80069fc <HAL_TIM_Base_Start+0x5c>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a17      	ldr	r2, [pc, #92]	; (8006a4c <HAL_TIM_Base_Start+0xac>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d004      	beq.n	80069fc <HAL_TIM_Base_Start+0x5c>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a16      	ldr	r2, [pc, #88]	; (8006a50 <HAL_TIM_Base_Start+0xb0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d111      	bne.n	8006a20 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b06      	cmp	r3, #6
 8006a0c:	d010      	beq.n	8006a30 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0201 	orr.w	r2, r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1e:	e007      	b.n	8006a30 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 0201 	orr.w	r2, r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40010000 	.word	0x40010000
 8006a44:	40000400 	.word	0x40000400
 8006a48:	40000800 	.word	0x40000800
 8006a4c:	40000c00 	.word	0x40000c00
 8006a50:	40014000 	.word	0x40014000

08006a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d001      	beq.n	8006a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e044      	b.n	8006af6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1e      	ldr	r2, [pc, #120]	; (8006b04 <HAL_TIM_Base_Start_IT+0xb0>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d018      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a96:	d013      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1a      	ldr	r2, [pc, #104]	; (8006b08 <HAL_TIM_Base_Start_IT+0xb4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00e      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <HAL_TIM_Base_Start_IT+0xb8>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d009      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a17      	ldr	r2, [pc, #92]	; (8006b10 <HAL_TIM_Base_Start_IT+0xbc>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a16      	ldr	r2, [pc, #88]	; (8006b14 <HAL_TIM_Base_Start_IT+0xc0>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d111      	bne.n	8006ae4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b06      	cmp	r3, #6
 8006ad0:	d010      	beq.n	8006af4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 0201 	orr.w	r2, r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae2:	e007      	b.n	8006af4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0201 	orr.w	r2, r2, #1
 8006af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	40010000 	.word	0x40010000
 8006b08:	40000400 	.word	0x40000400
 8006b0c:	40000800 	.word	0x40000800
 8006b10:	40000c00 	.word	0x40000c00
 8006b14:	40014000 	.word	0x40014000

08006b18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e041      	b.n	8006bae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d106      	bne.n	8006b44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f839 	bl	8006bb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3304      	adds	r3, #4
 8006b54:	4619      	mov	r1, r3
 8006b56:	4610      	mov	r0, r2
 8006b58:	f000 ff28 	bl	80079ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
	...

08006bcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d109      	bne.n	8006bf0 <HAL_TIM_PWM_Start+0x24>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	bf14      	ite	ne
 8006be8:	2301      	movne	r3, #1
 8006bea:	2300      	moveq	r3, #0
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	e022      	b.n	8006c36 <HAL_TIM_PWM_Start+0x6a>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d109      	bne.n	8006c0a <HAL_TIM_PWM_Start+0x3e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	bf14      	ite	ne
 8006c02:	2301      	movne	r3, #1
 8006c04:	2300      	moveq	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	e015      	b.n	8006c36 <HAL_TIM_PWM_Start+0x6a>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d109      	bne.n	8006c24 <HAL_TIM_PWM_Start+0x58>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	bf14      	ite	ne
 8006c1c:	2301      	movne	r3, #1
 8006c1e:	2300      	moveq	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	e008      	b.n	8006c36 <HAL_TIM_PWM_Start+0x6a>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	bf14      	ite	ne
 8006c30:	2301      	movne	r3, #1
 8006c32:	2300      	moveq	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e068      	b.n	8006d10 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d104      	bne.n	8006c4e <HAL_TIM_PWM_Start+0x82>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c4c:	e013      	b.n	8006c76 <HAL_TIM_PWM_Start+0xaa>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d104      	bne.n	8006c5e <HAL_TIM_PWM_Start+0x92>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c5c:	e00b      	b.n	8006c76 <HAL_TIM_PWM_Start+0xaa>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d104      	bne.n	8006c6e <HAL_TIM_PWM_Start+0xa2>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c6c:	e003      	b.n	8006c76 <HAL_TIM_PWM_Start+0xaa>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2202      	movs	r2, #2
 8006c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f001 fa58 	bl	8008134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a23      	ldr	r2, [pc, #140]	; (8006d18 <HAL_TIM_PWM_Start+0x14c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d107      	bne.n	8006c9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a1d      	ldr	r2, [pc, #116]	; (8006d18 <HAL_TIM_PWM_Start+0x14c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d018      	beq.n	8006cda <HAL_TIM_PWM_Start+0x10e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb0:	d013      	beq.n	8006cda <HAL_TIM_PWM_Start+0x10e>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a19      	ldr	r2, [pc, #100]	; (8006d1c <HAL_TIM_PWM_Start+0x150>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00e      	beq.n	8006cda <HAL_TIM_PWM_Start+0x10e>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a17      	ldr	r2, [pc, #92]	; (8006d20 <HAL_TIM_PWM_Start+0x154>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d009      	beq.n	8006cda <HAL_TIM_PWM_Start+0x10e>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a16      	ldr	r2, [pc, #88]	; (8006d24 <HAL_TIM_PWM_Start+0x158>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d004      	beq.n	8006cda <HAL_TIM_PWM_Start+0x10e>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a14      	ldr	r2, [pc, #80]	; (8006d28 <HAL_TIM_PWM_Start+0x15c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d111      	bne.n	8006cfe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 0307 	and.w	r3, r3, #7
 8006ce4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2b06      	cmp	r3, #6
 8006cea:	d010      	beq.n	8006d0e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0201 	orr.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cfc:	e007      	b.n	8006d0e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f042 0201 	orr.w	r2, r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	40010000 	.word	0x40010000
 8006d1c:	40000400 	.word	0x40000400
 8006d20:	40000800 	.word	0x40000800
 8006d24:	40000c00 	.word	0x40000c00
 8006d28:	40014000 	.word	0x40014000

08006d2c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e041      	b.n	8006dc2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f839 	bl	8006dca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3304      	adds	r3, #4
 8006d68:	4619      	mov	r1, r3
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	f000 fe1e 	bl	80079ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
	...

08006de0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <HAL_TIM_IC_Start_DMA+0x22>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	e013      	b.n	8006e2a <HAL_TIM_IC_Start_DMA+0x4a>
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d104      	bne.n	8006e12 <HAL_TIM_IC_Start_DMA+0x32>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	e00b      	b.n	8006e2a <HAL_TIM_IC_Start_DMA+0x4a>
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d104      	bne.n	8006e22 <HAL_TIM_IC_Start_DMA+0x42>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	e003      	b.n	8006e2a <HAL_TIM_IC_Start_DMA+0x4a>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d104      	bne.n	8006e3c <HAL_TIM_IC_Start_DMA+0x5c>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	e013      	b.n	8006e64 <HAL_TIM_IC_Start_DMA+0x84>
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d104      	bne.n	8006e4c <HAL_TIM_IC_Start_DMA+0x6c>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	e00b      	b.n	8006e64 <HAL_TIM_IC_Start_DMA+0x84>
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b08      	cmp	r3, #8
 8006e50:	d104      	bne.n	8006e5c <HAL_TIM_IC_Start_DMA+0x7c>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	e003      	b.n	8006e64 <HAL_TIM_IC_Start_DMA+0x84>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8006e66:	7dbb      	ldrb	r3, [r7, #22]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d002      	beq.n	8006e72 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8006e6c:	7d7b      	ldrb	r3, [r7, #21]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d101      	bne.n	8006e76 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8006e72:	2302      	movs	r3, #2
 8006e74:	e13c      	b.n	80070f0 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8006e76:	7dbb      	ldrb	r3, [r7, #22]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d143      	bne.n	8006f04 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8006e7c:	7d7b      	ldrb	r3, [r7, #21]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d140      	bne.n	8006f04 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d104      	bne.n	8006e92 <HAL_TIM_IC_Start_DMA+0xb2>
 8006e88:	887b      	ldrh	r3, [r7, #2]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e12e      	b.n	80070f0 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <HAL_TIM_IC_Start_DMA+0xc2>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ea0:	e013      	b.n	8006eca <HAL_TIM_IC_Start_DMA+0xea>
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	d104      	bne.n	8006eb2 <HAL_TIM_IC_Start_DMA+0xd2>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eb0:	e00b      	b.n	8006eca <HAL_TIM_IC_Start_DMA+0xea>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d104      	bne.n	8006ec2 <HAL_TIM_IC_Start_DMA+0xe2>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ec0:	e003      	b.n	8006eca <HAL_TIM_IC_Start_DMA+0xea>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d104      	bne.n	8006eda <HAL_TIM_IC_Start_DMA+0xfa>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8006ed8:	e016      	b.n	8006f08 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d104      	bne.n	8006eea <HAL_TIM_IC_Start_DMA+0x10a>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8006ee8:	e00e      	b.n	8006f08 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d104      	bne.n	8006efa <HAL_TIM_IC_Start_DMA+0x11a>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8006ef8:	e006      	b.n	8006f08 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2202      	movs	r2, #2
 8006efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8006f02:	e001      	b.n	8006f08 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e0f3      	b.n	80070f0 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	68b9      	ldr	r1, [r7, #8]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f001 f90f 	bl	8008134 <TIM_CCxChannelCmd>

  switch (Channel)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2b0c      	cmp	r3, #12
 8006f1a:	f200 80ad 	bhi.w	8007078 <HAL_TIM_IC_Start_DMA+0x298>
 8006f1e:	a201      	add	r2, pc, #4	; (adr r2, 8006f24 <HAL_TIM_IC_Start_DMA+0x144>)
 8006f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f24:	08006f59 	.word	0x08006f59
 8006f28:	08007079 	.word	0x08007079
 8006f2c:	08007079 	.word	0x08007079
 8006f30:	08007079 	.word	0x08007079
 8006f34:	08006fa1 	.word	0x08006fa1
 8006f38:	08007079 	.word	0x08007079
 8006f3c:	08007079 	.word	0x08007079
 8006f40:	08007079 	.word	0x08007079
 8006f44:	08006fe9 	.word	0x08006fe9
 8006f48:	08007079 	.word	0x08007079
 8006f4c:	08007079 	.word	0x08007079
 8006f50:	08007079 	.word	0x08007079
 8006f54:	08007031 	.word	0x08007031
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	4a66      	ldr	r2, [pc, #408]	; (80070f8 <HAL_TIM_IC_Start_DMA+0x318>)
 8006f5e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	4a65      	ldr	r2, [pc, #404]	; (80070fc <HAL_TIM_IC_Start_DMA+0x31c>)
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	4a64      	ldr	r2, [pc, #400]	; (8007100 <HAL_TIM_IC_Start_DMA+0x320>)
 8006f6e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3334      	adds	r3, #52	; 0x34
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	887b      	ldrh	r3, [r7, #2]
 8006f80:	f7fb fcee 	bl	8002960 <HAL_DMA_Start_IT>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e0b0      	b.n	80070f0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f9c:	60da      	str	r2, [r3, #12]
      break;
 8006f9e:	e06e      	b.n	800707e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa4:	4a54      	ldr	r2, [pc, #336]	; (80070f8 <HAL_TIM_IC_Start_DMA+0x318>)
 8006fa6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fac:	4a53      	ldr	r2, [pc, #332]	; (80070fc <HAL_TIM_IC_Start_DMA+0x31c>)
 8006fae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb4:	4a52      	ldr	r2, [pc, #328]	; (8007100 <HAL_TIM_IC_Start_DMA+0x320>)
 8006fb6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3338      	adds	r3, #56	; 0x38
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	887b      	ldrh	r3, [r7, #2]
 8006fc8:	f7fb fcca 	bl	8002960 <HAL_DMA_Start_IT>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e08c      	b.n	80070f0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fe4:	60da      	str	r2, [r3, #12]
      break;
 8006fe6:	e04a      	b.n	800707e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	4a42      	ldr	r2, [pc, #264]	; (80070f8 <HAL_TIM_IC_Start_DMA+0x318>)
 8006fee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff4:	4a41      	ldr	r2, [pc, #260]	; (80070fc <HAL_TIM_IC_Start_DMA+0x31c>)
 8006ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	4a40      	ldr	r2, [pc, #256]	; (8007100 <HAL_TIM_IC_Start_DMA+0x320>)
 8006ffe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	333c      	adds	r3, #60	; 0x3c
 800700a:	4619      	mov	r1, r3
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	887b      	ldrh	r3, [r7, #2]
 8007010:	f7fb fca6 	bl	8002960 <HAL_DMA_Start_IT>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e068      	b.n	80070f0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800702c:	60da      	str	r2, [r3, #12]
      break;
 800702e:	e026      	b.n	800707e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007034:	4a30      	ldr	r2, [pc, #192]	; (80070f8 <HAL_TIM_IC_Start_DMA+0x318>)
 8007036:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703c:	4a2f      	ldr	r2, [pc, #188]	; (80070fc <HAL_TIM_IC_Start_DMA+0x31c>)
 800703e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007044:	4a2e      	ldr	r2, [pc, #184]	; (8007100 <HAL_TIM_IC_Start_DMA+0x320>)
 8007046:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3340      	adds	r3, #64	; 0x40
 8007052:	4619      	mov	r1, r3
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	887b      	ldrh	r3, [r7, #2]
 8007058:	f7fb fc82 	bl	8002960 <HAL_DMA_Start_IT>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e044      	b.n	80070f0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007074:	60da      	str	r2, [r3, #12]
      break;
 8007076:	e002      	b.n	800707e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	75fb      	strb	r3, [r7, #23]
      break;
 800707c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a20      	ldr	r2, [pc, #128]	; (8007104 <HAL_TIM_IC_Start_DMA+0x324>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d018      	beq.n	80070ba <HAL_TIM_IC_Start_DMA+0x2da>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007090:	d013      	beq.n	80070ba <HAL_TIM_IC_Start_DMA+0x2da>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a1c      	ldr	r2, [pc, #112]	; (8007108 <HAL_TIM_IC_Start_DMA+0x328>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d00e      	beq.n	80070ba <HAL_TIM_IC_Start_DMA+0x2da>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a1a      	ldr	r2, [pc, #104]	; (800710c <HAL_TIM_IC_Start_DMA+0x32c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d009      	beq.n	80070ba <HAL_TIM_IC_Start_DMA+0x2da>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a19      	ldr	r2, [pc, #100]	; (8007110 <HAL_TIM_IC_Start_DMA+0x330>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d004      	beq.n	80070ba <HAL_TIM_IC_Start_DMA+0x2da>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a17      	ldr	r2, [pc, #92]	; (8007114 <HAL_TIM_IC_Start_DMA+0x334>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d111      	bne.n	80070de <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b06      	cmp	r3, #6
 80070ca:	d010      	beq.n	80070ee <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0201 	orr.w	r2, r2, #1
 80070da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070dc:	e007      	b.n	80070ee <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f042 0201 	orr.w	r2, r2, #1
 80070ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	0800787d 	.word	0x0800787d
 80070fc:	08007945 	.word	0x08007945
 8007100:	080077eb 	.word	0x080077eb
 8007104:	40010000 	.word	0x40010000
 8007108:	40000400 	.word	0x40000400
 800710c:	40000800 	.word	0x40000800
 8007110:	40000c00 	.word	0x40000c00
 8007114:	40014000 	.word	0x40014000

08007118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b02      	cmp	r3, #2
 800712c:	d122      	bne.n	8007174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b02      	cmp	r3, #2
 800713a:	d11b      	bne.n	8007174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f06f 0202 	mvn.w	r2, #2
 8007144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f003 0303 	and.w	r3, r3, #3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fb13 	bl	8007786 <HAL_TIM_IC_CaptureCallback>
 8007160:	e005      	b.n	800716e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fb05 	bl	8007772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fb20 	bl	80077ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f003 0304 	and.w	r3, r3, #4
 800717e:	2b04      	cmp	r3, #4
 8007180:	d122      	bne.n	80071c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b04      	cmp	r3, #4
 800718e:	d11b      	bne.n	80071c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f06f 0204 	mvn.w	r2, #4
 8007198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2202      	movs	r2, #2
 800719e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fae9 	bl	8007786 <HAL_TIM_IC_CaptureCallback>
 80071b4:	e005      	b.n	80071c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fadb 	bl	8007772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 faf6 	bl	80077ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	f003 0308 	and.w	r3, r3, #8
 80071d2:	2b08      	cmp	r3, #8
 80071d4:	d122      	bne.n	800721c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f003 0308 	and.w	r3, r3, #8
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d11b      	bne.n	800721c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f06f 0208 	mvn.w	r2, #8
 80071ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2204      	movs	r2, #4
 80071f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fabf 	bl	8007786 <HAL_TIM_IC_CaptureCallback>
 8007208:	e005      	b.n	8007216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fab1 	bl	8007772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 facc 	bl	80077ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f003 0310 	and.w	r3, r3, #16
 8007226:	2b10      	cmp	r3, #16
 8007228:	d122      	bne.n	8007270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f003 0310 	and.w	r3, r3, #16
 8007234:	2b10      	cmp	r3, #16
 8007236:	d11b      	bne.n	8007270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f06f 0210 	mvn.w	r2, #16
 8007240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2208      	movs	r2, #8
 8007246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fa95 	bl	8007786 <HAL_TIM_IC_CaptureCallback>
 800725c:	e005      	b.n	800726a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa87 	bl	8007772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 faa2 	bl	80077ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b01      	cmp	r3, #1
 800727c:	d10e      	bne.n	800729c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b01      	cmp	r3, #1
 800728a:	d107      	bne.n	800729c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f06f 0201 	mvn.w	r2, #1
 8007294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7fa fe94 	bl	8001fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a6:	2b80      	cmp	r3, #128	; 0x80
 80072a8:	d10e      	bne.n	80072c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b4:	2b80      	cmp	r3, #128	; 0x80
 80072b6:	d107      	bne.n	80072c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 ffd4 	bl	8008270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d2:	2b40      	cmp	r3, #64	; 0x40
 80072d4:	d10e      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e0:	2b40      	cmp	r3, #64	; 0x40
 80072e2:	d107      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa67 	bl	80077c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b20      	cmp	r3, #32
 8007300:	d10e      	bne.n	8007320 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f003 0320 	and.w	r3, r3, #32
 800730c:	2b20      	cmp	r3, #32
 800730e:	d107      	bne.n	8007320 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f06f 0220 	mvn.w	r2, #32
 8007318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 ff9e 	bl	800825c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007320:	bf00      	nop
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007342:	2302      	movs	r3, #2
 8007344:	e088      	b.n	8007458 <HAL_TIM_IC_ConfigChannel+0x130>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d11b      	bne.n	800738c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	6819      	ldr	r1, [r3, #0]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f000 fd2e 	bl	8007dc4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	699a      	ldr	r2, [r3, #24]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 020c 	bic.w	r2, r2, #12
 8007376:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6999      	ldr	r1, [r3, #24]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	619a      	str	r2, [r3, #24]
 800738a:	e060      	b.n	800744e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b04      	cmp	r3, #4
 8007390:	d11c      	bne.n	80073cc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	6819      	ldr	r1, [r3, #0]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f000 fda6 	bl	8007ef2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699a      	ldr	r2, [r3, #24]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80073b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6999      	ldr	r1, [r3, #24]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	021a      	lsls	r2, r3, #8
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	619a      	str	r2, [r3, #24]
 80073ca:	e040      	b.n	800744e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b08      	cmp	r3, #8
 80073d0:	d11b      	bne.n	800740a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6818      	ldr	r0, [r3, #0]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6819      	ldr	r1, [r3, #0]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f000 fdf3 	bl	8007fcc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 020c 	bic.w	r2, r2, #12
 80073f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69d9      	ldr	r1, [r3, #28]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	61da      	str	r2, [r3, #28]
 8007408:	e021      	b.n	800744e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b0c      	cmp	r3, #12
 800740e:	d11c      	bne.n	800744a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6818      	ldr	r0, [r3, #0]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	6819      	ldr	r1, [r3, #0]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f000 fe10 	bl	8008044 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69da      	ldr	r2, [r3, #28]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007432:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	69d9      	ldr	r1, [r3, #28]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	021a      	lsls	r2, r3, #8
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	430a      	orrs	r2, r1
 8007446:	61da      	str	r2, [r3, #28]
 8007448:	e001      	b.n	800744e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007456:	7dfb      	ldrb	r3, [r7, #23]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007476:	2b01      	cmp	r3, #1
 8007478:	d101      	bne.n	800747e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800747a:	2302      	movs	r3, #2
 800747c:	e0ae      	b.n	80075dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b0c      	cmp	r3, #12
 800748a:	f200 809f 	bhi.w	80075cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800748e:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007494:	080074c9 	.word	0x080074c9
 8007498:	080075cd 	.word	0x080075cd
 800749c:	080075cd 	.word	0x080075cd
 80074a0:	080075cd 	.word	0x080075cd
 80074a4:	08007509 	.word	0x08007509
 80074a8:	080075cd 	.word	0x080075cd
 80074ac:	080075cd 	.word	0x080075cd
 80074b0:	080075cd 	.word	0x080075cd
 80074b4:	0800754b 	.word	0x0800754b
 80074b8:	080075cd 	.word	0x080075cd
 80074bc:	080075cd 	.word	0x080075cd
 80074c0:	080075cd 	.word	0x080075cd
 80074c4:	0800758b 	.word	0x0800758b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 faec 	bl	8007aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	699a      	ldr	r2, [r3, #24]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0208 	orr.w	r2, r2, #8
 80074e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0204 	bic.w	r2, r2, #4
 80074f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6999      	ldr	r1, [r3, #24]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	691a      	ldr	r2, [r3, #16]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	619a      	str	r2, [r3, #24]
      break;
 8007506:	e064      	b.n	80075d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68b9      	ldr	r1, [r7, #8]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fb32 	bl	8007b78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699a      	ldr	r2, [r3, #24]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6999      	ldr	r1, [r3, #24]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	021a      	lsls	r2, r3, #8
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	619a      	str	r2, [r3, #24]
      break;
 8007548:	e043      	b.n	80075d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fb7d 	bl	8007c50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	69da      	ldr	r2, [r3, #28]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f042 0208 	orr.w	r2, r2, #8
 8007564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69da      	ldr	r2, [r3, #28]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0204 	bic.w	r2, r2, #4
 8007574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69d9      	ldr	r1, [r3, #28]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	691a      	ldr	r2, [r3, #16]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	430a      	orrs	r2, r1
 8007586:	61da      	str	r2, [r3, #28]
      break;
 8007588:	e023      	b.n	80075d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68b9      	ldr	r1, [r7, #8]
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fbc7 	bl	8007d24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69da      	ldr	r2, [r3, #28]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69da      	ldr	r2, [r3, #28]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69d9      	ldr	r1, [r3, #28]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	021a      	lsls	r2, r3, #8
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	61da      	str	r2, [r3, #28]
      break;
 80075ca:	e002      	b.n	80075d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	75fb      	strb	r3, [r7, #23]
      break;
 80075d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_TIM_ConfigClockSource+0x1c>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e0b4      	b.n	800776a <HAL_TIM_ConfigClockSource+0x186>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800761e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007638:	d03e      	beq.n	80076b8 <HAL_TIM_ConfigClockSource+0xd4>
 800763a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800763e:	f200 8087 	bhi.w	8007750 <HAL_TIM_ConfigClockSource+0x16c>
 8007642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007646:	f000 8086 	beq.w	8007756 <HAL_TIM_ConfigClockSource+0x172>
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764e:	d87f      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x16c>
 8007650:	2b70      	cmp	r3, #112	; 0x70
 8007652:	d01a      	beq.n	800768a <HAL_TIM_ConfigClockSource+0xa6>
 8007654:	2b70      	cmp	r3, #112	; 0x70
 8007656:	d87b      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x16c>
 8007658:	2b60      	cmp	r3, #96	; 0x60
 800765a:	d050      	beq.n	80076fe <HAL_TIM_ConfigClockSource+0x11a>
 800765c:	2b60      	cmp	r3, #96	; 0x60
 800765e:	d877      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x16c>
 8007660:	2b50      	cmp	r3, #80	; 0x50
 8007662:	d03c      	beq.n	80076de <HAL_TIM_ConfigClockSource+0xfa>
 8007664:	2b50      	cmp	r3, #80	; 0x50
 8007666:	d873      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x16c>
 8007668:	2b40      	cmp	r3, #64	; 0x40
 800766a:	d058      	beq.n	800771e <HAL_TIM_ConfigClockSource+0x13a>
 800766c:	2b40      	cmp	r3, #64	; 0x40
 800766e:	d86f      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x16c>
 8007670:	2b30      	cmp	r3, #48	; 0x30
 8007672:	d064      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x15a>
 8007674:	2b30      	cmp	r3, #48	; 0x30
 8007676:	d86b      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x16c>
 8007678:	2b20      	cmp	r3, #32
 800767a:	d060      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x15a>
 800767c:	2b20      	cmp	r3, #32
 800767e:	d867      	bhi.n	8007750 <HAL_TIM_ConfigClockSource+0x16c>
 8007680:	2b00      	cmp	r3, #0
 8007682:	d05c      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x15a>
 8007684:	2b10      	cmp	r3, #16
 8007686:	d05a      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x15a>
 8007688:	e062      	b.n	8007750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6818      	ldr	r0, [r3, #0]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	6899      	ldr	r1, [r3, #8]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f000 fd2b 	bl	80080f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	609a      	str	r2, [r3, #8]
      break;
 80076b6:	e04f      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6818      	ldr	r0, [r3, #0]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	6899      	ldr	r1, [r3, #8]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f000 fd14 	bl	80080f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689a      	ldr	r2, [r3, #8]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076da:	609a      	str	r2, [r3, #8]
      break;
 80076dc:	e03c      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6818      	ldr	r0, [r3, #0]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	6859      	ldr	r1, [r3, #4]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	461a      	mov	r2, r3
 80076ec:	f000 fbd2 	bl	8007e94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2150      	movs	r1, #80	; 0x50
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 fce1 	bl	80080be <TIM_ITRx_SetConfig>
      break;
 80076fc:	e02c      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6818      	ldr	r0, [r3, #0]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	6859      	ldr	r1, [r3, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	461a      	mov	r2, r3
 800770c:	f000 fc2e 	bl	8007f6c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2160      	movs	r1, #96	; 0x60
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fcd1 	bl	80080be <TIM_ITRx_SetConfig>
      break;
 800771c:	e01c      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	6859      	ldr	r1, [r3, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	461a      	mov	r2, r3
 800772c:	f000 fbb2 	bl	8007e94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2140      	movs	r1, #64	; 0x40
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fcc1 	bl	80080be <TIM_ITRx_SetConfig>
      break;
 800773c:	e00c      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f000 fcb8 	bl	80080be <TIM_ITRx_SetConfig>
      break;
 800774e:	e003      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
      break;
 8007754:	e000      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800777a:	bf00      	nop
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b083      	sub	sp, #12
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d107      	bne.n	8007812 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007810:	e02a      	b.n	8007868 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d107      	bne.n	800782c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2202      	movs	r2, #2
 8007820:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800782a:	e01d      	b.n	8007868 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	429a      	cmp	r2, r3
 8007834:	d107      	bne.n	8007846 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2204      	movs	r2, #4
 800783a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007844:	e010      	b.n	8007868 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	429a      	cmp	r2, r3
 800784e:	d107      	bne.n	8007860 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2208      	movs	r2, #8
 8007854:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800785e:	e003      	b.n	8007868 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f7ff ffb4 	bl	80077d6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	771a      	strb	r2, [r3, #28]
}
 8007874:	bf00      	nop
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007888:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	429a      	cmp	r2, r3
 8007892:	d10f      	bne.n	80078b4 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2201      	movs	r2, #1
 8007898:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d146      	bne.n	8007930 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078b2:	e03d      	b.n	8007930 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d10f      	bne.n	80078de <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2202      	movs	r2, #2
 80078c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d131      	bne.n	8007930 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078dc:	e028      	b.n	8007930 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d10f      	bne.n	8007908 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2204      	movs	r2, #4
 80078ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d11c      	bne.n	8007930 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007906:	e013      	b.n	8007930 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	429a      	cmp	r2, r3
 8007910:	d10e      	bne.n	8007930 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2208      	movs	r2, #8
 8007916:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d107      	bne.n	8007930 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7ff ff28 	bl	8007786 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	771a      	strb	r2, [r3, #28]
}
 800793c:	bf00      	nop
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	429a      	cmp	r2, r3
 800795a:	d103      	bne.n	8007964 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2201      	movs	r2, #1
 8007960:	771a      	strb	r2, [r3, #28]
 8007962:	e019      	b.n	8007998 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	429a      	cmp	r2, r3
 800796c:	d103      	bne.n	8007976 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2202      	movs	r2, #2
 8007972:	771a      	strb	r2, [r3, #28]
 8007974:	e010      	b.n	8007998 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	429a      	cmp	r2, r3
 800797e:	d103      	bne.n	8007988 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2204      	movs	r2, #4
 8007984:	771a      	strb	r2, [r3, #28]
 8007986:	e007      	b.n	8007998 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	429a      	cmp	r2, r3
 8007990:	d102      	bne.n	8007998 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2208      	movs	r2, #8
 8007996:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f7ff fefe 	bl	800779a <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	771a      	strb	r2, [r3, #28]
}
 80079a4:	bf00      	nop
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a34      	ldr	r2, [pc, #208]	; (8007a90 <TIM_Base_SetConfig+0xe4>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00f      	beq.n	80079e4 <TIM_Base_SetConfig+0x38>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ca:	d00b      	beq.n	80079e4 <TIM_Base_SetConfig+0x38>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a31      	ldr	r2, [pc, #196]	; (8007a94 <TIM_Base_SetConfig+0xe8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d007      	beq.n	80079e4 <TIM_Base_SetConfig+0x38>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a30      	ldr	r2, [pc, #192]	; (8007a98 <TIM_Base_SetConfig+0xec>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d003      	beq.n	80079e4 <TIM_Base_SetConfig+0x38>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a2f      	ldr	r2, [pc, #188]	; (8007a9c <TIM_Base_SetConfig+0xf0>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d108      	bne.n	80079f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a25      	ldr	r2, [pc, #148]	; (8007a90 <TIM_Base_SetConfig+0xe4>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d01b      	beq.n	8007a36 <TIM_Base_SetConfig+0x8a>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a04:	d017      	beq.n	8007a36 <TIM_Base_SetConfig+0x8a>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a22      	ldr	r2, [pc, #136]	; (8007a94 <TIM_Base_SetConfig+0xe8>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d013      	beq.n	8007a36 <TIM_Base_SetConfig+0x8a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a21      	ldr	r2, [pc, #132]	; (8007a98 <TIM_Base_SetConfig+0xec>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00f      	beq.n	8007a36 <TIM_Base_SetConfig+0x8a>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a20      	ldr	r2, [pc, #128]	; (8007a9c <TIM_Base_SetConfig+0xf0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00b      	beq.n	8007a36 <TIM_Base_SetConfig+0x8a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a1f      	ldr	r2, [pc, #124]	; (8007aa0 <TIM_Base_SetConfig+0xf4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d007      	beq.n	8007a36 <TIM_Base_SetConfig+0x8a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a1e      	ldr	r2, [pc, #120]	; (8007aa4 <TIM_Base_SetConfig+0xf8>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d003      	beq.n	8007a36 <TIM_Base_SetConfig+0x8a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a1d      	ldr	r2, [pc, #116]	; (8007aa8 <TIM_Base_SetConfig+0xfc>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d108      	bne.n	8007a48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a08      	ldr	r2, [pc, #32]	; (8007a90 <TIM_Base_SetConfig+0xe4>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d103      	bne.n	8007a7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	691a      	ldr	r2, [r3, #16]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	615a      	str	r2, [r3, #20]
}
 8007a82:	bf00      	nop
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	40010000 	.word	0x40010000
 8007a94:	40000400 	.word	0x40000400
 8007a98:	40000800 	.word	0x40000800
 8007a9c:	40000c00 	.word	0x40000c00
 8007aa0:	40014000 	.word	0x40014000
 8007aa4:	40014400 	.word	0x40014400
 8007aa8:	40014800 	.word	0x40014800

08007aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	f023 0201 	bic.w	r2, r3, #1
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0303 	bic.w	r3, r3, #3
 8007ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f023 0302 	bic.w	r3, r3, #2
 8007af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a1c      	ldr	r2, [pc, #112]	; (8007b74 <TIM_OC1_SetConfig+0xc8>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d10c      	bne.n	8007b22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f023 0308 	bic.w	r3, r3, #8
 8007b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f023 0304 	bic.w	r3, r3, #4
 8007b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a13      	ldr	r2, [pc, #76]	; (8007b74 <TIM_OC1_SetConfig+0xc8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d111      	bne.n	8007b4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	621a      	str	r2, [r3, #32]
}
 8007b68:	bf00      	nop
 8007b6a:	371c      	adds	r7, #28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	40010000 	.word	0x40010000

08007b78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	f023 0210 	bic.w	r2, r3, #16
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	021b      	lsls	r3, r3, #8
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f023 0320 	bic.w	r3, r3, #32
 8007bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	011b      	lsls	r3, r3, #4
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a1e      	ldr	r2, [pc, #120]	; (8007c4c <TIM_OC2_SetConfig+0xd4>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d10d      	bne.n	8007bf4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	011b      	lsls	r3, r3, #4
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a15      	ldr	r2, [pc, #84]	; (8007c4c <TIM_OC2_SetConfig+0xd4>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d113      	bne.n	8007c24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	40010000 	.word	0x40010000

08007c50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0303 	bic.w	r3, r3, #3
 8007c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	021b      	lsls	r3, r3, #8
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a1d      	ldr	r2, [pc, #116]	; (8007d20 <TIM_OC3_SetConfig+0xd0>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d10d      	bne.n	8007cca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	021b      	lsls	r3, r3, #8
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a14      	ldr	r2, [pc, #80]	; (8007d20 <TIM_OC3_SetConfig+0xd0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d113      	bne.n	8007cfa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	621a      	str	r2, [r3, #32]
}
 8007d14:	bf00      	nop
 8007d16:	371c      	adds	r7, #28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	40010000 	.word	0x40010000

08007d24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	021b      	lsls	r3, r3, #8
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	031b      	lsls	r3, r3, #12
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a10      	ldr	r2, [pc, #64]	; (8007dc0 <TIM_OC4_SetConfig+0x9c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d109      	bne.n	8007d98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	019b      	lsls	r3, r3, #6
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	621a      	str	r2, [r3, #32]
}
 8007db2:	bf00      	nop
 8007db4:	371c      	adds	r7, #28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	40010000 	.word	0x40010000

08007dc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	f023 0201 	bic.w	r2, r3, #1
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4a24      	ldr	r2, [pc, #144]	; (8007e80 <TIM_TI1_SetConfig+0xbc>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d013      	beq.n	8007e1a <TIM_TI1_SetConfig+0x56>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df8:	d00f      	beq.n	8007e1a <TIM_TI1_SetConfig+0x56>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	4a21      	ldr	r2, [pc, #132]	; (8007e84 <TIM_TI1_SetConfig+0xc0>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d00b      	beq.n	8007e1a <TIM_TI1_SetConfig+0x56>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	4a20      	ldr	r2, [pc, #128]	; (8007e88 <TIM_TI1_SetConfig+0xc4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d007      	beq.n	8007e1a <TIM_TI1_SetConfig+0x56>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4a1f      	ldr	r2, [pc, #124]	; (8007e8c <TIM_TI1_SetConfig+0xc8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d003      	beq.n	8007e1a <TIM_TI1_SetConfig+0x56>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	4a1e      	ldr	r2, [pc, #120]	; (8007e90 <TIM_TI1_SetConfig+0xcc>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d101      	bne.n	8007e1e <TIM_TI1_SetConfig+0x5a>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e000      	b.n	8007e20 <TIM_TI1_SetConfig+0x5c>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d008      	beq.n	8007e36 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	f023 0303 	bic.w	r3, r3, #3
 8007e2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]
 8007e34:	e003      	b.n	8007e3e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f043 0301 	orr.w	r3, r3, #1
 8007e3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	011b      	lsls	r3, r3, #4
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	f023 030a 	bic.w	r3, r3, #10
 8007e58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f003 030a 	and.w	r3, r3, #10
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	621a      	str	r2, [r3, #32]
}
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40010000 	.word	0x40010000
 8007e84:	40000400 	.word	0x40000400
 8007e88:	40000800 	.word	0x40000800
 8007e8c:	40000c00 	.word	0x40000c00
 8007e90:	40014000 	.word	0x40014000

08007e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	f023 0201 	bic.w	r2, r3, #1
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	011b      	lsls	r3, r3, #4
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f023 030a 	bic.w	r3, r3, #10
 8007ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	621a      	str	r2, [r3, #32]
}
 8007ee6:	bf00      	nop
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b087      	sub	sp, #28
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	60f8      	str	r0, [r7, #12]
 8007efa:	60b9      	str	r1, [r7, #8]
 8007efc:	607a      	str	r2, [r7, #4]
 8007efe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	f023 0210 	bic.w	r2, r3, #16
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	021b      	lsls	r3, r3, #8
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	031b      	lsls	r3, r3, #12
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	011b      	lsls	r3, r3, #4
 8007f4a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	621a      	str	r2, [r3, #32]
}
 8007f60:	bf00      	nop
 8007f62:	371c      	adds	r7, #28
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	f023 0210 	bic.w	r2, r3, #16
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	031b      	lsls	r3, r3, #12
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	011b      	lsls	r3, r3, #4
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	621a      	str	r2, [r3, #32]
}
 8007fc0:	bf00      	nop
 8007fc2:	371c      	adds	r7, #28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b087      	sub	sp, #28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
 8007fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f023 0303 	bic.w	r3, r3, #3
 8007ff8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007ffa:	697a      	ldr	r2, [r7, #20]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008008:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	011b      	lsls	r3, r3, #4
 800800e:	b2db      	uxtb	r3, r3
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	4313      	orrs	r3, r2
 8008014:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800801c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	621a      	str	r2, [r3, #32]
}
 8008038:	bf00      	nop
 800803a:	371c      	adds	r7, #28
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008044:	b480      	push	{r7}
 8008046:	b087      	sub	sp, #28
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a1b      	ldr	r3, [r3, #32]
 8008068:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008070:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	021b      	lsls	r3, r3, #8
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	4313      	orrs	r3, r2
 800807a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008082:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	031b      	lsls	r3, r3, #12
 8008088:	b29b      	uxth	r3, r3
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	4313      	orrs	r3, r2
 800808e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008096:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	031b      	lsls	r3, r3, #12
 800809c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	621a      	str	r2, [r3, #32]
}
 80080b2:	bf00      	nop
 80080b4:	371c      	adds	r7, #28
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080be:	b480      	push	{r7}
 80080c0:	b085      	sub	sp, #20
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4313      	orrs	r3, r2
 80080dc:	f043 0307 	orr.w	r3, r3, #7
 80080e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	609a      	str	r2, [r3, #8]
}
 80080e8:	bf00      	nop
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
 8008100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800810e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	021a      	lsls	r2, r3, #8
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	431a      	orrs	r2, r3
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	4313      	orrs	r3, r2
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	4313      	orrs	r3, r2
 8008120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	609a      	str	r2, [r3, #8]
}
 8008128:	bf00      	nop
 800812a:	371c      	adds	r7, #28
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f003 031f 	and.w	r3, r3, #31
 8008146:	2201      	movs	r2, #1
 8008148:	fa02 f303 	lsl.w	r3, r2, r3
 800814c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6a1a      	ldr	r2, [r3, #32]
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	43db      	mvns	r3, r3
 8008156:	401a      	ands	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6a1a      	ldr	r2, [r3, #32]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f003 031f 	and.w	r3, r3, #31
 8008166:	6879      	ldr	r1, [r7, #4]
 8008168:	fa01 f303 	lsl.w	r3, r1, r3
 800816c:	431a      	orrs	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	621a      	str	r2, [r3, #32]
}
 8008172:	bf00      	nop
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008190:	2b01      	cmp	r3, #1
 8008192:	d101      	bne.n	8008198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008194:	2302      	movs	r3, #2
 8008196:	e050      	b.n	800823a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2202      	movs	r2, #2
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a1c      	ldr	r2, [pc, #112]	; (8008248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d018      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081e4:	d013      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a18      	ldr	r2, [pc, #96]	; (800824c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00e      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a16      	ldr	r2, [pc, #88]	; (8008250 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d009      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a15      	ldr	r2, [pc, #84]	; (8008254 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d004      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a13      	ldr	r2, [pc, #76]	; (8008258 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d10c      	bne.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	4313      	orrs	r3, r2
 800821e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	40010000 	.word	0x40010000
 800824c:	40000400 	.word	0x40000400
 8008250:	40000800 	.word	0x40000800
 8008254:	40000c00 	.word	0x40000c00
 8008258:	40014000 	.word	0x40014000

0800825c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e03f      	b.n	8008316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7fa f814 	bl	80022d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2224      	movs	r2, #36	; 0x24
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68da      	ldr	r2, [r3, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f829 	bl	8008320 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	691a      	ldr	r2, [r3, #16]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	695a      	ldr	r2, [r3, #20]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2220      	movs	r2, #32
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2220      	movs	r2, #32
 8008310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008324:	b0c0      	sub	sp, #256	; 0x100
 8008326:	af00      	add	r7, sp, #0
 8008328:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833c:	68d9      	ldr	r1, [r3, #12]
 800833e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	ea40 0301 	orr.w	r3, r0, r1
 8008348:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800834a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	431a      	orrs	r2, r3
 8008358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	431a      	orrs	r2, r3
 8008360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800836c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008378:	f021 010c 	bic.w	r1, r1, #12
 800837c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008386:	430b      	orrs	r3, r1
 8008388:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800838a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800839a:	6999      	ldr	r1, [r3, #24]
 800839c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	ea40 0301 	orr.w	r3, r0, r1
 80083a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	4b8f      	ldr	r3, [pc, #572]	; (80085ec <UART_SetConfig+0x2cc>)
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d005      	beq.n	80083c0 <UART_SetConfig+0xa0>
 80083b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	4b8d      	ldr	r3, [pc, #564]	; (80085f0 <UART_SetConfig+0x2d0>)
 80083bc:	429a      	cmp	r2, r3
 80083be:	d104      	bne.n	80083ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083c0:	f7fe fa8a 	bl	80068d8 <HAL_RCC_GetPCLK2Freq>
 80083c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80083c8:	e003      	b.n	80083d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083ca:	f7fe fa71 	bl	80068b0 <HAL_RCC_GetPCLK1Freq>
 80083ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083dc:	f040 810c 	bne.w	80085f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083e4:	2200      	movs	r2, #0
 80083e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80083ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80083f2:	4622      	mov	r2, r4
 80083f4:	462b      	mov	r3, r5
 80083f6:	1891      	adds	r1, r2, r2
 80083f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80083fa:	415b      	adcs	r3, r3
 80083fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008402:	4621      	mov	r1, r4
 8008404:	eb12 0801 	adds.w	r8, r2, r1
 8008408:	4629      	mov	r1, r5
 800840a:	eb43 0901 	adc.w	r9, r3, r1
 800840e:	f04f 0200 	mov.w	r2, #0
 8008412:	f04f 0300 	mov.w	r3, #0
 8008416:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800841a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800841e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008422:	4690      	mov	r8, r2
 8008424:	4699      	mov	r9, r3
 8008426:	4623      	mov	r3, r4
 8008428:	eb18 0303 	adds.w	r3, r8, r3
 800842c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008430:	462b      	mov	r3, r5
 8008432:	eb49 0303 	adc.w	r3, r9, r3
 8008436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800843a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008446:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800844a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800844e:	460b      	mov	r3, r1
 8008450:	18db      	adds	r3, r3, r3
 8008452:	653b      	str	r3, [r7, #80]	; 0x50
 8008454:	4613      	mov	r3, r2
 8008456:	eb42 0303 	adc.w	r3, r2, r3
 800845a:	657b      	str	r3, [r7, #84]	; 0x54
 800845c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008460:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008464:	f7f8 fbe4 	bl	8000c30 <__aeabi_uldivmod>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4b61      	ldr	r3, [pc, #388]	; (80085f4 <UART_SetConfig+0x2d4>)
 800846e:	fba3 2302 	umull	r2, r3, r3, r2
 8008472:	095b      	lsrs	r3, r3, #5
 8008474:	011c      	lsls	r4, r3, #4
 8008476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800847a:	2200      	movs	r2, #0
 800847c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008480:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008484:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008488:	4642      	mov	r2, r8
 800848a:	464b      	mov	r3, r9
 800848c:	1891      	adds	r1, r2, r2
 800848e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008490:	415b      	adcs	r3, r3
 8008492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008494:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008498:	4641      	mov	r1, r8
 800849a:	eb12 0a01 	adds.w	sl, r2, r1
 800849e:	4649      	mov	r1, r9
 80084a0:	eb43 0b01 	adc.w	fp, r3, r1
 80084a4:	f04f 0200 	mov.w	r2, #0
 80084a8:	f04f 0300 	mov.w	r3, #0
 80084ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80084b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084b8:	4692      	mov	sl, r2
 80084ba:	469b      	mov	fp, r3
 80084bc:	4643      	mov	r3, r8
 80084be:	eb1a 0303 	adds.w	r3, sl, r3
 80084c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084c6:	464b      	mov	r3, r9
 80084c8:	eb4b 0303 	adc.w	r3, fp, r3
 80084cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80084e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80084e4:	460b      	mov	r3, r1
 80084e6:	18db      	adds	r3, r3, r3
 80084e8:	643b      	str	r3, [r7, #64]	; 0x40
 80084ea:	4613      	mov	r3, r2
 80084ec:	eb42 0303 	adc.w	r3, r2, r3
 80084f0:	647b      	str	r3, [r7, #68]	; 0x44
 80084f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80084fa:	f7f8 fb99 	bl	8000c30 <__aeabi_uldivmod>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4611      	mov	r1, r2
 8008504:	4b3b      	ldr	r3, [pc, #236]	; (80085f4 <UART_SetConfig+0x2d4>)
 8008506:	fba3 2301 	umull	r2, r3, r3, r1
 800850a:	095b      	lsrs	r3, r3, #5
 800850c:	2264      	movs	r2, #100	; 0x64
 800850e:	fb02 f303 	mul.w	r3, r2, r3
 8008512:	1acb      	subs	r3, r1, r3
 8008514:	00db      	lsls	r3, r3, #3
 8008516:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800851a:	4b36      	ldr	r3, [pc, #216]	; (80085f4 <UART_SetConfig+0x2d4>)
 800851c:	fba3 2302 	umull	r2, r3, r3, r2
 8008520:	095b      	lsrs	r3, r3, #5
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008528:	441c      	add	r4, r3
 800852a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800852e:	2200      	movs	r2, #0
 8008530:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008534:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008538:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800853c:	4642      	mov	r2, r8
 800853e:	464b      	mov	r3, r9
 8008540:	1891      	adds	r1, r2, r2
 8008542:	63b9      	str	r1, [r7, #56]	; 0x38
 8008544:	415b      	adcs	r3, r3
 8008546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008548:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800854c:	4641      	mov	r1, r8
 800854e:	1851      	adds	r1, r2, r1
 8008550:	6339      	str	r1, [r7, #48]	; 0x30
 8008552:	4649      	mov	r1, r9
 8008554:	414b      	adcs	r3, r1
 8008556:	637b      	str	r3, [r7, #52]	; 0x34
 8008558:	f04f 0200 	mov.w	r2, #0
 800855c:	f04f 0300 	mov.w	r3, #0
 8008560:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008564:	4659      	mov	r1, fp
 8008566:	00cb      	lsls	r3, r1, #3
 8008568:	4651      	mov	r1, sl
 800856a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800856e:	4651      	mov	r1, sl
 8008570:	00ca      	lsls	r2, r1, #3
 8008572:	4610      	mov	r0, r2
 8008574:	4619      	mov	r1, r3
 8008576:	4603      	mov	r3, r0
 8008578:	4642      	mov	r2, r8
 800857a:	189b      	adds	r3, r3, r2
 800857c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008580:	464b      	mov	r3, r9
 8008582:	460a      	mov	r2, r1
 8008584:	eb42 0303 	adc.w	r3, r2, r3
 8008588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800858c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008598:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800859c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80085a0:	460b      	mov	r3, r1
 80085a2:	18db      	adds	r3, r3, r3
 80085a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80085a6:	4613      	mov	r3, r2
 80085a8:	eb42 0303 	adc.w	r3, r2, r3
 80085ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80085b6:	f7f8 fb3b 	bl	8000c30 <__aeabi_uldivmod>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <UART_SetConfig+0x2d4>)
 80085c0:	fba3 1302 	umull	r1, r3, r3, r2
 80085c4:	095b      	lsrs	r3, r3, #5
 80085c6:	2164      	movs	r1, #100	; 0x64
 80085c8:	fb01 f303 	mul.w	r3, r1, r3
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	3332      	adds	r3, #50	; 0x32
 80085d2:	4a08      	ldr	r2, [pc, #32]	; (80085f4 <UART_SetConfig+0x2d4>)
 80085d4:	fba2 2303 	umull	r2, r3, r2, r3
 80085d8:	095b      	lsrs	r3, r3, #5
 80085da:	f003 0207 	and.w	r2, r3, #7
 80085de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4422      	add	r2, r4
 80085e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085e8:	e105      	b.n	80087f6 <UART_SetConfig+0x4d6>
 80085ea:	bf00      	nop
 80085ec:	40011000 	.word	0x40011000
 80085f0:	40011400 	.word	0x40011400
 80085f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085fc:	2200      	movs	r2, #0
 80085fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008602:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008606:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800860a:	4642      	mov	r2, r8
 800860c:	464b      	mov	r3, r9
 800860e:	1891      	adds	r1, r2, r2
 8008610:	6239      	str	r1, [r7, #32]
 8008612:	415b      	adcs	r3, r3
 8008614:	627b      	str	r3, [r7, #36]	; 0x24
 8008616:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800861a:	4641      	mov	r1, r8
 800861c:	1854      	adds	r4, r2, r1
 800861e:	4649      	mov	r1, r9
 8008620:	eb43 0501 	adc.w	r5, r3, r1
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	00eb      	lsls	r3, r5, #3
 800862e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008632:	00e2      	lsls	r2, r4, #3
 8008634:	4614      	mov	r4, r2
 8008636:	461d      	mov	r5, r3
 8008638:	4643      	mov	r3, r8
 800863a:	18e3      	adds	r3, r4, r3
 800863c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008640:	464b      	mov	r3, r9
 8008642:	eb45 0303 	adc.w	r3, r5, r3
 8008646:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800864a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008656:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800865a:	f04f 0200 	mov.w	r2, #0
 800865e:	f04f 0300 	mov.w	r3, #0
 8008662:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008666:	4629      	mov	r1, r5
 8008668:	008b      	lsls	r3, r1, #2
 800866a:	4621      	mov	r1, r4
 800866c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008670:	4621      	mov	r1, r4
 8008672:	008a      	lsls	r2, r1, #2
 8008674:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008678:	f7f8 fada 	bl	8000c30 <__aeabi_uldivmod>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4b60      	ldr	r3, [pc, #384]	; (8008804 <UART_SetConfig+0x4e4>)
 8008682:	fba3 2302 	umull	r2, r3, r3, r2
 8008686:	095b      	lsrs	r3, r3, #5
 8008688:	011c      	lsls	r4, r3, #4
 800868a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800868e:	2200      	movs	r2, #0
 8008690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008694:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008698:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800869c:	4642      	mov	r2, r8
 800869e:	464b      	mov	r3, r9
 80086a0:	1891      	adds	r1, r2, r2
 80086a2:	61b9      	str	r1, [r7, #24]
 80086a4:	415b      	adcs	r3, r3
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086ac:	4641      	mov	r1, r8
 80086ae:	1851      	adds	r1, r2, r1
 80086b0:	6139      	str	r1, [r7, #16]
 80086b2:	4649      	mov	r1, r9
 80086b4:	414b      	adcs	r3, r1
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	f04f 0200 	mov.w	r2, #0
 80086bc:	f04f 0300 	mov.w	r3, #0
 80086c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086c4:	4659      	mov	r1, fp
 80086c6:	00cb      	lsls	r3, r1, #3
 80086c8:	4651      	mov	r1, sl
 80086ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086ce:	4651      	mov	r1, sl
 80086d0:	00ca      	lsls	r2, r1, #3
 80086d2:	4610      	mov	r0, r2
 80086d4:	4619      	mov	r1, r3
 80086d6:	4603      	mov	r3, r0
 80086d8:	4642      	mov	r2, r8
 80086da:	189b      	adds	r3, r3, r2
 80086dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086e0:	464b      	mov	r3, r9
 80086e2:	460a      	mov	r2, r1
 80086e4:	eb42 0303 	adc.w	r3, r2, r3
 80086e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80086f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80086f8:	f04f 0200 	mov.w	r2, #0
 80086fc:	f04f 0300 	mov.w	r3, #0
 8008700:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008704:	4649      	mov	r1, r9
 8008706:	008b      	lsls	r3, r1, #2
 8008708:	4641      	mov	r1, r8
 800870a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800870e:	4641      	mov	r1, r8
 8008710:	008a      	lsls	r2, r1, #2
 8008712:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008716:	f7f8 fa8b 	bl	8000c30 <__aeabi_uldivmod>
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	4b39      	ldr	r3, [pc, #228]	; (8008804 <UART_SetConfig+0x4e4>)
 8008720:	fba3 1302 	umull	r1, r3, r3, r2
 8008724:	095b      	lsrs	r3, r3, #5
 8008726:	2164      	movs	r1, #100	; 0x64
 8008728:	fb01 f303 	mul.w	r3, r1, r3
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	3332      	adds	r3, #50	; 0x32
 8008732:	4a34      	ldr	r2, [pc, #208]	; (8008804 <UART_SetConfig+0x4e4>)
 8008734:	fba2 2303 	umull	r2, r3, r2, r3
 8008738:	095b      	lsrs	r3, r3, #5
 800873a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800873e:	441c      	add	r4, r3
 8008740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008744:	2200      	movs	r2, #0
 8008746:	673b      	str	r3, [r7, #112]	; 0x70
 8008748:	677a      	str	r2, [r7, #116]	; 0x74
 800874a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800874e:	4642      	mov	r2, r8
 8008750:	464b      	mov	r3, r9
 8008752:	1891      	adds	r1, r2, r2
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	415b      	adcs	r3, r3
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800875e:	4641      	mov	r1, r8
 8008760:	1851      	adds	r1, r2, r1
 8008762:	6039      	str	r1, [r7, #0]
 8008764:	4649      	mov	r1, r9
 8008766:	414b      	adcs	r3, r1
 8008768:	607b      	str	r3, [r7, #4]
 800876a:	f04f 0200 	mov.w	r2, #0
 800876e:	f04f 0300 	mov.w	r3, #0
 8008772:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008776:	4659      	mov	r1, fp
 8008778:	00cb      	lsls	r3, r1, #3
 800877a:	4651      	mov	r1, sl
 800877c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008780:	4651      	mov	r1, sl
 8008782:	00ca      	lsls	r2, r1, #3
 8008784:	4610      	mov	r0, r2
 8008786:	4619      	mov	r1, r3
 8008788:	4603      	mov	r3, r0
 800878a:	4642      	mov	r2, r8
 800878c:	189b      	adds	r3, r3, r2
 800878e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008790:	464b      	mov	r3, r9
 8008792:	460a      	mov	r2, r1
 8008794:	eb42 0303 	adc.w	r3, r2, r3
 8008798:	66fb      	str	r3, [r7, #108]	; 0x6c
 800879a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	663b      	str	r3, [r7, #96]	; 0x60
 80087a4:	667a      	str	r2, [r7, #100]	; 0x64
 80087a6:	f04f 0200 	mov.w	r2, #0
 80087aa:	f04f 0300 	mov.w	r3, #0
 80087ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80087b2:	4649      	mov	r1, r9
 80087b4:	008b      	lsls	r3, r1, #2
 80087b6:	4641      	mov	r1, r8
 80087b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087bc:	4641      	mov	r1, r8
 80087be:	008a      	lsls	r2, r1, #2
 80087c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80087c4:	f7f8 fa34 	bl	8000c30 <__aeabi_uldivmod>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4b0d      	ldr	r3, [pc, #52]	; (8008804 <UART_SetConfig+0x4e4>)
 80087ce:	fba3 1302 	umull	r1, r3, r3, r2
 80087d2:	095b      	lsrs	r3, r3, #5
 80087d4:	2164      	movs	r1, #100	; 0x64
 80087d6:	fb01 f303 	mul.w	r3, r1, r3
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	011b      	lsls	r3, r3, #4
 80087de:	3332      	adds	r3, #50	; 0x32
 80087e0:	4a08      	ldr	r2, [pc, #32]	; (8008804 <UART_SetConfig+0x4e4>)
 80087e2:	fba2 2303 	umull	r2, r3, r2, r3
 80087e6:	095b      	lsrs	r3, r3, #5
 80087e8:	f003 020f 	and.w	r2, r3, #15
 80087ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4422      	add	r2, r4
 80087f4:	609a      	str	r2, [r3, #8]
}
 80087f6:	bf00      	nop
 80087f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80087fc:	46bd      	mov	sp, r7
 80087fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008802:	bf00      	nop
 8008804:	51eb851f 	.word	0x51eb851f

08008808 <__libc_init_array>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	4d0d      	ldr	r5, [pc, #52]	; (8008840 <__libc_init_array+0x38>)
 800880c:	4c0d      	ldr	r4, [pc, #52]	; (8008844 <__libc_init_array+0x3c>)
 800880e:	1b64      	subs	r4, r4, r5
 8008810:	10a4      	asrs	r4, r4, #2
 8008812:	2600      	movs	r6, #0
 8008814:	42a6      	cmp	r6, r4
 8008816:	d109      	bne.n	800882c <__libc_init_array+0x24>
 8008818:	4d0b      	ldr	r5, [pc, #44]	; (8008848 <__libc_init_array+0x40>)
 800881a:	4c0c      	ldr	r4, [pc, #48]	; (800884c <__libc_init_array+0x44>)
 800881c:	f000 f820 	bl	8008860 <_init>
 8008820:	1b64      	subs	r4, r4, r5
 8008822:	10a4      	asrs	r4, r4, #2
 8008824:	2600      	movs	r6, #0
 8008826:	42a6      	cmp	r6, r4
 8008828:	d105      	bne.n	8008836 <__libc_init_array+0x2e>
 800882a:	bd70      	pop	{r4, r5, r6, pc}
 800882c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008830:	4798      	blx	r3
 8008832:	3601      	adds	r6, #1
 8008834:	e7ee      	b.n	8008814 <__libc_init_array+0xc>
 8008836:	f855 3b04 	ldr.w	r3, [r5], #4
 800883a:	4798      	blx	r3
 800883c:	3601      	adds	r6, #1
 800883e:	e7f2      	b.n	8008826 <__libc_init_array+0x1e>
 8008840:	080088a0 	.word	0x080088a0
 8008844:	080088a0 	.word	0x080088a0
 8008848:	080088a0 	.word	0x080088a0
 800884c:	080088a4 	.word	0x080088a4

08008850 <memset>:
 8008850:	4402      	add	r2, r0
 8008852:	4603      	mov	r3, r0
 8008854:	4293      	cmp	r3, r2
 8008856:	d100      	bne.n	800885a <memset+0xa>
 8008858:	4770      	bx	lr
 800885a:	f803 1b01 	strb.w	r1, [r3], #1
 800885e:	e7f9      	b.n	8008854 <memset+0x4>

08008860 <_init>:
 8008860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008862:	bf00      	nop
 8008864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008866:	bc08      	pop	{r3}
 8008868:	469e      	mov	lr, r3
 800886a:	4770      	bx	lr

0800886c <_fini>:
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886e:	bf00      	nop
 8008870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008872:	bc08      	pop	{r3}
 8008874:	469e      	mov	lr, r3
 8008876:	4770      	bx	lr
